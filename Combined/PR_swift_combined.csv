pr_number,created_at,merged_at,author,number_of_comments,number_of_review_comments,number_of_commits,lines_of_code_changed,number_of_files_changed,number_of_reviewers,number_of_approvals,labels,time_to_first_response,number_of_assignees,review_duration,number_of_changes_requested,number_of_build_runs,number_of_build_failures,number_of_linked_issues,time_since_last_commit,test_coverage,number_of_reviews_requested,number_of_revisions,number_of_milestones,dependency_changes,comment_authors,issue_comments_text,reviews_text,issue_text,review_comments
77930,2024-12-03T19:58:16Z,2024-12-05T19:32:45Z,egorzhdan,1,0,1,8,2,2,2,['c++ interop'],12.0,0,1728758.0,0,0,0,0,374309.405526,,0,1,0,False,['egorzhdan'],@swift-ci please test,,"**Explanation**: The iOS/watchOS/tvOS deployment targets for Cxx and CxxStdlib binaries got unintentionally bumped in b87b263, which is causing build failures when trying to back-deploy Swift libraries. This reverts the deployment targets to the older versions.
**Scope**: Changes the CMake build script for Cxx and CxxStdlib targets.
**Risk**: Low, this only affects two C++ interop overlay modules, and it only brings back the pre-6.0.2 behavior.
**Issue**: rdar://140823785 / resolves https://github.com/swiftlang/swift/issues/77909
**Reviewer**: @DougGregor @Xazax-hun @drodriguez 

Original PR: https://github.com/swiftlang/swift/pull/77921

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
73373,2024-05-01T16:34:52Z,2024-05-01T16:44:14Z,aschwaighofer,0,2,1,117,16,2,0,[],,0,20397387.0,0,0,0,0,380284.621418,,0,1,0,False,[],,,rdar://127263080,"@asl I have disabled this test for now

It looks like it needs updating because upstream LLVM canonicalizes GEPs down to `i8` typed rather than a specific `%my_type`. @kovdan01 "
77349,2024-11-01T18:11:26Z,2024-11-08T20:25:48Z,ian-twilightcoder,1,0,1,6,1,1,1,[],836.0,0,4511940.0,0,0,0,0,362338.01798,,0,1,0,False,['ian-twilightcoder'],@swift-ci smoke test,,"When copying the clang builtin headers, the module maps need to go with them.

rdar://139084511",
78345,2024-12-22T05:54:38Z,2024-12-22T22:48:51Z,DougGregor,3,0,1,112,6,1,1,[],6.0,0,60868.0,0,0,0,0,451219.57917,,4,1,0,False,"['DougGregor', 'shahmishal']",@swift-ci please test @swift-ci please build toolchain Merged to unblock nightly toolchain. ,,"Reverts swiftlang/swift#78327. It's breaking the macOS toolchain build with 

```
/Users/ec2-user/jenkins/workspace/swift-PR-toolchain-macos/branch-main/buildbot_osx/swift-macosx-x86_64/lib/swift/xros/Swift.swiftmodule/arm64-apple-xros.private.swiftinterface:2371:2: error: '@backDeployed' requires that global function '_diagnoseUnavailableCodeReached()' have a body
 2369 | @usableFromInline
 2370 | @inline(never) internal func _diagnoseUnexpectedEnumCase<SwitchedValue>(type: SwitchedValue.Type) -> Swift.Never
 2371 | @backDeployed(before: macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0)
      |  `- error: '@backDeployed' requires that global function '_diagnoseUnavailableCodeReached()' have a body
 2372 | @usableFromInline
 2373 | @inline(never) @_semantics(""unavailable_code_reached"") internal func _diagnoseUnavailableCodeReached() -> Swift.Never
```

It's not that this PR is wrong, it's that it uncovered an existing problem.",
78327,2024-12-20T19:54:38Z,2024-12-21T02:00:03Z,tshortli,4,0,1,112,6,2,2,[],461.0,0,122467.0,0,0,0,0,512020.770366,,4,1,0,False,"['DougGregor', 'tshortli']","@swift-ci please test I hit an issue with this diagnostic in a toolchain build in https://github.com/swiftlang/swift/pull/78332, but it feels more like a dependency-related build issue than a problem with this PR.  > I hit an issue with this diagnostic in a toolchain build in https://github.com/swiftlang/swift/pull/78332, but it feels more like a dependency-related build issue than a problem with this PR. 

Ah yeah, I think this PR was premature. We need to fix the issue that inspired this change first. PR testing gave me a false sense of security, sorry about that! Yeah, the toolchain build succeeds with this reverted and fails with it in place, so I put up a revert PR (https://github.com/swiftlang/swift/pull/78345).Thank you for diagnosing this early!",Thank you for diagnosing this early!,"A `@backDeployed` function printed in a `.swiftinterface` must have a function body so that SILGen can emit a fallback copy to call when the back deployed function is unavailable. Previously, the compiler would crash in SILGen when compiling an interface containing a back deployed function without a body.

Resolves rdar://141593108.
",
78331,2024-12-20T22:57:52Z,2024-12-21T06:19:37Z,cachemeifyoucan,2,0,1,98,3,1,1,[],11.0,0,26505.0,0,0,0,0,596989.122903,,0,1,0,False,['cachemeifyoucan'],@swift-ci please smoke test @swift-ci please smoke testThanks! ,Thanks! ,"When planning for a swift source module, it should not get build commands for its module dependencies. Those dependencies should be planned and added by swift-driver.

This is another regression from #76700 that causes unnecessary increase of build command-line size.

rdar://141843125

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78305,2024-12-19T22:42:36Z,2024-12-21T05:17:00Z,xedin,3,0,4,81,4,1,1,[],19.0,0,110064.0,0,0,0,0,600748.066766,,1,4,0,False,['xedin'],@swift-ci please test @swift-ci please clean test @swift-ci please test,,"Reverts https://github.com/swiftlang/swift/pull/76487, https://github.com/swiftlang/swift/pull/77153 and https://github.com/swiftlang/swift/pull/76952

---

- Explanation:
  
  Revert changes that caused performance regressions in qualification of `6.1` and are already reverted from `main`.

- Main Branch PR: https://github.com/swiftlang/swift/pull/77936, https://github.com/swiftlang/swift/pull/77653

- Risk: Very Low (Reverts of new functionality).

- Reviewed By: @hborla @slavapestov 

- Testing: Even though the comments are reverts the regression tests are preserved.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78328,2024-12-20T20:01:33Z,2024-12-21T04:50:25Z,augusto2112,16,1,2,49,3,3,2,[],7.0,0,31732.0,0,0,0,0,602343.437421,,3,2,0,False,"['augusto2112', 'hjyamauchi']","@swift-ci test @augusto2112 It seems like I still locally get a crash with this PR. I will double-check.
```
Failed to reconstruct type for $s11SwiftFormat24DocumentationCommentTextV13extractedFromACSg08CompilerA6Syntax6TriviaV_tcfc4LineL_VD
Original type:
(struct_type decl=""SwiftFormat.(file).DocumentationCommentText.init(extractedFrom:).Line@S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\DocumentationCommentText.swift:56:12"")
Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.
Pass '-Xfrontend -disable-round-trip-debug-types' to disable this assertion.
Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.
Stack dump:
0.      Program arguments: C:\\Users\\hiroshi\\source\\b\\5\\bin\\swiftc.exe -frontend -c S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\Configuration+Default.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\Configuration.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\DebugOptions.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\Finding.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\FindingCategorizing.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\Indent.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\Selection.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\SwiftFormatError.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\SwiftFormatter.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\API\\SwiftLinter.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\Context.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\DocumentationComment.swift -primary-file S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\DocumentationCommentText.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\Finding+Convenience.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\FindingEmitter.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\FormatPipeline.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\FunctionDeclSyntax+Convenience.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\ImportsXCTestVisitor.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\LazySplitSequence.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\LintPipeline.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\ModifierListSyntax+Convenience.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\Parsing.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\Pipelines+Generated.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\RememberingIterator.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\Rule.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\RuleBasedFindingCategory.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\RuleMask.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\RuleNameCache+Generated.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\RuleRegistry+Generated.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\RuleState.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\SyntaxFormatRule.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\SyntaxLintRule.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\SyntaxProtocol+Convenience.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\Trivia+Convenience.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\WithAttributesSyntax+Convenience.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Core\\WithSemicolonSyntax.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\Comment.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\Indent+Length.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\PrettyPrint.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\PrettyPrintBuffer.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\PrettyPrintFindingCategory.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\Token.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\TokenStreamCreator.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\Verbatim.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\WhitespaceFindingCategory.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\PrettyPrint\\WhitespaceLinter.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\AllPublicDeclarationsHaveDocumentation.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\AlwaysUseLiteralForEmptyCollectionInit.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\AlwaysUseLowerCamelCase.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\AmbiguousTrailingClosureOverload.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\AvoidRetroactiveConformances.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\BeginDocumentationCommentWithOneLineSummary.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\DoNotUseSemicolons.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\DontRepeatTypeInStaticProperties.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\FileScopedDeclarationPrivacy.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\FullyIndirectEnum.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\GroupNumericLiterals.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\IdentifiersMustBeASCII.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NeverForceUnwrap.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NeverUseForceTry.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NeverUseImplicitlyUnwrappedOptionals.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoAccessLevelOnExtensionDeclaration.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoAssignmentInExpressions.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoBlockComments.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoCasesWithOnlyFallthrough.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoEmptyLineOpeningClosingBraces.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoEmptyTrailingClosureParentheses.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoLabelsInCasePatterns.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoLeadingUnderscores.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoParensAroundConditions.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoPlaygroundLiterals.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\NoVoidReturnOnFunctionSignature.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\OmitExplicitReturns.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\OneCasePerLine.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\OneVariableDeclarationPerLine.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\OnlyOneTrailingClosureArgument.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\OrderedImports.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\ReplaceForEachWithForLoop.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\ReturnVoidInsteadOfEmptyTuple.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\TypeNamesShouldBeCapitalized.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseEarlyExits.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseExplicitNilCheckInConditions.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseLetInEveryBoundCaseVariable.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseShorthandTypeNames.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseSingleLinePropertyGetter.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseSynthesizedInitializer.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseTripleSlashForDocumentationComments.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\UseWhereClausesInForLoops.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Rules\\ValidateDocumentationComments.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Utilities\\FileIterator.swift S:\\SourceCache\\swift-format\\Sources\\SwiftFormat\\Utilities\\URL+isRoot.swift -emit-module-path Sources\\SwiftFormat\\CMakeFiles\\SwiftFormat.dir\\Core\\DocumentationCommentText.swift.swiftmodule -emit-module-doc-path Sources\\SwiftFormat\\CMakeFiles\\SwiftFormat.dir\\Core\\DocumentationCommentText.swift.swiftdoc -emit-module-source-info-path Sources\\SwiftFormat\\CMakeFiles\\SwiftFormat.dir\\Core\\DocumentationCommentText.swift.swiftsourceinfo -emit-dependencies-path Sources\\SwiftFormat\\CMakeFiles\\SwiftFormat.dir\\Core\\DocumentationCommentText.swift.obj.d -target x86_64-unknown-windows-msvc -disable-objc-interop -sdk ""S:/Program Files/Swift/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"" -I S:\\b\\23\\swift -I S:\\SourceCache\\swift-markdown\\Sources\\CAtomic\\include -I S:\\b\\5\\.\\lib\\swift\\host -I ""S:\\Program Files\\Swift\\Toolchains\\0.0.0+Asserts\\usr\\include\\cmark_gfm"" -I ""S:\\Program Files\\Swift\\Toolchains\\0.0.0+Asserts\\usr\\include\\cmark_gfm_extensions"" -g -module-link-name SwiftFormat -O -D SwiftFormat_EXPORTS -in-process-plugin-server-path C:\\Users\\hiroshi\\source\\b\\5\\bin\\SwiftInProcPluginServer.dll -plugin-path C:\\Users\\hiroshi\\source\\b\\5\\bin -autolink-library oldnames -autolink-library msvcrt -Xcc -D_MT -Xcc -D_DLL -parse-as-library -module-name SwiftFormat -num-threads 32 -o Sources\\SwiftFormat\\CMakeFiles\\SwiftFormat.dir\\Core\\DocumentationCommentText.swift.obj
1.      Swift version 6.2-dev (LLVM aed73c6d65289c8, Swift ae88aaca8f76c02)
2.      Compiling with effective version 5.10
3.      While evaluating request IRGenRequest(IR Generation for file ""S:\SourceCache\swift-format\Sources\SwiftFormat\Core\DocumentationCommentText.swift"")
4.      While emitting IR SIL function ""@$s11SwiftFormat24DocumentationCommentTextV13extractedFromACSg08CompilerA6Syntax6TriviaV_tcfC"".
 for 'init(extractedFrom:)' (at S:\SourceCache\swift-format\Sources\SwiftFormat\Core\DocumentationCommentText.swift:54:10)
Exception Code: 0x80000003
 #0 0x00007ff7a0f38e95 HandleAbort S:\SourceCache\llvm-project\llvm\lib\Support\Windows\Signals.inc:429:0
 #1 0x00007ffdae6ae6d5 (C:\Windows\System32\ucrtbase.dll+0x7e6d5)
 #2 0x00007ffdae6af6e1 (C:\Windows\System32\ucrtbase.dll+0x7f6e1)
 #3 0x00007ff799778f30 `anonymous namespace'::IRGenDebugInfoImpl::getMangledName S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:1055:0
 #4 0x00007ff79977b9d7 `anonymous namespace'::IRGenDebugInfoImpl::getOrCreateType S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:2462:0
 #5 0x00007ff79977a123 `anonymous namespace'::IRGenDebugInfoImpl::getOrCreateContext S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:757:0
 #6 0x00007ff799774c5f `anonymous namespace'::IRGenDebugInfoImpl::emitFunction S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:3052:0
 #7 0x00007ff79977490c `anonymous namespace'::IRGenDebugInfoImpl::emitFunction S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:2994:0
 #8 0x00007ff79977b5c7 `anonymous namespace'::IRGenDebugInfoImpl::getOrCreateScope S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:2957:0
 #9 0x00007ff79976d33f llvm::operator!= S:\SourceCache\llvm-project\llvm\include\llvm\ADT\PointerUnion.h:208:0
#10 0x00007ff79976d33f llvm::ValueIsPresent<llvm::PointerUnion<swift::SILDebugScope const *,swift::SILFunction *>,void>::isPresent S:\SourceCache\llvm-project\llvm\include\llvm\Support\Casting.h:622:0
#11 0x00007ff79976d33f llvm::detail::isPresent S:\SourceCache\llvm-project\llvm\include\llvm\Support\Casting.h:630:0
#12 0x00007ff79976d33f llvm::dyn_cast_if_present S:\SourceCache\llvm-project\llvm\include\llvm\Support\Casting.h:739:0
#13 0x00007ff79976d33f llvm::PointerUnion<swift::SILDebugScope const *,swift::SILFunction *>::dyn_cast S:\SourceCache\llvm-project\llvm\include\llvm\ADT\PointerUnion.h:163:0
#14 0x00007ff79976d33f `anonymous namespace'::IRGenDebugInfoImpl::createInlinedAt S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:513:0
#15 0x00007ff79976d3c1 `anonymous namespace'::IRGenDebugInfoImpl::createInlinedAt S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:518:0
#16 0x00007ff79976d3c1 `anonymous namespace'::IRGenDebugInfoImpl::createInlinedAt S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:518:0
#17 0x00007ff79977f464 `anonymous namespace'::IRGenDebugInfoImpl::setCurrentLoc S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:2797:0
#18 0x00007ff79977f257 swift::irgen::IRGenDebugInfo::setCurrentLoc(class swift::irgen::IRBuilder &, class swift::SILDebugScope const *, class swift::SILLocation) S:\SourceCache\swift\lib\IRGen\IRGenDebugInfo.cpp:3807:0
#19 0x00007ff7998b5d60 swift::SILBasicBlock::args_end S:\SourceCache\swift\include\swift\SIL\SILBasicBlock.h:326:0
#20 0x00007ff7998b5d60 emitPHINodesForBBArgs S:\SourceCache\swift\lib\IRGen\IRGenSIL.cpp:2012:0
#21 0x00007ff7998b8464 `anonymous namespace'::IRGenSILFunction::emitSILFunction S:\SourceCache\swift\lib\IRGen\IRGenSIL.cpp:2661:0
#22 0x00007ff7998b7bbd swift::irgen::IRGenModule::emitSILFunction(class swift::SILFunction *) S:\SourceCache\swift\lib\IRGen\IRGenSIL.cpp:2573:0
#23 0x00007ff7996b9acc swift::irgen::CurrentIGMPtr::{dtor} S:\SourceCache\swift\lib\IRGen\IRGenModule.h:2019:0
#24 0x00007ff7996b9acc swift::irgen::IRGenerator::emitGlobalTopLevel(class std::vector<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class std::allocator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>> const &) S:\SourceCache\swift\lib\IRGen\GenDecl.cpp:1223:0
#25 0x00007ff799601f14 std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::{dtor} C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.38.33130\include\vector:765:0
#26 0x00007ff799601f14 swift::IRGenRequest::evaluate(class swift::Evaluator &, struct swift::IRGenDescriptor) const S:\SourceCache\swift\lib\IRGen\IRGen.cpp:1259:0
#27 0x00007ff79960ca56 swift::SimpleRequest<class swift::IRGenRequest, (struct swift::IRGenDescriptor), 17>::evaluateRequest(class swift::IRGenRequest const &, class swift::Evaluator &) S:\SourceCache\swift\include\swift\AST\SimpleRequest.h:313:0
#28 0x00007ff7995f6ecb swift::Evaluator::getResultUncached<class swift::IRGenRequest, class `class swift::GeneratedModule __cdecl swift::evaluateOrFatal<class swift::IRGenRequest>(class swift::Evaluator &, class swift::IRGenRequest)'::`2'::<lambda_1>>(class swift::IRGenRequest const &, class `class swift::GeneratedModule __cdecl swift::evaluateOrFatal<class swift::IRGenRequest>(class swift::Evaluator &, class swift::IRGenRequest)'::`2'::<lambda_1>) S:\SourceCache\swift\include\swift\AST\Evaluator.h:349:0
#29 0x00007ff79960669d swift::evaluateOrFatal S:\SourceCache\swift\include\swift\AST\Evaluator.h:448:0
#30 0x00007ff79960669d swift::performIRGeneration(class swift::FileUnit *, class swift::IRGenOptions const &, struct swift::TBDGenOptions const &, class std::unique_ptr<class swift::SILModule, struct std::default_delete<class swift::SILModule>>, class llvm::StringRef, class swift::PrimarySpecificPaths const &, class llvm::StringRef, class llvm::GlobalVariable **) S:\SourceCache\swift\lib\IRGen\IRGen.cpp:1690:0
#31 0x00007ff799167c40 performCompileStepsPostSILGen S:\SourceCache\swift\lib\FrontendTool\FrontendTool.cpp:1781:0
#32 0x00007ff79916840f std::unique_ptr<swift::SILModule,std::default_delete<swift::SILModule> >::{dtor} C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.38.33130\include\memory:3279:0
#33 0x00007ff79916840f swift::performCompileStepsPostSema(class swift::CompilerInstance &, int &, class swift::FrontendObserver *) S:\SourceCache\swift\lib\FrontendTool\FrontendTool.cpp:750:0
#34 0x00007ff799167028 performAction S:\SourceCache\swift\lib\FrontendTool\FrontendTool.cpp:1302:0
#35 0x00007ff7991675ab std::unique_ptr<swift::ASTContext,std::default_delete<swift::ASTContext> >::operator bool C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.38.33130\include\memory:3305:0
#36 0x00007ff7991675ab std::operator== C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.38.33130\include\memory:3550:0
#37 0x00007ff7991675ab std::operator!= C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.38.33130\include\memory:3561:0
#38 0x00007ff7991675ab swift::CompilerInstance::hasASTContext S:\SourceCache\swift\include\swift\Frontend\Frontend.h:604:0
#39 0x00007ff7991675ab performCompile S:\SourceCache\swift\lib\FrontendTool\FrontendTool.cpp:1376:0
#40 0x00007ff79916939b swift::performFrontend(class llvm::ArrayRef<char const *>, char const *, void *, class swift::FrontendObserver *) S:\SourceCache\swift\lib\FrontendTool\FrontendTool.cpp:2080:0
#41 0x00007ff798f9d356 run_driver S:\SourceCache\swift\lib\DriverTool\driver.cpp:443:0
#42 0x00007ff798f9cd6c swift::mainEntry(int, char const **) S:\SourceCache\swift\lib\DriverTool\driver.cpp:530:0
#43 0x00007ff7a0fb5d84 invoke_main D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:78:0
#44 0x00007ff7a0fb5d84 __scrt_common_main_seh D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288:0
#45 0x00007ffdaf6a259d (C:\Windows\System32\KERNEL32.DLL+0x1259d)
#46 0x00007ffdb124af38 (C:\Windows\SYSTEM32\ntdll.dll+0x5af38)
<unknown>:0: error: compile command failed due to signal -2147483645 (use -v to see invocation)
``` @swift-ci test @swift-ci test @hjyamauchi thanks for testing, could you try again with the latest commit? @swift-ci smoke test > @hjyamauchi thanks for testing, could you try again with the latest commit?

@augusto2112 Will do. I also added a reduced test here: https://github.com/swiftlang/swift/issues/78326#issue-2753360747 > > @hjyamauchi thanks for testing, could you try again with the latest commit?
> 
> @augusto2112 Will do. I also added a reduced test here: [#78326 (comment)](https://github.com/swiftlang/swift/issues/78326#issue-2753360747)

@augusto2112 The updated PR doesn't seem to fix the issue for me. That's surprising, let me check again if I'm missing some other case... @augusto2112 It might be useful to use the reduced test from here: https://github.com/swiftlang/swift/issues/78326#issue-2753360747 @hjyamauchi thanks, I was able to use your reproducer. It actually was not related to @_originallyDefinedIn as I thought, but something else entirely. I'm running the test suite locally and hopefully this will be the last iteration of the fix. @swift-ci test @hjyamauchi if you're around this should work with your test case now :) @swift-ci smoke test > @hjyamauchi if you're around this should work with your test case now :)

Testing It looks good!",,"Types with @_originallyDefinedIn cannot be round tripped,

Types declared inside functions have their mangling affected by the function signature. If the generic signature mentions an @_originallyDefinedIn type, the type inside the function cannot be round tripped either.

This commit disables round tripping for this scenario.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","```suggestion
        if (auto AFD = llvm::dyn_cast_or_null<AbstractFunctionDecl>(D)) {
```"
78253,2024-12-17T20:18:20Z,2024-12-21T00:47:13Z,meg-gupta,3,0,1,180,2,1,1,[],3363.0,0,275333.0,0,0,0,0,616935.455449,,0,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test @swift-ci test,,"Explanation:  While hoisting check_subscript call in ossa, `isNativeTypeChecked` call is also created in the preheader. The array value used in the `isNativeTypeChecked` may not be available if its lifetime had ended before. Proactively set the array value of the `isNativeTypeChecked` call to the array value in the `check_subscript` call.
Scope: This fixes an ownership verification error in ArrayBoundsCheckOptimizations. 
Original PR: https://github.com/swiftlang/swift/pull/78231
Risk: Low
Testing: Swift CI testing
Reviewed by: @eeckstein 
Issue: rdar://141630349 ",
78302,2024-12-19T22:11:13Z,2024-12-20T23:02:18Z,cachemeifyoucan,1,6,1,500,6,2,1,[],8.0,0,89465.0,0,0,0,0,623232.273863,,2,1,0,False,['cachemeifyoucan'],@swift-ci please smoke test,,"There were two cache replay code exists, one for cache replay from swift-frontend, the other for replay using C API from libSwiftScan. It is easy to forget to update one copy when new specialized cache replay logic is added for some output kinds. Now unify the replay logics to a single location to avoid confusion. This is a rewrite of the existing logic and NFCI.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","What is the invocation here? I assume it's not the same as `instance.getInvocation()`? The equivalent code from `replayCompilation` in `SwiftCaching.cpp` called `Inst.getDiags().finishProcessing();` here and also below in the successful case.  Do we need something similar here? I don't see this handled explicitly in the new code; does it happen some other way? For the normal swift-frontend compilation, the Invocation is not moved into `instance` after the DiagnosticHelper is configured. `finishProcessing()` is moved to call site after calling the replay function, with or without diagnostics emitted, since it doesn't hurt to call it even there are no diagnostics emitted. That is kind of done in `beginMessage` already. I don't think this is needed. "
78307,2024-12-20T00:56:24Z,2024-12-20T22:53:59Z,DougGregor,4,0,9,1045,26,0,0,[],8.0,0,79132.0,0,0,0,0,623654.539747,,10,9,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,"Instead of producing a warning for each use of an unsafe entity, collect all of the uses of unsafe constructs within a given function and batch them together in a single diagnostic at the enclosing declaration that tells you what you can do (add `@unsafe` or `@safe(unchecked)`, depending on whether all unsafe uses were in the definition), plus notes identifying every unsafe use within that declaration. The new diagnostic renderer nicely collects together in a single snippet, so it's easier to reason about.

Here's an example from the embedded runtime that previously would have been 6 separate warnings, each with 1-2 notes:

```
swift/stdlib/public/core/EmbeddedRuntime.swift:397:13: warning: global function 'swift_retainCount' involves unsafe code; use '@safe(unchecked)' to assert that the code is memory-safe
395 |
396 | @_cdecl(""swift_retainCount"")
397 | public func swift_retainCount(object: Builtin.RawPointer) -> Int {
    |             `- warning: global function 'swift_retainCount' involves unsafe code; use '@safe(unchecked)' to assert that the code is memory-safe
398 |   if !isValidPointerForNativeRetain(object: object) { return 0 }
399 |   let o = UnsafeMutablePointer<HeapObject>(object)
    |           |                              `- note: call to unsafe initializer 'init(_:)'
    |           `- note: reference to unsafe generic struct 'UnsafeMutablePointer'
400 |   let refcount = refcountPointer(for: o)
    |                  |                    `- note: reference to let 'o' involves unsafe type 'UnsafeMutablePointer<HeapObject>'
    |                  `- note: call to global function 'refcountPointer(for:)' involves unsafe type 'UnsafeMutablePointer<Int>'
401 |   return loadAcquire(refcount) & HeapObject.refcountMask
    |          |           `- note: reference to let 'refcount' involves unsafe type 'UnsafeMutablePointer<Int>'
    |          `- note: call to global function 'loadAcquire' involves unsafe type 'UnsafeMutablePointer<Int>'
402 | }
403 |
```

Note that we have lost a little bit of information, because we no longer produce ""unsafe declaration was here"" notes pointing back at things like `UnsafeMutablePointer` or `recountPointer(for:)`. However, strict memory safety tends to be noisy to turn on, so it's worth losing a little bit of easily-recovered information to gain some brevity.

While here, also fix a few issues with the checking:
* Diagnose uses of `nonisolated(unsafe)` declarations, not the declaration itself
* Diagnose uses of `unowned(unsafe)` declarations, not the declaration itself
",
78319,2024-12-20T15:39:44Z,2024-12-20T22:52:34Z,nate-chandler,1,0,6,136,2,1,1,[],5842.0,0,26323.0,0,0,0,0,623463.674685,,0,6,0,False,['nate-chandler'],@swift-ci please test,,"**Explanation**: Fix assertion failure during DCE.

DCE uses lifetime completion to end the lifetimes of values whose lifetime ending uses were deleted.  Completion is done for all such values after all deletion has been done.  

It is possible, however, for a value to be enqueued for eventual completion and then for the instruction which defines that value to be deleted.  In that case, lifetime completion must not be run.  

Here, whenever an instruction is deleted, all of its results are removed from the collection of values whose lifetimes are to be completed.
**Scope**: Affects optimized code.
**Issue**: rdar://141560546
**Original PR**: https://github.com/swiftlang/swift/pull/78306
**Risk**: Low.  
**Testing**: Added test.
**Reviewer**: Erik Eckstein ( @eeckstein )",
78254,2024-12-17T20:24:07Z,2024-12-20T22:16:14Z,meg-gupta,3,0,1,36,2,1,1,[],8.0,0,265927.0,0,0,0,0,625998.727547,,0,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test @swift-ci test windows platform ,,"Explanation: ""borrowed from"" is a recently added SIL instruction. While looking for new reborrows we should always look through these instructions. The reborrow verifier was not doing it leading to a false verification error.
Scope: This fixes a false ownership verification error in the ReborrowVerifier.
Original PR: https://github.com/swiftlang/swift/pull/78217
Risk: Very Low
Testing: Swift CI testing
Reviewed by: @nate-chandler 
Issue: rdar://141490868",
78325,2024-12-20T18:33:39Z,2024-12-20T22:32:10Z,xedin,1,0,1,5,1,0,0,[],32.0,0,14311.0,0,0,0,0,625042.7444,,2,1,0,False,['xedin'],@swift-ci please smoke test,,"… stable

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78323,2024-12-20T17:57:36Z,2024-12-20T22:14:18Z,justice-adams-apple,1,0,1,1,1,2,2,[],210.0,0,15404.0,0,0,0,0,626113.142586,,0,1,0,False,['justice-adams-apple'],@swift-ci please smoke test,,"Previously we had both
```cmake
defaulted_option(SwiftCore_ENABLE_UNICODE_DATA ""Embed Unicode info in Swift Core"")

option(SwiftCore_ENABLE_UNICODE_DATA ""Include unicode data in Swift runtimes"" ON)
```

remove the defaulted_option in favor of the option defaulting it to ON
",
78310,2024-12-20T03:04:00Z,2024-12-20T19:41:38Z,AnthonyLatsis,1,0,2,97,2,1,1,[],46096.0,0,68286.0,0,0,0,0,626848.831533,,3,2,0,False,['AnthonyLatsis'],@swift-ci please smoke test,,Look through `inout` on the parameter type before we look through a metatype.,
78255,2024-12-17T21:18:02Z,2024-12-20T21:16:22Z,meg-gupta,1,0,1,38,2,1,1,[],8.0,0,259101.0,0,0,0,0,629591.835792,,0,1,0,False,['meg-gupta'],@swift-ci test,,"Explanation: Lifetime completion will insert end_borrows only on borrow introducers. Look through ""borrowed from"" instructions before calling it to complete lifetimes. 
Scope: This fixes ownership verification error in DCE.
Original PR: https://github.com/swiftlang/swift/pull/78200 
Risk: Low
Testing: Swift CI testing
Reviewed by: @nate-chandler
Issue: rdar://141490551
",
77505,2024-11-09T00:24:45Z,2024-11-09T08:31:19Z,ian-twilightcoder,2,0,1,2,1,1,1,[],9.0,0,3616339.0,0,0,0,0,630751.672818,,0,1,0,False,['ian-twilightcoder'],"Explanation: This change is required for the Mac Catalyst back deployment tests to pass
Radar (and possibly SR Issue): rdar://132710925
Scope: Running Mac Catalyst back deployment tests.
Risk: None.
Testing: CI.
Reviewed By: @swift-ci test",,"When I did https://github.com/swiftlang/swift/pull/74920 I forgot to update test/Concurrency/Backdeploy/linking_maccatalyst.swift the same way linking.swift got updated.

rdar://132710925",
77504,2024-11-09T00:23:18Z,2024-11-09T09:01:51Z,ian-twilightcoder,2,0,1,2,1,1,1,[],9.0,0,3616426.0,0,0,0,0,630753.06442,,0,1,0,False,['ian-twilightcoder'],"Explanation: This change is required for the Mac Catalyst back deployment tests to pass
Radar (and possibly SR Issue): rdar://132710925
Scope: Running Mac Catalyst back deployment tests.
Risk: None.
Testing: CI.
Reviewed By: @swift-ci test",,"When I did https://github.com/swiftlang/swift/pull/74920 I forgot to update test/Concurrency/Backdeploy/linking_maccatalyst.swift the same way linking.swift got updated.

rdar://132710925",
77503,2024-11-09T00:19:07Z,2024-11-09T08:26:27Z,ian-twilightcoder,2,0,1,2,1,1,1,[],98.0,0,3616677.0,0,0,0,0,630753.131656,,0,1,0,False,['ian-twilightcoder'],"Explanation: This change is required for the Mac Catalyst back deployment tests to pass
Radar (and possibly SR Issue): rdar://132710925
Scope: Running Mac Catalyst back deployment tests.
Risk: None.
Testing: CI.
Reviewed By: @swift-ci test",,"When I did https://github.com/swiftlang/swift/pull/74920 I forgot to update test/Concurrency/Backdeploy/linking_maccatalyst.swift the same way linking.swift got updated.

rdar://132710925",
78262,2024-12-18T00:18:24Z,2024-12-20T18:40:07Z,bnbarham,4,5,1,41,8,3,2,[],8.0,0,238906.0,0,0,0,0,638968.354257,,6,1,0,False,"['kubamracek', 'bnbarham']","@swift-ci please test Makes sense to me. @eeckstein ? @swift-ci please test @swift-ci please testthanks, lgtm!","thanks, lgtm!","SourceKit explicitly disables WMO, silence the diagnostic in this case (but leave it enabled for explicit non-WMO builds otherwise).","This is a bad name. Originally, `SILOptions::EnablePerformanceDiagnostics` was only used to disable the PerformanceDiagnosticsPass pass (which is also a bad name nowadays). But in embedded swift, such diagnostics are not ""performance"" related at all.
Can we just call it (and it's C++ counterpart) `isInSourceKit` or something like that?
And add a comment that in SourceKit we can't emit certain diagnostics which rely on wmo, which SourceKit doesn't support.

Also, as this is not a command line option, we should move this property directly into `Context` (at least on the swift side). How would you feel about `skipWMORequiredDiagnostics` or `enableWMORequiredDiagnostics` or something similar? I'd rather make this more generic than sourcekit specifically, even if it is the only place we do this today. Sounds reasonable. Please add a comment that this is (currently) the case in SourceKit Can you put this directly into Context (into `extension Context`)? We might need this in function passes, too. Please add this comment to `Context.enableWMORequiredDiagnostics`, too."
78316,2024-12-20T11:39:48Z,2024-12-20T16:51:59Z,hnrklssn,1,0,1,65,2,1,1,[],13.0,0,18731.0,0,0,0,0,645460.553384,,0,1,0,False,['hnrklssn'],@swift-ci please smoke test,,Add missing colon in _SwiftifyImport function call,
76878,2024-10-04T22:02:22Z,2024-12-20T18:30:48Z,beccadax,9,23,15,2670,73,7,2,[],428764.0,0,6640106.0,0,0,0,0,639532.134215,,15,15,0,False,['beccadax'],"@swift-ci please test I think the implementation here is getting towards something mergeable, if not fully usable, but I expect the feature to continue to evolve, including in some ways that will break source compatibility with the current version. (For example, I may ban access control keywords in an `@abi` attribute and instead inherit them from the attribute it's attached to.) For that reason, I'm planning to move the standard library adoption into its own PR before this comes out of draft and gets merged. The stdlib PR will continue to evolve as the compiler implementation improves. The macOS test failure, at least, was caused by SwiftSyntax not being able to parse the new syntax, so I'm adding support for that. With https://github.com/swiftlang/swift-syntax/pull/2882

@swift-ci please test With https://github.com/swiftlang/swift-syntax/pull/2882

@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci test @swift-ci please testThank you for working on this -- the core stdlib parts look good to me. (Great, in fact!) Parser and ASTGen related changes LGTM! Sema changes look good to me!","Thank you for working on this -- the core stdlib parts look good to me. (Great, in fact!) Parser and ASTGen related changes LGTM! Sema changes look good to me!","This is the beginning of an implementation of the `@abi` attribute [as recently pitched](https://forums.swift.org/t/pitch-controlling-the-abi-of-a-declaration/75123/8). It is intended to subsume the use of `@_silgen_name` in ABI compatibility hacks, providing a tool for handling API replacements and enhancements that is both more capable and usable by mere mortals.

~~This PR also replaces all standard library uses of `@_silgen_name` with a mangled Swift name with `@abi` uses. This is about a quarter of all standard library `@_silgen_name` uses (the remaining uses are to import or export runtime functions or compiler intrinsics by simple known names).~~ (Note: Standard library adoption will be deferred until the type checking rules are more stable.)

There's a lot left to do here, ~~but one of the most important things is making `@abi` on functions suppressible by providing a fallback to `@_silgen_name` in the module interface~~.

SwiftSyntax PR: swiftlang/swift-syntax#2882","Probably this would be nicer if it stayed using the explicit ""explaining why this method is different"" name like we did in the silgen name:
```suggestion
    public nonisolated func whenLocalTypedThrows<T: Sendable, E>(
``` Ooh, nice catch There's actually three different variants. Here's what I think I'll do here:

```swift
  @abi(
    // We need to @abi here because the signature is the same as
    // `__separately_compiled_typed_throws_whenLocal(_:)`, and even though this
    // is @AEIC, the symbol name would conflict.
    public nonisolated func __typed_throws_whenLocal<T: Sendable, E>(
      _ body: @Sendable (isolated Self) async throws(E) -> T
    ) async throws(E) -> T?
  )
  @_alwaysEmitIntoClient
  public nonisolated func whenLocal<T: Sendable, E>(
    _ body: @Sendable (isolated Self) async throws(E) -> T
  ) async throws(E) -> T? { /* snip */ }

  // ABI: This is a workaround when in Swift 6 this method was introduced
  // in order to support typed-throws, but missed to add @_aeic.
  // In practice, this method should not ever be used by anyone, ever.
  @abi(
    public nonisolated func whenLocal<T: Sendable, E>(
      _ body: @Sendable (isolated Self) async throws(E) -> T
    ) async throws(E) -> T?
  )
  @usableFromInline
  nonisolated func __separately_compiled_typed_throws_whenLocal<T: Sendable, E>(
    _ body: @Sendable (isolated Self) async throws(E) -> T
  ) async throws(E) -> T? { /* snip */ }

  // ABI: Historical whenLocal, rethrows was changed to typed throws `throws(E)`
  @abi(
    public nonisolated func whenLocal<T: Sendable>(
      _ body: @Sendable (isolated Self) async throws -> T
    ) async rethrows -> T?
  )
  @usableFromInline
  nonisolated func __rethrows_whenLocal<T: Sendable>(
    _ body: @Sendable (isolated Self) async throws -> T
  ) async rethrows -> T? { /* snip */ }
``` This looks good, thank you @beccadax! I'm really enjoying this way to spell these Note that you can use `%batch-code-completion` here instead. It has the benefit of not needing the many RUN lines + can re-use the ast context. Thanks for adding these by the way, it's very much appreciated! I had to modify the tool with a feature that could add suffixes to the check prefixes, but this definitely cleaned things up quite a bit! Oh nice, thank you! CC @rintaro Since this is a duplicated logic between C++ parser and ASTGen, is it possible to do this in AST? For example, make `Decl::setParsedAttrs(const DeclAttributes &)` and use it from C++ parser and ASTGen.

TBH, I'm not a fan of this API. This feels like `element.append(to: array)` We'd like to avoid this kind of implicit operation in Parser as much as possible. Is it possible to move this (and  `connectToInverse(Decl *)`) to a later stage? E.g. `TypeCheckAttr`.
That would also minimize the bridging interface for ASTGen. Could you add some test cases with attributes and modifiers inside `@abi(...)` attributes?
I'm particularly interested in the behavior for nested `@abi` attributes. i.e. `@abi(@abi(func foo()) ...` Nice! Thank you for doing the autodiff things too! Update for https://github.com/swiftlang/swift/pull/78019/files 🙏 
```suggestion
        return handle(self.generateABIAttr(attribute: node)?.asDeclAttribute)
```
 Keep in mind that I haven't actually implemented these attributes in ASTGen, but you should be able to drop in an implementation for them now. :D In a future PR I will add very thorough logic for how `@abi` interacts with other attributes, including itself (`@abi` will be banned on an ABI-only declaration), so I'm going to leave this task aside for now. Could we protect the two `MF.getDecl` here against errors by instead using `getDeclChecked`? Any error could either be bubbled up or dropped when safe to do so. Might take a bit of work, but probably. Corrected this—please take a look. Reviewers: In this PR, I'm mostly just trying to make sure I can find the right decls to check against one another. The exact rules I'm enforcing are extremely rough and incomplete placeholders; properly defining them will be the subject of my next PR on this feature.  Looks good, thank you! Have you considered turning this into a cached request instead? This would be difficult to compute lazily because there's no way (other than this table) to walk up from an ABI-only declaration to its counterpart; you have to start from the counterpart and then walk down to the ABI-only decl. The most reliable way I've found to do that is to eagerly populate a table while parsing or deserializing. I suppose I could still create a dummy request whose `evaluate()` function returns the default output and then make `recordABIAttr()` manually cache non-default outputs, but I'm not sure if that would really buy us anything over what I'm doing here.  I am suggesting it because we have a similar pattern with other requests that are cached manually after parse and deserialization, the primary advantage is use a common mechanism and storage. Changed in 413c673da4128f8a10df200899647a609c91fec1."
78309,2024-12-20T03:01:31Z,2024-12-20T06:51:19Z,AnthonyLatsis,1,0,5,153,13,0,0,[],14.0,0,45824.0,0,0,0,0,649465.489826,,4,5,0,False,['AnthonyLatsis'],@swift-ci please smoke test,,,
78306,2024-12-19T23:15:42Z,2024-12-20T14:59:45Z,nate-chandler,3,0,4,100,2,1,1,[],75.0,0,56650.0,0,0,0,0,652189.735987,,2,4,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmarklgtm,lgtm,"DCE may enqueue a value for lifetime completion and later on erase the instruction that defines that value.  When erasing an instruction, erase each of its results from the collection of values to complete.

rdar://141560546
",
78304,2024-12-19T22:27:24Z,2024-12-20T14:55:35Z,slavapestov,1,0,1,131,5,0,0,[],27.0,0,59291.0,0,0,0,0,652447.246126,,2,1,0,False,['slavapestov'],@swift-ci Please smoke test,,These were slow in 6.0 and are now fast(er).,
78314,2024-12-20T08:10:40Z,2024-12-20T11:56:15Z,eeckstein,1,0,1,2,1,0,0,[],36.0,0,14431.0,0,0,0,0,662311.451656,,1,1,0,False,['eeckstein'],@swift-ci smoke test,,,
78210,2024-12-16T11:11:39Z,2024-12-20T10:36:01Z,hnrklssn,20,0,6,266,61,2,2,[],14.0,0,343462.0,0,0,0,0,668023.339881,,6,6,0,False,"['Xazax-hun', 'DougGregor', 'tshortli', 'hnrklssn']","@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test I took the liberty of _not_ adding `@available` to `_PointerParam`, since it's not really intended to be ""available"" at runtime, only for passing info to the macro. Please let me know if that has any consequences I'm not aware of. @DougGregor @Xazax-hun  @swift-ci please smoke test > I took the liberty of not adding @available to _PointerParam, since it's not really intended to be ""available"" at runtime, only for passing info to the macro. Please let me know if that has any consequences I'm not aware of.

Availability is needed on every declaration that might be linked by a separate executable (so that the compiler can generate correct linkage relative to the deployment target of the executable for the symbols). Even if the only separate executables that reference it are macro plugins, I think it may still be appropriate to have accurate availability. > > I took the liberty of not adding @available to _PointerParam, since it's not really intended to be ""available"" at runtime, only for passing info to the macro. Please let me know if that has any consequences I'm not aware of.
> 
> Availability is needed on every declaration that might be linked by a separate executable (so that the compiler can generate correct linkage relative to the deployment target of the executable for the symbols). Even if the only separate executables that reference it are macro plugins, I think it may still be appropriate to have accurate availability.

How does this work for the stdlib? If I simply try adding `@available(SwiftStdlib 6.1, *)`  to `_PointerParam`, then I get an error saying `error: '_PointerParam' is only available in macOS 9999 or newer` when building the stdlib for the host OS. I thought custom built swiftc was supposed to build with availability for all releases? @swift-ci please test linux Could this test failure actually be related to my changes?
```
FAIL: test_command_stats_force (TestStatisticsAPI.TestStatsAPI)
   Test reporting all pssible debug info stats by force loading all debug
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/build-user/llvm-project/lldb/test/API/functionalities/stats_api/TestStatisticsAPI.py"", line 151, in test_command_stats_force
    self.assertEqual(debug_stats[""totalDebugInfoByteSize""], 193)
AssertionError: 386 != 193
```

It doesn't seem like something that should be affected, but maybe I'm missing something. It seems like other PRs are passing fine. > Could this test failure actually be related to my changes?

I remember seeing this on other PRs. I think you should just rerun the tests, hopefully should be fixed by now.  > How does this work for the stdlib? If I simply try adding @available(SwiftStdlib 6.1, *) to _PointerParam, then I get an error saying error: '_PointerParam' is only available in macOS 9999 or newer when building the stdlib for the host OS. I thought custom built swiftc was supposed to build with availability for all releases?

`SwiftStdlib 6.1` maps to OS version `9999` as a temporary placeholder on all platforms since Swift 6.1 has not yet been released with any Apple OS release. It will eventually be updated to map to a real version. Every context that refers to `_PointerParam` needs to be constrained to `SwiftStdlib 6.1` too. It would be helpful to see the specific instances of `error: '_PointerParam' is only available in macOS 9999 or newer` you are seeing in order to decided what needs to be done about each. > > How does this work for the stdlib? If I simply try adding @available(SwiftStdlib 6.1, *) to _PointerParam, then I get an error saying error: '_PointerParam' is only available in macOS 9999 or newer when building the stdlib for the host OS. I thought custom built swiftc was supposed to build with availability for all releases?
> 
> `SwiftStdlib 6.1` maps to OS version `9999` as a temporary placeholder on all platforms since Swift 6.1 has not yet been released with any Apple OS release. It will eventually be updated to map to a real version. Every context that refers to `_PointerParam` needs to be constrained to `SwiftStdlib 6.1` too. It would be helpful to see the specific instances of `error: '_PointerParam' is only available in macOS 9999 or newer` you are seeing in order to decided what needs to be done about each.

Edit: d'oh, found it as soon as I posted my reply: I forgot to mark the macro definition with `@available` > Availability is needed on every declaration that might be linked by a separate executable (so that the compiler can generate correct linkage relative to the deployment target of the executable for the symbols). Even if the only separate executables that reference it are macro plugins, I think it may still be appropriate to have accurate availability.

These declarations are weird, because they are used in the arguments to the new macro but aren't part of the expansion and shouldn't ever be used outside of those macro arguments. We'd like them not to have availability at all, because the macros themselves should be usable on early deployment targets (some of the things they expand to might require newer deployment targets, but that's fine).
 Doesn't the macro plugin itself need to link the symbols associated with `_PointerParam` though? > Doesn't the macro plugin itself need to link the symbols associated with `_PointerParam` though?

The macro plugin is going to need to have its own version of any of these types, so that it itself is not deployment-target-gated. Ok, if `_PointerParam` is not expected to be linked dynamically by any back-deployable binaries then leaving availability off for convenience seems fine, but I do think the type deserves at least a comment explaining all of this in case anyone has to investigate a scenario where these fragile assumptions have been violated. > some of the things they expand to might require newer deployment targets

This raises the question: do we want macro expansions with `Span` annotated with `@available`? My thinking is yes, so we can apply the macro in all contexts without causing compilation errors when Span isn't available.

 @swift-ci please smoke test @swift-ci please smoke test > > some of the things they expand to might require newer deployment targets
> 
> This raises the question: do we want macro expansions with `Span` annotated with `@available`? My thinking is yes, so we can apply the macro in all contexts without causing compilation errors when Span isn't available.

Yes, the functions we generate that use Span will have to have appropriate availability. (That can, of course, but a follow-up)LGTM, thanks!","LGTM, thanks!","Renames the `@PointerBounds` macro to `@_SwiftifyImport` and makes it generally available in the standard library. The API is expected to change drastically without accompanying release notes or backwards compatibility, as the macro is intended to be applied by ClangImporter only, which will be updated in tandem with the macro.",
78308,2024-12-20T01:28:09Z,2024-12-20T08:51:41Z,tshortli,1,0,7,422,12,0,0,[],8.0,0,26619.0,0,0,0,0,674276.514985,,9,7,0,False,['tshortli'],@swift-ci please test,,Build on https://github.com/swiftlang/swift/pull/78284 by adopting `SemanticAvailableAttr` in more places. Many of the availability query methods on `Decl` now return `SemanticAvailableAttr` instead of `AvailableAttr *`.,
78290,2024-12-19T12:24:36Z,2024-12-20T06:18:32Z,eeckstein,4,6,7,420,25,2,0,[],385.0,0,64439.0,0,0,0,0,683470.018831,,3,7,0,False,['eeckstein'],@swift-ci smoke test @swift-ci test @swift-ci test @swift-ci testLooks great!,Looks great!,"* replace `CanonicalType.objectType` and `CanonicalType.addressType` with `silType`
* add `AST.Type.loweredType` and `CanonicalType.loweredType`
* let `SubstitutionMap.replacementTypes` return AST types rather than optional SIL types
* add some use-list APIs
* add `SingleValueInstruction.replace(with:)` and use it throughout the optimizer
* add `CanonicalType.canBeClass` and move the implementation of `SIL.Type.canBeClass` to the AST Type
* SimplifyBuiltin: support metatype and function types when optimizing `Builtin.sizeof`/`alignof`/`strideof`/`destroyArray`

For details see the commit messages","Maybe for these cases, add a `var replacementType` computed property which asserts that the length is exactly one and then returns the sole element? Should the canBeClass query be on AST types instead? You need to lower the type here because it might be a function type or metatype, no? Exactly.
I don't use `loweredType`, yet, because I need to add a flag for getting the ""maximally abstracted"" lowered type. This is what IRGen does for the size/alignment/stride builtins. This makes a difference for metatypes.
`Builtin.size(Bool.Type.self) == 8`. Whereas the ""regular"" type lowering is a thin metatype which would have a size of 0.
  yes, that makes sense I added this"
78272,2024-12-18T18:28:33Z,2024-12-20T04:52:20Z,xedin,2,0,14,745,20,1,1,"['🍒 release cherry pick', 'swift 6.1']",42.0,0,123827.0,0,0,0,0,688646.504408,,1,14,0,False,['xedin'],@swift-ci please test @swift-ci please test,,"Cherry-pick of https://github.com/swiftlang/swift/pull/78171

---

- Explanation:
  
   It's currently impossible for libraries to adopt `any Sendable` in some positions
   when the type was `Any` before.

   For example if library had a member of dictionary type like:

   ```swift
   public struct MyAPI {
      public let myInfo: [String: Any]
   }
   ```

    and users added extensions to MyAPI that reflect the fact that `Value` generic
    parameter is always `Any`:

    ```swift
    extension Dictionary where Value == Any {
      func computeSomething() { ... }
    }
    ```

   It won't be possible for the authors of MyAPI to change value type to `any Sendable`
   i.e. `@preconcurrency public let myInfo: [String: any Sendable]`,
   while adopting type to Swift concurrency, without breaking existing clients.

   To address this, allow `any Sendable` to match `Any` constraint while matching
   generic arguments i.e. `[any Sendable]` -> `[Any]` when `any Sendable`
   type comes from context that involves `@preconcurrency` declarations.

   To facilitate that we need a new expression that models an unsafe bitcast
   from one type to the other - `UnsafeCastExpr`. This expression is going
   to be introduced by the solver during solution application phase to 
   erase `any Sendable` to `Any` in generic argument positions.

- Main Branch PR: https://github.com/swiftlang/swift/pull/78171

- Resolves: rdar://140300022

- Risk: Low (This is a narrow fix that applies only to generic argument contexts of @preconcurrency declarations and is limited to `any Sendable` -> `Any` directional conversions).

- Reviewed By: @hborla @atrick 

- Testing: Added new tests to the concurrency, SILGen, and interpreter test suites.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78263,2024-12-18T00:24:24Z,2024-12-20T04:33:34Z,kubamracek,4,7,2,22,2,2,1,[],11826.0,0,187750.0,0,0,0,0,689773.27524,,6,2,0,False,['kubamracek'],@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test Linux platform,,"The motivation here is about using types and API that have been recently added to the stdlib with an availability only in a recent macOS release (for regular Swift) because the stdlib ships as part of the OS. However, we don't have that constraint with Embedded Swift where the stdlib/runtime is statically included into the produced binaries, and therefore we should be able to use such stdlib types regardless of the ""official"" availability for regular Swift.","It feels a bit weird to me to only specify `macOS` availability in the replacement. Either there should be no platforms with explicit availability (this may not be supported by the existing availability macros implementation), or each of the platforms listed in the existing macro should be lowered to their minimum. Embedded Swift should be able to interoperate with each of the platform equivalently, right? I think I'll need some educating here :) What does `@available(macOS 10.13, *)` mean around availability on iOS and other OS's? The `*` syntax is a reminder that you're not placing any constraints on any other platforms with that attribute, it just applies to `macOS`. When compiling for iOS, for example, `@available(macOS 10.13, *)` is ignored entirely. It's the same thing as if you wrote no `@available` attributes at all. I think our ideal here would be that the macro expand to no platform specific availability attributes at all. But in the meantime, if it expands to one platform it should really expand to all of them to avoid the confusion that might otherwise arise from seeing only `macOS` mentioned. Basically, my concern here is aesthetic. Ok, makes sense! (hopefullly) fixed now LGTM"
78281,2024-12-18T23:26:52Z,2024-12-20T02:02:46Z,rastogishubham,5,0,1,4,1,0,0,[],14.0,0,95759.0,0,0,0,0,698816.661736,,1,1,0,False,"['adrian-prantl', 'rastogishubham']","@swift-ci please smoke test > SOURCE_DIR/test/DebugInfo/dropped-var.sil:9:8: error: no such module 'Swift'

Are there no other SIL tests that do something similar to this test that depend on Swift? How do they invoke the compiler? @adrian-prantl you are right, I am confused, we can see in `test/AutoDiff/sil_combine.sil` 

```
// RUN: %target-sil-opt -sil-print-types -enable-sil-verify-all %s -sil-combine | %FileCheck %s

// SILCombine tests for differentiation-related instructions.

sil_stage canonical

import Swift
import _Differentiation
```
And it does pass on the same bot The problem seems to be the `--target=aarch64-apple-darwin` on the `sil-opt` invocation, which makes sense because it is a non-darwin bot that is failing @swift-ci please smoke test",,"The test still fails on non-Darwin bots, for example:

https://ci.swift.org/job/oss-swift-package-amazon-linux-2-aarch64

```
RUN: at line 1: /home/build-user/build/buildbot_linux/swift-linux-aarch64/bin/sil-opt -target aarch64-unknown-linux-gnu  -module-cache-path /home/build-user/build/buildbot_linux/swift-linux-aarch64/swift-test-results/aarch64-unknown-linux-gnu/clang-module-cache  --diagnose-unreachable -o - /home/build-user/swift/test/DebugInfo/dropped-var.sil -sil-stats-lost-variables --target=aarch64-apple-darwin 2>&1 | /usr/bin/python3.7 /home/build-user/swift/utils/PathSanitizingFileCheck --allow-unused-prefixes --sanitize BUILD_DIR=/home/build-user/build/buildbot_linux/swift-linux-aarch64 --sanitize SOURCE_DIR=/home/build-user/swift --use-filecheck /home/build-user/build/buildbot_linux/llvm-linux-aarch64/bin/FileCheck   /home/build-user/swift/test/DebugInfo/dropped-var.sil
+ /usr/bin/python3.7 /home/build-user/swift/utils/PathSanitizingFileCheck --allow-unused-prefixes --sanitize BUILD_DIR=/home/build-user/build/buildbot_linux/swift-linux-aarch64 --sanitize SOURCE_DIR=/home/build-user/swift --use-filecheck /home/build-user/build/buildbot_linux/llvm-linux-aarch64/bin/FileCheck /home/build-user/swift/test/DebugInfo/dropped-var.sil
+ /home/build-user/build/buildbot_linux/swift-linux-aarch64/bin/sil-opt -target aarch64-unknown-linux-gnu -module-cache-path /home/build-user/build/buildbot_linux/swift-linux-aarch64/swift-test-results/aarch64-unknown-linux-gnu/clang-module-cache --diagnose-unreachable -o - /home/build-user/swift/test/DebugInfo/dropped-var.sil -sil-stats-lost-variables --target=aarch64-apple-darwin
/home/build-user/swift/test/DebugInfo/dropped-var.sil:4:12: error: CHECK: expected string not found in input
 // CHECK: function, lostvars, Pass List Pipeline, DiagnoseUnreachable, 1, 1, {{[0-9]+}}, $s4test3bar1yS2i_tF
           ^
<stdin>:1:1: note: scanning from here
SOURCE_DIR/test/DebugInfo/dropped-var.sil:9:8: error: no such module 'Swift'
^

Input file: <stdin>
Check file: /home/build-user/swift/test/DebugInfo/dropped-var.sil

-dump-input=help explains the following input dump.

Input was:
<<<<<<
         1: SOURCE_DIR/test/DebugInfo/dropped-var.sil:9:8: error: no such module 'Swift' 
check:4     X~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ error: no match found
         2: import Swift 
check:4     ~~~~~~~~~~~~~
         3:  ^ 
check:4     ~~~
>>>>>>

```",
78273,2024-12-18T18:46:14Z,2024-12-20T01:52:03Z,drexin,2,0,1,22,2,1,1,"['🍒 release cherry pick', 'swift 6.1']",12.0,0,111952.0,0,0,0,0,699462.781582,,0,1,0,False,['drexin'],@swift-ci test cc: @tbkka ,,"  - **Explanation**: In partial application forwarder emission, we were missing a check for indirect results. When results are being returned indirectly, we have to return the error indirectly as well.
  - **Scope**: Typed throws ABI
  - **Issues**: rdar://141575655
  - **Original PRs**: https://github.com/swiftlang/swift/pull/78261
  - **Risk**: Low. Adjusts the code gen behavior to match other cases.
  - **Testing**: Added regression tests for both cases. Ensured they failed before the fix.
  - **Reviewers**: @aschwaighofer 
",
78298,2024-12-19T18:14:41Z,2024-12-20T00:37:10Z,slavapestov,1,0,1,78,9,2,2,[],936.0,0,22950.0,0,0,0,0,703958.400525,,3,1,0,False,['slavapestov'],"@swift-ci Please smoke testA possible future that is not to be. Yeah, let's remove this","A possible future that is not to be. Yeah, let's remove this",,
78299,2024-12-19T18:21:13Z,2024-12-19T23:59:08Z,j-hui,1,0,1,2,1,1,1,['c++ interop'],9.0,0,20275.0,0,0,0,0,706241.739921,,3,1,0,False,['j-hui'],@swift-ci Please testThanks!,Thanks!,"Previously the check statement did not account for attribute groups.
This patch adds a glob at the end of the CHECK statement to allow
trailing attribute groups, and also relaxes the pattern at the
beginning.

rdar://141662805
",
78280,2024-12-18T23:05:03Z,2024-12-19T17:40:31Z,bnbarham,6,0,1,886,12,1,1,[],62.0,0,81256.0,0,0,0,0,714632.181253,,8,1,0,False,"['bnbarham', 'rintaro', 'hjyamauchi']","@MAJKFL I believe the issue here is that there's now a cycle from swiftAST -> swiftASTGen -> swiftAST. It passed on PR testing as it uses Ubuntu 20.04 and ends up using `lld` rather than `gold`, which appears to handle the cycle. @swift-ci please smoke test > Would it make sense to move the logic somewhere outside of swiftAST, or to possibly inject LoggingASTScopeDeclConsumer at all unqualified lookup entry points

I think the easiest thing here would probably be to have a new Swift module, ie. move `LexicalLookup` out of `ASTGen`.

EDIT: I just noticed you said:
> I don’t think it would be possible to move the validation outside of ASTGen as it uses it to e.g. access cached if config configured regions, or the parsed source file itself.

I'd need to look into that more, it does *seem* like it should be possible to split them 🤔. We probably need to split out more of `ASTGen` though - CC @rintaro  I think the original PR introduces the new dll `_CompilerSwiftLexicalLookup.dll` and it needed to be added to the installer manifest around here https://github.com/swiftlang/swift-installer-scripts/blob/6cecc7c46d1170a3bc3e1ff8838181418e037397/platforms/Windows/bld/bld.wxs#L418 ? Thanks @hjyamauchi, will indeed need to add to swift-installer-scripts too. I will see if we can extract ExportedSourceFile related code out of `ASTGen`, so `ASTGen` and the lexical lookup module depend on it.Ah, I see there’s a cycle. Thank you for caching that! It does seem to be a bit tricky to fix. I don’t think it would be possible to move the validation outside of `ASTGen` as it uses it to e.g. access cached if config configured regions, or the parsed source file itself. 

Would it make sense to move the logic somewhere outside of `swiftAST`, or to possibly inject `LoggingASTScopeDeclConsumer` at all unqualified lookup entry points? If it’s not a viable option, do you perhaps have any suggestions for an alternative approach? @bnbarham @DougGregor 

I think it's a good idea to revert it for now and I'll look into fixing it in a subsequent PR.","Ah, I see there’s a cycle. Thank you for caching that! It does seem to be a bit tricky to fix. I don’t think it would be possible to move the validation outside of `ASTGen` as it uses it to e.g. access cached if config configured regions, or the parsed source file itself. 

Would it make sense to move the logic somewhere outside of `swiftAST`, or to possibly inject `LoggingASTScopeDeclConsumer` at all unqualified lookup entry points? If it’s not a viable option, do you perhaps have any suggestions for an alternative approach? @bnbarham @DougGregor 

I think it's a good idea to revert it for now and I'll look into fixing it in a subsequent PR.",Reverts swiftlang/swift#77140 as it causes nightly toolchain failures for Debian 12/Fedora 39/Ubuntu 24.04.,
78284,2024-12-19T01:41:50Z,2024-12-19T21:05:02Z,tshortli,2,0,7,662,22,0,0,[],136.0,0,70635.0,0,0,0,0,715846.48861,,11,7,0,False,['tshortli'],@swift-ci please test @swift-ci please smoke test,,"Currently, an `@available` attribute's `AvailabilityDomain` can be resolved eagerly when parsing, but in the future resolving some availability domains will require name lookup which will have to be done lazily after parsing and may also fail. `SemanticAvailableAttr` is a new type that wraps an `AvailableAttr` and its resolved `AvailabilityDomain`. It should be used throughout the compiler for queries and operations that require valid `AvailableAttrs` that have successfully resolved domains.

This PR only partially adopts `SemanticAvailableAttr`. The remainder of the adoption should happen piecemeal, driven by moving the majority of the methods on `AvailableAttr` over to `SemanticAvailableAttr` until all that's left on `AvailableAttr` is the raw, parsed representation which is only accessed through `SemanticAvailableAttr`.",
78295,2024-12-19T17:19:30Z,2024-12-19T21:05:34Z,justice-adams-apple,1,0,1,2,1,2,2,[],109.0,0,13566.0,0,0,0,0,716655.836011,,0,1,0,False,['justice-adams-apple'],@swift-ci Please smoke test,,"add span files to source list
",
78294,2024-12-19T16:51:38Z,2024-12-19T21:00:12Z,egorzhdan,1,0,1,1,1,1,1,['c++ interop'],6.0,0,14915.0,0,0,0,0,716980.58829,,1,1,0,False,['egorzhdan'],@swift-ci please smoke testthanks!,thanks!,"This fixes a `-Wunused-variable` warning that got introduced in 57c7ecd2.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78276,2024-12-18T20:08:22Z,2024-12-19T20:54:08Z,meg-gupta,1,0,1,3,1,1,1,[],406.0,0,89146.0,0,0,0,0,717345.951592,,0,1,0,False,['meg-gupta'],@swift-ci test,,"Explanation: Importing non-ossa module to ossa module in implicit builds is supported with one time recompilation of the non-ossa module. https://github.com/swiftlang/swift/pull/77314 introduced an error when importing non-ossa module to ossa module whenever `EnableRecompilationToOSSAModule` is not set. Remove this error since we have to support old swiftinterfaces with this scenario.
Scope: Fixes compilation error while building old Distributed.swiftinterface and Synchronization.swiftinterface with newer compilers.
Issues: rdar://141576869 
Original PRs: https://github.com/swiftlang/swift/pull/78274 
Risk: Low.
Testing: Tested with old Distributed.swiftinterface and Synchronization.swiftinterface
Reviewers: @tshortli ",
78249,2024-12-17T18:03:25Z,2024-12-19T20:37:46Z,hjyamauchi,4,6,1,6,1,2,1,[],12.0,0,182061.0,0,0,0,0,718328.396197,,0,1,0,False,['hjyamauchi'],@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test,,"This fix is necessary for the native win arm64 build where arm64 isn't
the first in the WindowsSDKs list.","Can you explain why this is needed? We always iterate the SDK arches, so that architecture's runtime is always built before the rest of the SDK. I'm wondering if we need to split this up or if there is something else that is hiding here. Without the change in this PR, noting that x64 comes before arm64 in `WindowsSDKs`, when x64 libdispatch is built, the arm64 runtime hasn't been built yet. Right? Since libdispatch is set up to be built with the ""built swift compiler"" which is the arm64 compiler that needs that arm64 runtime, the build fails with

```
[2024-12-16 16:37:00] Building 'S:\SourceCache\swift-corelibs-libdispatch' to 'S:\b\102' for arch 'x86_64'...
-- The C compiler identification is Clang 19.1.5 with MSVC-like command-line
-- The CXX compiler identification is Clang 19.1.5 with MSVC-like command-line
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: S:/b/5/bin/clang-cl.exe - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: S:/b/5/bin/clang-cl.exe - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Performing Test DISPATCH_HAVE_EXTENDED_SLPI_20348
-- Performing Test DISPATCH_HAVE_EXTENDED_SLPI_20348 - Success
-- Performing Test DISPATCH_HAVE_EXTENDED_SLPI_22000
-- Performing Test DISPATCH_HAVE_EXTENDED_SLPI_22000 - Success
-- Performing Test HAVE_FILE_PIPE_LOCAL_INFORMATION
-- Performing Test HAVE_FILE_PIPE_LOCAL_INFORMATION - Failed
-- Looking for mkstemp
-- Looking for mkstemp - not found
-- Performing Test HAVE_MODE_T
-- Performing Test HAVE_MODE_T - Failed
-- Performing Test HAVE_PID_T
-- Performing Test HAVE_PID_T - Failed
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - not found
-- Found Threads: TRUE
-- The Swift compiler identification is unknown
-- Check for working Swift compiler: S:/b/5/bin/swiftc.exe
-- Check for working Swift compiler: S:/b/5/bin/swiftc.exe - broken
CMake Error at C:/Program Files/CMake/share/cmake-3.29/Modules/CMakeTestSwiftCompiler.cmake:40 (message):
  The Swift compiler

    ""S:/b/5/bin/swiftc.exe""

  is not able to compile a simple test program.

  It fails with the following output:

    Change Dir: 'S:/b/102/CMakeFiles/CMakeScratch/TryCompile-skol9f'

    Run Build Command(s): C:/Users/hiroshi/AppData/Local/Microsoft/WinGet/Links/ninja.exe -v cmTC_26c61
    [1/2] S:\b\5\bin\swiftc.exe -target x86_64-unknown-windows-msvc -j 12 -num-threads 12 -c  -module-name cmTC_26c61 -vfsoverlay S:/b/101/stdlib/windows-vfs-overlay.yaml -strict-implicit-module-context -Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules -resource-dir S:/b/101/lib/swift -L S:/b/101/lib/swift/windows -gnone -Xlinker /INCREMENTAL:NO -Xlinker /OPT:REF -Xlinker /OPT:ICF  -incremental -output-file-map CMakeFiles\cmTC_26c61.dir\\output-file-map.json  S:\b\102\CMakeFiles\CMakeScratch\TryCompile-skol9f\main.swift
    FAILED: CMakeFiles/cmTC_26c61.dir/main.swift.obj
    S:\b\5\bin\swiftc.exe -target x86_64-unknown-windows-msvc -j 12 -num-threads 12 -c  -module-name cmTC_26c61 -vfsoverlay S:/b/101/stdlib/windows-vfs-overlay.yaml -strict-implicit-module-context -Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules -resource-dir S:/b/101/lib/swift -L S:/b/101/lib/swift/windows -gnone -Xlinker /INCREMENTAL:NO -Xlinker /OPT::REF -Xlinker /OPT:ICF  -incremental -output-file-map CMakeFiles\cmTC_26c61.dir\\output-file-map.json  S:\b\102\CMakeFiles\CMakeScratch\TryCompile-skol9f\main.swift
    ninja: build stopped: subcommand failed.
```

I think an alternative is to resort the `WindowsSDKs` so that the native arch comes the first. But I think this PR seems like a more robust way.

Does it make sense? No, that doesn't make sense. If the compiler requires the runtime, how did it link against the runtime before it was available? It depends on the _old_ (pinned) runtime, not the new runtime. This is a path issue. Done Can we not sink this into the `Build-CMakeProject`? Done"
69473,2023-10-28T00:30:34Z,2023-10-30T22:19:28Z,hyp,8,0,5,682,15,0,0,"['c++ interop', 'swift to c++']",17.0,0,36185894.0,0,0,0,0,720067.727801,,2,5,0,False,"['mrousavy', 'hyp']","@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test source compatibility Hey - not sure if this is related, but can a Swift function with `borrowing` / `inout` parameters be passed to C++ as C-style function pointers? This PR ensures a copy for all params, no?

I have an issue where a C++ type is double-freed when calling Swift C-style functions from C++: https://github.com/swiftlang/swift/issues/78292",,"…additional copy

Fixes https://github.com/apple/swift/issues/69372
",
78288,2024-12-19T11:43:27Z,2024-12-19T19:26:51Z,hamishknight,3,0,1,6,3,1,1,[],13477.0,0,30208.0,0,0,0,0,720181.155924,,0,1,0,False,"['hamishknight', 'eeckstein']","String interpolation (`""\(cl)""`) would also work. It's optimized to `_typeName` Nice! Updated to use interpolation @swift-ci please smoke testnice!",nice!,"`String(describing:)` does a bunch of dynamic casts that can be pretty slow. Use interpolation instead, which bypasses them.

- For `swift-frontend`, this brings the time taken for type-checking an empty file down from ~100ms to ~70ms.
- For `swift build`, this brings the time taken for a null build down from ~600ms to ~450ms (the larger delta is presumably due to the fact that there's much more Swift code in `swift-package`).",
78277,2024-12-18T21:46:36Z,2024-12-19T17:27:49Z,andrurogerz,1,3,4,37,6,1,1,[],6248.0,0,78958.0,0,0,0,0,721642.58939,,2,4,0,False,['compnerd'],@swift-ci please test,,"### Purpose
Enable building `swift-inspect` on Linux using CMake.

### Overview
* Update `CMakeLists.txt` to include Linux libraries and sources
* Add `-Xcc -D_GNU_SOURCE` to `CMAKE_Swift_FLAGS` so `process_vm_readv` is visible
* Add `#pragma once` to system headers to avoid recursive include
* Update `README.md` with Linux CMake instructions

### Background
PR #77938 added Linux support to `swift-inspect`, but only supported building with SwiftPM. This PR brings it to parity with Windows which also supports CMake build.

### Validation
Built on Fedora 41 workstation with CMake Version 3.30.5 and Swift version 6.02.
```
$ cd ~/src/swift
$ cmake -S ./tools/swift-inspect -B ./build -G Ninja -D ArgumentParser_DIR=~/src/swift-argument-parser/build/cmake/modules -D CMAKE_Swift_FLAGS=""-Xcc -I$(git rev-parse --show-toplevel)/include/swift/SwiftRemoteMirror""
$ cmake --build build
```",Please don't do this. Use `target_compile_options`. I would have this library precede `SwiftInspectLinux` and add a newline between them. Make the dependency public instead of duplicating that here.
78285,2024-12-19T02:04:14Z,2024-12-19T17:16:54Z,AnthonyLatsis,3,0,1,17,1,0,0,[],13.0,0,63067.0,0,0,0,0,722077.382781,,3,1,0,False,['AnthonyLatsis'],@swift-ci please smoke test macOS @swift-ci please smoke test Linux @swift-ci please smoke test Windows,,,
77699,2024-11-19T14:10:53Z,2024-12-19T19:32:34Z,glessard,3,0,4,94,2,2,2,['swift 6.1'],25.0,0,2611302.0,0,0,0,0,722244.031609,,0,4,0,False,"['glessard', 'shahmishal']",@swift-ci please test @swift-ci please test @swift-ci please test,,"This PR improves how `Span.withUnsafeBytes()` is written, making swiftinterface files that define it compatible with older compilers. We also remove `_elementsEqual()` here, since it was only used for testing; it also caused swiftinterface issues. Includes a few updated code comments.

This is a cherry-pick of https://github.com/swiftlang/swift/pull/77688
",
78278,2024-12-18T22:31:47Z,2024-12-19T13:04:24Z,slavapestov,2,0,3,287,4,1,1,[],10.0,0,74292.0,0,0,0,0,723600.053303,,1,3,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please test source compatibilityLGTM!,LGTM!,"Further improvement upon https://github.com/swiftlang/swift/pull/76962.

Instead of starting a depth-first search from each type variable
and marking all type variables that haven't been marked yet,
we can implement this as a union-find.

We can also store the temporary state directly inside the
TypeVariableType::Implementation, instead of creating large
DenseMaps whose keys range over all type variables.",
78271,2024-12-18T16:45:13Z,2024-12-19T18:17:56Z,augusto2112,2,0,1,290,9,1,1,[],174.0,0,91964.0,0,0,0,0,726723.656233,,0,1,0,False,['augusto2112'],"https://github.com/swiftlang/llvm-project/pull/9763
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9763
@swift-ci test",,"Emit an imported declaration for @_originallyDefinedIn under the real module that these types live in.

This patch also changes the mangling for the debugger to respect @_originallyDefinedIn, and fixes a bug where @_originallyDefinedIn that should be ignored was still being used when mangling.

rdar://137146961
(cherry picked from commit f8d20c490868cbb5e6fbb82e9dcc51131ed6b5db)

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78289,2024-12-19T11:56:39Z,2024-12-19T17:24:54Z,Xazax-hun,1,0,1,9,2,2,2,['c++ interop'],21.0,0,19697.0,0,0,0,0,729905.155109,,0,1,0,False,['Xazax-hun'],@swift-ci please test,,"**Explanation**: Due to a missing check we emitted using declarations for types we did not emit into the reverse interop header resulted in compilation errors.
**Scope**: C++ reverse interop
**Risk**: Low. The fix is straightforward calling a function to do the check if the entity should be included in the reverse interop header. It does not affect other code paths.
**Testing**: Added compiler tests.
**Issue**: rdar://141688074
**Reviewers**: @egorzhdan

Original PR: #78287",
78282,2024-12-19T00:28:57Z,2024-12-19T17:41:34Z,cachemeifyoucan,2,0,6,120,8,1,1,[],8.0,0,61957.0,0,0,0,0,728907.172618,,0,6,0,False,['cachemeifyoucan'],@swift-ci please test @swift-ci please testThis looks a safe fix to me.,This looks a safe fix to me.,"    
   - **Explanation**:This patch contains a serials of changes that targeted to fix the missing function in C APIs when replaying results from build system. It teaches the driver/build-system to replay the newly specialized makefile dependency files and symbol graph files correctly.
    <!--
    A description of the changes. This can be brief, but it should be clear.
    -->
  - **Scope**: This fixes the wrong or missing outputs when there is a cache hit. The build system will fail to the replay make style dependency file and symbol graph output when that happens.
    <!--
    An assessment of the impact and importance of the changes. For example, can
    the changes break existing code?
    -->
  - **Issues**:rdar://141567785
    <!--
    References to issues the changes resolve, if any.
    -->
  - **Original PRs**:https://github.com/swiftlang/swift/pull/78279
    <!--
    Links to mainline branch pull requests in which the changes originated.
    -->
  - **Risk**:Low. Swift Caching only.
    <!--
    The (specific) risk to the release for taking the changes.
    -->
  - **Testing**:Added UnitTests
    <!--
    The specific testing that has been done or needs to be done to further
    validate any impact of the changes.
    -->
  - **Reviewers**: @benlangmuir @rastogishubham 
    <!--
    The code owners that GitHub-approved the original changes in the mainline
    branch pull requests. If an original change has not been GitHub-approved by
    a respective code owner, provide a reason. Technical review can be delegated
    by a code owner or otherwise requested as deemed appropriate or useful.
    -->",
78268,2024-12-18T08:04:57Z,2024-12-19T17:12:41Z,eeckstein,1,0,1,6,1,2,2,['swift 6.1'],27.0,0,119268.0,0,0,0,0,730638.169807,,0,1,0,False,['eeckstein'],@swift-ci test,,"* **Explanation**: Fixes a compiler crash in embedded mode. The `UsePrespecialized` pass is not needed and does not work correctly in embedded mode because there are no pre-specialized parts of the embedded stdlib, i.e. there is no OnoneSupport library in embedded swift.
* **Risk**: Very low. Disabling the pass only affects embedded swift. And in embedded swift, the pass was basically a no-op.
* **Testing**: Tested by existing tests: for regular swift there are tests which check that pre-specialization works. For embedded swift there are many tests which check that embedded swift works without pre-specializations.
* **Issue**: https://github.com/swiftlang/swift/issues/78167
* **Reviewer**:  @kubamracek
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/78234",
78291,2024-12-19T12:36:53Z,2024-12-19T16:26:45Z,hamishknight,1,3,1,42,1,2,1,"['contributor experience', 'swift-xcodegen']",8.0,0,15730.0,0,0,0,0,731460.717447,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,We don't need to create an intermediate String when escaping characters in the plist.,"```suggestion
          append(UInt8(ascii: #""\""#))
```
🙂 When there's only a single character to escape I tend to prefer just writing the backslash, especially as things like `#""""""#` look weird. I think I'd rather keep things locally consistent here, I don't feel too strongly about it though I see. I do not actually have a preference, but I was curious about yours, on the off chance that a raw string had occurred to you. "
78283,2024-12-19T01:15:20Z,2024-12-19T16:54:32Z,atrick,5,2,5,191,44,2,0,[],215.0,0,56356.0,0,0,0,0,731728.23256,,12,5,0,False,"['Xazax-hun', 'atrick']","@Xazax-hun please take a look at the Span initializer fix @swift-ci test @swift-ci benchmark @Xazax-hun this appears to fix: rdar://136668965 (Borrow diagnostics not triggered for foreign types) > this appears to fix: rdar://136668965 (Borrow diagnostics not triggered for foreign types)

This is wonderful news, thanks a lot for looking into it! ",," This was never used to generate a .swiftinterface, so can be safely removed. It
was used to guard compiler fixes that might break older .swiftinterface
files. Now, we guard the same fixes by checking the source file type.

This depends on fixing Span initialization from CxxSpan.

","Unfortunately, I am not sure this would work for the purposes we want to use this conversion for. 

The planned usage looks like this. imagine the following C++ function:
```
using SpanOfInt = std::span<int>;
SpanOfInt foo(const Bar& b [[clang::lifetimebound]]);
```

We plan to import it like this:
```
@_disfavoredOverload
func foo(b: borrwing Bar) -> SpanOfInt 
```

And we plan to generate a safe wrapper using Swift's span something like this:
```
@lifetime(bar)
func foo(b: borrowing Bar) -> Span<int> {
  Span(_unsafeCxxSpan: foo(b))
}
```

Note that, we expect the Swift span to be used after the lifetime of the corresponding C++ span ends. I'd expect this to be OK as the C++ span does not actually own the buffer. So we want to inherit/copy the dependencies of the C++ span to the Swift span. Unfortunately, we cannot do that as the C++ span is escapable. This is why my initial feeling was to just make the Swift span immortal and leave it to the safe wrapper to propagate the correct lifetimes.

What do you think, what would be the proper way to make this scenario work? @Xazax-hun We have two options for ceating such wrappers:

1. Add `@_unsafeNonescapableResult` to the Span initializer:

```
@_unsafeNonescapableResult
Span.init<T: CxxSpan<Element>>(_unsafeCxxSpan span: borrowing T)`
```

This is ok if you never expect programmers to access this initializer. You're placing the responsibilty for safety entirely on the wrapper.

2. Add `_overrideLifetime` to the wrapper:

```
@lifetime(bar)
func foo(b: borrowing Bar) -> Span<int> {
  let cxxSpan = cxx_foo(b)
  let swiftSpan = Span(_unsafeCxxSpan: cxxSpan)
   // The lexical variable scope of cxxSpan covers the final use if `swiftSpan` below:
  return _overrideLifetime(swiftSpan, borrowing: b)
}
```
"
78279,2024-12-18T22:48:04Z,2024-12-19T16:10:32Z,cachemeifyoucan,2,2,5,116,7,3,2,[],11.0,0,62548.0,0,0,0,0,734373.723841,,5,5,0,False,['cachemeifyoucan'],"@swift-ci please smoke test @benlangmuir for symbol graph changes because I missed that from the code review.I am not familiar with the symbol-graph code, but the MCCAS code LGTM! ","I am not familiar with the symbol-graph code, but the MCCAS code LGTM! ","This patch contains a serials of changes that targeted to fix the missing function in C APIs when replaying results from build system. It teaches the driver/build-system to replay the newly specialized makefile dependency files and symbol graph files correctly.

It also tags along and fixes few bugs and small improvements that intertwined with the bug fix that hardly be separated so they comes in separated commits in this PR.","Why is this replay code duplicated? The historical reason is the diagnostics handling part of the replay is really different so this is a separate copy.

I am working on the follow up to eliminate the copy as an improvement. Some handling will be really hard to unify but I think moving the main replay logics into the same file and keep only one copy is the way to go."
78287,2024-12-19T11:04:52Z,2024-12-19T14:53:39Z,Xazax-hun,1,0,1,9,2,1,1,['c++ interop'],42.0,0,13728.0,0,0,0,0,738986.139059,,2,1,0,False,['Xazax-hun'],"@swift-ci please smoke testLGTM, thanks!","LGTM, thanks!","To support nested structs, we emit type aliases in the outer class. Unfortunately, we emitted these type aliases unconditionally, even if the actualy nested struct was not emitted to the reverse interop header (due to visibility or the construct being unsupported). This PR fixed this issue by checking first if the nested entity should be included in the reverse interop header.

rdar://141688074
",
78105,2024-12-11T01:54:49Z,2024-12-19T04:28:02Z,nate-chandler,7,20,11,527,7,2,1,[],579399.0,0,700396.0,0,0,0,0,776522.105803,,2,11,0,False,['nate-chandler'],"@swift-ci please test @swift-ci please apple silicon benchmark @swift-ci please test source compatibility @swift-ci please test @swift-ci please apple silicon benchmark @swift-ci please test source compatibility @swift-ci please test linux platformNice!
Just some minor comments. lgtm!","Nice!
Just some minor comments. lgtm!","For a function to have complete lifetimes, the lifetime of every def in the function which is backwards-reachable from a dead-end block must be completed.

Previously, every def in every block which appears in the post-order of the function's blocks is completed.  This was not enough: defs in ""unreachable blocks"" (i.e. those which aren't forwards-reachable from the function entry) must be completed too, and such blocks do not appear in the function's post-order.

Here, defs in unreachable blocks are be completed too.  Such defs must also be completed in relative post-order.  To do this, roots for the non-entry post-orders must be found.

rdar://141197164","What about unreachable loops? This algorithm looks a bit complicated. Would this also work?

1. add blocks which are reachable (in backward direction) from `unreachable` to BasicBlockSet _s_
2. For each block: if the block is unreachable _and_ has no predecessors _and_ is in _s_: add it to the roots
3. add blocks which are reachable from roots (in forward direction) to BasicBlockSet _t_
4. if there are unreachable blocks which are in _s_ but not in _t_ (= blocks in unreachable loops):
    5.  pick one unreachable block which is in _s_ but not in _t_ and add it to the roots
    6. continue with 3. This sounds better, thanks!  Ill give it a shot. Yeah, unreachable loops (which are reachable walking backwards from `unreachable` instructions) are the reason for the complexity of the initial approach.  They're handled via `backedges`. Done except that a block in `s` but not `t` is not necessarily in an unreachable loop, only forwards-reachable from (at least) one (and not from any unpredecessored unreachable blocks), so it's necessary to walk backwards from such a block to find a representative block of the loop (see `unreachable_def_4`).  Also, the initial backward walk begins at all dead-end blocks; I was previously only starting at unreachable-terminated blocks which misses dead-end infinite loops. 👍 `isReachable` is much better than `isVisited`.
I think you can remove the private `isVisited` method now. You don't need this condition because the entry block has no predecessors (which is checked below) `walks` -> `backward` You could also directly pass `BasicBlockWorklist`s for `include` and `exclude`. Then you don't need to add `BasicBlockWorklist::getVisited()` It's probably not worth checking for the special case of no unreachable blocks in the function. `collectReachableRoots` will yield the same result with approximately the same effort. I prefer this approach.  I think this method should exist anyway. Not quite.  The code here is
```
    if (&block == function->getEntryBlock()) {
      continue;
    }
    if (!block.pred_empty())
      continue;
```
The entry block has no predecessors, so we don't continue below. I suspect the fraction of functions coming out of SILGen without unreachable blocks is many times the fraction with them.

As written, here's the work done (after checking deadends and before completing any lifetimes):

Functions _without_ unreachable blocks:
1. `ReachableBlocks::compute`: walk forward from the entry block (visits the entire function)
2. `ReachableBlocks::hasUnreachableBlocks` iterate over the blocks in the function

Functions _with_ unreachable blocks:
1. `ReachableBlocks::compute`: walk forward from the entry block (visits only part of the function)
2. `ReachableBlocks::hasUnreachableBlocks` iterate over the blocks in the function
3. `collectReachableRoots`, first loop (`First, find all blocks backwards-reachable from dead-end blocks.`): walk backward from all dead-end blocks (could visit whole function if there are no function-exiting blocks)
4. `collectReachableBlocks`, second loop (`Simple case: unpredecessored blocks.`): iterate over all blocks in the function
5. `collectReachableBlocks`, third loop (`Propagate forward-reachability from roots discovered so far.`): walk forward from all roots (visit whole function)
6. `collectReachableBlocks`, fourth loop (calls to `findFirstBlock`): iterate over all blocks in the function

Removing the `hasUnreachableBlocks` bailout as you're proposing would make functions _with_ unreachable blocks cheaper (steps 1 and 2 would be eliminated).
But it would make functions _without_ unreachable blocks more expensive.  Instead of visiting each block twice, we'd have to visit each four times.

So, it seems to me that it's worth keeping the bailout given that SILGen emits many more functions without unreachable blocks than with.

Does that seem right to you? Done.  Also, replaced the SmallVector in visit with a StackList. > I think this method should exist anyway.

I don't agree because it's an implementation detail of BasicBlockWorklist that `isVisited` is implemented with a set. Exposing this detail makes BasicBlockWorklist a leaking abstraction.  I don't think this constitutes any meaningful abstraction leakage (a worklist is going to use a set), and I think it should be possible to get read-only access to the set that is produced via the worklist to pass off to other code that operates on sets. Well, you could do the work of loop 2 in loop 1, which reduces the overhead to a single loop, which is IMO negligible. I replaced uses of the sets with function_refs wrapping calls to isVisited. While it might be negligible, it's still worse and it's already written this way.  Why change it to something negligibly worse? The benefit would be to reduce the complexity of the source code (which is always my goal # 1): no need for `hasUnreachableBlocks`, less different branches to be taken, etc.

> it's still worse

I don't think so. We are iterating over blocks and instructions so many times that the overhead is for sure not measurable.

> it's already written this way

This is not a good argument 🙂

All that being said, this is nitpicking. If you prefer to keep it this way, I'm fine with it."
78274,2024-12-18T19:11:13Z,2024-12-19T03:20:45Z,meg-gupta,2,0,1,3,1,1,1,[],1314.0,0,29372.0,0,0,0,0,780563.330762,,2,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test linux platform ,,"Importing non-ossa module to ossa module in implicit builds is supported with one time recompilation of the non-ossa module. https://github.com/swiftlang/swift/pull/77314 introduced an error when importing non-ossa module to ossa module whenever `EnableRecompilationToOSSAModule` is not set.  Remove this error since we have to support old swiftinterfaces  with this scenario. 

",
78241,2024-12-17T15:03:36Z,2024-12-18T06:19:38Z,finagolfin,2,0,1,13,1,1,1,[],10343.0,0,114176.0,0,0,0,0,797016.676549,,0,1,0,False,"['marcprux', 'finagolfin']","@swift-ci please test > @marcprux, this should get the compiler validation suite running on your new community Android CI

The build completed with this change! Now it is just [failing on tests](https://ci-external.swift.org/job/oss-swift-RA-linux-ubuntu-24.04-android-build/115/console).This is a nice cleanup!",This is a nice cleanup!,"I tested this going back to NDK 23, without a problem.

@compnerd and @hyp, I don't know if you use these older NDKs outside Windows, take a look.

@marcprux, this should get the compiler validation suite running on your new community Android CI: you may want to try it locally and make sure.",
78226,2024-12-16T22:48:40Z,2024-12-18T22:35:01Z,compnerd,3,0,1,21,4,0,0,[],9.0,0,171983.0,0,0,0,0,797706.313072,,1,1,0,False,['compnerd'],@swift-ci please test Windows platform @swift-ci please smoke test @swift-ci please test Windows platform,,"Remove `IRGenModule::useDllStorage()` as there is a standalone version that is available and the necessary information is public from the `IRGenModule` type. Additionally, avoid the wrapped `isStandardLibrary` preferring to use the same method off of the public accessors. This works towards removing some of the standard library special casing so that it is possible to support both static and dynamic standard libraries on Windows.",
78250,2024-12-17T18:29:31Z,2024-12-18T22:30:53Z,nkcsgexi,4,0,1,66,3,2,2,[],14.0,0,100884.0,0,0,0,0,797956.073986,,1,1,0,False,"['nkcsgexi', 'tshortli']","@swift-ci please test > This commit has been causing a project build failure as indicated in rdar://141569534.

Specifically, a `-target-variant` flag is now being added unexpectedly to the `-compile-module-from-interface` jobs scheduled by Explicit Modules when building a main module that is a zippered library. That's causing an invalid AST to be produced for the `ios-macabi` slices of some SDK modules, which don't expect to be compiled with a `-target-variant` flag since there isn't one specified in their interfaces. Since this fix seems like it's mainly a nice-to-have, we'd like to revert it from `release/6.1` but I'll look into a proper fix on `main`. @swift-ci please smoke test @swift-ci please test",,"This reverts commit 4e2fbe17c347a960d58a2f8c1f484dafb7505b38.

This commit has been causing a project build failure as indicated in rdar://141569534. To address this failure, revert the commit from release/6.1 branch while investigating a root-cause fix on main.

",
78104,2024-12-11T01:23:01Z,2024-12-18T21:38:55Z,augusto2112,16,4,1,290,9,1,1,[],24.0,0,677754.0,0,0,0,0,801076.433672,,4,1,0,False,['augusto2112'],"@swift-ci test source compatibility @swift-ci test source compatibility @swift-ci test source compatibility The source compatibility error seems to be unrelated to this patch:

```
Begin Error in Function: '$s9swiftlintyyYbcfU_'
Found outside of lifetime use?!
Value:   %126 = begin_borrow %125 : $LintCommand         // users: %128, %127
Consuming User:   end_borrow %126 : $LintCommand                  // id: %128
Non Consuming User:   %133 = apply %132(%127, %131, %2) : $@convention(method) (@guaranteed String, @guaranteed @noescape @callee_guaranteed @substituted <Ï„_0_0> (@in_guaranteed Ï„_0_0) -> () for <CommandantError<()>>, @guaranteed CommandRegistry<CommandantError<()>>) -> Never
Block: bb0

End Error in Function: '$s9swiftlintyyYbcfU_'
Found ownership error?!
<unknown>:0: error: fatal error encountered during compilation; please submit a bug report (https://swift.org/contributing/#reporting-bugs)
<unknown>:0: note: triggering standard assertion failure routine
Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.
Stack dump:
0.	Program arguments: /Users/ec2-user/jenkins/workspace-private/swift-PR-source-compat-suite-macos/build/compat_macos/install/toolchain/usr/bin/swift-frontend -frontend -c /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Commands/AnalyzeCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Commands/AutoCorrectCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Commands/GenerateDocsCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Commands/LintCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Commands/RulesCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Commands/VersionCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Extensions/Configuration+CommandLine.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Extensions/Reporter+CommandLine.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Extensions/shim.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Helpers/Benchmark.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Helpers/CommonOptions.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Helpers/CompilerArgumentsExtractor.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Helpers/LintOrAnalyzeCommand.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/Helpers/LintableFilesVisitor.swift /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/main.swift -supplementary-output-file-map /var/folders/bb/hcrjxg1s0b96pfst0ymhmp240000gn/T/TemporaryDirectory.cGo7ia/supplementaryOutputs-1 -target x86_64-apple-macosx10.13 -enable-objc-interop -sdk /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -I /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/Modules -I /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/usr/lib -F /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Frameworks -g -debug-info-format=dwarf -dwarf-version=4 -module-cache-path /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/ModuleCache -swift-version 4 -O -D SWIFT_PACKAGE -empty-abi-descriptor -disable-sandbox -resource-dir /Users/ec2-user/jenkins/workspace-private/swift-PR-source-compat-suite-macos/build/compat_macos/install/toolchain/usr/lib/swift -file-compilation-dir /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy -Xcc -fmodule-map-file=/Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/CYaml.build/module.modulemap -Xcc -I -Xcc /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/checkouts/Yams/Sources/CYaml/include -Xcc -fmodule-map-file=/Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/SourceKit.build/module.modulemap -Xcc -I -Xcc /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/checkouts/SourceKitten/Source/SourceKit/include -Xcc -fmodule-map-file=/Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/Clang_C.build/module.modulemap -Xcc -I -Xcc /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/checkouts/SourceKitten/Source/Clang_C/include -Xcc -isysroot -Xcc /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -Xcc -F -Xcc /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Frameworks -Xcc -fPIC -Xcc -g -module-name swiftlint -in-process-plugin-server-path /Users/ec2-user/jenkins/workspace-private/swift-PR-source-compat-suite-macos/build/compat_macos/install/toolchain/usr/lib/swift/host/libSwiftInProcPluginServer.dylib -plugin-path /Users/ec2-user/jenkins/workspace-private/swift-PR-source-compat-suite-macos/build/compat_macos/install/toolchain/usr/lib/swift/host/plugins -plugin-path /Users/ec2-user/jenkins/workspace-private/swift-PR-source-compat-suite-macos/build/compat_macos/install/toolchain/usr/local/lib/swift/host/plugins -target-sdk-version 14.2 -target-sdk-name macosx14.2 -external-plugin-path /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/usr/lib/swift/host/plugins#/Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/usr/bin/swift-plugin-server -external-plugin-path /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/usr/local/lib/swift/host/plugins#/Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/usr/bin/swift-plugin-server -enable-default-cmo -num-threads 12 -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/AnalyzeCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/AutoCorrectCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/GenerateDocsCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/LintCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/RulesCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/VersionCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/Configuration+CommandLine.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/Reporter+CommandLine.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/shim.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/Benchmark.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/CommonOptions.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/CompilerArgumentsExtractor.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/LintOrAnalyzeCommand.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/LintableFilesVisitor.swift.o -o /Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/.build/x86_64-apple-macosx/release/swiftlint.build/main.swift.o
1.	Apple Swift version 6.2-dev (LLVM be88cf92c709b2a, Swift c7408fa067de3f5)
2.	Compiling with effective version 4.1.50
3.	While evaluating request ExecuteSILPipelineRequest(Run pipelines { PrepareOptimizationPasses, EarlyModulePasses, HighLevel,Function+EarlyLoopOpt, HighLevel,Module+StackPromote, MidLevel,Function, ClosureSpecialize, LowLevel,Function, LateLoopOpt, SIL Debug Info Generator } on SIL for swiftlint)
4.	While running pass #15689 SILFunctionTransform ""CopyPropagation"" on SILFunction ""@$s9swiftlintyyYbcfU_"".
 for expression at [/Users/ec2-user/jenkins/workspace/swift-PR-source-compat-suite-macos/swift-source-compat-suite/project_cache/SwiftLint-Legacy/Source/swiftlint/main.swift:5:30 - line:18:1] RangeText=""{
    let registry = CommandRegistry<CommandantError<()>>()
    registry.register(LintCommand())
    registry.register(AutoCorrectCommand())
    registry.register(AnalyzeCommand())
    registry.register(VersionCommand())
    registry.register(RulesCommand())
    registry.register(GenerateDocsCommand())
    registry.register(HelpCommand(registry: registry))

    registry.main(defaultVerb: LintCommand().verb) { error in
        queuedPrintError(String(describing: error))
    }
""
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  swift-frontend           0x000000011352ba88 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  swift-frontend           0x0000000113529b78 llvm::sys::RunSignalHandlers() + 248
2  swift-frontend           0x000000011352c0fe SignalHandler(int) + 270
3  libsystem_platform.dylib 0x00007ff80c8d85ed _sigtramp + 29
4  libsystem_platform.dylib 000000000000000000 _sigtramp + 18446603370370333232
5  libsystem_c.dylib        0x00007ff80c7d1b45 abort + 123
6  swift-frontend           0x000000010c7ffad7 swift::DiagnosticHelper::Implementation::diagnoseFatalError(char const*, bool) + 599
7  swift-frontend           0x0000000113496c98 llvm::report_fatal_error(llvm::Twine const&, bool) + 344
8  swift-frontend           0x0000000113496b39 llvm::report_fatal_error(char const*, bool) + 41
9  swift-frontend           0x000000010d752df8 swift::LinearLifetimeChecker::ErrorBuilder::handleError(llvm::function_ref<void ()>&&, bool) const + 552
10 swift-frontend           0x000000010d75060e swift::LinearLifetimeChecker::checkValueImpl(swift::SILValue, llvm::ArrayRef<swift::Operand*>, llvm::ArrayRef<swift::Operand*>, swift::LinearLifetimeChecker::ErrorBuilder&, std::__1::optional<llvm::function_ref<void (swift::SILBasicBlock*)>>, std::__1::optional<llvm::function_ref<void (swift::Operand*)>>) + 2126
11 swift-frontend           0x000000010d751ab9 swift::LinearLifetimeChecker::checkValue(swift::SILValue, llvm::ArrayRef<swift::Operand*>, llvm::ArrayRef<swift::Operand*>, swift::LinearLifetimeChecker::ErrorBuilder&) + 73
12 swift-frontend           0x000000010d759cc5 swift::SILValueOwnershipChecker::check() + 725
13 swift-frontend           0x000000010d75c132 verifySILValueHelper(swift::SILFunction const*, swift::SILValue, swift::LinearLifetimeChecker::ErrorBuilder&, swift::DeadEndBlocks*, swift::GuaranteedPhiVerifier&) + 194
14 swift-frontend           0x000000010d75c57d swift::SILFunction::verifyOwnership(swift::DeadEndBlocks*) const + 717
15 swift-frontend           0x000000010d209fa6 (anonymous namespace)::CopyPropagation::run() + 8374
16 swift-frontend           0x000000010d123130 swift::SILPassManager::runPassOnFunction(unsigned int, swift::SILFunction*) + 1648
17 swift-frontend           0x000000010d124219 swift::SILPassManager::runFunctionPasses(unsigned int, unsigned int) + 1257
18 swift-frontend           0x000000010d120c98 swift::SILPassManager::executePassPipelinePlan(swift::SILPassPipelinePlan const&) + 72
19 swift-frontend           0x000000010d120c23 swift::ExecuteSILPipelineRequest::evaluate(swift::Evaluator&, swift::SILPipelineExecutionDescriptor) const + 51
20 swift-frontend           0x000000010d17bc0d swift::SimpleRequest<swift::ExecuteSILPipelineRequest, std::__1::tuple<> (swift::SILPipelineExecutionDescriptor), (swift::RequestFlags)1>::evaluateRequest(swift::ExecuteSILPipelineRequest const&, swift::Evaluator&) + 29
21 swift-frontend           0x000000010d13fa15 swift::ExecuteSILPipelineRequest::OutputType swift::Evaluator::getResultUncached<swift::ExecuteSILPipelineRequest, swift::ExecuteSILPipelineRequest::OutputType swift::evaluateOrFatal<swift::ExecuteSILPipelineRequest>(swift::Evaluator&, swift::ExecuteSILPipelineRequest)::'lambda'()>(swift::ExecuteSILPipelineRequest const&, swift::ExecuteSILPipelineRequest::OutputType swift::evaluateOrFatal<swift::ExecuteSILPipelineRequest>(swift::Evaluator&, swift::ExecuteSILPipelineRequest)::'lambda'()) + 181
22 swift-frontend           0x000000010d120eb0 swift::executePassPipelinePlan(swift::SILModule*, swift::SILPassPipelinePlan const&, bool, swift::irgen::IRGenModule*) + 64
23 swift-frontend           0x000000010d155723 swift::runSILOptimizationPasses(swift::SILModule&) + 163
24 swift-frontend           0x000000010c817a44 swift::CompilerInstance::performSILProcessing(swift::SILModule*) + 260
25 swift-frontend           0x000000010c57f980 performCompileStepsPostSILGen(swift::CompilerInstance&, std::__1::unique_ptr<swift::SILModule, std::__1::default_delete<swift::SILModule>>, llvm::PointerUnion<swift::ModuleDecl*, swift::SourceFile*>, swift::PrimarySpecificPaths const&, int&, swift::FrontendObserver*) + 800
26 swift-frontend           0x000000010c57f4c9 swift::performCompileStepsPostSema(swift::CompilerInstance&, int&, swift::FrontendObserver*) + 2409
27 swift-frontend           0x000000010c58cbbf withSemanticAnalysis(swift::CompilerInstance&, swift::FrontendObserver*, llvm::function_ref<bool (swift::CompilerInstance&)>, bool) + 143
28 swift-frontend           0x000000010c581085 performCompile(swift::CompilerInstance&, int&, swift::FrontendObserver*) + 949
29 swift-frontend           0x000000010c5806ab swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) + 2539
30 swift-frontend           0x000000010c311bd6 swift::mainEntry(int, char const**) + 2550
31 dyld                     0x00007ff80c55141f start + 1903
``` @swift-ci test @swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9745
@swift-ci testLGTM, minor nits inside.","LGTM, minor nits inside.","Emit an imported declaration for @_originallyDefinedIn under the real module that these types live in.

This patch also changes the mangling for the debugger to respect @_originallyDefinedIn, and fixes a bug where @_originallyDefinedIn that should be ignored was still being used when mangling.

rdar://137146961

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","Can you add a one-line /// comment explaining what this does? Otherwise, I like this implementation a lot more than the previous one! lives ""in""? Would there also be a benefit in having a test that uses an originallyDefinedIn type that was imported from another module?
```
A.swift
_originallyDefinedIn(module: ""B"", macOS 10.1) 
public struct foo {}
C.swift
import A
let f = foo()
```"
78265,2024-12-18T02:52:25Z,2024-12-18T20:49:01Z,tshortli,1,0,1,23,3,2,2,[],49353.0,0,65525.0,0,0,0,0,803141.974675,,5,1,0,False,['tshortli'],@swift-ci please smoke test,,"`recordObjCOverride()` records semantic overrides for imported Obj-C methods. Since these methods are imported from a different language, it doesn't make sense to enforce Swift's member import visibility rules when performing lookups to find overridden methods. Doing so caused the Constrain Solver to lack important information needed to eliminate overloads, resulting in erroneous ambiguities.

Resolves rdar://141636723.
",
78270,2024-12-18T15:58:45Z,2024-12-18T19:51:01Z,MaxDesiatov,1,0,1,2,1,0,0,"['bug', 'build-script']",7.0,0,13937.0,0,0,0,0,807551.390632,,2,1,0,False,['MaxDesiatov'],@swift-ci smoke test,,"Currently, usage of `--preset-vars-file` (added in https://github.com/swiftlang/swift/pull/76058) introduces newlines in values of preset variables passed via this file. Calling `strip()` will remove trailing and preceding whitespace characters, including newlines.
",
78269,2024-12-18T13:28:51Z,2024-12-18T19:09:24Z,egorzhdan,1,0,1,20,3,2,2,['c++ interop'],6.0,0,20435.0,0,0,0,0,810047.839634,,0,1,0,False,['egorzhdan'],@swift-ci please test,,"**Explanation**: This makes sure that Cxx and CxxStdlib modules are built with consistent deployment targets for iOS Simulator and iOS Device. This fixes a regression introduced in b87b263, which caused the Cxx and CxxStdlib binaries to have a deployment target version that is too new.
**Scope**: This changes the CMake build scripts to pass the correct `-target` flag to swiftc when building binaries for Simulator.
**Risk**: Low, this only changes the build script for CMake targets that override iOS/tvOS/watchOS deployment target.
**Testing**: Added compiler tests.
**Issue**: rdar://141232269
**Reviewer**: @Xazax-hun 

Original PR: https://github.com/swiftlang/swift/pull/78242",
78245,2024-12-17T16:43:32Z,2024-12-17T22:13:44Z,tshortli,1,0,1,59,3,1,1,[],22.0,0,93156.0,0,0,0,0,812046.284851,,0,1,0,False,['tshortli'],@swift-ci please test,,"- **Explanation:** It turns out that the stdlib build depends on `internal` functions with `@_silgen_name` getting hidden linkage in some configurations. Instead of messing with the linkage computation, just fix the `stdlib/Error.swift` test by making `setWillThrowHandler` `public` to give it the right linkage. Reverts https://github.com/swiftlang/swift/pull/78183.
- **Scope:** Fixes the stdlib build in some configurations.
- **Issue/Radar:** rdar://141590619
- **Original PR:** https://github.com/swiftlang/swift/pull/78244
- **Risk:** Low. Reverts back to the shipping implementation of linkage computation and addresses the original test failure with a test-only change. 
- **Testing:** The compiler test suite continues to pass.
- **Reviewer:** @hamishknight ",
78242,2024-12-17T15:52:23Z,2024-12-18T18:28:56Z,egorzhdan,1,0,1,20,3,2,2,['c++ interop'],5.0,0,95795.0,0,0,0,0,812477.820688,,3,1,0,False,['egorzhdan'],@swift-ci please test,,"This makes sure that Cxx and CxxStdlib modules are built with consistent deployment targets for iOS Simulator and iOS Device.

rdar://141232269

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78261,2024-12-17T23:16:33Z,2024-12-18T18:27:17Z,drexin,1,0,1,22,2,1,1,[],7.0,0,69051.0,0,0,0,0,812572.059194,,1,1,0,False,['drexin'],@swift-ci smoke test,,"rdar://141575655

In partial application forwarder emission, we were missing a check for indirect results. When results are being returned indirectly, we have to return the error indirectly as well.
",
78266,2024-12-18T02:54:58Z,2024-12-18T18:12:08Z,tshortli,1,0,1,23,3,1,1,[],433.0,0,55054.0,0,0,0,0,813464.58762,,0,1,0,False,['tshortli'],@swift-ci please test,,"- **Explanation:** `recordObjCOverride()` records semantic overrides for imported Obj-C methods. Since these methods are imported from a different language, it doesn't make sense to enforce Swift's member import visibility rules when performing lookups to find overridden methods. Doing so caused the Constraint Solver to lack important information needed to eliminate overloads, resulting in erroneous ambiguities.
- **Scope:** Affects projects adopting `-enable-upcoming-feature MemberImportVisibility`.
- **Issue/Radar:** rdar://141636723
- **Original PR:** https://github.com/swiftlang/swift/pull/78265
- **Risk:** Low. The change in behavior only affects adopters of `MemberImportVisibility`, which hasn't been included in a released toolchain yet.
- **Testing:** A new test in the compiler test suite.
- **Reviewer:** @DougGregor ",
77624,2024-11-14T21:19:31Z,2024-12-18T18:05:36Z,compnerd,11,0,1,25,1,1,1,[],419.0,0,2925967.0,0,0,0,0,813880.333198,,0,1,0,False,"['matthewbastien', 'bnbarham', 'compnerd']","Please test with following PRs:
swiftlang/swift-lmdb#6
swiftlang/indexstore-db#228
swiftlang/sourcekit-lsp#1823

@swift-ci please test Windows platform CC: @matthewbastien Please test with following PRs:
https://github.com/swiftlang/swift-lmdb/pull/6
https://github.com/swiftlang/indexstore-db/pull/228
https://github.com/swiftlang/sourcekit-lsp/pull/1823

@swift-ci please test Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-lmdb/pull/6
https://github.com/swiftlang/indexstore-db/pull/228
https://github.com/swiftlang/sourcekit-lsp/pull/1823

@swift-ci please test Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-lmdb/pull/6
https://github.com/swiftlang/indexstore-db/pull/228
https://github.com/swiftlang/sourcekit-lsp/pull/1823

@swift-ci please test Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-lmdb/pull/6
https://github.com/swiftlang/indexstore-db/pull/228
https://github.com/swiftlang/sourcekit-lsp/pull/1823
https://github.com/swiftlang/sourcekit-lsp/pull/1826

@swift-ci please test Please test with following PRs:
https://github.com/swiftlang/swift-lmdb/pull/6
https://github.com/swiftlang/indexstore-db/pull/228
https://github.com/swiftlang/sourcekit-lsp/pull/1823

@swift-ci please test https://github.com/swiftlang/indexstore-db/pull/228
https://github.com/swiftlang/sourcekit-lsp/pull/1823

@swift-ci please build toolchain swiftlang/sourcekit-lsp#1823
swiftlang/indexstore-db#228
swiftlang/swift-lmdb#10

@swift-ci please test swiftlang/sourcekit-lsp#1823
swiftlang/indexstore-db#228
swiftlang/swift-lmdb#10

@swift-ci please build toolchain swiftlang/sourcekit-lsp#1823
swiftlang/indexstore-db#228
swiftlang/swift-lmdb#10

@swift-ci Please Build Toolchain Linux Platform",,"This adjusts the build to create a shared (static) build of LMDB. Re-order the build rules, wire up the LMDB build into IndexStoreDB and SourceKit-LSP.",
78259,2024-12-17T22:48:39Z,2024-12-18T18:05:15Z,bnbarham,4,0,1,2,1,1,1,[],7.0,0,69400.0,0,0,0,0,813899.690538,,2,1,0,False,"['bnbarham', 'kateinoigakukun']","@swift-ci please test @kateinoigakukun I don't suppose you remember why we're stripping `swift-` here do you? @bnbarham The reason why we are passing versions without `swift-` prefix is just to align with [the default of swift-sdk-generator](https://github.com/swiftlang/swift-sdk-generator/blob/6517aa25623dfe2aa2fa1aee9d7a93bcee728508/Sources/GeneratorCLI/GeneratorCLI.swift#L101). The LinuxSDKRecipe is [still relying on the format](https://github.com/swiftlang/swift-sdk-generator/blob/6517aa25623dfe2aa2fa1aee9d7a93bcee728508/Sources/SwiftSDKGenerator/PlatformModels/VersionsConfiguration.swift#L24), but WebAssemblySDKRecipe doesn't. The wasm recipe uses the `--swfit-version` value just for deciding the default artifact name, so any version string even without swift- prefix should work with wasm SDK generator. Interesting, I wonder if we should update that default 🤔. Thanks for the explanation!",,Match the static Linux SDK - leave the `swift-` prefix on the generated artifact bundle.,
78171,2024-12-13T17:41:05Z,2024-12-18T04:24:34Z,xedin,10,0,13,745,20,1,0,[],249.0,0,433824.0,0,0,0,0,813529.860165,,5,13,0,False,['xedin'],We can use `UnsafeCastExpr` to model both `CovariantFunctionConversionExpr` and `CovariantReturnConversionExpr`. I'll attempt to make that chance one this lands. @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test source compatibility debug @swift-ci please test macOS platform @swift-ci please test @swift-ci please test source compatibility @swift-ci please smoke test macOS platform`SILGenBuilder::createUncheckedForwardingCast` LGTM,`SILGenBuilder::createUncheckedForwardingCast` LGTM,"Allow `any Sendable` to match `Any` constraint while matching
generic arguments i.e. `[any Sendable]` -> `[Any]` when `any Sendable`
type comes from context that involves `@preconcurrency` declarations.

To facilitate that we need a new expression that models an unsafe bitcast
from one type to the other - `UnsafeCastExpr`. This expression is going
to be introduced by the solver during solution application phase to 
erase `any Sendable` to `Any` in generic argument positions.

Resolves: rdar://140300022

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
63585,2023-02-11T00:36:58Z,2024-12-18T17:48:00Z,xedin,30,2,60,3781,43,2,0,[],227.0,0,58468262.0,0,0,0,0,814940.95316,,6,60,0,False,"['glessard', 'xedin']","@swift-ci please test source compatibility @swift-ci please test source compatibility Please test with following pull request:
https://github.com/apple/swift-package-manager/pull/6149

@swift-ci please test source compatibility Please test with following pull request:
https://github.com/apple/swift-package-manager/pull/6149

@swift-ci please test source compatibility Please test with following pull request:
https://github.com/apple/swift-package-manager/pull/6149

@swift-ci please test compiler performance Please test with following pull request:
https://github.com/apple/swift-package-manager/pull/6149

@swift-ci please test compiler performance # Summary for main full

**Regressions found (see below)**

- [Debug-batch](#debug-batch-360b6da065cd3272)
    - [debug-batch brief](#debug-batch-brief-360b6da065cd3272)
    - [debug-batch detailed](#debug-batch-detailed-360b6da065cd3272)
- [Release](#release-360b6da065cd3272)
    - [release brief](#release-brief-360b6da065cd3272)
    - [release detailed](#release-detailed-360b6da065cd3272)



<a name=""debug-batch-360b6da065cd3272"">

# Debug-batch

<a name=""debug-batch-brief-360b6da065cd3272"">

## debug-batch brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 86,835,246,083,964 | 84,156,748,262,042 | -2,678,497,821,922 | -3.08% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 1,946,947,244 | 1,947,279,320 | 332,076 | 0.02%
</details>

<a name=""debug-batch-detailed-360b6da065cd3272"">

## debug-batch detailed
<details>
<summary>Regressed (10)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.NumSourceLinesPerSecond | 4,527,498 | 4,610,501 | 83,003 | 1.83% :no_entry:
Sema.InheritedProtocolsRequest | 726,794 | 740,698 | 13,904 | 1.91% :no_entry:
Sema.NumConformancesDeserialized | 4,827,636 | 4,896,377 | 68,741 | 1.42% :no_entry:
Sema.NumLazyRequirementSignaturesLoaded | 656,359 | 664,708 | 8,349 | 1.27% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 22,398,635 | 24,789,893 | 2,391,258 | 10.68% :no_entry:
Sema.NumRequirementMachineUnifiedConcreteTerms | 969,141 | 1,003,267 | 34,125 | 3.52% :no_entry:
Sema.NumRequirementMachines | 1,878,402 | 1,975,393 | 96,991 | 5.16% :no_entry:
Sema.ProtocolDependenciesRequest | 560,391 | 615,606 | 55,214 | 9.85% :no_entry:
Sema.RequirementSignatureRequest | 709,736 | 718,225 | 8,489 | 1.2% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 293,122 | 297,354 | 4,232 | 1.44% :no_entry:
</details>
<details>
<summary>Improved (18)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 86,835,246,083,964 | 84,156,748,262,042 | -2,678,497,821,922 | -3.08% :white_check_mark:
Sema.ActorIsolationRequest | 5,686,698 | 5,606,058 | -80,640 | -1.42% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 636,866 | 591,904 | -44,962 | -7.06% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 19,534 | 19,233 | -301 | -1.54% :white_check_mark:
Sema.DefaultTypeRequest | 394,163 | 304,592 | -89,571 | -22.72% :white_check_mark:
Sema.DirectLookupRequest | 56,665,664 | 55,368,307 | -1,297,356 | -2.29% :white_check_mark:
Sema.DynamicallyReplacedDeclRequest | 6,066,279 | 5,986,801 | -79,478 | -1.31% :white_check_mark:
Sema.GenericParamListRequest | 5,793,669 | 5,660,756 | -132,912 | -2.29% :white_check_mark:
Sema.GlobalActorAttributeRequest | 7,236,132 | 7,151,925 | -84,207 | -1.16% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 24,473 | 24,179 | -294 | -1.2% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 52,971 | 6,680 | -46,291 | -87.39% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 71,519,821 | 63,403,232 | -8,116,589 | -11.35% :white_check_mark:
Sema.NumConstraintScopes | 49,052,923 | 23,026,991 | -26,025,932 | -53.06% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,845,847 | 1,185,479 | -660,368 | -35.78% :white_check_mark:
Sema.NumLeafScopes | 37,005,931 | 14,897,240 | -22,108,691 | -59.74% :white_check_mark:
Sema.QualifiedLookupRequest | 7,821,971 | 7,702,700 | -119,271 | -1.52% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 745,772 | 717,193 | -28,579 | -3.83% :white_check_mark:
Sema.SuperclassTypeRequest | 64,101 | 63,148 | -953 | -1.49% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (282)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 2,977,555 | 2,977,396 | -159 | -0.01%
AST.ImportSetCacheMiss | 674,681 | 674,660 | -21 | -0.0%
AST.ImportSetFoldHit | 342,824 | 342,808 | -16 | -0.0%
AST.ImportSetFoldMiss | 331,857 | 331,852 | -5 | -0.0%
AST.ModuleShadowCacheHit | 7,767 | 7,757 | -10 | -0.13%
AST.ModuleShadowCacheMiss | 2,413 | 2,413 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 16,809,097 | 16,808,455 | -642 | -0.0%
AST.ModuleVisibilityCacheMiss | 144,378 | 144,378 | 0 | -0.0%
AST.NumASTBytesAllocated | 48,537,690,066 | 48,602,592,563 | 64,902,496 | 0.13%
AST.NumASTScopeExpansions | 6,824,255 | 6,824,842 | 586 | 0.01%
AST.NumASTScopeLookups | 7,564,135 | 7,564,120 | -14 | -0.0%
AST.NumDecls | 287,609 | 287,609 | 0 | 0.0%
AST.NumDependencies | 374,970 | 374,970 | 0 | 0.0%
AST.NumIncrementalDependencies | 17,791 | 17,791 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 276,684 | 276,684 | 0 | 0.0%
AST.NumLocalTypeDecls | 1,894 | 1,894 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,820 | 6,820 | 0 | 0.0%
AST.NumModuleLookupValue | 83,603,073 | 83,575,896 | -27,177 | -0.03%
AST.NumObjCMethods | 67,500 | 67,500 | 0 | 0.0%
AST.NumOperators | 1,022 | 1,022 | 0 | 0.0%
AST.NumPrecedenceGroups | 172 | 172 | 0 | 0.0%
AST.NumReferencedDynamicNames | 159 | 159 | 0 | 0.0%
AST.NumReferencedMemberNames | 11,324,241 | 11,305,506 | -18,735 | -0.17%
AST.NumReferencedTopLevelNames | 1,089,391 | 1,088,875 | -516 | -0.05%
AST.NumSourceBuffers | 323,047 | 323,047 | 0 | 0.0%
AST.NumSourceLines | 9,842,394 | 9,842,394 | 0 | 0.0%
AST.NumTotalClangImportedEntities | 1,628,946 | 1,627,423 | -1,523 | -0.09%
Frontend.MaxMallocUsage | 808,818,811,592 | 812,832,471,616 | 4,013,660,024 | 0.5%
Frontend.NumProcessFailures | 34 | 34 | 0 | 0.0%
IRGen.IRGenRequest | 25,299 | 25,299 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 243,984 | 243,976 | -8 | -0.0%
IRModule.NumIRAliases | 197,227 | 197,227 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 6,746,347 | 6,752,107 | 5,760 | 0.09%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,598,115 | 3,600,006 | 1,891 | 0.05%
IRModule.NumIRGlobals | 3,583,092 | 3,583,325 | 233 | 0.01%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 82,153,289 | 82,095,610 | -57,679 | -0.07%
IRModule.NumIRNamedMetaData | 125,495 | 125,495 | 0 | 0.0%
IRModule.NumIRValueSymbols | 7,234,075 | 7,236,199 | 2,124 | 0.03%
LLVM.NumLLVMBytesOutput | 1,946,947,244 | 1,947,279,320 | 332,076 | 0.02%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 316,012 | 316,012 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 643,344 | 643,274 | -70 | -0.01%
Parse.ParseAbstractFunctionBodyRequest | 540,714 | 540,714 | 0 | 0.0%
Parse.ParseMembersRequest | 497,071 | 497,001 | -70 | -0.01%
Parse.ParseSourceFileRequest | 316,761 | 316,761 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 316,761 | 316,761 | 0 | 0.0%
SILGen.ASTLoweringRequest | 26,491 | 26,491 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenFunctions | 2,720,932 | 2,721,689 | 757 | 0.03%
SILModule.NumSILGenGlobalVariables | 114,833 | 114,833 | 0 | 0.0%
SILModule.NumSILGenVtables | 34,449 | 34,449 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 144,382 | 144,382 | 0 | 0.0%
SILModule.NumSILOptDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILOptFunctions | 3,118,553 | 3,118,390 | -163 | -0.01%
SILModule.NumSILOptGlobalVariables | 116,590 | 116,588 | -2 | -0.0%
SILModule.NumSILOptVtables | 34,724 | 34,720 | -4 | -0.01%
SILModule.NumSILOptWitnessTables | 177,007 | 176,504 | -503 | -0.28%
SILOptimizer.ExecuteSILPipelineRequest | 103,608 | 103,608 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 251,177 | 251,305 | 127 | 0.05%
Sema.AbstractGenericSignatureRequest | 123,441 | 123,544 | 103 | 0.08%
Sema.AccessLevelRequest | 14,651,569 | 14,712,386 | 60,817 | 0.42%
Sema.AllMembersRequest | 93,853 | 93,853 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 234 | 234 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 3,563,394 | 3,564,031 | 637 | 0.02%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 39,537 | 39,537 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 23,952 | 23,952 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 18,093,814 | 18,122,238 | 28,423 | 0.16%
Sema.AttachedResultBuilderRequest | 1,552,939 | 1,552,578 | -361 | -0.02%
Sema.BodyInitKindRequest | 70,230 | 70,230 | 0 | 0.0%
Sema.BreakTargetRequest | 5,248 | 5,248 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 276,935 | 276,935 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 51,134 | 51,134 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,879,340 | 1,879,340 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 13,011 | 12,935 | -76 | -0.58%
Sema.ClangRecordMemberLookup | 13,011 | 12,935 | -76 | -0.58%
Sema.ClassAncestryFlagsRequest | 129,659 | 129,369 | -289 | -0.22%
Sema.ClosureEffectsRequest | 113,085 | 113,085 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 40,634 | 40,634 | 0 | 0.0%
Sema.CollectOverriddenDeclsRequest | 10,961,357 | 11,007,436 | 46,079 | 0.42%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConditionalRequirementsRequest | 691,012 | 694,085 | 3,072 | 0.44%
Sema.ConformanceHasEffectRequest | 4 | 4 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,886 | 1,886 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 22,469 | 22,469 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 3,355 | 3,355 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 100,381 | 100,381 | 0 | 0.0%
Sema.DefaultArgumentExprRequest | 87,230 | 87,230 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 791 | 791 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 7,199 | 7,192 | -7 | -0.1%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,884,263 | 1,883,668 | -594 | -0.03%
Sema.DirectPrecedenceGroupLookupRequest | 733,019 | 733,019 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 0 | 0 | 0 | 0.0%
Sema.EnumRawTypeRequest | 33,547 | 33,561 | 14 | 0.04%
Sema.EnumRawValuesRequest | 18,940 | 18,940 | 0 | 0.0%
Sema.ExistentialConformsToSelfRequest | 25,416 | 25,305 | -111 | -0.44%
Sema.ExistentialRequiresAnyRequest | 14,983 | 14,983 | 0 | 0.0%
Sema.ExpandAccessorMacros | 1,054,037 | 1,054,026 | -11 | -0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 33,459,172 | 33,506,534 | 47,361 | 0.14%
Sema.ExpandPeerMacroRequest | 2,119,833 | 2,119,930 | 97 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 854,899 | 853,049 | -1,850 | -0.22%
Sema.ExtendedNominalRequest | 571,922 | 571,922 | 0 | 0.0%
Sema.ExtendedTypeRequest | 175,940 | 175,932 | -8 | -0.0%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 2,202,953 | 2,203,603 | 650 | 0.03%
Sema.FunctionOperatorRequest | 16,964 | 16,963 | -1 | -0.01%
Sema.GenericSignatureRequest | 2,999,580 | 2,998,325 | -1,255 | -0.04%
Sema.GetDestructorRequest | 40,981 | 40,981 | 0 | 0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 0 | 0 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 296,093 | 296,315 | 222 | 0.07%
Sema.GetRuntimeDiscoverableAttributes | 1,978,726 | 1,978,726 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 110 | 110 | 0 | 0.0%
Sema.GlobalActorInstanceRequest | 1,090 | 1,090 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 16,489 | 16,489 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 19,130 | 19,130 | 0 | 0.0%
Sema.HasDefaultInitRequest | 86,010 | 86,010 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 492,644 | 492,385 | -258 | -0.05%
Sema.HasImportsMatchingFlagRequest | 629,293 | 629,293 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 12,578,156 | 12,511,160 | -66,996 | -0.53%
Sema.HasMemberwiseInitRequest | 38,219 | 38,219 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 29,154 | 29,154 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 86,020 | 86,020 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 212,836 | 212,839 | 3 | 0.0%
Sema.InheritedDeclsReferencedRequest | 5,979,244 | 6,038,920 | 59,675 | 1.0%
Sema.InheritedTypeRequest | 409,672 | 409,973 | 300 | 0.07%
Sema.InheritsSuperclassInitializersRequest | 38,260 | 38,260 | 0 | 0.0%
Sema.InitKindRequest | 157,727 | 157,726 | -1 | -0.0%
Sema.InterfaceTypeRequest | 18,907,894 | 18,933,322 | 25,428 | 0.13%
Sema.IsABICompatibleOverrideRequest | 265,839 | 265,839 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 485,547 | 485,547 | 0 | 0.0%
Sema.IsActorRequest | 1,947,486 | 1,948,810 | 1,324 | 0.07%
Sema.IsCallAsFunctionNominalRequest | 5,815 | 5,850 | 35 | 0.6%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 55,143 | 55,143 | 0 | 0.0%
Sema.IsDistributedActorRequest | 2,172,267 | 2,174,345 | 2,078 | 0.1%
Sema.IsDynamicRequest | 2,652,472 | 2,653,116 | 644 | 0.02%
Sema.IsFinalRequest | 4,001,210 | 4,009,050 | 7,840 | 0.2%
Sema.IsGetterMutatingRequest | 660,410 | 660,402 | -8 | -0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 3,293,871 | 3,290,754 | -3,117 | -0.09%
Sema.IsMoveOnlyRequest | 506,994 | 508,096 | 1,102 | 0.22%
Sema.IsObjCRequest | 2,471,580 | 2,472,217 | 637 | 0.03%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 583,471 | 583,471 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 307,028 | 307,028 | 0 | 0.0%
Sema.IsStaticRequest | 1,386,535 | 1,386,538 | 3 | 0.0%
Sema.LazyStoragePropertyRequest | 2,348 | 2,348 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 432,111 | 432,111 | 0 | 0.0%
Sema.LookupAllConformancesInContextRequest | 2,317,728 | 2,326,521 | 8,792 | 0.38%
Sema.LookupInModuleRequest | 7,789,453 | 7,772,411 | -17,041 | -0.22%
Sema.LookupInfixOperatorRequest | 65,753 | 65,752 | -1 | -0.0%
Sema.LookupPostfixOperatorRequest | 74 | 74 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 28,292 | 28,292 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 350 | 350 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 837 | 837 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 351 | 351 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 3,007,360 | 2,990,311 | -17,049 | -0.57%
Sema.NamedLazyMemberLoadSuccessCount | 31,863,126 | 31,774,752 | -88,374 | -0.28%
Sema.NamingPatternRequest | 229,515 | 229,510 | -5 | -0.0%
Sema.NeedsNewVTableEntryRequest | 900,406 | 900,406 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 396,289 | 396,289 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 488,272 | 488,272 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 755,117 | 755,039 | -78 | -0.01%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 79,657,825 | 79,853,152 | 195,327 | 0.25%
Sema.NumDeclsTypechecked | 2,661,354 | 2,661,354 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 11,439,248 | 11,492,737 | 53,489 | 0.47%
Sema.NumLazyRequirementSignatures | 962,419 | 962,738 | 319 | 0.03%
Sema.NumTypesDeserialized | 22,550,109 | 22,569,539 | 19,430 | 0.09%
Sema.NumUnloadedLazyIterableDeclContexts | 8,129,259 | 8,172,527 | 43,268 | 0.53%
Sema.ObjCInterfaceAndImplementationRequest | 720,838 | 720,590 | -248 | -0.03%
Sema.OpaqueReadOwnershipRequest | 427,926 | 427,926 | 0 | 0.0%
Sema.OpaqueResultTypeRequest | 860 | 860 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 1,021 | 1,021 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 5,066,986 | 5,071,115 | 4,129 | 0.08%
Sema.ParamSpecifierRequest | 1,851,827 | 1,851,813 | -14 | -0.0%
Sema.PatternBindingEntryRequest | 652,843 | 652,838 | -5 | -0.0%
Sema.PatternTypeRequest | 765,306 | 765,301 | -5 | -0.0%
Sema.PolymorphicEffectKindRequest | 904,430 | 904,920 | 490 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 7 | 7 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 1,038 | 1,038 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 477,612 | 477,612 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 6,998 | 6,998 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 1,916,109 | 1,916,109 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 23,952 | 23,952 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 559,938 | 559,938 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 2,878 | 2,878 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 656,343 | 656,339 | -4 | -0.0%
Sema.PropertyWrapperTypeInfoRequest | 592 | 592 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 69,523 | 69,651 | 127 | 0.18%
Sema.ProtocolRequiresClassRequest | 42,948 | 42,967 | 18 | 0.04%
Sema.ProvideDefaultImplForRequest | 10,961,357 | 11,007,436 | 46,079 | 0.42%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 1,491 | 1,491 | 0 | 0.0%
Sema.RequirementRequest | 170,447 | 170,445 | -2 | -0.0%
Sema.RequiresOpaqueAccessorsRequest | 1,679,231 | 1,679,227 | -4 | -0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 427,117 | 427,117 | 0 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 33,434 | 33,434 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeRequest | 4,800,888 | 4,762,776 | -38,112 | -0.79%
Sema.ResultBuilderTypeRequest | 437,633 | 437,213 | -420 | -0.1%
Sema.ResultTypeRequest | 1,048,982 | 1,048,978 | -4 | -0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 6,900,741 | 6,895,313 | -5,428 | -0.08%
Sema.ScopedImportLookupRequest | 626 | 626 | 0 | 0.0%
Sema.SelfAccessKindRequest | 865,384 | 865,376 | -8 | -0.0%
Sema.SelfBoundsFromGenericSignatureRequest | 64,022 | 63,764 | -258 | -0.4%
Sema.SelfBoundsFromWhereClauseRequest | 1,703,414 | 1,699,966 | -3,447 | -0.2%
Sema.SemanticAvailableRangeAttrRequest | 5,205 | 5,205 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 148,794 | 148,794 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 228,917 | 228,914 | -3 | -0.0%
Sema.SimpleDidSetRequest | 2,730,906 | 2,738,955 | 8,049 | 0.29%
Sema.SpecializeAttrTargetDeclRequest | 2,997 | 2,997 | 0 | 0.0%
Sema.StorageImplInfoRequest | 1,924,454 | 1,924,443 | -11 | -0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 59,138 | 59,137 | -1 | -0.0%
Sema.StoredPropertiesRequest | 352,691 | 353,793 | 1,102 | 0.31%
Sema.StructuralRequirementsRequest | 53,513 | 53,653 | 140 | 0.26%
Sema.StructuralTypeRequest | 1,861 | 1,861 | 0 | 0.0%
Sema.SuperclassDeclRequest | 488,527 | 487,246 | -1,281 | -0.26%
Sema.SynthesizeAccessorRequest | 488,272 | 488,272 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 9,598 | 9,598 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 217,431 | 217,559 | 127 | 0.06%
Sema.SynthesizeMemberwiseInitRequest | 7,852 | 7,852 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 53,513 | 53,653 | 140 | 0.26%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 825,759 | 825,759 | 0 | 0.0%
Sema.TypeCheckSourceFileRequest | 51,134 | 51,134 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 50,878 | 50,878 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 13,792 | 13,752 | -40 | -0.29%
Sema.USRGenerationRequest | 12,321,367 | 12,367,440 | 46,073 | 0.37%
Sema.UnderlyingTypeRequest | 50,655 | 50,644 | -11 | -0.02%
Sema.UnqualifiedLookupRequest | 5,896,854 | 5,896,854 | 0 | 0.0%
Sema.ValidatePrecedenceGroupRequest | 217,449 | 217,449 | 0 | 0.0%
Sema.ValueWitnessRequest | 71,361 | 71,369 | 8 | 0.01%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 25,313 | 25,313 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>

<a name=""release-360b6da065cd3272"">

# Release

<a name=""release-brief-360b6da065cd3272"">

## release brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 106,664,472,497,256 | 104,649,706,353,377 | -2,014,766,143,878 | -1.89% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 2,031,981,772 | 2,032,303,376 | 321,604 | 0.02%
</details>

<a name=""release-detailed-360b6da065cd3272"">

## release detailed
<details>
<summary>Regressed (8)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Sema.InheritedDeclsReferencedRequest | 1,249,080 | 1,284,675 | 35,595 | 2.85% :no_entry:
Sema.NumConformancesDeserialized | 933,233 | 966,781 | 33,547 | 3.59% :no_entry:
Sema.NumLazyRequirementSignaturesLoaded | 108,093 | 109,286 | 1,193 | 1.1% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 4,524,792 | 4,824,890 | 300,098 | 6.63% :no_entry:
Sema.NumRequirementMachineUnifiedConcreteTerms | 354,953 | 358,636 | 3,683 | 1.04% :no_entry:
Sema.NumRequirementMachines | 406,135 | 419,533 | 13,398 | 3.3% :no_entry:
Sema.ProtocolDependenciesRequest | 101,004 | 107,403 | 6,398 | 6.33% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 62,869 | 65,784 | 2,914 | 4.64% :no_entry:
</details>
<details>
<summary>Improved (16)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 106,664,472,497,256 | 104,649,706,353,377 | -2,014,766,143,878 | -1.89% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 428,682 | 388,944 | -39,738 | -9.27% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 9,388 | 9,115 | -273 | -2.91% :white_check_mark:
Sema.DefaultTypeRequest | 319,721 | 232,458 | -87,263 | -27.29% :white_check_mark:
Sema.DirectLookupRequest | 45,118,686 | 43,959,011 | -1,159,674 | -2.57% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 6,116 | 6,037 | -79 | -1.29% :white_check_mark:
Sema.GenericParamListRequest | 1,706,592 | 1,636,156 | -70,436 | -4.13% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 10,756 | 10,637 | -119 | -1.11% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 29,235 | 3,781 | -25,454 | -87.07% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 53,345,797 | 47,513,376 | -5,832,421 | -10.93% :white_check_mark:
Sema.NumConstraintScopes | 37,991,609 | 18,453,097 | -19,538,512 | -51.43% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,797,971 | 1,237,162 | -560,809 | -31.19% :white_check_mark:
Sema.NumLeafScopes | 28,390,767 | 11,591,526 | -16,799,240 | -59.17% :white_check_mark:
Sema.QualifiedLookupRequest | 4,592,149 | 4,494,324 | -97,825 | -2.13% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 468,597 | 442,478 | -26,119 | -5.57% :white_check_mark:
Sema.ResolveTypeRequest | 2,313,809 | 2,279,909 | -33,900 | -1.47% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (286)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 1,571,463 | 1,571,210 | -253 | -0.02%
AST.ImportSetCacheMiss | 83,446 | 83,451 | 5 | 0.01%
AST.ImportSetFoldHit | 42,171 | 42,173 | 2 | 0.0%
AST.ImportSetFoldMiss | 41,275 | 41,278 | 3 | 0.01%
AST.ModuleShadowCacheHit | 5,278 | 5,268 | -10 | -0.19%
AST.ModuleShadowCacheMiss | 1,357 | 1,357 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 8,168,310 | 8,167,982 | -328 | -0.0%
AST.ModuleVisibilityCacheMiss | 30,359 | 30,359 | 0 | 0.0%
AST.NumASTBytesAllocated | 11,953,107,872 | 11,964,162,287 | 11,054,415 | 0.09%
AST.NumASTScopeExpansions | 3,305,294 | 3,305,294 | 0 | 0.0%
AST.NumASTScopeLookups | 4,728,830 | 4,728,709 | -121 | -0.0%
AST.NumDecls | 165,177 | 165,177 | 0 | 0.0%
AST.NumDependencies | 55,521 | 55,521 | 0 | 0.0%
AST.NumIncrementalDependencies | 58 | 58 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 32,702 | 32,702 | 0 | 0.0%
AST.NumLocalTypeDecls | 1,057 | 1,057 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,694 | 6,694 | 0 | 0.0%
AST.NumModuleLookupValue | 41,962,749 | 41,953,996 | -8,753 | -0.02%
AST.NumObjCMethods | 33,770 | 33,770 | 0 | 0.0%
AST.NumOperators | 512 | 512 | 0 | 0.0%
AST.NumPrecedenceGroups | 88 | 88 | 0 | 0.0%
AST.NumReferencedDynamicNames | 0 | 0 | 0 | 0.0%
AST.NumReferencedMemberNames | 4,002 | 3,994 | -8 | -0.2%
AST.NumReferencedTopLevelNames | 352 | 352 | 0 | 0.0%
AST.NumSourceBuffers | 33,014 | 33,014 | 0 | 0.0%
AST.NumSourceLines | 5,578,479 | 5,578,479 | 0 | 0.0%
AST.NumSourceLinesPerSecond | 332,296 | 335,568 | 3,272 | 0.98%
AST.NumTotalClangImportedEntities | 490,482 | 490,378 | -104 | -0.02%
Frontend.MaxMallocUsage | 285,850,712,312 | 286,550,438,120 | 699,725,808 | 0.24%
Frontend.NumProcessFailures | 8 | 8 | 0 | 0.0%
IRGen.IRGenRequest | 12 | 12 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 231,647 | 231,631 | -16 | -0.01%
IRModule.NumIRAliases | 165,245 | 165,245 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 5,290,987 | 5,282,505 | -8,482 | -0.16%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,047,687 | 3,048,773 | 1,086 | 0.04%
IRModule.NumIRGlobals | 3,311,822 | 3,311,875 | 53 | 0.0%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 51,088,813 | 51,097,494 | 8,681 | 0.02%
IRModule.NumIRNamedMetaData | 128,437 | 128,437 | 0 | 0.0%
IRModule.NumIRValueSymbols | 6,389,006 | 6,390,145 | 1,139 | 0.02%
LLVM.NumLLVMBytesOutput | 2,031,981,772 | 2,032,303,376 | 321,604 | 0.02%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 297,164 | 297,164 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 113,773 | 113,773 | 0 | 0.0%
Parse.ParseAbstractFunctionBodyRequest | 311,053 | 311,053 | 0 | 0.0%
Parse.ParseMembersRequest | 14,598 | 14,598 | 0 | 0.0%
Parse.ParseSourceFileRequest | 31,099 | 31,099 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 31,099 | 31,099 | 0 | 0.0%
SILGen.ASTLoweringRequest | 1,250 | 1,250 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILGenFunctions | 1,422,047 | 1,422,342 | 295 | 0.02%
SILModule.NumSILGenGlobalVariables | 59,773 | 59,773 | 0 | 0.0%
SILModule.NumSILGenVtables | 24,120 | 24,120 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 80,025 | 80,025 | 0 | 0.0%
SILModule.NumSILOptDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILOptFunctions | 1,247,410 | 1,247,925 | 515 | 0.04%
SILModule.NumSILOptGlobalVariables | 56,238 | 56,334 | 96 | 0.17%
SILModule.NumSILOptVtables | 28,355 | 28,355 | 0 | 0.0%
SILModule.NumSILOptWitnessTables | 80,540 | 80,540 | 0 | 0.0%
SILOptimizer.ExecuteSILPipelineRequest | 4,896 | 4,896 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 121,353 | 121,353 | 0 | 0.0%
Sema.AbstractGenericSignatureRequest | 70,546 | 70,554 | 8 | 0.01%
Sema.AccessLevelRequest | 2,942,402 | 2,945,957 | 3,555 | 0.12%
Sema.ActorIsolationRequest | 2,099,226 | 2,080,692 | -18,534 | -0.88%
Sema.AllMembersRequest | 96,478 | 96,478 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 236 | 236 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 1,980,342 | 1,980,349 | 7 | 0.0%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 22,050 | 22,050 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 9,486 | 9,486 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 4,420,461 | 4,418,648 | -1,813 | -0.04%
Sema.AttachedResultBuilderRequest | 919,403 | 919,235 | -168 | -0.02%
Sema.BodyInitKindRequest | 53,355 | 53,355 | 0 | 0.0%
Sema.BreakTargetRequest | 4,399 | 4,399 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 239,298 | 239,298 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 31,075 | 31,075 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,182,991 | 1,182,991 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 6,804 | 6,782 | -22 | -0.32%
Sema.ClangRecordMemberLookup | 6,804 | 6,782 | -22 | -0.32%
Sema.ClassAncestryFlagsRequest | 56,451 | 56,393 | -58 | -0.1%
Sema.ClosureEffectsRequest | 103,378 | 103,378 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 36,201 | 36,201 | 0 | 0.0%
Sema.CollectOverriddenDeclsRequest | 1,052,530 | 1,058,284 | 5,754 | 0.55%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConditionalRequirementsRequest | 225,272 | 225,017 | -255 | -0.11%
Sema.ConformanceHasEffectRequest | 3 | 3 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,680 | 1,680 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 9,123 | 9,123 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 1,323 | 1,323 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 49,490 | 49,490 | 0 | 0.0%
Sema.DefaultArgumentExprRequest | 45,819 | 45,819 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 299 | 299 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 3,221 | 3,221 | 0 | 0.0%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,429,974 | 1,429,834 | -140 | -0.01%
Sema.DirectPrecedenceGroupLookupRequest | 623,012 | 623,012 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 0 | 0 | 0 | 0.0%
Sema.DynamicallyReplacedDeclRequest | 2,271,913 | 2,253,681 | -18,232 | -0.8%
Sema.EnumRawTypeRequest | 10,201 | 10,201 | 0 | 0.0%
Sema.EnumRawValuesRequest | 10,458 | 10,458 | 0 | 0.0%
Sema.ExistentialRequiresAnyRequest | 7,538 | 7,538 | 0 | 0.0%
Sema.ExpandAccessorMacros | 666,097 | 666,094 | -3 | -0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 8,000,448 | 7,997,499 | -2,949 | -0.04%
Sema.ExpandPeerMacroRequest | 839,435 | 839,435 | 0 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 237,101 | 236,786 | -315 | -0.13%
Sema.ExtendedNominalRequest | 53,902 | 53,902 | 0 | 0.0%
Sema.ExtendedTypeRequest | 53,818 | 53,818 | 0 | 0.0%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 1,195,324 | 1,195,611 | 287 | 0.02%
Sema.FunctionOperatorRequest | 8,357 | 8,357 | 0 | 0.0%
Sema.GenericSignatureRequest | 1,155,021 | 1,154,952 | -69 | -0.01%
Sema.GetDestructorRequest | 25,348 | 25,348 | 0 | 0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 0 | 0 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 68,133 | 68,351 | 218 | 0.32%
Sema.GetRuntimeDiscoverableAttributes | 1,238,354 | 1,238,354 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 54 | 54 | 0 | 0.0%
Sema.GlobalActorAttributeRequest | 2,825,190 | 2,805,348 | -19,842 | -0.7%
Sema.GlobalActorInstanceRequest | 232 | 232 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 8,251 | 8,251 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 10,199 | 10,199 | 0 | 0.0%
Sema.HasDefaultInitRequest | 39,836 | 39,836 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 137,662 | 137,441 | -221 | -0.16%
Sema.HasImportsMatchingFlagRequest | 61,868 | 61,868 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 4,219,517 | 4,201,952 | -17,565 | -0.42%
Sema.HasMemberwiseInitRequest | 15,260 | 15,260 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 20,931 | 20,931 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 39,836 | 39,836 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 86,475 | 86,475 | 0 | 0.0%
Sema.InheritedProtocolsRequest | 123,234 | 124,317 | 1,083 | 0.88%
Sema.InheritedTypeRequest | 204,709 | 204,712 | 3 | 0.0%
Sema.InheritsSuperclassInitializersRequest | 20,910 | 20,910 | 0 | 0.0%
Sema.InitKindRequest | 77,588 | 77,588 | 0 | 0.0%
Sema.InterfaceTypeRequest | 5,207,870 | 5,207,680 | -189 | -0.0%
Sema.IsABICompatibleOverrideRequest | 156,763 | 156,763 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 272,772 | 272,772 | 0 | 0.0%
Sema.IsActorRequest | 387,436 | 387,693 | 257 | 0.07%
Sema.IsCallAsFunctionNominalRequest | 5,691 | 5,719 | 28 | 0.49%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 32,806 | 32,806 | 0 | 0.0%
Sema.IsDistributedActorRequest | 448,950 | 449,272 | 322 | 0.07%
Sema.IsDynamicRequest | 1,472,271 | 1,472,556 | 285 | 0.02%
Sema.IsFinalRequest | 1,455,662 | 1,456,503 | 841 | 0.06%
Sema.IsGetterMutatingRequest | 400,637 | 400,637 | 0 | 0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 2,137,688 | 2,137,101 | -587 | -0.03%
Sema.IsMoveOnlyRequest | 176,932 | 177,045 | 113 | 0.06%
Sema.IsObjCRequest | 1,332,592 | 1,332,599 | 7 | 0.0%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 389,266 | 389,266 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 263,003 | 263,003 | 0 | 0.0%
Sema.IsStaticRequest | 655,776 | 655,747 | -29 | -0.0%
Sema.LazyStoragePropertyRequest | 562 | 562 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 313,456 | 313,456 | 0 | 0.0%
Sema.LookupAllConformancesInContextRequest | 326,787 | 327,590 | 803 | 0.25%
Sema.LookupInModuleRequest | 2,814,473 | 2,808,307 | -6,166 | -0.22%
Sema.LookupInfixOperatorRequest | 55,527 | 55,527 | 0 | 0.0%
Sema.LookupPostfixOperatorRequest | 37 | 37 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 25,504 | 25,504 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 166 | 166 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 1,037 | 1,037 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 141 | 141 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 638,594 | 632,534 | -6,060 | -0.95%
Sema.NamedLazyMemberLoadSuccessCount | 12,026,998 | 11,997,685 | -29,313 | -0.24%
Sema.NamingPatternRequest | 67,644 | 67,644 | 0 | 0.0%
Sema.NeedsNewVTableEntryRequest | 616,327 | 616,327 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 235,221 | 235,221 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 238,230 | 238,230 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 752,359 | 752,369 | 10 | 0.0%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 15,547,218 | 15,556,710 | 9,491 | 0.06%
Sema.NumDeclsTypechecked | 1,697,950 | 1,697,950 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 2,040,186 | 2,048,513 | 8,326 | 0.41%
Sema.NumLazyRequirementSignatures | 147,711 | 147,846 | 134 | 0.09%
Sema.NumTypesDeserialized | 6,226,879 | 6,225,701 | -1,178 | -0.02%
Sema.NumUnloadedLazyIterableDeclContexts | 1,382,934 | 1,390,220 | 7,285 | 0.53%
Sema.ObjCInterfaceAndImplementationRequest | 447,818 | 447,761 | -57 | -0.01%
Sema.OpaqueReadOwnershipRequest | 204,934 | 204,934 | 0 | 0.0%
Sema.OpaqueResultTypeRequest | 366 | 366 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 445 | 445 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 1,601,327 | 1,601,957 | 630 | 0.04%
Sema.ParamSpecifierRequest | 918,613 | 918,613 | 0 | 0.0%
Sema.PatternBindingEntryRequest | 347,392 | 347,392 | 0 | 0.0%
Sema.PatternTypeRequest | 449,371 | 449,371 | 0 | 0.0%
Sema.PolymorphicEffectKindRequest | 543,531 | 543,799 | 268 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 5 | 5 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 954 | 954 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 415,623 | 415,623 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 6,928 | 6,928 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 1,425,314 | 1,425,314 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 9,486 | 9,486 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 389,660 | 389,660 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 1,439 | 1,439 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 398,939 | 398,939 | 0 | 0.0%
Sema.PropertyWrapperTypeInfoRequest | 137 | 137 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 17,502 | 17,502 | 0 | 0.0%
Sema.ProtocolRequiresClassRequest | 9,318 | 9,322 | 4 | 0.04%
Sema.ProvideDefaultImplForRequest | 1,052,530 | 1,058,284 | 5,754 | 0.55%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 1,013 | 1,013 | 0 | 0.0%
Sema.RequirementRequest | 87,751 | 87,751 | 0 | 0.0%
Sema.RequirementSignatureRequest | 119,246 | 120,441 | 1,195 | 1.0%
Sema.RequiresOpaqueAccessorsRequest | 1,293,434 | 1,293,434 | 0 | 0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 204,603 | 204,603 | 0 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 17,222 | 17,222 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResultBuilderTypeRequest | 359,691 | 359,477 | -214 | -0.06%
Sema.ResultTypeRequest | 475,348 | 475,348 | 0 | 0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 2,290,958 | 2,289,275 | -1,683 | -0.07%
Sema.ScopedImportLookupRequest | 311 | 311 | 0 | 0.0%
Sema.SelfAccessKindRequest | 358,978 | 358,966 | -12 | -0.0%
Sema.SelfBoundsFromGenericSignatureRequest | 22,747 | 22,747 | 0 | 0.0%
Sema.SelfBoundsFromWhereClauseRequest | 525,836 | 525,239 | -597 | -0.11%
Sema.SemanticAvailableRangeAttrRequest | 2,493 | 2,493 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 97,693 | 97,693 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 175,337 | 175,334 | -3 | -0.0%
Sema.SimpleDidSetRequest | 560,868 | 562,400 | 1,532 | 0.27%
Sema.SpecializeAttrTargetDeclRequest | 1,604 | 1,604 | 0 | 0.0%
Sema.StorageImplInfoRequest | 1,439,990 | 1,439,987 | -3 | -0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 43,638 | 43,638 | 0 | 0.0%
Sema.StoredPropertiesRequest | 143,943 | 144,005 | 62 | 0.04%
Sema.StructuralRequirementsRequest | 11,166 | 11,168 | 2 | 0.02%
Sema.StructuralTypeRequest | 532 | 532 | 0 | 0.0%
Sema.SuperclassDeclRequest | 110,908 | 110,788 | -120 | -0.11%
Sema.SuperclassTypeRequest | 30,470 | 30,374 | -96 | -0.32%
Sema.SynthesizeAccessorRequest | 238,230 | 238,230 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 3,748 | 3,748 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 111,216 | 111,216 | 0 | 0.0%
Sema.SynthesizeMemberwiseInitRequest | 3,295 | 3,295 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 11,166 | 11,168 | 2 | 0.02%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 603,000 | 603,000 | 0 | 0.0%
Sema.TypeCheckSourceFileRequest | 31,075 | 31,075 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 28,965 | 28,965 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 4,644 | 4,645 | 1 | 0.02%
Sema.USRGenerationRequest | 1,547,778 | 1,554,038 | 6,260 | 0.4%
Sema.UnderlyingTypeRequest | 26,349 | 26,349 | 0 | 0.0%
Sema.UnqualifiedLookupRequest | 2,708,286 | 2,708,180 | -106 | -0.0%
Sema.ValidatePrecedenceGroupRequest | 195,506 | 195,506 | 0 | 0.0%
Sema.ValueWitnessRequest | 33,441 | 33,448 | 7 | 0.02%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 1,198 | 1,198 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>
 @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please test compiler performance # Summary for main full

**Regressions found (see below)**

- [Debug-batch](#debug-batch-10b146e70e9ee20d)
    - [debug-batch brief](#debug-batch-brief-10b146e70e9ee20d)
    - [debug-batch detailed](#debug-batch-detailed-10b146e70e9ee20d)
- [Release](#release-10b146e70e9ee20d)
    - [release brief](#release-brief-10b146e70e9ee20d)
    - [release detailed](#release-detailed-10b146e70e9ee20d)



<a name=""debug-batch-10b146e70e9ee20d"">

# Debug-batch

<a name=""debug-batch-brief-10b146e70e9ee20d"">

## debug-batch brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 87,509,068,046,604 | 84,865,246,054,675 | -2,643,821,991,928 | -3.02% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 1,967,713,484 | 1,969,251,488 | 1,538,004 | 0.08%
</details>

<a name=""debug-batch-detailed-10b146e70e9ee20d"">

## debug-batch detailed
<details>
<summary>Regressed (7)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Sema.InheritedProtocolsRequest | 727,073 | 736,451 | 9,378 | 1.29% :no_entry:
Sema.NumConformancesDeserialized | 4,835,180 | 4,894,027 | 58,846 | 1.22% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 22,499,291 | 24,496,412 | 1,997,121 | 8.88% :no_entry:
Sema.NumRequirementMachineUnifiedConcreteTerms | 969,667 | 998,581 | 28,914 | 2.98% :no_entry:
Sema.NumRequirementMachines | 1,884,685 | 1,962,763 | 78,078 | 4.14% :no_entry:
Sema.ProtocolDependenciesRequest | 560,686 | 603,851 | 43,165 | 7.7% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 293,495 | 297,846 | 4,351 | 1.48% :no_entry:
</details>
<details>
<summary>Improved (18)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 87,509,068,046,604 | 84,865,246,054,675 | -2,643,821,991,928 | -3.02% :white_check_mark:
Sema.ActorIsolationRequest | 5,686,952 | 5,597,220 | -89,731 | -1.58% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 637,008 | 589,402 | -47,606 | -7.47% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 19,534 | 19,233 | -301 | -1.54% :white_check_mark:
Sema.DefaultTypeRequest | 394,165 | 291,181 | -102,984 | -26.13% :white_check_mark:
Sema.DirectLookupRequest | 56,677,349 | 55,374,045 | -1,303,304 | -2.3% :white_check_mark:
Sema.DynamicallyReplacedDeclRequest | 6,066,567 | 5,977,827 | -88,740 | -1.46% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 25,422 | 24,250 | -1,172 | -4.61% :white_check_mark:
Sema.GenericParamListRequest | 5,799,760 | 5,663,712 | -136,048 | -2.35% :white_check_mark:
Sema.GlobalActorAttributeRequest | 7,236,512 | 7,143,166 | -93,346 | -1.29% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 24,473 | 24,179 | -294 | -1.2% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 52,971 | 6,353 | -46,618 | -88.01% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 71,704,555 | 63,277,740 | -8,426,815 | -11.75% :white_check_mark:
Sema.NumConstraintScopes | 49,054,676 | 22,405,289 | -26,649,387 | -54.33% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,845,847 | 1,160,973 | -684,874 | -37.1% :white_check_mark:
Sema.NumLeafScopes | 37,007,359 | 14,364,329 | -22,643,029 | -61.19% :white_check_mark:
Sema.QualifiedLookupRequest | 7,823,520 | 7,703,379 | -120,141 | -1.54% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 745,928 | 717,279 | -28,649 | -3.84% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (285)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 2,974,389 | 2,974,300 | -89 | -0.0%
AST.ImportSetCacheMiss | 674,415 | 674,440 | 25 | 0.0%
AST.ImportSetFoldHit | 342,551 | 342,562 | 11 | 0.0%
AST.ImportSetFoldMiss | 331,864 | 331,878 | 14 | 0.0%
AST.ModuleShadowCacheHit | 7,767 | 7,757 | -10 | -0.13%
AST.ModuleShadowCacheMiss | 2,413 | 2,413 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 16,809,170 | 16,808,918 | -252 | -0.0%
AST.ModuleVisibilityCacheMiss | 144,379 | 144,379 | 0 | 0.0%
AST.NumASTBytesAllocated | 48,592,999,121 | 48,652,329,890 | 59,330,769 | 0.12%
AST.NumASTScopeExpansions | 6,824,498 | 6,825,146 | 648 | 0.01%
AST.NumASTScopeLookups | 7,564,599 | 7,564,691 | 92 | 0.0%
AST.NumDecls | 287,613 | 287,613 | 0 | 0.0%
AST.NumDependencies | 374,970 | 374,970 | 0 | 0.0%
AST.NumIncrementalDependencies | 17,791 | 17,791 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 276,684 | 276,684 | 0 | 0.0%
AST.NumLocalTypeDecls | 1,894 | 1,894 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,820 | 6,820 | 0 | 0.0%
AST.NumModuleLookupValue | 83,459,851 | 83,433,364 | -26,487 | -0.03%
AST.NumObjCMethods | 67,500 | 67,500 | 0 | 0.0%
AST.NumOperators | 1,022 | 1,022 | 0 | 0.0%
AST.NumPrecedenceGroups | 172 | 172 | 0 | 0.0%
AST.NumReferencedDynamicNames | 159 | 159 | 0 | 0.0%
AST.NumReferencedMemberNames | 11,324,447 | 11,301,609 | -22,838 | -0.2%
AST.NumReferencedTopLevelNames | 1,089,397 | 1,088,847 | -550 | -0.05%
AST.NumSourceBuffers | 323,047 | 323,047 | 0 | 0.0%
AST.NumSourceLines | 9,843,082 | 9,843,082 | 0 | 0.0%
AST.NumSourceLinesPerSecond | 5,150,333 | 5,178,421 | 28,088 | 0.55%
AST.NumTotalClangImportedEntities | 1,629,642 | 1,628,120 | -1,522 | -0.09%
Frontend.MaxMallocUsage | 811,583,969,648 | 816,564,674,464 | 4,980,704,816 | 0.61%
Frontend.NumProcessFailures | 34 | 34 | 0 | 0.0%
IRGen.IRGenRequest | 25,299 | 25,299 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 243,986 | 244,101 | 115 | 0.05%
IRModule.NumIRAliases | 197,237 | 197,237 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 6,868,778 | 6,887,361 | 18,583 | 0.27%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,642,355 | 3,646,933 | 4,578 | 0.13%
IRModule.NumIRGlobals | 3,587,291 | 3,588,927 | 1,636 | 0.05%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 83,456,734 | 83,522,477 | 65,743 | 0.08%
IRModule.NumIRNamedMetaData | 125,495 | 125,495 | 0 | 0.0%
IRModule.NumIRValueSymbols | 7,282,487 | 7,288,697 | 6,210 | 0.09%
LLVM.NumLLVMBytesOutput | 1,967,713,484 | 1,969,251,488 | 1,538,004 | 0.08%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 316,020 | 316,020 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 643,373 | 643,306 | -67 | -0.01%
Parse.ParseAbstractFunctionBodyRequest | 540,762 | 540,770 | 8 | 0.0%
Parse.ParseMembersRequest | 497,094 | 497,027 | -67 | -0.01%
Parse.ParseSourceFileRequest | 316,761 | 316,761 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 316,761 | 316,761 | 0 | 0.0%
SILGen.ASTLoweringRequest | 26,491 | 26,491 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenFunctions | 2,721,058 | 2,721,513 | 455 | 0.02%
SILModule.NumSILGenGlobalVariables | 114,833 | 114,833 | 0 | 0.0%
SILModule.NumSILGenVtables | 34,449 | 34,449 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 144,406 | 144,450 | 44 | 0.03%
SILModule.NumSILOptDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILOptFunctions | 3,200,449 | 3,202,433 | 1,984 | 0.06%
SILModule.NumSILOptGlobalVariables | 116,590 | 116,588 | -2 | -0.0%
SILModule.NumSILOptVtables | 34,724 | 34,720 | -4 | -0.01%
SILModule.NumSILOptWitnessTables | 177,031 | 177,242 | 211 | 0.12%
SILOptimizer.ExecuteSILPipelineRequest | 103,608 | 103,608 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 251,191 | 251,290 | 99 | 0.04%
Sema.AbstractGenericSignatureRequest | 123,476 | 123,615 | 139 | 0.11%
Sema.AccessLevelRequest | 14,682,111 | 14,744,335 | 62,224 | 0.42%
Sema.AllMembersRequest | 93,859 | 93,859 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 234 | 234 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 3,563,798 | 3,564,391 | 592 | 0.02%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 39,537 | 39,537 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 23,952 | 23,952 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 18,110,893 | 18,138,501 | 27,608 | 0.15%
Sema.AttachedResultBuilderRequest | 1,553,015 | 1,552,533 | -482 | -0.03%
Sema.BodyInitKindRequest | 70,234 | 70,238 | 4 | 0.01%
Sema.BreakTargetRequest | 5,248 | 5,248 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 276,951 | 276,951 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 51,134 | 51,134 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,879,444 | 1,879,444 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 13,011 | 12,932 | -79 | -0.61%
Sema.ClangRecordMemberLookup | 13,011 | 12,932 | -79 | -0.61%
Sema.ClassAncestryFlagsRequest | 129,672 | 129,420 | -252 | -0.19%
Sema.ClosureEffectsRequest | 113,085 | 113,085 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 40,634 | 40,634 | 0 | 0.0%
Sema.CollectOverriddenDeclsRequest | 10,984,981 | 11,027,963 | 42,982 | 0.39%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConditionalRequirementsRequest | 692,128 | 691,932 | -196 | -0.03%
Sema.ConformanceHasEffectRequest | 4 | 4 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,886 | 1,886 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 22,469 | 22,469 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 3,355 | 3,355 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 100,387 | 100,387 | 0 | 0.0%
Sema.DefaultArgumentExprRequest | 87,254 | 87,254 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 791 | 791 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 7,199 | 7,192 | -7 | -0.1%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,884,226 | 1,883,745 | -481 | -0.03%
Sema.DirectPrecedenceGroupLookupRequest | 733,019 | 733,019 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 0 | 0 | 0 | 0.0%
Sema.EnumRawTypeRequest | 33,553 | 33,563 | 10 | 0.03%
Sema.EnumRawValuesRequest | 18,944 | 18,944 | 0 | 0.0%
Sema.ExistentialRequiresAnyRequest | 14,983 | 14,983 | 0 | 0.0%
Sema.ExpandAccessorMacros | 1,054,081 | 1,054,105 | 24 | 0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 33,490,407 | 33,535,803 | 45,396 | 0.14%
Sema.ExpandPeerMacroRequest | 3,397,396 | 3,397,525 | 129 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 855,085 | 853,098 | -1,987 | -0.23%
Sema.ExtendedNominalRequest | 571,948 | 571,948 | 0 | 0.0%
Sema.ExtendedTypeRequest | 175,947 | 175,938 | -9 | -0.01%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 2,203,039 | 2,203,571 | 532 | 0.02%
Sema.FunctionOperatorRequest | 16,964 | 16,964 | 0 | 0.0%
Sema.GenericSignatureRequest | 3,000,313 | 2,999,279 | -1,034 | -0.03%
Sema.GetDestructorRequest | 40,981 | 40,980 | -1 | -0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 0 | 0 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 296,525 | 296,598 | 72 | 0.02%
Sema.GetRuntimeDiscoverableAttributes | 1,978,834 | 1,978,834 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 110 | 110 | 0 | 0.0%
Sema.GlobalActorInstanceRequest | 1,090 | 1,090 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 16,489 | 16,489 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 19,134 | 19,134 | 0 | 0.0%
Sema.HasDefaultInitRequest | 86,014 | 86,014 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 492,764 | 492,478 | -286 | -0.06%
Sema.HasImportsMatchingFlagRequest | 629,293 | 629,293 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 12,586,999 | 12,509,693 | -77,306 | -0.61%
Sema.HasMemberwiseInitRequest | 38,223 | 38,223 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 29,154 | 29,154 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 86,024 | 86,024 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 212,841 | 212,841 | 0 | 0.0%
Sema.InheritedDeclsReferencedRequest | 5,987,801 | 6,041,108 | 53,307 | 0.89%
Sema.InheritedTypeRequest | 409,677 | 409,862 | 185 | 0.05%
Sema.InheritsSuperclassInitializersRequest | 38,260 | 38,261 | 1 | 0.0%
Sema.InitKindRequest | 157,735 | 157,738 | 3 | 0.0%
Sema.InterfaceTypeRequest | 18,929,373 | 18,949,947 | 20,574 | 0.11%
Sema.IsABICompatibleOverrideRequest | 265,863 | 265,863 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 485,567 | 485,567 | 0 | 0.0%
Sema.IsActorRequest | 1,948,323 | 1,949,605 | 1,281 | 0.07%
Sema.IsCallAsFunctionNominalRequest | 5,815 | 5,781 | -34 | -0.58%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 55,143 | 55,152 | 9 | 0.02%
Sema.IsDistributedActorRequest | 2,175,155 | 2,177,150 | 1,995 | 0.09%
Sema.IsDynamicRequest | 2,652,600 | 2,653,143 | 543 | 0.02%
Sema.IsFinalRequest | 4,003,327 | 4,010,728 | 7,401 | 0.18%
Sema.IsGetterMutatingRequest | 660,438 | 660,434 | -4 | -0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 3,294,145 | 3,290,974 | -3,171 | -0.1%
Sema.IsMoveOnlyRequest | 605,948 | 607,302 | 1,354 | 0.22%
Sema.IsObjCRequest | 2,471,936 | 2,472,529 | 592 | 0.02%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 583,497 | 583,497 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 307,034 | 307,034 | 0 | 0.0%
Sema.IsStaticRequest | 1,386,685 | 1,386,766 | 81 | 0.01%
Sema.LazyStoragePropertyRequest | 2,348 | 2,348 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 432,133 | 432,133 | 0 | 0.0%
Sema.LookupAllConformancesInContextRequest | 2,321,185 | 2,330,217 | 9,032 | 0.39%
Sema.LookupInModuleRequest | 7,786,508 | 7,769,642 | -16,865 | -0.22%
Sema.LookupInfixOperatorRequest | 65,755 | 65,755 | 0 | 0.0%
Sema.LookupPostfixOperatorRequest | 74 | 74 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 28,292 | 28,292 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 350 | 350 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 837 | 837 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 351 | 351 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 3,007,665 | 2,990,660 | -17,005 | -0.57%
Sema.NamedLazyMemberLoadSuccessCount | 31,868,507 | 31,782,006 | -86,501 | -0.27%
Sema.NamingPatternRequest | 229,520 | 229,518 | -2 | -0.0%
Sema.NeedsNewVTableEntryRequest | 900,448 | 900,448 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 396,321 | 396,321 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 488,304 | 488,304 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 756,462 | 756,389 | -72 | -0.01%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 79,805,284 | 79,993,196 | 187,912 | 0.24%
Sema.NumDeclsTypechecked | 2,661,506 | 2,661,506 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 11,447,467 | 11,490,113 | 42,646 | 0.37%
Sema.NumLazyRequirementSignatures | 962,948 | 963,069 | 120 | 0.01%
Sema.NumLazyRequirementSignaturesLoaded | 656,669 | 662,076 | 5,407 | 0.82%
Sema.NumTypesDeserialized | 22,697,821 | 22,726,723 | 28,902 | 0.13%
Sema.NumUnloadedLazyIterableDeclContexts | 8,130,414 | 8,162,219 | 31,805 | 0.39%
Sema.ObjCInterfaceAndImplementationRequest | 721,124 | 721,796 | 672 | 0.09%
Sema.OpaqueReadOwnershipRequest | 427,950 | 427,954 | 4 | 0.0%
Sema.OpaqueResultTypeRequest | 860 | 860 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 1,021 | 1,021 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 5,069,560 | 5,073,263 | 3,703 | 0.07%
Sema.ParamSpecifierRequest | 1,851,922 | 1,851,915 | -7 | -0.0%
Sema.PatternBindingEntryRequest | 652,872 | 652,870 | -2 | -0.0%
Sema.PatternTypeRequest | 765,335 | 765,333 | -2 | -0.0%
Sema.PolymorphicEffectKindRequest | 904,450 | 904,896 | 446 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 7 | 7 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 1,038 | 1,038 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 477,636 | 477,636 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 6,998 | 6,998 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 9,556 | 9,556 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 1,916,227 | 1,916,227 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 23,952 | 23,952 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 559,966 | 559,966 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 2,878 | 2,878 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 656,371 | 656,371 | 0 | 0.0%
Sema.PropertyWrapperTypeInfoRequest | 592 | 592 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 69,525 | 69,624 | 99 | 0.14%
Sema.ProtocolRequiresClassRequest | 42,943 | 42,901 | -42 | -0.1%
Sema.ProvideDefaultImplForRequest | 10,984,981 | 11,027,963 | 42,982 | 0.39%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 1,491 | 1,491 | 0 | 0.0%
Sema.RequirementRequest | 170,448 | 170,445 | -3 | -0.0%
Sema.RequirementSignatureRequest | 710,044 | 715,514 | 5,469 | 0.77%
Sema.RequiresOpaqueAccessorsRequest | 1,679,299 | 1,679,309 | 10 | 0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 427,141 | 427,151 | 10 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 29,838 | 29,838 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeRequest | 4,801,034 | 4,761,445 | -39,589 | -0.82%
Sema.ResultBuilderTypeRequest | 437,645 | 436,989 | -656 | -0.15%
Sema.ResultTypeRequest | 1,049,021 | 1,049,014 | -7 | -0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 6,903,458 | 6,898,031 | -5,427 | -0.08%
Sema.ScopedImportLookupRequest | 626 | 626 | 0 | 0.0%
Sema.SelfAccessKindRequest | 865,490 | 865,445 | -44 | -0.01%
Sema.SelfBoundsFromGenericSignatureRequest | 64,022 | 63,764 | -258 | -0.4%
Sema.SelfBoundsFromWhereClauseRequest | 1,704,344 | 1,700,294 | -4,050 | -0.24%
Sema.SemanticAvailableRangeAttrRequest | 5,205 | 5,205 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 148,794 | 148,794 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 228,937 | 228,934 | -3 | -0.0%
Sema.SimpleDidSetRequest | 2,737,203 | 2,743,398 | 6,195 | 0.23%
Sema.SpecializeAttrTargetDeclRequest | 2,997 | 2,997 | 0 | 0.0%
Sema.StorageImplInfoRequest | 1,924,546 | 1,924,574 | 28 | 0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 59,140 | 59,149 | 9 | 0.02%
Sema.StoredPropertiesRequest | 354,569 | 355,812 | 1,243 | 0.35%
Sema.StructuralRequirementsRequest | 53,512 | 53,574 | 62 | 0.12%
Sema.StructuralTypeRequest | 1,861 | 1,861 | 0 | 0.0%
Sema.SuperclassDeclRequest | 488,712 | 487,355 | -1,357 | -0.28%
Sema.SuperclassTypeRequest | 64,101 | 63,800 | -301 | -0.47%
Sema.SynthesizeAccessorRequest | 488,304 | 488,304 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 9,598 | 9,598 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 217,445 | 217,544 | 99 | 0.05%
Sema.SynthesizeMemberwiseInitRequest | 7,852 | 7,852 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 53,512 | 53,574 | 62 | 0.12%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 825,815 | 825,819 | 4 | 0.0%
Sema.TypeCheckSourceFileRequest | 51,134 | 51,134 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 50,878 | 50,878 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 13,793 | 13,752 | -41 | -0.3%
Sema.USRGenerationRequest | 12,346,924 | 12,388,370 | 41,446 | 0.34%
Sema.UnderlyingTypeRequest | 50,656 | 50,645 | -11 | -0.02%
Sema.UnqualifiedLookupRequest | 5,893,634 | 5,893,759 | 125 | 0.0%
Sema.ValidatePrecedenceGroupRequest | 217,479 | 217,479 | 0 | 0.0%
Sema.ValueWitnessRequest | 71,361 | 71,422 | 61 | 0.09%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 25,313 | 25,313 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>

<a name=""release-10b146e70e9ee20d"">

# Release

<a name=""release-brief-10b146e70e9ee20d"">

## release brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 107,670,748,684,366 | 105,661,408,560,537 | -2,009,340,123,828 | -1.87% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 2,038,050,856 | 2,038,545,500 | 494,644 | 0.02%
</details>

<a name=""release-detailed-10b146e70e9ee20d"">

## release detailed
<details>
<summary>Regressed (6)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Sema.InheritedDeclsReferencedRequest | 1,249,014 | 1,285,608 | 36,594 | 2.93% :no_entry:
Sema.NumConformancesDeserialized | 934,817 | 968,781 | 33,964 | 3.63% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 4,637,169 | 4,896,788 | 259,619 | 5.6% :no_entry:
Sema.NumRequirementMachines | 411,721 | 422,966 | 11,244 | 2.73% :no_entry:
Sema.ProtocolDependenciesRequest | 101,009 | 106,554 | 5,544 | 5.49% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 62,867 | 65,824 | 2,957 | 4.7% :no_entry:
</details>
<details>
<summary>Improved (17)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 107,670,748,684,366 | 105,661,408,560,537 | -2,009,340,123,828 | -1.87% :white_check_mark:
Sema.ActorIsolationRequest | 2,099,262 | 2,078,078 | -21,184 | -1.01% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 428,678 | 386,570 | -42,108 | -9.82% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 9,388 | 9,115 | -273 | -2.91% :white_check_mark:
Sema.DefaultTypeRequest | 319,723 | 220,179 | -99,544 | -31.13% :white_check_mark:
Sema.DirectLookupRequest | 45,195,489 | 44,032,676 | -1,162,813 | -2.57% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 6,116 | 5,676 | -440 | -7.2% :white_check_mark:
Sema.GenericParamListRequest | 1,706,641 | 1,634,989 | -71,652 | -4.2% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 10,756 | 10,637 | -119 | -1.11% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 29,235 | 3,427 | -25,808 | -88.28% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 53,717,574 | 47,603,556 | -6,114,018 | -11.38% :white_check_mark:
Sema.NumConstraintScopes | 37,992,217 | 17,997,474 | -19,994,743 | -52.63% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,797,971 | 1,212,505 | -585,466 | -32.56% :white_check_mark:
Sema.NumLeafScopes | 28,391,208 | 11,210,303 | -17,180,905 | -60.51% :white_check_mark:
Sema.QualifiedLookupRequest | 4,592,431 | 4,493,652 | -98,779 | -2.15% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 468,615 | 442,429 | -26,186 | -5.59% :white_check_mark:
Sema.ResolveTypeRequest | 2,313,855 | 2,278,602 | -35,253 | -1.52% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (287)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 1,568,370 | 1,568,129 | -241 | -0.02%
AST.ImportSetCacheMiss | 83,424 | 83,440 | 16 | 0.02%
AST.ImportSetFoldHit | 42,149 | 42,158 | 9 | 0.02%
AST.ImportSetFoldMiss | 41,275 | 41,282 | 7 | 0.02%
AST.ModuleShadowCacheHit | 5,278 | 5,268 | -10 | -0.19%
AST.ModuleShadowCacheMiss | 1,357 | 1,357 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 8,171,899 | 8,171,728 | -171 | -0.0%
AST.ModuleVisibilityCacheMiss | 30,359 | 30,359 | 0 | 0.0%
AST.NumASTBytesAllocated | 11,981,110,015 | 11,988,914,309 | 7,804,294 | 0.07%
AST.NumASTScopeExpansions | 3,305,426 | 3,305,426 | 0 | 0.0%
AST.NumASTScopeLookups | 4,729,022 | 4,728,899 | -123 | -0.0%
AST.NumDecls | 165,179 | 165,179 | 0 | 0.0%
AST.NumDependencies | 55,521 | 55,521 | 0 | 0.0%
AST.NumIncrementalDependencies | 58 | 58 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 32,702 | 32,702 | 0 | 0.0%
AST.NumLocalTypeDecls | 1,057 | 1,057 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,694 | 6,694 | 0 | 0.0%
AST.NumModuleLookupValue | 41,838,206 | 41,830,359 | -7,847 | -0.02%
AST.NumObjCMethods | 33,770 | 33,770 | 0 | 0.0%
AST.NumOperators | 512 | 512 | 0 | 0.0%
AST.NumPrecedenceGroups | 88 | 88 | 0 | 0.0%
AST.NumReferencedDynamicNames | 0 | 0 | 0 | 0.0%
AST.NumReferencedMemberNames | 4,002 | 3,990 | -12 | -0.3%
AST.NumReferencedTopLevelNames | 352 | 352 | 0 | 0.0%
AST.NumSourceBuffers | 33,014 | 33,014 | 0 | 0.0%
AST.NumSourceLines | 5,578,823 | 5,578,823 | 0 | 0.0%
AST.NumSourceLinesPerSecond | 376,838 | 375,066 | -1,772 | -0.47%
AST.NumTotalClangImportedEntities | 490,508 | 490,424 | -84 | -0.02%
Frontend.MaxMallocUsage | 289,229,743,312 | 289,810,636,360 | 580,893,048 | 0.2%
Frontend.NumProcessFailures | 8 | 8 | 0 | 0.0%
IRGen.IRGenRequest | 12 | 12 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 231,775 | 231,836 | 61 | 0.03%
IRModule.NumIRAliases | 165,263 | 165,263 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 5,296,784 | 5,289,039 | -7,745 | -0.15%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,049,328 | 3,050,649 | 1,320 | 0.04%
IRModule.NumIRGlobals | 3,313,139 | 3,313,883 | 744 | 0.02%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 51,134,297 | 51,146,427 | 12,130 | 0.02%
IRModule.NumIRNamedMetaData | 128,438 | 128,438 | 0 | 0.0%
IRModule.NumIRValueSymbols | 6,391,964 | 6,394,029 | 2,064 | 0.03%
LLVM.NumLLVMBytesOutput | 2,038,050,856 | 2,038,545,500 | 494,644 | 0.02%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 297,172 | 297,172 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 113,779 | 113,779 | 0 | 0.0%
Parse.ParseAbstractFunctionBodyRequest | 311,077 | 311,085 | 8 | 0.0%
Parse.ParseMembersRequest | 14,598 | 14,598 | 0 | 0.0%
Parse.ParseSourceFileRequest | 31,099 | 31,099 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 31,099 | 31,099 | 0 | 0.0%
SILGen.ASTLoweringRequest | 1,250 | 1,250 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILGenFunctions | 1,422,105 | 1,422,493 | 388 | 0.03%
SILModule.NumSILGenGlobalVariables | 59,773 | 59,773 | 0 | 0.0%
SILModule.NumSILGenVtables | 24,120 | 24,120 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 80,037 | 80,081 | 44 | 0.05%
SILModule.NumSILOptDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILOptFunctions | 1,250,363 | 1,250,999 | 636 | 0.05%
SILModule.NumSILOptGlobalVariables | 56,254 | 56,350 | 96 | 0.17%
SILModule.NumSILOptVtables | 28,355 | 28,357 | 2 | 0.01%
SILModule.NumSILOptWitnessTables | 80,552 | 80,596 | 44 | 0.05%
SILOptimizer.ExecuteSILPipelineRequest | 4,896 | 4,896 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 121,359 | 121,359 | 0 | 0.0%
Sema.AbstractGenericSignatureRequest | 70,541 | 70,498 | -43 | -0.06%
Sema.AccessLevelRequest | 2,943,343 | 2,942,742 | -601 | -0.02%
Sema.AllMembersRequest | 96,484 | 96,484 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 236 | 236 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 1,980,438 | 1,980,431 | -7 | -0.0%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 22,050 | 22,050 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 9,486 | 9,486 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 4,420,450 | 4,415,813 | -4,637 | -0.1%
Sema.AttachedResultBuilderRequest | 919,443 | 919,271 | -172 | -0.02%
Sema.BodyInitKindRequest | 53,359 | 53,363 | 4 | 0.01%
Sema.BreakTargetRequest | 4,399 | 4,399 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 239,314 | 239,314 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 31,075 | 31,075 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,183,047 | 1,183,047 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 6,804 | 6,784 | -20 | -0.29%
Sema.ClangRecordMemberLookup | 6,804 | 6,784 | -20 | -0.29%
Sema.ClassAncestryFlagsRequest | 56,442 | 56,382 | -60 | -0.11%
Sema.ClosureEffectsRequest | 103,378 | 103,378 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 36,201 | 36,201 | 0 | 0.0%
Sema.CollectOverriddenDeclsRequest | 1,052,308 | 1,055,012 | 2,703 | 0.26%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConditionalRequirementsRequest | 225,292 | 224,285 | -1,007 | -0.45%
Sema.ConformanceHasEffectRequest | 3 | 3 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,680 | 1,680 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 9,123 | 9,123 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 1,323 | 1,323 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 49,492 | 49,492 | 0 | 0.0%
Sema.DefaultArgumentExprRequest | 45,831 | 45,831 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 299 | 299 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 3,221 | 3,221 | 0 | 0.0%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,429,984 | 1,429,852 | -132 | -0.01%
Sema.DirectPrecedenceGroupLookupRequest | 623,012 | 623,012 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 0 | 0 | 0 | 0.0%
Sema.DynamicallyReplacedDeclRequest | 2,271,966 | 2,251,089 | -20,877 | -0.92%
Sema.EnumRawTypeRequest | 10,203 | 10,203 | 0 | 0.0%
Sema.EnumRawValuesRequest | 10,460 | 10,460 | 0 | 0.0%
Sema.ExistentialRequiresAnyRequest | 7,538 | 7,538 | 0 | 0.0%
Sema.ExpandAccessorMacros | 666,122 | 666,119 | -3 | -0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 8,001,008 | 7,993,242 | -7,766 | -0.1%
Sema.ExpandPeerMacroRequest | 1,728,667 | 1,728,667 | 0 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 237,099 | 236,745 | -354 | -0.15%
Sema.ExtendedNominalRequest | 53,904 | 53,904 | 0 | 0.0%
Sema.ExtendedTypeRequest | 53,820 | 53,820 | 0 | 0.0%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 1,195,366 | 1,195,676 | 310 | 0.03%
Sema.FunctionOperatorRequest | 8,357 | 8,357 | 0 | 0.0%
Sema.GenericSignatureRequest | 1,155,080 | 1,155,019 | -61 | -0.01%
Sema.GetDestructorRequest | 25,349 | 25,349 | 0 | 0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 0 | 0 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 0 | 0 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 68,122 | 68,374 | 252 | 0.37%
Sema.GetRuntimeDiscoverableAttributes | 1,238,412 | 1,238,412 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 54 | 54 | 0 | 0.0%
Sema.GlobalActorAttributeRequest | 2,825,238 | 2,802,729 | -22,509 | -0.8%
Sema.GlobalActorInstanceRequest | 232 | 232 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 8,251 | 8,251 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 10,201 | 10,201 | 0 | 0.0%
Sema.HasDefaultInitRequest | 39,838 | 39,838 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 137,662 | 137,466 | -196 | -0.14%
Sema.HasImportsMatchingFlagRequest | 61,868 | 61,868 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 4,219,570 | 4,198,369 | -21,201 | -0.5%
Sema.HasMemberwiseInitRequest | 15,262 | 15,262 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 20,931 | 20,931 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 39,838 | 39,838 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 86,475 | 86,475 | 0 | 0.0%
Sema.InheritedProtocolsRequest | 123,238 | 124,093 | 854 | 0.69%
Sema.InheritedTypeRequest | 204,708 | 204,711 | 3 | 0.0%
Sema.InheritsSuperclassInitializersRequest | 20,910 | 20,911 | 1 | 0.0%
Sema.InitKindRequest | 77,592 | 77,596 | 4 | 0.01%
Sema.InterfaceTypeRequest | 5,207,962 | 5,203,658 | -4,304 | -0.08%
Sema.IsABICompatibleOverrideRequest | 156,775 | 156,775 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 272,790 | 272,790 | 0 | 0.0%
Sema.IsActorRequest | 387,416 | 387,623 | 206 | 0.05%
Sema.IsCallAsFunctionNominalRequest | 5,691 | 5,657 | -34 | -0.6%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 32,775 | 32,775 | 0 | 0.0%
Sema.IsDistributedActorRequest | 450,106 | 450,338 | 231 | 0.05%
Sema.IsDynamicRequest | 1,472,333 | 1,472,658 | 325 | 0.02%
Sema.IsFinalRequest | 1,455,751 | 1,456,225 | 474 | 0.03%
Sema.IsGetterMutatingRequest | 400,651 | 400,655 | 4 | 0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 2,137,795 | 2,137,195 | -600 | -0.03%
Sema.IsMoveOnlyRequest | 189,805 | 189,892 | 87 | 0.05%
Sema.IsObjCRequest | 1,332,664 | 1,332,657 | -7 | -0.0%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 389,280 | 389,280 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 263,009 | 263,009 | 0 | 0.0%
Sema.IsStaticRequest | 655,806 | 655,782 | -24 | -0.0%
Sema.LazyStoragePropertyRequest | 562 | 562 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 313,472 | 313,472 | 0 | 0.0%
Sema.LookupAllConformancesInContextRequest | 326,756 | 326,995 | 239 | 0.07%
Sema.LookupInModuleRequest | 2,811,173 | 2,805,313 | -5,860 | -0.21%
Sema.LookupInfixOperatorRequest | 55,529 | 55,529 | 0 | 0.0%
Sema.LookupPostfixOperatorRequest | 37 | 37 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 25,504 | 25,504 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 166 | 166 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 1,037 | 1,037 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 141 | 141 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 638,382 | 632,612 | -5,770 | -0.9%
Sema.NamedLazyMemberLoadSuccessCount | 12,027,442 | 11,997,216 | -30,226 | -0.25%
Sema.NamingPatternRequest | 67,644 | 67,644 | 0 | 0.0%
Sema.NeedsNewVTableEntryRequest | 616,359 | 616,359 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 235,237 | 235,237 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 238,246 | 238,246 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 767,695 | 767,726 | 31 | 0.0%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 15,570,273 | 15,571,671 | 1,398 | 0.01%
Sema.NumDeclsTypechecked | 1,698,030 | 1,698,030 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 2,040,489 | 2,048,195 | 7,705 | 0.38%
Sema.NumLazyRequirementSignatures | 147,720 | 147,848 | 127 | 0.09%
Sema.NumLazyRequirementSignaturesLoaded | 108,093 | 109,070 | 977 | 0.9%
Sema.NumRequirementMachineUnifiedConcreteTerms | 355,063 | 358,441 | 3,377 | 0.95%
Sema.NumTypesDeserialized | 6,370,841 | 6,370,579 | -262 | -0.0%
Sema.NumUnloadedLazyIterableDeclContexts | 1,381,709 | 1,388,809 | 7,100 | 0.51%
Sema.ObjCInterfaceAndImplementationRequest | 445,998 | 446,146 | 148 | 0.03%
Sema.OpaqueReadOwnershipRequest | 204,946 | 204,950 | 4 | 0.0%
Sema.OpaqueResultTypeRequest | 366 | 366 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 445 | 445 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 1,601,349 | 1,601,797 | 448 | 0.03%
Sema.ParamSpecifierRequest | 918,653 | 918,661 | 8 | 0.0%
Sema.PatternBindingEntryRequest | 347,404 | 347,404 | 0 | 0.0%
Sema.PatternTypeRequest | 449,383 | 449,383 | 0 | 0.0%
Sema.PolymorphicEffectKindRequest | 543,531 | 543,807 | 276 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 5 | 5 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 954 | 954 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 415,641 | 415,641 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 6,928 | 6,928 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 1,258 | 1,258 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 1,425,390 | 1,425,390 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 9,486 | 9,486 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 389,674 | 389,674 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 1,439 | 1,439 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 398,953 | 398,957 | 4 | 0.0%
Sema.PropertyWrapperTypeInfoRequest | 137 | 137 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 17,502 | 17,502 | 0 | 0.0%
Sema.ProtocolRequiresClassRequest | 9,312 | 9,316 | 4 | 0.04%
Sema.ProvideDefaultImplForRequest | 1,052,308 | 1,055,012 | 2,703 | 0.26%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 1,013 | 1,013 | 0 | 0.0%
Sema.RequirementRequest | 87,751 | 87,751 | 0 | 0.0%
Sema.RequirementSignatureRequest | 119,241 | 120,220 | 979 | 0.82%
Sema.RequiresOpaqueAccessorsRequest | 1,293,488 | 1,293,494 | 6 | 0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 204,615 | 204,617 | 2 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 14,064 | 14,064 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResultBuilderTypeRequest | 359,701 | 359,334 | -367 | -0.1%
Sema.ResultTypeRequest | 475,364 | 475,364 | 0 | 0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 2,290,927 | 2,288,954 | -1,973 | -0.09%
Sema.ScopedImportLookupRequest | 311 | 311 | 0 | 0.0%
Sema.SelfAccessKindRequest | 358,991 | 358,983 | -8 | -0.0%
Sema.SelfBoundsFromGenericSignatureRequest | 22,747 | 22,747 | 0 | 0.0%
Sema.SelfBoundsFromWhereClauseRequest | 525,778 | 525,146 | -632 | -0.12%
Sema.SemanticAvailableRangeAttrRequest | 2,493 | 2,493 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 97,693 | 97,693 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 175,351 | 175,348 | -3 | -0.0%
Sema.SimpleDidSetRequest | 560,863 | 561,808 | 944 | 0.17%
Sema.SpecializeAttrTargetDeclRequest | 1,604 | 1,604 | 0 | 0.0%
Sema.StorageImplInfoRequest | 1,440,055 | 1,440,056 | 1 | 0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 43,609 | 43,609 | 0 | 0.0%
Sema.StoredPropertiesRequest | 145,108 | 145,144 | 36 | 0.02%
Sema.StructuralRequirementsRequest | 11,161 | 11,163 | 2 | 0.02%
Sema.StructuralTypeRequest | 532 | 532 | 0 | 0.0%
Sema.SuperclassDeclRequest | 110,901 | 110,752 | -149 | -0.13%
Sema.SuperclassTypeRequest | 30,470 | 30,491 | 20 | 0.07%
Sema.SynthesizeAccessorRequest | 238,246 | 238,246 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 3,748 | 3,748 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 111,222 | 111,222 | 0 | 0.0%
Sema.SynthesizeMemberwiseInitRequest | 3,295 | 3,295 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 11,161 | 11,163 | 2 | 0.02%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 603,032 | 603,036 | 4 | 0.0%
Sema.TypeCheckSourceFileRequest | 31,075 | 31,075 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 28,965 | 28,965 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 4,644 | 4,645 | 1 | 0.02%
Sema.USRGenerationRequest | 1,547,574 | 1,550,872 | 3,297 | 0.21%
Sema.UnderlyingTypeRequest | 26,349 | 26,349 | 0 | 0.0%
Sema.UnqualifiedLookupRequest | 2,705,206 | 2,705,116 | -90 | -0.0%
Sema.ValidatePrecedenceGroupRequest | 195,536 | 195,536 | 0 | 0.0%
Sema.ValueWitnessRequest | 33,441 | 33,502 | 61 | 0.18%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 1,198 | 1,198 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>
 Slightly better - 60% reduction in `NumLeafScopes` and there are only two diagnostic regressions now related to old favoring been more aggressive than necessary.  @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please test compiler performance @swift-ci please test source compatibility release # Summary for main full

**Regressions found (see below)**

- [Debug-batch](#debug-batch-1bd2d51fd31492b)
    - [debug-batch brief](#debug-batch-brief-1bd2d51fd31492b)
    - [debug-batch detailed](#debug-batch-detailed-1bd2d51fd31492b)
- [Release](#release-1bd2d51fd31492b)
    - [release brief](#release-brief-1bd2d51fd31492b)
    - [release detailed](#release-detailed-1bd2d51fd31492b)



<a name=""debug-batch-1bd2d51fd31492b"">

# Debug-batch

<a name=""debug-batch-brief-1bd2d51fd31492b"">

## debug-batch brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 91,322,049,186,043 | 87,616,546,563,888 | -3,705,502,622,155 | -4.06% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 2,105,453,848 | 2,107,148,960 | 1,695,112 | 0.08%
</details>

<a name=""debug-batch-detailed-1bd2d51fd31492b"">

## debug-batch detailed
<details>
<summary>Regressed (13)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.NumSourceLinesPerSecond | 4,650,048 | 4,702,138 | 52,089 | 1.12% :no_entry:
Sema.CollectOverriddenDeclsRequest | 11,527,983 | 11,648,868 | 120,885 | 1.05% :no_entry:
Sema.InheritedDeclsReferencedRequest | 6,288,051 | 6,379,038 | 90,987 | 1.45% :no_entry:
Sema.InheritedProtocolsRequest | 766,190 | 776,549 | 10,359 | 1.35% :no_entry:
Sema.NumConformancesDeserialized | 5,100,601 | 5,187,330 | 86,728 | 1.7% :no_entry:
Sema.NumLazyRequirementSignaturesLoaded | 694,714 | 702,348 | 7,634 | 1.1% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 23,808,060 | 25,954,503 | 2,146,443 | 9.02% :no_entry:
Sema.NumRequirementMachineUnifiedConcreteTerms | 1,036,415 | 1,069,472 | 33,057 | 3.19% :no_entry:
Sema.NumRequirementMachines | 1,987,121 | 2,074,871 | 87,750 | 4.42% :no_entry:
Sema.ProtocolDependenciesRequest | 593,254 | 640,037 | 46,782 | 7.89% :no_entry:
Sema.ProvideDefaultImplForRequest | 11,527,983 | 11,648,868 | 120,885 | 1.05% :no_entry:
Sema.RequirementSignatureRequest | 749,585 | 757,377 | 7,792 | 1.04% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 306,591 | 312,119 | 5,527 | 1.8% :no_entry:
</details>
<details>
<summary>Improved (19)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 91,322,049,186,043 | 87,616,546,563,888 | -3,705,502,622,155 | -4.06% :white_check_mark:
Sema.ActorIsolationRequest | 6,019,669 | 5,926,207 | -93,462 | -1.55% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 681,854 | 632,634 | -49,220 | -7.22% :white_check_mark:
Sema.ConditionalRequirementsRequest | 742,764 | 728,727 | -14,036 | -1.89% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 20,107 | 19,808 | -299 | -1.49% :white_check_mark:
Sema.DefaultTypeRequest | 413,101 | 307,893 | -105,208 | -25.47% :white_check_mark:
Sema.DirectLookupRequest | 60,814,226 | 59,441,502 | -1,372,724 | -2.26% :white_check_mark:
Sema.DynamicallyReplacedDeclRequest | 6,417,645 | 6,325,196 | -92,449 | -1.44% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 26,620 | 25,447 | -1,173 | -4.41% :white_check_mark:
Sema.GenericParamListRequest | 6,100,002 | 5,963,209 | -136,793 | -2.24% :white_check_mark:
Sema.GlobalActorAttributeRequest | 7,670,292 | 7,573,431 | -96,861 | -1.26% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 27,581 | 27,272 | -309 | -1.12% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 54,982 | 3,763 | -51,219 | -93.16% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 76,509,282 | 49,575,547 | -26,933,735 | -35.2% :white_check_mark:
Sema.NumConstraintScopes | 52,791,011 | 24,255,828 | -28,535,183 | -54.05% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,860,809 | 1,177,940 | -682,869 | -36.7% :white_check_mark:
Sema.NumLeafScopes | 39,749,822 | 15,271,224 | -24,478,598 | -61.58% :white_check_mark:
Sema.QualifiedLookupRequest | 8,375,896 | 8,247,317 | -128,579 | -1.54% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 790,445 | 759,543 | -30,902 | -3.91% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (278)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 3,195,806 | 3,195,993 | 187 | 0.01%
AST.ImportSetCacheMiss | 703,807 | 703,873 | 66 | 0.01%
AST.ImportSetFoldHit | 353,813 | 353,853 | 40 | 0.01%
AST.ImportSetFoldMiss | 349,993 | 350,020 | 26 | 0.01%
AST.ModuleShadowCacheHit | 8,451 | 8,441 | -10 | -0.12%
AST.ModuleShadowCacheMiss | 2,515 | 2,515 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 18,011,634 | 18,011,368 | -266 | -0.0%
AST.ModuleVisibilityCacheMiss | 150,306 | 150,307 | 1 | 0.0%
AST.NumASTBytesAllocated | 51,259,915,228 | 51,400,663,454 | 140,748,226 | 0.27%
AST.NumASTScopeExpansions | 7,233,165 | 7,233,903 | 737 | 0.01%
AST.NumASTScopeLookups | 8,044,030 | 8,044,604 | 574 | 0.01%
AST.NumDecls | 303,831 | 303,831 | 0 | 0.0%
AST.NumDependencies | 408,350 | 408,350 | 0 | 0.0%
AST.NumIncrementalDependencies | 21,346 | 21,346 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 293,404 | 293,404 | 0 | 0.0%
AST.NumLocalTypeDecls | 2,438 | 2,438 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,820 | 6,820 | 0 | 0.0%
AST.NumModuleLookupValue | 88,708,100 | 88,692,641 | -15,459 | -0.02%
AST.NumObjCMethods | 73,374 | 73,374 | 0 | 0.0%
AST.NumOperators | 1,022 | 1,022 | 0 | 0.0%
AST.NumPrecedenceGroups | 172 | 172 | 0 | 0.0%
AST.NumReferencedDynamicNames | 159 | 159 | 0 | 0.0%
AST.NumReferencedMemberNames | 12,039,891 | 12,015,563 | -24,328 | -0.2%
AST.NumReferencedTopLevelNames | 1,158,599 | 1,158,017 | -582 | -0.05%
AST.NumSourceBuffers | 337,466 | 337,466 | 0 | 0.0%
AST.NumSourceLines | 10,454,980 | 10,454,980 | 0 | 0.0%
AST.NumTotalClangImportedEntities | 1,688,763 | 1,689,187 | 424 | 0.03%
Frontend.MaxMallocUsage | 845,486,257,848 | 851,471,456,920 | 5,985,199,072 | 0.71%
Frontend.NumProcessFailures | 31 | 31 | 0 | 0.0%
IRGen.IRGenRequest | 26,420 | 26,420 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 258,051 | 258,166 | 115 | 0.04%
IRModule.NumIRAliases | 208,756 | 208,756 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 7,345,710 | 7,365,599 | 19,889 | 0.27%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,883,677 | 3,888,552 | 4,875 | 0.13%
IRModule.NumIRGlobals | 3,778,783 | 3,780,503 | 1,720 | 0.05%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 89,939,968 | 90,011,821 | 71,853 | 0.08%
IRModule.NumIRNamedMetaData | 131,016 | 131,016 | 0 | 0.0%
IRModule.NumIRValueSymbols | 7,719,129 | 7,725,720 | 6,591 | 0.09%
LLVM.NumLLVMBytesOutput | 2,105,453,848 | 2,107,148,960 | 1,695,112 | 0.08%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 336,168 | 336,168 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 681,612 | 681,549 | -63 | -0.01%
Parse.ParseAbstractFunctionBodyRequest | 573,787 | 573,795 | 8 | 0.0%
Parse.ParseMembersRequest | 524,837 | 524,774 | -63 | -0.01%
Parse.ParseSourceFileRequest | 330,254 | 330,254 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 330,254 | 330,254 | 0 | 0.0%
SILGen.ASTLoweringRequest | 27,685 | 27,685 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenFunctions | 2,921,099 | 2,921,614 | 515 | 0.02%
SILModule.NumSILGenGlobalVariables | 120,991 | 120,991 | 0 | 0.0%
SILModule.NumSILGenVtables | 36,437 | 36,437 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 156,320 | 156,364 | 44 | 0.03%
SILModule.NumSILOptDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILOptFunctions | 3,437,816 | 3,440,021 | 2,205 | 0.06%
SILModule.NumSILOptGlobalVariables | 122,803 | 122,801 | -2 | -0.0%
SILModule.NumSILOptVtables | 36,738 | 36,734 | -4 | -0.01%
SILModule.NumSILOptWitnessTables | 191,707 | 191,914 | 207 | 0.11%
SILOptimizer.ExecuteSILPipelineRequest | 108,238 | 108,238 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 266,787 | 266,898 | 111 | 0.04%
Sema.AbstractGenericSignatureRequest | 129,501 | 129,835 | 334 | 0.26%
Sema.AccessLevelRequest | 15,468,448 | 15,604,935 | 136,487 | 0.88%
Sema.AllMembersRequest | 99,990 | 99,990 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 234 | 234 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 3,765,711 | 3,766,775 | 1,064 | 0.03%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 41,424 | 41,424 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 24,829 | 24,829 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 19,129,383 | 19,211,963 | 82,579 | 0.43%
Sema.AttachedResultBuilderRequest | 1,642,349 | 1,641,866 | -483 | -0.03%
Sema.BodyInitKindRequest | 75,303 | 75,307 | 4 | 0.01%
Sema.BreakTargetRequest | 5,633 | 5,633 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 325,726 | 325,726 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 80 | 80 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 10,066 | 10,066 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 53,356 | 53,356 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 10,066 | 10,066 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,993,667 | 1,993,667 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 13,483 | 13,399 | -84 | -0.62%
Sema.ClangRecordMemberLookup | 13,483 | 13,399 | -84 | -0.62%
Sema.ClassAncestryFlagsRequest | 136,630 | 136,420 | -210 | -0.15%
Sema.ClosureEffectsRequest | 121,343 | 121,343 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 43,880 | 43,880 | 0 | 0.0%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConformanceHasEffectRequest | 51 | 51 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,975 | 1,975 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 22,529 | 22,529 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 3,396 | 3,396 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 105,770 | 105,769 | -1 | -0.0%
Sema.DefaultArgumentExprRequest | 91,786 | 91,786 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 844 | 844 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 7,637 | 7,626 | -11 | -0.14%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,972,108 | 1,971,654 | -454 | -0.02%
Sema.DirectPrecedenceGroupLookupRequest | 763,517 | 763,517 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 67 | 67 | 0 | 0.0%
Sema.EnumRawTypeRequest | 35,771 | 35,788 | 17 | 0.05%
Sema.EnumRawValuesRequest | 20,360 | 20,360 | 0 | 0.0%
Sema.ExistentialRequiresAnyRequest | 15,370 | 15,370 | 0 | 0.0%
Sema.ExpandAccessorMacros | 1,123,911 | 1,123,936 | 25 | 0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 35,347,671 | 35,489,764 | 142,093 | 0.4%
Sema.ExpandPeerMacroRequest | 3,600,457 | 3,600,603 | 146 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 908,330 | 906,392 | -1,938 | -0.21%
Sema.ExtendedNominalRequest | 605,379 | 605,379 | 0 | 0.0%
Sema.ExtendedTypeRequest | 185,823 | 185,815 | -8 | -0.0%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 2,354,698 | 2,355,285 | 587 | 0.02%
Sema.FunctionOperatorRequest | 17,583 | 17,583 | 0 | 0.0%
Sema.GenericSignatureRequest | 3,160,022 | 3,160,315 | 293 | 0.01%
Sema.GetDestructorRequest | 42,987 | 42,986 | -1 | -0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 72 | 72 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 117 | 117 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 56 | 56 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 46 | 46 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 22 | 22 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 20 | 20 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 11 | 11 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 16 | 16 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 2 | 2 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 80 | 80 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 307,202 | 308,734 | 1,532 | 0.5%
Sema.GetRuntimeDiscoverableAttributes | 2,098,768 | 2,098,768 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 142 | 142 | 0 | 0.0%
Sema.GlobalActorInstanceRequest | 1,116 | 1,116 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 17,042 | 17,042 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 20,716 | 20,716 | 0 | 0.0%
Sema.HasDefaultInitRequest | 91,112 | 91,112 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 521,552 | 521,020 | -532 | -0.1%
Sema.HasImportsMatchingFlagRequest | 655,187 | 655,187 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 13,297,860 | 13,244,328 | -53,532 | -0.4%
Sema.HasMemberwiseInitRequest | 41,072 | 41,072 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 30,652 | 30,652 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 91,122 | 91,122 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 219,347 | 219,358 | 11 | 0.01%
Sema.InheritedTypeRequest | 427,066 | 427,342 | 275 | 0.06%
Sema.InheritsSuperclassInitializersRequest | 39,252 | 39,253 | 1 | 0.0%
Sema.InitKindRequest | 166,303 | 166,306 | 3 | 0.0%
Sema.InterfaceTypeRequest | 19,932,057 | 20,017,446 | 85,388 | 0.43%
Sema.IsABICompatibleOverrideRequest | 280,611 | 280,611 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 511,389 | 511,389 | 0 | 0.0%
Sema.IsActorRequest | 2,043,846 | 2,047,758 | 3,911 | 0.19%
Sema.IsCallAsFunctionNominalRequest | 6,205 | 6,168 | -37 | -0.6%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 58,198 | 58,207 | 9 | 0.02%
Sema.IsDistributedActorRequest | 2,285,876 | 2,291,168 | 5,292 | 0.23%
Sema.IsDynamicRequest | 2,825,752 | 2,826,350 | 598 | 0.02%
Sema.IsFinalRequest | 4,232,858 | 4,249,381 | 16,523 | 0.39%
Sema.IsGetterMutatingRequest | 700,416 | 700,409 | -7 | -0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 3,493,470 | 3,490,418 | -3,051 | -0.09%
Sema.IsMoveOnlyRequest | 649,395 | 650,903 | 1,508 | 0.23%
Sema.IsObjCRequest | 2,620,411 | 2,621,475 | 1,064 | 0.04%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 621,156 | 621,156 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 323,924 | 323,924 | 0 | 0.0%
Sema.IsStaticRequest | 1,459,534 | 1,459,832 | 297 | 0.02%
Sema.LazyStoragePropertyRequest | 2,423 | 2,423 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 463,787 | 463,787 | 0 | 0.0%
Sema.LookupAllConformancesInContextRequest | 2,437,290 | 2,459,305 | 22,014 | 0.9%
Sema.LookupInModuleRequest | 8,275,858 | 8,264,873 | -10,985 | -0.13%
Sema.LookupInfixOperatorRequest | 69,637 | 69,637 | 0 | 0.0%
Sema.LookupPostfixOperatorRequest | 74 | 74 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 29,583 | 29,583 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 352 | 352 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 1,108 | 1,108 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 10,066 | 10,066 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 351 | 351 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 3,204,906 | 3,193,313 | -11,592 | -0.36%
Sema.NamedLazyMemberLoadSuccessCount | 33,826,104 | 33,740,180 | -85,924 | -0.25%
Sema.NamingPatternRequest | 241,065 | 241,064 | -1 | -0.0%
Sema.NeedsNewVTableEntryRequest | 948,694 | 948,694 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 417,421 | 417,421 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 512,119 | 512,119 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 845,658 | 845,694 | 36 | 0.0%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 84,491,714 | 84,925,280 | 433,565 | 0.51%
Sema.NumDeclsTypechecked | 2,826,208 | 2,826,208 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 12,085,729 | 12,151,976 | 66,247 | 0.55%
Sema.NumLazyRequirementSignatures | 1,018,830 | 1,019,917 | 1,087 | 0.11%
Sema.NumTypesDeserialized | 24,080,139 | 24,160,906 | 80,766 | 0.34%
Sema.NumUnloadedLazyIterableDeclContexts | 8,582,575 | 8,621,899 | 39,324 | 0.46%
Sema.ObjCInterfaceAndImplementationRequest | 752,203 | 752,877 | 674 | 0.09%
Sema.OpaqueReadOwnershipRequest | 447,818 | 447,822 | 4 | 0.0%
Sema.OpaqueResultTypeRequest | 862 | 862 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 1,021 | 1,021 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 5,341,632 | 5,353,691 | 12,059 | 0.23%
Sema.ParamSpecifierRequest | 1,954,880 | 1,954,875 | -5 | -0.0%
Sema.PatternBindingEntryRequest | 692,778 | 692,777 | -1 | -0.0%
Sema.PatternTypeRequest | 812,269 | 812,268 | -1 | -0.0%
Sema.PolymorphicEffectKindRequest | 977,009 | 977,511 | 502 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 60 | 60 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 1,041 | 1,041 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 505,807 | 505,807 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 7,231 | 7,231 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 10,066 | 10,066 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 2,050,284 | 2,050,284 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 24,829 | 24,829 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 596,686 | 596,686 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 2,912 | 2,912 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 696,097 | 696,095 | -2 | -0.0%
Sema.PropertyWrapperTypeInfoRequest | 626 | 626 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 73,379 | 73,490 | 111 | 0.15%
Sema.ProtocolRequiresClassRequest | 44,037 | 44,094 | 57 | 0.13%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 4,225 | 4,226 | 1 | 0.02%
Sema.RequirementRequest | 175,260 | 175,263 | 3 | 0.0%
Sema.RequiresOpaqueAccessorsRequest | 1,789,897 | 1,789,907 | 10 | 0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 449,554 | 449,564 | 10 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 29,891 | 29,891 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeRequest | 5,026,472 | 4,983,075 | -43,397 | -0.86%
Sema.ResultBuilderTypeRequest | 466,129 | 465,469 | -660 | -0.14%
Sema.ResultTypeRequest | 1,103,607 | 1,103,604 | -3 | -0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 7,330,656 | 7,333,567 | 2,911 | 0.04%
Sema.ScopedImportLookupRequest | 810 | 810 | 0 | 0.0%
Sema.SelfAccessKindRequest | 910,673 | 910,806 | 132 | 0.01%
Sema.SelfBoundsFromGenericSignatureRequest | 67,205 | 66,908 | -297 | -0.44%
Sema.SelfBoundsFromWhereClauseRequest | 1,757,256 | 1,755,735 | -1,521 | -0.09%
Sema.SemanticAvailableRangeAttrRequest | 5,391 | 5,391 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 148,904 | 148,904 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 245,443 | 245,440 | -3 | -0.0%
Sema.SimpleDidSetRequest | 2,861,302 | 2,885,336 | 24,033 | 0.84%
Sema.SpecializeAttrTargetDeclRequest | 3,084 | 3,084 | 0 | 0.0%
Sema.StorageImplInfoRequest | 2,049,712 | 2,049,741 | 29 | 0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 62,670 | 62,679 | 9 | 0.01%
Sema.StoredPropertiesRequest | 381,608 | 382,942 | 1,334 | 0.35%
Sema.StructuralRequirementsRequest | 55,030 | 55,188 | 158 | 0.29%
Sema.StructuralTypeRequest | 1,934 | 1,934 | 0 | 0.0%
Sema.SuperclassDeclRequest | 515,945 | 514,725 | -1,220 | -0.24%
Sema.SuperclassTypeRequest | 67,115 | 66,797 | -317 | -0.47%
Sema.SynthesizeAccessorRequest | 512,119 | 512,119 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 10,545 | 10,545 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 230,065 | 230,176 | 111 | 0.05%
Sema.SynthesizeMemberwiseInitRequest | 8,291 | 8,291 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 55,030 | 55,188 | 158 | 0.29%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 876,188 | 876,192 | 4 | 0.0%
Sema.TypeCheckSourceFileRequest | 53,356 | 53,356 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 52,723 | 52,723 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 14,544 | 14,503 | -41 | -0.28%
Sema.USRGenerationRequest | 13,001,820 | 13,125,063 | 123,242 | 0.95%
Sema.UnderlyingTypeRequest | 54,232 | 54,222 | -10 | -0.02%
Sema.UnqualifiedLookupRequest | 6,220,559 | 6,221,166 | 607 | 0.01%
Sema.ValidatePrecedenceGroupRequest | 232,656 | 232,656 | 0 | 0.0%
Sema.ValueWitnessRequest | 72,893 | 72,954 | 61 | 0.08%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 26,434 | 26,434 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>

<a name=""release-1bd2d51fd31492b"">

# Release

<a name=""release-brief-1bd2d51fd31492b"">

## release brief
<details open>
<summary>Regressed (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 112,336,194,110,931 | 205,258,061,071,979 | 92,921,866,961,048 | 82.72% :no_entry:
</details>
<details>
<summary>Improved (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 2,174,412,612 | 2,194,459,940 | 20,047,328 | 0.92%
</details>

<a name=""release-detailed-1bd2d51fd31492b"">

## release detailed
<details>
<summary>Regressed (25)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.NumLocalTypeDecls | 1,133 | 1,330 | 197 | 17.39% :no_entry:
AST.NumModuleLookupValue | 44,072,335 | 44,763,791 | 691,456 | 1.57% :no_entry:
AST.NumObjCMethods | 35,968 | 36,707 | 739 | 2.05% :no_entry:
Frontend.NumInstructionsExecuted | 112,336,194,110,931 | 205,258,061,071,979 | 92,921,866,961,048 | 82.72% :no_entry:
IRModule.NumIRFunctions | 3,247,426 | 3,280,745 | 33,318 | 1.03% :no_entry:
SILModule.NumSILGenFunctions | 1,513,068 | 1,528,674 | 15,606 | 1.03% :no_entry:
SILModule.NumSILOptFunctions | 1,336,038 | 1,350,988 | 14,950 | 1.12% :no_entry:
Sema.CallerSideDefaultArgExprRequest | 270,536 | 281,968 | 11,432 | 4.23% :no_entry:
Sema.ClosureEffectsRequest | 108,890 | 110,194 | 1,304 | 1.2% :no_entry:
Sema.ClosureHasExplicitResultRequest | 38,347 | 38,896 | 549 | 1.43% :no_entry:
Sema.CollectOverriddenDeclsRequest | 1,075,825 | 1,092,193 | 16,368 | 1.52% :no_entry:
Sema.HasMissingDesignatedInitializersRequest | 21,802 | 22,035 | 233 | 1.07% :no_entry:
Sema.InheritedDeclsReferencedRequest | 1,306,997 | 1,354,617 | 47,620 | 3.64% :no_entry:
Sema.MangleLocalTypeDeclRequest | 1,113 | 1,310 | 197 | 17.7% :no_entry:
Sema.NumConformancesDeserialized | 987,950 | 1,028,914 | 40,964 | 4.15% :no_entry:
Sema.NumLazyRequirementSignaturesLoaded | 114,382 | 115,738 | 1,356 | 1.19% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 4,905,335 | 5,190,791 | 285,456 | 5.82% :no_entry:
Sema.NumRequirementMachineUnifiedConcreteTerms | 375,009 | 379,084 | 4,075 | 1.09% :no_entry:
Sema.NumRequirementMachines | 431,664 | 444,796 | 13,132 | 3.04% :no_entry:
Sema.ProtocolDependenciesRequest | 106,820 | 112,846 | 6,026 | 5.64% :no_entry:
Sema.ProvideDefaultImplForRequest | 1,075,825 | 1,092,193 | 16,368 | 1.52% :no_entry:
Sema.RequirementSignatureRequest | 125,814 | 127,189 | 1,375 | 1.09% :no_entry:
Sema.SynthesizeDefaultInitRequest | 4,035 | 4,187 | 152 | 3.77% :no_entry:
Sema.USRGenerationRequest | 1,606,458 | 1,627,773 | 21,315 | 1.33% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 65,652 | 69,185 | 3,533 | 5.38% :no_entry:
</details>
<details>
<summary>Improved (14)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Sema.CompareDeclSpecializationRequest | 456,398 | 415,248 | -41,150 | -9.02% :white_check_mark:
Sema.ConditionalRequirementsRequest | 240,180 | 236,579 | -3,601 | -1.5% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 9,659 | 9,397 | -262 | -2.71% :white_check_mark:
Sema.DefaultTypeRequest | 332,255 | 232,445 | -99,810 | -30.04% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 6,374 | 5,950 | -424 | -6.65% :white_check_mark:
Sema.GenericParamListRequest | 1,786,439 | 1,717,162 | -69,277 | -3.88% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 30,237 | 2,303 | -27,934 | -92.38% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 57,528,470 | 36,687,439 | -20,841,031 | -36.23% :white_check_mark:
Sema.NumConstraintScopes | 41,241,689 | 19,917,676 | -21,324,013 | -51.7% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,807,899 | 1,226,419 | -581,480 | -32.16% :white_check_mark:
Sema.NumLeafScopes | 30,789,023 | 12,264,329 | -18,524,694 | -60.17% :white_check_mark:
Sema.QualifiedLookupRequest | 4,866,135 | 4,797,390 | -68,745 | -1.41% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 492,083 | 466,817 | -25,266 | -5.13% :white_check_mark:
Sema.ResolveTypeRequest | 2,410,428 | 2,380,419 | -30,009 | -1.24% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (271)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 1,670,534 | 1,683,493 | 12,959 | 0.78%
AST.ImportSetCacheMiss | 86,581 | 86,720 | 139 | 0.16%
AST.ImportSetFoldHit | 43,082 | 43,138 | 56 | 0.13%
AST.ImportSetFoldMiss | 43,499 | 43,582 | 83 | 0.19%
AST.ModuleShadowCacheHit | 5,882 | 5,914 | 32 | 0.54%
AST.ModuleShadowCacheMiss | 1,411 | 1,415 | 4 | 0.28%
AST.ModuleVisibilityCacheHit | 8,708,527 | 8,708,487 | -40 | -0.0%
AST.ModuleVisibilityCacheMiss | 31,564 | 31,584 | 20 | 0.06%
AST.NumASTBytesAllocated | 12,649,135,280 | 12,721,136,611 | 72,001,331 | 0.57%
AST.NumASTScopeExpansions | 3,480,535 | 3,497,927 | 17,392 | 0.5%
AST.NumASTScopeLookups | 4,986,206 | 5,020,340 | 34,134 | 0.68%
AST.NumDecls | 172,934 | 173,287 | 353 | 0.2%
AST.NumDependencies | 60,241 | 60,314 | 73 | 0.12%
AST.NumIncrementalDependencies | 58 | 58 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 34,765 | 34,817 | 52 | 0.15%
AST.NumModuleLookupClassMember | 6,694 | 6,694 | 0 | 0.0%
AST.NumOperators | 512 | 512 | 0 | 0.0%
AST.NumPrecedenceGroups | 88 | 88 | 0 | 0.0%
AST.NumReferencedDynamicNames | 0 | 0 | 0 | 0.0%
AST.NumReferencedMemberNames | 4,002 | 3,990 | -12 | -0.3%
AST.NumReferencedTopLevelNames | 352 | 352 | 0 | 0.0%
AST.NumSourceBuffers | 34,315 | 34,399 | 84 | 0.24%
AST.NumSourceLines | 5,859,735 | 5,884,772 | 25,037 | 0.43%
AST.NumSourceLinesPerSecond | 340,870 | 339,972 | -898 | -0.26%
AST.NumTotalClangImportedEntities | 509,651 | 510,623 | 972 | 0.19%
Frontend.MaxMallocUsage | 297,934,667,160 | 299,975,922,176 | 2,041,255,016 | 0.69%
Frontend.NumProcessFailures | 7 | 7 | 0 | 0.0%
IRGen.IRGenRequest | 12 | 12 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 247,278 | 248,342 | 1,064 | 0.43%
IRModule.NumIRAliases | 174,362 | 175,172 | 810 | 0.46%
IRModule.NumIRBasicBlocks | 5,700,026 | 5,741,004 | 40,978 | 0.72%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRGlobals | 3,487,786 | 3,511,917 | 24,131 | 0.69%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 55,039,329 | 55,505,092 | 465,763 | 0.85%
IRModule.NumIRNamedMetaData | 133,846 | 134,181 | 335 | 0.25%
IRModule.NumIRValueSymbols | 6,766,544 | 6,824,301 | 57,756 | 0.85%
LLVM.NumLLVMBytesOutput | 2,174,412,612 | 2,194,459,940 | 20,047,328 | 0.92%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 312,688 | 314,058 | 1,370 | 0.44%
Parse.NumIterableDeclContextParsed | 119,217 | 119,598 | 381 | 0.32%
Parse.ParseAbstractFunctionBodyRequest | 324,907 | 326,246 | 1,339 | 0.41%
Parse.ParseMembersRequest | 14,649 | 14,649 | 0 | 0.0%
Parse.ParseSourceFileRequest | 32,143 | 32,210 | 67 | 0.21%
Parse.ParseTopLevelDeclsRequest | 32,143 | 32,210 | 67 | 0.21%
SILGen.ASTLoweringRequest | 1,322 | 1,323 | 1 | 0.08%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILGenGlobalVariables | 62,889 | 62,929 | 40 | 0.06%
SILModule.NumSILGenVtables | 24,903 | 25,131 | 228 | 0.92%
SILModule.NumSILGenWitnessTables | 85,376 | 86,140 | 764 | 0.89%
SILModule.NumSILOptDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILOptGlobalVariables | 58,745 | 59,073 | 328 | 0.56%
SILModule.NumSILOptVtables | 29,653 | 29,925 | 272 | 0.92%
SILModule.NumSILOptWitnessTables | 85,891 | 86,655 | 764 | 0.89%
SILOptimizer.ExecuteSILPipelineRequest | 5,184 | 5,188 | 4 | 0.08%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 127,864 | 128,279 | 415 | 0.32%
Sema.AbstractGenericSignatureRequest | 73,360 | 73,616 | 256 | 0.35%
Sema.AccessLevelRequest | 3,046,940 | 3,068,801 | 21,861 | 0.72%
Sema.ActorIsolationRequest | 2,212,694 | 2,200,397 | -12,297 | -0.56%
Sema.AllMembersRequest | 102,229 | 102,608 | 379 | 0.37%
Sema.AnyObjectLookupRequest | 236 | 236 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 2,075,173 | 2,084,609 | 9,436 | 0.45%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 22,704 | 22,907 | 203 | 0.89%
Sema.AttachedPropertyWrapperTypeRequest | 9,853 | 9,864 | 11 | 0.11%
Sema.AttachedPropertyWrappersRequest | 4,634,856 | 4,653,319 | 18,463 | 0.4%
Sema.AttachedResultBuilderRequest | 962,737 | 966,145 | 3,408 | 0.35%
Sema.BodyInitKindRequest | 56,485 | 56,854 | 369 | 0.65%
Sema.BreakTargetRequest | 4,743 | 4,751 | 8 | 0.17%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 42 | 42 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 1,329 | 1,330 | 1 | 0.08%
Sema.CheckInconsistentSPIOnlyImportsRequest | 32,119 | 32,186 | 67 | 0.21%
Sema.CheckInconsistentWeakLinkedImportsRequest | 1,329 | 1,330 | 1 | 0.08%
Sema.CheckRedeclarationRequest | 1,241,009 | 1,247,842 | 6,833 | 0.55%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 7,014 | 7,035 | 21 | 0.3%
Sema.ClangRecordMemberLookup | 7,014 | 7,035 | 21 | 0.3%
Sema.ClassAncestryFlagsRequest | 59,001 | 59,279 | 278 | 0.47%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConformanceHasEffectRequest | 41 | 41 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,760 | 1,764 | 4 | 0.23%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 9,148 | 9,148 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 1,338 | 1,338 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 51,693 | 51,746 | 53 | 0.1%
Sema.DefaultArgumentExprRequest | 47,861 | 48,039 | 178 | 0.37%
Sema.DefaultArgumentInitContextRequest | 326 | 326 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 3,377 | 3,379 | 2 | 0.06%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectLookupRequest | 48,241,384 | 47,757,431 | -483,952 | -1.0%
Sema.DirectOperatorLookupRequest | 1,485,340 | 1,496,071 | 10,731 | 0.72%
Sema.DirectPrecedenceGroupLookupRequest | 644,109 | 647,319 | 3,210 | 0.5%
Sema.DistributedModuleIsAvailableRequest | 33 | 33 | 0 | 0.0%
Sema.DynamicallyReplacedDeclRequest | 2,390,418 | 2,378,867 | -11,551 | -0.48%
Sema.EnumRawTypeRequest | 10,960 | 11,001 | 41 | 0.37%
Sema.EnumRawValuesRequest | 11,130 | 11,171 | 41 | 0.37%
Sema.ExistentialRequiresAnyRequest | 7,761 | 7,763 | 2 | 0.03%
Sema.ExpandAccessorMacros | 706,074 | 710,042 | 3,968 | 0.56%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 8,378,641 | 8,411,214 | 32,573 | 0.39%
Sema.ExpandPeerMacroRequest | 1,817,241 | 1,827,703 | 10,462 | 0.58%
Sema.ExpandSynthesizedMemberMacroRequest | 250,310 | 250,687 | 377 | 0.15%
Sema.ExtendedNominalRequest | 56,550 | 56,604 | 54 | 0.1%
Sema.ExtendedTypeRequest | 56,448 | 56,502 | 54 | 0.1%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 1,266,628 | 1,278,184 | 11,556 | 0.91%
Sema.FunctionOperatorRequest | 8,640 | 8,642 | 2 | 0.02%
Sema.GenericSignatureRequest | 1,207,939 | 1,212,340 | 4,401 | 0.36%
Sema.GetDestructorRequest | 26,017 | 26,240 | 223 | 0.86%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 32 | 32 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 56 | 56 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 28 | 28 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 8 | 8 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 3 | 3 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 4 | 4 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 1 | 1 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 42 | 42 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 70,710 | 71,287 | 577 | 0.82%
Sema.GetRuntimeDiscoverableAttributes | 1,299,053 | 1,305,947 | 6,894 | 0.53%
Sema.GetSourceFileAsyncNode | 69 | 69 | 0 | 0.0%
Sema.GlobalActorAttributeRequest | 2,978,370 | 2,969,497 | -8,873 | -0.3%
Sema.GlobalActorInstanceRequest | 243 | 243 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 8,493 | 8,495 | 2 | 0.02%
Sema.HasCircularRawValueRequest | 10,951 | 10,992 | 41 | 0.37%
Sema.HasDefaultInitRequest | 41,662 | 41,944 | 282 | 0.68%
Sema.HasDynamicCallableAttributeRequest | 11,572 | 11,488 | -84 | -0.73%
Sema.HasDynamicMemberLookupAttributeRequest | 145,361 | 145,590 | 229 | 0.16%
Sema.HasImportsMatchingFlagRequest | 63,872 | 64,006 | 134 | 0.21%
Sema.HasIsolatedSelfRequest | 4,433,541 | 4,433,782 | 241 | 0.01%
Sema.HasMemberwiseInitRequest | 16,347 | 16,401 | 54 | 0.33%
Sema.HasUserDefinedDesignatedInitRequest | 41,662 | 41,944 | 282 | 0.68%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 88,661 | 88,698 | 37 | 0.04%
Sema.InheritedProtocolsRequest | 129,757 | 130,848 | 1,091 | 0.84%
Sema.InheritedTypeRequest | 211,842 | 212,176 | 334 | 0.16%
Sema.InheritsSuperclassInitializersRequest | 21,223 | 21,282 | 59 | 0.28%
Sema.InitKindRequest | 80,937 | 81,353 | 416 | 0.51%
Sema.InterfaceTypeRequest | 5,442,138 | 5,465,340 | 23,202 | 0.43%
Sema.IsABICompatibleOverrideRequest | 163,956 | 164,341 | 385 | 0.23%
Sema.IsAccessorTransparentRequest | 286,317 | 287,054 | 737 | 0.26%
Sema.IsActorRequest | 404,957 | 406,328 | 1,371 | 0.34%
Sema.IsCallAsFunctionNominalRequest | 5,994 | 5,971 | -23 | -0.38%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 34,409 | 34,691 | 282 | 0.82%
Sema.IsDistributedActorRequest | 471,935 | 473,480 | 1,545 | 0.33%
Sema.IsDynamicRequest | 1,554,317 | 1,563,043 | 8,726 | 0.56%
Sema.IsFinalRequest | 1,529,025 | 1,539,297 | 10,272 | 0.67%
Sema.IsGetterMutatingRequest | 422,061 | 425,133 | 3,072 | 0.73%
Sema.IsImplicitlyUnwrappedOptionalRequest | 2,250,697 | 2,260,033 | 9,336 | 0.41%
Sema.IsMoveOnlyRequest | 202,323 | 203,139 | 816 | 0.4%
Sema.IsObjCRequest | 1,402,230 | 1,409,598 | 7,368 | 0.53%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 410,662 | 413,722 | 3,060 | 0.75%
Sema.IsSingleValueStmtRequest | 274,979 | 275,968 | 989 | 0.36%
Sema.IsStaticRequest | 686,044 | 688,691 | 2,647 | 0.39%
Sema.LazyStoragePropertyRequest | 593 | 593 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 331,865 | 333,803 | 1,938 | 0.58%
Sema.LookupAllConformancesInContextRequest | 335,883 | 338,640 | 2,757 | 0.82%
Sema.LookupInModuleRequest | 2,981,585 | 2,991,281 | 9,696 | 0.33%
Sema.LookupInfixOperatorRequest | 58,279 | 58,478 | 199 | 0.34%
Sema.LookupPostfixOperatorRequest | 37 | 37 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 26,476 | 26,535 | 59 | 0.22%
Sema.LookupPrefixOperatorRequest | 167 | 167 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 1,329 | 1,330 | 1 | 0.08%
Sema.ModuleLibraryLevelRequest | 141 | 141 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 693,274 | 689,933 | -3,341 | -0.48%
Sema.NamedLazyMemberLoadSuccessCount | 12,643,029 | 12,705,356 | 62,327 | 0.49%
Sema.NamingPatternRequest | 71,221 | 71,280 | 59 | 0.08%
Sema.NeedsNewVTableEntryRequest | 647,180 | 649,592 | 2,412 | 0.37%
Sema.NumAccessorBodiesSynthesized | 245,104 | 245,773 | 669 | 0.27%
Sema.NumAccessorsSynthesized | 248,131 | 248,804 | 673 | 0.27%
Sema.NumConformancePathsRecorded | 835,519 | 837,706 | 2,187 | 0.26%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 16,533,655 | 16,592,985 | 59,330 | 0.36%
Sema.NumDeclsTypechecked | 1,783,713 | 1,793,861 | 10,148 | 0.57%
Sema.NumLazyIterableDeclContexts | 2,156,757 | 2,170,226 | 13,469 | 0.62%
Sema.NumLazyRequirementSignatures | 156,379 | 156,778 | 399 | 0.26%
Sema.NumTypesDeserialized | 6,829,638 | 6,851,209 | 21,571 | 0.32%
Sema.NumUnloadedLazyIterableDeclContexts | 1,453,919 | 1,463,695 | 9,776 | 0.67%
Sema.ObjCInterfaceAndImplementationRequest | 463,960 | 465,170 | 1,210 | 0.26%
Sema.OpaqueReadOwnershipRequest | 213,611 | 214,042 | 431 | 0.2%
Sema.OpaqueResultTypeRequest | 367 | 367 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 445 | 445 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 1,678,585 | 1,688,791 | 10,206 | 0.61%
Sema.ParamSpecifierRequest | 964,810 | 968,460 | 3,650 | 0.38%
Sema.PatternBindingEntryRequest | 366,262 | 368,794 | 2,532 | 0.69%
Sema.PatternTypeRequest | 473,365 | 476,622 | 3,257 | 0.69%
Sema.PolymorphicEffectKindRequest | 580,502 | 585,284 | 4,782 | 0.82%
Sema.PolymorphicEffectRequirementsRequest | 28 | 28 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 957 | 957 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 435,899 | 437,376 | 1,477 | 0.34%
Sema.PrimaryAssociatedTypesRequest | 7,163 | 7,165 | 2 | 0.03%
Sema.PrimarySourceFilesRequest | 1,329 | 1,330 | 1 | 0.08%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 1,506,837 | 1,514,877 | 8,040 | 0.53%
Sema.PropertyWrapperBackingPropertyTypeRequest | 9,853 | 9,864 | 11 | 0.11%
Sema.PropertyWrapperInitializerInfoRequest | 410,755 | 413,791 | 3,036 | 0.74%
Sema.PropertyWrapperLValuenessRequest | 1,456 | 1,456 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 420,280 | 423,352 | 3,072 | 0.73%
Sema.PropertyWrapperTypeInfoRequest | 146 | 146 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 18,458 | 18,487 | 29 | 0.16%
Sema.ProtocolRequiresClassRequest | 9,543 | 9,562 | 19 | 0.2%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 2,805 | 2,806 | 1 | 0.04%
Sema.RequirementRequest | 89,593 | 89,607 | 14 | 0.02%
Sema.RequiresOpaqueAccessorsRequest | 1,365,180 | 1,372,343 | 7,163 | 0.52%
Sema.RequiresOpaqueModifyCoroutineRequest | 214,287 | 214,773 | 486 | 0.23%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 14,082 | 14,082 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResultBuilderTypeRequest | 379,129 | 380,694 | 1,565 | 0.41%
Sema.ResultTypeRequest | 496,570 | 498,337 | 1,767 | 0.36%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 2,422,011 | 2,430,270 | 8,259 | 0.34%
Sema.ScopedImportLookupRequest | 403 | 403 | 0 | 0.0%
Sema.SelfAccessKindRequest | 375,035 | 376,416 | 1,381 | 0.37%
Sema.SelfBoundsFromGenericSignatureRequest | 23,669 | 23,849 | 180 | 0.76%
Sema.SelfBoundsFromWhereClauseRequest | 537,389 | 537,379 | -10 | -0.0%
Sema.SemanticAvailableRangeAttrRequest | 2,583 | 2,583 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 97,745 | 97,745 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 185,344 | 186,357 | 1,013 | 0.55%
Sema.SimpleDidSetRequest | 582,130 | 585,966 | 3,836 | 0.66%
Sema.SpecializeAttrTargetDeclRequest | 1,658 | 1,658 | 0 | 0.0%
Sema.StorageImplInfoRequest | 1,518,915 | 1,526,598 | 7,683 | 0.51%
Sema.StoredPropertiesAndMissingMembersRequest | 46,542 | 46,900 | 358 | 0.77%
Sema.StoredPropertiesRequest | 154,831 | 155,444 | 613 | 0.4%
Sema.StructuralRequirementsRequest | 11,447 | 11,466 | 19 | 0.17%
Sema.StructuralTypeRequest | 550 | 550 | 0 | 0.0%
Sema.SuperclassDeclRequest | 116,304 | 116,517 | 213 | 0.18%
Sema.SuperclassTypeRequest | 31,504 | 31,769 | 265 | 0.84%
Sema.SynthesizeAccessorRequest | 248,131 | 248,804 | 673 | 0.27%
Sema.SynthesizeMainFunctionRequest | 116,891 | 117,270 | 379 | 0.32%
Sema.SynthesizeMemberwiseInitRequest | 3,478 | 3,484 | 6 | 0.17%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 11,447 | 11,466 | 19 | 0.17%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 632,358 | 635,412 | 3,054 | 0.48%
Sema.TypeCheckSourceFileRequest | 32,119 | 32,186 | 67 | 0.21%
Sema.TypeDeclsFromWhereClauseRequest | 29,788 | 29,800 | 12 | 0.04%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 4,880 | 4,883 | 3 | 0.06%
Sema.UnderlyingTypeRequest | 27,442 | 27,674 | 232 | 0.85%
Sema.UnqualifiedLookupRequest | 2,834,483 | 2,847,743 | 13,260 | 0.47%
Sema.ValidatePrecedenceGroupRequest | 206,653 | 207,578 | 925 | 0.45%
Sema.ValueWitnessRequest | 34,078 | 34,142 | 64 | 0.19%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 1,270 | 1,271 | 1 | 0.08%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>
 @swift-ci please test source compatibility @swift-ci please test compiler performance # Summary for main full

**Regressions found (see below)**

- [Debug-batch](#debug-batch-51d97a7d6f5393d8)
    - [debug-batch brief](#debug-batch-brief-51d97a7d6f5393d8)
    - [debug-batch detailed](#debug-batch-detailed-51d97a7d6f5393d8)
- [Release](#release-51d97a7d6f5393d8)
    - [release brief](#release-brief-51d97a7d6f5393d8)
    - [release detailed](#release-detailed-51d97a7d6f5393d8)



<a name=""debug-batch-51d97a7d6f5393d8"">

# Debug-batch

<a name=""debug-batch-brief-51d97a7d6f5393d8"">

## debug-batch brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 91,903,244,202,148 | 88,215,192,476,511 | -3,688,051,725,636 | -4.01% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 2,101,943,696 | 2,103,564,100 | 1,620,404 | 0.08%
</details>

<a name=""debug-batch-detailed-51d97a7d6f5393d8"">

## debug-batch detailed
<details>
<summary>Regressed (16)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Sema.AccessLevelRequest | 15,367,550 | 15,547,651 | 180,101 | 1.17% :no_entry:
Sema.CollectOverriddenDeclsRequest | 11,438,824 | 11,599,931 | 161,107 | 1.41% :no_entry:
Sema.InheritedDeclsReferencedRequest | 6,277,674 | 6,374,457 | 96,782 | 1.54% :no_entry:
Sema.InheritedProtocolsRequest | 774,734 | 785,180 | 10,445 | 1.35% :no_entry:
Sema.LookupAllConformancesInContextRequest | 2,419,946 | 2,449,746 | 29,800 | 1.23% :no_entry:
Sema.NumConformancesDeserialized | 5,096,638 | 5,189,403 | 92,765 | 1.82% :no_entry:
Sema.NumLazyRequirementSignaturesLoaded | 694,339 | 702,059 | 7,719 | 1.11% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 25,301,235 | 27,448,275 | 2,147,040 | 8.49% :no_entry:
Sema.NumRequirementMachineUnifiedConcreteTerms | 1,029,843 | 1,065,642 | 35,799 | 3.48% :no_entry:
Sema.NumRequirementMachines | 1,987,759 | 2,077,813 | 90,054 | 4.53% :no_entry:
Sema.ProtocolDependenciesRequest | 592,544 | 639,028 | 46,484 | 7.84% :no_entry:
Sema.ProvideDefaultImplForRequest | 11,438,824 | 11,599,931 | 161,107 | 1.41% :no_entry:
Sema.RequirementSignatureRequest | 748,897 | 756,853 | 7,956 | 1.06% :no_entry:
Sema.SimpleDidSetRequest | 2,844,101 | 2,874,317 | 30,216 | 1.06% :no_entry:
Sema.USRGenerationRequest | 12,905,110 | 13,069,436 | 164,325 | 1.27% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 306,113 | 311,900 | 5,787 | 1.89% :no_entry:
</details>
<details>
<summary>Improved (19)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 91,903,244,202,148 | 88,215,192,476,511 | -3,688,051,725,636 | -4.01% :white_check_mark:
Sema.ActorIsolationRequest | 6,001,353 | 5,908,636 | -92,717 | -1.54% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 678,400 | 629,828 | -48,572 | -7.16% :white_check_mark:
Sema.ConditionalRequirementsRequest | 739,564 | 726,040 | -13,524 | -1.83% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 20,075 | 19,778 | -297 | -1.48% :white_check_mark:
Sema.DefaultTypeRequest | 410,845 | 306,524 | -104,321 | -25.39% :white_check_mark:
Sema.DirectLookupRequest | 65,187,440 | 63,865,288 | -1,322,152 | -2.03% :white_check_mark:
Sema.DynamicallyReplacedDeclRequest | 6,397,631 | 6,305,928 | -91,703 | -1.43% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 26,554 | 25,390 | -1,164 | -4.38% :white_check_mark:
Sema.GenericParamListRequest | 6,132,792 | 6,003,008 | -129,783 | -2.12% :white_check_mark:
Sema.GlobalActorAttributeRequest | 7,646,412 | 7,550,429 | -95,983 | -1.26% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 27,451 | 27,142 | -309 | -1.13% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 54,850 | 3,760 | -51,090 | -93.14% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 76,507,847 | 49,671,017 | -26,836,830 | -35.08% :white_check_mark:
Sema.NumConstraintScopes | 52,724,538 | 24,214,891 | -28,509,646 | -54.07% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,858,747 | 1,175,900 | -682,847 | -36.74% :white_check_mark:
Sema.NumLeafScopes | 39,705,774 | 15,246,487 | -24,459,286 | -61.6% :white_check_mark:
Sema.QualifiedLookupRequest | 8,347,534 | 8,222,595 | -124,939 | -1.5% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 788,337 | 757,726 | -30,611 | -3.88% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (277)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 3,189,960 | 3,190,185 | 225 | 0.01%
AST.ImportSetCacheMiss | 703,761 | 703,847 | 86 | 0.01%
AST.ImportSetFoldHit | 353,509 | 353,555 | 46 | 0.01%
AST.ImportSetFoldMiss | 350,251 | 350,292 | 40 | 0.01%
AST.ModuleShadowCacheHit | 8,451 | 8,441 | -10 | -0.12%
AST.ModuleShadowCacheMiss | 2,511 | 2,511 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 17,977,120 | 17,976,853 | -266 | -0.0%
AST.ModuleVisibilityCacheMiss | 150,094 | 150,094 | 0 | 0.0%
AST.NumASTBytesAllocated | 56,535,123,293 | 56,753,333,118 | 218,209,825 | 0.39%
AST.NumASTScopeExpansions | 7,205,357 | 7,206,089 | 731 | 0.01%
AST.NumASTScopeLookups | 8,016,709 | 8,017,098 | 389 | 0.0%
AST.NumDecls | 302,949 | 302,949 | 0 | 0.0%
AST.NumDependencies | 407,659 | 407,659 | 0 | 0.0%
AST.NumIncrementalDependencies | 21,330 | 21,330 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 292,952 | 292,952 | 0 | 0.0%
AST.NumLocalTypeDecls | 2,428 | 2,428 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,820 | 6,820 | 0 | 0.0%
AST.NumModuleLookupValue | 88,940,630 | 88,928,871 | -11,758 | -0.01%
AST.NumObjCMethods | 73,314 | 73,314 | 0 | 0.0%
AST.NumOperators | 1,022 | 1,022 | 0 | 0.0%
AST.NumPrecedenceGroups | 172 | 172 | 0 | 0.0%
AST.NumReferencedDynamicNames | 159 | 159 | 0 | 0.0%
AST.NumReferencedMemberNames | 12,583,240 | 12,560,879 | -22,361 | -0.18%
AST.NumReferencedTopLevelNames | 1,159,400 | 1,158,838 | -562 | -0.05%
AST.NumSourceBuffers | 336,720 | 336,720 | 0 | 0.0%
AST.NumSourceLines | 10,415,958 | 10,415,958 | 0 | 0.0%
AST.NumSourceLinesPerSecond | 4,896,807 | 4,908,027 | 11,219 | 0.23%
AST.NumTotalClangImportedEntities | 1,822,573 | 1,824,019 | 1,445 | 0.08%
Frontend.MaxMallocUsage | 853,848,125,448 | 860,300,036,808 | 6,451,911,360 | 0.76%
Frontend.NumProcessFailures | 29 | 29 | 0 | 0.0%
IRGen.IRGenRequest | 26,364 | 26,364 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 257,276 | 257,391 | 115 | 0.04%
IRModule.NumIRAliases | 208,097 | 208,097 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 7,322,448 | 7,342,317 | 19,869 | 0.27%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,872,715 | 3,877,586 | 4,871 | 0.13%
IRModule.NumIRGlobals | 3,768,535 | 3,770,252 | 1,717 | 0.05%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 89,700,879 | 89,772,575 | 71,696 | 0.08%
IRModule.NumIRNamedMetaData | 130,738 | 130,738 | 0 | 0.0%
IRModule.NumIRValueSymbols | 7,697,888 | 7,704,472 | 6,584 | 0.09%
LLVM.NumLLVMBytesOutput | 2,101,943,696 | 2,103,564,100 | 1,620,404 | 0.08%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 334,824 | 334,824 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 690,353 | 690,323 | -30 | -0.0%
Parse.ParseAbstractFunctionBodyRequest | 571,896 | 571,904 | 8 | 0.0%
Parse.ParseMembersRequest | 534,198 | 534,168 | -30 | -0.01%
Parse.ParseSourceFileRequest | 329,521 | 329,521 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 329,521 | 329,521 | 0 | 0.0%
SILGen.ASTLoweringRequest | 27,626 | 27,626 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenFunctions | 2,913,219 | 2,913,732 | 513 | 0.02%
SILModule.NumSILGenGlobalVariables | 120,465 | 120,465 | 0 | 0.0%
SILModule.NumSILGenVtables | 36,379 | 36,379 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 156,075 | 156,119 | 44 | 0.03%
SILModule.NumSILOptDefaultWitnessTables | 0 | 0 | 0 | 0.0%
SILModule.NumSILOptFunctions | 3,427,205 | 3,429,407 | 2,202 | 0.06%
SILModule.NumSILOptGlobalVariables | 122,269 | 122,267 | -2 | -0.0%
SILModule.NumSILOptVtables | 36,680 | 36,676 | -4 | -0.01%
SILModule.NumSILOptWitnessTables | 191,231 | 191,436 | 205 | 0.11%
SILOptimizer.ExecuteSILPipelineRequest | 108,008 | 108,008 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 266,169 | 266,278 | 109 | 0.04%
Sema.AbstractGenericSignatureRequest | 128,948 | 129,403 | 455 | 0.35%
Sema.AllMembersRequest | 99,953 | 99,953 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 234 | 234 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 3,752,363 | 3,753,630 | 1,267 | 0.03%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 41,386 | 41,386 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 24,803 | 24,803 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 19,033,293 | 19,148,754 | 115,461 | 0.61%
Sema.AttachedResultBuilderRequest | 1,635,906 | 1,635,423 | -483 | -0.03%
Sema.BodyInitKindRequest | 75,147 | 75,151 | 4 | 0.01%
Sema.BreakTargetRequest | 5,609 | 5,609 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 324,522 | 324,522 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 80 | 80 | 0 | 0.0%
Sema.CheckInconsistentAccessLevelOnImport | 53,234 | 53,234 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 10,044 | 10,044 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 53,234 | 53,234 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 10,044 | 10,044 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,986,237 | 1,986,237 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 13,291 | 13,207 | -84 | -0.63%
Sema.ClangRecordMemberLookup | 13,291 | 13,207 | -84 | -0.63%
Sema.ClassAncestryFlagsRequest | 136,307 | 136,128 | -178 | -0.13%
Sema.ClosureEffectsRequest | 120,891 | 120,891 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 43,722 | 43,722 | 0 | 0.0%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConformanceHasEffectRequest | 51 | 51 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,967 | 1,967 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 22,529 | 22,529 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 3,396 | 3,396 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 105,411 | 105,410 | -1 | -0.0%
Sema.DefaultArgumentExprRequest | 91,610 | 91,610 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 844 | 844 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 7,590 | 7,579 | -11 | -0.14%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,971,176 | 1,970,910 | -265 | -0.01%
Sema.DirectPrecedenceGroupLookupRequest | 762,582 | 762,582 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 67 | 67 | 0 | 0.0%
Sema.EnumRawTypeRequest | 35,589 | 35,606 | 17 | 0.05%
Sema.EnumRawValuesRequest | 20,260 | 20,260 | 0 | 0.0%
Sema.ExistentialRequiresAnyRequest | 15,316 | 15,316 | 0 | 0.0%
Sema.ExpandAccessorMacros | 1,120,001 | 1,120,026 | 25 | 0.0%
Sema.ExpandConformanceMacros | 102,253 | 102,253 | 0 | 0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 35,171,986 | 35,372,977 | 200,991 | 0.57%
Sema.ExpandPeerMacroRequest | 3,586,303 | 3,586,445 | 142 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 905,621 | 903,858 | -1,763 | -0.19%
Sema.ExtendedNominalRequest | 603,730 | 603,730 | 0 | 0.0%
Sema.ExtendedTypeRequest | 185,297 | 185,289 | -7 | -0.0%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 2,346,874 | 2,347,459 | 585 | 0.02%
Sema.FunctionOperatorRequest | 17,537 | 17,537 | 0 | 0.0%
Sema.GenericSignatureRequest | 3,183,121 | 3,184,084 | 963 | 0.03%
Sema.GetDestructorRequest | 42,889 | 42,888 | -1 | -0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 72 | 72 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 117 | 117 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 56 | 56 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 46 | 46 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 22 | 22 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 20 | 20 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 11 | 11 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 16 | 16 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 2 | 2 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 80 | 80 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 304,242 | 307,293 | 3,051 | 1.0%
Sema.GetRuntimeDiscoverableAttributes | 2,091,041 | 2,091,041 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 142 | 142 | 0 | 0.0%
Sema.GlobalActorInstanceRequest | 1,116 | 1,116 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 16,969 | 16,969 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 20,610 | 20,610 | 0 | 0.0%
Sema.HasDefaultInitRequest | 90,857 | 90,857 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 519,971 | 519,540 | -430 | -0.08%
Sema.HasImportsMatchingFlagRequest | 653,721 | 653,721 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 13,237,753 | 13,199,827 | -37,926 | -0.29%
Sema.HasMemberwiseInitRequest | 40,939 | 40,939 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 30,621 | 30,621 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 90,867 | 90,867 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 218,731 | 218,743 | 12 | 0.01%
Sema.InheritedTypeRequest | 426,121 | 426,465 | 344 | 0.08%
Sema.InheritsSuperclassInitializersRequest | 39,207 | 39,208 | 1 | 0.0%
Sema.InitKindRequest | 165,901 | 165,904 | 3 | 0.0%
Sema.InterfaceTypeRequest | 19,965,804 | 20,086,905 | 121,101 | 0.61%
Sema.IsABICompatibleOverrideRequest | 280,114 | 280,114 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 510,498 | 510,498 | 0 | 0.0%
Sema.IsActorRequest | 2,052,252 | 2,058,253 | 6,001 | 0.29%
Sema.IsCallAsFunctionNominalRequest | 6,195 | 6,158 | -37 | -0.6%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 58,073 | 58,082 | 9 | 0.02%
Sema.IsDistributedActorRequest | 2,293,281 | 2,300,915 | 7,633 | 0.33%
Sema.IsDynamicRequest | 2,816,004 | 2,816,600 | 596 | 0.02%
Sema.IsFinalRequest | 4,211,256 | 4,234,072 | 22,816 | 0.54%
Sema.IsGetterMutatingRequest | 697,975 | 697,968 | -7 | -0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 3,497,668 | 3,494,779 | -2,889 | -0.08%
Sema.IsMoveOnlyRequest | 648,876 | 650,407 | 1,531 | 0.24%
Sema.IsObjCRequest | 2,610,623 | 2,611,890 | 1,267 | 0.05%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 618,965 | 618,965 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 322,985 | 322,985 | 0 | 0.0%
Sema.IsStaticRequest | 1,454,020 | 1,454,333 | 313 | 0.02%
Sema.LazyStoragePropertyRequest | 2,421 | 2,421 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 462,687 | 462,687 | 0 | 0.0%
Sema.LookupInModuleRequest | 8,585,007 | 8,578,657 | -6,350 | -0.07%
Sema.LookupInfixOperatorRequest | 69,292 | 69,292 | 0 | 0.0%
Sema.LookupPostfixOperatorRequest | 74 | 74 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 29,505 | 29,505 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 352 | 352 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 1,103 | 1,103 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 10,044 | 10,044 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 351 | 351 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 3,532,059 | 3,525,288 | -6,771 | -0.19%
Sema.NamedLazyMemberLoadSuccessCount | 33,758,703 | 33,668,140 | -90,563 | -0.27%
Sema.NamingPatternRequest | 240,179 | 240,176 | -3 | -0.0%
Sema.NeedsNewVTableEntryRequest | 947,268 | 947,268 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 415,907 | 415,907 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 510,455 | 510,455 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 842,339 | 842,509 | 169 | 0.02%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 102,645,960 | 103,353,459 | 707,499 | 0.69%
Sema.NumDeclsTypechecked | 2,816,008 | 2,816,008 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 13,616,670 | 13,690,871 | 74,201 | 0.54%
Sema.NumLazyRequirementSignatures | 1,084,510 | 1,085,688 | 1,178 | 0.11%
Sema.NumTypesDeserialized | 27,839,076 | 28,016,079 | 177,002 | 0.64%
Sema.NumUnloadedLazyIterableDeclContexts | 7,848,948 | 7,870,083 | 21,134 | 0.27%
Sema.ObjCInterfaceAndImplementationRequest | 750,059 | 750,733 | 674 | 0.09%
Sema.OpaqueReadOwnershipRequest | 446,276 | 446,280 | 4 | 0.0%
Sema.OpaqueResultTypeRequest | 862 | 862 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 1,021 | 1,021 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 5,316,336 | 5,334,477 | 18,141 | 0.34%
Sema.ParamSpecifierRequest | 1,948,623 | 1,948,618 | -4 | -0.0%
Sema.PatternBindingEntryRequest | 690,135 | 690,132 | -3 | -0.0%
Sema.PatternTypeRequest | 809,277 | 809,274 | -3 | -0.0%
Sema.PolymorphicEffectKindRequest | 972,939 | 973,437 | 498 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 60 | 60 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 1,041 | 1,041 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 504,267 | 504,267 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 7,228 | 7,228 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 10,044 | 10,044 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 2,044,781 | 2,044,781 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 24,803 | 24,803 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 594,552 | 594,552 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 2,912 | 2,912 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 693,679 | 693,677 | -2 | -0.0%
Sema.PropertyWrapperTypeInfoRequest | 626 | 626 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 73,116 | 73,225 | 109 | 0.15%
Sema.ProtocolRequiresClassRequest | 43,706 | 43,856 | 149 | 0.34%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 4,225 | 4,226 | 1 | 0.02%
Sema.RequirementRequest | 175,068 | 175,071 | 3 | 0.0%
Sema.RequiresOpaqueAccessorsRequest | 1,783,917 | 1,783,927 | 10 | 0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 448,047 | 448,057 | 10 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 29,891 | 29,891 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeRequest | 5,017,167 | 4,973,940 | -43,226 | -0.86%
Sema.ResultBuilderTypeRequest | 464,408 | 463,748 | -660 | -0.14%
Sema.ResultTypeRequest | 1,098,895 | 1,098,893 | -1 | -0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 7,429,690 | 7,438,369 | 8,679 | 0.12%
Sema.ScopedImportLookupRequest | 808 | 808 | 0 | 0.0%
Sema.SelfAccessKindRequest | 906,979 | 907,125 | 146 | 0.02%
Sema.SelfBoundsFromGenericSignatureRequest | 66,793 | 66,496 | -297 | -0.44%
Sema.SelfBoundsFromWhereClauseRequest | 1,760,517 | 1,760,015 | -502 | -0.03%
Sema.SemanticAvailableRangeAttrRequest | 5,391 | 5,391 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 148,904 | 148,904 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 244,663 | 244,660 | -3 | -0.0%
Sema.SpecializeAttrTargetDeclRequest | 2,943 | 2,943 | 0 | 0.0%
Sema.StorageImplInfoRequest | 2,042,771 | 2,042,800 | 29 | 0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 62,456 | 62,465 | 9 | 0.01%
Sema.StoredPropertiesRequest | 380,560 | 381,894 | 1,334 | 0.35%
Sema.StructuralRequirementsRequest | 54,716 | 54,953 | 236 | 0.43%
Sema.StructuralTypeRequest | 1,928 | 1,928 | 0 | 0.0%
Sema.SuperclassDeclRequest | 514,162 | 513,120 | -1,042 | -0.2%
Sema.SuperclassTypeRequest | 66,950 | 66,642 | -307 | -0.46%
Sema.SynthesizeAccessorRequest | 510,455 | 510,455 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 10,533 | 10,533 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 229,563 | 229,672 | 109 | 0.05%
Sema.SynthesizeMemberwiseInitRequest | 8,279 | 8,279 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 54,716 | 54,953 | 236 | 0.43%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 873,047 | 873,051 | 4 | 0.0%
Sema.TypeCheckSourceFileRequest | 53,234 | 53,234 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 52,596 | 52,596 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 14,512 | 14,471 | -40 | -0.28%
Sema.UnderlyingTypeRequest | 54,019 | 54,008 | -10 | -0.02%
Sema.UnqualifiedLookupRequest | 6,200,819 | 6,201,241 | 422 | 0.01%
Sema.ValidatePrecedenceGroupRequest | 231,923 | 231,923 | 0 | 0.0%
Sema.ValueWitnessRequest | 72,682 | 72,743 | 61 | 0.08%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 26,378 | 26,378 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>

<a name=""release-51d97a7d6f5393d8"">

# Release

<a name=""release-brief-51d97a7d6f5393d8"">

## release brief
<details>
<summary>Regressed (0)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
</details>
<details>
<summary>Improved (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 96,393,294,326,054 | 93,488,393,494,057 | -2,904,900,831,997 | -3.01% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (1)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
LLVM.NumLLVMBytesOutput | 2,194,420,044 | 2,194,997,072 | 577,028 | 0.03%
</details>

<a name=""release-detailed-51d97a7d6f5393d8"">

## release detailed
<details>
<summary>Regressed (8)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.NumSourceLinesPerSecond | 376,333 | 380,730 | 4,397 | 1.17% :no_entry:
Sema.InheritedDeclsReferencedRequest | 1,306,827 | 1,348,043 | 41,215 | 3.15% :no_entry:
Sema.NumConformancesDeserialized | 986,433 | 1,023,205 | 36,772 | 3.73% :no_entry:
Sema.NumLazyRequirementSignaturesLoaded | 114,241 | 115,390 | 1,149 | 1.01% :no_entry:
Sema.NumRequirementMachineCompletionSteps | 5,097,313 | 5,367,823 | 270,509 | 5.31% :no_entry:
Sema.NumRequirementMachines | 432,077 | 443,857 | 11,779 | 2.73% :no_entry:
Sema.ProtocolDependenciesRequest | 106,672 | 112,476 | 5,804 | 5.44% :no_entry:
Sema.UnderlyingTypeDeclsReferencedRequest | 65,922 | 68,931 | 3,008 | 4.56% :no_entry:
</details>
<details>
<summary>Improved (17)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
Frontend.NumInstructionsExecuted | 96,393,294,326,054 | 93,488,393,494,057 | -2,904,900,831,997 | -3.01% :white_check_mark:
Sema.CompareDeclSpecializationRequest | 457,610 | 413,490 | -44,120 | -9.64% :white_check_mark:
Sema.ConditionalRequirementsRequest | 240,629 | 235,787 | -4,842 | -2.01% :white_check_mark:
Sema.DefaultArgumentTypeRequest | 9,657 | 9,388 | -269 | -2.79% :white_check_mark:
Sema.DefaultTypeRequest | 331,960 | 231,298 | -100,662 | -30.32% :white_check_mark:
Sema.DirectLookupRequest | 53,213,999 | 52,030,762 | -1,183,236 | -2.22% :white_check_mark:
Sema.ExistentialConformsToSelfRequest | 6,374 | 5,933 | -441 | -6.92% :white_check_mark:
Sema.GenericParamListRequest | 1,789,781 | 1,713,923 | -75,858 | -4.24% :white_check_mark:
Sema.HasDynamicCallableAttributeRequest | 11,586 | 11,462 | -124 | -1.07% :white_check_mark:
Sema.IsDeclRefinementOfRequest | 30,282 | 2,302 | -27,980 | -92.4% :white_check_mark:
Sema.LookupConformanceInModuleRequest | 58,049,314 | 36,972,483 | -21,076,831 | -36.31% :white_check_mark:
Sema.NumConstraintScopes | 41,338,112 | 19,885,687 | -21,452,425 | -51.9% :white_check_mark:
Sema.NumConstraintsConsideredForEdgeContraction | 1,808,816 | 1,224,385 | -584,431 | -32.31% :white_check_mark:
Sema.NumLeafScopes | 30,853,745 | 12,245,787 | -18,607,958 | -60.31% :white_check_mark:
Sema.QualifiedLookupRequest | 4,890,843 | 4,783,622 | -107,221 | -2.19% :white_check_mark:
Sema.ResolveImplicitMemberRequest | 494,146 | 465,792 | -28,354 | -5.74% :white_check_mark:
Sema.ResolveTypeRequest | 2,417,098 | 2,378,709 | -38,389 | -1.59% :white_check_mark:
</details>
<details>
<summary>Unchanged (delta < 1.0% or delta < 100.0ms) (287)</summary>

name | old | new | delta | delta_pct
---: | ---: | ---: | ---: | ---:
AST.ImportSetCacheHit | 1,678,323 | 1,678,065 | -258 | -0.02%
AST.ImportSetCacheMiss | 86,593 | 86,604 | 11 | 0.01%
AST.ImportSetFoldHit | 43,101 | 43,108 | 7 | 0.02%
AST.ImportSetFoldMiss | 43,492 | 43,496 | 4 | 0.01%
AST.ModuleShadowCacheHit | 5,924 | 5,914 | -10 | -0.17%
AST.ModuleShadowCacheMiss | 1,411 | 1,411 | 0 | 0.0%
AST.ModuleVisibilityCacheHit | 8,693,730 | 8,693,560 | -170 | -0.0%
AST.ModuleVisibilityCacheMiss | 31,538 | 31,538 | 0 | 0.0%
AST.NumASTBytesAllocated | 13,412,862,492 | 13,422,941,493 | 10,079,000 | 0.08%
AST.NumASTScopeExpansions | 3,485,816 | 3,485,816 | 0 | 0.0%
AST.NumASTScopeLookups | 5,003,346 | 5,003,221 | -125 | -0.0%
AST.NumDecls | 172,846 | 172,846 | 0 | 0.0%
AST.NumDependencies | 60,189 | 60,189 | 0 | 0.0%
AST.NumIncrementalDependencies | 58 | 58 | 0 | 0.0%
AST.NumLinkLibraries | 0 | 0 | 0 | 0.0%
AST.NumLoadedModules | 34,737 | 34,737 | 0 | 0.0%
AST.NumLocalTypeDecls | 1,325 | 1,325 | 0 | 0.0%
AST.NumModuleLookupClassMember | 6,694 | 6,694 | 0 | 0.0%
AST.NumModuleLookupValue | 44,718,919 | 44,710,052 | -8,867 | -0.02%
AST.NumObjCMethods | 36,677 | 36,677 | 0 | 0.0%
AST.NumOperators | 512 | 512 | 0 | 0.0%
AST.NumPrecedenceGroups | 88 | 88 | 0 | 0.0%
AST.NumReferencedDynamicNames | 0 | 0 | 0 | 0.0%
AST.NumReferencedMemberNames | 4,222 | 4,210 | -12 | -0.28%
AST.NumReferencedTopLevelNames | 352 | 352 | 0 | 0.0%
AST.NumSourceBuffers | 34,334 | 34,334 | 0 | 0.0%
AST.NumSourceLines | 5,865,261 | 5,865,261 | 0 | 0.0%
AST.NumTotalClangImportedEntities | 516,547 | 516,177 | -370 | -0.07%
Frontend.MaxMallocUsage | 300,544,907,680 | 300,642,905,120 | 97,997,440 | 0.03%
Frontend.NumProcessFailures | 6 | 6 | 0 | 0.0%
IRGen.IRGenRequest | 12 | 12 | 0 | 0.0%
IRGen.OptimizedIRRequest | 0 | 0 | 0 | 0.0%
IRGen.SymbolObjectCodeRequest | 0 | 0 | 0 | 0.0%
IRModule.NumGOTEntries | 248,208 | 248,269 | 61 | 0.02%
IRModule.NumIRAliases | 175,128 | 175,128 | 0 | 0.0%
IRModule.NumIRBasicBlocks | 5,752,812 | 5,744,709 | -8,103 | -0.14%
IRModule.NumIRComdatSymbols | 0 | 0 | 0 | 0.0%
IRModule.NumIRFunctions | 3,277,433 | 3,278,854 | 1,421 | 0.04%
IRModule.NumIRGlobals | 3,510,217 | 3,510,961 | 744 | 0.02%
IRModule.NumIRIFuncs | 0 | 0 | 0 | 0.0%
IRModule.NumIRInsts | 55,415,586 | 55,430,200 | 14,614 | 0.03%
IRModule.NumIRNamedMetaData | 134,151 | 134,151 | 0 | 0.0%
IRModule.NumIRValueSymbols | 6,819,279 | 6,821,444 | 2,165 | 0.03%
LLVM.NumLLVMBytesOutput | 2,194,420,044 | 2,194,997,072 | 577,028 | 0.03%
Parse.IDEInspectionSecondPassRequest | 0 | 0 | 0 | 0.0%
Parse.NumFunctionsParsed | 312,788 | 312,788 | 0 | 0.0%
Parse.NumIterableDeclContextParsed | 119,266 | 119,266 | 0 | 0.0%
Parse.ParseAbstractFunctionBodyRequest | 325,416 | 325,424 | 8 | 0.0%
Parse.ParseMembersRequest | 14,649 | 14,649 | 0 | 0.0%
Parse.ParseSourceFileRequest | 32,149 | 32,149 | 0 | 0.0%
Parse.ParseTopLevelDeclsRequest | 32,149 | 32,149 | 0 | 0.0%
SILGen.ASTLoweringRequest | 1,320 | 1,320 | 0 | 0.0%
SILGen.ParseSILModuleRequest | 0 | 0 | 0 | 0.0%
SILModule.NumSILGenDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILGenFunctions | 1,527,026 | 1,527,437 | 411 | 0.03%
SILModule.NumSILGenGlobalVariables | 62,753 | 62,753 | 0 | 0.0%
SILModule.NumSILGenVtables | 25,121 | 25,121 | 0 | 0.0%
SILModule.NumSILGenWitnessTables | 86,073 | 86,117 | 44 | 0.05%
SILModule.NumSILOptDefaultWitnessTables | 830 | 830 | 0 | 0.0%
SILModule.NumSILOptFunctions | 1,348,804 | 1,349,475 | 671 | 0.05%
SILModule.NumSILOptGlobalVariables | 58,886 | 58,982 | 96 | 0.16%
SILModule.NumSILOptVtables | 29,905 | 29,907 | 2 | 0.01%
SILModule.NumSILOptWitnessTables | 86,588 | 86,632 | 44 | 0.05%
SILOptimizer.ExecuteSILPipelineRequest | 5,176 | 5,176 | 0 | 0.0%
SILOptimizer.LoweredSILRequest | 0 | 0 | 0 | 0.0%
Sema.ABIMembersRequest | 128,151 | 128,151 | 0 | 0.0%
Sema.AbstractGenericSignatureRequest | 73,495 | 73,447 | -48 | -0.07%
Sema.AccessLevelRequest | 3,039,189 | 3,039,023 | -166 | -0.01%
Sema.ActorIsolationRequest | 2,216,067 | 2,194,042 | -22,025 | -0.99%
Sema.AllMembersRequest | 102,572 | 102,572 | 0 | 0.0%
Sema.AnyObjectLookupRequest | 236 | 236 | 0 | 0.0%
Sema.ApplyAccessNoteRequest | 2,078,433 | 2,078,445 | 12 | 0.0%
Sema.AreAllStoredPropertiesDefaultInitableRequest | 22,892 | 22,892 | 0 | 0.0%
Sema.AttachedPropertyWrapperTypeRequest | 9,853 | 9,853 | 0 | 0.0%
Sema.AttachedPropertyWrappersRequest | 4,631,734 | 4,626,889 | -4,845 | -0.1%
Sema.AttachedResultBuilderRequest | 962,983 | 962,811 | -172 | -0.02%
Sema.BodyInitKindRequest | 56,752 | 56,756 | 4 | 0.01%
Sema.BreakTargetRequest | 4,727 | 4,727 | 0 | 0.0%
Sema.CXXNamespaceMemberLookup | 0 | 0 | 0 | 0.0%
Sema.CallerSideDefaultArgExprRequest | 281,718 | 281,718 | 0 | 0.0%
Sema.CheckDistributedFunctionRequest | 42 | 42 | 0 | 0.0%
Sema.CheckInconsistentAccessLevelOnImport | 32,125 | 32,125 | 0 | 0.0%
Sema.CheckInconsistentImplementationOnlyImportsRequest | 1,326 | 1,326 | 0 | 0.0%
Sema.CheckInconsistentSPIOnlyImportsRequest | 32,125 | 32,125 | 0 | 0.0%
Sema.CheckInconsistentWeakLinkedImportsRequest | 1,326 | 1,326 | 0 | 0.0%
Sema.CheckRedeclarationRequest | 1,243,740 | 1,243,740 | 0 | 0.0%
Sema.ClangCategoryLookupRequest | 0 | 0 | 0 | 0.0%
Sema.ClangDirectLookupRequest | 6,937 | 6,912 | -25 | -0.36%
Sema.ClangRecordMemberLookup | 6,937 | 6,912 | -25 | -0.36%
Sema.ClassAncestryFlagsRequest | 59,255 | 59,194 | -61 | -0.1%
Sema.ClosureEffectsRequest | 109,758 | 109,758 | 0 | 0.0%
Sema.ClosureHasExplicitResultRequest | 38,749 | 38,749 | 0 | 0.0%
Sema.CollectOverriddenDeclsRequest | 1,069,399 | 1,069,198 | -201 | -0.02%
Sema.CompilerPluginLoadRequest | 0 | 0 | 0 | 0.0%
Sema.ConformanceHasEffectRequest | 41 | 41 | 0 | 0.0%
Sema.ConstantValueInfoRequest | 0 | 0 | 0 | 0.0%
Sema.ContinueTargetRequest | 1,756 | 1,756 | 0 | 0.0%
Sema.CursorInfoRequest | 0 | 0 | 0 | 0.0%
Sema.CustomAttrNominalRequest | 9,148 | 9,148 | 0 | 0.0%
Sema.CustomAttrTypeRequest | 1,338 | 1,338 | 0 | 0.0%
Sema.CustomRefCountingOperation | 0 | 0 | 0 | 0.0%
Sema.CxxRecordSemantics | 0 | 0 | 0 | 0.0%
Sema.DefaultAndMaxAccessLevelRequest | 51,607 | 51,607 | 0 | 0.0%
Sema.DefaultArgumentExprRequest | 47,959 | 47,959 | 0 | 0.0%
Sema.DefaultArgumentInitContextRequest | 326 | 326 | 0 | 0.0%
Sema.DefaultDefinitionTypeRequest | 3,364 | 3,364 | 0 | 0.0%
Sema.DerivativeAttrOriginalDeclRequest | 0 | 0 | 0 | 0.0%
Sema.DifferentiableAttributeTypeCheckRequest | 0 | 0 | 0 | 0.0%
Sema.DirectOperatorLookupRequest | 1,493,135 | 1,492,984 | -151 | -0.01%
Sema.DirectPrecedenceGroupLookupRequest | 646,515 | 646,515 | 0 | 0.0%
Sema.DistributedModuleIsAvailableRequest | 33 | 33 | 0 | 0.0%
Sema.DynamicallyReplacedDeclRequest | 2,393,534 | 2,371,822 | -21,712 | -0.91%
Sema.EnumRawTypeRequest | 10,948 | 10,948 | 0 | 0.0%
Sema.EnumRawValuesRequest | 11,121 | 11,121 | 0 | 0.0%
Sema.ExistentialRequiresAnyRequest | 7,752 | 7,752 | 0 | 0.0%
Sema.ExpandAccessorMacros | 708,018 | 708,015 | -3 | -0.0%
Sema.ExpandConformanceMacros | 60,566 | 60,566 | 0 | 0.0%
Sema.ExpandMacroExpansionDeclRequest | 0 | 0 | 0 | 0.0%
Sema.ExpandMemberAttributeMacros | 8,371,874 | 8,363,306 | -8,568 | -0.1%
Sema.ExpandPeerMacroRequest | 1,821,917 | 1,821,917 | 0 | 0.0%
Sema.ExpandSynthesizedMemberMacroRequest | 250,490 | 250,079 | -411 | -0.16%
Sema.ExtendedNominalRequest | 56,461 | 56,461 | 0 | 0.0%
Sema.ExtendedTypeRequest | 56,359 | 56,359 | 0 | 0.0%
Sema.ExternalMacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.FragileFunctionKindRequest | 1,274,199 | 1,274,532 | 333 | 0.03%
Sema.FunctionOperatorRequest | 8,622 | 8,622 | 0 | 0.0%
Sema.GenericSignatureRequest | 1,210,224 | 1,210,021 | -203 | -0.02%
Sema.GetDestructorRequest | 26,201 | 26,201 | 0 | 0.0%
Sema.GetDistributedActorArgumentDecodingMethodRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorIDPropertyRequest | 32 | 32 | 0 | 0.0%
Sema.GetDistributedActorImplicitCodableRequest | 56 | 56 | 0 | 0.0%
Sema.GetDistributedActorInvocationDecoderRequest | 19 | 19 | 0 | 0.0%
Sema.GetDistributedActorSystemPropertyRequest | 28 | 28 | 0 | 0.0%
Sema.GetDistributedActorSystemRemoteCallFunctionRequest | 8 | 8 | 0 | 0.0%
Sema.GetDistributedRemoteCallArgumentInitFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedRemoteCallTargetInitFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedTargetInvocationDecoderDecodeNextArgumentFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordArgumentFunctionRequest | 5 | 5 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordErrorTypeFunctionRequest | 3 | 3 | 0 | 0.0%
Sema.GetDistributedTargetInvocationEncoderRecordReturnTypeFunctionRequest | 4 | 4 | 0 | 0.0%
Sema.GetDistributedTargetInvocationResultHandlerOnReturnFunctionRequest | 1 | 1 | 0 | 0.0%
Sema.GetDistributedThunkRequest | 42 | 42 | 0 | 0.0%
Sema.GetImplicitSendableRequest | 70,665 | 70,652 | -13 | -0.02%
Sema.GetRuntimeDiscoverableAttributes | 1,301,698 | 1,301,698 | 0 | 0.0%
Sema.GetSourceFileAsyncNode | 69 | 69 | 0 | 0.0%
Sema.GlobalActorAttributeRequest | 2,984,032 | 2,960,647 | -23,385 | -0.78%
Sema.GlobalActorInstanceRequest | 243 | 243 | 0 | 0.0%
Sema.HasCircularInheritedProtocolsRequest | 8,465 | 8,465 | 0 | 0.0%
Sema.HasCircularRawValueRequest | 10,939 | 10,939 | 0 | 0.0%
Sema.HasDefaultInitRequest | 41,846 | 41,846 | 0 | 0.0%
Sema.HasDynamicMemberLookupAttributeRequest | 145,455 | 145,154 | -301 | -0.21%
Sema.HasImportsMatchingFlagRequest | 63,884 | 63,884 | 0 | 0.0%
Sema.HasIsolatedSelfRequest | 4,437,483 | 4,414,307 | -23,176 | -0.52%
Sema.HasMemberwiseInitRequest | 16,353 | 16,353 | 0 | 0.0%
Sema.HasMissingDesignatedInitializersRequest | 22,017 | 22,017 | 0 | 0.0%
Sema.HasUserDefinedDesignatedInitRequest | 41,846 | 41,846 | 0 | 0.0%
Sema.IDEInspectionFileRequest | 0 | 0 | 0 | 0.0%
Sema.InferredGenericSignatureRequest | 88,488 | 88,488 | 0 | 0.0%
Sema.InheritedProtocolsRequest | 129,869 | 130,720 | 850 | 0.65%
Sema.InheritedTypeRequest | 211,842 | 211,837 | -5 | -0.0%
Sema.InheritsSuperclassInitializersRequest | 21,263 | 21,264 | 1 | 0.0%
Sema.InitKindRequest | 81,196 | 81,200 | 4 | 0.0%
Sema.InterfaceTypeRequest | 5,461,270 | 5,454,647 | -6,623 | -0.12%
Sema.IsABICompatibleOverrideRequest | 164,305 | 164,305 | 0 | 0.0%
Sema.IsAccessorTransparentRequest | 286,822 | 286,822 | 0 | 0.0%
Sema.IsActorRequest | 405,490 | 405,541 | 50 | 0.01%
Sema.IsCallAsFunctionNominalRequest | 5,998 | 5,961 | -37 | -0.62%
Sema.IsDeclApplicableRequest | 0 | 0 | 0 | 0.0%
Sema.IsDefaultActorRequest | 34,669 | 34,669 | 0 | 0.0%
Sema.IsDistributedActorRequest | 472,453 | 472,497 | 43 | 0.01%
Sema.IsDynamicRequest | 1,558,335 | 1,558,683 | 348 | 0.02%
Sema.IsFinalRequest | 1,532,650 | 1,532,971 | 320 | 0.02%
Sema.IsGetterMutatingRequest | 423,730 | 423,734 | 4 | 0.0%
Sema.IsImplicitlyUnwrappedOptionalRequest | 2,254,861 | 2,254,241 | -620 | -0.03%
Sema.IsMoveOnlyRequest | 203,279 | 203,361 | 82 | 0.04%
Sema.IsObjCRequest | 1,405,262 | 1,405,274 | 12 | 0.0%
Sema.IsSafeUseOfCxxDecl | 0 | 0 | 0 | 0.0%
Sema.IsSetterMutatingRequest | 412,349 | 412,349 | 0 | 0.0%
Sema.IsSingleValueStmtRequest | 275,096 | 275,096 | 0 | 0.0%
Sema.IsStaticRequest | 686,541 | 686,517 | -24 | -0.0%
Sema.LazyStoragePropertyRequest | 592 | 592 | 0 | 0.0%
Sema.LocalDiscriminatorsRequest | 333,708 | 333,708 | 0 | 0.0%
Sema.LookupAllConformancesInContextRequest | 334,102 | 334,006 | -96 | -0.03%
Sema.LookupInModuleRequest | 3,004,155 | 2,997,413 | -6,742 | -0.22%
Sema.LookupInfixOperatorRequest | 58,186 | 58,186 | 0 | 0.0%
Sema.LookupPostfixOperatorRequest | 37 | 37 | 0 | 0.0%
Sema.LookupPrecedenceGroupRequest | 26,463 | 26,463 | 0 | 0.0%
Sema.LookupPrefixOperatorRequest | 167 | 167 | 0 | 0.0%
Sema.MacroDefinitionRequest | 0 | 0 | 0 | 0.0%
Sema.MangleLocalTypeDeclRequest | 1,305 | 1,305 | 0 | 0.0%
Sema.ModuleImplicitImportsRequest | 1,326 | 1,326 | 0 | 0.0%
Sema.ModuleLibraryLevelRequest | 141 | 141 | 0 | 0.0%
Sema.ModuleQualifiedLookupRequest | 710,676 | 704,026 | -6,650 | -0.94%
Sema.NamedLazyMemberLoadSuccessCount | 12,714,689 | 12,677,756 | -36,933 | -0.29%
Sema.NamingPatternRequest | 71,091 | 71,091 | 0 | 0.0%
Sema.NeedsNewVTableEntryRequest | 649,343 | 649,343 | 0 | 0.0%
Sema.NumAccessorBodiesSynthesized | 245,017 | 245,017 | 0 | 0.0%
Sema.NumAccessorsSynthesized | 248,046 | 248,046 | 0 | 0.0%
Sema.NumConformancePathsRecorded | 836,819 | 836,850 | 31 | 0.0%
Sema.NumCrossImportsChecked | 0 | 0 | 0 | 0.0%
Sema.NumCrossImportsFound | 0 | 0 | 0 | 0.0%
Sema.NumCyclicOneWayComponentsCollapsed | 0 | 0 | 0 | 0.0%
Sema.NumDeclsDeserialized | 19,101,578 | 19,114,066 | 12,488 | 0.07%
Sema.NumDeclsTypechecked | 1,788,094 | 1,788,094 | 0 | 0.0%
Sema.NumLazyIterableDeclContexts | 2,307,146 | 2,317,091 | 9,944 | 0.43%
Sema.NumLazyRequirementSignatures | 160,506 | 160,668 | 162 | 0.1%
Sema.NumRequirementMachineUnifiedConcreteTerms | 374,490 | 377,930 | 3,440 | 0.92%
Sema.NumTypesDeserialized | 7,360,273 | 7,361,420 | 1,147 | 0.02%
Sema.NumUnloadedLazyIterableDeclContexts | 1,246,013 | 1,254,002 | 7,988 | 0.64%
Sema.ObjCInterfaceAndImplementationRequest | 464,582 | 464,730 | 148 | 0.03%
Sema.OpaqueReadOwnershipRequest | 213,365 | 213,369 | 4 | 0.0%
Sema.OpaqueResultTypeRequest | 367 | 367 | 0 | 0.0%
Sema.OperatorPrecedenceGroupRequest | 445 | 445 | 0 | 0.0%
Sema.OverriddenDeclsRequest | 1,681,537 | 1,681,408 | -129 | -0.01%
Sema.ParamSpecifierRequest | 965,827 | 965,835 | 8 | 0.0%
Sema.PatternBindingEntryRequest | 367,578 | 367,578 | 0 | 0.0%
Sema.PatternTypeRequest | 475,100 | 475,100 | 0 | 0.0%
Sema.PolymorphicEffectKindRequest | 582,491 | 582,787 | 296 | 0.05%
Sema.PolymorphicEffectRequirementsRequest | 28 | 28 | 0 | 0.0%
Sema.PreCheckResultBuilderRequest | 957 | 957 | 0 | 0.0%
Sema.PreCheckReturnStmtRequest | 435,918 | 435,918 | 0 | 0.0%
Sema.PrimaryAssociatedTypesRequest | 7,163 | 7,163 | 0 | 0.0%
Sema.PrimarySourceFilesRequest | 1,326 | 1,326 | 0 | 0.0%
Sema.PropertyWrapperAuxiliaryVariablesRequest | 1,513,410 | 1,513,410 | 0 | 0.0%
Sema.PropertyWrapperBackingPropertyTypeRequest | 9,853 | 9,853 | 0 | 0.0%
Sema.PropertyWrapperInitializerInfoRequest | 412,460 | 412,460 | 0 | 0.0%
Sema.PropertyWrapperLValuenessRequest | 1,456 | 1,456 | 0 | 0.0%
Sema.PropertyWrapperMutabilityRequest | 421,959 | 421,963 | 4 | 0.0%
Sema.PropertyWrapperTypeInfoRequest | 146 | 146 | 0 | 0.0%
Sema.ProtocolRequirementsRequest | 18,434 | 18,434 | 0 | 0.0%
Sema.ProtocolRequiresClassRequest | 9,510 | 9,503 | -7 | -0.08%
Sema.ProvideDefaultImplForRequest | 1,069,399 | 1,069,198 | -201 | -0.02%
Sema.RangeInfoRequest | 0 | 0 | 0 | 0.0%
Sema.RenamedDeclRequest | 2,805 | 2,806 | 1 | 0.04%
Sema.RequirementRequest | 89,517 | 89,517 | 0 | 0.0%
Sema.RequirementSignatureRequest | 125,643 | 126,785 | 1,142 | 0.91%
Sema.RequiresOpaqueAccessorsRequest | 1,367,721 | 1,367,727 | 6 | 0.0%
Sema.RequiresOpaqueModifyCoroutineRequest | 214,119 | 214,121 | 2 | 0.0%
Sema.ResolveEffectiveMemberwiseInitRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveMacroRequest | 14,082 | 14,082 | 0 | 0.0%
Sema.ResolveProtocolNameRequest | 0 | 0 | 0 | 0.0%
Sema.ResolveTypeEraserTypeRequest | 0 | 0 | 0 | 0.0%
Sema.ResultBuilderTypeRequest | 379,569 | 379,200 | -369 | -0.1%
Sema.ResultTypeRequest | 496,495 | 496,495 | 0 | 0.0%
Sema.RootAndResultTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.RootTypeOfKeypathDynamicMemberRequest | 0 | 0 | 0 | 0.0%
Sema.SPIGroupsRequest | 2,429,056 | 2,426,829 | -2,227 | -0.09%
Sema.ScopedImportLookupRequest | 402 | 402 | 0 | 0.0%
Sema.SelfAccessKindRequest | 375,135 | 375,127 | -8 | -0.0%
Sema.SelfBoundsFromGenericSignatureRequest | 23,704 | 23,704 | 0 | 0.0%
Sema.SelfBoundsFromWhereClauseRequest | 537,346 | 536,225 | -1,121 | -0.21%
Sema.SemanticAvailableRangeAttrRequest | 2,583 | 2,583 | 0 | 0.0%
Sema.SemanticUnavailableAttrRequest | 97,745 | 97,745 | 0 | 0.0%
Sema.SetterAccessLevelRequest | 185,836 | 185,833 | -3 | -0.0%
Sema.SimpleDidSetRequest | 580,801 | 580,800 | -1 | -0.0%
Sema.SpecializeAttrTargetDeclRequest | 1,595 | 1,595 | 0 | 0.0%
Sema.StorageImplInfoRequest | 1,521,888 | 1,521,889 | 1 | 0.0%
Sema.StoredPropertiesAndMissingMembersRequest | 46,874 | 46,874 | 0 | 0.0%
Sema.StoredPropertiesRequest | 155,145 | 155,185 | 40 | 0.03%
Sema.StructuralRequirementsRequest | 11,417 | 11,410 | -7 | -0.06%
Sema.StructuralTypeRequest | 548 | 548 | 0 | 0.0%
Sema.SuperclassDeclRequest | 116,340 | 116,142 | -198 | -0.17%
Sema.SuperclassTypeRequest | 31,690 | 31,710 | 20 | 0.06%
Sema.SynthesizeAccessorRequest | 248,046 | 248,046 | 0 | 0.0%
Sema.SynthesizeDefaultInitRequest | 4,181 | 4,181 | 0 | 0.0%
Sema.SynthesizeMainFunctionRequest | 117,167 | 117,167 | 0 | 0.0%
Sema.SynthesizeMemberwiseInitRequest | 3,479 | 3,479 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGenerator | 0 | 0 | 0 | 0.0%
Sema.SynthesizeRuntimeMetadataAttrGeneratorBody | 0 | 0 | 0 | 0.0%
Sema.TangentStoredPropertyRequest | 0 | 0 | 0 | 0.0%
Sema.TypeAliasRequirementsRequest | 11,417 | 11,410 | -7 | -0.06%
Sema.TypeCheckASTNodeAtLocRequest | 0 | 0 | 0 | 0.0%
Sema.TypeCheckFunctionBodyRequest | 633,327 | 633,331 | 4 | 0.0%
Sema.TypeCheckSourceFileRequest | 32,125 | 32,125 | 0 | 0.0%
Sema.TypeDeclsFromWhereClauseRequest | 29,742 | 29,742 | 0 | 0.0%
Sema.TypeEraserHasViableInitRequest | 0 | 0 | 0 | 0.0%
Sema.TypeRelationCheckRequest | 0 | 0 | 0 | 0.0%
Sema.TypeWitnessRequest | 4,869 | 4,870 | 1 | 0.02%
Sema.USRGenerationRequest | 1,603,930 | 1,603,725 | -205 | -0.01%
Sema.UnderlyingTypeRequest | 27,595 | 27,595 | 0 | 0.0%
Sema.UnqualifiedLookupRequest | 2,839,137 | 2,839,045 | -92 | -0.0%
Sema.ValidatePrecedenceGroupRequest | 206,883 | 206,883 | 0 | 0.0%
Sema.ValueWitnessRequest | 34,005 | 34,066 | 61 | 0.18%
TBDGen.APIGenRequest | 0 | 0 | 0 | 0.0%
TBDGen.GenerateTBDRequest | 0 | 0 | 0 | 0.0%
TBDGen.PublicSymbolsRequest | 1,268 | 1,268 | 0 | 0.0%
TBDGen.SymbolSourceMapRequest | 0 | 0 | 0 | 0.0%
</details>
 @swift-ci please build toolchain macOS Here's a case that is improved a lot by this PR:
```swift
func equalityTest<T: Equatable>(_ a: T, _ b: T) {}
func equalityTest<T: Equatable, U: Equatable>(_ a: (T,U), _ b: (T,U)) {}
func equalityTest<T: Equatable, U: Equatable, V: Equatable>(_ a: (T,U,V), _ b: (T,U,V)) {}
func equalityTest<T: Equatable, U: Equatable, V: Equatable, W: Equatable>(_ a: (T,U,V,W), _ b: (T,U,V,W)) {}
func equalityTest<T: Equatable, U: Equatable, V: Equatable, W: Equatable, X: Equatable>(_ a: (T,U,V,W,X), _ b: (T,U,V,W,X)) {}
func equalityTest<T: Equatable, U: Equatable, V: Equatable, W: Equatable, X: Equatable, Y: Equatable>(_ a: (T,U,V,W,X,Y), _ b: (T,U,V,W,X,Y)) {}
func equalityTest<T: Equatable, U: Equatable, V: Equatable, W: Equatable, X: Equatable, Y: Equatable, Z: Equatable>(_ a: (T,U,V,W,X,Y,Z), _ b: (T,U,V,W,X,Y,Z)) {}

func myTest(_ test: () -> Void) {}

myTest {
  let c = 10
  let a = Array((0..<c).map(String.init))
  equalityTest(a.compactMap(Int.init).reduce(0,+), c*(c-1)/2)     // line 14
}
```
Before this PR, line 14 takes 500ms to type-check (on an M1); after this PR it takes 3ms. @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please build toolchain macOS @swift-ci please build toolchain macOS @swift-ci please test source compatibility",,"This algorithm attempts to ensure that the solver always picks a disjunction
it knows the most about given the previously deduced type information.

For example in chains of operators like: `let _: (Double) -> Void = { 1 * 2 + $0 - 5 }`

The solver is going to start from `2 + $0` because `$0` is known to be `Double` and
then proceed to `1 * ...` and only after that to `... - 5`.

The algorithm is pretty simple:

```
- Collect ""candidate"" types for each argument
  - If argument is bound then the set going to be represented by just one type
    - Otherwise:
      - Collect all the possible bindings
      - Add default literal type (if any)

- Collect ""candidate"" types for result

- For each disjunction in the current scope:
  - Compute a favoring score for each viable* overload choice:
    - Compute score for each parameter:
      - Match parameter flags to argument flags
      - Match parameter types to a set of candidate argument types
        - If it's an exact match:
          - Concrete type: score = 1.0
          - Literal default: score = 0.3
        - Highest scored candidate type wins.
      - If none of the candidates match and they are all non-literal
         remove overload choice from consideration.

  - Average the score by dividing it by the number of parameters
     to avoid disfavoring disjunctions with fewer arguments.

  - Match result type to a set of candidates; add 1 to the score
     if one of the candidate types matches exactly.

  - The best choice score becomes a disjunction score

  - Compute disjunction scores for all of the disjunctions in scope.

  - Pick disjunction with the best overall score and favor choices with
    the best local candidate scores (if some candidates have equal scores).
```

- Viable overloads include:
  - non-disfavored
  - non-disabled
  - available
  - non-generic (with current exception to SIMD)

Resolves: rdar://60347805
Resolves: rdar://74387235
Resolves: rdar://78845822
Resolves: rdar://23682605
Resolves: rdar://18994321
Resolves: rdar://107263264
Resolves: rdar://135523718

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","Shockingly (to me), I just tried this in present-day Swift, and in fact it **does** select the `<T: FloatingPoint>` overload:

```swift
func test<T: FloatingPoint>(_: T) { print(""Hi"") }
func test<T: Numeric>(_: T) { print(""Bye"") }

test(42) // ""Hi""
``` Yeah, this is due to a hack that compares two (!) generic overloads without accounting for arguments, add a third and you'd get `<T: Numeric>` selected i.e.:

```swift
func test<T: FloatingPoint>(_: T) { print(""Hi"") }
func test<T: Numeric>(_: T) { print(""Bye"") }
func test(_: String) {}

test(42)
```

Because the hack is no longer applied."
77140,2024-10-21T12:02:15Z,2024-12-18T16:29:47Z,MAJKFL,14,14,17,886,12,4,1,[],791188.0,0,5027252.0,0,0,0,0,819634.684545,,8,17,0,False,"['DougGregor', 'MAJKFL']","https://github.com/swiftlang/swift-syntax/pull/2883

@swift-ci please build toolchain https://github.com/swiftlang/swift-syntax/pull/2883

@swift-ci please smoke test swiftlang/swift-syntax#2883

@swift-ci please build toolchain @swift-ci Please test @swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2883

@swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2883

@swift-ci Please smoke test Windows @swift-ci Please smoke test @swift-ci Please smoke test Windows @swift-ci Please smoke test @swift-ci please test Windows @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke testI'm really excited about SwiftLexicalLookup, I just have some minor nitpicks This is excellent. I have one request, though: can you add a test that demonstrates that this experimental mode is working? It doesn't have to be comprehensive, but it should have some nontrivial Swift code in it and use `%target-typecheck-verify-swift -enable-experimental-feature UnqualifiedLookupValidation`. That will make sure this functionality doesn't regress based on other changes to the compiler code base.

Over time, we can add this experimental feature to more places to improve our testing coverage.","I'm really excited about SwiftLexicalLookup, I just have some minor nitpicks This is excellent. I have one request, though: can you add a test that demonstrates that this experimental mode is working? It doesn't have to be comprehensive, but it should have some nontrivial Swift code in it and use `%target-typecheck-verify-swift -enable-experimental-feature UnqualifiedLookupValidation`. That will make sure this functionality doesn't regress based on other changes to the compiler code base.

Over time, we can add this experimental feature to more places to improve our testing coverage.","This PR introduces a function used to validate output of `SwiftLexicalLookup` lookup against `ASTScope` unqualified lookup. It’s part of the GSoC project I worked on with @DougGregor. The goal is to be able to automatically compare outputs of the two implementations, run it for large amounts of source files and fix any discrepancies to bring the new implementation closer to the current one. To perform validation, use `-enable-experimental-feature UnqualifiedLookupValidation`.

Example output of a failed validation for a file from the Swift standard library:
```
-----> Lookup started at: 1706:7 (""debugPrint"") finishInSequentialScope: false
     |           ASTScope           |      SwiftLexicalLookup
> ✅ |          k 1699:10           |          k 1699:10
> ✅ |          v 1699:13           |          v 1699:13
> ❌ |         first 1698:9         |         type 1690:18
> ❌ |        result 1697:9         |         self 1689:17
> ❌ |         type 1690:18         |         ↕️ V 1689:49
> ❌ |         self 1689:17         |         ↕️ K 1689:46
> ℹ️ | Omitted SwiftLexicalLookup name: Self 1683:1
> ❌ |          V 1689:49           |      Look memb: 1684:11
> ❌ |          K 1689:46           |            -----
> ℹ️ | Omitted ASTScope name: K 1689:46
> ℹ️ | Omitted ASTScope name: V 1689:49
> ❌ | End here: Look memb: 1684:11 |            -----
```

This PR depends on [PR 2883](https://github.com/swiftlang/swift-syntax/pull/2883) in `swift-syntax` that brings `#if` handling through `SwiftIfConfig` to `SwiftLexicalLookup`.","Nit: we typically put the ) on the same line and : on the following. @gottesmm can also help you set up clang-format if you'd rather fix stylistic issues automatically Perhaps the magic constant should be named, or you could use a bitfield or something I guess the old code has some funky behaviors :) Is this any different than `lengthDifference / 2`? `(lengthDifference + 1) / 2`? Yes, we've encountered some really fun behavior of `ASTScope` when working on the library.

This particular case happens when looking up generic parameter from generic parameter clause which is part of a function or subscript or the lookup is started within the clause:
```swift
func foo<A, B: Int>(a: A, b: B) {
  print(a, b)
}

```
`ASTScope` for some reason decides to first introduce generic parameters in wrong order just to introduce them correctly right afterwards :). Interestingly, similar behavior doesn't happen inside nominal type declarations.
```
-----> Lookup started at: 2:3 (""print"") finishInSequentialScope: false
     |           ASTScope           |      SwiftLexicalLookup      
> ✅ |            a 1:21            |            a 1:21            
> ✅ |            b 1:27            |            b 1:27            
> ✅ |            B 1:13            |           ↕️ B 1:13           
> ✅ |            A 1:10            |           ↕️ A 1:10           
> ℹ️ | Omitted ASTScope name: A 1:10
> ℹ️ | Omitted ASTScope name: B 1:13
```

With those comments, this validation function slowly becomes a documentation of ""weird"" `ASTScope` behavior. It might be necessary to revisit some of those heuristics in the future if it turns out there's a valid reason for this behavior and we should actually adjust `SwiftLexicalLookup`. That's why I tried to be more explicit in this part of the validation algorithm. Thanks for the suggestion, I've changed it to integer division. Thanks for the suggestion, this is much more elegant and performant. I changed it. This is a good idea. I documented those on the Swift side, but forgot about explaining them here. I moved `0b10` to a constant `shouldLookInMembers` and also renamed `result` to `endOfLookup`. Thank you for pointing this out! I manually run clang-format now for this part of the file. Is there maybe a way to automate this process and run with every commit or just run it on my changes? This will trip us up with Visual C++ because the calling convention for a class with a user-defined constructor is different from one without. I think you can add a dummy constructor outside of the `USED_IN_CPP_SOURCE` to get consistent behavior, e.g.,

```
BridgedConsumedLookupResult(void* _Nullable, void* _Nullable, int) { } // DO NOT CALL
```

 Even an empty default constructor will work, that's probably better:

```
BridgedConsumedLookupResult() { }
```
 The ideal way of doing this would be using `BRIDGED_INLINE` by declaring the constructor here and defining it in ASTBridgingImpl.h, see e.g the BridgedDeclBaseName constructor below. This avoids the need for `USED_IN_CPP_SOURCE`. Thank you for the suggestion @hamishknight! I removed the dummy constructor with `USED_IN_CPP_SOURCE` and moved the definition to `ASTBridgingImpl.h`."
77938,2024-12-03T22:31:55Z,2024-12-18T16:29:12Z,andrurogerz,12,30,21,838,17,3,2,[],41910.0,0,1274237.0,0,0,0,0,819669.882367,,1,21,0,False,"['andrurogerz', 'compnerd', 'DougGregor', 'al45tair']","The ELF code should probably not be here; we should share (and if need be extend) the existing ELF reading code in `stdlib/public/Backtracing` (which is going to move to `stdlib/public/RuntimeModule` when I get enough time to finish working on that).

(I know @weissi was encouraging me to move it out into a separate package, which probably does make sense also. But having two sets of it doesn't.) > The ELF code should probably not be here; we should share (and if need be extend) the existing ELF reading code in `stdlib/public/Backtracing` (which is going to move to `stdlib/public/RuntimeModule` when I get enough time to finish working on that).

@al45tair thanks for pointing out the duplication here. I took a quick look at stdlib/public/Backtracing/Elf.swift and I think it has the functionality needed by swift-inspect for symbol lookup. Do you have any pointers on how share it between the projects? I'm new to Swift and am not sure how to go about that. Thank you @compnerd, @mikeash, and @al45tair for the feedback. I believe I have addressed the bulk of your comments.

I have revised the ELF parsing code to be as small as possible: it contains only what is required for loading symbol tables from ELF64 files. Dropping ELF32 (which wasn't supported yet for other reasons) simplified it quite a bit. Since there is no clear way to share the ELF parsing code with the `swift/stdlib/public/Backtracing` library right now, I have added a TODO to the new `ElfFile.swift` file indicating it should be replaced in the future (specifically if/when the internal ELF code is refactored to a public location. @al45tair do you have any additional thoughts on this PR? It seems worth the minimal code duplication of ELF parsing (I've reduced it to a single 160 line source file) to enable swift-inspect support for Linux and Android (coming next). It can eventually be updated to share the ELF code with the backtrace library if that gets extracted to its own foundation library. @andrurogerz I'm OK with it if Mike is; the duplication is something we should aim to remove in the medium to long term, to avoid having to maintain two sets of ELF code, but I have no objection to this going in. @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci please test @swift-ci please smoke test @swift-ci please smoke test Hm, the Windows test failure doesn't look like it could have been caused by this PR @swift-ci please smoke test WindowsI left a few comments, didn't look too deeply into the Linux-specific parts as I don't know that stuff, but it looks great overall. One more tiny suggestion, looking good!","I left a few comments, didn't look too deeply into the Linux-specific parts as I don't know that stuff, but it looks great overall. One more tiny suggestion, looking good!","## Purpose
Implement support for Linux in the `swift-inspect` tool. Omits support for heap iteration, for which there is no standard GNU/Linux mechanism (see #63576). Currently supports only 64-bit processes, though minimal changes are required to support 32-bit (elf32 parsing is included).

## Overview
* Extends the existing swift-inspect implementation to support Linux along side the existing Darwin and Windows implementations
* Excludes `DumpArray` functionality from Linux builds (does not work without heap iteration)
* Adds a new `SwiftInspectLinux` build target with the Linux-specific implementation:
  * Remote process reading using `process_vm_readv`
  * Memory map parsing of `/proc/<pid>/maps`
  * Aux vector parsing of `/proc/<pid>/auxv` used to locate debugger link map
  * Remote process debugger link map parsing to generate the list of modules loaded within the target process
  * Minimal elf32 and elf64 parsing required to read string and symbol tables from executable files
* Adds a new `SwiftInspectLinux/SystemHeaders` target to pull-in the required Linux C headers
* Updates `README.md` to reflect Linux support

## Background
I have a locally working implementation of `swift-inspect` for Android, and I realized that, other than the heap iteration implementation, it is not Android-specific. This PR extracts the GNU/Linux functionality into stand-alone Linux support.

Linux support has one glaring omission: heap iteration is not supported. There is no standard GNU/Linux heap iteration interface. Further, Linux programs often use alternative heap implementations (scudo, jemalloc, mimalloc, etc) so parsing raw heap structures gets complex (see see #63576). Fortunately, only the `dump-arrays` and `dump-concurrency` commands rely on heap iteration-- the other commands work fine without it.

## Validation
* Built with `swift build` on Fedora Linux (6.11.8-200.fc40.x86_64)
* Manually tested all commands against a trivial command-line Swift app run with `SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION=1` and `SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING=1`
* Confirmed backtraces are printed with the `--backtrace` and `--backtrace-long` arguments.

## Note to reviewers
This is my first non-trivial Swift project, so feedback on Swift style/patterns/etc is appreciated.","Can we use `systemLibrary` to avoid the `-Xswiftc -lswiftRemoteMirror`? I think that we should also avoid the `-Xswiftc -lswiftRemoteMirror` at least in favour of `-Xlinker -lswiftRemoteMirror` or `-Xclang-linker -lswiftRemoteMirror`. Why is this part of `AuxVec`? Can we use a module map to import `linux/auxv.h` instead? This seems unnecessarily fragile. Can you change this to use [`Data(contentsOf:options:)`](https://developer.apple.com/documentation/foundation/nsdata/1407864-init)? Hmm, this can potentially be compiled out, can we change this to `precondition`? I think that it would be better to sink this into the `withUnsafeBytes` view and return the dictionary directly. Please define these types in a C header as we cannot guarantee the type layout in Swift. Likewise Please use `ELF` instead of `Elf`. However, some of these feel like they can be replaced with Foundation error values? Does it make sense to use `Data(contentsOf:options:)` to use a mmap'ed view? Is this safe? There is no guarantee that there is a string table in the binary. Please define these in a C header Likewise Likewise Maybe compress this to `!os(Linux)`? I wrote it that way originally, but it always returns empty `Data` object. I also tried `String(contentsOfFile:` and that gave back an empty string. I didn't look at the implementations, but I suspect the issue is because those methods `stat` the file to get the size whereas `FileHandle.readToEnd` just calls `read` until it gets eof. eh, I have it throw that error when `load()` fails but I can just as easily replace `throws` with an optional result Sure, I'll drop the `enum`. Good catch; I meant to replace the assert. Can I move this to a C header? It is an extension to the existing `Elf32_Phdr` C struct which is imported via `elf.h`. My goal with this file (and the other `Elf*.swift` files) was to create a generic way of accessing both elf32 and elf64 structs, and this protocol + extending of the C structs pattern is what I came up with. Is there a better way to achieve the same? This should definitely be `-Xlinker -lswiftRemoteMirror` instead of using `-Xswiftc`.

I don't see how I can add a dependency on `SwiftRemoteMirror` as a `systemLibrary` since it is in a different location of the source tree. This bit is safe because it won't even get here if there's no string table to load, but its a fair point that an Elf file may not have symbol or string table sections.  fwiw, I implemented the `loadSymbolTable` function to return an empty symbol table if it doesn't find a symtab or dynsym section to load symbols from And to be totally clear: `stat(2)` on the file `/proc/<pid>/auxv` reports a size of 0 bytes. You can confirm this with `ls -l /proc/self/` and observe most of the procfs files are 0 bytes. I can if you want that, but I prefer explicit file i/o over `mmap` because it allows explicit error handling. They both share pages in the page cache so isn't going to perform significantly better than the other. I will change `Elf` -> `ELF` in the errors. I plan to keep the `Elf` naming convention for data structures to match definitions in `elf.h`. Let me know if you disagree with that.

More generally, I made my own error types because I didn't see general purpose ones. Digging a bit further now, I still only see `NSError`, `CFError`, and `CocoaError`, none of which seems fit for purpose here. I could probably use `POSIXError` in a few places. Am I overlooking something obvious? Typo, `loace` -> `locate`. Can bump the end year to 2024 here. Might be good to have a brief comment here about how `Data(contentsOf:)` doesn't work due to the `stat` issue. I can imagine someone trying to ""improve"" this and being sad. Should a count of 0 produce `nil` versus an empty dictionary? Not sure if this aux vector thing is ever supposed to be empty."
78230,2024-12-17T03:43:55Z,2024-12-18T15:27:41Z,fahadnayyar,4,3,1,112,5,3,3,[],56415.0,0,128626.0,0,0,0,0,823362.805322,,5,1,0,False,"['fahadnayyar', 'j-hui']","By the way, without your patch, what is the behavior of the Swift compiler when you try to compile ObjC code annotated with `SWIFT_RETURNS_{,UN}RETAINED`? Does it lead to memory leaks, due to the caller assuming it does not own the returned value?

If so, you could clarify your commit message to specify that this patch _fixes_ support for `SWIFT_RETURNS_{,UN}RETAINED` in ObjC. @swift-ci please smoke test > By the way, without your patch, what is the behavior of the Swift compiler when you try to compile ObjC code annotated with `SWIFT_RETURNS_{,UN}RETAINED`? Does it lead to memory leaks, due to the caller assuming it does not own the returned value?
> 
> If so, you could clarify your commit message to specify that this patch _fixes_ support for `SWIFT_RETURNS_{,UN}RETAINED` in ObjC.

`SWIFT_RETURNS_{,UN}RETAINED` is a new feature. It is implemented as a `swift_attr` so before this patch also, people could've used these annotations of ObjC APIs. But that would have been a no-op (same behaviour as without these annotations). We are not changing the default behavior (for unannotated case) in this patch which is returning the value as unowned (+0). It can lead to memory leaks if used incorrectly but that problem always existed when returning `SWIFT_SHARED_REFERENCE` types from ObjC APIs. With these new annotations developers could be more mindful about ownership semantics and also explicitly specify that to the swift compiler. @swift-ci please smoke testThe code changes look good to me. I only have some comments about testing inline.  This patch looks good to me, though as @Xazax-hun suggested you should split out the ObjC/Foundation test code into a separate test so that it only runs on supported platforms. LGTM!","The code changes look good to me. I only have some comments about testing inline.  This patch looks good to me, though as @Xazax-hun suggested you should split out the ObjC/Foundation test code into a separate test so that it only runs on supported platforms. LGTM!","Extending https://github.com/swiftlang/swift/pull/75897 so that the new annotations  `SWIFT_RETURNS_(UN)RETAINED` can be used on ObjC APIs as well.

rdar://135360972","Nit: missing new line at the end of the file. Once we start including foundation, this test can only run on platforms/environments that support objc_interop. I think it might be better to put the obj-c related tests in a new file, so the C++ tests can run in all platforms/environments, even when foundation is not available. nit: if you care for minimizing the diff + making this a one-liner:

```suggestion
    if (tl.getLoweredType().isForeignReferenceType())
      return getCxxRefConventionWithAttrs(tl, Method).value_or(ResultConvention::Unowned);
```"
77864,2024-11-28T05:19:03Z,2024-12-18T13:37:44Z,CrazyFanFan,2,0,1,350,3,1,1,['c++ interop'],38059.0,0,1757921.0,0,0,0,0,829960.235374,,3,1,0,False,['egorzhdan'],"@swift-ci please test @swift-ci please testLGTM, thank you @CrazyFanFan!","LGTM, thank you @CrazyFanFan!","This pull request introduces key enhancements to CxxDictionary:
- Merging Methods:
    - Adds `mutating merge` and `merging` methods for sequences and dictionaries.
- Grouping Initializer:
    - Adds `init(grouping:by:)` initializer.
- Defaulted Subscript:
    - Adds subscript with default value support.
- Value Removal:
    - Introduces `removeValue(forKey:)` method.",
77617,2024-11-14T16:35:20Z,2024-12-18T13:53:16Z,Xazax-hun,4,2,1,128,2,2,1,['c++ interop'],77405.0,0,2927878.0,0,0,0,0,829026.287187,,4,1,0,False,['Xazax-hun'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test windows @swift-ci please smoke test,,"Import it as lifetime dependencies.

rdar://137671377
","I switched to `silgen` from `sil` because some SIL passes still crash on the SIL that we generate. This way I can avoid running the problematic passes and still test that we generate the SIL we want. That being said, we should switch back to `sil` as soon as the underlying problem is fixed (which should be soonish).  This is now solved. "
77989,2024-12-05T19:58:05Z,2024-12-18T13:30:37Z,egorzhdan,3,0,3,50,6,2,2,['c++ interop'],201.0,0,1099955.0,0,0,0,0,830386.260369,,0,3,0,False,['egorzhdan'],"Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1748

@swift-ci please test Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1748

@swift-ci please test Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1748

@swift-ci please test",,"**Explanation**: This makes sure that the compiler does not emit `-enable-experimental-cxx-interop`/`-cxx-interoperability-mode` flags in `.swiftinterface` files. Those flags were breaking explicit module builds. The module can still be rebuilt from its textual interface if C++ interop was enabled in the current compilation.
**Scope**: This alters the logic that emits and reads compiler flags from `.swiftinterface` files.
**Risk**: Medium, this changes the textual interfaces emitted by the compiler, which can theoretically have adverse effects on dependencies of the current module.
**Testing**: This is covered by compiler tests.
**Issue**: rdar://140203932
**Reviewer**: @artemcm @Xazax-hun 

Original PR: https://github.com/swiftlang/swift/pull/77754",
78115,2024-12-11T16:23:36Z,2024-12-18T13:20:41Z,Xazax-hun,6,3,1,22,4,2,1,['c++ interop'],8195.0,0,593827.0,0,0,0,0,830983.803636,,9,1,0,False,"['Xazax-hun', 'DougGregor']","@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test > The C++ span should be a non-escapable type but is imported as escapable for backward compatibility reason.

I have a different take on this: C++'s span has no notion of lifetime safety, so it's just `@unsafe` and non-escapable can't really change that. We can use lifetime information layered on top to wrap it up or translate it into a non-escapable type (`Span` or `MutableSpan`) on the Swift side. @swift-ci please smoke test > I have a different take on this: C++'s span has no notion of lifetime safety, so it's just @unsafe

Updated the PR description. I think this is a fair way to describe this as of now. But I am not confident yet about the long term vision. While we can generate convenience overloads for APIs taking/returning `std::span` directly, we might not be able to do that for more complicated cases like APIs returning a `std::vector<std::span<int>>`. It would be great to be able to import APIs like that safely (if they are correctly annotated), and I am not sure yet if the right path for that is more elaborate wrappers generated by macros or importing `std::span` as non-escapable with lifetime dependencies. ",,"The C++ span is an unsafe type, so this PR makes sure std::span is imported as such. In the future, we plan to generate safe overloads using Swift's Span and that will be the preferred way of using the API.
","Would this work with two levels of typealiases, e.g.
```cpp
using SpanOfInt = std::span<int>;
using AlsoSpanOfInt = SpanOfInt;
``` Good point! I should probably make this recursive because this would also not catch if the underlying type itself is an associated type of an unsafe type.  Looks like this is not the right fix. I will talk to Doug. "
78219,2024-12-16T17:01:05Z,2024-12-18T12:57:15Z,Xazax-hun,5,1,1,23,4,1,1,['c++ interop'],12.0,0,158171.0,0,0,0,0,832390.821808,,2,1,0,False,['Xazax-hun'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test windows @swift-ci please smoke test linux @swift-ci please smoke test linuxLGTM,LGTM,"This is not supported, of course. But now, instead of an assertion failure we properly mark the declaration as unavailable.

Fixes #78190.

rdar://141492654
",Minor: missing newlines in test files
78238,2024-12-17T13:03:24Z,2024-12-18T12:48:56Z,egorzhdan,1,0,1,21,2,2,2,['c++ interop'],9.0,0,85533.0,0,0,0,0,832891.281015,,0,1,0,False,['egorzhdan'],@swift-ci please test,,"**Explanation**: When a C++ foreign reference type is conformed to a Swift protocol via a Swift extension, trying to cast `any MyProtocol` to the foreign reference type crashes the runtime. This was because `selectCasterForDest` wasn't handling C++ foreign reference types, and we were hitting `swift_unreachable`.
**Scope**: This changes the dynamic casting behavior for foreign reference types in the Swift runtime.
**Risk**: Low, this only changes a code path that is specific to foreign reference types.
**Testing**: Added compiler tests.
**Issue**: rdar://141227849
**Reviewer**: @mikeash @tbkka 

Original PR: https://github.com/swiftlang/swift/pull/78223",
78237,2024-12-17T12:49:25Z,2024-12-18T12:47:54Z,egorzhdan,1,0,1,232,10,2,2,['c++ interop'],7.0,0,86311.0,0,0,0,0,832953.433521,,0,1,0,False,['egorzhdan'],@swift-ci please test,,"**Explanation**:  In C++, a primary base class that is placed in the beginning of the type's memory layout isn't always the type that is the first in the list of bases – the base types might be laid out in memory in a different order.
This change makes sure that IRGen handles base types of C++ structs in the correct order.
**Scope**:  This fixes an assertion in asserts-enabled compilers, and an out-of-memory error in asserts-disabled compilers. The issue was happening for both value types and foreign reference types. This change also includes a small refactoring to reuse the logic between the two code paths.
**Risk**: Low, this only applies to C++ structs, and the behavior is only altered for structs with multiple inheritance.
**Testing**: Added compiler tests.
**Issue**: rdar://140848603
**Reviewer**: @rjmccall @j-hui @Xazax-hun 

Original PR: https://github.com/swiftlang/swift/pull/78166",
77892,2024-12-02T09:06:40Z,2024-12-18T12:25:46Z,AnthonyLatsis,3,0,1,71,5,1,1,[],1214154.0,0,1394349.0,0,0,0,0,834280.464485,,2,1,0,False,['AnthonyLatsis'],@swift-ci please smoke test macOS @swift-ci please test source compatibility release @swift-ci please smoke test,,"Fixes #60619, rdar://125520325.",
78252,2024-12-17T19:47:41Z,2024-12-18T11:34:05Z,egorzhdan,1,0,1,23,2,1,1,['c++ interop'],9.0,0,56786.0,0,0,0,0,837384.240179,,2,1,0,False,['egorzhdan'],@swift-ci please test,,"This is a follow-up to 84ae5fbe.

rdar://141227849

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78256,2024-12-17T21:37:27Z,2024-12-18T01:45:50Z,hamishknight,1,0,1,1,1,1,1,[],12.0,0,44858.0,0,0,0,0,842726.7423,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"
This test relies on `_swift_task_deinitOnExecutor`, which is only available in newer runtimes.",
78233,2024-12-17T08:56:53Z,2024-12-18T05:39:31Z,eeckstein,3,0,1,243,4,1,1,[],26.0,0,74562.0,0,0,0,0,858656.801971,,2,1,0,False,['eeckstein'],@swift-ci test @swift-ci please test source compatibility @swift-ci benchmark,,"This is part of fixing regressions when enabling OSSA modules:
rdar://140229560",
78234,2024-12-17T10:36:48Z,2024-12-18T05:39:12Z,eeckstein,2,0,1,6,1,0,0,[],16.0,0,68548.0,0,0,0,0,858677.375717,,1,1,0,False,['eeckstein'],@swift-ci smoke test @swift-ci smoke test linux,,"There are not pre-specialized parts of the stdlib in embedded mode.

Fixes a compiler crash.
Unfortunately I con't have a test case for this.

https://github.com/swiftlang/swift/issues/78167
",
78232,2024-12-17T07:38:27Z,2024-12-18T05:38:06Z,eeckstein,6,0,1,69,5,1,1,['swift 6.1'],44.0,0,79181.0,0,0,0,0,858746.022158,,1,1,0,False,['eeckstein'],@swift-ci test @swift-ci test macos windows @swift-ci test @swift-ci test @swift-ci test @swift-ci test windows,,"* **Explanation**: Fixes a miscompile caused by C unions containing a pointer. C unions are imported as opaque types. Therefore we have to assume that a union contains a pointer. This is important for alias analysis to catch escaping pointers via C unions.
* **Risk**: Low. It is a simple change which makes alias analysis more conservative for C unions.
* **Testing**: Tested by a test case.
* **Issue**: rdar://141555290
* **Reviewer**:  @jckarter
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/78221
",
78260,2024-12-17T23:05:23Z,2024-12-18T04:59:32Z,meg-gupta,1,2,2,10,3,2,1,[],1189.0,0,21249.0,0,0,0,0,861062.039587,,1,2,0,False,['meg-gupta'],@swift-ci test,,"This was previously disabled because passing borrow introducers as branch operands was considered a reborrow. Now that we have removed this restriction, enable this.  

Also piggybacking a build change to skip building xros in macos_only preset",Intentional? Yes! Piggybacking with the optimizer change.
78229,2024-12-17T02:00:11Z,2024-12-18T00:33:28Z,omochi,3,0,1,9,2,1,1,[],27.0,0,84290.0,0,0,0,0,873934.499773,,2,1,0,False,"['nate-chandler', 'omochi']",@swift-ci please smoke test @swift-ci please smoke test linux platform Thank you!,,"I reported a compiler crash in issue #77970.
Upon further investigation, I was able to narrow down the conditions under which this issue occurs. The crash happens when combining *variadic generics*, *tuples*, and *optionals*, as shown below:

```swift
struct VariadicOptionalTuple<each V> {
    var v: (repeat (each V)?)
}

func useVOT(_: VariadicOptionalTuple<String>) {}
```

In this example, when the `LoadableByAddress` pass is applied to `useVOT`, the type lowering process for `VariadicOptionalTuple<String>` triggers the problem internally.

In `TypeConverter::visitAggregateLeaves`, `origTy` is as follows:

```
AP::Type<each τ_0_0 where repeat each τ_0_0 : Copyable, repeat each τ_0_0 : Escapable>@<Pack{String}>((tuple_type num_elements=1
  (tuple_type_elt
    (pack_expansion_type
      (pattern=bound_generic_enum_type decl=""Swift.(file).Optional""
        (generic_type_param_type depth=0 index=0 param_kind=pack))
      (count=generic_type_param_type depth=0 index=0 param_kind=pack))))
)
```

However, `ty` is:

```
(bound_generic_enum_type decl=""Swift.(file).Optional""
  (struct_type decl=""Swift.(file).String""))
```

Since their shapes do not match, an error occurs in the subsequent processing.

This patch fixes the issue by peeling off the single-element tuple using `getVanishingTupleElementPatternType`, similar to how other parts of the type lowering process handle this case.

Additionally, this patch adds a test case for the aforementioned crash.
Without applying this patch, the test crashes as follows:

<details>

```
+ /opt/homebrew/opt/python@3.13/bin/python3.13 /Users/omochi/swift/swift/utils/PathSanitizingFileCheck --allow-unused-prefixes --sanitize BUILD_DIR=/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64 --sanitize SOURCE_DIR=/Users/omochi/swift/swift --use-filecheck /Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/llvm-macosx-arm64/bin/FileCheck --color /Users/omochi/swift/swift/test/IRGen/variadic_generic_types.swift
Assertion failed: (0 && ""Bad base type""), function getContextSubstitutions, file TypeSubstitution.cpp, line 818.
Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.
Stack dump:
0.	Program arguments: /Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend -target arm64-apple-macosx13.0 -module-cache-path /Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/swift-test-results/arm64-apple-macosx13.0/clang-module-cache -sdk /Applications/Xcode16.2-rc.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.2.sdk -swift-version 4 -define-availability ""SwiftStdlib 9999:macOS 9999, iOS 9999, watchOS 9999, tvOS 9999"" -define-availability ""SwiftStdlib 5.0:macOS 10.14.4, iOS 12.2, watchOS 5.2, tvOS 12.2"" -define-availability ""SwiftStdlib 5.1:macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0"" -define-availability ""SwiftStdlib 5.2:macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4"" -define-availability ""SwiftStdlib 5.3:macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0"" -define-availability ""SwiftStdlib 5.4:macOS 11.3, iOS 14.5, watchOS 7.4, tvOS 14.5"" -define-availability ""SwiftStdlib 5.5:macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0"" -define-availability ""SwiftStdlib 5.6:macOS 12.3, iOS 15.4, watchOS 8.5, tvOS 15.4"" -define-availability ""SwiftStdlib 5.7:macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0"" -define-availability ""SwiftStdlib 5.8:macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4"" -define-availability ""SwiftStdlib 5.9:macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0"" -define-availability ""SwiftStdlib 5.10:macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1"" -define-availability ""SwiftStdlib 6.0:macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0"" -define-availability ""SwiftStdlib 6.1:macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, visionOS 9999"" -typo-correction-limit 10 -emit-ir -primary-file /Users/omochi/swift/swift/test/IRGen/variadic_generic_types.swift -target arm64-apple-macosx14.0
1.	Swift version 6.2-dev (LLVM be8c96d78337932, Swift 0bbaa3519b62071)
2.	Compiling with effective version 4.1.50
3.	While evaluating request IRGenRequest(IR Generation for file ""/Users/omochi/swift/swift/test/IRGen/variadic_generic_types.swift"")
4.	While evaluating request ExecuteSILPipelineRequest(Run pipelines { IRGen Preparation } on SIL for variadic_generic_types)
5.	While running pass #12 SILModuleTransform ""LoadableByAddress"".
6.	While converting type 'VariadicOptionalTuple<String>' (declared at [/Users/omochi/swift/swift/test/IRGen/variadic_generic_types.swift:35:1 - line:37:1] RangeText=""struct VariadicOptionalTuple<each V> {
    var v: (repeat (each V)?)
"")
 #0 0x00000001063e3814 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x105b37814)
 #1 0x00000001063e1dd0 llvm::sys::RunSignalHandlers() (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x105b35dd0)
 #2 0x00000001063e3e58 SignalHandler(int) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x105b37e58)
 #3 0x000000019ae4c184 (/usr/lib/system/libsystem_platform.dylib+0x180484184)
 #4 0x000000019ae16f70 (/usr/lib/system/libsystem_pthread.dylib+0x18044ef70)
 #5 0x000000019ad23908 (/usr/lib/system/libsystem_c.dylib+0x18035b908)
 #6 0x000000019ad22c1c (/usr/lib/system/libsystem_c.dylib+0x18035ac1c)
 #7 0x00000001064f4270 swift::TypeBase::getContextSubstitutions(swift::DeclContext const*, swift::GenericEnvironment*) (.cold.31) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x105c48270)
 #8 0x00000001022cf80c swift::TypeBase::getContextSubstitutions(swift::DeclContext const*, swift::GenericEnvironment*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x101a2380c)
 #9 0x00000001022cf8bc swift::TypeBase::getContextSubstitutionMap(swift::DeclContext const*, swift::GenericEnvironment*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x101a238bc)
#10 0x00000001022cfcb0 swift::TypeBase::getTypeOfMember(swift::ValueDecl const*, swift::Type) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x101a23cb0)
#11 0x00000001018a6800 swift::Lowering::AbstractionPattern::unsafeGetSubstFieldType(swift::ValueDecl*, swift::CanType, swift::SubstitutionMap) const (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100ffa800)
#12 0x0000000101970704 swift::Lowering::TypeConverter::visitAggregateLeaves(swift::Lowering::AbstractionPattern, swift::CanType, swift::TypeExpansionContext, std::__1::function<bool (swift::CanType, swift::Lowering::AbstractionPattern, swift::ValueDecl*, std::__1::optional<unsigned int>)>, std::__1::function<bool (swift::CanType, swift::Lowering::AbstractionPattern, swift::ValueDecl*, std::__1::optional<unsigned int>)>) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1010c4704)
#13 0x0000000101970ac4 swift::Lowering::TypeConverter::verifyLexicalLowering(swift::Lowering::TypeLowering const&, swift::Lowering::AbstractionPattern, swift::CanType, swift::TypeExpansionContext) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1010c4ac4)
#14 0x000000010196f660 swift::Lowering::TypeConverter::getTypeLowering(swift::Lowering::AbstractionPattern, swift::Type, swift::TypeExpansionContext) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1010c3660)
#15 0x00000001019642d8 swift::SILType::getFieldType(swift::VarDecl*, swift::Lowering::TypeConverter&, swift::TypeExpansionContext) const (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1010b82d8)
#16 0x00000001019632c0 swift::SILType::getFieldType(swift::VarDecl*, swift::SILModule&, swift::TypeExpansionContext) const (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1010b72c0)
#17 0x0000000100fc1c04 swift::irgen::TypeConverter::convertStructType(swift::TypeBase*, swift::CanType, swift::StructDecl*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100715c04)
#18 0x0000000100feae34 swift::irgen::TypeConverter::convertAnyNominalType(swift::CanType, swift::NominalTypeDecl*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x10073ee34)
#19 0x0000000100fe9a94 swift::irgen::TypeConverter::convertType(swift::CanType) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x10073da94)
#20 0x0000000100fe9440 swift::irgen::TypeConverter::getTypeEntry(swift::CanType) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x10073d440)
#21 0x00000001010938e4 isLargeLoadableType(swift::GenericEnvironment*, swift::SILType, swift::irgen::IRGenModule&) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1007e78e4)
#22 0x0000000101092db4 LargeSILTypeMapper::getNewSILType(swift::GenericEnvironment*, swift::SILType, swift::irgen::IRGenModule&) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1007e6db4)
#23 0x00000001010a49c8 (anonymous namespace)::LoadableStorageAllocation::allocateLoadableStorage() (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1007f89c8)
#24 0x000000010109484c (anonymous namespace)::LoadableByAddress::run() (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1007e884c)
#25 0x00000001014e16cc swift::SILPassManager::runModulePass(unsigned int) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c356cc)
#26 0x00000001014e3be8 swift::SILPassManager::execute() (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c37be8)
#27 0x00000001014de268 swift::SILPassManager::executePassPipelinePlan(swift::SILPassPipelinePlan const&) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c32268)
#28 0x00000001014de204 swift::ExecuteSILPipelineRequest::evaluate(swift::Evaluator&, swift::SILPipelineExecutionDescriptor) const (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c32204)
#29 0x0000000101531498 swift::SimpleRequest<swift::ExecuteSILPipelineRequest, std::__1::tuple<> (swift::SILPipelineExecutionDescriptor), (swift::RequestFlags)1>::evaluateRequest(swift::ExecuteSILPipelineRequest const&, swift::Evaluator&) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c85498)
#30 0x00000001014feb48 swift::ExecuteSILPipelineRequest::OutputType swift::Evaluator::getResultUncached<swift::ExecuteSILPipelineRequest, swift::ExecuteSILPipelineRequest::OutputType swift::evaluateOrFatal<swift::ExecuteSILPipelineRequest>(swift::Evaluator&, swift::ExecuteSILPipelineRequest)::'lambda'()>(swift::ExecuteSILPipelineRequest const&, swift::ExecuteSILPipelineRequest::OutputType swift::evaluateOrFatal<swift::ExecuteSILPipelineRequest>(swift::Evaluator&, swift::ExecuteSILPipelineRequest)::'lambda'()) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c52b48)
#31 0x00000001014de458 swift::executePassPipelinePlan(swift::SILModule*, swift::SILPassPipelinePlan const&, bool, swift::irgen::IRGenModule*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100c32458)
#32 0x0000000101001ef8 swift::IRGenRequest::evaluate(swift::Evaluator&, swift::IRGenDescriptor) const (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100755ef8)
#33 0x0000000101065454 swift::GeneratedModule swift::SimpleRequest<swift::IRGenRequest, swift::GeneratedModule (swift::IRGenDescriptor), (swift::RequestFlags)17>::callDerived<0ul>(swift::Evaluator&, std::__1::integer_sequence<unsigned long, 0ul>) const (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x1007b9454)
#34 0x0000000101009464 swift::IRGenRequest::OutputType swift::Evaluator::getResultUncached<swift::IRGenRequest, swift::IRGenRequest::OutputType swift::evaluateOrFatal<swift::IRGenRequest>(swift::Evaluator&, swift::IRGenRequest)::'lambda'()>(swift::IRGenRequest const&, swift::IRGenRequest::OutputType swift::evaluateOrFatal<swift::IRGenRequest>(swift::Evaluator&, swift::IRGenRequest)::'lambda'()) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x10075d464)
#35 0x0000000101003d90 swift::performIRGeneration(swift::FileUnit*, swift::IRGenOptions const&, swift::TBDGenOptions const&, std::__1::unique_ptr<swift::SILModule, std::__1::default_delete<swift::SILModule>>, llvm::StringRef, swift::PrimarySpecificPaths const&, llvm::StringRef, llvm::GlobalVariable**) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100757d90)
#36 0x0000000100b15f38 generateIR(swift::IRGenOptions const&, swift::TBDGenOptions const&, std::__1::unique_ptr<swift::SILModule, std::__1::default_delete<swift::SILModule>>, swift::PrimarySpecificPaths const&, llvm::StringRef, llvm::PointerUnion<swift::ModuleDecl*, swift::SourceFile*>, llvm::GlobalVariable*&, llvm::ArrayRef<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100269f38)
#37 0x0000000100b12c1c performCompileStepsPostSILGen(swift::CompilerInstance&, std::__1::unique_ptr<swift::SILModule, std::__1::default_delete<swift::SILModule>>, llvm::PointerUnion<swift::ModuleDecl*, swift::SourceFile*>, swift::PrimarySpecificPaths const&, int&, swift::FrontendObserver*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100266c1c)
#38 0x0000000100b1209c swift::performCompileStepsPostSema(swift::CompilerInstance&, int&, swift::FrontendObserver*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x10026609c)
#39 0x0000000100b1e118 withSemanticAnalysis(swift::CompilerInstance&, swift::FrontendObserver*, llvm::function_ref<bool (swift::CompilerInstance&)>, bool) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100272118)
#40 0x0000000100b13d40 performCompile(swift::CompilerInstance&, int&, swift::FrontendObserver*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100267d40)
#41 0x0000000100b13594 swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100267594)
#42 0x00000001008e5a30 swift::mainEntry(int, char const**) (/Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/bin/swift-frontend+0x100039a30)
#43 0x000000019aa94274 
FileCheck error: '<stdin>' is empty.
FileCheck command line:  /Users/omochi/swift/build/Ninja-RelWithDebInfoAssert/llvm-macosx-arm64/bin/FileCheck --allow-unused-prefixes --color /Users/omochi/swift/swift/test/IRGen/variadic_generic_types.swift

--

********************
********************
Failed Tests (1):
  Swift(macosx-arm64) :: IRGen/variadic_generic_types.swift

```
</details>",
78247,2024-12-17T17:55:16Z,2024-12-18T00:12:32Z,atrick,1,0,5,288,10,0,0,[],11.0,0,22639.0,0,0,0,0,878281.425586,,3,5,0,False,['atrick'],@swift-ci test,,"Fixes a correctness issue with unsafe addressors: `unsafeAddress` and `unsafeMutableAddress`. Previously, the resulting `Unsafe[Mutable]Pointer` did not depend on `self`, meaning that the compiler is allowed to destroy `self` before any uses of the pointer. This happens to be valid for `UnsafePointer.pointee` because, in that case, `self` does not have a lifetime anyway; the correctness burden was on the programmer to use `withExtendedLifetime` around all uses of `self`.

Now, unsafe addressors can be used for arbitrary `Self` types.

This also enables lifetime dependence diagnostics when the addressor points to a `~Escapable` type.

Addressors can now be used as an implementation of borrowed properties.
",
78231,2024-12-17T05:51:27Z,2024-12-18T00:47:26Z,meg-gupta,1,0,1,177,2,1,1,[],47176.0,0,68159.0,0,0,0,0,876190.463844,,1,1,0,False,['meg-gupta'],"@swift-ci test _Hoisting_ the bounds check operations should not move any uses _below_ lifetimes ends.

Looking at your examples, the problem seems to be that the array value is replaced with the operand of a `copy_value`. If this is not done, the resulting OSSA should be fine.","_Hoisting_ the bounds check operations should not move any uses _below_ lifetimes ends.

Looking at your examples, the problem seems to be that the array value is replaced with the operand of a `copy_value`. If this is not done, the resulting OSSA should be fine.","While hoisting `check_subscript` call, `isNativeTypeChecked` call is also created in the preheater .
The array value used in the `isNativeTypeChecked` may not be available if its lifetime had ended before (ossa only). Proactively set the array value of the `isNativeTypeChecked` call to the array value in the `check_subscript` call.

rdar://141630349

",
78236,2024-12-17T12:40:16Z,2024-12-17T19:22:54Z,omochi,3,0,1,1,1,1,1,[],4690.0,0,40702.0,0,0,0,0,879119.939445,,0,1,0,False,"['hamishknight', 'omochi']","We have a `.flake8` configuration file in the repo that configures this, could you edit that instead? @swift-ci please smoke test I overlooked the configuration file. I have fixed it to use this.Thanks! LGTM",Thanks! LGTM,"Using `swift-xcodegen` creates a build directory at `utils/swift-xcodegen/.build`.

When running `test/Python/python_lint.swift`, Python files inside the build directory are scanned, resulting in a large number of lint errors being reported.

This patch resolves the issue by specifying an option for the lint command to exclude the `.build` directory from being scanned.

The lint errors that were occurring are below.
Some parts have been truncated due to GitHub’s limitations.

<details>

```
FAIL: Swift(macosx-arm64) :: Python/python_lint.swift (1 of 1)
******************** TEST 'Swift(macosx-arm64) :: Python/python_lint.swift' FAILED ********************
Exit Code: 1

Command Output (stdout):
--
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:5:1: I100 Import statements are in the wrong order. 'import json' should be before 'import os'
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:10:1: I100 Import statements are in the wrong order. 'import errno' should be before 'import sys'
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:19:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:25:1: E305 expected 2 blank lines after class or function definition, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:30:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:39:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:44:89: E501 line too long (100 > 88 characters)
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:50:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:51:89: E501 line too long (95 > 88 characters)
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:55:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:56:89: E501 line too long (97 > 88 characters)
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:60:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:61:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:62:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:63:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:65:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:66:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:67:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:68:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:69:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:71:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:72:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:73:5: E121 continuation line under-indented for hanging indent
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:78:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:81:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:82:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:84:7: E121 continuation line under-indented for hanging indent
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:88:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:90:7: E121 continuation line under-indented for hanging indent
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:99:7: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:102:7: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:105:7: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:106:9: E121 continuation line under-indented for hanging indent
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:112:7: E114 indentation is not a multiple of 4 (comment)
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:113:7: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:114:9: E121 continuation line under-indented for hanging indent
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:117:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:120:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:122:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:123:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:124:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:125:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:127:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:129:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:130:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:131:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:133:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:136:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:137:3: E111 indentation is not a multiple of 4
./utils/swift-xcodegen/.build/checkouts/swift-driver/Utilities/build-script-helper.py:138:89: E501 line too long (98 > 88 characters)
...
./utils/swift-xcodegen/.build/checkouts/swift-tools-support-core/Utilities/build-script-helper.py:198:89: E501 line too long (109 > 88 characters)
./utils/swift-xcodegen/.build/checkouts/swift-tools-support-core/Utilities/build-script-helper.py:225:1: E302 expected 2 blank lines, found 1
./utils/swift-xcodegen/.build/checkouts/swift-tools-support-core/Utilities/build-script-helper.py:233:1: E305 expected 2 blank lines after class or function definition, found 1

--
Command Output (stderr):
--
RUN: at line 8: /opt/homebrew/opt/python@3.13/bin/python3.13 /Users/omochi/swift/swift/utils/python_lint.py
+ /opt/homebrew/opt/python@3.13/bin/python3.13 /Users/omochi/swift/swift/utils/python_lint.py
<unknown>:563: SyntaxWarning: invalid escape sequence '\U'
<unknown>:241: SyntaxWarning: invalid escape sequence '\s'
<unknown>:303: SyntaxWarning: invalid escape sequence '\p'

--

********************
********************
Failed Tests (1):
  Swift(macosx-arm64) :: Python/python_lint.swift
```
</details>

@hamishknight could you take a look at this patch?",
78243,2024-12-17T16:24:08Z,2024-12-17T21:50:00Z,hamishknight,1,0,1,160,4,0,0,[],9.0,0,19555.0,0,0,0,0,886835.66675,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Reverts swiftlang/swift#77487

rdar://141617031",
77960,2024-12-04T20:30:05Z,2024-12-17T23:49:54Z,justice-adams-apple,5,5,5,47,4,3,1,[],10635.0,0,1135191.0,0,0,0,0,879643.105344,,0,5,0,False,['justice-adams-apple'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please smoke test Linux,,Add the Plist configuration functionality as a reusable CMAKE module and hook it up to swiftCore,"missing newline Windows also uses plists in the toolchain. If we are adding this as a generic module, I think that Windows should also be supported. This doesn't really help explain the cache variable. I think that we might as well as elide the description or should rework it to be more helpful. updated to generate for all platforms but only embedd the plist on Apple platforms formatting: please put the closing parenthesis on the ending line above.
Thanks"
78244,2024-12-17T16:40:12Z,2024-12-17T20:32:23Z,tshortli,1,0,1,59,3,1,1,[],13.0,0,14532.0,0,0,0,0,890896.28261,,2,1,0,False,['tshortli'],@swift-ci please smoke testThank you!,Thank you!,"It turns out that the stdlib build depends on `internal` functions with `@_silgen_name` getting hidden linkage in some configurations. Instead of messing with the linkage computation, just fix the `stdlib/Error.swift` test by making `setWillThrowHandler` `public` to give it the right linkage.

Reverts https://github.com/swiftlang/swift/pull/78183.

Resolves rdar://141590619.
",
78132,2024-12-12T02:59:16Z,2024-12-17T19:40:18Z,j-hui,7,6,9,111,11,3,2,[],148.0,0,492067.0,0,0,0,0,894618.185157,,5,9,0,False,['j-hui'],"Another reason I'm opening this PR separate from #77726 is because I want to test it independently in CI. This change seems to cause a cascade of other issues, apparently because the existing tests have come to depend on nested calls to `importBaseMemberDecl()`; each layer of nesting synthesizes another (unnecessary) shim call, with an even longer identifier.

As such, @swift-ci please test @swift-ci please test @swift-ci Please smoke test @swift-ci Please test @swift-ci Please test @swift-ci Please test @swift-ci Please testLGTM!",LGTM!,"Nested calls to `importBaseMemberDecl()` subvert its cache and compromise its idempotence, causing the semantic checker to spuriously report ambiguous member lookups when multiple `ClangRecordMemberLookup` requests are made (e.g., because of an unrelated missing member lookup).

One such scenario is documented in the test case I checked into the test suite in f818a5d72a595c90bf2f3672960081ed495f6f7e, which fails without this fix (in particular, `inherited-lookup-typechecker.swift` fails because of the expected error from the `missing` member; `inherited-lookup-executable.swift` works because it does not attempt to access a `missing` member).

I noticed this bug in #77726 when I found that my `expected-error`s seemed to be triggering this unrelated error. I'm breaking out a small piece of that PR because (1) it is getting quite large, (2) it is getting stale, and (3) I am trying to separate this bug fix from that feature work.

rdar://141069984","Could we add a method at each layer and test that all of them are properly imported? So `baseResults` includes all the members from all the bases recursively here? Could we still run into a similar problem if the same `recordDecl` is accessible on multiple paths in the inheritance DAG? E.g.:
```
struct A {};
struct B : A {};
struct C : B, A {};
``` It includes all the results inherited from only `import` here. This is inside of a loop that iterates through all base classes, so `baseResults` will contain the results for each base class (and its ancestors) separately. That will be fine, because `importBaseMemberDecl()`'s cache will kick in and find the previously imported decl:

```cpp
importBaseMemberDecl(foundViaB,  structC); // cache miss
importBaseMemberDecl(foundViaAB, structC); // cache hit
```

The `Decl *`s `foundViaB` and `foundViaAB` should be the same, and the cache will retrieve the decl imported from the previous invocation.

However, your example raises another problem, which is that there will multiple copies of the same member. This is a separate issue that I plan to fix in a follow-up patch. I've added a method at each layer, although I do believe there is already quite a lot of coverage for that in the rest of the Swift test suite.

My intention here is to ensure coverage for a very specific scenario I encountered while studying the implementation of `ClangRecordMemberLookup`, at least for now. Later, I plan on expanding this test suite in subsequent patches to handle issues like overridden methods and ambiguous lookups (which you had foreshadowed in another comment). These patches will all be necessary to build back up to https://github.com/swiftlang/swift/pull/77726 in an incremental and robust way."
78222,2024-12-16T18:47:59Z,2024-12-17T17:34:57Z,hjyamauchi,3,2,1,2,1,2,1,[],12.0,0,82018.0,0,0,0,0,902144.400915,,1,1,0,False,['hjyamauchi'],@swift-ci please test @swift-ci please test @compnerd PTAL,,"The error message from a local build:
```
S:\SourceCache\swift\include\swift/AST/ASTBridgingImpl.h(470): error C2440: '<function-style-cast>': cannot convert from 'initializer list' to 'swift::Fingerprint'
S:\SourceCache\swift\include\swift/AST/ASTBridgingImpl.h(470): note: 'swift::Fingerprint::Fingerprint': ambiguous call to overloaded function
S:\SourceCache\swift\include\swift/Basic/Fingerprint.h(79): note: could be 'swift::Fingerprint::Fingerprint(swift::StableHasher &&)'
S:\SourceCache\swift\include\swift/Basic/Fingerprint.h(70): note: or       'swift::Fingerprint::Fingerprint(swift::Fingerprint::Core)'
S:\SourceCache\swift\include\swift/AST/ASTBridgingImpl.h(470): note: while trying to match the argument list '(initializer list)'
S
```
This might be a bug in that version of MSVC but it'd be great if we can compile with it as VS 17.9.x and 17.10.x have an arm64 miscompile bug: https://github.com/llvm/llvm-project/issues/97631 https://developercommunity.visualstudio.com/t/VC-17103-arm64-C-compiler:-a-potenti/10699487","Does this work with brace initialization of the type?

```c++
swift::Fingerprint::Core{this->v1, this->v2}
``` Done"
78224,2024-12-16T21:06:15Z,2024-12-17T17:04:16Z,benlangmuir,1,0,1,137,10,1,1,[],7.0,0,71885.0,0,0,0,0,903982.301894,,0,1,0,False,['benlangmuir'],@swift-ci please test,,"- **Explanation**: Adds support for caching symbol graph outputs. Previously, if symbol graph was enabled in a caching build it would crash.
- **Scope**: Affects caching builds that enable symbol graph output.
- **Issues**: rdar://140286819
- **Original PRs**: #77935
- **Risk**: Low. This only affects builds that were previously crashing.
- **Testing**: Regression test added.
- **Reviewers**: @cachemeifyoucan 

---

The symbol graph output from a module can contain an arbitrary number of files, depending on what extensions it contains, so cache a list of symbol graph files with their base name and contents so that they can be replayed.

rdar://140286819
(cherry picked from commit e7c37655e40897d3468bed85a2a1b29b2edd923d)
",
78228,2024-12-17T00:35:47Z,2024-12-17T06:56:23Z,atrick,1,0,15,1713,44,0,0,[],92.0,0,59020.0,0,0,0,0,904276.519438,,8,15,0,False,['atrick'],@swift-ci test,,"Handle arbitrarily nested accesses, borrows, and coroutines.

Handle dependence on variable bindings that hold trivial values.

This overhaul is currently blocking a SILGen fix that adds mark_dependence to unsafeAddress, so that addressors can be used to implement borrowed properties. More tests will be added for addressors at that time.

Fixes rdar://140424699 (Invalid SIL is generated by some passes for certain `@` `lifetime` annotations)
",
77979,2024-12-05T13:42:30Z,2024-12-05T19:33:26Z,egorzhdan,2,0,1,8,2,2,2,['c++ interop'],9.0,0,1039226.0,0,0,0,0,913667.873982,,0,1,0,False,"['egorzhdan', 'mrousavy']","@swift-ci please test Hey thanks for fixing this!

I'm a bit confused as of releases - did this PR go into Xcode 16.2.?

I just upgraded my Xcode to 16.2. and my builds failed since I use the C++ interop:

```diff
- Compiling for iOS 15.1, but module 'CxxStdlib' has a minimum deployment target of iOS 16.0: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator/CxxStdlib.swiftmodule/arm64-apple-ios-simulator.swiftmodule
```",,"**Explanation**: The iOS/watchOS/tvOS deployment targets for Cxx and CxxStdlib binaries got unintentionally bumped in b87b263, which is causing build failures when trying to back-deploy Swift libraries. This reverts the deployment targets to the older versions.
**Scope**: Changes the CMake build script for Cxx and CxxStdlib targets.
**Risk**: Low, this only affects two C++ interop overlay modules, and it only brings back the pre-6.0.2 behavior.
**Issue**: rdar://140823785 / resolves https://github.com/swiftlang/swift/issues/77909
**Reviewer**: @DougGregor @Xazax-hun @drodriguez 

Original PR: https://github.com/swiftlang/swift/pull/77921

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77851,2024-11-27T11:01:28Z,2024-12-17T12:03:10Z,AnthonyLatsis,6,0,5,3145,17,1,1,[],19.0,0,1737794.0,0,0,0,0,915962.833824,,2,5,0,False,['AnthonyLatsis'],"@swift-ci please smoke test macOS @swift-ci please test source compatibility debug @swift-ci please smoke test @swift-ci please test @swift-ci please test source compatibility debug Slava gave me a go-ahead. Most of the modified code was originally authored by me, so we’re fine.LGTM! @slavapestov could you please take a look as well?",LGTM! @slavapestov could you please take a look as well?,Fixes #62219,
78223,2024-12-16T20:26:47Z,2024-12-17T12:59:35Z,egorzhdan,1,2,1,21,2,3,2,['c++ interop'],8.0,0,59570.0,0,0,0,0,918668.770599,,4,1,0,False,['egorzhdan'],@swift-ci please testLGTM. /cc @tbkka in case you're interested.,LGTM. /cc @tbkka in case you're interested.,"When a C++ foreign reference type is conformed to a Swift protocol via a Swift extension, trying to cast `any MyProtocol` to the foreign reference type crashes the runtime.

This was because `selectCasterForDest` wasn't handling C++ foreign reference types, and we were hitting `swift_unreachable`.

This change makes sure the runtime doesn't crash for such casts.

Notably, Swift doesn't have enough metadata to determine if the conditional cast actually succeeded. This is also a problem for CF types. Casting CF types in a similar fashion triggers a typechecker diagnostic. That diagnostic will be amended in a follow-up patch to also trigger for foreign reference types.

rdar://141227849

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","Despite this returning `Failure` unconditionally, the cast eventually succeeds in this code path:
https://github.com/swiftlang/swift/blob/84ae5fbe8c2f7e3724bf07551167656f3da3b1dc/stdlib/public/runtime/DynamicCast.cpp#L2373-L2381 Nice!   Yeah, I think I remember there are other cases where an always-failing conversion is the right first step to unblock later progress.  It might help people to think of the dynamic caster as a search process that evaluates a variety of paths to find a feasible conversion.

I _suppose_ we could consider having `selectCasterForDest` fall back to returning a `tryCastUnknown` that unconditionally fails, instead of falling through to an unreachable assertion.  That would allow many of the general engines (optional unwrapping, existential unwrapping) to work even for otherwise-unrecognized types."
78166,2024-12-13T17:01:40Z,2024-12-17T12:46:27Z,egorzhdan,2,0,1,232,10,3,3,['c++ interop'],21.0,0,330289.0,0,0,0,0,919456.890319,,3,1,0,False,['egorzhdan'],"@swift-ci please test @swift-ci please testLGTM!
 LGTM! LGTM","LGTM!
 LGTM! LGTM","In C++, a primary base class that is placed in the beginning of the type's memory layout isn't always the type that is the first in the list of bases – the base types might be laid out in memory in a different order.

This makes sure that IRGen handles base types of C++ structs in the correct order.

This fixes an assertion in asserts-enabled compilers, and an out-of-memory error in asserts-disabled compilers. The issue was happening for both value types and foreign reference types. This change also includes a small refactoring to reuse the logic between the two code paths.

rdar://140848603",
78225,2024-12-16T22:08:47Z,2024-12-17T12:44:11Z,slavapestov,3,0,2,43,5,1,1,[],3722.0,0,52524.0,0,0,0,0,919596.151615,,1,2,0,False,"['slavapestov', 'xedin']",@swift-ci Please smoke test @swift-ci Please test source compatibility @swift-ci please test Linux platform,,"In solution ranking we always prefer a protocol operator over
a protocol extension operator. So if their interface types are
identical, any set of fixed type assignments that satisfies
the default implementation will also satisfy the protocol requirement.

Thus, we can filter out the default implementation early and not
consider it at all.

This speeds up expressions involving bitwise shift operators,
for example.",
77865,2024-11-28T06:52:24Z,2024-12-17T09:37:18Z,kateinoigakukun,5,0,1,6,1,1,1,[],11.0,0,1651494.0,0,0,0,0,930810.055284,,0,1,0,False,['kateinoigakukun'],@swift-ci test WebAssembly @swift-ci smoke test @swift-ci test WebAssembly @swift-ci smoke test @swift-ci smoke test,,wasi-libc 23 and later includes a critical fix under multithreads https://github.com/WebAssembly/wasi-libc/commit/887613873d839decf16ccc5277a03f09678a93a4,
78221,2024-12-16T18:39:21Z,2024-12-17T05:59:25Z,eeckstein,1,0,1,69,5,1,1,[],11.0,0,40808.0,0,0,0,0,943879.19729,,0,1,0,False,['eeckstein'],@swift-ci test,,"C unions are imported as opaque types. Therefore we have to assume that a union contains a pointer. This is important for alias analysis to catch escaping pointers via C unions.

Fixes a miscompile.
rdar://141555290
",
78201,2024-12-15T12:16:20Z,2024-12-17T05:23:08Z,omochi,4,0,1,47,1,0,0,[],47078.0,0,149157.0,0,0,0,0,944912.464545,,3,1,0,False,"['slavapestov', 'omochi']","@swift-ci Please smoke test ```
Failed Tests (1):
  Swift(windows-x86_64) :: ModuleInterface/swift_build_sdk_interfaces/find-modules.test-sh


Testing Time: 1125.63s

Total Discovered Tests: 11589
  Skipped          :    1 (0.01%)
  Unsupported      : 2650 (22.87%)
  Passed           : 8881 (76.63%)
  Expectedly Failed:   56 (0.48%)
  Failed           :    1 (0.01%)
```

The CI failure doesn’t seem to be related to the test case I added. @swift-ci please test windows platform Thank you for merging!",,"I previously reported a compiler crash bug as #66041.
Although it remained untriaged and unfixed for over a year, I recently noticed that it has been resolved in the latest version.
This patch adds test cases to prevent a recurrence of this bug.
",
78198,2024-12-15T05:52:54Z,2024-12-17T00:20:36Z,DougGregor,7,0,9,237,12,0,0,[],8.0,0,154626.0,0,0,0,0,962450.278786,,4,9,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Windows @swift-ci please clean test platform Windows @swift-ci please clean test platform Windows @swift-ci please clean test platform Windows @swift-ci please smoke test Windows,,"This pull request cleans up some source location and note infrastructure to help with Fix-Its of various kinds, including:
* Get the right starting location for inserting an attribute, fixes problems with `rethrows` and `static`.
* Emit proper JSON from the Fix-It remapping file writer, instead of massaging it in the (not-totally-working) Python script
* Suggest `@available`, `@unsafe`, etc. on top-level declarations that need them.

This is interspersed with fixes for `@unsafe` and `@safe(unchecked)` that uncovered the issues above, as I work on automatically annotating the standard library for the strict safety mode. These include:
* Fix semantics for `@safe(unchecked)` on computed properties and variable initializers
* Allow `@unsafe` on enum cases
* Print `@safe(unchecked)` properly
",
78217,2024-12-16T16:02:39Z,2024-12-16T23:58:53Z,meg-gupta,2,2,1,34,2,2,1,[],124.0,0,28574.0,0,0,0,0,965517.639695,,2,1,0,False,['meg-gupta'],@swift-ci test  @swift-ci testLGTM (a question about `build-presets.ini`),LGTM (a question about `build-presets.ini`),rdar://141490868,Is this intentional? oops no. I'll delete it. 
78207,2024-12-16T05:07:19Z,2024-12-16T23:39:28Z,nate-chandler,1,0,3,233,4,1,1,[],41842.0,0,66855.0,0,0,0,0,966557.620875,,0,3,0,False,['nate-chandler'],@swift-ci please test,,"**Explanation**: Fix lifetime completion of scoped addresses.

In https://github.com/swiftlang/swift/pull/78081 , support for completing lifetimes of scoped addresses (`store_borrow`, `begin_access`) was added.  That support relied on the `ScopedAddressValue::computeTransitiveLiveness` function, however.  That function does not actually produce liveness that includes all transitive uses: specifically, it doesn't include the `end_borrow`s of `load_borrow`s.  The result was that lifetimes of scoped addresses would be ended before the lifetimes of `load_borrow`s that they enclose, which is invalid.

Here, this is fixed by writing a variation of `computeTransitiveLiveness`'s callee `findTransitiveUsesForAddress`.  Like the latter, the new variation (written directly in `OSSALifetimeCompletion`) uses a `TransitiveAddressWalker`.  Unlike it, however, it includes the `end_borrow`s of `load_borrow`s.  

Additionally, the new walker completes inner lifetimes that are discovered while visiting the transitive uses of the scoped address.  That brings this case into parity with what's done when completing lifetimes for values.

**Scope**: Affects optimized code.
**Issue**: rdar://141246601
**Original PR**: https://github.com/swiftlang/swift/pull/78180
**Risk**: Low.  
**Testing**: Added test.
**Reviewer**: Meghana Gupta ( @meg-gupta )",
78182,2024-12-14T00:12:15Z,2024-12-16T23:27:56Z,nkcsgexi,2,0,2,29,6,1,1,[],8.0,0,256541.0,0,0,0,0,967376.409911,,0,2,0,False,['nkcsgexi'],@swift-ci please smoke test @swift-ci please test,,"• Description: the emission of fine-grained module tracing is a new addition. To avoid that the bugs that happened during the emission preventing other compilation jobs, we introduce two mechanisms for out-out: blocklist support and a compiler flag.
• Testing: Updated regression tests
• Reviewed by: Allan Shortlidge
• Original PR: #78178
• Risk: very low",
78125,2024-12-11T23:49:23Z,2024-12-16T22:18:40Z,andrurogerz,4,3,3,4,1,3,2,[],2672.0,0,426557.0,0,0,0,0,971533.320834,,1,3,0,False,"['andrurogerz', 'compnerd']",@swift-ci please smoke test @swift-ci please smoke test @swift-ci please test @swift-ci please smoke testIt's great to see folks improving this.,It's great to see folks improving this.,"## Purpose
Fixes an incorrect error logged by `swift-inspect dump-arrays` on Windows:
```
FreeLibrary failed 1
Failed to unload the remote dll
```
This error log is incorrect-- the library is successfully unloaded in the remote process.

## Background
`FreeLibrary` returns a Win32 `BOOL`, so `TRUE` on success and `FALSE` on failure. Since we're invoking `FreeLibrary` as the `lpStartAddress` passed to `CreateRemoteThread`, the return value of `FreeLibrary` will be the thread's exit code. Therefore, we should be checking the thread exit code against 0 for failure and non-zero for success.

## Validation
Ran `swift-inspect dump-arrays` with the PID of a simple Swift test app and verified the error is no longer logged.
```
S:\swift\tools\swift-inspect>S:\swift\tools\swift-inspect\.build\x86_64-unknown-windows-msvc\debug\swift-inspect.exe dump-arrays 62868
Address Size    Count   Is Class
0x13b18bcab30   48      1       false
0x13b18bcabf0   48      1       false
0x13b18bd20d0   48      1       false
0x13b18bdc590   64      1       false

S:\swift\tools\swift-inspect>
```","```suggestion
    if dwExitCode != 0 {
``` I might be having a moment, but isn't this still the same logic? Non-zero values go down the ""failed"" path. The PR description says non-zero should be considered success so this should be `if dwExitCode == 0`. No, you're correct. The version I tested had `guard dwExitCode != 0 else {`, so this should be `if dwExitCode == 0 {`."
78078,2024-12-10T01:22:49Z,2024-12-16T21:40:40Z,kavon,3,0,3,21,2,0,0,[],260543.0,0,591478.0,0,0,0,0,973806.830443,,5,3,0,False,['kavon'],"https://github.com/swiftlang/swift-driver/pull/1753
@swift-ci smoke test ```
# .---command stderr------------
# | <unknown>:0: warning: using (deprecated) legacy driver, Swift installation does not contain swift-driver at: 'C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\build\5\bin\swift-driver-new.exe'
# | <unknown>:0: warning: option '-profile-sample-use=' is only supported in swift-driver
# | Swift version 6.2-dev (LLVM be8c96d78337932, Swift 4a2d2cbd246f0d5)
# | Target: x86_64-unknown-windows-msvc
# | ""C:\\Users\\swift-ci\\jenkins\\workspace\\swift-PR-windows\\build\\5\\bin\\swiftc.exe"" -frontend -emit-ir -primary-file ""T:\\5\\tools\\swift\\test-windows-x86_64\\Profiler\\Output\\samplepgo.swift.tmp/program.swift"" -target x86_64-unknown-windows-msvc -disable-objc-interop -vfsoverlay ""T:/5/tools/swift\\stdlib\\windows-vfs-overlay.yaml"" -module-cache-path ""T:\\5\\swift-test-results\\x86_64-unknown-windows-msvc\\clang-module-cache"" -O -define-availability ""SwiftStdlib 9999:macOS 9999, iOS 9999, watchOS 9999, tvOS 9999"" -define-availability ""SwiftStdlib 5.0:macOS 10.14.4, iOS 12.2, watchOS 5.2, tvOS 12.2"" -define-availability ""SwiftStdlib 5.1:macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0"" -define-availability ""SwiftStdlib 5.2:macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4"" -define-availability ""SwiftStdlib 5.3:macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0"" -define-availability ""SwiftStdlib 5.4:macOS 11.3, iOS 14.5, watchOS 7.4, tvOS 14.5"" -define-availability ""SwiftStdlib 5.5:macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0"" -define-availability ""SwiftStdlib 5.6:macOS 12.3, iOS 15.4, watchOS 8.5, tvOS 15.4"" -define-availability ""SwiftStdlib 5.7:macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0"" -define-availability ""SwiftStdlib 5.8:macOS 13.3, iOS 16.4, watchOS 9.4, tvOS 16.4"" -define-availability ""SwiftStdlib 5.9:macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0"" -define-availability ""SwiftStdlib 5.10:macOS 14.4, iOS 17.4, watchOS 10.4, tvOS 17.4, visionOS 1.1"" -define-availability ""SwiftStdlib 6.0:macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0"" -define-availability ""SwiftStdlib 6.1:macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, visionOS 9999"" -in-process-plugin-server-path ""C:\\Users\\swift-ci\\jenkins\\workspace\\swift-PR-windows\\build\\5\\bin\\SwiftInProcPluginServer.dll"" -plugin-path ""C:\\Users\\swift-ci\\jenkins\\workspace\\swift-PR-windows\\build\\5\\bin"" -Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules -autolink-library oldnames -autolink-library msvcrt -Xcc -D_MT -Xcc -D_DLL -module-name test -o ""T:\\5\\tools\\swift\\test-windows-x86_64\\Profiler\\Output\\samplepgo.swift.tmp/has-data.ll""
# `-----------------------------
```

Looks like the new swift driver isn't used on Windows? https://github.com/swiftlang/swift-driver/pull/1753
@swift-ci smoke test",,Companion to https://github.com/swiftlang/swift-driver/pull/1753,
78194,2024-12-14T21:33:47Z,2024-12-16T21:36:41Z,hamishknight,1,0,1,91,6,0,0,[],10.0,0,172976.0,0,0,0,0,974051.317346,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Generate a new 'SwiftRuntimes' xcodeproj if a build directory for 'Runtimes' is specified with `--runtimes-build-dir`, along with a combined 'Swift+Runtimes' workspace.",
78208,2024-12-16T05:34:06Z,2024-12-16T21:17:47Z,hyp,1,0,1,2,1,2,2,[],17.0,0,56623.0,0,0,0,0,975186.452944,,1,1,0,False,['hyp'],@swift-ci please test,,"ptrauth isn't available when stdlib is built with NDK's clang
",
78151,2024-12-12T22:17:37Z,2024-12-16T21:13:20Z,phausler,1,0,1,229,4,2,2,[],1667.0,0,341743.0,0,0,0,0,975456.128181,,0,1,0,False,['phausler'],@swift-ci please smoke test,,"This alters the macro code-generation for Observable types. The types now house a distinctness check by testing `shouldNotifyObservers` which by default emits only on new values for things that conform to equatable.

Furthermore it removes the bottleneck of creating key paths by pre-caching them as _cachedKeypath_ prefixed static members. This avoids the cache miss potential of KeyPaths and also avoids the cache lookup/lock acquisition (which dominate most of the traces of high frequency accessed properties for observable types).

Additionally some table bookkeeping was removed so that the registrar itself is now faster.",
78214,2024-12-16T14:06:32Z,2024-12-16T19:42:50Z,hamishknight,2,0,1,3,1,2,2,"['🍒 release cherry pick', 'swift 6.1']",12.0,0,21032.0,0,0,0,0,980032.598866,,0,1,0,False,"['hamishknight', 'slavapestov']","@swift-ci please test LGTM, Thanks!",,"*6.1 cherry-pick of #78213*

- Explanation: Disables `variadic_generic_opaque_type.swift` for back deployment
- Scope: Test-only change
- Issue: rdar://139913681
- Risk: None, test-only change
- Testing: N/A
- Reviewer: Slava Pestov",
78213,2024-12-16T14:04:16Z,2024-12-16T17:50:20Z,hamishknight,1,1,1,3,1,1,1,[],9.0,0,21165.0,0,0,0,0,980036.728786,,0,1,0,False,['hamishknight'],"@swift-ci please smoke testThanks! Yeah, this is testing a runtime bug fix, so it can't backward deploy by definition.","Thanks! Yeah, this is testing a runtime bug fix, so it can't backward deploy by definition.","Like #78164, this test requires at least a 5.9 runtime.

rdar://139913681","@tshortli Eventually, we should make this more fine-grained so that we don't have an ever-growing pile of tests disabled on backward deployment bots."
78175,2024-12-13T20:28:16Z,2024-12-16T17:56:07Z,etcwilde,1,3,1,2,1,3,2,[],12.0,0,250235.0,0,0,0,0,987127.477929,,0,1,0,False,['etcwilde'],@swift-ci please smoke test,,"Adding a hook point for vendors to add flags, definitions, etc, to the swiftCore library build.
","what do you think of naming this `VendorCustomizations.cmake`? Eventually we will have `_Concurrency` and `Onosupport` libraries built in this project, and we should be able to target changes at those libraries too.
We could put one toward the end of the main `CMakeLists.txt` and use that to target various libraries directly, I suppose? Oh, wait, I see `SwiftCore_VENDOR_MODULE_DIR` ... so this seems pretty reasonable."
78126,2024-12-12T00:04:54Z,2024-12-16T17:42:13Z,andrurogerz,8,0,2,10,3,2,3,[],513.0,0,409039.0,0,0,0,0,988125.724871,,1,2,0,False,"['andrurogerz', 'compnerd', 'mikeash']","I would love to understand why the compiler didn't catch this bug. I would have expected it to have complained about a field with the same name but a different type in the implementation vs the protocol. Given that everything else is non-optional, does it make sense to try to make `Free` also non-optional? Trying to fulfill protocol requirements that have a default implementation, and silently failing because of some tiny mismatch, is an ongoing issue in Swift. I'd really like to see a keyword similar to `override` which means ""this is meant to implement a protocol requirement, yell if it doesn't.""

Making `Free` non-optional makes sense to me. If the implementation doesn't need a free operation then it can provide an empty function.

Should we also remove the default implementation for it? It seems kind of unnecessary. There's a tiny convenience factor for implementations that don't need it, but it's probably better to force each implementation to be intentional about it, as we clearly see here. @mikeash thanks for the details. I'm glad to hear this is a known problem. Do you know if there's an issue tracking it?

> Should we also remove the default implementation for it? It seems kind of unnecessary. There's a tiny convenience factor for implementations that don't need it, but it's probably better to force each implementation to be intentional about it, as we clearly see here.

This sounds like the right move, especially with Linux and Android support in the pipeline-- neither of which uses the default `Free`. I will make that change as a follow-up once this PR is merged. Alternatively, I'm happy to add that change to this PR if you prefer. Not sure if there's an issue for it. I did find a thread proposing this feature here: https://forums.swift.org/t/pre-pitch-explicit-protocol-fulfilment-with-the-conformance-keyword/60246

If you don't mind, removing the default implementation in this PR would be good. Makes sense to me to simultaneously fix the problem and remove thing that allowed the problem to happen. But I'm happy either way, it doesn't really matter that much. > If you don't mind, removing the default implementation in this PR would be good. Makes sense to me to simultaneously fix the problem and remove thing that allowed the problem to happen. 

@mikeash added to this PR, and locally verified it builds on macos @swift-ci please test Thank you!",,"## Purpose
Fixes a memory leak when running `swift-inspect dump-arrays` on Windows.

## Overview
* Update the `Free` property in `WindowsRemoteProcess` to be optional `FreeFunction?` type.
* Remove the default `Free` property implementation from `RemoteProcess` to avoid similar mistakes in the future.
* Implement `Free` property to return `nil` in `DarwinRemoteProcess` since it was previously relying on the default from `RemoteProcess`.

## Background
Each call to the `ReadBytes` function allocates a buffer with `malloc` and returns it to the caller. The buffer is expected to be freed with a call to `FreeFunction`, but it never gets called.

The root cause is that the `RemoteProcess` protocol defines the following prototype for the `FreeFunction` static field getter as optional:
```
  static var Free: FreeFunction? { get }
```
And the `WindowsRemoteProcess` protocol incorrectly implements the getter as non-optional:
```
  static var Free: FreeFunction {
    return { (_, bytes, _) in
      free(UnsafeMutableRawPointer(mutating: bytes))
    }
  }
```
Since the `WindowsRemoteProcess` version is defined differently, the default implementation from a `RemoteProcess` extension gets called instead:
```
extension RemoteProcess {
  static var Free: FreeFunction? {
    return nil
  }
}
```
The caller handles a `nil` `Free` by assuming the memory doesn't have to be freed.

## Validation
Add a ` print()` call to the free function body to confirm free is called with this fix and never called without it.",
78159,2024-12-13T05:47:27Z,2024-12-16T16:10:10Z,compnerd,2,0,2,7,2,0,0,[],58540.0,0,296566.0,0,0,0,0,993646.770775,,2,2,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please smoke test,,"This depends on #78133. Once merged, this can be rebased.

The runtime uses functions from User32 and needs to link against it to
fulfill that dependency.",
78179,2024-12-13T21:56:38Z,2024-12-16T16:09:17Z,compnerd,1,0,1,2,1,1,1,[],10.0,0,238362.0,0,0,0,0,993700.552385,,1,1,0,False,['compnerd'],@swift-ci please smoke test,,"Pass `-nostartfiles` to the driver as a staged toolchain would attempt to link the Swift registrar which may not exist if the SDK is not integrated. Furthermore, the registrar to be used is locally built and not the one from the previous build.",
78209,2024-12-16T08:45:21Z,2024-12-16T15:55:44Z,eeckstein,1,0,1,17,2,1,1,[],30.0,0,25827.0,0,0,0,0,994512.846821,,2,1,0,False,['eeckstein'],@swift-ci testLGTM!,LGTM!,"Fixes an ownership verifier crash
rdar://141278208
",
78216,2024-12-16T14:33:34Z,2024-12-16T14:33:46Z,hamishknight,0,0,1,1,1,0,0,[],,0,15.0,0,0,0,0,999432.698431,,0,1,0,False,[],,,rdar://136779081,
78211,2024-12-16T11:49:35Z,2024-12-16T11:49:45Z,hamishknight,0,0,1,2,1,0,0,[],,0,13.0,0,0,0,0,1009274.847402,,1,1,0,False,[],,,rdar://141272451,
78204,2024-12-15T17:51:08Z,2024-12-16T02:21:51Z,hamishknight,1,0,1,82,2,0,0,[],8.0,0,61194.0,0,0,0,0,1012801.318934,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Factor out the checking and consistently apply the ""all sources files must be covered"" rule across both Clang and Swift targets.",
78195,2024-12-14T22:04:50Z,2024-12-16T10:37:02Z,egorzhdan,1,0,1,10,1,2,2,['c++ interop'],7.0,0,131534.0,0,0,0,0,1013640.268812,,2,1,0,False,['egorzhdan'],@swift-ci please testTIL; LGTM! LGTM!,TIL; LGTM! LGTM!,"`assert`s get stripped away in release builds. To make sure the checks in tests still run in release builds, this switches to `expectTrue`/`expectFalse` instead of `assert`.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78143,2024-12-12T18:48:28Z,2024-12-16T05:14:31Z,compnerd,3,2,1,5,1,2,1,[],26618.0,0,296764.0,0,0,0,0,1032993.559623,,1,1,0,False,['compnerd'],@swift-ci please test @swift-ci please smoke test @swift-ci please smoke test,,The Swift runtime requires the CMPXCHG16B ISA extension on x86. This is controlled by the `-mcx16` flag when targeting the CPU baseline that we use. Add a check and pass along the flag to repair the build.,"I don't think anyone is using the ObjCxx language support.
Do we need this for C? Didn't find that we needed it for C. I'll drop the ObjC++."
78200,2024-12-15T10:06:12Z,2024-12-16T05:06:05Z,meg-gupta,2,0,2,46,2,1,1,[],7.0,0,68394.0,0,0,0,0,1033499.948348,,1,2,0,False,['meg-gupta'],@swift-ci test @swift-ci test macOS platformlgtm,lgtm,"Lifetime completion will insert end_borrows only on borrow introducers.

Look through ""borrowed from"" instructions before calling it.

rdar://141490551",
78205,2024-12-15T18:33:35Z,2024-12-15T22:31:53Z,hamishknight,1,0,1,13,2,0,0,[],6.0,0,14316.0,0,0,0,0,1057135.437451,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Previously we would avoid adding this since it has an invalid module name, but we can follow the same logic as the driver and set the module name to `main`.
",
78188,2024-12-14T18:26:02Z,2024-12-15T17:53:00Z,tshortli,1,0,1,57,2,1,1,[],11.0,0,84421.0,0,0,0,0,1073884.668186,,0,1,0,False,['tshortli'],@swift-ci please test,,"- **Explanation:** When `@_silgen_name` is applied to a function with no body, it is a forward declaration. It therefore must be treated as an external (public) declaration regardless of the access level it was given in source. The `stdlib/Error.swift` test case revealed that the previously incorrect linkage computation was resulting in potentially unavailable forward declarations being strongly linked when they should be weakly linked.
- **Scope:** Addresses a test failure in certain configurations. This test failure is indicative of a problem that could affect real uses of `@_silgen_name` forward declarations.
- **Issue/Radar:** rdar://141436934
- **Original PR:** https://github.com/swiftlang/swift/pull/78183
- **Risk:** Low. `@_silgen_name` forward declarations are not used much outside of the standard library and compiler test suite.
- **Testing:** New tests in the test suite.
- **Reviewer:** @DougGregor 
",
78199,2024-12-15T07:18:05Z,2024-12-15T12:45:09Z,atrick,1,0,8,235,13,0,0,[],16.0,0,33843.0,0,0,0,0,1078139.893334,,11,8,0,False,['atrick'],@swift-ci test,,"Extracting and isolating a few small fixes from larger upcoming changes that depend on them.

NFC except for uses of `@lifetime`. These fixes improve the quality of those diagnostics.",
78197,2024-12-15T02:06:19Z,2024-12-15T07:37:55Z,atrick,1,0,1,18,2,0,0,[],20.0,0,52510.0,0,0,0,0,1078179.359457,,1,1,0,False,['atrick'],@swift-ci test,,,
78108,2024-12-11T11:39:32Z,2024-12-15T02:15:56Z,AnthonyLatsis,2,0,1,5,1,1,1,[],3416.0,0,350903.0,0,0,0,0,1090994.981243,,0,1,0,False,"['hamishknight', 'AnthonyLatsis']",@swift-ci please smoke test @swift-ci please smoke test LinuxThank you!,Thank you!,"This would have saved me the time I spent figuring out why something went wrong with the project generation. In my case, the absolute path shown by this warning would have been overtly invalid because the tool was failing to infer the source root directory.",
78192,2024-12-14T19:55:48Z,2024-12-14T23:44:22Z,hamishknight,1,0,4,39,5,0,0,[],8.0,0,16636.0,0,0,0,0,1136286.225008,,0,4,0,False,['hamishknight'],@swift-ci please smoke test,,Fix a couple of issues I noticed while using `--stdlib-swift`.,
78187,2024-12-14T16:40:58Z,2024-12-14T20:42:42Z,DougGregor,1,0,1,65,9,0,0,[],12.0,0,25549.0,0,0,0,0,1139063.553644,,8,1,0,False,['DougGregor'],@swift-ci please smoke test,,"Also clean up some diagnostic text for the @unsafe/@safe(unchecked) suggestions.
",
78186,2024-12-14T14:29:58Z,2024-12-14T18:17:36Z,hamishknight,1,0,1,52,4,1,1,[],86.0,0,14857.0,0,0,0,0,1157616.967702,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Instead of inferring from the build directory location, infer from the location of swift-xcodegen itself since we know that's in the swift repo.

Resolves #77478",
78183,2024-12-14T00:48:05Z,2024-12-14T18:12:03Z,tshortli,1,0,1,57,2,0,0,[],165.0,0,62641.0,0,0,0,0,1159146.33407,,3,1,0,False,['tshortli'],@swift-ci please test,,"When `@_silgen_name` is applied to a function with no body, it is a forward declaration. It therefore must be treated as an external (public) declaration regardless of the access level it was given in source.

Resolves rdar://141436934.
",
78180,2024-12-13T23:08:57Z,2024-12-14T16:44:00Z,nate-chandler,4,0,2,233,4,1,1,[],16.0,0,63307.0,0,0,0,0,1164428.710656,,2,2,0,False,['nate-chandler'],"@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark Source compat failures match failures in baseline
```
========================================
Failures:
  FAIL: SwiftLint-Legacy, 4.2, 60f98e, Swift Package
  FAIL: SwiftLint-Legacy, 4.0, 60f98e, Swift Package
```",,"Previously, when determining and completing lifetimes of scoped addresses, `computeTransitiveLiveness` was used to determine the liveness used for completing the lifetime.

That approach had two problems:
(1) The function does not find scope-ending uses of `load_borrow`s. The result was determining that the lifetime of the enclosing `store_borrow` ended before that of the `load_borrow`.
(2) The function did not complete lifetimes of values defined within the scoped address whose lifetimes the scoped address had to contain. This was an inconsistency between the handling of scoped addresses and that of values.

Here, both are addressed by implementing a `TransitiveAddressWalker` (as `computeTransitiveLiveness`'s callee does) which not only visits existing `end_borrow`s of `load_borrows` but completes them (and other inner guaranteed values or scoped addresses).

rdar://141246601
",
78169,2024-12-13T17:32:41Z,2024-12-14T16:39:59Z,compnerd,2,0,1,10,1,0,0,[],11.0,0,83240.0,0,0,0,0,1164673.115623,,1,1,0,False,['compnerd'],@swift-ci please test @swift-ci please test,,`std::result_of_t` has been deprecated and replaced with `std::invoke_result_t`. Update to the newer spelling to avoid the C++17 deprecation warnings when building with a new STL.,
78162,2024-12-13T09:07:02Z,2024-12-14T07:08:20Z,eeckstein,2,0,1,222,2,0,0,[],45.0,0,79281.0,0,0,0,0,1198971.756374,,3,1,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark,,"With OSSA it can happen more easily that the final release is not immediately located before the related dealloc_stack_ref. Therefore do a more precise check (using escape analysis) if any instruction between a release and a dealloc_stack_ref might (implicitly) release the allocated object.

This is part of fixing regressions when enabling OSSA modules:
rdar://140229560
",
77487,2024-11-08T17:05:45Z,2024-12-14T07:11:35Z,Catfish-Man,24,9,13,160,4,5,3,[],7.0,1,3074751.0,0,0,0,0,1198778.842361,,1,13,0,False,['Catfish-Man'],"@swift-ci test @swift-ci Apple Silicon benchmark @swift-ci Apple Silicon benchmark @swift-ci Apple Silicon benchmark @swift-ci please benchmark ```
------- Performance (arm64): -O -------

REGRESSION                                OLD      NEW        DELTA    RATIO    
ConvertFloatingPoint.MockFloat64ToInt64   292.5    339.286    +16.0%   **0.86x**
FindString.Rec3.Array                     69.943   80.133     +14.6%   **0.87x**
NSError                                   51.436   55.703     +8.3%    **0.92x (?)**
StringFromLongWholeSubstring              1.854    1.998      +7.8%    **0.93x**

IMPROVEMENT                               OLD      NEW        DELTA    RATIO    
ArrayAppendLatin1Substring                9288.0   1633.787   -82.4%   **5.68x**
ArrayAppendAsciiSubstring                 9012.0   1593.0     -82.3%   **5.66x**
ArrayAppendUTF16Substring                 9012.0   1594.4     -82.3%   **5.65x**
LineSink.scalars.alpha                    28.988   17.0       -41.4%   **1.71x**
FlattenListFlatMap                        2600.0   2243.0     -13.7%   **1.16x (?)**

------- Code size: -O -------

REGRESSION          OLD     NEW     DELTA    RATIO  
QueueTest.o         7615    9363    +23.0%   **0.81x**
FindStringNaive.o   5341    5857    +9.7%    **0.91x**
ArrayAppend.o       19641   20873   +6.3%    **0.94x**
StringSplitting.o   27567   28339   +2.8%    **0.97x**

IMPROVEMENT         OLD     NEW     DELTA    RATIO  
FlattenList.o       2738    2478    -9.5%    **1.10x**
Suffix.o            15518   14974   -3.5%    **1.04x**
RangeOverlaps.o     4475    4367    -2.4%    **1.02x**
``` @swift-ci test @swift-ci test Asked Erik to take a look at the test failure, since it's about the _effects thing we discussed Not clear to me why pushing that auto-requested review from Erik… @swift-ci test @swift-ci test @swift-ci Apple Silicon benchmark @swift-ci test @swift-ci Apple Silicon benchmark @swift-ci please Apple Silicon benchmark Well that was completely ridiculous. Wasted several hours because build-script stopped rebuilding the tests, so I kept getting failures from the old code rather than my fix. @swift-ci please test @swift-ci Apple Silicon benchmark @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci Apple Silicon benchmark",,Fixes rdar://139455035,"iirc redundant endMutation is harmless but I should still move this path up above the defer The return value is not supposed to be discarded here -- we should double check that the collection did not lie about its count.

```suggestion
    let end = buf.initialize(fromContentsOf: newElements)
    _precondition(end == buf.endIndex)
``` Nit: This is a little misleading: `@_alwaysEmitIntoClient` already implies inlinability, but `@inlinable` carries an expectation that it will export an ABI symbol. I recommend just using aeic, like we do in most similar cases in the stdlib.

```suggestion
  @_alwaysEmitIntoClient
```

Update: D'oh, we appear to be less consistent about this than I thought. The `Array` code is pretty consistent though. Do we _really_ need a new public entry point for this? I.e., does this provide meaningful benefits that aren't already provided by the existing entry point? My thinking is that it can help mitigate the code size increase, because in the (extremely common) case where it's being called with a Collection, we can avoid inlining the underestimate-handling code.

It's possible DCE was already taking care of this satisfactorily though. I'll fix this once I figure out the SIL test failure :) I had just @inlinable originally but Steve correctly pointed out that would make the Sequence-taking one explode when back-deployed if it didn't get inlined. Done! - What do these do? 
- Are we sure they make sense?
- What does it mean for a mutating function not to escape parts of its self argument?
- Why do some of these specify `self.**`, but others `self.value**`? Is there a subtle difference between these methods?
- How are these new annotations related to the problem that is being fixed? This part is new btw"
78177,2024-12-13T21:32:28Z,2024-12-14T04:32:41Z,DougGregor,3,0,4,376,16,1,1,[],12.0,0,25221.0,0,0,0,0,1208307.30794,,9,4,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,"Introduce an attribute to allow unsafe code within the annotated declaration's body without presenting an unsafe interface to users. This is, by its nature, and unsafe construct, and is used to document where unsafe behavior is encapsulated in safe constructs.

There is an optional message that can be used as part of an audit trail.",
78181,2024-12-14T00:08:37Z,2024-12-14T04:22:21Z,DougGregor,2,0,1,3,2,0,0,[],8.0,0,15824.0,0,0,0,0,1208335.709753,,3,1,0,False,"['DougGregor', 'ktoso']",@swift-ci please smoke test Nice :-),,"The inclusion of the full diagnostic list (via DiagnosticList.h) in DiagnosticGroups.h meant that touching any diagnostic caused most of the world to rebuild, making me sad. Use forward declarations to limit how much needs to be rebuilt when changing diagnostics.
",
78178,2024-12-13T21:48:09Z,2024-12-14T03:52:27Z,nkcsgexi,3,0,2,29,6,1,1,[],32.0,0,21858.0,0,0,0,0,1210730.016182,,6,2,0,False,['nkcsgexi'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,,
78173,2024-12-13T19:12:48Z,2024-12-14T03:28:51Z,tshortli,4,0,1,2,1,1,1,[],20.0,0,29764.0,0,0,0,0,1212146.494987,,1,1,0,False,['tshortli'],"https://github.com/swiftlang/swift-syntax/pull/2917

@swift-ci please smoke test Note that the cross repo testing initiated above is not necessary for this PR, but I wanted to perform cross repo testing somewhere for https://github.com/swiftlang/swift-syntax/pull/2917 so this just seemed like a convenient PR to do it with. I forgot to update code generation - fixed. https://github.com/swiftlang/swift-syntax/pull/2917

@swift-ci please smoke testThanks",Thanks,"Resolves the following warning:

```
 warning: 'as' is deprecated: This cast will always succeed
```
",
78176,2024-12-13T21:19:19Z,2024-12-14T03:15:46Z,meg-gupta,1,0,1,16,2,1,1,[],126.0,0,21388.0,0,0,0,0,1212931.831804,,1,1,0,False,['meg-gupta'],@swift-ci testLGTM!,LGTM!,"This is part of fixing performance regressions for ossa modules

rdar://140229560

",
77730,2024-11-20T12:48:45Z,2024-12-14T02:00:31Z,nickolas-pohilets,8,6,10,235,28,2,0,['concurrency'],42875.0,0,2034706.0,0,0,0,0,1217448.41103,,8,10,0,False,['ktoso'],Testing here and I'll take it through some extra testing as well @swift-ci please test @swift-ci please test macOS @swift-ci please test @swift-ci please smoke test @swift-ci please smoke test Sigh while waiting for my local build to rebuild finally due to a bunch of rebases let's kick this off again. @swift-ci please test,,"Using 6.1 for the feature per [this comment](https://forums.swift.org/t/versioning-back-deployment-of-isolated-deinit/76089/10), but using %target-future-triple as a workaround for the clang importer assertion.","You don't actually use this, but you probably should, in the storage of the job. This is still a crash, I think.  I'm not sure if we have testing for the existing diagnostics about incomplete SDKs. Hmm I understood your comment that we do want it to crash, don't we? That seems to be like other code behaves in such situations.

Are you saying we don't want to crash and just return early? I can do that but suspected we'd rather actually fail here as it would not be the right behavior then hm Ideally, the compiler should never crash on any input. We should emit an error and continue normally (generating meaningless code is acceptable). Gotcha, will do 👍  Done, actually it seems we can just diagnose in SILGen, so this should do the job
```
if (!swiftDeinitOnExecutorDecl) {
      dd->diagnose(diag::missing_deinit_on_executor_function);
      return;
    }
```

https://github.com/swiftlang/swift/pull/77730/commits/0d7e83bcc02d3463e8ec0e76d000dc79fd673431"
78174,2024-12-13T19:35:50Z,2024-12-14T01:22:16Z,nate-chandler,1,0,1,40,3,1,1,[],73.0,0,21512.0,0,0,0,0,1219018.729855,,0,1,0,False,['nate-chandler'],@swift-ci please test,,"**Explanation**: Fix a compiler crash on resilient `BitwiseCopyable` enum.

`TypeInfo`s for enums must store their corresponding `EnumImplStrategy`s so that the latter can be looked up from the `TypeInfo`.  Previously, the `TypeInfo` for resilient `BitwiseCopyable` enums was identical to the `TypeInfo` for all other kinds of types.  This was incorrect because it didn't store the `EnumImplStrategy`.  Here, a new sublcass is added which does store it as required.
**Scope**: Affects adopters of BitwiseCopyable.
**Issue**: rdar://141228350
**Original PR**: https://github.com/swiftlang/swift/pull/78130
**Risk**: Low.  Follows the existing pattern for resilient enum `TypeInfo`.
**Testing**: Added test.
**Reviewer**: Arnold Schwaighofer ( @aschwaighofer )
",
78032,2024-12-06T23:38:25Z,2024-12-14T00:53:45Z,hjyamauchi,5,0,1,18,2,4,4,[],10.0,0,609321.0,0,0,0,0,1221455.115951,,1,1,0,False,"['shahmishal', 'hjyamauchi']","@swift-ci please test @swift-ci please test Lets update this to Swift 6.0.3, just released https://github.com/swiftlang/swift-org-website/pull/860 TY! Updated to use the 6.0.3 build and locally tested which was good. @shahmishal Can you take another look? @swift-ci please testAdding @shahmishal and @DougGregor as this is going to change the bootstrapping toolchain. The changes themselves LGTM.

Please wait for signoff from @shahmishal before merging. lgtm Excellent, LGTM! Thanks!","Adding @shahmishal and @DougGregor as this is going to change the bootstrapping toolchain. The changes themselves LGTM.

Please wait for signoff from @shahmishal before merging. lgtm Excellent, LGTM! Thanks!","Update the pinned toolchain for Windows and enable SwiftCompilerSoures for Win/ARM64

Resolves https://github.com/swiftlang/swift/issues/74866
",
78158,2024-12-13T05:29:51Z,2024-12-13T23:23:00Z,compnerd,1,0,1,5,1,0,0,[],40338.0,0,64391.0,0,0,0,0,1226899.617897,,2,1,0,False,['compnerd'],@swift-ci please smoke test,,Add an additional header search path as the threading library has intertwined dependencies and requires some headers from the compiler set.,
78168,2024-12-13T17:28:38Z,2024-12-13T23:22:33Z,compnerd,1,0,1,10,1,0,0,[],14.0,0,21237.0,0,0,0,0,1226928.151361,,0,1,0,False,['compnerd'],@swift-ci please test,,"This TODO has existed since the introduction of the Windows platform and has not been addressed. The implementation at this point is well tested in practice. Clean up the warning message and style and remove the warning.
",
78165,2024-12-13T16:44:12Z,2024-12-13T22:55:38Z,tshortli,1,0,1,3,1,1,1,[],8.0,0,22286.0,0,0,0,0,1228545.181026,,1,1,0,False,['tshortli'],@swift-ci please test,,"- **Explanation:** Fixes a test regression.
- **Scope:** Tests only.
- **Issue/Radar:** rdar://141439287
- **Original PR:** https://github.com/swiftlang/swift/pull/78164
- **Risk:** Low, tests only.
- **Testing:** n/a
- **Reviewer:** @hamishknight ",
78122,2024-12-11T22:28:50Z,2024-12-13T22:47:36Z,justice-adams-apple,2,1,1,4,2,2,2,[],114.0,0,173928.0,0,0,0,0,1229025.854088,,0,1,0,False,['justice-adams-apple'],"@swift-ci please smoke test @swift-ci please smoke testAssuming that it's for all platforms, LGTM.","Assuming that it's for all platforms, LGTM.","add `SwiftCore_ENABLE_SHORT_MANGLING_LOOKUPS` and the associated compile definition
","Is this on for all platforms currently, or is this just for Apple?"
78139,2024-12-12T18:00:51Z,2024-12-13T22:02:52Z,cachemeifyoucan,2,0,1,49,2,2,2,[],6.0,0,100922.0,0,0,0,0,1231712.365744,,0,1,0,False,['cachemeifyoucan'],"@swift-ci please test Please test with following PR:
https://github.com/swiftlang/llvm-project/pull/9735

@swift-ci please test",,"  - **Explanation**: When cloning the clang instance in ClangImporter to perform tasks like PCM/PCH compilation, make two compiler instance to share the same CASOptions so they can share the CAS ObjectStore and life time.
    <!--
    A description of the changes. This can be brief, but it should be clear.
    -->
  - **Scope**: This fixes a case where clang emits a diagnostics in a source buffer that gets mapped in via CAS, and mapped into swift source manager. While CAS has the ownship from CompilerInvocation -> CASOptions -> CAS, if the CompilerInvocation is deleted when the cloned instance is deleted, it left an invalid buffer in the swift source manager.
    <!--
    An assessment of the impact and importance of the changes. For example, can
    the changes break existing code?
    -->
  - **Issues**: rdar://141284501
    <!--
    References to issues the changes resolve, if any.
    -->
  - **Original PRs**: https://github.com/swiftlang/swift/pull/78138
    <!--
    Links to mainline branch pull requests in which the changes originated.
    -->
  - **Risk**: Low.
    <!--
    The (specific) risk to the release for taking the changes.
    -->
  - **Testing**: UnitTest added
    <!--
    The specific testing that has been done or needs to be done to further
    validate any impact of the changes.
    -->
  - **Reviewers**: @Xazax-hun 
    <!--
    The code owners that GitHub-approved the original changes in the mainline
    branch pull requests. If an original change has not been GitHub-approved by
    a respective code owner, provide a reason. Technical review can be delegated
    by a code owner or otherwise requested as deemed appropriate or useful.
    -->
",
78121,2024-12-11T22:10:47Z,2024-12-13T22:47:22Z,justice-adams-apple,2,1,2,4,1,2,2,[],1193.0,0,174996.0,0,0,0,0,1229042.76768,,0,2,0,False,['justice-adams-apple'],@swift-ci please smoke test @swift-ci please smoke testgross,gross,add ` -headerpad_max_install_names` linker flag when appropriate,"To be consistent with the rest of this file, can we keep the closing `)` on the previous line? Thanks"
78163,2024-12-13T11:09:54Z,2024-12-13T21:56:24Z,eeckstein,2,0,2,212,9,1,1,[],28.0,0,38794.0,0,0,0,0,1232097.922406,,2,2,0,False,['eeckstein'],@swift-ci test @swift-ci benchmarkLGTM!,LGTM!,"* DeadObjectElimination: handle `begin_borrow`/`end_borrow` when deleting dead arrays

* add simplification for fix_lifetime: canonicalize a `fix_lifetime` from an address to a `load` + `fix_lifetime`:
```
   %1 = alloc_stack $T
   ...
   fix_lifetime %1
```
->
```
   %1 = alloc_stack $T
   ...
   %2 = load %1
   fix_lifetime %2
```

This peephole optimization was already done in SILCombine, but it didn't handle store_borrow - a good opportunity to make an instruction simplification out of it.

This is part of fixing regressions when enabling OSSA modules:
rdar://140229560",
78172,2024-12-13T17:44:20Z,2024-12-13T21:37:22Z,tshortli,2,0,1,33,1,1,1,[],10.0,0,15049.0,0,0,0,0,1232178.649173,,2,1,0,False,"['tshortli', 'usama54321']",@swift-ci please smoke test Thanks for fixing this,,"Follow up to https://github.com/swiftlang/swift/pull/76934.

The switch is not safely covered since deserialization could read any `unsigned` value, so there must be a return at the end of the method.

Also, run clang-format.",
78133,2024-12-12T03:32:26Z,2024-12-13T21:54:32Z,compnerd,1,2,1,11,4,2,0,[],54469.0,0,152527.0,0,0,0,0,1232214.973056,,1,1,0,False,['compnerd'],@swift-ci please test,,"This define is meant to be present only when performing a build of a dynamic library. The general pattern for this is:

```c
#if defined(LIBRARY_STATIC)
# define LIBRARY_ABI /**/
#else
# if defined(_WIN32)
#   if defined(LIBRARY_EXPORTS)
#     define LIBRARY_ABI __declspec(dllexport)
#   else
#     define LIBRARY_ABI __declspec(dllimport)
#   endif
# elseif defined(__linux__) && !defined(__ANDROID__)
#   define LIBRARY_ABI __attribute__((__visibility__(""protected"")))
# else
#   define LIBRARY_ABI __attribute__((__visibility__(""default"")))
# endif
#endif
```

For AIX this would require an additional flag to be specified (`-mdefault-visibility-export-mapping=explicit`). The same applies for other non-AIX, non-Windows platforms with a different set of flags: `-fvisibility=hidden -fvisibility-inlines-hidden`.

This is required to start trying to build the standard library statically on Windows (which also requires further changes to the Swift compiler).","Isn't `DEFINE_SYMBOL` a property? Yes, yes it is."
78145,2024-12-12T18:49:58Z,2024-12-13T21:54:51Z,compnerd,2,0,1,2,1,1,1,[],10313.0,0,97494.0,0,0,0,0,1232196.002937,,1,1,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please test,,"Enable the non-escapeable types feature when building swiftCore. While we do not enable all the same features being used in the current standard library, this allows us to build the runtime.",
78142,2024-12-12T18:39:40Z,2024-12-13T21:40:25Z,compnerd,1,0,1,12,1,1,1,[],6.0,0,97247.0,0,0,0,0,1233063.023026,,1,1,0,False,['compnerd'],@swift-ci please test,,"Hoist the no environment case over the case with the environment. This ensures that if no environment configuration is selected, the code still builds. If no environment configuration is selected, `ENVIRON` may still be defined and that results in calls to elided functions.",
78164,2024-12-13T16:40:33Z,2024-12-13T20:30:38Z,tshortli,1,0,1,3,1,1,1,[],10.0,0,13805.0,0,0,0,0,1237252.376318,,0,1,0,False,['tshortli'],@swift-ci please smoke testThank you!,Thank you!,"Resolves rdar://141439287.
",
77700,2024-11-19T14:25:52Z,2024-12-13T19:54:28Z,Xazax-hun,6,12,1,199,6,2,1,['c++ interop'],787305.0,0,2093317.0,1,0,0,0,1239421.466053,,4,1,0,False,['Xazax-hun'],"@swift-ci please smoke test > I don't think suppressing the warnings for std types is the right fix here

I completely agree. Unfortunately, I need to do something about this in the PR to make the CI pass. Are you OK with leaving the workaround in this PR until the proper fix lands later on? I can open a GitHub issue to track the problem.  @swift-ci please smoke test @swift-ci please smoke test linux > I don't think suppressing the warnings for std types is the right fix here

The latest version does not have the suppression.  @swift-ci please smoke test> Moreover, sometimes, when
the copy operation is not instantiated in a TU, we get spurious warnings
about the attributes we add through APINotes. This patch suppresses
those spurious messages from the standard library.

This is a bug that I also observed recently. I don't think suppressing the warnings for std types is the right fix here, this can happen with non-std types as well with a custom API Notes file. I think that should be fixed in a separate PR (not necessarily by you 🙂). LGTM","> Moreover, sometimes, when
the copy operation is not instantiated in a TU, we get spurious warnings
about the attributes we add through APINotes. This patch suppresses
those spurious messages from the standard library.

This is a bug that I also observed recently. I don't think suppressing the warnings for std types is the right fix here, this can happen with non-std types as well with a custom API Notes file. I think that should be fixed in a separate PR (not necessarily by you 🙂). LGTM","A first step towards creating safe overloads for C++ APIs using span (rdar://139074571).

Note that we need to mark span as owned because it the libc++
implementation was mistakenly recognized as owned and might now rely on
span methods like `data` being renamed as `__dataUnsafe`. We will change
it under a new interop version. But for the time being, we want
consistent behavior across stdlib versions. ","Some of these test functions contain UB. I plan to fix these tests in a separate PR.  Can we use the existing `unsafeBitCast` without redeclaring it in this module? The problem is, currently `unsafeBitCast` is not updated to work with non-escapable types. Using it directly would result in this error:
```
global function 'unsafeBitCast(_:to:)' requires that 'Span<Self.Element>' conform to 'Escapable'
```

Hopefully, once https://github.com/swiftlang/swift/pull/73258 lands, we could remove this copy.  TODO: remove @_disallowFeatureSuppression(NonescapableTypes) Can we do `import_unsafe` on data? I will look into that.  Actually, `SwiftName` works as intended. Would this cause overload ambiguity when `unsafeBitCast` is used from client code? Could this overload be `internal`? Good point! I'll update the PR once I saw the results from the Windows CI.  Done. I think an implicit convention that we've followed with these initializers so far has been to call the parameter `fromCxx:`, but given that this is underscored, I guess we can bikeshed the naming later. Minor: missing newline Hmm. I think in this particular case we really want `unsafe` to be part of the name because the compiler does not reason about the lifetimes here. It could be `_unsafeFromCxx`. "
78130,2024-12-12T01:55:07Z,2024-12-13T19:25:27Z,nate-chandler,3,0,1,40,3,1,1,[],10.0,0,149423.0,0,0,0,0,1241162.487357,,1,1,0,False,['nate-chandler'],@swift-ci please smoke test @swift-ci please smoke test linux platform @swift-ci please smoke test linux platformLGTM,LGTM,"Like other `EnumTypeInfo`s, the `TypeInfo` subclasses `EnumTypeInfoBase` and store the `EnumImplStrategy`.
",
78161,2024-12-13T07:18:56Z,2024-12-13T19:00:39Z,hyp,1,2,1,55,5,4,3,['c++ interop'],27.0,0,42105.0,0,0,0,0,1242651.818997,,2,1,0,False,['hyp'],"@swift-ci please testLGTM, just one question regarding the IR verifier issue we saw earlier","LGTM, just one question regarding the IR verifier issue we saw earlier","…her platforms

The PR https://github.com/swiftlang/swift/pull/77857 added windows-specific workaround for https://github.com/swiftlang/swift/issues/77856, that happened after https://github.com/swiftlang/swift/pull/77843. Unfortunately this caused a new issue on windows - https://github.com/swiftlang/swift/issues/78119. It looks like windows is suffering from a similar serialization issue as libstdc++, although its even more complex as the callAsFunction is not only a derived function from a base class, the base class also has a static call operator. In any case, the libstdc++ callAsFunction deserialization fix should align with the static operator () deserialization too, so for now make windows use the same workaround as other platforms to avoid the deserialization crash (https://github.com/swiftlang/swift/issues/78119).

This change was tested on i686 windows too, ensuring that IR verifier crash no longer happens","Hmm, I guess making the parameter a const reference avoids the IR verifier failure? Yep!"
78131,2024-12-12T02:52:54Z,2024-12-13T18:01:27Z,rastogishubham,5,2,1,3,1,2,1,[],221.0,0,140917.0,0,0,0,0,1246201.852703,,0,1,0,False,"['adrian-prantl', 'rastogishubham']","@swift-ci please smoke test @swift-ci please smoke test linus @swift-ci please smoke test You might now still need to REQUIRE that the aarch64 target was built, but at least it's no longer depending on the host CPU type @swift-ci please smoke test",,"rdar://141272451 (🟠 OSS Swift CI: oss-swift_tools-RA_stdlib-DA_test-device-non_executable failed: test: DebugInfo/dropped-var.sil (exit code 1))

The dropped-var.sil test fails on watchos-armv7k with the following error:

`SOURCE_DIR/test/DebugInfo/dropped-var.sil:36:43: error: value '%5' defined with mismatching type 'Builtin.Int32' (expected 'Builtin.Int64')`

This is not true on other architecture, so I am guarding the test with a REQUIRES:CPU=aarch64

https://ci.swift.org/job/oss-swift_tools-RA_stdlib-DA_test-device-non_executable/8009/consoleText",Wouldn't it be much better to just hardcode the triple in the command line? Done
78123,2024-12-11T23:02:57Z,2024-12-13T18:00:41Z,meg-gupta,4,1,1,21,6,1,1,[],414.0,0,154664.0,0,0,0,0,1246254.033355,,7,1,0,False,['meg-gupta'],@swift-ci smoke test  @swift-ci smoke test Linux platform @swift-ci smoke test @swift-ci smoke testlgtm,lgtm,"This flag enables ownership verification after every transform.

","nitpick: shouldn't this be in an else-branch, so that ownership verification is not done twice if both, `-sil-verify-all` and `-sil-ownership-verify-all` is specified?"
78157,2024-12-13T05:25:57Z,2024-12-13T11:16:30Z,DougGregor,5,2,2,316,23,2,1,[],8.0,0,44307.0,0,0,0,0,1247231.462635,,8,2,0,False,"['Xazax-hun', 'DougGregor']","@swift-ci please smoke test @swift-ci please smoke test The proposed design here is similar to what Rust is doing, i.e., the meaning of:
```
unsafe fn foo() {
 // content
}
```
is:
```
unsafe fn foo() {
  unsafe {
   // content
  }
}
```
This is a design decision that the Rust community regrets. My understanding is they would prefer unsafe functions to not permit calls to unsafe by default. This would make it more explicit where exactly the unsafe content is within an unsafe function, and help enforcing some policies like adding an informal argument as a form of comment to each unsafe block why the unsafe operation is actually safe in that context:
```
// comment with preconditions not checked by the compiler
unsafe fn foo() {
  safe_operation();
  unsafe {
    // comment why is this fine
    unsafe_operation();
  }
  safe_operation();
}
```

All that being said, I understand that Swift does not have unsafe blocks yet, but I am wondering if this is an alternative design we could consider to enable users to define more narrow scopes where unsafe operations are permitted. > All that being said, I understand that Swift does not have unsafe blocks yet, but I am wondering if this is an alternative design we could consider to enable users to define more narrow scopes where unsafe operations are permitted.

Personally, I don't think that unsafe blocks are the right language design. They encourage folks to write the minimal amount of code within unsafe blocks, which sounds like a good thing, but I think it's a false metric. What we care about is encapsulating the unsafety and documenting how it interacts with safe code that uses it, and that's best done at a function boundary where all of your inputs and outputs are clearly documented.

All of this is going into my upcoming pitch on introducing this strict safety mode. I've avoided it in the vision because I don't want this particular design point to distract from the discussion of the overall direction. I'd prefer to have this discussion on the forums. I'm currently doing the experimental implementation of what I'll be pitching, which I hope will happen soon (next few days).",,"When a declaration is `@unsafe`, don't emit strict safety diagnostics for uses of unsafe entities, constructs, or types within it. This allows one to account for all unsafe behavior in a module using strict memory safety by marking the appropriate declarations `@unsafe`.

Enhance the strict-safety diagnostics to suggest the addition of `@unsafe` where it is needed to suppress them, with a Fix-It. Ensure that all such diagnostics can be suppressed via `@unsafe` so it's possible to get to the above state.

Also includes a drive-by bug fix where we weren't diagnosing unsafe methods overriding safe ones in some cases.

Fixes rdar://139467327.
","It could be good to add this bit to the AvailabilityScope dump output for debugging. Great idea, done in the last commit. Thanks!"
78160,2024-12-13T06:51:57Z,2024-12-13T17:48:08Z,eeckstein,2,0,1,64,3,1,1,[],12.0,0,39375.0,0,0,0,0,1247004.152669,,0,1,0,False,['eeckstein'],@swift-ci test @swift-ci benchmarklgtm,lgtm,"Deal with upcast instructions which cast keypath instructions before they are passed to a partial_apply.

rdar://141370412
",
78138,2024-12-12T17:33:32Z,2024-12-13T17:23:32Z,cachemeifyoucan,4,2,1,49,2,2,1,[],8.0,0,85800.0,0,0,0,0,1248485.650133,,8,1,0,False,['cachemeifyoucan'],"@swift-ci please smoke test @swift-ci please smoke test Please test with following PR:
https://github.com/swiftlang/llvm-project/pull/9732

@swift-ci please smoke test Please test with following PR:
https://github.com/swiftlang/llvm-project/pull/9732

@swift-ci please smoke testLGTM!",LGTM!,"When cloning the clang instance in ClangImporter to perform tasks like PCM/PCH compilation, make two compiler instance to share the same CASOptions so they can share the CAS ObjectStore and life time.

This fixes a case where clang emits a diagnostics in a source buffer that gets mapped in via CAS, and mapped into swift source manager. While CAS has the ownship from CompilerInvocation -> CASOptions -> CAS, if the CompilerInvocation is deleted when the cloned instance is deleted, it left an invalid buffer in the swift source manager.

rdar://141284501

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","Actually, I wonder if this change makes this function really error prone to use. Previously, we did not modify `*Impl.Invocation`, but after this change we do all sorts of mutations that are persisted after this method call. Based on the name of this function as a caller I would definitely not anticipate these effects. (Have similar concerns for the other changes.) I didn't realize all the shared_ptr inside CompilerInvocationBase actually has a deep copy constructor. Hmm, I need to find a different way to preserve CAS."
76876,2024-10-04T19:14:54Z,2024-10-12T00:23:55Z,natecook1000,2,2,2,189,2,2,0,[],6.0,0,6041030.0,0,0,0,0,1248773.994587,,0,2,0,False,['natecook1000'],"@swift-ci Please smoke test @swift-ci Please smoke testThe `CollectionDifference` changes look fine to me, but I mentioned a concern about some of the added tests","The `CollectionDifference` changes look fine to me, but I mentioned a concern about some of the added tests","The `CollectionDifference` type has a few different invariants that were not being validated when initializing using the type's `Decodable` conformance, since the type was using the autogenerated `Codable` implementation. This change provides manual implementations of the `Encodable` and `Decodable` requirements, and adds tests that validate the failure when trying to decode invalid JSON for CollectionDifference (and a few other types).
","I'm a bit wary of this test. This URL is a valid URL (at least with modern versions of Foundation), but I think this fails only because it's not surrounded by quotes (or perhaps on older OS versions it fails because we didn't IDNA encode the URL). Perhaps a meta question here: should the stdlib have tests like this that test Foundation Codable conformances? That seems likely to cause issues if Foundation changes independently. It might be best to add this type of test to Foundation instead of here so we can update the test if parsing behavior changes Makes sense! I'll look at moving this one over to the Foundation project"
78129,2024-12-12T00:51:25Z,2024-12-12T23:32:07Z,artemcm,2,0,1,85,2,1,1,"['🍒 release cherry pick', 'swift 6.1']",7.0,0,143675.0,0,0,0,0,1250738.448689,,0,1,0,False,['artemcm'],@swift-ci test @swift-ci test,,"Cherry-pick of https://github.com/swiftlang/swift/pull/78128
------------------------------------

**• Description:** If a module is blocklisted from the compiler using its textual interface, then under Implicitly-Built modules it will not get indexed, since indexing will not be able to spawn swiftinterface compilation. With explicitly-built modules, none of the dependency modules get built from interface during indexing, which means we directly index input binary modules.

For now, for functional parity with Implicit Module Builds, disable indexing of modules during Explicit Module Builds which would not get indexed during Implicit Module Builds.
**• Risk:** Low, this change only disables a code-path that was already previously-disabled when using Implicit Module Builds
**• Testing:** Updated regression tests
**• Reviewed by:** @nkcsgexi 
**• Original PR:** https://github.com/swiftlang/swift/pull/78128
**• Radar:** rdar://141220913


",
78100,2024-12-10T23:58:01Z,2024-12-13T05:14:52Z,kubamracek,4,0,2,32,2,3,3,[],55629.0,0,191811.0,0,0,0,0,1292207.928612,,4,2,0,False,"['Xazax-hun', 'kubamracek']",Is it possible to add a test? Added a test that reproduces the compiler crash. @swift-ci please test @swift-ci please testLGTM! LGTM!,LGTM! LGTM!,"This resolves a compiler crash when using C++ interop in Embedded Swift:
```
Assertion failed: (LazyTypeMetadata.empty()), function emitLazyDefinitions, file GenDecl.cpp, line 1330.
...
8  swift-frontend           0x000000010093cf60 swift::irgen::IRGenerator::emitLazyDefinitions() + 3212
9  swift-frontend           0x0000000100a580f8 swift::IRGenRequest::evaluate(swift::Evaluator&, swift::IRGenDescriptor) const + 2632
10 swift-frontend           0x0000000100aa64a4 swift::GeneratedModule swift::SimpleRequest<swift::IRGenRequest, swift::GeneratedModule (swift::IRGenDescriptor), (swift::RequestFlags)17>::callDerived<0ul>(swift::Evaluator&, std::__1::integer_sequence<unsigned long, 0ul>) const + 200
```
",
78147,2024-12-12T20:13:36Z,2024-12-13T04:36:56Z,kubamracek,3,0,3,78,5,1,1,[],302.0,0,30201.0,0,0,0,0,1294483.113037,,7,3,0,False,['kubamracek'],"@swift-ci please test @swift-ci please test @swift-ci please testLGTM, thanks!","LGTM, thanks!","We did not have the libcxxshim.h and the modulemap in the embedded/ resource dir (only in macos/, etc.) previously. This should resolve compiler crashes when we need to emit calls to `__swift_interopStaticCast` while in Embedded Swift mode.

Attached testcase without this fix crashes the compiler with:
```
Assertion failed: (wrapperModule && ""CxxShim module is required when using members of a base class. "" ""Make sure you `import CxxShim`.""), function getInteropStaticCastDeclRefExpr, file ClangImporter.cpp, line 5205.
Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.
```
",
78146,2024-12-12T18:50:44Z,2024-12-13T01:31:11Z,compnerd,1,0,1,1,1,1,1,[],10258.0,0,24027.0,0,0,0,0,1305631.028189,,1,1,0,False,['compnerd'],@swift-ci please smoke test,,Windows core modules require the `-fbuiltin-headers-in-system-modules` flag to be passed to the clang importer. Adjust the build flags for the platform.,
78144,2024-12-12T18:49:03Z,2024-12-13T01:30:03Z,compnerd,1,0,1,10,2,1,1,[],10384.0,0,24061.0,0,0,0,0,1305698.258306,,1,1,0,False,['compnerd'],@swift-ci please smoke test,,"This is required for the non-Darwin targets as `SWIFT_THREADING_DARWIN` does not enable any additional code. However, that macro is used in other places that are not yet integrated. This was identified by building for Windows.",
78134,2024-12-12T03:52:59Z,2024-12-13T02:11:07Z,etcwilde,3,0,2,8,2,1,1,[],15.0,0,80289.0,0,0,0,0,1303234.559078,,1,2,0,False,['etcwilde'],@swift-ci please smoke test @swift-ci please test Linux @swift-ci please test Windows,,"Fixing some issues in the runtime build. The defaulted settings were not set right.
Also, not all of the ObjC files are actually ObjC or part of the ObjC interop. We need to build ErrorObject.mm and SwiftObject.mm as part of all builds or things don't link.",
78127,2024-12-12T00:14:59Z,2024-12-13T00:41:13Z,rintaro,4,2,3,573,14,2,1,[],7.0,0,87974.0,0,0,0,0,1308631.481848,,6,3,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test Linux,,"Added `StableHasher` in ASTGen. Mostly copied from `stdlib/public/core/Hasher.swift` and ``stdlib/public/core/SipHash.swift``

For now, interface hash / fingerprint are emitted during the AST generation, but it should really be a separate request. I will separate fingerprint things from `ParseSourceFileRequest` and `ParseMembersRequest` in followups

https://github.com/swiftlang/swift/issues/76527
rdar://117150870",I think we can delete these. I imagine we don't want to skip code blocks for statements in closures and `if`/`switch` expressions either
78103,2024-12-11T00:58:00Z,2024-12-13T00:29:18Z,nkcsgexi,5,4,2,96,4,2,1,[],18824.0,0,171079.0,0,0,0,0,1309345.550571,,5,2,0,False,['nkcsgexi'],@swift-ci please smoke test @swift-ci please smoke test linux @swift-ci please smoke test linux also cc: @slavapestov  @swift-ci please smoke test linux,,"rdar://141065994
","Could you also switch this to skipping emitting the trace for emit module actions, instead of querying lazy typechecking? Happy to make that change! Is there a canonical flag I can use from here? A `switch` over the `FrontendOptions::ActionType` for the job is probably the best way to comprehensively handle this. `FrontendOpts.RequestedAction`"
78140,2024-12-12T18:36:57Z,2024-12-13T00:22:27Z,compnerd,2,0,1,18,4,2,2,[],10.0,0,20731.0,0,0,0,0,1309756.760857,,2,1,0,False,['compnerd'],@swift-ci please test CC: @etcwilde ,,Windows prefers the `_strdup` extension over `strdup`. This avoids unnecessary warnings when building the standard library.,
77923,2024-12-03T17:12:06Z,2024-12-12T22:56:21Z,kubamracek,6,0,2,340,34,0,0,[],16937.0,0,798255.0,0,0,0,0,1314925.662458,,6,2,0,False,['kubamracek'],"@swift-ci please test https://github.com/swiftlang/swift/pull/77922

@swift-ci please test @swift-ci please test LLDB counterpart: https://github.com/swiftlang/llvm-project/pull/9496 https://github.com/swiftlang/llvm-project/pull/9496

@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9496

@swift-ci please test",,Continuing on <https://github.com/swiftlang/swift/pull/77115>. This is a follow-up that actually starts using the new `$e` mangling prefix when compiling in Embedded Swift mode.,
78128,2024-12-12T00:48:48Z,2024-12-13T00:11:13Z,artemcm,3,1,1,85,2,2,2,[],7.0,0,84148.0,0,0,0,0,1310430.978192,,3,1,0,False,['artemcm'],@swift-ci smoke test @swift-ci smoke test @swift-ci smoke test Linux platform,,"If a module is blocklisted from the compiler using its textual interface, then under Implicitly-Built modules it will not get indexed, since indexing will not be able to spawn swiftinterface compilation. With explicitly-built modules, none of the dependency modules get built from interface during indexing, which means we directly index input binary modules.

For now, for functional parity with Implicit Module Builds, disable indexing of modules during Explicit Module Builds which would not get indexed during Implicit Module Builds.",This blocklist is close enough but we'd have to add the problematic module. It's only on DowngradeInterfaceVerificationFailure as otherwise we don't use its swiftmodule by default.
78136,2024-12-12T08:25:09Z,2024-12-12T19:59:02Z,eeckstein,2,0,5,470,12,1,1,[],25.0,0,41637.0,0,0,0,0,1325561.265561,,2,5,0,False,['eeckstein'],@swift-ci test @swift-ci benchmarkLGTM,LGTM,"This is needed after running the SSAUpdater in loop-rotate, because the updater can insert unnecessary phis in the middle of the original liverange of a value which breaks up the original liverange into smaller ones:

```
   %1 = def_of_owned_value
   %2 = begin_borrow %1
   ...
   br bb2(%1)
 bb2(%3 : @owned $T): // inserted by SSAUpdater
   ...
   end_borrow %2      // use after end-of-lifetime!
   destroy_value %3
```

Fixes an ownership error.

Also, remove the replace-arg-with-struct peephole optimization from loop-rotate. It not belong to loop-rotate and does not work with OSSA. This peephole is covered by other optimizations.",
78101,2024-12-11T00:06:11Z,2024-12-12T17:07:29Z,xymus,2,0,1,86,3,1,1,[],43.0,0,153168.0,0,0,0,0,1330369.694051,,0,1,0,False,['xymus'],@swift-ci Please test @swift-ci Please test Linux,,"Update the logic selecting the most restrictive import for a given reference to account for `@_exported` imports from the local module. We should always prioritize `@_exported` imports from the local module over more restrictive same file imports. Only if an import from the same file is also public we prefer it as it's more useful for diagnostics and generally recommended to locally declare dependencies.

- Scope: Affects users of access-level on imports also using `@_exported` imports from Swift code.
- Risk: Low, this change allows to use more imported types in API so it only leads to less errors.
- Reviewed by @tshortli 
- Cherry-pick of #78005
- Resolves rdar://140924031",
78099,2024-12-10T23:53:54Z,2024-12-12T17:07:52Z,xymus,2,0,1,10,2,2,2,[],12.0,0,153765.0,0,0,0,0,1330509.96321,,0,1,0,False,['xymus'],@swift-ci please test @swift-ci Please test LinuxThank you for fixing this!,Thank you for fixing this!,"The Darwin module defines `memcmp` with optional pointers. Update SwiftShims to define it to the same type to avoid deserialization failures where we get one over the other and the types don't match anymore.

- Scope: Affects direct and indirect clients of `memcmp` on Darwin platforms. 
- Risk: Low, the signature change is source stable.
- Reviewed by @compnerd 
- Cherry-pick of #77964
- Resolves rdar://140596571",
78117,2024-12-11T18:40:11Z,2024-12-12T17:28:45Z,nkcsgexi,1,2,2,95,4,3,1,[],33.0,0,86186.0,0,0,0,0,1330512.376339,,0,2,0,False,['nkcsgexi'],@swift-ci please test,,"- Description: This change scopes down when and where we collect fine-grained module tracing. Firstly, we should collect trace only when full compilation is performed but not in jobs like emitting modules. Secondly, we should only collect fine tracing from those source files that the compiler job promises to perform full type checking on.
- Scope/Impact: Small. It only impacts on supplementary outputs for tracing ObjC message usages.
- Risk: Low
- Testing: updated regression tests
- Reviewed by: @tshortli
- Original PR: https://github.com/swiftlang/swift/pull/78103
- Radar: rdar://141065994",Might we want these to emit the fine-grained trace as well? Usually not. We are mostly interested in collecting objc message sends from the source files that are part of the project under compilation.
78137,2024-12-12T11:53:45Z,2024-12-12T11:53:52Z,hamishknight,1,0,1,2,1,0,0,[],21503.0,0,21504.0,0,0,0,0,1333181.850943,,1,1,0,False,['chrismiles'],Thanks Hamish.,,rdar://141328848,
74977,2024-07-04T23:02:03Z,2024-07-05T05:27:23Z,asl,1,0,1,69,4,1,1,['AutoDiff'],9.0,0,13887993.0,0,0,0,0,1336995.248151,,2,1,0,False,['asl'],@swift-ci please test,,"Fixes #74972

Optionals of address-only types are already handled in https://github.com/swiftlang/swift/pull/68300",
74985,2024-07-05T08:18:29Z,2024-07-12T04:48:00Z,asl,4,2,2,40,2,2,1,['AutoDiff'],8.0,0,13854601.0,0,0,0,0,1337001.650896,,1,2,0,False,['asl'],"@swift-ci please test So, the code in question looks like this:
```llvm
// square2(y:)
sil hidden [ossa] @$s3opt7square21yS2dSg_tF : $@convention(thin) (Optional<Double>) -> Double {
// %0 ""y""                                         // users: %14, %3, %1
bb0(%0 : $Optional<Double>):
  debug_value %0 : $Optional<Double>, let, name ""y"", argno 1 // id: %1
  %2 = metatype $@thin Double.Type                // user: %26
  switch_enum %0 : $Optional<Double>, case #Optional.some!enumelt: bb2, case #Optional.none!enumelt: bb1 // id: %3
...
// %13                                            // user: %26
bb2(%13 : $Double):                               // Preds: bb0
  switch_enum %0 : $Optional<Double>, case #Optional.some!enumelt: bb4, case #Optional.none!enumelt: bb3 // id: %14
...
// %24                                            // user: %26
bb4(%24 : $Double):                               // Preds: bb2
  // function_ref static Double.* infix(_:_:)
  %25 = function_ref @$sSd1moiyS2d_SdtFZ : $@convention(method) (Double, Double, @thin Double.Type) -> Double // user: %26
  %26 = apply %25(%13, %24, %2) : $@convention(method) (Double, Double, @thin Double.Type) -> Double // user: %27
  return %26 : $Double                            // id: %27
} // end sil function '$s3opt7square21yS2dSg_tF'
```

However, instead of adjoint accumulation (for `%0`) we just created new adjoint each time. Funny enough, adjoint buffer version for optionals of non-loadable types was correct – adjoint buffers were accumulated together.

Likely the non-optional `switch_enum` case is broken as well, I just do not have a testcase that directly exposes the problem. @swift-ci please test @swift-ci please testNice catch!",Nice catch!,Fixes #74978,"Update the comment? Yes, forgot to update here."
75459,2024-07-25T01:43:16Z,2024-07-27T00:04:26Z,asl,3,0,1,75,3,1,1,['AutoDiff'],10.0,0,12150306.0,0,0,0,0,1337010.954751,,1,1,0,False,['asl'],@swift-ci Please test Tagging @asavonic - please review Tagging @JaapWijnen ,,"  - Ensure it really accumulates the adjoint buffer
  - Handle Optional.none case when there is no value to propagate to

Fixes #75280",
77831,2024-11-25T18:42:08Z,2024-12-02T23:02:10Z,asl,3,0,1,52,2,1,1,['AutoDiff'],8.0,0,1461912.0,0,0,0,0,1337073.534591,,1,1,0,False,['asl'],@swift-ci please test Tagging @JaapWijnen  @swift-ci please smoke test,,"As autodiff happens on function types it is not in general possible to determine the real expansion context of the function being differentiated. Use of minimal context is a conservative approach that should work even when libraty evolution mode is enabled.

Fixes #55179
",
77869,2024-11-29T05:45:17Z,2024-12-02T18:29:37Z,asl,3,2,1,12,1,2,1,['AutoDiff'],126.0,0,1162917.0,0,0,0,0,1337079.998319,,2,1,0,False,['asl'],"It is a bit non-trivial to craft a standalone testcase for this as it happens within Testing context, where such conversions are added by a Framework.

The testcase is essentially:
```swift
import Testing
import _Differentiation

@inlinable
@derivative(of: min)
public func _vjpMin<T: Comparable & Differentiable>(
    _ lhs: T,
    _ rhs: T
) -> (value: T, pullback: (T.TangentVector) -> (T.TangentVector, T.TangentVector)) {
    func pullback(_ tangentVector: T.TangentVector) -> (T.TangentVector, T.TangentVector) {
        if lhs <= rhs {
            return (tangentVector, .zero)
        }
        else {
            return (.zero, tangentVector)
        }
    }
    return (value: min(lhs, rhs), pullback: pullback)
}

@Test
func testMin() {
    let vwgLessThan = valueWithGradient(at: 2.0, 3.0, of: min(_:_:))
    print(vwgLessThan.value == 2.0)
    print(vwgLessThan.gradient == (1.0, 0.0))
}
```

Here Testing creates an implicit conversion for `min` from `(Double, Double) -> Double` to @Sendable (Double, Double) -> Double` @swift-ci please test Tagging @JaapWijnen ",,,"There is also `ABISafeConversionExpr` which does the same thing for l-value types, in case that matters in some other case. Noted, thanks! I just do not have example in hand, but we'll see."
78093,2024-12-10T20:27:12Z,2024-12-12T15:10:58Z,aschwaighofer,2,0,1,85,2,1,1,[],20.0,0,153826.0,0,0,0,0,1342857.693357,,0,1,0,False,['aschwaighofer'],@swift-ci test @swift-ci test linux,,"Explanation: Relative references from context descriptors to types outside of the current module need to use indirect relative references. If direct relative references are used instead linking will fail.

Scope: This situation can occurr with alwaysEmitIntoClient functions returning opaque types combined with availability and the use of -enable-anonymous-context-mangled-names (which is enabled at Onone).

Reviewer: John M.

Original PR: https://github.com/swiftlang/swift/pull/78017

Risk: Low. Should only affect cases that would have previously failed to link.

rdar://140356479

(cherry picked from commit d31e4a574578271ace4ddfe3156d69963051adab)
",
77912,2024-12-03T07:32:11Z,2024-12-12T13:00:37Z,atrick,6,19,4,200,3,4,1,[],40.0,0,809981.0,1,0,0,0,1338003.855758,,1,4,0,False,"['atrick', 'milseman']","@swift-ci test @swift-ci test Be sure to underscore internal interface names. @swift-ci test @swift-ci test @swift-ci test`unsafeLifetime` should be `_unsafeLifetime`, but otherwise this is good. Thanks.","`unsafeLifetime` should be `_unsafeLifetime`, but otherwise this is good. Thanks.","`Commit #1`: Add unsafeLifetime APIs

Unsafely discard any lifetime dependence on the `dependent` argument. Return
a value identical to `dependent` with a new lifetime dependence on the
`borrows` argument.

This is required to enable lifetime enforcement in the standard library build.

`Commit #2`: Fix RawSpan initializer lifetime dependencies.

Two fixes are needed in most of the `RawSpan` and `Span` initializers. For example:

```
    let baseAddress = buffer.baseAddress
    let span = RawSpan(_unchecked: baseAddress, byteCount: buffer.count)
    // As a trivial value, 'baseAddress' does not formally depend on the
    // lifetime of 'buffer'. Make the dependence explicit.
    self = _overrideLifetime(span, borrowing: buffer)
```

`Fix #1`. baseAddress needs to be a variable

`span` has a lifetime dependence on `baseAddress` via its initializer. Therefore, the lifetime of `baseAddress` needs to include the call to `_overrideLifetime`. The override sets the lifetime dependency of its result, not its argument. It's argument still needs to be non-escaping when it is passed in.

Alternatives:

- Make the RawSpan initializer `@_unsafeNonescapableResult`.

  Any occurrence of `@_unsafeNonescapableResult` actually signals a bug. We never want to expose this annotation.

  In addition to being gross, it would totally disable enforcement of the initialized span. But we really don't want to side-step `_overrideLifetime` where it makes sense. We want the library author to explicitly indicate that they understand exactly which dependence is unsafe. And we do want to eventually expose the `_overrideLifetime` API, which needs to be well understood, supported, and tested.
  
- Add lifetime annotations to a bunch of `UnsafePointer`-family APIs so the compiler can see that the resulting pointer
  is derived from self, where self is an incoming `Unsafe[Buffer]Pointer`. This would create a massive lifetime
  annotation burden on the `UnsafePointer`-family APIs, which don't really have anything to do with lifetime
  dependence. It makes more sense for the author of `Span`-like APIs to reason about pointer lifetimes.
  
`Fix #2`: `_overrideLifetime` changes the lifetime dependency of span to be on an incoming argument rather than a local variable. This makes it legal to escape the function (by assigning it to self). Remember that self is implicitly returned, so the `@lifetime(borrow buffer)` tells the compiler that `self` is valid within `buffer`'s borrow scope.
","```suggestion
internal func _unsafeLifetime<T: ~Copyable & ~Escapable,
```
internal symbols should have a leading underscore. ```suggestion
internal func _unsafeLifetime<T: ~Copyable & ~Escapable,
``` I see that's commonly done. Was hoping to find out through review whether it's purely stylistic or whether there's an important reason for the underscore. We call this the [Leading Underscore Rule](https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#the-leading-underscore-rule), and it is a fundamental tool in managing the stdlib's public API surface. We strictly reserve non-underscored names for Swift Evolution approved public API; there are no exceptions, no ifs, no buts.

> This rule ensures we don't accidentally clutter the public namespace with @usableFromInline things (which could prevent us from choosing the best names for newly public API later), and it also makes it easy to see at a glance if a piece of stdlib code uses any non-public entities.

Note that things declared purely internal/private or `@_alwaysEmitIntoClient` have a remarkable tendency to end up shipping as `@usableFromInline internal` or even `public`. Our insistence on applying the Leading Underscore Rule _everywhere_ protects us from massive pain, as it forces every adopter to use underscored names right from the start.

As a general rule, no API survives the Swift Evolution process unchanged. By forcing early clients to consistently use underscored names, we allow the S-E process to experiment with arbitrarily renaming/rearranging things without forcing all those prototyping use cases to immediately go through a confusing migration process after every change.
 In documentation, we refer to arguments by their names, not their call-site labels. The argument is called `source`, not `borrows`.

```suggestion
/// borrow scope of the `source` argument.
```

There is also a fundamental problem with this documentation -- ""a lifetime dependency on the caller's borrow scope of the `source` argument"" is an incredibly opaque phrase. We must find a cromulent and succinct way to describe this behavior, as we will need to use it repeatedly. This does not belong in the documentation comment; it needs to be moved to a regular comment within the function body. (To avoid interfering with limited documentation tools, regular comments cannot be placed in between a function and its documentation.) ```suggestion
/// the `source` argument.
``` Oh, I like the rule. Just wanted to test it because I recently heard that feature guards made the rule obsolete. But we still have
- guard against accidental visibility
- stylistically very helpful ```suggestion
/// Transferring generic lifetime dependencies from `source` requires the
/// result to have the same type.
```

I can' understand this sentence. What does it mean in practice? Is there a reason a local variable needs to be created for this trivial expression? This does not belong in the documentation comment; it needs to be moved to a regular comment within the function body. (To avoid interfering with limited documentation tools, regular comments cannot be placed in between a function and its documentation.) The stdlib uses a [very particular indentation style](https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#line-breaking
); please do not deviate from it.

The stdlib (and adjacent codebases) never align continuation lines on arbitrary columns like the declaration of `U` above.

> Our primary rule is that if we need to insert a line break anywhere in the middle of a list (such as arguments, tuple or array/dictionary literals, generic type parameters, etc.), then we must go all the way and put each item on its own line, indented by +1 unit, even if some of the items would fit on a single line together.
> [...]
> For lists that have delimiter characters ((/), [/], </>, etc.), we prefer to put a line break both after the opening delimiter, and before the closing delimiter. However, within function bodies, it's okay to omit the line break before the closing delimiter.

```suggestion
internal func _unsafeLifetime<
  T: ~Copyable & ~Escapable,
  U: ~Copyable & ~Escapable
>(
  dependent: consuming T, borrows source: borrowing U
) -> T {
``` ```suggestion
internal func _unsafeLifetime<
  T: ~Copyable & ~Escapable,
  U: ~Copyable & ~Escapable
>(
  dependent: consuming T, dependsOn source: borrowing U
) -> T {
``` Deleted. That sentence no longer applies to the current form. The `baseAddress` variable is the source of a lifetime dependence. Assigning it to a variable gives it a lexical scope. The lifetime of an expression ends after evaluation of the expression. To be absolutely clear:
```
    let baseAddress = buffer.baseAddress
    let span = RawSpan(_unchecked: baseAddress, byteCount: buffer.count)
    self = _overrideLifetime(span, borrowing: buffer)
```
`overrideLifetime` changes the lifetime of `span` at the point it is evaluated. It does not change the lifetime of `baseAddress`. And `span` cannot escape its original dependence before it is passed to `overrideLifetime`. So, the `Span` initializer itself needs to have a well-formed lifetime dependence (it is not marked `@_unsafeNonescapableResult`) I updated the commit log and PR comments. Does this mean that if you created `span` by calling `RawSpan(_unchecked: buffer.baseAddress, byteCount: buffer.count)`, that `span`'s lifetime would be limited to essentially just that initialization statement? Yes, the Span initializer says that it ""borrows"" the base address. If the base address is a sub-expression then the initializer borrows the temporary result of the sub-expression, which is only valid in the expression in which it is used. Here, baseAddress is a computed property, so the compiler just sees an expression. It doesn't know that baseAddress actually is a member of buffer."
77281,2024-10-29T20:03:27Z,2024-12-12T11:15:44Z,usama54321,10,7,8,186,11,2,1,[],22.0,0,3769940.0,0,0,0,0,1356969.330435,,4,8,0,False,['usama54321'],"@swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci testI only found a few minor comments. Can you please update the comment for `struct FilenameAndLocation`:
```
  /// In future we might also use it for de-serialized locations from a
  /// swiftmodule file.
```
The future is now 🙂","I only found a few minor comments. Can you please update the comment for `struct FilenameAndLocation`:
```
  /// In future we might also use it for de-serialized locations from a
  /// swiftmodule file.
```
The future is now 🙂",This PR serializes/deserializes source locations for instructions.,"Can you please add a comment why this is done? We should consider merging this with the function above and either update the call sites to explicitly state ""explicit"" or have a default argument. same here Is this a DenseMap of consecutive Int keys? If yes, why can't this a vector? maybe explicitly list all the cases so we get a warning when a new one is added. Can you add a short comment explaining the strategy of serializing a sourceloc only the first time it appears and referencing this first sourceloc for successive appearances. This looks like it's working around incomplete serialization?"
78114,2024-12-11T16:18:50Z,2024-12-12T09:24:18Z,MaxDesiatov,1,0,1,2,1,1,1,['swift macro'],15.0,0,61530.0,0,0,0,0,1363657.842593,,2,1,0,False,['MaxDesiatov'],"https://github.com/swiftlang/swift-syntax/pull/2915

@swift-ci test",,"Depends on https://github.com/swiftlang/swift-syntax/pull/2915

The `main` method on `CompilerPluginMessageListener` in SwiftSyntax can synchronously clean up resources that cannot be dealt with in a deinitializer due to possible errors thrown during the clean up. Usually this includes closure of file handles, sockets, shutting down external processes and IPC resources set up for these processes, etc.",
78038,2024-12-07T02:47:43Z,2024-12-11T21:32:07Z,finagolfin,4,0,1,2,1,1,1,[],44.0,0,449005.0,0,0,0,0,1370449.961903,,0,1,0,False,['finagolfin'],"@swift-ci please test @swift-ci please test windows @swift-ci test windows @shahmishal, passed CI (this pull does nothing on Windows, which doesn't use `build-script`), wdyt?I'm fine with removing this unused library. It's not something we've advertised or maintained, and is unlikely to have any clients.","I'm fine with removing this unused library. It's not something we've advertised or maintained, and is unlikely to have any clients.","__Explanation:__ This installed library in the toolchain has been [unused on linux](https://github.com/swiftlang/swift/pull/77647#issue-2662354785) and [macOS](https://github.com/swiftlang/swift/pull/77647#issuecomment-2480524069) for years.

__Scope:__ Remove a single unused library from the linux and macOS toolchains

__Issue:__ None

__Original PRs:__ #77647

__Risk:__ Very low

__Testing:__ Passed all CI on trunk

__Reviewer:__ @bnbarham

@DougGregor, another unused library cleanup.",
78047,2024-12-07T21:23:16Z,2024-12-12T00:45:46Z,chrismiles,1,0,1,1107,39,1,1,['playground transform'],60.0,1,357751.0,0,0,0,0,1394771.696609,,1,1,0,False,['chrismiles'],@swift-ci Please smoke testLooks great!,Looks great!,"Defines the `%target-playground-build-run-swift macro` in the local lit config for PlaygroundTransform which contains all the boilerplate code used by most PlaygroundTransform tests:
* Build a PlaygroundSupport module
* Build the test source into an executable, linking PlaygroundSupport
* Codesign and run the executable

All the relevant PlaygroundTransform tests were updated to use the new macro.

rdar://141101900",
78109,2024-12-11T11:42:16Z,2024-12-11T21:40:58Z,meg-gupta,1,0,1,63,3,1,1,[],10.0,0,35922.0,0,0,0,0,1405862.141936,,4,1,0,False,['meg-gupta'],@swift-ci test,,"In preparation for enabling ossa modules, provide a way to disable ownership verification via blocklist.",
78084,2024-12-10T15:58:06Z,2024-12-11T22:25:23Z,egorzhdan,2,0,3,79,4,2,2,['c++ interop'],8.0,0,109639.0,0,0,0,0,1403195.876034,,0,3,0,False,['egorzhdan'],@swift-ci please test @swift-ci please test,,"**Explanation**: When compiling with C++ interop enabled, we enable extra safety checks to prevent library authors from accidentally exposing ABI-fragile C++ symbols in resilient Swift interfaces. The heuristic we use is overly strict, and it prevents the compiler from being able to typecheck various modules from their interfaces when C++ interop is enabled. Darwin and System are two of such modules. This relaxes the heuristic to allow exposing C-like structs, as well as constructors and fields of such structs in resilient interfaces.
**Scope**: Changes the resilience validation mechanism in the typechecker.
**Risk**: Low, this doesn't change the binaries that are produced by the compiler in any way.
**Issue**: rdar://140203932 & rdar://141124318
**Reviewer**: @Xazax-hun @tshortli 

Original PRs: https://github.com/swiftlang/swift/pull/78022 & https://github.com/swiftlang/swift/pull/78057",
78098,2024-12-10T23:28:25Z,2024-12-11T21:37:59Z,justice-adams-apple,1,0,1,10,1,2,2,[],24.0,0,79776.0,0,0,0,0,1406039.989603,,0,1,0,False,['justice-adams-apple'],@swift-ci please smoke test,,"Color diagnostics were added to cmake properly with:
https://gitlab.kitware.com/cmake/cmake/-/merge_requests/9365

We don't need these checks with CMake 3.30",
77387,2024-11-05T06:43:02Z,2024-12-11T21:36:56Z,hnrklssn,8,30,1,377,10,3,0,[],773195.0,0,3164035.0,0,0,0,0,1406106.450275,,10,1,0,False,"['DougGregor', 'hnrklssn']","With luck, https://github.com/swiftlang/swift/pull/77580 should make the rebased version of this PR functional. I'm sure I missed something there, though. > With luck, #77580 should make the rebased version of this PR functional. I'm sure I missed something there, though.

Indeed, it works now! I'll start addressing the rest of the comments. > What is the difference between a language feature and and a flag?

There's a bunch of machinery around language features and their lifecycle that we don't get from a one-off flag. Plus, flags need to be manually handled in the driver, whereas language features are already available. @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test After all the iterations of rebasing most of the intermediate commits didn't build anymore, and many contained a bunch of code that's removed in later commits, so I squashed them @swift-ci please smoke test Windows",,"This results in an automatic wrapper function with safe pointer types
when the imported function has bounds attributes. This exercises similar
pathways as the recently added functionality for specifying macros from
swift_attr, and fixes some bugs related to macro source file management.

Includes some unmerged commits from #76969.
","What is the main motivation to make this a compile time flag rather than just a runtime switch for the compiler? Nit: I think usually `= default;` is preferred over `{}`. Although I do not expect a difference in this particular case. I presume `Clang` also has a representation of this information. Any reason we cannot reuse Clang's classes for that instead of rolling our own? E.g., we could just reuse `CountAttributedType` and add a custom print function for it.   Could this be an assert? Do we ever expect this function to be invoked on something that does not have a clang declaration or the clang declaration is not a function declaration? The flag mainly controls whether `@PointerBounds` is included in the standard library. So a runtime switch wouldn't work for the cases where the stdlib doesn't contain the macro. We could do that, but we would need to make it a pair with both `CountAttributedType` and pointer index. When we add `DynamicRangeType` we also need the pointer index for the end pointer. Another option would be to not build a `SmallVector` at all, and print on the first pass. Not sure whether initialising `MacroString` and the outputstream when there are no bounds annotations to process is preferable. I guess if it turns out to be a problem we could mark functions for later bounds importing when we initially process parameters and encounter a bounds attribute? I found this comment in another function:
```
  // sourceDecl->getClangDecl() can be null because some lazily instantiated cases like C++ members that were instantiated from using-shadow-decls have no corresponding Clang decl.
```
My main motivation was that it is how `importSwiftAttrAttributes()` does it however, and the same argument is passed to both functions. Any reason we want to keep this out of stdlib by default? My main concern is that we are not really testing this in the CI if this is off by default (unless we make this on in the CI).  I mostly followed what other experimental features did, so I'm not married to the approach. But I do have a concern that we'll want to make breaking changes to the macro API, so we need some way of making it clear that users shouldn't use this macro directly and expect source compatibility.
Note that this particular change is from https://github.com/swiftlang/swift/pull/76969, so we might want to take the discussion there. Ah, I see. So Swift has no mechanism equivalent to ""unstable"" features and APIs in Rust that can break any time? Now I better understand the motivation and if that is the case (no alternative), I am OK with this approach.  I'm not sure tbh, I'm completely new to swift. @DougGregor could you fill us in? Added a commit with another approach, please let me know what you think We have a mechanism for unstable language features but not unstable APIs. Unstable APIs would require a lot more design in Swift because it has a stable ABI: if an ""unstable"" API made it into a Swift release, it's effectively stable because of the ABI. This flag doesn't seem to exist in Clang, is there a change missing either here or there? Also, if we need to pass along a Clang flag, I'd rather tie it to a Swift experimental feature instead of this `#define` We'll also want to be able to handle Clang's ObjCMethodDecl IIRC, we already handle the parsing of custom swift_attr attributes. Can't we ride off of that code instead? Should this be part of the general type import logic, to identify count-attributed types generally? This is going to be part of the bounds safety upstreaming effort Perhaps, I'd have to take a look at it. Where do I find that? The reason I'm not certain that's helpful for this case is that we still want to process an entire function decl and its parameters + return type all at once, to construct the singular `@PointerBounds` macro invocation. So the advantage here is that we know it's a parameter and how to get the parent function. As in generate a swift_attr and attach it to the decl, or break out the parsing to a common function? Ah, okay. So that's an llvm-project change that allows the use of the `counted_by`, `sized_by`, etc. Clang attributes in headers outside of `-fbounds-safety`, right? We have the notion that a `swift_attr`'s contents go into a Swift source file so the Swift parser can process it. That's how https://github.com/swiftlang/swift/pull/76364 makes `swift_attr` work, for example. I'd like to leverage that existing code. I'm thinking about `ClangImporter::Implementation::importType`, which is what recursively walks a Clang type to transform it. The result is an `ImportedType`, which can carry additional information about things it saw along the way. For example, the `isIUO` bit is for places where we should have an implicitly-unwrapped optional, which is similar to the ""has pointer bounds"" info you are capturing here. Making this something that `ImportedType` tracks will make it easier to check that bit for (e.g.) all of the parameter and result types of a function or ObjC method, property, etc. Indeed! It is more relaxed in it's rules for bounds safety annotations, letting you assign to a safe pointer from an unsafe type etc, making it easier to do a partial adoption for external consumers like Swift or C++ interop. That's what I mean. The code snippet you commented is copied from `importSwiftAttrAttributes()`. So to reuse it as shared code, the options would be to either process bounds attributes first and attach the result as a swift_attr, or extract the duplicated code into a helper function. I'll take a look Right, so implicitly applying the macro on import could be an unstable language feature, but there's no way to include the macro in the stdlib in an ""unstable"" way, meaning that has to be stabilised before the importing? Running into some issue with missing SourceLocation during SILGen for methods, even after the `open`->`public final` transform, so punting ObjC to a follow-up. I tried putting it in `ImportedType`, but it ended up not being useful, as nested pointers are imported using `importTypeIgnoreIUO` which throws away the `ImportedType`. While we don't support nested pointers right now, it seems like something worth doing the right way from the beginning."
78085,2024-12-10T16:11:08Z,2024-12-11T19:49:30Z,tshortli,3,0,1,136,5,1,1,"['🍒 release cherry pick', 'swift 6.1']",11566.0,0,103193.0,0,0,0,0,1408862.459373,,0,1,0,False,['tshortli'],@swift-ci please test @swift-ci please test Linux @swift-ci please test Linux,,"- **Explanation:** Recent refactoring fixed a bug in availability checking that affected code where a universally unavailable context is nested inside a context that is unavailable on the current platform. Previously, the nested context would be treated as if it were only unavailable on the platform, which is incorrect since universal unavailability supersedes platform specific unavailability. Fixing this bug caused a source compatibility issue, though, because it changed the rules for which declarations are available to the affected contexts. To preserve source compatibility, this change relaxes the rules that control which declarations are available in universally unavailable contexts, which is a good change to make anyways since the previous rules were not logically consistent.
- **Scope:** Relaxes availability checking diagnostics in contexts that are universally unavailable. 
- **Issue/Radar:** rdar://141124478
- **Original PR:** https://github.com/swiftlang/swift/pull/78077
- **Risk:** Since this is a relaxation of type checker diagnostics, it only accepts more code which lowers the risk of regression.
- **Testing:** New tests in the test suite.
- **Reviewer:** @artemcm 
",
78051,2024-12-09T02:18:29Z,2024-12-11T17:37:31Z,2horse9sun,3,0,1,1,1,1,1,[],53386.0,0,242131.0,0,0,0,0,1406283.470982,,0,1,0,False,"['DougGregor', '2horse9sun']","@swift-ci please smoke test > Huh, this code isn't exercised anywhere in the compiler. The fix looks good, thanks!

The tests are all green. Is it okay to merge these 2 PRs? Will them be released to swift 5.9 or swift 6? > > Huh, this code isn't exercised anywhere in the compiler. The fix looks good, thanks!
> 
> The tests are all green. Is it okay to merge these 2 PRs?

I've merged them.

> Will them be released to swift 5.9 or swift 6?

Neither. The `main` branch doesn't have a specific release schedule yet. To get into an earlier release, it would need to be cherry picked as described at https://forums.swift.org/t/swift-6-1-release-process/75442. So far, these changes don't have any user-visible effect that I can see, so I don't see why they would need to be cherry-picked.
Huh, this code isn't exercised anywhere in the compiler. The fix looks good, thanks!","Huh, this code isn't exercised anywhere in the compiler. The fix looks good, thanks!","<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->

This PR is related to a [previous one](https://github.com/swiftlang/swift/pull/78009). Feel free to review them together. 

# Changes

Set `NeedBitValueComma` to true during `bitSetMatch()`. Otherwise, the output will not be separated by comma if a bit set match multiple cases.

# Rationale

I'm trying to extract the Swift and Objective-C AST into separate JSON files. During the extraction, I take advantage of swift's JSONSerialization tools to perform the mapping from AST nodes to json objects. The following demo is a simplified version of what I'm doing:

```c++
// Map Decl::ObjCDeclQualifier into json
template <>
struct ScalarBitSetTraits<Decl::ObjCDeclQualifier> {
    static void bitset(Output &out, Decl::ObjCDeclQualifier &kind) {
        out.bitSetCase(kind, ""none"",   Decl::ObjCDeclQualifier::OBJC_TQ_None);
        out.bitSetCase(kind, ""in"",   Decl::ObjCDeclQualifier::OBJC_TQ_In);
        out.bitSetCase(kind, ""inout"",   Decl::ObjCDeclQualifier::OBJC_TQ_Inout);
        out.bitSetCase(kind, ""bycopy"",   Decl::ObjCDeclQualifier::OBJC_TQ_Bycopy);
        out.bitSetCase(kind, ""byref"",   Decl::ObjCDeclQualifier::OBJC_TQ_Byref);
        out.bitSetCase(kind, ""oneway"",   Decl::ObjCDeclQualifier::OBJC_TQ_Oneway);
        out.bitSetCase(kind, ""cs_nullability"",   Decl::ObjCDeclQualifier::OBJC_TQ_CSNullability);
    }
};

int main(int argc, const char *argv[]) {
    std::error_code stream_error;
    llvm::raw_fd_ostream outputStream(StringRef(""-""), stream_error);
    Output serializer(outputStream, {}, false);
    serializer.beginObject();
    Decl::ObjCDeclQualifier value = static_cast<Decl::ObjCDeclQualifier>(0x7);
    serializer.mapRequired(""key"", value);
    serializer.endObject();
    return 0;
}
```

Since the `value` is 0x7 which matches the following cases: `OBJC_TQ_None`, `OBJC_TQ_In` and `OBJC_TQ_Inout`, the output should be: ""none"", ""in"" and ""inout"" separated by comma. However, when I run the demo, the output is:

```bash
{""key"":[""none""""in""""inout""]}
```

It turns out that `NeedBitValueComma` is not set to true after the first match. It works fine if the value matches only one case. However, the value is a bit set and it might match multiple cases which causes the issue. Then I modify the source code of `JSONSerialization.cpp` by setting `NeedBitValueComma` to true:

```c++
bool Output::bitSetMatch(const char *Str, bool Matches) {
  if (Matches) {
    if (NeedBitValueComma) {
      Stream << ',';
      if (PrettyPrint)
        Stream << ' ';
    }
    llvm::StringRef StrRef(Str);
    scalarString(StrRef, true);
// Set to true
    NeedBitValueComma = true;
  }
  return false;
}
```

After that, it works and the json serialization results are correct.",
78102,2024-12-11T00:50:06Z,2024-12-11T18:24:11Z,meg-gupta,1,0,1,33,1,1,1,[],12.0,0,63245.0,0,0,0,0,1417674.570613,,3,1,0,False,['meg-gupta'],@swift-ci test ,,Verify ownership whenever verifying a SILFunction/SILValue/SILModule in no-asserts build. ,
78081,2024-12-10T01:38:27Z,2024-12-11T19:08:37Z,nate-chandler,5,0,6,190,6,1,1,[],61865.0,0,149414.0,0,0,0,0,1415004.594703,,0,6,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test linux platform @swift-ci please test windows platform @swift-ci please test linux platform @swift-ci please test linux platform,,"**Explanation**: Support ending lifetimes of scoped addresses.

Currently, there are two permitted levels of validity of a value's lifetime in SIL: incomplete and complete.  If a value has an incomplete lifetime, it is consumed on every function-exiting path; it is not consumed on at least one unreachable-terminated path.  If a value has a complete lifetime, it is consumed on every path in the function, whether function-exiting or unreachable-terminated.  An invalid lifetime which only lacks consuming uses on some function-exiting paths (""underconsumed"") can be made valid by inserting consuming uses in such paths.

The SIL utility `OSSALifetimeCompletion` ends the lifetimes of various SSA values, ensuring that the value has a consuming use on every path in the function.  The utility transforms underconsumed and incomplete lifetimes into complete lifetimes.  It is run after SILGen on all values and by a number of passes which introduce values.  SILGen produces incomplete lifetimes.  The values introduced by passes may be underconsumed.  Currently, passes also cause previously complete lifetimes to become incomplete.  The utility transforms both incomplete and underconsumed lifetimes into complete lifetimes.

Previously, the utility didn't produce scope ends for scoped addresses (the results of the `store_borrow` and `begin_access` instructions).  When completing all incomplete lifetimes in a function, this would result in verification errors when an inner lifetime (e.g. that of the value produced by a `load_borrow`) was completed but the outer lifetime (e.g. that of a `store_borrow`) was not.  It would also prevent the utility from being used by passes which introduced `store_borrow`s and `begin_access`es.

Here, the utility is enhanced to also complete the scopes of such addresses.  The utility requires the liveness of the value being completed.  For values (i.e. not addresses), the utility relies on `InteriorLiveness`.  That tool cannot be used for scoped addresses--it's only for values, not addresses.  The preexisting `ScopedAddressValue::computeTransitiveLiveness` function, however, provides exactly the right liveness.

**Scope**: Affects optimized code.
**Issue**: rdar://141037060
**Original PR**: https://github.com/swiftlang/swift/pull/78034
**Risk**: Low.  The lifetime discovery is done via a preexisting utility.
**Testing**: Added tests.
**Reviewer**: Meghana Gupta ( @meg-gupta )
",
78054,2024-12-09T11:26:47Z,2024-12-11T19:07:25Z,eeckstein,4,3,10,708,23,2,0,[],35.0,0,200441.0,0,0,0,0,1415077.766508,,2,10,0,False,"['meg-gupta', 'eeckstein']",@swift-ci test @swift-ci benchmark Awesome! I left some minor comments but this LGTM! @swift-ci test,,"Several (relatively) small optimization improvements to better deal with OSSA:

* GlobalPropertyOpt: handle `load_borrow` and `destroy_addr`
* COWArrayOpt: handle `load_borrow`
* LoopRotate: handle `copy_value` and `begin_borrow` correctly
* LoopRotate: don't rotate a loop if the new header is loop exiting as well
* LICM: (limited) support for OSSA
* SimplifyDestructure: canonicalize `destructure_tuple` and `destructure_struct` for trivial tuples/structs
* simplify `load_borrow`
* remove `begin_borrow` if the borrowed value is a `thin_to_thick_function`
* run `begin_borrow` simplification in SILCombine

For details see the commit messages.

This is part of fixing benchmark regressions when enabling OSSA modules.
rdar://139773406","Looks like `ThinToThickFunctionInst` always produces values of none ownership. I am not sure if the borrowedValue can ever be `ThinToThickFunctionInst `. Can you add a test and move this to a separate commit if this is intended ? Can you ensure there are tests covering other ownership instructions without side-effects ? `load_borrow`/`destructure_struct`/`destructure_tuple` etc  I added a few tests - for instructions which really don't work if hoisted out of the loop.
This check is currently overly conservative. E.g. it is possible to hoist guaranteed values out of the loop.
Let's improve that when we convert the whole LICM optimization to OSSA."
78009,2024-12-06T08:39:09Z,2024-12-11T17:37:49Z,2horse9sun,2,0,1,6,1,1,1,[],8.0,0,464320.0,0,0,0,0,1420458.829042,,0,1,0,False,"['DougGregor', '2horse9sun']",@swift-ci Please test @swift-ci please smoke test,,"<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->

# Changes

In `JSONSerialization.h`, if I map an enum into json by implementing `ScalarBitSetTraits::bitset()` method, the result of the logical operation of two enums (which is int) will be assigned to an enum, which causes the compile error.

The changes are:
* Use `static_cast<T>` to convert the result in all `bitset` related methods.

# Rationale

I'm trying to extract the Swift and Objective-C AST into separate JSON files. During the extraction, I take advantage of swift's JSONSerialization tools to perform the mapping from AST nodes to json objects. However, some compile errors occur during the process. The following demo is a simplified version of what I'm doing:

```c++
// Map Decl::ObjCDeclQualifier into json
template <>
struct ScalarBitSetTraits<Decl::ObjCDeclQualifier> {
    static void bitset(Output &out, Decl::ObjCDeclQualifier &kind) {
        out.bitSetCase(kind, ""none"",   Decl::ObjCDeclQualifier::OBJC_TQ_None);
        out.bitSetCase(kind, ""in"",   Decl::ObjCDeclQualifier::OBJC_TQ_In);
        out.bitSetCase(kind, ""inout"",   Decl::ObjCDeclQualifier::OBJC_TQ_Inout);
        out.bitSetCase(kind, ""bycopy"",   Decl::ObjCDeclQualifier::OBJC_TQ_Bycopy);
        out.bitSetCase(kind, ""byref"",   Decl::ObjCDeclQualifier::OBJC_TQ_Byref);
        out.bitSetCase(kind, ""oneway"",   Decl::ObjCDeclQualifier::OBJC_TQ_Oneway);
        out.bitSetCase(kind, ""cs_nullability"",   Decl::ObjCDeclQualifier::OBJC_TQ_CSNullability);
    }
};

int main(int argc, const char *argv[]) {
    std::error_code stream_error;
    llvm::raw_fd_ostream outputStream(StringRef(""-""), stream_error);
    Output serializer(outputStream, {}, false);
    serializer.beginObject();
    Decl::ObjCDeclQualifier value = Decl::ObjCDeclQualifier::OBJC_TQ_None;
    serializer.mapRequired(""key"", value);
    serializer.endObject();
    return 0;
}
```

The above demo is built as a swift tool (the detail is omitted). When I run the demo, the compiler complains that: 
```bash
error: assigning to 'clang::Decl::ObjCDeclQualifier' from incompatible type 'int'
      Val = Val | ConstVal;
```

It turns out that `Decl::ObjCDeclQualifier` is enum but the result of `Val | ConstVal` is int. That seems to be the root cause of the error. Then I modify the source code of `JSONSerialization.h` by statically cast the result:

```c++
  template <typename T>
  void bitSetCase(T &Val, const char* Str, const T ConstVal) {
    if (bitSetMatch(Str, (Val & ConstVal) == ConstVal)) {
      Val = static_cast<T>(Val | ConstVal);
      // Val = Val | ConstVal;
    }
  }
```

After that, it works and the json serialization results are correct.",
78013,2024-12-06T14:43:51Z,2024-12-11T14:44:53Z,marcprux,12,0,2,9,1,1,1,[],11023.0,0,432397.0,0,0,0,0,1430500.075414,,0,2,0,False,"['marcprux', 'shahmishal', 'finagolfin']","@swift-ci please smoke test > Add the x86_64 preset too?

Done: https://github.com/swiftlang/swift/pull/78013/commits/0107a555cd602ebf8ce03115553d1d4434af6a42 @swift-ci please smoke test @swift-ci please smoke test linux @swift-ci please smoke test linux @swift-ci please smoke test windows @swift-ci please test windows @shahmishal, something wrong with the Windows CI? I can't seem to get it to run on this pull and a few others. @swift-ci please test windows @finagolfin This should be fixed for all Windows PR testing. Please try again. @swift-ci please test windows Thanks, @shahmishal, working again.Add the x86_64 preset too?",Add the x86_64 preset too?,"Pursuant to https://github.com/swiftlang/swift-community-hosted-continuous-integration/pull/55, this change removes `skip-early-swiftsyntax`, which we need for the Android build. It also removes the static stdlib build, which I was having issues with (I anticipate they will be added back later once the Android CI starts building successfully and I can further diagnose).",
78091,2024-12-10T19:28:59Z,2024-12-11T16:42:04Z,aschwaighofer,1,0,1,39,3,1,1,[],7.0,0,76385.0,0,0,0,0,1423804.084343,,1,1,0,False,['aschwaighofer'],@swift-ci testlgtm,lgtm,"This enables access enforcement analysis to classify a dynamic begin_access in access patterns (such as the one below) involving a throwing function as not having nested conflicts.

```
struct Stack {
  var items : [UInt8]

  mutating func pop() throws -> UInt8 {
    guard let item = items.popLast() else { throw SomeErr.err }
    return item
  }
  ...
}

class Container {
  private var ref : Stack

  @inline(never)
  internal func someMethod() throws {
     try ref.pop()
  }
  ...
}
```
rdar://141182074",
78086,2024-12-10T16:36:46Z,2024-12-11T14:38:39Z,rmaz,6,2,1,86,2,2,1,[],29.0,0,79334.0,0,0,0,0,1431190.195589,,1,1,0,False,['rmaz'],@swift-ci please smoke test Linux Platform @swift-ci please test Windows Platform @swift-ci please smoke test macOS Platform @swift-ci please smoke test macOS Platform @swift-ci please test @swift-ci please test,,"Duplicate module names on search paths produces an error, but providing duplicate module names in a Swift explicit module map file does not, instead the first entry will be chosen. Modify the module map parser to error on duplicated module names as well.
","Minor, but snake case is not used for variables:
```suggestion
    bool didInsert;
``` Maybe it would be easier to read using `split-file`

```
// RUN: split-file %s %t
// RUN: sed -e ""s|TEMP_DIRECTORY|%/t|g"" %t/inputs/map_with_duped_swift_module.json.template > %t/inputs/map_with_duped_swift_module.json
// ...

//---foo.swift
public func foo() {}

//---inputs/map_with_duped_swift_module.json.template
[{
  ""moduleName"": ""Foo"",
  ""modulePath"": ""TEMP_DIRECTORY/inputs/Foo.swiftmodule"",
  ""docPath"": ""TEMP_DIRECTORY/inputs/Foo.swiftdoc"",
  ""sourceInfoPath"": ""TEMP_DIRECTORY/inputs/Foo.swiftsourceinfo"",
  ""isFramework"": false
},
...
```"
78096,2024-12-10T22:46:00Z,2024-12-11T13:07:58Z,meg-gupta,2,0,1,68,5,2,2,[],3597.0,0,51718.0,0,0,0,0,1436652.220673,,1,1,0,False,['meg-gupta'],"@swift-ci test @swift-ci testlgtm!

Maybe we should add a check to the verifier that passes must not leave unreachable blocks behind.","lgtm!

Maybe we should add a check to the verifier that passes must not leave unreachable blocks behind.",Inlining can lead to unreachable blocks which can cause false verification errors downstream. Remove unreachable code so we don't run  into such issues. ,
78064,2024-12-09T18:24:39Z,2024-12-11T12:11:42Z,meg-gupta,4,0,1,35,2,1,1,[],7.0,0,150423.0,0,0,0,0,1440028.457652,,0,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test @swift-ci smoke test macOS Platform  @swift-ci test macOS Platform,,"Explanation:  ConditionForwarding is able to handle owned values and non-local guaranteed values. Remove incorrect assertion about enum trivialiaty
Scope: Fixes crash ConditionForwarding running on OSSA in asserts build 
Original PR: https://github.com/swiftlang/swift/pull/77992 
Risk: Very Low
Testing: Swift CI testing
Reviewed by: @nate-chandler 
Issue: rdar://140977875",
78095,2024-12-10T22:37:13Z,2024-12-11T09:48:53Z,slavapestov,1,0,1,4,1,1,1,[],7.0,0,40300.0,0,0,0,0,1448599.369638,,1,1,0,False,['slavapestov'],@swift-ci Please smoke test,,,
78044,2024-12-07T18:37:52Z,2024-12-10T19:12:47Z,AnthonyLatsis,2,0,1,13,4,2,2,[],193470.0,0,320392.0,0,0,0,0,1442068.473551,,8,1,0,False,"['AnthonyLatsis', 'xedin']",@swift-ci please test @swift-ci please test,,"Context: https://github.com/swiftlang/swift/pull/68438#discussion_r1449272860
",
78106,2024-12-11T06:49:18Z,2024-12-11T06:49:47Z,atrick,0,0,1,2,1,0,0,[],,0,33.0,0,0,0,0,1459341.495503,,0,1,0,False,[],,,"Add REQUIRES: executable_test

Fixes rdar://141008973 (🟠 OSS Swift CI:
oss-swift_tools-RA_stdlib-DA_test-device-non_executable failed: test: SILOptimizer/propagate_opaque_return_type.swift (exit code 2))

(cherry picked from commit 1202dd8cff074c4a707c094d9f8b4c9510f06bcc)
",
78059,2024-12-09T16:22:04Z,2024-12-11T05:18:05Z,eeckstein,5,0,5,883,19,0,0,[],39.0,0,132965.0,0,0,0,0,1464845.575887,,3,5,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark @swift-ci test @swift-ci benchmark @swift-ci test,,"It hoists `destroy_value` instructions  without shrinking an object's lifetime.
This is done if it can be proved that another copy of a value (either in an SSA value or in memory) keeps the referenced object(s) alive until the original position of the `destroy_value`.
```
  %1 = copy_value %0
  ...
  last_use_of %0
  // other instructions
  destroy_value %0       // %1 is still alive here
```
->
```
  %1 = copy_value %0
  ...
  last_use_of %0
  destroy_value %0
  // other instructions
```

The benefit of this optimization is that it can enable copy-propagation by moving destroys above deinit barries and access scopes.

This is part of fixing benchmark regressions when enabling OSSA modules.
rdar://139773406
",
78083,2024-12-10T12:50:29Z,2024-12-11T00:21:26Z,eeckstein,2,0,1,221,2,1,1,[],146.0,0,59186.0,0,0,0,0,1464919.736267,,2,1,0,False,['eeckstein'],@swift-ci test @swift-ci test,,"It can happen that the SSAUpdater inserts a phi-argument with all incoming values being the same. If a value is requested in the phi-block we must not use the unique incoming value, but we have to re-use the phi argument, because the lifetime of the incoming values end at in the predecessor blocks.

rdar://129859331
",
77951,2024-12-04T18:14:23Z,2024-12-11T03:23:05Z,rastogishubham,5,8,1,221,2,2,1,[],1828.0,0,551325.0,0,0,0,0,1471747.176435,,1,1,0,False,['rastogishubham'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please smoke test macOS @swift-ci please smoke test LinuxLooks good apart from some minor comments inside.,Looks good apart from some minor comments inside.,"This patch adds false positive detection to sil-stats-lost-variables. We will now only detect a debug_value as lost if there is a real instruction which belongs to the same scope or a child scope of the scope of the debug_value and if they are both inline at the same location.
","It's not obvious what this means, can you document it? And why does it need to be a reference? Can it change during the visit? ```suggestion
FunctionStat::FunctionStat(SILFunction *F, bool NewFunc) : NewFunc(NewFunc) {
``` It is a const reference because its value is tied to the value in the `FunctionStat` class, and should not be changed by the `InstCountVisitor` I think you focused on the `const` part, but my question was about why this needs to be a reference. Based on your comment the flag indicates whether we are pre- or post-pass? It's still not clear the variable is called NewFunc then? This is based on the convention that is used throughout the code:

if we look at line 1047 in the same file.

```
auto &OldFuncStat = FuncStat;
FunctionStat NewFuncStat(F, true);
```

`NewFuncStat` is a `FunctionStats` object for a function post-pass, `OldFuncStat` is for a for a function pre-pass. The flag is there to denote to the `FunctionStat` object, that the function it is created with is post-pass if true, I can change the name to `PrePass` or `PostPass` if that makes it clearer? If it's a convention in the file, I have no concerns."
78063,2024-12-09T18:06:32Z,2024-12-11T02:34:14Z,meg-gupta,4,0,2,130,2,1,1,[],19.0,0,116862.0,0,0,0,0,1474682.882821,,0,2,0,False,['meg-gupta'],@swift-ci test @swift-ci test @swift-ci smoke test macOS Platform @swift-ci test macOS Platform,,"Explanation: DCE deletes ownership forwarding instructions when it doesn’t have useful users. It inserts destroy_value/end_borrow for its operands to compensate their lifetimes.

DCE also deletes branches when its successor blocks does not have useful instructions. It deletes blocks and creates a jump to the nearest post dominating block.

When DCE needs to delete a forwarding instruction in a dead block, it cannot just create lifetime ends of its operands at its position. Use LifetimeCompletion utility in such cases.

Scope: Affects DCE running on ownership ssa

Risk: Medium.

Testing: Swift CI testing

Reviewed by: @nate-chandler 

Original PR: https://github.com/swiftlang/swift/pull/78053 

rdar://140428721
",
77998,2024-12-05T23:52:34Z,2024-12-10T23:41:10Z,fahadnayyar,3,0,1,188,5,1,1,['c++ interop'],180.0,1,431318.0,0,0,0,0,1485065.287559,,3,1,0,False,"['fahadnayyar', 'DougGregor']",@swift-ci please smoke test @swift-ci please test FYI @fahadnayyar we require full tests (not just smoke tests) on the release branches. I kicked off the full test run for this PR.,,"**Explanation:** Improved the diagnostic messages introduced by https://github.com/swiftlang/swift/pull/76798.
**Scope:** Changes new diagnostic messages. Removing warnings from certain cases where users can't suppress the warning easily.
**Risk:** Low, this reduces the cases where new warnings could trigger.
Reviewer: @egorzhdan  @Xazax-hun @j-hui 

Original PR: https://github.com/swiftlang/swift/pull/77397",
76946,2024-10-10T07:24:27Z,2024-12-11T02:01:25Z,pwongxy,1,7,1,28,3,2,1,[],5309784.0,0,5337419.0,0,0,0,0,1476651.676171,,2,1,0,False,['xedin'],@swift-ci please test,,"When iterator consists of tuple of variable and iteration only mutates the tuple partially, improve the warning message from ""changing to 'let"" to ""changing to 'case let'""

Resolves https://github.com/swiftlang/swift/issues/72811
","I think we either need to a separate diagnostic here, if fix-it cannot be produced, which would suggest exactly how to do this because the correct form is `case (let b, var c)` which not not be obvious from the diagnostic. I'm also not sure why `FixItLoc` would be invalid here, there might be a bug in `getFixItLocForVarToLet` because `var` applies to both elements and it should be possible to produce a fix-it in this case. hi, thanks for the input. indeed, I find it strange that `FixItLoc` is invalid, let me take closer look at `getFixItLocForVarToLet`. And, I would also create separate diagnostic with the correct syntax. Hi @xedin ,

I have updated diagnostic message.

For `getFixItLocForVarToLet`, it is not possible because it is using value binding pattern to detect the usage of `var` and tuple pattern does not contain such pattern in for-in.

Alternatively, I noticed there is prior check `isVarDeclPartOfPBDThatHadSomeMutation` that specifically do not generate such mutated warning for tuple use case. Currently, it does not handle tuple pattern in for-in. I do think this is cleaner approach and more aligned with existing behavior for tuple partial mutation, e.g. following code has no such warning for `y`
```
var (x, y) = (1, 2)
x = 3
let _ = x
let _ = y
```
I stop short of making the changes though, as it differ from the solution discussion in #72811 and in this PR. I like the new message better but it still needs some work because `it` in there refers to the variable but suggestion to to change the whole pattern, I think it needs to be rephrased to indicate that the whole pattern is going to change to do this. Hi @xedin , good point. I have pushed the improved message. Let me know what do you think. The first part here talks about tuple and the other about pattern. let's remove `in tuple` and use `the pattern` instead of just `pattern`. Hi @xedin , I have made the changes and pushed it."
77785,2024-11-21T20:11:17Z,2024-12-10T22:42:18Z,justice-adams-apple,5,5,3,4,2,3,2,[],6714.0,0,1650663.0,0,0,0,0,1488599.141557,,0,3,0,False,['justice-adams-apple'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,Add option for `SwiftCore_ENABLE_STDLIB_TRACING`,"This is really getting crazy. Any plans on splitting this up @etcwilde @justice-adams-apple? If it only affects the individual libraries, they should probably be attached to that specific library.
I don't mind as a quick fix, but in that case, can we include a comment specifying which libraries it is affecting?
Thanks. @etcwilde moved the compile definitions into the runtime cmake target  Does `SWIFT_STDLIB_CONCURRENCY_TRACING` have an impact on the runtime objects? I don't see it referenced in these sources. I think you're right, I think it got in here since I wanted to use a single CMAKE switch (SwiftCore_ENABLE_STDLIB_TRACING), I'll remove it"
78087,2024-12-10T17:26:00Z,2024-12-10T21:56:01Z,MaxDesiatov,1,0,1,9,1,1,1,['contributor experience'],7.0,0,16202.0,0,0,0,0,1491377.32932,,3,1,0,False,['MaxDesiatov'],@swift-ci smoke test,,"This sets indentation following established precedent in the codebase. The file itself is identical to the one used by the `swift-syntax` repository.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78017,2024-12-06T17:19:17Z,2024-12-10T19:19:46Z,aschwaighofer,2,0,1,85,2,1,1,[],10.0,0,352829.0,0,0,0,0,1500753.858255,,0,1,0,False,['aschwaighofer'],@swift-ci test @swift-ci test linuxLGTM,LGTM,"Relative references from context descriptors to types outside of the current module need to use indirect relative references

rdar://140356479",
78077,2024-12-10T01:15:53Z,2024-12-10T18:02:54Z,tshortli,1,0,1,136,5,1,1,[],203.0,0,60425.0,0,0,0,0,1505363.411506,,6,1,0,False,['tshortli'],@swift-ci please test,,"Recent refactoring fixed a bug that previously caused `f()` to be checked as if it were unavailable only on macOS in the following example:

```
@available(macOS, unavailable)
struct Outer {
  @available(*, unavailable)
  func f() {
    someFunctionUnavailableOnMacOS()
  }
}
```

Unfortunately, fixing that bug made a different existing availability checking rule more problematic. References to declarations that are unavailable on the current platform have been diagnosed as unavailable even in contexts that are universally unavailable. This long standing behavior is overly strict but it rarely had consequences. However, now that the example above is modeled correctly, this overly strict behavior is causing some source compatibility issues. The easiest solution is to relax the overly strict checking.

Resolves rdar://141124478.
",
78065,2024-12-09T19:30:40Z,2024-12-10T17:44:23Z,cachemeifyoucan,1,0,1,22,1,1,1,[],19.0,0,80035.0,0,0,0,0,1506466.738736,,1,1,0,False,['cachemeifyoucan'],@swift-ci please test,,"  - **Explanation**: Swift compiler can try to import clang modules which might fail to load. In this case, the clang diagnostic engine is reset to ignore the errors, but the hard reset also clears out the states, including the diagnostics options and current states. This will affect the future clang module imports and diagnostics. Use a soft reset that only clears the errors but not the other states.
  - **Scope**: This fixes a corner case introduced in #77485 that can cause wrong error messages when importing module, including bootstrap swift compiler on macOS using hostlibs. 
  - **Issues**: rdar://139723218

  - **Original PRs**: https://github.com/swiftlang/swift/pull/77925
    <!--
    Links to mainline branch pull requests in which the changes originated.
    -->
  - **Risk**: Low. 
    <!--
    The (specific) risk to the release for taking the changes.
    -->
  - **Testing**: bootstrap swift compiler with hostlibs.
    <!--
    The specific testing that has been done or needs to be done to further
    validate any impact of the changes.
    -->
  - **Reviewers**: @artemcm 
    <!--
    The code owners that GitHub-approved the original changes in the mainline
    branch pull requests. If an original change has not been GitHub-approved by
    a respective code owner, provide a reason. Technical review can be delegated
    by a code owner or otherwise requested as deemed appropriate or useful.
    -->
",
78066,2024-12-09T19:33:48Z,2024-12-10T17:33:02Z,cachemeifyoucan,1,0,1,12,2,1,1,[],11.0,0,79154.0,0,0,0,0,1507160.084371,,1,1,0,False,['cachemeifyoucan'],@swift-ci please test,,"  - **Explanation**: In the refactoring change #76700, it accidentally introduced a behavior change that causes the generated PCM command-line to have useful VFSOverlay files getting dropped. Clang module command-line and its unused VFS pruning should be done by the clang dependency scanner already so there is no need to touch that in the swift scanner. Since the original logics is not used to handle clang module commands, it will actually dropped the useful vfs overlay that is needed when none of the dependencies uses it. Fix the regression by restoring the old behavior and ignoring clang modules when pruning VFS overlay.
    <!--
    A description of the changes. This can be brief, but it should be clear.
    -->
  - **Scope**: Fix a regression from rewrite that can cause explicit module build to fail when VFS overlay is used.
    <!--
    An assessment of the impact and importance of the changes. For example, can
    the changes break existing code?
    -->
  - **Issues**: rdar://139233781
    <!--
    References to issues the changes resolve, if any.
    -->
  - **Original PRs**: https://github.com/swiftlang/swift/pull/77966
    <!--
    Links to mainline branch pull requests in which the changes originated.
    -->
  - **Risk**: Low. Restore to hold behavior
    <!--
    The (specific) risk to the release for taking the changes.
    -->
  - **Testing**: UnitTest
    <!--
    The specific testing that has been done or needs to be done to further
    validate any impact of the changes.
    -->
  - **Reviewers**: @artemcm 
",
78060,2024-12-09T16:29:42Z,2024-12-10T17:29:20Z,compnerd,1,0,1,12,3,0,0,[],14749.0,0,89980.0,0,0,0,0,1507381.452488,,1,1,0,False,['compnerd'],@swift-ci please test,,`enum` is a signed integer type on some platforms. The return value of `std::numeric_limits<T>::max()` is a `size_t` which is unsigned. Further manipulation retains the unsigned-ness until the assignment which results in truncation. Change the type to a `constexpr` constant definition and remove the `enum` type along with a type conversion to an explicitly unsigned integral type.,
78036,2024-12-07T01:16:38Z,2024-12-10T17:27:31Z,compnerd,2,0,1,10,3,1,1,[],8.0,0,317456.0,0,0,0,0,1507489.817671,,5,1,0,False,['compnerd'],@swift-ci please test @swift-ci please test,,Use the well known specifier for explicit references to the `Cxx` module rather than re-spelling the name at the various sites.,
78010,2024-12-06T10:19:02Z,2024-12-09T06:47:35Z,eeckstein,3,0,1,1,1,0,0,[],13.0,0,371240.0,0,0,0,0,1507562.127687,,0,1,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark @swift-ci test macos,,"Usually this function is inlined anyway. But if it is not (and that can happen), it has a dramatic performance impact. Also, usually code size regresses if this function is not inlined.

This is part of fixing benchmark regressions when enabling OSSA modules.
rdar://139773406",
78068,2024-12-09T19:51:41Z,2024-12-10T17:24:08Z,eeckstein,2,0,3,780,10,1,1,[],32.0,0,77621.0,0,0,0,0,1507623.6587,,2,3,0,False,['eeckstein'],@swift-ci test @swift-ci benchmarklgtm,lgtm,"It removes a `copy_value` where the source is a guaranteed value, if possible:

```
  %1 = copy_value %0   // %0 = a guaranteed value
  // uses of %1
  destroy_value %1     // borrow scope of %0 is still valid here
```
->
```
  // uses of %0
```

This optimization is very similar to the LoadCopyToBorrow optimization.
Therefore I merged both optimizations into a single file and renamed it to ""CopyToBorrowOptimization"".

This is part of fixing benchmark regressions when enabling OSSA modules.
rdar://139773406",
78079,2024-12-10T01:32:54Z,2024-12-10T08:38:02Z,atrick,1,0,1,4,1,0,0,[],10.0,0,54430.0,0,0,0,0,1510342.168417,,2,1,0,False,['atrick'],@swift-ci smoke test,,"Workaround: rdar://140330692 (🟠 OSS Swift CI:
oss-swift_tools-RA_stdlib-DA_test-device-non_executable failed: test: SILOptimizer/package-cmo-serialize-tables.swift
",
77958,2024-12-04T19:54:17Z,2024-12-10T16:34:18Z,justice-adams-apple,5,7,2,293,20,3,2,[],7373.0,0,506403.0,0,0,0,0,1510686.806679,,0,2,0,False,"['justice-adams-apple', 'etcwilde']","@swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please test Windows @swift-ci please smoke test Linux @swift-ci please smoke test LinuxI agree with @compnerd's comment on cleaning up the `SDKROOT` environment variable check.

We can probably drop the `CMAKE_MAKE_PROGRAM` check from the toolchain. It's not really specific to a particular build in the same way that the compilers and linkers are. If it's not available on the `PATH`, we can plumb that in through the scripts invoking CMake.","I agree with @compnerd's comment on cleaning up the `SDKROOT` environment variable check.

We can probably drop the `CMAKE_MAKE_PROGRAM` check from the toolchain. It's not really specific to a particular build in the same way that the compilers and linkers are. If it's not available on the `PATH`, we can plumb that in through the scripts invoking CMake.",Add the Toolchain and cache files for the various Darwin platforms,"Why is this `sdk_name`? The SDKROOT is the full path to the SDK right? This might be easier to read as:

```cmake
if(NOT DEFINED ENV{SDKROOT})
  message(FATAL_ERROR ""The 'SDKROOT' environment variable is not set"")
endif()

execute_process(COMMAND ""${XCRUN_EXECUTABLE}"" --show-sdk-path -sdk $ENV{SDKROOT} ...)
``` What if `ninja` is already in the path? This would skip over that I think. not necessarily. `macosx` and `iphoneos` are valid values for the `SDKROOT`. The `xcrun` call below does the translation to the actual full path to the SDK. In this case, that should be fine. The `ninja` that xcrun picks up here isn't special. Removed the check cleaned up the check"
78057,2024-12-09T15:36:37Z,2024-12-10T13:28:21Z,egorzhdan,3,2,2,39,2,3,2,['c++ interop'],7.0,0,78708.0,0,0,0,0,1521843.46533,,5,2,0,False,['egorzhdan'],@swift-ci please test @swift-ci please test @swift-ci please test WindowsLGTM!,LGTM!,"This is a follow-up to 8859b629.

Let's allow usages of C++ global variables, fields and constructors, as long as the types involved aren't fragile, e.g. if they are C-like structs.

This resolves compiler errors when trying to rebuild System.swiftmodule from its textual interface with Xcode 16.1.

rdar://140203932
rdar://141124318","Should this be `||` instead of `&&`? Oh, right, thanks for catching this!"
77832,2024-11-25T19:07:38Z,2024-12-10T14:29:23Z,rmaz,7,6,1,71,2,2,1,[],17.0,0,1279306.0,1,0,0,0,1518184.740716,,4,1,0,False,['rmaz'],"@swift-ci please test @tshortli what about this approach? It's a larger change as I had to add a parameter to the `CheckTypeAccessCallback` to pass out the Decl that imported the module with the access restriction, and clang-format was not happy with the indentation of most of the changed callbacks. @swift-ci please test @swift-ci please smoke test Linux Platform @swift-ci please test Windows Platform
@swift-ci please smoke test Linux Platform
@swift-ci please smoke test macOS Platform @swift-ci please test Windows Platform @swift-ci please smoke test Linux Platform",,"This PR adds a missing access level diagnostic when type checking named patterns by extracting the TypeRepr from the pattern's initializer.
","This approach seems too specific to the very particular kind of initializer expression used here. I also am not sure it's guaranteed that if you find a `TypeExpr` somewhere in the expression that means that the `NamedPattern`'s type is actually equivalent. For example, what would happen in this test case?

```
internal import Foo

internal func bar(_ x: FooType) -> Bool { return true }

public var y = f(FooType())
```

The type of `y` is `Bool`, not `FooType`, but it seems to me like this code would diagnose `y` as if it were declared to be `FooType`.

I think a better approach to the problem you are trying to solve would be to try to make the diagnostic work even when there is no `TypeRepr`, instead of trying to fabricate a `TypeRepr` for the pattern that does not actually exist. It's a small detail, but I think we still want the diagnostic to point to the `TypeRepr` instead of the `Decl` when there is a `TypeRepr` available. Do we really need to change the signature to pass `complainDecl` through? I may be missing the counter-example, but it looks to me like the decl could just be captured by the lambda to avoid all of the churn of taking the decl as an argument to `checkTypeAccess` and the callback. Updated to move the logic to the checkNamedPattern callback instead, which avoids all the other unrelated callback changes. The behavior should be the same here, its just the unwrapping of the `TypeRepr` happens one level above in `noteLimitingImport(..., const TypeRepr *complainRepr)` Ok, if the exact source location that the diagnostic points to is not changing then this is fine. I was expecting that it would point directly to the type written in source (which would be different than the location of the decl), but I guess it doesn't already do that."
78071,2024-12-09T22:05:34Z,2024-12-10T07:50:59Z,hamishknight,1,0,1,21,3,2,2,[],8.0,0,44051.0,0,0,0,0,1533163.796944,,4,1,0,False,['hamishknight'],@swift-ci please test,,"Mangling a non-canonical type can run into unexpected type sugar such as the newly introduced LocatableType. USRs should be based on canonical types anyway, so make sure we canonicalize before mangling.

rdar://141168628",
78069,2024-12-09T20:38:10Z,2024-12-10T06:26:59Z,eeckstein,1,0,1,2,1,1,1,[],10.0,0,35333.0,0,0,0,0,1547127.901118,,1,1,0,False,['eeckstein'],@swift-ci smoke test+1!,+1!,,
77584,2024-11-13T14:56:57Z,2024-12-04T12:01:36Z,ktoso,13,11,7,508,17,2,1,['distributed'],1183755.0,0,2313147.0,0,0,0,0,1536187.008836,,10,7,0,False,"['ktoso', 'xedin']","@ktoso I see that there is a bunch of leftover comments and code, could you please clean that up and ping me when done so I can take a look when this is ready to merge? Oh yeah don't review this at all yet, I'm cleaning up and will make it into some nice commits. Marked as draft now, sorry! @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Unrelated, Cxx interop fails compiling on Windows:
https://ci-external.swift.org/job/swift-PR-windows/33738/console

```
inalloca argument for call has mismatched alloca

  %7 = alloca %TSo3stdO0077basic_stringCChar32char_traitsCChar32allocatorCChar32_jlHEvsaGGdtaEBguasEitaaV, align 4

  %9 = call i32 @""?__swift_interopComputeHashOfU32String@@YAIV?$basic_string@_UU?$char_traits@_U@std@@V?$allocator@_U@2@@std@@@Z""(ptr %7) #16

<unknown>:0: error: fatal error encountered during compilation; please submit a bug report (https://swift.org/contributing/#reporting-bugs)

``` @swift-ci please smoke test Windows @swift-ci please smoke test Thanks for review! Huh seems I missed to git add my array test :) Adding some more @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke testLGTM! Could you add an example with array type and optional as parameters to make sure that it works as expected too?",LGTM! Could you add an example with array type and optional as parameters to make sure that it works as expected too?,"The commits are now properly staged, please check their descriptions for details.

This solves:
- rdar://139332556 - so now we're handling primary associated types in protocols with @resolvable -- and this would have then crashed during mangling (!), which is why the follow up commits
- rdar://139781083 - which is solved in [`2a3ac44` (#77584)](https://github.com/swiftlang/swift/pull/77584/commits/2a3ac4458fcca51906ffd53a40129347ed8d81d7) which was about how sometimes with generics involved or more complex type signatures of a `distributed func` we'd wrongly mangle and crash during thunk mangling.

Both changes go hand in hand and allow correct handling of more situations with generics and complex types in `distributed func`s","note: here we keep the same mangling, good 👍  added a mangling check as well, we didnt before I think we need to make sure that it's exactly one here via an ASSERT. I think you can use `llvm::Twine('$', P->getNameStr()).str()` might be slightly better here  Weirdly enough I think i've seen multiple here which probably is risky... I'll see what I can do Hm I think the + forms a Twine actually but I can be explicit about it yeap It would form std::string That won’t be unexpected though right? There should be only one $ thing per protocol? Yeah not sure how multiple can happen, will dig into it Ah here I guess so, I misremembered some other piece of code I think. Thanks, fixed Seems I was seeing things, assert is fine -- added it back"
78067,2024-12-09T19:47:35Z,2024-12-10T06:06:37Z,hjyamauchi,5,5,1,5,1,2,1,[],11.0,0,37142.0,0,0,0,0,1548354.525495,,0,1,0,False,"['compnerd', 'hjyamauchi']",@swift-ci please test @swift-ci please test @compnerd PTAL @swift-ci please test @swift-ci please test,,"When building for ARM64, we can now build swift-inspect as we use CMake for the cross-compilation.

This is a second attempt for https://github.com/swiftlang/swift/pull/77810

This should fix https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64/792/
```
         C:\Users\swift-ci\jenkins\workspace\swift-main-windows-toolchain-arm64\swift-installer-scripts\platforms\Windows\dbg\dbg.wxs(110): error WIX0103: Cannot find the File file 'T:\\Program Files\\Swift\\Toolchains\\6.0.0+Asserts\\usr\bin\swift-inspect.exe'. The following paths were checked: T:\\Program Files\\Swift\\Toolchains\\6.0.0+Asserts\\usr\bin\swift-inspect.exe [C:\Users\swift-ci\jenkins\workspace\swift-main-windows-toolchain-arm64\swift-installer-scripts\platforms\Windows\dbg\dbg.wixproj]
```
",I think that we can move this into the build step blocks above. Done I think that you forgot to push the change. Sorry! PTAL Sorry for the latency. I now see the new change uploaded. 
77819,2024-11-22T23:44:49Z,2024-12-09T23:30:33Z,etcwilde,3,0,1,5,2,3,3,[],864306.0,0,1467949.0,0,0,0,0,1572115.233869,,1,1,0,False,['etcwilde'],@swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please smoke test macOS,,"Stubs has a macro define for enabling or disabling the embedded unicode data tables, which are required for doing things like counting characters in strings. Add that option and default it to 'on' for full unicode support.",
77980,2024-12-05T14:53:32Z,2024-12-10T03:04:04Z,mikeash,6,6,1,28,5,2,1,[],109390.0,0,389432.0,1,0,0,0,1559309.239035,,1,1,0,False,"['mikeash', 'ian-twilightcoder']","Oh, yuck. I really wish that if a library has `$ld$previous$` and you're trying to target something older then the linker would weak link the oldest `$ld$previous$` instead. @swift-ci please smoke test Infrastructure issue and unrelated test failure, trying again. @swift-ci please smoke test These symbols show up in the baseline for the ABI tests, need to adjust them too. @swift-ci please smoke test",,"The magic symbols specify a version range where clients should reference a @rpath relative path to libswift_Concurrency.dylib instead of the standard absolute path. This version range started at macOS 10.15 and aligned versions, which is the oldest target supported by Concurrency. However, clients that use Concurrency can target earlier OSes as long as they availability-check their use of Concurrency. When targeting something earlier than 10.15, they'd reference the absolute path, then fail to find the back-deployment Concurrency runtime on OS versions that need it.

Fix this by setting the start of the range to macOS 10.9 and aligned, which is the oldest target supported by Swift.

rdar://140476764","// Clients can back deploy to OS versions that predate Concurrency as an embedded library, and conditionally use
// it behind an #availability check. Such clients will still need to link the embedded library instead of the OS version.
// To support that, set the start version to Swift's first supported versions: macOS (née OS X) 10.9, iOS 7.0,
// watchOS 2.0, tvOS 9.0 rather than Concurrency's first supported versions listed above. The first version of Mac Catalyst was 13.1, so this one should stay the same. This should be 9.0, the first version of tvOS. 9.0 Mega nitpick: I should've typed this out in the actual header. Can you try to make the right margin roughly line up with the previous paragraph? My lines were just a little too long. Done."
77794,2024-11-21T21:50:04Z,2024-12-09T22:50:05Z,artemcm,10,1,1,813,13,1,1,[],198.0,0,1558803.0,0,0,0,0,1574546.838263,,4,1,0,False,['artemcm'],@swift-ci test @swift-ci test @swift-ci test @swift-ci test Linux platform @swift-ci test @swift-ci test @swift-ci test @swift-ci test macOS platform @swift-ci test linux platform @swift-ci test linux platform,,"Instead, each scan's 'ModuleDependenciesCache' will hold all of the data corresponding to discovered module dependencies.

The initial design presumed the possibility of sharing a global scanning cache amongst different scanner invocations, possibly even different concurrent scanner invocations.

This change also deprecates two libSwiftScan entry-points: `swiftscan_scanner_cache_load` and `swiftscan_scanner_cache_serialize`. They never ended up getting used, and since this code has been largely stale, we are confident they have not otherwise had users, and they do not fit with this design.

A follow-up change will re-introduce module dependency cache serialization on a per-query basis and bring the binary format up-to-date.",Can you add comments for all XFAIL?
78035,2024-12-07T00:43:07Z,2024-12-09T22:30:33Z,xedin,2,0,1,36,2,0,0,[],8.0,0,251246.0,0,0,0,0,1575722.442663,,2,1,0,False,['xedin'],@swift-ci please test @swift-ci please smoke test,,"If a (trailing) closure is determined to be an extraneous argument 
for one of the overload choices it needs to be marked as hole as 
eagerly as possible and prevented from being resolved because
otherwise it's going to be disconnected from the rest of the 
constraint system and resolution might not be able to find all of 
the referenced variables. This could result either in crashes or 
superfluous diagnostics.

Resolves: rdar://141012049

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77991,2024-12-05T20:09:17Z,2024-12-09T21:25:16Z,artemcm,7,0,1,48,3,1,1,[],10.0,0,351326.0,0,0,0,0,1578472.451042,,4,1,0,False,"['nkcsgexi', 'artemcm']","@swift-ci smoke test Thank you! Could you add a test case for implicit module builds? for some reasons, the same patch doesn't work for my in implicit module builds in my previous attempt. @swift-ci smoke test Could you cherry-pick to 6.1 as well? @swift-ci smoke test Linux platform > Could you cherry-pick to 6.1 as well?

https://github.com/swiftlang/swift/pull/78018 @swift-ci smoke test Linux platform",,"`/System/Library/SubFrameworks` will be searched for frameworks by the compiler implicitly when an SDK path is specified.

Resolves rdar://137454957
",
78005,2024-12-06T01:03:27Z,2024-12-09T21:35:44Z,xymus,4,0,1,86,3,1,1,[],9.0,0,333142.0,0,0,0,0,1579006.821999,,3,1,0,False,['xymus'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test Linux @swift-ci Please smoke test Linux,,"Update the logic selecting the most restrictive import for a given reference to account for @_exported imports from the local module. We should always prioritize @_exported imports from the local module over more restrictive same file imports. Only if an import from the same file is also public we prefer it as it's more useful for diagnostics and generally recommended to locally declare dependencies.

Also update the test that was meant to check this configuration to apply two different variations, one for a module local @_exported and one relying on the underlying clang module.

rdar://140924031",
78007,2024-12-06T06:32:05Z,2024-12-09T18:17:15Z,eeckstein,1,0,1,40,3,1,1,['swift 6.1'],10.0,0,301514.0,0,0,0,0,1590918.476503,,0,1,0,False,['eeckstein'],@swift-ci test,,"* **Explanation**: Fixes a verification error caused by a wrong check in the verifier for calling a method of an existential with an opaque return type.
* **Scope**: Can affect code which uses existentials with opaque return type methods.
* **Risk**: Very low. It relaxes a verifier condition
* **Testing**: Tested by a test case.
* **Issue**: https://github.com/swiftlang/swift/issues/77955, rdar://140939536
* **Reviewer**:  @jckarter
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/77972
",
77964,2024-12-04T23:11:10Z,2024-12-09T21:35:23Z,xymus,5,0,1,10,2,1,1,[],39.0,0,426277.0,0,0,0,0,1579010.640714,,1,1,0,False,['xymus'],@swift-ci Please smoke test @swift-ci Please smoke test Windows @swift-ci Please smoke test Linux @swift-ci Please smoke test Linux @swift-ci Please smoke test Linux,,"Darwin defines `memcmp` with optional pointers. Update SwiftShims to define it to the same type to avoid deserialization failures where we get one over the other and the types don't match.

This basically brings back #36666 which changes were lost a little while back apparently.

rdar://140596571",
78008,2024-12-06T06:56:20Z,2024-12-09T18:14:34Z,eeckstein,1,0,1,39,3,1,1,['swift 6.1'],10.0,0,299897.0,0,0,0,0,1591080.910898,,0,1,0,False,['eeckstein'],@swift-ci test,,"* **Explanation**: Fixes a crash in the DefiniteInitialization pass due to a wrong class type when creating a `value_metatype` instruction
* **Risk**: Low. It is a simple change which makes sure to handle `upcast` instructions when creating a `partial_dealloc_ref`.
* **Testing**: Tested by a test case.
* **Issue**: rdar://140926647
* **Reviewer**:  @jckarter
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/77978
",
78053,2024-12-09T11:23:49Z,2024-12-09T17:56:30Z,meg-gupta,1,0,2,130,2,1,1,[],7.0,0,23561.0,0,0,0,0,1592169.539386,,2,2,0,False,['meg-gupta'],@swift-ci testLGTM!,LGTM!,"DCE deletes ownership forwarding instructions when it doesn’t have useful users.
It inserts destroy_value/end_borrow for its operands to compensate their lifetimes.

DCE also deletes branches when its successor blocks does not have useful instructions.
It deletes blocks and creates a jump to the nearest useful post dominating block.

When DCE needs to delete a forwarding instruction in a dead block, it cannot just create
lifetime ends of its operands at its position. Use LifetimeCompletion utility in such cases.

rdar://140428721",
78018,2024-12-06T17:23:53Z,2024-12-07T02:31:36Z,artemcm,1,0,1,48,3,1,1,"['🍒 release cherry pick', 'swift 6.1']",6.0,0,259753.0,0,0,0,0,1593573.807402,,0,1,0,False,['artemcm'],"@swift-ci testThank you, Artem!","Thank you, Artem!","Cherry-pick of https://github.com/swiftlang/swift/pull/77991
---------------------------------------
`/System/Library/SubFrameworks` will be searched for frameworks by the compiler implicitly when an SDK path is specified.

Resolves rdar://137454957",
77988,2024-12-05T18:17:16Z,2024-12-09T17:30:18Z,cachemeifyoucan,6,0,1,9,3,1,1,[],19.0,0,342782.0,0,0,0,0,1593742.148044,,0,1,0,False,['cachemeifyoucan'],@swift-ci please smoke test @swift-ci please test @swift-ci please smoke test @swift-ci please test @swift-ci please smoke test linux platform @swift-ci please test linux platform,,"Re-enable some tests that didn't get enabled when the underlying issue was fixed.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78021,2024-12-06T18:45:18Z,2024-12-09T16:42:49Z,jckarter,5,3,1,63,11,1,0,[],8.0,0,251851.0,0,0,0,0,1596592.808819,,7,1,0,False,['jckarter'],@swift-ci Please test @swift-ci Please test @swift-ci Please test @swift-ci Please test @swift-ci Please test,,,"Please add `.addressableSelf` to the simple attribute `case` 🙏 :
https://github.com/swiftlang/swift/blob/64fb19b7908b2f59882e167d13b88f4bdc2d10bb/lib/ASTGen/Sources/ASTGen/DeclAttrs.swift#L185-L186 Please remove this diff. Or it will conflict with https://github.com/swiftlang/swift/pull/78019/files Thank you :)"
78034,2024-12-07T00:22:53Z,2024-12-09T16:25:41Z,nate-chandler,5,0,6,190,6,1,1,[],11.0,0,230571.0,0,0,0,0,1597618.000796,,2,6,0,False,"['nate-chandler', 'eeckstein']",@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark @swift-ci please test linux platform Thanks!LGTM!,LGTM!,"Complete scopes of scoped addresses (introduced by `store_borrow` and `begin_access`) in dead end blocks via `ScopedAddressValue::computeTransitiveLiveness`.

rdar://141037060
",
78002,2024-12-06T00:20:58Z,2024-12-09T16:13:41Z,compnerd,8,0,1,8,1,0,0,[],29.0,0,316365.0,0,0,0,0,1598339.125458,,0,1,0,False,['compnerd'],"Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/349

@swift-ci please build toolchain Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/349

@swift-ci please build toolchain Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/349

@swift-ci please build toolchain Windows platform @swift-ci please smoke test Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/349

@swift-ci please test Windows platform @swift-ci please smoke test @swift-ci please smoke test Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/349

@swift-ci please test Windows platform",,Update the property to include the SDK MSI for Windows as we start adding additional platforms.,
78037,2024-12-07T01:16:54Z,2024-12-09T15:38:45Z,tshortli,1,0,2,309,6,0,0,[],173924.0,0,224518.0,0,0,0,0,1600432.216036,,3,2,0,False,['tshortli'],@swift-ci please test,,`AvailabilityDomain` models the independent dimensions in which availability can be checked.,
76798,2024-10-01T18:15:22Z,2024-11-01T00:40:12Z,fahadnayyar,13,29,1,197,7,5,3,['c++ interop'],53.0,0,5954252.0,1,0,0,0,1598390.788008,,7,1,0,False,['fahadnayyar'],"@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci Please Build Toolchain @swift-ci please test @swift-ci Please Build Toolchain macOS @swift-ci please test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please test @swift-ci please smoke test windows @swift-ci please smoke test windowsMostly looks good to me, some nits inline, and I think some of the TODOs should be resolved in this PR (not in a follow-up).  Once Egor is happy about the placement of the new utility functions, I think this should be good to go.  I have one question regarding C++ pointers vs references. Otherwise this change would look good to me. This PR looks good to me, with the disclaimer that I don't yet have much experience or confidence navigating this codebase yet. I left a couple of nits related to naming conventions.

I thought of an edge case that might be out of the scope of this PR: how would Swift/Clang treat multiple function declarations with different annotations? e.g.,:

```cpp
T *_Nonnull f();
T *_Nonnull f() __attribute__((swift_attr(""returns_retained"")));
T *_Nonnull f() __attribute__((swift_attr(""returns_unretained"")));
```

Are the attributes coalesced across the different declarations?","Mostly looks good to me, some nits inline, and I think some of the TODOs should be resolved in this PR (not in a follow-up).  Once Egor is happy about the placement of the new utility functions, I think this should be good to go.  I have one question regarding C++ pointers vs references. Otherwise this change would look good to me. This PR looks good to me, with the disclaimer that I don't yet have much experience or confidence navigating this codebase yet. I left a couple of nits related to naming conventions.

I thought of an edge case that might be out of the scope of this PR: how would Swift/Clang treat multiple function declarations with different annotations? e.g.,:

```cpp
T *_Nonnull f();
T *_Nonnull f() __attribute__((swift_attr(""returns_retained"")));
T *_Nonnull f() __attribute__((swift_attr(""returns_unretained"")));
```

Are the attributes coalesced across the different declarations?","Adding a warning when C++ APIs (functions or methods) returning C++ foreign reference types or SWIFT_SHARED_REFERENCE types are not annotated with either of SWIFT_RETURNS_RETAINED and SWIFT_RETURNS_UNRETAINED. 

rdar://139225276","@fahadnayyar I think we should suggest people to use the macro instead of directly using `swift_attr`. What are other similar diagnostics doing?  Looks like these functions are copied-and-pasted from elsewhere in ClangImporter. Let's use the existing API instead. Make it into one is statement. First condition should check for `isForeignReferenceType`. rdar://138810362 Nit: I prefer to put these TODOs next to the lines that need to be changed to resolve the todo. In this case it would be in `include/swift/AST/DiagnosticsClangImporter.def` . Do you plan to resolve this TODO in this PR or in a follow-up? Nit: I prefer not to have commented out code checked-in. Nit: looks like this could also be an `else if` ? Can you move this into the inner scope? (Feel free to ignore if I messed up dup counting the braces.) I'd like to see at least the first TODO to be resolved in this PR.  Minor: we prefix C++ doc comments with `///` to mark a doc comment and make it show up in IDE quick help. Minor: no need for `const` here. Let's briefly discuss before actually making this change. I don't think we need a new file named `ClangImporterUtils.h`. I think the convention of the codebase is to have these as part of the function name, e.g. `importer::isForeignReferenceTypeWithoutImmortalAttrs` in this case. Yeap, let's remove this. @Xazax-hun @egorzhdan this TODO comment is not only for the new utility functions that I am introducing in this patch. This is about refactoring and moving all the utility functions like sForeignReferenceType, hasSwiftAttribute, hasImportAsRefAttr, hasOwnedValueAttr, etchasUnsafeAPIAttr, hasIteratorAPIAttr into a new utility function. Either in 1 shot or incrementally as we change specific parts of the ClangImporter. This was suggested by @ravikandhadai 

For more reference: rdar://138803759  Yeah, but if-else this is looking more natural to me for this case as I want to distinguish between if return type is a c++ FRT v/s if it is not. You mean only in the declaration in the ClangImporter.h file or also in the definition in the ClangImporter.cpp file?
I wanted to keep the signature of `isForeignReferenceTypeWithoutImmortalAttrs` similar to `isForeignReferenceType` I see, I agree that `ClangImporter.cpp` is a bit bloated, but I still don't think having a `ClangImporterUtils.h` file is the right way to solve it. Let's discuss this separately. Ah I see, there are existing functions that have `const` here. That's fine then, feel free to disregard this comment 🙂 This early return would trigger for a C++ reference type, is this intended? Should this condition check `isPointerOrReferenceType` instead? I would slightly prefer a more descriptive name for this, e.g. `isRefCountedForeignReferenceType`, or `isSharedForeignReferenceType`. But I don't feel strongly about this. Actually I just realized that we don't accept C++ references in other parts of this logic. Please ignore the comment above. nit: spell out ""attributes"" abbreviation to be consistent with other functions

```suggestion
static bool hasImmortalAttrs(const clang::RecordDecl *decl) {
``` nit: I don't think `SWIFT_SHARED_REFERENCE` needs to be in quotation marks here, since it is not a user-defined identifier. But then again, it seems like other diagnostic messages use quotation marks as well, so it may be better to stick with the existing convention. Yes good point! 
I think DiagnosticsClangImporter.def would need a refactoring. At least for diagnostics that we have recently added. I plan to do this in a follow up patch.

References: rdar://138810362, rdar://138812125, rdar://138805666, rdar://138874482,  I can address this when I do some refactoring work where I plan to move helper/utility functions that query the classification of a clang type. Ref: rdar://138803759 Oops. I'll fix in a follow up refactoring patch. Thanks!
Ref: rdar://138803759"
77397,2024-11-05T17:16:33Z,2024-12-04T08:26:03Z,fahadnayyar,4,28,1,188,5,4,2,['c++ interop'],103733.0,0,2933762.0,0,0,0,0,1598410.094198,,9,1,0,False,['fahadnayyar'],"@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci Please Build Toolchain macOSThanks for splitting out this change! I only have a few small comments, otherwise this should be good to go. Since this patch involves some refactoring, I left some suggestions about how I think the code could be clarified. Looks good to me overall. Just left a couple of nits, but they are not blocking.","Thanks for splitting out this change! I only have a few small comments, otherwise this should be good to go. Since this patch involves some refactoring, I left some suggestions about how I think the code could be clarified. Looks good to me overall. Just left a couple of nits, but they are not blocking.","Improve the diagnostic messages introduced by https://github.com/swiftlang/swift/pull/76798. Also warn for only those cases of unannotated c++ APIs for which we provide a way to annotate. Also added warning for annotated C++  overloaded operators because annotations are not supported for overloaded operators.

rdar://141157320","Can we make the name slightly more brief, e.g. `canBeRefCountConventionAnnotated`? Minor: redundant curly braces. Minor:
1. It's better to use `isa<>` instead of `dyn_cast<>` when you aren't using the result of the cast.
2. Reduntant `llvm::`, let's drop it. I agree. The `cxxMethod` part can be inferred from the signature. I think the goal of these names to convey the info that is not clear from the types.  @egorzhdan  I like to put` clang::` to differentiate Swift and Clang types in my code. Is that recommended or redundant? Many Swift and Clang compiler types look and spell very similar. This has been a source of confusion for me when reading the ClangImporter code.  `clang::` could indeed be useful to distinguish e.g. C++ AST types from Swift AST types, but for things like casting the namespace is redundant and doesn't aim readability IMO.

I think it's usually a good practice to try to match the surrounding code with these code style questions. `emitdiagnostics` should be `emitDiagnostics` for camelCase, but I think you can simplify this helper function even more:

```suggestion
    void checkBridgingAttrs(const clang::FunctionDecl *decl) {
```

This shortens the name and leaves open the possibility of checking other bridging-related attributes in the future. Suggestion: focus on checking whether this `decl` needs an annotation, and defer diagnosis to the caller:

```suggestion
    bool needsFRTReturnAttr(const clang::FunctionDecl *decl) {
```

Then you can simply `return true` or `return false` in this function, rather than accumulating a boolean variable.

Then the caller will change from:

```cpp
        } else if (!returnsRetainedAttrIsPresent &&
                    !returnsUnretainedAttrIsPresent) {
           diagnoseUnannotatedCxxApisReturningFRT(decl);
        }
```

to:

```cpp
        } else if (!returnsRetainedAttrIsPresent &&
                    !returnsUnretainedAttrIsPresent &&
                    needsFRTReturnAttr(decl)) {
           Impl.diagnose(loc, diag::no_returns_retained_returns_unretained, decl);
        }
```

(modulo `clang-format`)

This structure keeps all `Impl.diagnose()` calls in the same place, and
a bonus is that you get to reuse the `loc` variable you constructed earlier. I think the comment can be elaborated a little, to make its relationship with the `returns_{,un}retained` attributes more explicit.

```suggestion
    /// Certain C++ methods cannot be annotated with ref-counting conventions
    /// (i.e., ""returns_unretained"" and ""returns_retained""). This helper method
    /// enumerates those cases and returns `false` for them.
``` I think I had suggested this nit elsewhere, but since you're editing these diagnostic messages already, it might be a good opportunity to remove the apostrophes from the diagnostic messages:

```suggestion
      ""%0 cannot be annotated with both SWIFT_RETURNS_RETAINED and ""
      ""SWIFT_RETURNS_UNRETAINED"",
```

Justification: these are library-provided ""keywords"" rather than user-defined identifiers.

But if there are a ton of other diagnostics that follow the opposite convention (i.e., use apostrophes for library-defined annotations), then keep it as is. @egorzhdan do you have thoughts about this? I think we should change the diagnostic messages in ClangImporter as @j-hui mentioned to make sure that apostrophes are used only for user-defined identifiers. Yeah, it seems like other diagnostic messages don't use apostrophes for attribute names, so I agree that it's better to remove them.

> I think we should change the diagnostic messages in ClangImporter

Not sure what you mean, are there extra apostrophes added to the diagnostic message in the .cpp implementation? It should only require changing the message in the .def file, as John suggested. Is this function going to be called from some other call site? If not, let's inline it into its usage. I think something like `diagnoseReturnedForeignReferenceTypeOwnership` would be a slightly better name for this. Keeping it for code clarity. I think `diagnoseUnannotatedCxxApisReturningFRT` is a better name for to specify the purpose of this function. Could you elaborate on what you mean? Nit: there re some typos in this comment. I opted to create a separate function,` emitDiagnosticsForReturnsRetainedUnretainedAttrs`, rather than inlining the logic within VisitFunctionDecl, primarily to enhance code clarity and avoid unnecessarily complicating VisitFunctionDecl. I noticed that similar helper methods are used elsewhere in this file, which aligns with this approach. While I understand the concern that this helper function is currently called only once, I believe maintaining helper functions where they improve code readability and maintainability is a good practice. Minor: this seems to be mis-formatted, could you please run clang-format on this code? Minor: I think the convention is that `#pragma once` should go above any includes. Is this import necessary with this change? Alright. This function still needs to be renamed to upper-case `Diagnostics` properly, as John suggested. This function is inlined in next revision. Yes, without it I was seeing a crash when initializing `std::function` `FunctionVoidToFRTStruct` from Swift
Ref:  rdar://140452227  Ah I see, thanks for explaining. This still needs to be resolved (the `#pragma once` should come after the `#include`) ```suggestion
        ""yet for overloaded C++ %0. Overloaded C++ operators always ""
```

This way it will be printed as `overloaded C++ operator+`  rather than `overloaded C++ operator operator+`"
77868,2024-11-28T18:49:37Z,2024-12-07T21:31:39Z,slavapestov,14,1,2,327,13,1,1,[],538223.0,0,860398.0,0,0,0,0,1678991.710635,,4,2,0,False,"['slavapestov', 'xedin']","@swift-ci Please smoke test @swift-ci Please test source compatibility @swift-ci Please smoke test https://github.com/swiftlang/llvm-project/pull/9696
@swift-ci Please smoke test https://github.com/swiftlang/llvm-project/pull/9696
@swift-ci Please smoke test @swift-ci Please test source compatibility @swift-ci Please smoke test Linux @swift-ci Please smoke test macOS @swift-ci Please smoke test https://github.com/swiftlang/llvm-project/pull/9696
@swift-ci Please smoke test https://github.com/swiftlang/llvm-project/pull/9696
@swift-ci Please smoke test Linux platform https://github.com/swiftlang/llvm-project/pull/9696
@swift-ci Please smoke test Windows platform https://github.com/swiftlang/llvm-project/pull/9696
@swift-ci Please smoke test Windows platform Oh, thanks @xedin :)",,"This changes the TypeAliasType representation to store a list of generic arguments, instead of a substitution map.

A SubstitutionMap is more expensive to construct, because it stores the generic arguments for all outer parent types together with all conformances.

Also, we didn't actually apply the SubstitutionMap to any types, because the substituted underlying type is already stored inside the TypeAliasType.

Thus, we can just get rid of the SubstitutionMap here.

A second change speeds up `TypeBase::getTypeVariables()`, which is frequently called.",Nice!
78046,2024-12-07T19:06:45Z,2024-12-08T10:07:09Z,nkcsgexi,3,0,1,7,2,0,0,[],7.0,0,81716.0,0,0,0,0,1679046.19189,,6,1,0,False,"['nkcsgexi', 'slavapestov']",@swift-ci please smoke test @swift-ci please smoke test Thanks!,,"When lazy type checking is enabled, the generated AST to walk on may contain function bodies that are not fully type-checked. Walking on these function bodies could expose latent bugs.

Resolves rdar://140818215
",
78031,2024-12-06T23:18:20Z,2024-12-08T06:30:10Z,DougGregor,7,0,3,280,21,1,1,[],6.0,0,149334.0,0,0,0,0,1682733.645319,,0,3,0,False,['DougGregor'],"@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test platform Windows Windows failure doesn't ring a bell:
```
# .---command stderr------------
# | Traceback (most recent call last):
# |   File ""<string>"", line 1, in <module>
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\spawn.py"", line 116, in spawn_main
# |     exitcode = _main(fd, parent_sentinel)
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\spawn.py"", line 126, in _main
# |     self = reduction.pickle.load(from_parent)
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\connection.py"", line 967, in rebuild_pipe_connection
# |     handle = dh.detach()
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\reduction.py"", line 131, in detach
# |     return _winapi.DuplicateHandle(
# | PermissionError: [WinError 5] Access is denied
# | Traceback (most recent call last):
# |   File ""<string>"", line 1, in <module>
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\spawn.py"", line 107, in spawn_main
# |     new_handle = reduction.duplicate(pipe_handle,
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\reduction.py"", line 79, in duplicate
# |     return _winapi.DuplicateHandle(
# | PermissionError: [WinError 5] Access is denied
# | Traceback (most recent call last):
# |   File ""<string>"", line 1, in <module>
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\spawn.py"", line 107, in spawn_main
# |     new_handle = reduction.duplicate(pipe_handle,
# |   File ""c:\program files (x86)\microsoft visual studio\shared\python39_64\lib\multiprocessing\reduction.py"", line 79, in duplicate
# |     return _winapi.DuplicateHandle(
# | PermissionError: [WinError 5] Access is denied
# `-----------------------------
``` @swift-ci please test Windows",,"* *Explanation*: Improve the modeling of declaration contexts within custom attributes, particularly those used for macro arguments. Fixes crashes involving closures within attached macro arguments.
* *Scope*: Affects the internal representation of property wrappers and attached macros.
* *Issues*: https://github.com/swiftlang/swift/issues/76409 / rdar://136997841
* *Original PR*: https://github.com/swiftlang/swift/pull/78030
* *Risk*: Low. The representational change primarily affects property wrappers, but is fairly narrow and builds on existing logic.
* *Testing*: New tests added
* *Reviewed by*: @hamishknight , @rintaro , @slavapestov 
",
78045,2024-12-07T18:47:00Z,2024-12-08T06:06:59Z,oscbyspro,2,0,5,58,2,1,1,[],10776.0,0,48363.0,0,0,0,0,1713586.416373,,0,5,0,False,['stephentyrone'],@swift-ci test Thanks @oscbyspro!,,"- **Explanation**: `Int128` and `UInt128` division by zero did not behave like smaller binary integer division by zero. This contribution updates the various division operations accordingly. It adds a missing precondition in signed `%(_:_:)` and replaces the preconditions in `*ReportingOverflow` with recoverable results consistent with documented behavior.
- **Scope**: Updates Int128 and UInt128 division methods.
- **Issues**: https://github.com/oscbyspro/Ultimathnum/issues/143
- **Original PRs**: #77854
- **Risk**: It updates some arithmetic functions of relatively new types.
- **Testing**: Adding corresponding 128-bit division unit tests would be prudent.
- **Reviewers**: @stephentyrone (approved) @xwu (commented)",
77854,2024-11-27T14:24:43Z,2024-12-07T21:44:54Z,oscbyspro,7,9,5,58,2,3,1,[],84689.0,0,928117.0,0,0,0,0,1713569.422321,,0,5,0,False,"['stephentyrone', 'oscbyspro']","Looking closer at the implementation of `Int128` and `UInt128`, I see that I'll have to add preconditions to `/(a:b:)` and `%(a:b:)` following this change. It also looks like `Int128`'s division operator doesn't trap on ordinary overflow either. I'll mark this pull request as a draft until I have updated `/(a:b:)` and `%(a:b:)`.
 Legend has it that the cordial ping rate is once a week. @stephentyrone – can you take a look at this pull request? Int128 and UInt128 do not perform division by zero like the smaller binary integers. It would be nice if we could fix that. @swift-ci test @oscbyspro do you have bandwidth to make another PR for the 6.1 branch? If not, I can do so for you. I can do it with some patience on your part.

I'm currently reading the documentation for how Swift handles release branches:

- https://github.com/swiftlang/swift/blob/main/CONTRIBUTING.md
- https://github.com/swiftlang/swift/blob/main/docs/Branches.md Why don't you give it a go, and if you get stuck I'll help.

The quick version, though, is check out release/6.1, create a new branch based on that, and cherry-pick your change to that branch. Then create a PR against release/6.1 using that branch. Write a PR message that links back to this PR against main and clearly indicates that it is a cherry-pick. Looking at an example may be helpful: https://github.com/swiftlang/swift/pull/77699 I don't usually `git cherry-pick` in my projects so I got a bit confused when the cherry-picked hashes were different. I suppose I thought `git` would combine the changes of each commit in isolation. In any case, I appreciate your streamlined instructions.",,"This patch fixes the division-by-zero case in the following methods:

- `Int128/dividedReportingOverflow(by:)`
- `Int128/remainderReportingOverflow(dividingBy:)`
- `UInt128/dividedReportingOverflow(by:)`
- `UInt128/remainderReportingOverflow(dividingBy:)`

#### Documentation: /dividedReportingOverflow(by:)

> Dividing by zero is not an error when using this method. For a value x, the result of x.dividedReportingOverflow(by: 0) is (x, true).

#### Documentation: /remainderReportingOverflow(dividingBy:)

> Dividing by zero is not an error when using this method. For a value x, the result of x.remainderReportingOverflow(dividingBy: 0) is (x, true).
","Was there an observed performance issue that these `_slowPath` annotations are intended to address, or were they added speculatively to match the implementations for other Integer types? They are speculative but match the implementation of smaller binary integer types. I can remove them if you believe they are unnecessary. This case is somewhat interesting because the remainder _does not_ overflow; rather the analogous division does. It's entirely plausible to me that this was originally defined ""wrong"" on the other integer types, but we're probably stuck with the current behavior. In any case, I think it merits a comment here. More of a matter of my own curiosity. I'm ok with leaving them in, though they shouldn't matter much. I return the equivalent of (0, false) in my project. So, I considered asking about this specific interaction, but I figured Swift chose C++ semantics ± trapping on undefined behavior. Is there a particular comment you have in mind? This comment seems ironic now, doesn't it? This was the specified behavior—I was the one who aligned the actual behavior with the specification in #14219—but for this reason the wording of the corresponding precondition failure (at least at the time) was that ""_division_ results in overflow in remainder operation.""

The current corresponding documentation for this operation on the other integer types correctly documents the subtlety in this regard: ""Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred **during division**.""

[Edit: Ah, so, refreshing my memory—my involvement in this was to make the `*ReportingOverflow` methods return a result instead of (clearly erroneously) trapping at runtime. It's _always_ been the case (since before Swift 3 at least) that, for example, `Int.min % -1` traps at runtime and complains about overflow. Hence, since I had to make `remainderReportingOverflow` return _something_ for `overflow`, the  line of thinking must have been essentially what @oscbyspro describes, that the ""obvious"" result here was to report `true` since the corresponding trapping operator does, in fact, trap and complain about overflow even if the notional operation doesn't.] In a way, I suppose. I would say that the ironic part is the overflow return label, however, since it represents both proper overflow and another kind of failure (division by zero). Still, I can remove it if you find it unfitting. Generally, I don't mess with comments I did not write. It's fine to leave it, I think."
77986,2024-12-05T17:29:35Z,2024-12-07T23:52:40Z,compnerd,6,2,1,83,1,2,0,[],22.0,0,195788.0,0,0,0,0,1743606.783632,,0,1,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please test Linux platform @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Linux platform,,Use a bit more of a declarative style for describing the build rules for mimalloc.,"The flag needs to be a lowercase L (""-l"") instead of an uppercase I (""-I""). Whoops, thanks!"
78025,2024-12-06T20:41:41Z,2024-12-07T22:33:39Z,hjyamauchi,7,0,3,595,9,1,1,[],10.0,0,93118.0,0,0,0,0,1748352.632523,,3,3,0,False,"['compnerd', 'hjyamauchi']","@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test
 @swift-ci please test A local build succeeded. Waiting for the CI to pass. @swift-ci please test Linux platform",,"Revert ""[windows] Various improvements in build.ps1"" https://github.com/swiftlang/swift/pull/77948
Revert ""[windows][toolchain] Enable builtins and sanitizers"" https://github.com/swiftlang/swift/pull/77770
Revert ""utils: unlock building swift-inspect"" https://github.com/swiftlang/swift/pull/77810

To fix CI https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64
",
78022,2024-12-06T20:19:31Z,2024-12-07T18:47:39Z,egorzhdan,3,0,1,38,4,2,2,['c++ interop'],7.0,0,80890.0,0,0,0,0,1761910.844259,,5,1,0,False,['egorzhdan'],@swift-ci please test @swift-ci please test Linux @swift-ci please test LinuxLGTM!,LGTM!,"When compiling with C++ interop enabled, we enable extra safety checks to prevent library authors from accidentally exposing ABI-fragile C++ symbols in resilient Swift interfaces.

The heuristic we use is overly strict, and it prevents the compiler from being able to typecheck various modules from their interfaces when C++ interop is enabled. Darwin and System are two of such modules.

The underlying challenge is that there isn't a good distinction between C structs and C++ structs: whenever parsing a header file in C++ language mode, Clang assumes that every struct is a C++ struct.

This relaxes the heuristic to allow exposing C-like structs in resilient interfaces.

rdar://140203932

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
78019,2024-12-06T17:28:47Z,2024-12-07T19:37:05Z,rintaro,6,4,2,133,3,2,1,[],7.0,0,94098.0,0,0,0,0,1758948.059318,,2,2,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test Linux @swift-ci Please smoke test,,"`@available` and some attributes emit multiple AST attributes from a single syntactic attribute. Prepare for them.
","Should this continue to use `addAttribute` to benefit from the presumed future duplicate diagnostic? Or will that be handled differently? Let's use `addAttribute` for now :+1:, though I haven't made my mind about the diagnostics. Accessors and closures also need duplicate check. Perhaps `TypeCheckAttr` is the right place? > Perhaps `TypeCheckAttr` is the right place?

Yeah maybe ```suggestion
    handler: (BridgedDeclAttribute) -> Void
  ) {
```"
78033,2024-12-06T23:57:45Z,2024-12-07T17:23:37Z,atrick,2,0,1,3,1,1,1,[],11.0,0,62752.0,0,0,0,0,1766957.063256,,2,1,0,False,['atrick'],@swift-ci smoke test @swift-ci smoke test linux,,"Workaround for: rdar://140330692
",
78030,2024-12-06T22:13:00Z,2024-12-07T15:32:28Z,DougGregor,18,4,4,282,21,4,2,[],22.0,0,69188.0,0,0,0,0,1766806.397496,,5,4,0,False,"['stmontgomery', 'DougGregor']","@swift-ci please smoke test @swift-ci please test source compatibility @swift-ci please smoke test @swift-ci please test source compatibility @swift-ci please smoke test @swift-ci please test source compatibility @swift-ci please smoke test @swift-ci please test source compatibility @swift-ci please smoke test @swift-ci please test source compatibility @swift-ci please smoke test @swift-ci please test source compatibility Blah, silly typos crept in. One more round... @swift-ci please smoke test @swift-ci please test source compatibility @swift-ci please test source compatibility @swift-ci please smoke test Thank you! This will unblock using certain API patterns in Swift Testing.Wonderful, thank you! Thank you!","Wonderful, thank you! Thank you!","Since the introduction of custom attributes (as part of property wrappers), we've modeled the context of expressions within these attributes as PatternBindingInitializers. These
PatternBindingInitializers would get wired in to the variable declarations they apply to, establishing the appropriate declaration context hierarchy. This worked because property wrappers only every applied to---you guessed it!---properties, so the
PatternBindingInitializer would always get filled in.

When custom attributes were extended to apply to anything for the purposes of macros, the use of PatternBindingInitializer became less appropriate. Specifically, the binding declaration would never get filled in (it's always NULL), so any place in the compiler that accesses the binding might have to deal with it being NULL, which is a new requirement. Few did, crashes ensued.

Rather than continue to play whack-a-mole with the abused PatternBindingInitializer, introduce a new CustomAttributeInitializer to model the context of custom attribute arguments. When the attributes are assigned to a declaration that has a PatternBindingInitializer, we reparent this new initializer to the PatternBindingInitializer. This helps separate out the logic for custom attributes vs. actual initializers.

Fixes https://github.com/swiftlang/swift/issues/76409 / rdar://136997841
","can varDC ever be null? If it can then you'll crash here, otherwise if not, you don't need the null check before the isa AH, thank you! Thank you for cleaning up the `initContext` hacks!
Now that each custom attribute has its own initializer context. so we need to contextualize them all, not only the first one. Argh! You're right, of course. Thank you!"
78015,2024-12-06T16:13:35Z,2024-12-07T01:00:12Z,nate-chandler,1,0,8,252,6,1,1,[],17.0,0,31722.0,0,0,0,0,1825838.324367,,0,8,0,False,['nate-chandler'],@swift-ci please test,,"**Explanation**: Fix a use-after-free introduced by copy-propagation.

The patch consists of refactoring and a fix, both in the `CanonicalizeOSSALifetime` utility.

The utility runs on an owned value and rewrites copies as needed for consuming uses.  This process generally results in shrinking the value's lifetime.  The utility ensures that the lifetime is not shrunk more than is allowed.  Of interest here, the lifetime must continue to contain the lifetimes of guaranteed values derived from it.  To accomplish this, it visits the uses of such guaranteed values.  That's done by adding those guaranteed values to the list of defs whose uses are visited.  The utility does two walks over the uses of the defs of interest: the first discovers the lifetime, the second rewrites copies.

Previously, both walks determined which defs were of interest.  This introduced the possibility of a disagreement between the two walks' determinations, and, indeed, the two determinations had come to disagree.  The refactoring here eliminates the second determination: the second walk just visits the uses of exactly the defs determined by the first walk.

Previously, every copy was added to the list of defs whose uses are visited.  This was incorrect for copies of guaranteed values derived from the root owned value.  Such copies could be used outside the lifetime of the guaranteed value; consequently it was not legal to sink copies of the guaranteed value to its owned-consuming uses.  This illegal sinking would result in uses-after-frees when such owned-consuming uses were outside the lifetime of the guaranteed value and outside the lifetime of the root owned value.  The fix here is to NOT add copies of such guaranteed values to the list of defs.

**Scope**: Affects optimized code.
**Issue**: rdar://139842132
**Original PR**: https://github.com/swiftlang/swift/pull/77968
**Risk**: Low.  Aligns two walks over operands and avoids recursing into defs whose uses should never have been visited.
**Testing**: Added test.
**Reviewer**: Andrew Trick ( @atrick )
",
77647,2024-11-15T15:35:35Z,2024-12-06T20:53:53Z,finagolfin,16,0,1,2,1,1,1,[],15463.0,0,1848253.0,0,0,0,0,1825988.559475,,0,1,0,False,"['bnbarham', 'jakepetroules', 'compnerd', 'finagolfin']","It is shipped on Windows: https://github.com/swiftlang/swift-installer-scripts/blob/main/platforms/Windows/cli/cli.wxs#L128-L132 @compnerd, OK, but given it isn't actually used on Unix, are you using it on Windows either?

And does anyone know the situation on macOS? ```
> link -dump -imports SwiftDriverExecution.dll | findstr llbuildSwift
    llbuildSwift.dll
                           0 $s12llbuildSwift11BuildEngineC8delegateAcA0cD8Delegate_p_tcfc
                           0 $s12llbuildSwift11BuildEngineCMa
                           0 $s12llbuildSwift11BuildEngineCMn
                           0 $s12llbuildSwift15TaskBuildEngineMp
                           0 $s12llbuildSwift19BuildEngineDelegateMp
                           0 $s12llbuildSwift3KeyVyACSays5UInt8VGcfC
                           0 $s12llbuildSwift4RuleMp
                           0 $s12llbuildSwift4TaskMp
                           0 $s12llbuildSwift5ValueVyACSays5UInt8VGcfC
```

I would assume that other Unicies should have a similar dependency OR they might be statically linking. I downloaded and checked the latest OSS trunk Nov. 14 snapshot toolchain for macOS, looks like it currently ships two copies of this dylib:
```
> find . -name libllbuildSwift.dylib
./usr/lib/swift/pm/llbuild/libllbuildSwift.dylib
./usr/lib/swift/macosx/libllbuildSwift.dylib
```
Only one library uses it, just like on Windows, and it only appears to use the one in `usr/lib/swift/macosx/`:
```
> find . -name ""*.dylib"" | xargs llvm-objdump --dylibs-used --macho | ag ""dylib:$|libllbuildSwift.dylib"" |ag -B1 ""llbuildSwift.dylib ""
./usr/lib/swift/pm/llbuild/libllbuildSwift.dylib:
        @rpath/libllbuildSwift.dylib (compatibility version 0.0.0, current version 0.0.0)
./usr/lib/swift/macosx/libllbuildSwift.dylib:
        @rpath/libllbuildSwift.dylib (compatibility version 0.0.0, current version 0.0.0)
./usr/lib/swift/macosx/libSwiftDriverExecution.dylib:
        @rpath/libllbuildSwift.dylib (compatibility version 0.0.0, current version 0.0.0)

> llvm-objdump --rpaths --macho usr/lib/swift/macosx/libSwiftDriverExecution.dylib
usr/lib/swift/macosx/libSwiftDriverExecution.dylib:
/usr/lib/swift

> find . -name ""*.dylib"" | xargs llvm-objdump --dylibs-used --macho | ag ""dylib:$|libSwiftDriverExecution.dylib"" | ag -B1 ""libSwiftDriverExecution.dylib ""
./usr/lib/swift/macosx/libSwiftDriverExecution.dylib:
        @rpath/libSwiftDriverExecution.dylib (compatibility version 0.0.0, current version 0.0.0)

> find usr/bin -type f | xargs llvm-objdump --dylibs-used --macho | ag llbuildSwift.dylib

> find usr/bin -type f | xargs llvm-objdump --dylibs-used --macho | ag "":$|libSwiftDriverExecution.dylib"" | ag -B1 ""libSwiftDriverExecution.dylib ""
usr/bin/swift-build-sdk-interfaces:
        @rpath/libSwiftDriverExecution.dylib (compatibility version 0.0.0, current version 0.0.0)
usr/bin/swift-driver:
        @rpath/libSwiftDriverExecution.dylib (compatibility version 0.0.0, current version 0.0.0)

> llvm-objdump --rpaths --macho usr/bin/swift-build-sdk-interfaces
usr/bin/swift-build-sdk-interfaces:
/usr/lib/swift
@executable_path/../lib/swift/macosx

> llvm-objdump --rpaths --macho usr/bin/swift-driver
usr/bin/swift-driver:
/usr/lib/swift
@executable_path/../lib/swift/macosx
```
Since the one in `usr/lib/swift/pm/llbuild/` installed by this command is unused in both the linux and macOS toolchains, should be fine to remove it in this pull, as Windows doesn't use this `build-script`.

@marcprux, first time I'm looking at macOS dylib dependencies and rpaths, let me know if I missed anything.

@artemcm, I see you tried to statically link on macOS and remove the copy in `usr/lib/swift/macosx/` also in swiftlang/swift-driver#965 a couple years ago, but ended up having to revert it: let me know what you think of this cleanup.

This is ready for a CI run, if someone would kick one off. @jakepetroules, would you kick off a CI run here? @swift-ci please test Alright, passed CI, ready for review.

Since this was added for SwiftPM in #17829 six years ago by @hartbit, but is no longer used, perhaps you can review, @bnbarham? @swift-ci please test OK, passed CI again after break, @dschaefer2, perhaps you could review, because this was originally added for SwiftPM but is now unused? @swift-ci please build toolchain Let's make sure the toolchain jobs pass, but as far as I can see this is not used 🤔. There's a `--llbuild-link-framework` in `swiftpm/Utilities/bootstrap` but it isn't set from build-script at all (maybe we should remove it too?). > There's a --llbuild-link-framework in swiftpm/Utilities/bootstrap but it isn't set from build-script at all (maybe we should remove it too?).

Looks like that was added a long time ago and [`build-script` sets it to build against the fresh llbuild in the `build_root`](https://github.com/swiftlang/swift/blob/20f201d3ecd5e1ea4adc1b57baccba2f80792f86/utils/swift_build_support/swift_build_support/products/swiftpm.py#L57), not this installed llbuild in the toolchain. It does however [add a backup rpath to this directory on macOS](https://github.com/swiftlang/swift-package-manager/blob/6ae005e814a4eef2b5a44fcc7276313f984bed92/Utilities/bootstrap#L807), so those two lines can definitely be removed after this pull, even if you don't want to remove all the logic for that now seemingly unused `--llbuild-link-framework` flag. The CI broke early yesterday, #77955, I will rerun the toolchain builds once some of the compiler fixes for that like #77959 are merged. Alright, toolchain builds should work now.

@swift-ci please build toolchain Toolchains built fine, @bnbarham, ready for review and merge. Thanks, I'll submit for 6.1 next.CC @dschaefer2 for your info. Seems fine to me though, it doesn't appear to be used and toolchain builds passed.","CC @dschaefer2 for your info. Seems fine to me though, it doesn't appear to be used and toolchain builds passed.","I'm cross-compiling the trunk Swift 6.1 toolchain for Android and was surprised to find that this library hasn't been used by the linux toolchain in years, as the following shows no other binary links to it:
```
> ag --search-binary libllbuildSwift swift-5.* swift-6.0.2-RELEASE-fedora39/ swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-ubi9/
Binary file swift-5.10.1-RELEASE-fedora39/usr/lib/swift/pm/llbuild/libllbuildSwift.so matches.
Binary file swift-5.8.1-RELEASE-ubi9/usr/lib/swift/pm/llbuild/libllbuildSwift.so matches.
Binary file swift-5.9.2-RELEASE-ubi9/usr/lib/swift/pm/llbuild/libllbuildSwift.so matches.
Binary file swift-6.0.2-RELEASE-fedora39/usr/lib/swift/pm/llbuild/libllbuildSwift.so matches.
Binary file swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-ubi9/usr/lib/swift/pm/llbuild/libllbuildSwift.so matches.
```
I tried building SwiftPM natively on Android as part of the toolchain with this change and had no problem. The CMake-built `swift-bootstrap` uses this library but directly from the build directory, not from the install directory, so this pull has no effect on that.

The Windows trunk build uses the new `swift-toolchain-sqlite` package from @jakepetroules and doesn't appear to install this library already.

I don't know if macOS still needs this library installed, as I don't use that OS, but I can limit this change to non-Darwin if needed.

Jake and @ahoppen, let me know what you think.",
78000,2024-12-06T00:11:28Z,2024-12-06T22:18:03Z,compnerd,5,0,1,17,1,1,1,[],8.0,0,79602.0,0,0,0,0,1835686.89978,,0,1,0,False,"['weliveindetail', 'compnerd']","CC: @weliveindetail @hjyamauchi  @swift-ci please smoke test Good point. I have no strong opinion on it, but if we remove this check, we might want to raise the `cmake_minimum_required` version in the top-level swift project from 3.19 to 3.28, because this is what swift-inspect requires https://github.com/swiftlang/swift/blob/ee9317a7b574340c8e7c7855f24592e073c57676/tools/swift-inspect/CMakeLists.txt#L1

FYI: We did have version checks like this before https://github.com/swiftlang/swift/pull/77948 here: https://github.com/swiftlang/swift/pull/77948/commits/6ca7ed6f561c182a81279b60fd05b5eae93c99e7 @weliveindetail swift-inspect is built as a standalone project, not part of the Swift toolchain build, so the top level CMake version check doesn't impact it.

Yeah, I think that I would rather make things unconditional if possible. > swift-inspect is built as a standalone project, not part of the Swift toolchain build, so the top level CMake version check doesn't impact it

@compnerd Yes, just saying that it's suboptimal to bail out so late in the build process due to an insufficient CMake version. That was the intention of the early check, but ithat's nice-to-have. If it causes issues, let's drop it.",,"There is no guarantee that `cmake` is available in the path. CMake may be provided through VS or the VS Build Tools, in which case, you must be in a VSDevCmd environment to invoke `cmake`. This adds quite a bit of complexity for little gain as the projects will check of the minimum version required (`cmake_minimum_required`).",
78012,2024-12-06T12:10:23Z,2024-12-06T21:01:08Z,hamishknight,1,0,1,56,4,1,1,"['🍒 release cherry pick', 'swift 6.1']",8.0,0,31852.0,0,0,0,0,1840302.579757,,0,1,0,False,['hamishknight'],@swift-ci please test,,"*6.1 cherry-pick part of c4efa0d5f0980b2d8b026df426fd5fc6a067d14d*

- Explanation: Allows solver-based cursor info to be used with UnresolvedMemberExprs
- Scope: Affects solver-based cursor info
- Issue: rdar://140980197
- Risk: Low, applies existing logic to more cases
- Testing: Added tests to test suite
- Reviewer: Alex Hoppen",
77860,2024-11-27T17:40:21Z,2024-12-06T20:40:14Z,rmaz,14,0,2,61,10,2,2,[],9.0,0,788398.0,0,0,0,0,1841559.623032,,1,2,0,False,"['rmaz', 'xymus']","@swift-ci please test @swift-ci please test @swift-ci please test > LGTM
> 
> Do you know why it currently fails or where the compiler is using that path? I can see the `cannot open file ` error when running the test locally, but I would have expected that path to be used mostly for diagnostics or by the dependency scanner so I'm surprised the frontend tries to open the file.

I believe the test failure is unrelated, i'll give it another rebase to check Yeah the failure on `shebang-env.swift` looks unrelated and it should be fixed by now.

However I meant to ask if you know why your test fails before your fix? Why is the compiler opening that file? > However I meant to ask if you know why your test fails before your fix? Why is the compiler opening that file?

Oh I see. The test fails because the deserialized swiftinterface path for B.swiftmodule is relative, but is not found in the SDK. When deserializing the compiler will construct its path relative to the SDK, and fails with:
```
<unknown>:0: error: cannot open file '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/relative_path/B.swiftmodule/arm64-apple-macos.swiftinterface' (No such file or directory)
```
This is raised here, while checking the dependencies of the module:
https://github.com/swiftlang/swift/blob/9e7fa1a023f4e3ad5020f572079bddc41d1ba054/lib/Frontend/ModuleInterfaceBuilder.cpp#L159-L163 @swift-ci please test Oh ok, we consider the swiftinterface as a dependency of the client swiftmodules to trigger a rebuild on upstream changes. That makes sense, thank you! @swift-ci please test @swift-ci please smoke test @swift-ci please test @swift-ci please test @swift-ci please smoke test Linux Platform @swift-ci please smoke test macOS PlatformLGTM

Do you know why it currently fails or where the compiler is using that path? I can see the `cannot open file ` error when running the test locally, but I would have expected that path to be used mostly for diagnostics or by the dependency scanner so I'm surprised the frontend tries to open the file.","LGTM

Do you know why it currently fails or where the compiler is using that path? I can see the `cannot open file ` error when running the test locally, but I would have expected that path to be used mostly for diagnostics or by the dependency scanner so I'm surprised the frontend tries to open the file.","When serializing the module interface path of an interface that is part of the SDK, we serialize relative to the SDK path. During deserialization we need to know if a path was serialized relative to the SDK or not. The existing logic assumes any relative path has been serialized relative to the SDK, which makes it impossible to compile modules from relative swiftinterface paths that are not part of the SDK.

Update the swiftmodule file to include an attribute to show if the path was serialized relative to the SDK or not, which is used during deserialization to correctly reconstruct the interface path.
",
78001,2024-12-06T00:19:29Z,2024-12-06T20:05:46Z,DougGregor,1,0,1,225,5,1,1,[],6.0,0,72043.0,0,0,0,0,1842766.920469,,0,1,0,False,['DougGregor'],@swift-ci please test,,"* *Explanation*: Improve the mangling of macro expansions within local contexts to not trigger type checking, eliminating a class of compiler crashes when macros are used within local types.
* *Scope*: Affects the mangling of macro expansions within local types.
* *Issues*: rdar://139734958
* *Original PR*: https://github.com/swiftlang/swift/pull/77999
* *Risk*: Low. It's a part of name mangling that isn't ABI.
* *Testing*: New tests added
* *Reviewed by*: @slavapestov 
",
77999,2024-12-06T00:09:28Z,2024-12-06T18:47:59Z,DougGregor,2,0,1,225,5,0,0,[],6.0,0,67115.0,0,0,0,0,1848296.849181,,3,1,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test Windows,,"The mangling of macro expansions relies on having a type-checked AST for its enclosing context. When that enclosing context is within a local context (say, a local type), mangling would trigger type checking of that local type, which could then involve assigning local discriminators. However, if this happens before type checking of the enclosing function body, we would end up failing to assign closure discriminators to (e.g.) autoclosures within the body.

The fundamental problem here is the interaction between discriminator assignment (which can only happen after type checking) and mangling of macro expansion buffers (which can happen during that type checking). Break this cycle by providing a different approach to mangling macro expansions within local contexts as the innermost non-local context + a name-based discriminator within that local context. These manglings are not ABI and are not stable, so we can adjust them later if we come up with a scheme we like better. However, by breaking this cycle, we eliminate assertions and miscompiles that come from missing discriminators in this case.

Fixes rdar://139734958.
",
77995,2024-12-05T22:26:09Z,2024-12-06T18:25:14Z,lhoward,2,0,2,92,3,1,1,['c++ interop'],3879.0,0,71952.0,0,0,0,0,1849659.814433,,0,2,0,False,['DougGregor'],"@swift-ci please test Merged, thank you!",,"  - **Explanation**: allow C++ interop shared reference retain function to return self
  - **Scope**: additive, rather than breaking, to existing code
  - **Issues**:
  - **Original PRs**: #77837
  - **Risk**: Minimal
  - **Testing**: New tests added
  - **Reviewers**: @DougGregor @egorzhdan ",
77530,2024-11-11T18:08:57Z,2024-12-06T17:41:32Z,abertelrud,4,6,1,191,2,4,2,[],38.0,1,2158358.0,0,0,0,0,1852286.534489,,3,1,0,False,['abertelrud'],@swift-ci Please smoke test @swift-ci Please smoke test @xedin I've updated the PR — could I ask for another look?  Thank you! @swift-ci Please smoke test linux,,"When a decl that has properties with accessors (`get`, `set`, `willSet`, `didSet`, etc) is nested inside another type, those accessor implementations aren't playground-transformed.
 
### Details

The reason is that the playground transform uses an `ASTWalker` to get to the top-level structure, but then once it’s inside a type, it does directly nested `transformDecl()` calls.  And that inner check is missing a case for accessors.

This is a follow-on fix to https://github.com/swiftlang/swift/pull/77498.

### Future work

It's unfortunate that the playground transform reaches decls in two different ways (using an `ASTWalker` to get to the top-level decls but then using directly nested calls below).  This seems to be worth resolving at some point (perhaps by using the `ASTWalker` for the whole traversal?), but that’s a larger change, and so this is worth addressing with a safer short-term fix.

### Changes

- add an else-clause that checks if the declaration is a `VarDecl`, and if so, calls `transformDecl()` on each accessor in PlaygroundTransform.cpp
- add a unit test for nested accessors (this test also tests the unnested case)

rdar://139656464","Will this cast cover `lazy var` as well? For example, will we see results for `didSet` in:
```
struct S {
    lazy var v = 0 {
        didSet {
            // Do something
        }
    }
}

var s = S()
s.v = 1
``` Great question, but I did check and we do see it (as long as there is something that generates a result in the `didSet()`).  We get `scope_entry` and `scope_exit` events for the code as written, and adding for example `let foo = 42` results in a `log_with_id` as well. Great, thanks for checking! Not sure what else could potentially fall into the 'var-like, but not really a `VarDecl`' category. I'm not sure either, but I will look into that.  I guess my feeling here is that this fix addresses known cases, and that we can address further fixes (with additional specific unit tests) with follow-on fixes.  My concern with making the check be too broad without working through the possibilities is that we might transform cases we don't want to.

I'll take a closer look at whether there is another type than `VarDecl` that we should be checking against, and with any luck perhaps one of the Swift engineers can provide some pointers. @abertelrud I think you want `AbstractStorageDecl` here instead of `VarDecl` because that would also cover subscripts and you should add tests for that as well. Great, thank you @xedin!  I'll update the PR."
77905,2024-12-02T19:53:05Z,2024-12-06T17:24:08Z,rintaro,4,2,1,989,17,2,1,[],354.0,0,336663.0,0,0,0,0,1853334.040544,,7,1,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test,,"* SpecializeAttr
* UnavailableFromAsyncAttr
* DocumentationAttr
* StorageRestrictionsAttr
* NonisolatedAttr

Other fixes:
* Correct parameter generation for operator functions (no argument labels)
* Bunch of attribute generation test cases and fixes
* Introduce `AttrArgumentState` to simplify attribute arguments handling
* Apply attributes to VarDecls in PatternBindingDecls
* Correct zero-argument compound decl name reference e.g. `foo()`",Accidental format change? Oops. I will fix this when I revisit here.
77950,2024-12-04T18:02:16Z,2024-12-06T05:43:27Z,tshortli,2,0,1,68,5,0,0,[],82281.0,0,168526.0,0,0,0,0,1855321.059707,,3,1,0,False,['tshortli'],@swift-ci please smoke test @swift-ci please smoke test,,"This query's functionality was not useful enough to be exposed on `Decl` and cached in the request evaluator. Instead, just share a local implementation of it in `TypeCheckAttr.cpp`.
",
77968,2024-12-05T01:32:53Z,2024-12-06T15:00:20Z,nate-chandler,6,0,8,252,6,1,1,[],64488.0,0,134875.0,0,0,0,0,1861935.666412,,2,8,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark @swift-ci please clean test linux platform @swift-ci please test linux platform @swift-ci please test macos platform👍 ,👍 ,"The utility performs two def-use traversals.  The first determines liveness from uses.  The second rewrites copies.

Previously, the defs whose uses are analyzed were discovered twice, once during each traversal.  The non-triviality of the discovery logic (i.e. the logic determining when to walk into the values produced by the instructions which were the users of visited uses) opened the possibility for a divergence between the two discoveries.  This possibility had indeed been realized--the two discoveries didn't find exactly the same defs, the two traversals didn't visit exactly the same uses, and issues ensued.

Here, the defs whose uses are analyzed are discovered only once during the first traversal.  The second ""traversal"" now reuses the defs discovered in the first traversal, eliminating the possibility of a def discovery difference.

Extra care is taken to preserve the traversal order of the first traversal (as compared to the order before this change).  Evidently diagnostics depend on it.  The second traversal's order is changed, which results in slight SIL perturbations in certain cases (e.g. an instruction which consumes a value and its copy may see the order of those operands reversed).

Because discovery of defs walks into reborrows and borrowed-from instructions, copies are processed whose underlying value is a reborrow or borrowed-from.  Such copies cannot generally be sunk to consuming uses because the lifetime of their underlying value (the reborrow or borrowed-from) may not extend to the consuming use.   Eliminating such copies is outside the scope of OSSACanonicalizeOwned--it's the responsibility of a separate OSSACanonicalizeGuaranteed utility.  For this reason, when visiting copies during the first traversal, the copies are only walked into (and added to the list of defs) if their operand is not a reborrow or borrowed-from.

rdar://139842132
",
77754,2024-11-21T00:32:52Z,2024-12-06T14:30:21Z,egorzhdan,14,2,1,43,4,3,2,['c++ interop'],9.0,0,1346252.0,0,0,0,0,1863760.503796,,6,1,0,False,"['egorzhdan', 'tshortli']","@swift-ci please test It makes sense to me that when Cxx interop is an implementation detail of a module, but not used in its interface, that the flag should be hidden to avoid affecting the mode in which downstream dependencies are compiled with respect to the client. What about when the interface does depend on Cxx interop, though? > What about when the interface does depend on Cxx interop, though?

If the `-cxx-interoperability-flag` was passed to the current compiler invocation, it should get propagated to the compiler sub-instance that rebuilds the module from its interface, and the build would succeed. If the flag wasn't passed, the user would see a compiler error when trying to build the module.

The user-facing message isn't ideal, it could explicitly mention the fix of adding the missing flag – we should improve that in the future. @swift-ci please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737 > The user-facing message isn't ideal, it could explicitly mention the fix of adding the missing flag – we should improve that in the future.

Ok, yeah I'd like to see something like that in the future to make failures to build textual interfaces more explainable and debuggable. For example, we could require that owners of libraries that emit textual interfaces which externally depend on Cxx interop specify a new flag that does get printed in the interface that causes client builds to fail fast if they do not enable interop themselves. The module interface verification build task should be able to diagnose whether this new flag is needed for the library owner.
 Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please test  Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please test  Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please test  Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please test Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please smoke test Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please smoke test Linux Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please smoke test Linux Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please smoke test Linux Please test with following PR:

https://github.com/swiftlang/swift-driver/pull/1737

@swift-ci please smoke test macOSLGTM!",LGTM!,"This makes sure that the compiler does not emit `-enable-experimental-cxx-interop`/`-cxx-interoperability-mode` flags in `.swiftinterface` files. Those flags were breaking explicit module builds. The module can still be rebuilt from its textual interface if C++ interop was enabled in the current compilation.

rdar://140203932

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","Is this comment still valid? Good catch, updated it"
77987,2024-12-05T17:52:46Z,2024-12-06T14:29:13Z,egorzhdan,6,0,1,22,4,1,1,['c++ interop'],12.0,0,74190.0,0,0,0,0,1863829.244381,,4,1,0,False,['egorzhdan'],@swift-ci please test @swift-ci please test Linux @swift-ci please test Linux @swift-ci please test macOS @swift-ci please test Linux @swift-ci please test LinuxLGTM!,LGTM!,"When explicitly asked not to load the C++ standard library, Swift should not emit warnings for missing libstdc++.

This fixes a compiler warning when building the Cxx module on Linux.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77994,2024-12-05T22:14:18Z,2024-12-06T04:09:36Z,atrick,3,0,1,4,2,0,0,[],10.0,0,42910.0,0,0,0,0,1879418.588143,,3,1,0,False,"['atrick', 'eeckstein']",@swift-ci smoke test @swift-ci smoke test Thanks!,,"Fixes rdar://141001921 (OSS Swift CI:
oss-swift_tools-RA_stdlib-DA_test-device-non_executable failed: test: IRGen/loadable_by_address_objc
test: SILGen/ptrauth_field_fptr_import)
",
77829,2024-11-25T13:06:55Z,2024-12-06T14:05:17Z,Xazax-hun,8,4,1,165,3,2,2,['c++ interop'],48.0,0,953905.0,0,0,0,0,1865267.022772,,4,1,0,False,['Xazax-hun'],"This needs to be rebased one https://github.com/swiftlang/swift/pull/77764 lands. @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test windows I tried to look into the CI failure in Windows, and it is really odd. The names of the template parameters are missing where the assertion fails and the template seems to be imported as part of a C++ 20 module. Wondering if this is intentional. I am redoing this PR to not to rely on the parameter names for the STL.  @swift-ci please smoke testI only have one question on this, otherwise LGTM. LGTM!","I only have one question on this, otherwise LGTM. LGTM!","We only add conditional annotations because those do not break backward
compatibility (we might import span and similar view types as
non-escapable in the future). We inject these annotations in the
importer to make sure we have consistent behavior acress the different
standard library implementations. Once we can ship APINotes for the STL
and we have conditional escapability support in APINotes we can migrate
to that solution. But it is not possible as of today and Clang already
has precedent of injecting information for the STL with lifetimebound.

rdar://139065558","Hmm, isn't span currently imported as escapable in Swift? Yup. Good catch! The comment supposed to be: remove when span is non-escapable by default. I will fix this up.  Would this work correctly if the template parameter is unnamed? This probably shouldn't happen with the hand-picked stdlib types (unless Clang picks a redecl of the class template that has an unnamed parameter? not sure if that is possible).

Do you think it would be reasonable to have an assertion here, to make sure there isn't some template weirdness in one of the C++ stdlib versions that we support? Good point! I don't think it would work with unnamed templates. I will add an assertion as it is unlikely that we would run into this with STL implementations. "
77997,2024-12-05T23:41:59Z,2024-12-06T09:59:48Z,slavapestov,2,0,1,273,1,2,2,[],7.0,0,37069.0,0,0,0,0,1879999.372747,,1,1,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please smoke test Linux,,,
78004,2024-12-06T00:43:18Z,2024-12-06T07:23:30Z,atrick,1,0,1,2,1,0,0,[],15.0,0,24013.0,0,0,0,0,1889377.931051,,1,1,0,False,['atrick'],@swift-ci smoke test,,"Add REQUIRES: executable_test

Fixes rdar://141008973 (🟠 OSS Swift CI:
oss-swift_tools-RA_stdlib-DA_test-device-non_executable failed: test:
SILOptimizer/propagate_opaque_return_type.swift (exit code 2))",
77992,2024-12-05T21:04:41Z,2024-12-06T05:47:52Z,meg-gupta,2,0,1,33,2,1,1,[],8.0,0,31392.0,0,0,0,0,1895116.279028,,2,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test linux platform,,"ConditionForwarding is able to handle owned values and non-local guaranteed values. Remove incorrect assertion about enum trivialiaty

Fixes rdar://140977875

",
77893,2024-12-02T11:21:45Z,2024-12-06T05:42:22Z,Xazax-hun,6,0,1,12,2,2,2,['c++ interop'],12.0,0,325239.0,0,0,0,0,1895445.775439,,3,1,0,False,"['Xazax-hun', 'rjmccall']","@swift-ci please smoke test The rdar was about uncommenting the commented out line but did not provide any context what is blocking us from doing that.  Okay. Note that you do still have that line in the code about move constructors, and it's weird to be using different rules for them.

I was hoping the explanatory comment was going to be something like ""There's a bug in how we interact with the fact that C++ does blah blah blah with inline copy constructors, so don't require a body for now"". If we really don't know why we had that condition in the first place, I tend to agree with Saleem that we should just remove it (in both places). Abstractly, I certainly don't see any reason why we would only look for constructors defined inline in the class, which seems to be what this condition is doing, so if there's a reason we do need to do that, it deserves a real comment regardless. > it deserves a real comment regardless

I agree with everything you said. Unfortunately, I looked at the commit that introduced this code and the rdar that was linked but none of them provided the context why the two methods are not symmetric. 

I will give removing this call in both places a try and see if anything breaks.  @swift-ci please test @swift-ci please testThis is fine to merge, but I wonder if we should just delete the line that follows as it is already commented out. Or was the radar related to the deleted ctor?","This is fine to merge, but I wonder if we should just delete the line that follows as it is already commented out. Or was the radar related to the deleted ctor?",There is no reason to require a body for move/copy ctors to use them.,
77993,2024-12-05T21:15:14Z,2024-12-05T23:44:52Z,compnerd,2,0,1,1,1,0,0,[],6.0,0,9676.0,0,0,0,0,1916201.066346,,0,1,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please smoke test,,Disable the test until someone can look into why the path is getting corrupted.,
77770,2024-11-21T14:16:13Z,2024-12-05T23:46:47Z,weliveindetail,13,20,11,112,9,4,0,[],586086.0,0,1243834.0,0,0,0,0,1916785.016871,,3,11,0,False,"['weliveindetail', 'compnerd', 'hjyamauchi']","> I was able to build and test the small asan example with this. Any reason not to merge this?

@hjyamauchi Great! I think this is ready to land. (Once I default-enabled them.) Let's give the CI a try. If it works, this can land. Please note: I'd like to squash commits before/while merging. @swift-ci please test @swift-ci please test Windows platform The Windows tests failed, because the patch implicitly enabled 9 previously unsupported tests in Swift. 3 of them pass, but the others fail:
```
Failed Tests (6):
  Swift(windows-x86_64) :: Driver/sanitize_coverage.swift
  Swift(windows-x86_64) :: IRGen/address_sanitizer_use_odr_indicator.swift
  Swift(windows-x86_64) :: Interpreter/indirect_enum.swift
  Swift(windows-x86_64) :: Reflection/typeref_decoding_asan.swift
  Swift(windows-x86_64) :: Sanitizers/asan/asan.swift
  Swift(windows-x86_64) :: Sanitizers/sanitizer_coverage.swift
``` I set all failing tests to UNSUPPORTED on Windows. @hjyamauchi Can we give this another try as well please?

IRGen/address_sanitizer_use_odr_indicator.swift appears to have failed with an ODR-related mangling issue. All the others failed because the driver seems to reject the `-sanitizer` option on Windows:
```
error: unsupported option '-sanitize=address' for target 'x86_64-unknown-windows-msvc'
``` @swift-ci please test Windows platform @swift-ci please smoke test The Windows CI seems to have this (unrelated) issue at the moment.
```
SIL verification failed: Should not have an operand for the opened existential: AMI->getTypeDependentOperands().empty()
``` ~~Will https://github.com/swiftlang/swift/pull/77972 fix the issue? (It touches the AMI check as well.)~~ @swift-ci please test Windows platform @swift-ci please smoke test Linux platform @swift-ci please test Windows platform",,"Profile and builtin libraries from compiler-rt are static and do not require a link step. We can enable them in our CMake caches and we can build and install them in the unified LLVM build step. Sanitizers contain dynamic libraries. We need the target-specific Visual Studio shell to perform the link step. This patch adds extra build steps in build.ps1 that reconfigure, build and install the target-specific build-trees in the LLVM runtimes directory through their respective Visual Studio shells.","What is the motivation for the new option? I think that if we are able to build the sanitizers, we should do that unconditionally. This has been a missing piece in our toolchain distribution, but it was left out due to the inability to get it to work rather than being intentionally left out. We should do this for all the SDKs:

```ps1
for ($Arch in $WindowsSDKArch) {
  Invoke-BuildStep Build-Sanitizers Windows $Arch $($HostArch.ToolchainInstallRoot)\usr""
}
``` Yes agree in principle, but it will also add extra requirements for the default build. For example, the Visual Studio cross libs for Arm64 must be installed (which I had to do explicitly). We need to check if CI is prepared for that and maybe add a note in the quick-start docs right? If we keep it disabled by default, that wouldn't be necessary (now). I'd keep the option for a transition period and see. However, if you want it done now, no problem. Done Renamed it to `-BuildSanitizers`, so it's easier to distinguish from `-UseSanitizers` option in https://github.com/swiftlang/swift/pull/77844 Don't sanitizers add overhead that will impact compiler perf if they are unconditionally used? Yes, that's right. We wouldn't run CI with sanitized builds by default for example. However, this PR is about building them as part of the toolchain and eventually ship them. I think the requirement that the VS cross libs for Arm64 must be installed isn't a big deal as the swift-build instruction already includes that and the swift-build and swift.org CIs already do so, if we actually need to require that.

If we use `-BuildSanitizers`, the produced compiler doesn't build in sanitizer mode by default, right? If we want to build the toolchain binaries in sanitizer mode, we'd need to build a second-gen toolchain, that is, build with the sanitizer-built toolchain as the pinned toolchain, right? If so, is there really a compiler performance overhead if we enable `-UseSanitizers` by default? I'd imagine it'd only mean a larger toolchain size mostly due to the additional libraries/DLLs and give us an option to build in sanitizer mode if we choose to, no? I was able to build and test the small asan example with this. Any reason not to merge this? > the requirement that the VS cross libs for Arm64 must be installed isn't a big deal as the swift-build instruction already includes that

Great. Let me enable `-BuildSanitizers` by default and double-check in PR tests.

> we'd need to build a second-gen toolchain

Exactly

> is there really a compiler performance overhead if we enable -UseSanitizers by default?

Well, binaries grow due to extra sections for the sanitizer counters, which increases link times. And runtime of tests will be longer. I didn't measure yet, but I'd expect a 10-50% slowdown. I think it's good for 2nd-stage test bots like https://ci.swift.org/job/oss-swift-incremental-ASAN-RA-macos/ but not for pre-merge testing. > is there really a compiler performance overhead if we enable -UseSanitizers by default?

Sorry I meant `-BuildSanitizers` rather than `-UseSanitizer` Is there a reason to have `-BuildSanitizers` at all? Can we not just drop the option and enable it unconditionally? The indentation seems off here? (Or is that GH?) I'm slightly worried about this as this is the ""legacy"" path - the builtins build I thought was being replaced with the runtimes build. I would just inline the single use of this variable. Done My understanding was that this option lets the runtimes build include `llvm-project\compiler-rt\lib\builtins` which results in a `builtins-<triple>` build-tree next to the `runtimes-<triple>` one in the `runtimes` build directory. I don't see a deprecation warning in CMake, neither swiftlang not upstream  https://github.com/llvm/llvm-project/blob/c9fbabfdc92f12b2b0148762e6e789157a172e4d/compiler-rt/lib/CMakeLists.txt#L16 I might be wrong though. We will have a second `foreach` once we got Android to work Yes, I did that with commit 934c9e3816d599f3433bbbd94384775ab7c73ea0 Ok, double-checked: I should should switch this off as we get duplicate build artifacts in:
```
runtimes\runtimes-x86_64-unknown-windows-msvc-bins\compiler-rt\lib\builtins
runtimes\builtins-x86_64-unknown-windows-msvc-bins
```"
77983,2024-12-05T16:01:14Z,2024-12-05T22:36:13Z,hamishknight,2,0,2,134,8,2,2,[],9.0,0,25475.0,0,0,0,0,1919243.018615,,4,2,0,False,['hamishknight'],@swift-ci please test @swift-ci please test source compatibilityLooks reasonable to me.,Looks reasonable to me.,"Avoid wrapping parameters in the function reference for compound applies, and make sure we consult the parameter label in the compound name if it's present to determine whether to match using the projected value or not. This matches the existing logic in `unwrapPropertyWrapperParameterTypes`.

While here, factor out `Expr::getNameLoc`, which enables solver-based cursor info for UnresolvedMemberExprs, which was previously missed.

Resolves #77823
Resolves #77981
rdar://140503460
rdar://140980197",
77948,2024-12-04T15:57:27Z,2024-12-05T20:59:37Z,weliveindetail,5,0,16,512,1,1,1,[],1073.0,0,104530.0,0,0,0,0,1926816.052928,,0,16,0,False,"['weliveindetail', 'compnerd', 'hjyamauchi']","Once LLDB testing landed, this needs additions from https://github.com/weliveindetail/swift/commit/buildps1-consolidate-deps-infos-with-lldb-testing @swift-ci please test @swift-ci please test Windows Platform

I hope this is a transient issue.
```
[2024-12-04 17:36:51] Building 'C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift' to 'T:\101' for arch 'x86_64'...
Error: The term 'if' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
    at Get-BuiltToolchainTool, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 897
    at Get-ToolchainTool, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 973
    at <ScriptBlock>, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 1122
    at Isolate-EnvVars, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 623
    at Build-CMakeProject, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 1010
    at <ScriptBlock>, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 1893
    at Isolate-EnvVars, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 623
    at Build-Runtime, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 1863
    at Invoke-BuildStep, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 457
    at <ScriptBlock>, C:\Users\swift-ci\jenkins\workspace\swift-PR-windows\swift\utils\build.ps1: line 2878
  From System.Management.Automation.CommandNotFoundException: The term 'if' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
      at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)
      at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)
      at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
      at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
      at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)
      at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)
      at System.Management.Automation.PSScriptCmdlet.RunClause(Action`1 clause, Object dollarUnderbar, Object inputToProcess)
      at System.Management.Automation.PSScriptCmdlet.DoEndProcessing()
      at System.Management.Automation.CommandProcessorBase.Complete()
``` @swift-ci please test Windows Platform @swift-ci please smoke test",,"This PR contains the combined patch-set from the following individual reviews:

* https://github.com/swiftlang/swift/pull/77875
* https://github.com/swiftlang/swift/pull/77874
* https://github.com/swiftlang/swift/pull/77945
* https://github.com/weliveindetail/swift/pull/2",
77978,2024-12-05T12:47:57Z,2024-12-05T20:29:46Z,eeckstein,1,0,1,39,3,1,1,[],30.0,0,27714.0,0,0,0,0,1928603.170512,,0,1,0,False,['eeckstein'],@swift-ci test,,"Fixes a crash due to a wrong class type when creating a value_metatype instruction

rdar://140926647
",
77959,2024-12-04T20:01:10Z,2024-12-05T20:36:55Z,slavapestov,4,1,1,89,8,1,1,[],2797.0,0,88545.0,0,0,0,0,1928179.411443,,1,1,0,False,['slavapestov'],"@swift-ci Please smoke test @swift-ci Please test source compatibility https://github.com/swiftlang/swift-docc/pull/1116/
@swift-ci Please smoke test @swift-ci Please smoke test",,"Just because the type of the initializer expression is an opaque return type, does not mean it is the opaque return type *for the variable being initialized*.

It looks like there is a bit of duplicated logic and layering violations going on so I only fixed one caller of openOpaqueType(). This addresses the test case in the issue. For the remaining calls I added FIXMEs to investigate what is going on.

Fixes https://github.com/swiftlang/swift/issues/73245.
Fixes rdar://127180656.","This are functionally equivalent (DeMorgan’s Theorem), just a matter of preference which one to use."
77837,2024-11-26T00:57:10Z,2024-12-05T19:25:31Z,lhoward,12,5,2,92,3,4,2,['c++ interop'],345.0,0,844101.0,0,0,0,0,1932464.457638,,8,2,0,False,"['DougGregor', 'zoecarver', 'finagolfin', 'lhoward']","Note to self: need separate error message for invalid retain return value. Tests are now failing, investigating. Tests passing again. LGTM Just double checking we don't need to do anything extra at the retain call site to ignore the return value. @swift-ci please smoke test macOS @swift-ci please smoke test What's the next release one might expect to see this in? Once it's merged to main, we can cherry-pick to the `release/6.1` branch for the 6.1 release (Q1 2025) @swift-ci please smoke test @swift-ci please smoke test Linux @lhoward I'm going to merge now. Would you cherry-pick this to the release/6.1 branch? There are instructions at https://forums.swift.org/t/swift-6-1-release-process/75442#p-344524-pull-requests-for-release-branch-8This seems very reasonable, LGTM, thank you!","This seems very reasonable, LGTM, thank you!","Many existing C APIs for retaining references, including Apple's own, return the reference. Support this pattern, along with the existing `void` return signature, with when importing reference types from C++.

More: https://forums.swift.org/t/swift-shared-reference-signature-error/76194/7","If one of these only apply for retain and the other for release, we could get rid of the select in both. This check isn't correct: it's comparing the declaration result's nominal type (if there is one) against the parameter declaration itself (which has, e.g., the name of the parameter in it). Instead, you need to compare the result type against the parameter type. I also expect that we need to look through an optional type on the result type, in case the retain function handles null pointers in some manner. Specifically, I think it should be:

```suggestion
              !resultInterfaceType->lookThroughSingleOptionalType()->isEqual(paramType))
``` Ah, thank you for the typo fix here! I'm confused about why this PR worked without this change suggested above. Running tests in CI without the change because I would expect it to fail. Fix applied (shouldn't disrupt running builds to check previous commit)."
77810,2024-11-22T17:20:08Z,2024-12-05T19:22:21Z,compnerd,7,0,1,2,1,1,1,[],6.0,0,1130535.0,0,0,0,0,1932653.22274,,0,1,0,False,"['compnerd', 'hjyamauchi']","@swift-ci please smoke test @swift-ci please test Windows arm64 platform @swift-ci build toolchain Windows arm64 @swift-ci please build toolchain Windows arm64 @swift-ci please build toolchain Windows arm64 @swift-ci please build toolchain Windows arm64 I think `please build toolchain Windows arm64` is broken with

```
CMake Error: The source directory ""C:/Users/swift-ci/jenkins/workspace/swift-PR-build-toolchain-windows-arm64/cmark"" does not exist.
```",,"When building for ARM64, we can now build swift-inspect as we use CMake for the cross-compilation.",
77975,2024-12-05T09:21:33Z,2024-12-05T19:09:08Z,drexin,1,0,1,15,2,1,1,"['🍒 release cherry pick', 'swift 6.1']",9.0,0,35260.0,0,0,0,0,1933443.489279,,0,1,0,False,['drexin'],@swift-ci test,,"  - **Explanation**: The check was too narrow, only checking for `Void`, which caused assertions to fail when using other empty types, like `Never` as the result type on typed throwing functions.
  - **Scope**: Typed throws, when compiling with asserting compiler.
  - **Issues**: rdar://140573912
  - **Original PRs**: https://github.com/swiftlang/swift/pull/77965
  - **Risk**: Low. Crash only occurred on asserting compilers and the change does not change the generated code.
  - **Testing**: Added a regression test. Existing tests still pass.
  - **Reviewers**: @rjmccall ",
77954,2024-12-04T18:44:27Z,2024-12-05T18:54:47Z,meg-gupta,3,0,1,34,2,1,1,[],8.0,0,87021.0,0,0,0,0,1934309.766828,,0,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test linux platform @swift-ci test windows platform,,"Explanation: `init_existential_ref` cannot forward operands of `unowned` ownership. Create an `owned` value when we have such args in ExistentialSpecializer.
Scope: Fixes verification error in ExistentialSpecializer
Risk: Low. 
Reviewer: @eeckstein 
Main branch PR: https://github.com/swiftlang/swift/pull/77933",
77969,2024-12-05T02:18:31Z,2024-12-05T18:40:06Z,nate-chandler,1,0,6,113,5,1,1,[],12.0,0,59165.0,0,0,0,0,1934922.504529,,0,6,0,False,['nate-chandler'],@swift-ci please test,,"**Explanation**: Handle access scopes becoming deinit barriers when determining whether any access scope are.

A value's lifetime must not be shrunk into any access scope (i.e. regions defined by `begin_access` and all its corresponding `end_access`es) which contains a deinit barrier.  For a given value, all such access scopes are discovered in sweep via the `VisitBarrierAccessScopes` utility.  As the utility discovers such access scopes, it alerts its caller.  The caller in turn marks the `end_access` instructions as deinit barriers.

As a compile-time optimization, portions of the function which are known to be irrelevant before the utility begins running are excluded.  There are two cases of interest: (1) Local: if a lifetime end (e.g. `end_borrow`) and (before the utility runs) a deinit barrier occur in the same block, it's only necessary to visit the instructions between the end and the barrier looking for access scopes.  (2) Partial: when visiting a block which contains a lifetime end but (before the utility runs) no deinit barrier, it's only necessary to visit the instructions above the lifetime end in the block.

The code for the Local case visits the instructions between the lifetime end and the first encountered deinit barrier.  When the deinit barrier is found, it stops iterating and returns true.  If no deinit barrier is found after iterating to the beginning of the function, it returns false.

Previously, the code for the Partial case called to the code for the Local case.  It asserted that the latter returned false, indicating that it iterated all the instructions and phis in the block and found no deinit barrier.

If no deinit barriers were added while the utility runs, this would be correct.  But, as described above, new `end_access` instructions are discovered to be deinit barriers as the utility runs.

As a result, when visiting a block partially (case (2) above), if an `end_access` instruction was visited which had been determined to be a deinit barrier was encountered, in asserts builds, the assertion would trigger and in non-asserts builds, iteration would stop.

Here, this is handled by just visiting all instructions above the lifetime end in case (2).  If a deinit barrier is encountered, it's asserted that it's one of these newly discovered `end_access` deinit barriers.

**Scope**: Affects optimized code.
**Issue**: rdar://139840307
**Original PR**: https://github.com/swiftlang/swift/pull/77908
**Risk**: Low.  Amounts to removing an early bailout that would only be done incorrectly.
**Testing**: Added SIL and source test.
**Reviewer**: Andrew Trick ( @atrick )

",
77977,2024-12-05T12:04:35Z,2024-12-05T18:05:25Z,MaxDesiatov,3,0,1,1,1,0,0,"['bug', 'source tooling', 'contributor experience']",6.0,0,21651.0,0,0,0,0,1937272.727762,,1,1,0,False,"['ahoppen', 'MaxDesiatov']","@swift-ci test I moved `index-build` into `.build`, so this shouldn’t be needed anymore. This won't be needed with Swift 6.1+, but those are not the only versions of Swift one can have installed and selected on their machine.",,"The `.index-build` directory is created by SourceKit-LSP when background indexing is enabled, contains auto-generated transient files similar in purpose to `.build`, and it should be ignored.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77972,2024-12-05T06:22:48Z,2024-12-05T17:38:09Z,eeckstein,1,2,1,40,3,3,1,[],12.0,0,40527.0,0,0,0,0,1938904.984827,,0,1,0,False,['eeckstein'],@swift-ci smoke test,,"Consider that the lookup-type can be an opaque return type.

Also fixing the SILPrinter.

Fixes a verifier crash
https://github.com/swiftlang/swift/issues/77955
rdar://140939536
","The commit message talks about opaque archetypes, what's the connection? The SILPrinter prints the first type dependent operand as explicit operand. I don't know why.
So far it was the assumption that if the lookupType _is_ an opened archetype then there is exactly 1 type dependent operand. But this is not true for opaque return types, because those have opened archetypes in the substitution list. This SILPrinter change ""restores"" the original behavior that the explicit operand is printed if the lookupType _is_ an opened archetype."
75282,2024-07-17T01:54:19Z,2024-12-05T17:17:27Z,jckarter,7,2,1,264,18,2,0,[],39583.0,0,12237788.0,0,0,0,0,1940154.015278,,10,1,0,False,"['grynspan', 'jckarter']","Regardless of how we spell it, this is going to be very helpful! @swift-ci Please test @swift-ci Please test @swift-ci Please test @swift-ci Please test @swift-ci Please test @swift-ci Please test",,"Many APIs using nonescapable types would like to vend interior pointers to their parameter bindings, but this isn't normally always possible because of representation changes the caller may do around the call, such as moving the value in or out of memory, bridging or reabstracting it, etc. `@_addressable` forces the corresponding parameter to be passed indirectly in memory, in its maximally-abstracted representation. [TODO] If return values have a lifetime dependency on this parameter, the caller must keep this in-memory representation alive for the duration of the dependent value's lifetime.","Is this a type attribute or does it make sense to make this a parameter attribute? e.g.
```swift
func foo(_: @_addressable Int)
// vs
func foo(@_addressable _: Int)
``` I'm not too worried about details like that yet. It seems like something that needs to propagate into function types, and I thought that making it a type attribute would be the easiest way to make sure that happens. It also seems like a reasonable design would be to fold this into the dependency syntax, since it affects the semantics of those dependencies."
77932,2024-12-03T20:19:24Z,2024-12-05T17:17:12Z,egorzhdan,8,0,1,56,4,1,2,['c++ interop'],48.0,0,161870.0,0,0,0,0,1940167.057555,,4,1,0,False,['egorzhdan'],"This unblocks https://github.com/swiftlang/swift/pull/77700 @swift-ci please smoke test @Xazax-hun it's difficult to consistently reproduce this in a test environment, but I've added a typechecker test that should hopefully guard us against this kind of issues in the future. @swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please smoke test Windows @swift-ci please smoke test Linux @swift-ci please smoke test WindowsIs it possible to create a test?  I suspected this was the case (hard to construct platform-independent test). Looks good to me, thanks a lot!","Is it possible to create a test?  I suspected this was the case (hard to construct platform-independent test). Looks good to me, thanks a lot!","In rare scenarios, Swift was emitting diagnostics that looked like this:
```
warning: 'import_owned' swift attribute ignored on type 'basic_string': type is not copyable or destructible
```

This change makes sure the compiler does not emit these (incorrect) warnings. See the inline comment for more details.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77929,2024-12-03T19:29:30Z,2024-12-05T17:13:52Z,egorzhdan,1,0,1,8,1,1,1,[],9.0,0,164665.0,0,0,0,0,1940367.375744,,0,1,0,False,['egorzhdan'],@swift-ci please smoke test,,"<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77949,2024-12-04T17:36:00Z,2024-12-05T17:08:28Z,MaxDesiatov,4,0,1,3,1,2,2,"['WebAssembly', 'swift 6.1', 'WASI']",38.0,0,84749.0,0,0,0,0,1940694.405298,,1,1,0,False,['MaxDesiatov'],@swift-ci test @swift-ci build toolchain @swift-ci test macos @swift-ci build toolchain macos,,"* **Explanation**: ""Swift Test Linux Platform"" jobs on ci.swift.org required as PR checks should cross-compile and run tests for WebAssembly. Effectively, what was previously an optional `@swift-ci test webassembly` trigger should become an implicit and required part of PR testing to prevent occasional regressions in Wasm and WASI support.
* **Scope**: Only affects the WASI platform
* **Risk**: Low. It increases job run time by ~10% and this platform has active maintainers.
* **Testing**: stdlib test suite is now enabled.
* **Issue**: N/A
* **Reviewer**:  @shahmishal 
* **Main branch PR**: https://github.com/swiftlang/swift/pull/77872",
77962,2024-12-04T21:07:09Z,2024-12-05T09:08:19Z,DougGregor,4,4,2,116,7,2,1,[],6.0,0,69417.0,0,0,0,0,1943357.451042,,9,2,0,False,['DougGregor'],"@swift-ci please smoke test @swift-ci please smoke test @swift-ci please test Windows @swift-ci please smoke test LinuxLGTM, just a nonblocking inquiry","LGTM, just a nonblocking inquiry","Since we can't do a proper ""deep"" clone of expression nodes, cloning such a CustomAttr is necessarily shallow. In such cases, don't cache the swift_attr source files at all, so we get fresh attribute nodes for each such usage.
","We probably want to also capture all subclasses with `UNIMPLEMENTED_CLONE` as well. Do we want the implementation of `CustomAttr::clone()` to assert if the argument list isn't empty? Yes, we can do that. Actually, I can avoid the clone here altogether with a different approach that's more similar to how member-attribute macros work. Out of curiosity, why this manual dynamic dispatch rather than a virtual function? Does `DeclAttribute` not have a vtable or something? That's right: there's no vtable, so I don't want to add one."
77952,2024-12-04T18:26:50Z,2024-12-05T16:20:28Z,xedin,6,0,2,146,2,1,1,[],464.0,0,78818.0,0,0,0,0,1943576.656869,,1,2,0,False,['xedin'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Windows platform @swift-ci please smoke test Linux platform @swift-ci please smoke test Windows platform @swift-ci please smoke test Linux platform,,"`dumpActiveScopeChanges` is used as part of `-debug-constraints`
and could be overwhelming if there are a lot of changes in the scope
because it prints every change including binding inference from
every applicable constraint.

These changes make `dumpActiveScopeChanges` more of summary of
what happened with type variables and constraints so far which
is much easier to navigate while debugging.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77939,2024-12-03T22:45:11Z,2024-12-05T16:18:53Z,compnerd,3,0,1,148,6,1,1,[],14.0,0,149624.0,0,0,0,0,1943670.592137,,1,1,0,False,['compnerd'],"@swift-ci please test @swift-ci please test Windows platform @swift-ci please test Windows platformAh. 🤦🏼 
Thanks! ","Ah. 🤦🏼 
Thanks! ","When running the tests with a toolchain built with the ""early swift driver"", we would incorrectly process the command line, losing the empty string argument to `-sdk` which would then incorrectly process the remainder of the command line. This allows most of the remaining tests to pass with the early swift driver on Windows (assuming that the paths are adjusted properly).",
77887,2024-12-01T14:10:03Z,2024-12-05T16:11:20Z,aphananthe42,7,2,2,9,1,2,1,[],109571.0,0,352878.0,0,0,0,0,1944124.659734,,2,2,0,False,"['harlanhaskins', 'aphananthe42', 'xedin']","@swift-ci please smoke test @swift-ci please smoke test The failure of `Interpreter/shebang-env.swift` in the smoke tests for Linux and macOS doesn't seem to be related to the changes in this PR.🤔
`error: unknown or missing subcommand 'swift-legacy-driver'.`

Looking at several other recently submitted PRs, 
it appears that the same error is causing only the Linux and macOS tests to fail... @swift-ci please smoke test @swift-ci please smoke test It seems that only the macOS smoke test has failed due to a timeout.
Could someone please run the smoke test again? @swift-ci please smoke test macOS platform",,"Fixes https://github.com/swiftlang/swift/issues/56350

## Description
Regarding Issue https://github.com/swiftlang/swift/issues/56350, it seems that most of the work was addressed in PR https://github.com/swiftlang/swift/pull/72048. 
However, as mentioned in https://github.com/swiftlang/swift/issues/56350#issuecomment-2307508005, there are still parts that can be replaced with `hasUnderscoredNaming()`. 
This PR addresses those remaining parts.

I don't have permission to run the CI bot, so if necessary, I would appreciate it if you could invoke the CI bot.","Since `correctedBase` and `writtenBase` are no longer used for this check, let's push their declarations down under it.  Thank you. I’ve made the changes.
If everything looks good, could you run the CI bot ?"
77953,2024-12-04T18:32:11Z,2024-12-05T14:57:21Z,kastiglione,5,0,1,32,12,1,1,[],827.0,0,73515.0,0,0,0,0,1948560.631814,,0,1,0,False,"['glessard', 'kastiglione']",@swift-ci please test @swift-ci test linux @swift-ci test windows @swift-ci test linux @swift-ci test macOS ,,"The `DebugDescription` macro has been accepted. Additionally, the `DebugDescriptionMacro` feature was not providing conditional declaration as I originally intended. References to the feature are not needed and can be removed.

(cherry-picked from #77738)",
77965,2024-12-05T00:01:00Z,2024-12-05T09:13:16Z,drexin,2,0,1,15,2,1,1,[],11.0,0,33141.0,0,0,0,0,1969206.883389,,0,1,0,False,['drexin'],@swift-ci smoke test @swift-ci smoke testLGTM,LGTM,"…oUnmappedExplosionWithDirectTypedError

rdar://140573912

This caused assertions to fail when using other empty types, like `Never` as the result type on typed throwing functions.
",
68985,2023-10-05T14:44:04Z,2024-11-20T22:22:12Z,antoniofrighetto,30,3,1,137,10,2,1,[],195.0,0,36872590.0,0,0,0,0,1969574.522609,,5,1,0,False,"['adrian-prantl', 'artemcm', 'antoniofrighetto', 'weliveindetail', 'JDevlieghere', 'jslegendre', 'aschwaighofer', 'wsmoses']","Please, let me know if anything needs to be improved as far as style conventions et alia is concerned, I'd be happy to do so. (cc/ @DougGregor) Gentle ping. Any feedback or suggestions would be duly appreciated. Alongside this, I believe the option should be added as part of [Options.swift](https://github.com/apple/swift-driver/blob/main/Sources/SwiftOptions/Options.swift#L20) as well. May that be the case? (cc/ @DougGregor, @rintaro). Hey, this may not be getting much attention because the internal driver (this one) is considered legacy. The default driver as of Xcode 13 [swift-driver](https://github.com/apple/swift-driver). You might have better luck over there.

Note: I'm not affiliated with the Swift project in any way. Just a guy who'd love to see this merged There was some discussion on this previously in:
https://github.com/apple/swift/pull/38017

The driver and frontend pieces are separate and yes, proper driver support would mean adding the logic in https://github.com/apple/swift-driver. Legacy (C++-based) driver support being optional/discouraged. 

@lhames @aschwaighofer can comment better on the architecture of loading such passes in IRGen.  Thanks a lot to both for the helpful insights. Support in the new swift-driver should be addressed by https://github.com/apple/swift-driver/pull/1472. The implementation should aim to ensure a clear separation between the driver and the frontend. Also, thanks for sharing #38017, was not aware of this. Reviewed the discussion there carefully, it was very informative. Fixed conflicts by rebasing to main, and changed test library type from `MODULE` to `SHARED`, as CMake seems to be defaulting to generate the plugin with `.so` extension on macOS too (rather than `.dylib`, this was previously leading the unittest to fail). Gentle ping (cc/ @lhames). Just wanted to express support for this here as it also helps with adding plugins for AD Also expressing support for this! Rebased to main, dropped unittest in `Driver` as part of recent legacy driver deprecation, added test coverage exercizing `performLLVMOptimization`. New driver support ready at https://github.com/apple/swift-driver/pull/1472. Kind ping @lhames, @aschwaighofer, @artemcm, @benlangmuir, @weliveindetail. @lhames, @airspeedswift Gentle ping. Any chance of this getting reviewed? Kind ping (maybe cc/ @adrian-prantl). @adrian-prantl Addressed comments and rebased to main, thank you for reviewing this! @swift-ci test Rebased to main, opened sister PR @ https://github.com/apple/llvm-project/pull/8678, reflecting changes (not sure if we should have targeted a different branch instead). @adrian-prantl Kind ping on this, CI was previously failing. Rebased to main (fixed conflicts), https://github.com/swiftlang/llvm-project/pull/8678 PR rebased to `stable/20230725`, which should be the expected branch. Very gentle remainder. I do not have commit access, could anyone kindly merge this? I assume this should be tested with:
```
Please test with following PR:
https://github.com/swiftlang/llvm-project/pull/8678
https://github.com/swiftlang/swift-driver/pull/1472

@swift-ci Please test
``` https://github.com/swiftlang/llvm-project/pull/8678
https://github.com/swiftlang/swift-driver/pull/1472

@swift-ci test The macOS failure is:

```
/Users/ec2-user/jenkins/workspace/swift-PR-macos/branch-main/swift/stdlib/private/SwiftPrivate/IO.swift:21:8: error: failed to build module 'Darwin'; this SDK is not supported by the compiler (the SDK is built with 'Apple Swift version 5.9.2 (swiftlang-5.9.2.2.11 clang-1500.1.0.2.2)', while this compiler is 'Apple Swift version 6.1-dev effective-5.10 (LLVM 97c65ef47934098, Swift c06508954544f05)'). Please select a toolchain which matches the SDK.
 19 | #else
 20 | #if canImport(Darwin)
 21 | import Darwin
    |        `- error: failed to build module 'Darwin'; this SDK is not supported by the compiler (the SDK is built with 'Apple Swift version 5.9.2 (swiftlang-5.9.2.2.11 clang-1500.1.0.2.2)', while this compiler is 'Apple Swift version 6.1-dev effective-5.10 (LLVM 97c65ef47934098, Swift c06508954544f05)'). Please select a toolchain which matches the SDK.
```

edit: should have been fixed by https://github.com/swiftlang/swift/pull/76344 https://github.com/swiftlang/llvm-project/pull/8678
https://github.com/swiftlang/swift-driver/pull/1472

@swift-ci test macos @JDevlieghere This will be affected by the rebranch isn't it? Any chance it can land before? @adrian-prantl @JDevlieghere is this good to merge?  I don't have any further concerns with this patch. Rebased to main, fixed conflicts (to be tested again as above otherwise CI fails), kind ping for merging this. @swift-ci test > @swift-ci test

Thanks, the other two PRs (https://github.com/swiftlang/llvm-project/pull/8678, https://github.com/swiftlang/swift-driver/pull/1472) are also required for the CI to pass. https://github.com/swiftlang/llvm-project/pull/8678
https://github.com/swiftlang/swift-driver/pull/1472
@swift-ci test @antoniofrighetto Can you put up a PR against `stable/20240723`. Swift has rebased against that newer llvm-project branch.The way this patch proposes to load the plugin pass in IRGen looks good. It is exactly what we do in [Clang](https://github.com/llvm/llvm-project/blob/release/17.x/clang/lib/CodeGen/BackendUtil.cpp#L894-L903) and [Flang](https://github.com/llvm/llvm-project/blob/release/17.x/flang/lib/Frontend/FrontendActions.cpp#L885-L894), and what [the documentation](https://llvm.org/docs/WritingAnLLVMNewPMPass.html#registering-passes-as-plugins) recommends. LGTM with a couple of minor comments inside.","The way this patch proposes to load the plugin pass in IRGen looks good. It is exactly what we do in [Clang](https://github.com/llvm/llvm-project/blob/release/17.x/clang/lib/CodeGen/BackendUtil.cpp#L894-L903) and [Flang](https://github.com/llvm/llvm-project/blob/release/17.x/flang/lib/Frontend/FrontendActions.cpp#L885-L894), and what [the documentation](https://llvm.org/docs/WritingAnLLVMNewPMPass.html#registering-passes-as-plugins) recommends. LGTM with a couple of minor comments inside.","Allow dynamic loading of LLVM passes via `load-pass-plugin` option passed to the Swift compiler driver, similarly to current Apple Clang `-fpass-plugin` option.

Previous discussion: https://forums.swift.org/t/load-external-llvm-pass-plugins-via-swift-frontend/67596","I wonder if the diagnostic handling should remain in `performLLVM()`. Passing `Diags` and `DiagMutex` to `performLLVMOptimizations()` seems a bit unfortunate. We could instead just return the `llvm::Error` from here and let the callers take care of it. That would change the return type of the function. A lot of code in *include/swift* is using `llvm::Error` already, but I am not sure what the conventions are in Swift. @lhames What do you think? `std::scoped<lock>(DiagMutex)`? Nit: the `-*- C++ -*-` markers are only needed for `.h` files, because there it's ambiguous whether the language is C or C++."
77956,2024-12-04T19:24:45Z,2024-12-05T05:55:36Z,compnerd,4,0,1,4,1,0,0,[],7.0,0,37851.0,0,0,0,0,1981072.8703,,0,1,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please test Windows platform @swift-ci please smoke test Linux platform @swift-ci please test Windows platform,,swiftlang/swift-driver#1741 fixed a bug in the swift-driver which exposed a bug in this test. The use of `%FileCheck` is a problem as that sanitises the output substituting `BUILD_DIR` for the build directory that is now properly computed. Because `PATH` is being configured to an invalid path the actual driver is not found and the test fails.,
77966,2024-12-05T00:37:41Z,2024-12-05T05:13:26Z,cachemeifyoucan,1,0,1,12,2,1,1,[],9.0,0,16545.0,0,0,0,0,1983604.251614,,0,1,0,False,['cachemeifyoucan'],@swift-ci please smoke testSimple fix. Thanks!,Simple fix. Thanks!,"In the refactoring change #76700, it accidentally introduced a behavior change that causes the generated PCM command-line to have useful VFSOverlay files getting dropped. Clang module command-line and its unused VFS pruning should be done by the clang dependency scanner already so there is no need to touch that in the swift scanner. Since the original logics is not used to handle clang module commands, it will actually dropped the useful vfs overlay that is needed when none of the dependencies uses it. Fix the regression by restoring the old behavior and ignoring clang modules when pruning VFS overlay.

rdar://139233781

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77908,2024-12-02T23:37:57Z,2024-12-04T23:29:02Z,nate-chandler,5,0,6,113,5,1,1,[],24.0,0,172269.0,0,0,0,0,2004264.688554,,2,6,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark @swift-ci please test macos platform @swift-ci please test linux platformMakes sense!,Makes sense!,"As the utility runs, new gens may become local: as access scopes are determined to contain deinit barriers, their `end_access` instructions become kills; if such an `end_access` occurs in the same block above an initially-non-local gen, that gen is now local.

Previously, it was asserted that kills would not be encountered when visiting a block backwards from an initially-non-local gen.  As described above, the assertion was incorrect.

Iteration would also _stop_ at the discovered kill, if any.  That too was incorrect. To continue walking the block after finding such a newly discovered kill is needed by the book-keeping the utility does for which access scopes contain barriers: there may be more `end_access` instructions.  Concretely, there are two cases: (1) The block may contain another `end_access` and above it a deinit barrier which must result in that second scope becoming a deinit barrier. (2) Some of the block's predecessors may be in the region, all the access scope which are open at the begin of this block must be unioned into the set of scopes open at each predecessors' end, and more such access scopes may be discovered above the just-visited `end_access`.

Here, both the assertion failure and the early bailout are fixed by walking from the indicated initially-non-local gen backwards over the entire block, regardless of whether a kill was encountered.  If a kill is encountered, it is asserted that the kill is an `end_access` to account for the case described above.

rdar://139840307
",
77933,2024-12-03T20:23:48Z,2024-12-04T18:40:10Z,meg-gupta,3,0,1,34,2,1,1,[],11.0,0,93159.0,0,0,0,0,2008624.056589,,2,1,0,False,"['atrick', 'meg-gupta']","@swift-ci test I don't know why exactly it is illegal for `init_existential_ref` to have operands with `unowned` ownership. We allow certain casts like `unchecked_ref_cast` to have operand with `unowned` ownership. This PR fixes the verification error by creating `owned` values. > I don't know why exactly it is illegal for `init_existential_ref` to have operands with `unowned` ownership. We allow certain casts like `unchecked_ref_cast` to have operand with `unowned` ownership. This PR fixes the verification error by creating `owned` values.

unowned values need to be shielded from all the normal OSSA transformations. They can't be transformed safely. The general rule should be that you can never get an owned value from unowned without a copy. We might have some very special casts that unsafely convert ownership; we need to make sure not to optimize those.lgtm",lgtm,`init_existential_ref` cannot forward operands of `unowned` ownership. Create an `owned` value when we have such args.,
77895,2024-12-02T14:05:00Z,2024-12-04T22:01:23Z,ktoso,4,0,7,508,17,1,1,"['distributed', '🍒 release cherry pick', 'swift 6.1']",40.0,0,201430.0,0,0,0,0,2009482.732532,,0,7,0,False,['ktoso'],@swift-ci please test @swift-ci please build toolchain Added some review followup @swift-ci please test,,"6.1 pick for https://github.com/swiftlang/swift/pull/77584

**Description**: Distributed accessible function record mangling was too naively just using ""$"" + ""Name"" + ""C"" when recording protocol calls in order to point at the stub type ($NameC for Name). This breaks roundtrip mangling when more complex types are involved, like arrays or more generics as the mangling must be made properly with the class ($Name) decl context. This change makes the mangling proper and also fixes how we deal with primary associated types in these protocols (which would also crash without this change).

**Scope/Impact**: Low, only distributed method accessors of previously crashing shape are addressed.
**Risk:** Low, only distributed accessors are affected. No impact to other modules.
**Testing**: CI testing; Added tests which previously blew up and are now working correctly
**Reviewed by**: @xedin 

**Original PR:** https://github.com/swiftlang/swift/pull/77584
**Radar:** rdar://139332556&139781083

---

Previously we would not propagate those into the generated distributed
actor, making a lot of generic distributed actor protocols impossible to
express.

We indeed cannot handle protocols WITHOUT primary associated types, but
we certainly can handle them with!

This resolves rdar://139332556",
77928,2024-12-03T19:13:32Z,2024-12-04T21:11:01Z,DmT021,2,0,1,130,9,1,1,[],51.0,0,93449.0,0,0,0,0,2012552.077829,,11,1,0,False,"['DougGregor', 'DmT021']","@DougGregor Can you take a look and run the test, please? @swift-ci please smoke testThis looks great!",This looks great!,"This change addresses the following issue: when an error is being wrapped in a warning, the diagnostic message will use the wrapper's `DiagGroupID` as the warning's name. However, we want to retain the original error's group for use. For example, in Swift 5, async_unavailable_decl is wrapped in error_in_future_swift_version. When we print a diagnostic of this kind, we want to keep the `DiagGroupID` of `async_unavailable_decl`, not that of `error_in_future_swift_version`. To achieve this, we add `DiagGroupID` to the `Diagnostic` class. When an active diagnostic is wrapped in DiagnosticEngine, we retain the original `DiagGroupID`.

For illustration purposes, this change also introduces a new group: `DeclarationUnavailableFromAsynchronousContext`.

With this change, we produce errors and warnings of this kind with messages like the following:

```
global function 'fNoAsync' is unavailable from asynchronous contexts [DeclarationUnavailableFromAsynchronousContext]
global function 'fNoAsync' is unavailable from asynchronous contexts; this is an error in the Swift 6 language mode [DeclarationUnavailableFromAsynchronousContext]
```

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77944,2024-12-04T11:16:40Z,2024-12-04T20:22:40Z,hamishknight,2,0,2,53,5,1,1,[],7.0,0,32763.0,0,0,0,0,2015450.410424,,2,2,0,False,['hamishknight'],@swift-ci please test @swift-ci please test source compatibility,,"Allow IUOs to be used with functions referenced using a compound name, and correctly set the compound bit for UnresolvedMemberExprs.

This is a source breaking change since this used to be legal:

```swift
struct S {
  static func foo(x: Int) -> Self { .init() }
}
let _: S = .foo(x:)(x: 0)
```

However I somewhat doubt anyone is intentionally writing code like that.",
77498,2024-11-08T22:49:56Z,2024-12-04T19:55:28Z,abertelrud,3,0,1,98,2,2,2,[],250.0,1,2235934.0,0,0,0,0,2017084.983106,,3,1,0,False,['abertelrud'],"I hdd accidentally included some temporary cherry-picks of @chrismiles's now-landed branch, so this latest update removed them.  This is now ready for review. @swift-ci Please smoke test Adding @hborla and @slavapestov who are also listed as code owners in a second PR I'm opening for the same source file (they were not in this list when I opened this PR, IIRC).",,"When a decl that has `init` or `deinit` is nested inside another type, those `init` or `deinit` implementations aren't playground-transformed.
 
### Details

The reason is that the playground transform uses an `ASTWalker` to get to the top-level structure, but then once it’s inside a type, it does directly nested `transformDecl()` calls.  And that inner check was for too narrow of a type.

The problem in this case was that the `dyn_cast<FuncDecl>(D)` was too narrow and didn’t include constructors/destructors.  We want `dyn_cast<AbstractFunctionDecl>(D)`.

### Future work

It's unfortunate that the playground transform reaches decls in two different ways (using an `ASTWalker` to get to the top-level decls but then using directly nested calls below).  This seems to be worth resolving at some point (perhaps by using the `ASTWalker` for the whole traversal?), but that’s a larger change, and so this is worth addressing with a safer short-term fix.

Also, there are still missing results with accessors that are associated with properties in nested types.  The fix for that will follow in a separate PR with its own unit test.  _Edit: The follow-on fix is here: https://github.com/swiftlang/swift/pull/77530_

### Changes

- change a `dyn_cast<FuncDecl>` to a `dyn_cast<AbstractFunctionDecl>` in PlaygroundTransform.cpp
- add a unit test nested `init` and `deinit` (this test also tests the unnested case)
    
rdar://137316110",
77937,2024-12-03T21:27:45Z,2024-12-04T19:19:56Z,rintaro,2,3,1,750,6,2,1,[],8.0,0,78738.0,0,0,0,0,2019212.372583,,7,1,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test,,"Previously only some random decl attributes were included in the dump with the source spelling (e.g. `@objc`), or some affected how the decl is dumped. But the full attribute list has not been dumped. Dumping attributes are useful for debugging attribute handling.
","SwiftParser/ASTGen has better recovery so AST might be different in invalid cases. It's not worth to emit the same AST. 
Specifically, e.g. C++  parser discards the whole attribute for `@_silgen_name(""whatever"", extra)` because of the `extra` argument. But ASTGen recovers it. Any reason not to use `SIMPLE_DECL_ATTR` here? LLVM has `convertToSnakeFromCamelCase` FWIW which could be used to convert the class name Oooh, I didn't know `convertToSnakeFromCamelCase`. ... it seems to convert `ObjCMembers` to `obj_c_members`? which makes sense, but since we use `objc_`, I'd go without it for now. Unfortunate."
77934,2024-12-03T20:44:05Z,2024-12-04T18:37:29Z,cachemeifyoucan,1,0,1,4,2,1,1,[],16.0,0,78804.0,0,0,0,0,2021766.711198,,6,1,0,False,['cachemeifyoucan'],@swift-ci please smoke test,,"If the output loading failed after cache key lookup, treat that as a warning and resume as if that is a cache miss. This is not a valid configuration for builtin CAS but can happen for a remote CAS service that failed to serve the output. Instead of failing, we should continue to compile to avoid disruptive failures.

rdar://140822432

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77936,2024-12-03T21:20:44Z,2024-12-04T18:24:21Z,xedin,3,0,3,30,3,0,0,[],7.0,0,75817.0,0,0,0,0,2022556.446983,,2,3,0,False,"['slavapestov', 'xedin']",@swift-ci please test Can you add a performance test case demonstrating the problem? @slavapestov Unfortunately it's only a problem in a particular configuration which is not easy to reproduce with a standalone test-case because of how overload sets are structured.,,"- [CSBindings] Adjust `hasConversions` to handle `Void` has having not conversions
- [CSBindings] Don't favor application result types before application happens

Although the changes are correct they have a negative impact on performance in
some situations (especially the second part) because the result type would no longer
be eagerly bound.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77935,2024-12-03T21:12:53Z,2024-12-04T18:30:31Z,benlangmuir,1,2,1,137,10,2,1,[],7.0,0,76665.0,0,0,0,0,2022179.528219,,3,1,0,False,['benlangmuir'],"@swift-ci please smoke testLGTM.

It seems that symbol graph doesn't emit in batch mode so the current CAS writer works. Maybe it is good to emit a warning to ignore symbol graph command-line options when batch mode is used.","LGTM.

It seems that symbol graph doesn't emit in batch mode so the current CAS writer works. Maybe it is good to emit a warning to ignore symbol graph command-line options when batch mode is used.","The symbol graph output from a module can contain an arbitrary number of files, depending on what extensions it contains, so cache a list of symbol graph files with their base name and contents so that they can be replayed.

rdar://140286819","Instead of doing this special condition, I prefer add symbol graph to `SupplementaryOutputPaths` and compute the path in `ArgsToFrontendOutputsConverter.cpp`.

Hope it is not too bad to pass the output path to the location where the file is generated. > I prefer add symbol graph to SupplementaryOutputPaths and compute the path in ArgsToFrontendOutputsConverter.cpp.

The symbol graph contains an arbitrary number of files, and I think you can't know how many files there will be until you typecheck, because if you have module A that contains `import B; extension B.Foo { public func bar() {} }` there will be `A.symbols.json` and `A@B.symbols.json`.  That's why I didn't model it as a ""normal"" output. "
77940,2024-12-03T22:45:21Z,2024-12-04T18:11:37Z,hjyamauchi,4,0,1,2,1,1,1,[],12.0,0,69976.0,0,0,0,0,2023320.858759,,0,1,0,False,"['weliveindetail', 'hjyamauchi']","@swift-ci please test @swift-ci please build toolchain Windows arm64 @swift-ci please build toolchain Windows arm64 The build failed for an unrelated reason:
```
CMake Error: The source directory ""C:/Users/swift-ci/jenkins/workspace/swift-PR-build-toolchain-windows-arm64/cmark"" does not exist.
```",,"https://ci-external.swift.org/job/swift-main-windows-toolchain-arm64/777/consoleText
```
Error: Program 'python.exe' failed to run: The specified executable is not a valid application for this OS platform.At C:\Users\swift-ci\jenkins\workspace\swift-main-windows-toolchain-arm64\swift\utils\build.ps1:545 char:7
+       & $Executable @Args | Out-Null
+       ~~~~~~~~~~~~~~~~~~~.
```",
77946,2024-12-04T13:18:14Z,2024-12-04T17:25:49Z,eeckstein,1,0,1,2,1,0,0,[],10.0,0,17474.0,0,0,0,0,2023451.497317,,0,1,0,False,['eeckstein'],@swift-ci smoke test,,"It depends on internals of String which is target dependent

rdar://140907938
",
77399,2024-11-05T19:13:21Z,2024-12-04T17:39:35Z,artemcm,2,1,1,8,1,3,3,[],7.0,0,2499977.0,0,0,0,0,2025241.820644,,1,1,0,False,['artemcm'],@swift-ci smoke test @swift-ci smoke test,,,Are you intentionally not adding this person to other DependencyScan patterns in this file?
77872,2024-11-29T12:21:32Z,2024-12-04T17:12:13Z,MaxDesiatov,7,0,1,3,1,1,1,"['continuous integration', 'WebAssembly', 'WASI']",16.0,0,449444.0,0,0,0,0,2026884.041943,,2,1,0,False,['MaxDesiatov'],@swift-ci build toolchain @swift-ci smoke test @swift-ci test webassembly @swift-ci smoke test @swift-ci test webassembly @swift-ci build toolchain @swift-ci test,,"Reverts swiftlang/swift#76597

After performance improvements landed in WasmKit, this no longer introduces a 1hr regression, but only 10-20 minutes slowdown to Ubuntu jobs.

Additional solutions are investigated to shave time off SwiftPM build jobs, which could potentially reduce total build time by 5-10 minutes in https://github.com/swiftlang/swift-package-manager/pull/8145.",
77941,2024-12-04T00:24:48Z,2024-12-04T15:51:58Z,kubamracek,1,0,1,2,1,0,0,[],9.0,0,55630.0,0,0,0,0,2031703.663807,,3,1,0,False,['kubamracek'],@swift-ci please test,,,
77922,2024-12-03T17:04:58Z,2024-12-04T15:51:16Z,kubamracek,2,0,1,63,2,0,0,[],5568.0,0,81978.0,0,0,0,0,2031746.15142,,7,1,0,False,"['kubamracek', 'augusto2112']","https://github.com/swiftlang/llvm-project/pull/9683
@swift-ci smoke test @swift-ci please test",,"See <https://github.com/swiftlang/swift/pull/77115> for the overall goal. This is a follow-up to https://github.com/swiftlang/swift/pull/77115 that removes the ""legacy"" ASTMangler constructor, but it's in a separate PR because we need to first fix out-of-repo users of this API (namely LLDB).",
77873,2024-11-29T12:23:20Z,2024-12-04T02:43:42Z,AnthonyLatsis,1,2,1,11,1,2,1,[],376589.0,0,436877.0,0,0,0,0,2039345.521709,,1,1,0,False,['AnthonyLatsis'],@swift-ci please smoke test,,Closes #74545.,"Since this example was crashing in Sema maybe we should just `// RUN: %target-typecheck-verify-swift`? I should probably keep the target, though."
77943,2024-12-04T06:47:53Z,2024-12-04T13:30:07Z,Kyle-Ye,5,0,2,3,1,1,1,[],77.0,0,24136.0,0,0,0,0,2040214.790292,,0,2,0,False,"['ktoso', 'Kyle-Ye']","@swift-ci test @swift-ci please smoke test Thanks for the quick response.

Also note another issue here:

The `TaskLocal-macro` is not working as expected here

<img width=""1176"" alt=""SCR-20241204-nelh"" src=""https://github.com/user-attachments/assets/992661fc-d85e-4db9-a95e-fd2bf3ff3324"">

We have a correct usage in Observable by using \`\`Observation/Observable()\`\`.

And we should use \`\`_Concurrency/TaskLocal()-swift.macro\`\` to refer the macro.

- _Concurrency can be omitted since we are in the same module
- `-swift` and `.macro` can also be omitted here as there is no conflict

> Source: https://www.swift.org/documentation/docc/linking-to-symbols-and-other-content @swift-ci please smoke test @swift-ci please smoke testThanks!",Thanks!,"<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->

Fix some documentation issue on TaskLocal",
77927,2024-12-03T18:53:31Z,2024-12-04T13:01:44Z,egorzhdan,1,0,1,4,1,1,1,['c++ interop'],7.0,0,65295.0,0,0,0,0,2041918.183207,,2,1,0,False,['egorzhdan'],@swift-ci please smoke test,,"This fixes a CI job that is building the Swift stdlib with a recent nightly compiler.

rdar://140850172

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77910,2024-12-03T01:15:23Z,2024-12-04T08:43:40Z,rapidsna,7,8,4,23,1,2,1,[],12.0,1,113298.0,0,0,0,0,2057403.85929,,11,4,0,False,['rapidsna'],"@swift-ci test @swift-ci test @DougGregor Thanks for the quick review! @swift-ci test @swift-ci test Linux test failure seemed unrelated:
```
error: unknown or missing subcommand 'swift-legacy-driver'
``` @swift-ci testThank you!",Thank you!,"DynamicRangePointerType and ValueTerminatedType are new Clang types for -fbounds-safety, annotated  with the 'ended_by' and the 'terminated_by' attributes. This adds visitors for these types in ClangImporter so Swift continues to build with the Clang version that will introduce these new types.

This should unblock https://github.com/swiftlang/llvm-project/pull/9665","Shouldn't we recurse on the wrapped type here, since it's okay to ignore the `ended_by` attribute? We'll be gathering this information separately. Same question as above: shouldn't we recurse on the wrapped type here, since it's okay to ignore the `terminated_by` attribute? We'll be gathering this information separately. Right. Though this is to make them consistent with how `CountAttributedType` is handled in this codebase and downstream. @hnrklssn's WIP PR will fix the visitor for `CountAttributedType ` later. If you prefer, I can make `DynamicRangePointerType` and `ValueTerminatedType` to be handled like other `SUGAR_TYPE` here. Please let me know. I would prefer that they be handled like other `SUGAR_TYPE`. The bounds-safety annotations shouldn't break interop, even when they aren't being used to improve it. Fixed! @hnrklssn You will have to remove `SUGAR_TYPE(CountAttributed)` in your patch and reintroduce your `Visit CountAttributedType`. I fixed it anyway knowing that your patch won't be landing in the release branch, but this will be. @DougGregor actually, I couldn't land `SUGAR_TYPE(DynamicRangePointer)` because `DynamicRangePointerType` doesn't exist in Clang yet. I will revert back to `return Type()` and then open up a follow up patch to fix that right after I land https://github.com/swiftlang/llvm-project/pull/9665. 

```
swift/lib/ClangImporter/ImportType.cpp:943:5: error: member access into incomplete type 'const clang::DynamicRangePointerType'
  943 |     SUGAR_TYPE(DynamicRangePointer)
      |     ^
swift/lib/ClangImporter/ImportType.cpp:930:24: note: expanded from macro 'SUGAR_TYPE'
  930 |       return Visit(type->desugar());                                           \
      |                        ^
```"
77917,2024-12-03T10:30:11Z,2024-12-03T23:04:34Z,eeckstein,2,0,1,22,3,2,2,['swift 6.1'],200.0,0,76015.0,0,0,0,0,2061399.97752,,0,1,0,False,['eeckstein'],@swift-ci test @swift-ci test windows,,"* **Explanation**: Fixes a verification error caused by the deinit-devirtualizer pass. Sometimes it can happen that a deinit function, which is imported from another module, has shared linkage. In this case it is important to de-serialize the function body. Otherwise it would be illegal SIL.
* **Scope**: Can affect code which uses a non-copyable type, which has a deinit, from another module.
* **Risk**: Low. It's a small change which exactly catches the crashing scenario
* **Testing**: Tested by a test case.
* **Issue**: rdar://140112207
* **Reviewer**:  @meg-gupta
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/77858 (I only cherry-picked the relevant commit 9279a2c0d62a1557813c997d2b0b73c4f25db541)
",
77916,2024-12-03T10:12:09Z,2024-12-03T23:04:13Z,eeckstein,1,0,1,33,2,2,2,['swift 6.1'],99.0,0,77084.0,0,0,0,0,2061413.334184,,0,1,0,False,['eeckstein'],@swift-ci test,,"* **Explanation**: Fixes a wrong assert in the ConditionForwarding pass, which can result in a compiler crash. Some terminator instructions can have type-dependent operands. Therefore the assert needs to check `getNumRealOperands` (which excludes type-dependent operands) instead of `getNumOperands`.
* **Scope**: Can affect code which performs a dynamic cast of a generic class on self in a class method. However, hitting this assert this is very rare.
* **Risk**: Low. It's a trivial and obvious change in an assert condition.
* **Testing**: Tested by a test case.
* **Issue**: rdar://140842806
* **Reviewer**:  @meg-gupta
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/77853
",
77915,2024-12-03T09:48:34Z,2024-12-04T06:42:59Z,eeckstein,1,0,1,96,3,2,2,['swift 6.1'],440.0,0,78452.0,0,0,0,0,2061461.042665,,0,1,0,False,['eeckstein'],@swift-ci testReviewed for CCC,Reviewed for CCC,"* **Explanation**: Fixes an miscompile caused by dead-store-elimination (and potentially other optimizations which rely on alias-analysis). If a non-escaping closure captures a variable by inout, calling the closure was not considered modifying the captured variable. This led dead-store-elmination to remove the initialization of such variables - if the variable is not used after the closure call.
* **Scope**: Affects code which uses non-escaping closures which capture variables by inout.
* **Risk**: Low. The change makes  alias-analysis more conservative
* **Testing**: Tested by test cases.
* **Issue**: rdar://140338313
* **Reviewer**:  @atrick
* **Main branch PR**:  https://github.com/swiftlang/swift/pull/77852 (to reduce the risk I only cherry-picked the required fix from the PR: https://github.com/swiftlang/swift/pull/77852/commits/b98608dfbee43ca6ee5ae0523544fbbf4acd311b)
",
77918,2024-12-03T10:47:51Z,2024-12-03T20:30:39Z,eeckstein,2,0,1,132,2,0,0,[],11.0,0,74793.0,0,0,0,0,2061564.111144,,0,1,0,False,['eeckstein'],@swift-ci smoke test @swift-ci smoke test,,"The code is not used anymore because the ArrayElementPropagation pass was removed: https://github.com/swiftlang/swift/pull/77806
",
77911,2024-12-03T03:50:38Z,2024-12-04T07:17:12Z,cyndyishida,2,0,2,68,10,0,0,[],16.0,0,98794.0,0,0,0,0,2062596.825471,,1,2,0,False,['cyndyishida'],@swift-ci please test @swift-ci please smoke test,, This change can't be made without other issues fixed downstream first.,
77914,2024-12-03T09:20:55Z,2024-12-04T06:43:17Z,eeckstein,1,0,1,20,2,1,1,['swift 6.1'],15.0,0,76945.0,0,0,0,0,2064629.385667,,0,1,0,False,['eeckstein'],@swift-ci test,,"* **Explanation**: Fixes an IRGen crash when using keypaths in embedded swift. For resilient keypaths IRGen creates property descriptors, which are needed for resilient builds. Property descriptors are not needed and do not work in embedded swift.
* **Scope**: Only affects embedded swift when using keypaths.
* **Risk**: Low. The change just disables IR-generating SILProperties.
* **Testing**: Tested by a test case.
* **Issue**: https://github.com/swiftlang/swift/issues/77682
* **Reviewer**:  @kubamracek
* **Main branch PR**: https://github.com/swiftlang/swift/pull/77697
",
77900,2024-12-02T17:40:18Z,2024-12-04T06:08:49Z,gottesmm,7,0,6,648,19,0,0,[],9.0,0,131315.0,0,0,0,0,2066697.174371,,6,6,0,False,['gottesmm'],@swift-ci smoke test @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test :sigh: lost my MSVC fix when doing force pushes... repushed it. @swift-ci smoke test,,"[region-isolation] Perform checking of non-Sendable results using rbi rather than Sema.

In terms of the test suite the only difference is that we allow for non-Sendable
types to be returned from nonisolated functions. This is safe due to the rules
of rbi. We do still error when we return non-Sendable functions across isolation
boundaries though.

The reason that I am doing this now is that I am implementing a prototype that
allows for nonisolated functions to inherit isolation from their caller. This
would have required me to implement support both in Sema for results and
arguments in SIL. Rather than implement results in Sema, I just finished the
work of transitioning the result checking out of Sema and into SIL. The actual
prototype will land in a subsequent change.

rdar://127477211

----

I did the test updates in a separate commit to make it a little easier to review.

",
77862,2024-11-27T19:19:59Z,2024-12-04T05:13:03Z,compnerd,5,0,1,28,3,0,0,[],433111.0,0,553985.0,0,0,0,0,2070046.851883,,0,1,0,False,['compnerd'],@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please smoke test Linux platform @swift-ci please smoke test macOS platform,,Enable support for libxml2 on Windows to allow `llvm-mt` to be usable. This then allows us to use `llvm-mt` as the manifest tool when building for Windows. Remove the then obsoleted workaround of `-D CMAKE_MT=mt`. This reduces the dependency on the MSVC toolchain and paves the path to enabling the use of the manifest tool in SPM.,
77925,2024-12-03T18:33:11Z,2024-12-04T04:18:41Z,cachemeifyoucan,2,0,1,22,1,1,1,[],268.0,0,35130.0,0,0,0,0,2073310.431779,,7,1,0,False,['cachemeifyoucan'],@swift-ci please smoke test @swift-ci please test,,"Swift compiler can try to import clang modules which might fail to load. In this case, the clang diagnostic engine is reset to ignore the errors, but the hard reset also clears out the states, including the diagnostics options and current states. This will affect the future clang module imports and diagnostics. Use a soft reset that only clears the errors but not the other states.

rdar://139723218

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77919,2024-12-03T11:52:09Z,2024-12-04T01:05:57Z,hamishknight,3,0,1,66,5,2,2,[],12.0,0,48066.0,0,0,0,0,2084437.636267,,1,1,0,False,['hamishknight'],"@swift-ci please test source compatibility https://github.com/swiftlang/swift-driver/pull/1744

@swift-ci please test @swift-ci please test macOS",,"Now that ""is compound"" is a separate bit in FunctionRefInfo (#77896), we can correctly track the application level for an EnumElementPattern.",
77921,2024-12-03T16:39:24Z,2024-12-03T23:49:40Z,egorzhdan,2,1,1,8,2,3,3,['c++ interop'],74.0,0,25817.0,0,0,0,0,2089452.161292,,3,1,0,False,['egorzhdan'],"@swift-ci please test Discussed offline: passing `COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_MACCATALYST` shouldn't be strictly necessary to bring back the pre-6.0.2 behavior, however, it is still the correct thing to do – I'll put up a separate PR.I think we need to pass through the `COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_MACCATALYST` as well",I think we need to pass through the `COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_MACCATALYST` as well,"The iOS/watchOS/tvOS deployment targets for Cxx and CxxStdlib binaries got unintentionally bumped in b87b263.

This reverts the deployment targets to the older versions.

rdar://140823785 / resolves https://github.com/swiftlang/swift/issues/77909

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",Do we also need to pass `DEPLOYMENT_VERSION_MACCATALYST` ?
77913,2024-12-03T08:48:50Z,2024-12-03T23:35:05Z,rapidsna,1,0,4,23,1,1,1,[],11.0,0,53177.0,0,0,0,0,2090326.649071,,6,4,0,False,['rapidsna'],@swift-ci test,,"- **Explanation**: DynamicRangePointerType and ValueTerminatedType are new Clang types for -fbounds-safety, annotated with the 'ended_by' and the 'terminated_by' attributes. This adds visitors for these types in ClangImporter so Swift continues to build with the upcoming Clang change that will introduce these new types. This should unblock https://github.com/swiftlang/llvm-project/pull/9665

  - **Scope**: This cannot affect the existing code because it adds visitors for new clang types that do not exist. Until Clang introduces these types those visitors are not reachable. 

  - **Issues**: N/A

  - **Original PRs**: https://github.com/swiftlang/swift/pull/77910

  - **Risk**: The risk is very low because it doesn't affect any existing code. Without this patch, this repo will stop building once Clang lands the change to introduce these new types.

  - **Testing**: Typical swift-ci tests will be sufficient

  - **Reviewers**: @DougGregor",
77768,2024-11-21T12:46:59Z,2024-12-03T23:31:40Z,hamishknight,1,0,1,77,3,1,1,"['🍒 release cherry pick', 'swift 6.1']",943692.0,0,1075485.0,0,0,0,0,2090530.855569,,0,1,0,False,['hamishknight'],@swift-ci please test,,"*6.1 cherry-pick of #77711*

- Explanation: Fixes a crash that could occur when attempting to do code completion on an existential with a superclass
- Scope: Affects completion
- Issue: rdar://138774888
- Risk: Low, adds a new check, only affects completion
- Testing: Added tests to test suite
- Reviewer: Alex Hoppen",
77904,2024-12-02T19:51:17Z,2024-12-03T22:40:19Z,compnerd,1,0,1,188,20,1,1,[],8.0,0,96544.0,0,0,0,0,2093614.393064,,4,1,0,False,['compnerd'],@swift-ci please test,,"When enabling the early swift driver on Windows, these tests need to be adjusted for the new driver name that is reported. Add an additional spelling for the driver to accommodate that for the testsuite.",
77626,2024-11-14T21:25:52Z,2024-12-03T18:32:59Z,hyp,4,1,4,141,8,3,2,[],1692.0,0,1631227.0,0,0,0,0,2108457.074029,,0,4,0,False,"['DougGregor', 'hyp']","@swift-ci please test @swift-ci please test CC @DougGregor  @swift-ci please test WindowsThe API notes changes would be useful for my Android SDK bundle too.

The remaining CMake and concurrency changes are in trunk already and have not caused a problem for the trunk SDK bundle produced by my Android CI, so should be fine. Thanks for cherry-picking these","The API notes changes would be useful for my Android SDK bundle too.

The remaining CMake and concurrency changes are in trunk already and have not caused a problem for the trunk SDK bundle produced by my Android CI, so should be fine. Thanks for cherry-picking these","  - **Explanation**:
   This change adds missing cherry-picks for building Android stdlib and swift-foundation to swift 6.
  
    These changes add missing cache files for x86_64 and x86 stdlib, ensures that builtin float isn't built for Android, fixes two minor stdlib build issues, adds `""-Wgnu-offsetof-extensions""` pragma to avoid a compile error, and introduces the posix_filesystem.apinotes file that is needed to build swift-foundation.

  - **Scope**:
   Cmake Stdlib build.

  - **Issues**:
    N/A
  - **Original PRs**:
  PRs:
  #72014 
   #75494 
  #74829

  picks:
  - 7a5a0aad22f1cb13b820681e48a50fbc34caca98
  - 7815f843a34888d7492fa58c2b14d4ee296ae58c
  - 5905dc9ef3b5e4b0df4669c983a006cace483f04
  - 47f9d789900a4c3c74b34863915830bd2558747e
  - c03627014e25e357f1d554e3d4c4d6d34bf39ce6
  - **Risk**:
    Relatively low. Impacts mostly on Android bits, and introduces a cmake flag for hiding the build of builtin float overlay. Also fixes `NOSWIFTRT` flag used when building the stdlib's swift-reflection-test.
  - **Testing**:
    Local android build testing, and thebrowsercompany/swift-build build testing.
    Validated when building the windows stdlib as well.
  - **Reviewers**:
    @compnerd 
",Why does this get handled differently from the other targets?
77107,2024-10-18T19:39:08Z,2024-12-03T18:32:36Z,clackary,4,0,1,91,2,1,1,[],609.0,0,3970408.0,0,0,0,0,2108480.973868,,0,1,0,False,"['DougGregor', 'clackary', 'asl']","@shahmishal I noticed there's a 6.0.2 branch. Not knowing how close the target release date is for that, would this have a chance of being included in 6.0.2 release?

We'd like to adopt release toolchains, but this is one blocker that would prevent us from doing so. @clackary There were some other fixes to `LoadableByAddress`, notably:
https://github.com/swiftlang/swift/pull/72619 and https://github.com/swiftlang/swift/pull/72617

You might probably want to pick them as well (do not know if they are in 6.0 release branch, I'd assume – no). Looks like they weren't, so I've opened a few PRs for those also:
https://github.com/swiftlang/swift/pull/77110
https://github.com/swiftlang/swift/pull/77111 @swift-ci please testThis addresses an assertion and has been thoroughly tested on main. We'll take it",This addresses an assertion and has been thoroughly tested on main. We'll take it,"  - **Explanation**:
 Cherrypicks the fix for the assertion failure from https://github.com/swiftlang/swift/issues/73018 into 6.0 release toolchains.
  - **Scope**:
Looks like this mainly affects autodiff code.
  - **Issues**:
https://github.com/swiftlang/swift/issues/73018
  - **Original PRs**:
https://github.com/swiftlang/swift/pull/73385
  - **Risk**:
Low, the original fix has landed and stuck on main for months.
  - **Testing**:
A test case is included. No additional testing needed.
  - **Reviewers**:
@asl 
@aschwaighofer 
@slavapestov ",
77111,2024-10-18T21:24:50Z,2024-12-03T18:32:24Z,clackary,1,0,1,34,2,1,1,[],3903348.0,0,3964054.0,0,0,0,0,2108493.549662,,0,1,0,False,['DougGregor'],@swift-ci please testThis looks safe enough to take,This looks safe enough to take,"  - **Explanation**:
 Cherrypicks the fix for the assertion failure from https://github.com/swiftlang/swift/pull/72619 into 6.0 release toolchains.
  - **Scope**:
Looks like this mainly affects autodiff code.
  - **Issues**:
https://github.com/swiftlang/swift/issues/72363
  - **Original PRs**:
https://github.com/swiftlang/swift/pull/72619
  - **Risk**:
Low, the original fix has landed and stuck on main for months.
  - **Testing**:
Includes a test case. No additional testing needed.
  - **Reviewers**:
@asl 
@aschwaighofer",
76613,2024-09-20T18:32:48Z,2024-12-03T17:57:05Z,finagolfin,15,0,3,315,27,2,2,[],130.0,0,6392035.0,0,0,0,0,2110035.247748,,0,3,0,False,"['DougGregor', 'shahmishal', 'parkera', 'jmschonfeld', 'finagolfin']","@jmschonfeld, need a CI run here. @swift-ci please test Passed CI, just needs approval from @compnerd and other owners. @shahmishal, let me know what you think as the linux platform manager about shaving these unused libraries off the 6.0 toolchain in a patch release. I would like to get a review from @parkera and @airspeedswift.  I don't want to aggressively cherry pick this back without any evidence that it resolves the named bug. We're already doing it on main, though. @parkera, this has nothing to do with any bug, I think you might have got this mixed up with #76606. This is just about a simple cleanup on the toolchain for libicu libraries that are now unused on linux and Windows after the Foundation re-core, which uses `_FoundationICU` instead.  Ok, thanks Ping @shahmishal, do we need anyone else to sign off? I think you and I pinged all relevant reviewers weeks ago. Ping @airspeedswift, I think Mishal just wanted you to sign off. Ping @shahmishal, would be good to get this in before the next patch release. cc: @airspeedswift  It's been a while, so re-running CI before merging @swift-ci please test Passed CI, ready for merge.I think this is fine since we've already landed similar changes on main. I see it as an opportunity fix to along with other changes already staged for a 6.0.x but not a driver for the release itself. Yeah, we should take this","I think this is fine since we've already landed similar changes on main. I see it as an opportunity fix to along with other changes already staged for a 6.0.x but not a driver for the release itself. Yeah, we should take this","__Explanation:__ Libicu is entirely unused on non-Darwin platforms too since the Foundation re-core to use `_FoundationICU`, so shave 35 MB off the 6.0 non-Darwin toolchains by removing it. Also, update the list of libraries that are deduplicated by the autolink-extract tool.

__Scope:__ Only affects code for non-Darwin platforms, that is now entirely unused.

__Issue:__ None

__Original PRs:__ #75262, #75342, and #76224

__Risk:__ Very low

__Testing:__ Passed all CI on trunk

__Reviewer:__ @jmschonfeld @compnerd @parkera @etcwilde 

We are unnecessarily still shipping libicu in the 6.0 toolchains despite having another copy in `lib_FoundationICU`. This was removed in 6.1 months ago without a problem.",
77792,2024-11-21T21:28:03Z,2024-12-03T17:30:37Z,hamishknight,1,0,3,231,7,1,1,"['🍒 release cherry pick', 'swift 6.1']",912418.0,0,1022557.0,0,0,0,0,2112198.992547,,1,3,0,False,['hamishknight'],@swift-ci please test,,"*6.1 cherry-pick of #77765*

- Explanation: Fixes an assertion failure that could occur with `-swift-version 6` when forming a reference to an unapplied function
- Scope: Affects type-checking of unapplied functions
- Issue: rdar://140212823
- Risk: Medium-Low, the fix brings the handling of single-curry thunks more in-line with that of double-curry thunks
- Testing: Added tests to test suite
- Reviewer: Pavel Yaskevich",
77767,2024-11-21T12:44:13Z,2024-12-03T17:05:47Z,hamishknight,1,0,1,75,7,1,1,"['🍒 release cherry pick', 'swift 6.1']",943870.0,0,1052497.0,0,0,0,0,2113689.739004,,0,1,0,False,['hamishknight'],@swift-ci please test,,"*6.1 cherry-pick of #77698*

- Explanation: Ensures that type completion after `~` only shows invertible types
- Scope: Affects type completion
- Issue: rdar://139212286
- Risk: Low, the fix is fairly straightforward, only affects completion
- Testing: Added tests to test suite
- Reviewer: Alex Hoppen",
77788,2024-11-21T20:31:22Z,2024-12-03T16:59:19Z,slavapestov,2,0,1,11,2,1,1,[],7.0,0,1024077.0,0,0,0,0,2114082.294944,,0,1,0,False,['slavapestov'],@swift-ci Please test @swift-ci Please test macOS,,"6.1 cherry-pick of https://github.com/swiftlang/swift/pull/77716.

- **Description:** Every time we perform the 'too complex' check we compute the sum total memory usage of all valid solutions found so far. This was showing up in performance profiles. Cache the size in the solution, since it doesn't change after construction.
- **Origination:** This has always been that way.
- **Risk:** Low.
- **Tested:** Existing tests pass.
- **Radar:** rdar://136106973.
- **Reviewed by:** @hborla and @xedin ",
77766,2024-11-21T12:40:59Z,2024-12-03T17:05:36Z,hamishknight,1,0,2,94,5,1,1,"['🍒 release cherry pick', 'swift 6.1']",944075.0,0,1052680.0,0,0,0,0,2113702.303991,,0,2,0,False,['hamishknight'],@swift-ci please test,,"*6.1 cherry-pick of #77691*

- Explanation: Fixes KeyPath dynamic member completion when the KeyPath parameter includes a Sendable protocol composition
- Scope: Affects completion
- Issue: rdar://138418296
- Risk: Low, applies existing logic to a new case
- Testing: Added tests to test suite
- Reviewer: Alex Hoppen",
77907,2024-12-02T22:59:55Z,2024-12-03T16:30:14Z,tshortli,2,0,4,247,12,0,0,[],9.0,0,63025.0,0,0,0,0,2115821.861908,,10,4,0,False,['tshortli'],"@swift-ci please test https://github.com/swiftlang/swift-driver/pull/1744

@swift-ci please test",,"Improve the efficiency and correctness of queries related to semantic availability of decls. Previously, `Decl::getSemanticUnavailableAttr()` was the designated query for semantic unavailability, but it cached much richer information than most callers needed and bloated the storage requirements of the request evaluator. Additionally, its results were not actually accurate for `Decl::isUnreachableAtRuntime()`, since that query has a stricter notion of unavailability. The new request implementation computes a semantic decl availability classification that is suitable for all callers and also can be stored much more efficiently.",
77878,2024-11-29T17:41:24Z,2024-12-03T16:14:02Z,Xazax-hun,2,2,1,95,7,1,1,['c++ interop'],234145.0,0,340360.0,0,0,0,0,2116799.717043,,5,1,0,False,['Xazax-hun'],"@swift-ci please smoke test @swift-ci please smoke testA couple of tiny comments, otherwise LGTM! LGTM!","A couple of tiny comments, otherwise LGTM! LGTM!","Unfortunately, importing them as is results in ambiguous call sites. E.g., std::vector::push_back has overloads for lvalue reference and rvalue reference and we have no way to distinguish them at the call site in Swift. To overcome this issue, functions with rvalue reference parameters are imported with 'consuming:' argument labels.

Note that, in general, move only types and consuming is not properly supported in Swift yet. We do not invoke the dtor for the moved-from objects. This is a preexisting problem that can be observed with move only types before this PR, so the fix will be done in a separate PR. Fortunately, for most types, the moved-from objects do not require additional cleanups.

rdar://125816354
","Typo: missing `support` Could you please create a GitHub issue for this, and add a link to it in this comment, so that we don't forget about this work?"
77898,2024-12-02T15:56:18Z,2024-12-03T14:44:50Z,mikeash,1,0,1,2,2,1,1,[],5.0,0,82112.0,0,0,0,0,2122154.082302,,1,1,0,False,['mikeash'],@swift-ci please testThank you!,Thank you!,rdar://140456842,
77115,2024-10-18T22:43:13Z,2024-12-03T16:10:49Z,kubamracek,14,5,9,1027,115,7,3,[],250706.0,0,3950857.0,0,0,0,0,2116994.517093,,20,9,0,False,"['ahoppen', 'adrian-prantl', 'kubamracek']","@augusto2112 If this patch doesn't break any LLDB tests, why? Could you check if changing the mangling prefix changes the USRs used for indexing? Could you add a test to `test/Index` that builds with embedded mode and just has a FileCheck line for a simple declaration? (`index_curry_thunk.swift` seems to be a good starting point that you can simply further. 

If it does change the USR prefix, I think that’s fine but we might need to do some downstream adjustments for that. > In ASTContext.cpp I see a handful of places where we call getASTContext() on a Type or Decl we have sitting nearby. Do you mind also changing those calls to directly use the new `Context` instance member that you added?

Addressed. > I'm missing a change to `swift/docs/ABI/Mangling.rst`?

Added. > Could you check if changing the mangling prefix changes the USRs used for indexing? Could you add a test to `test/Index` that builds with embedded mode and just has a FileCheck line for a simple declaration? (`index_curry_thunk.swift` seems to be a good starting point that you can simply further.
> 
> If it does change the USR prefix, I think that’s fine but we might need to do some downstream adjustments for that.

Added the test: test/Index/index_embedded.swift. @swift-ci please test > Another place to update is in swift-demangle:
> 
> https://github.com/swiftlang/swift/blob/b073d3d186c3dfe173ec8eefa4de87a8860aa506/tools/swift-demangle/swift-demangle.cpp#L341

Fixed, added test. @swift-ci please test Given the size of this PR and the revlock with LLDB, I'm going to break this PR up, and stage the changes over a series of PRs. I have changed this PR to be a NFC, i.e. not actually changing the mangling just yet. Also added a legacy constructor on ASTMangler that does not require a ASTContext& passed in, to avoid this being a breaking API change.

Subsequent separate PRs will adapt LLDB, actually enable the $e prefix, and drop the legacy ASTMangler constructor. @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test Linux platform https://github.com/swiftlang/swift-driver/pull/1744

@swift-ci please testIn ASTContext.cpp I see a handful of places where we call getASTContext() on a Type or Decl we have sitting nearby. Do you mind also changing those calls to directly use the new `Context` instance member that you added? Should the new prefix be documented? [docs/ABI/Mangling.rst](https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst) lgtm.
Did you see that a search for `""$s` in the code base finds many hard coded mangled names? For example, in the stdlib we use `@_silgen_name(""$s...` a lot. Not sure why.

Another place to update is in swift-demangle: https://github.com/swiftlang/swift/blob/b073d3d186c3dfe173ec8eefa4de87a8860aa506/tools/swift-demangle/swift-demangle.cpp#L341 I'm missing a change to ` swift/docs/ABI/Mangling.rst `?","In ASTContext.cpp I see a handful of places where we call getASTContext() on a Type or Decl we have sitting nearby. Do you mind also changing those calls to directly use the new `Context` instance member that you added? Should the new prefix be documented? [docs/ABI/Mangling.rst](https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst) lgtm.
Did you see that a search for `""$s` in the code base finds many hard coded mangled names? For example, in the stdlib we use `@_silgen_name(""$s...` a lot. Not sure why.

Another place to update is in swift-demangle: https://github.com/swiftlang/swift/blob/b073d3d186c3dfe173ec8eefa4de87a8860aa506/tools/swift-demangle/swift-demangle.cpp#L341 I'm missing a change to ` swift/docs/ABI/Mangling.rst `?","Given that Embedded Swift's ABI and layout of class metadata is (intentionally) different and incompatible with regular Swift, this PR is introducing a different mangling for all Embedded Swift. Concretely, it changes the mangling prefix from $s to $e.

For reviewing, I recommend looking at commits individually: The first commit is a mechanical change to pass an ASTContext to all instantiations of ASTMangler and its derivatives, which is a large diff but essentially an NFC.

**This PR is a large diff, but it's an NFC, just preparing for an actual mangling change in a subsequent commit.** ","```suggestion
//===--- ManglingFlavor.h - Swift name mangling -----------------*- C++ -*-===//
``` ```suggestion
// Copyright (c) 2024 Apple Inc. and the Swift project authors
``` ```suggestion
  /// Default mangling with the ABI stable $s prefix
``` Can you make this a parameter in the constructor? It can be defaulted to true. Reason being that LLDB uses TypeRefBuilder to process types found in DWARF. Can you add a function here that returns the Mangling Flavor of a string, and declare it on `Demangle.h` as well?

Something like:
```
std::optional<Mangle::ManglingFlavor> getManglingFlavor(llvm::StringRef mangledName) {
  if (!isSwiftSymbol(mangledName))
    return {};

  if (mangledName.starts_with(""$e"") || mangledName.starts_with(""_$e""))
    return Mangle::ManglingFlavor::Embedded;
  return Mangle::ManglingFlavor::Default;
}
```"
77897,2024-12-02T15:32:40Z,2024-12-03T12:57:19Z,egorzhdan,3,0,1,5,2,1,1,['c++ interop'],8.0,0,77082.0,0,0,0,0,2128603.984785,,5,1,0,False,['egorzhdan'],"@swift-ci please test @swift-ci please test @Xazax-hun yeap, you're right, I should've added a note on that.Could you add the reasoning to the commit message why we believe skipping checking for overlays is OK? The code changes look good to me. ",Could you add the reasoning to the commit message why we believe skipping checking for overlays is OK? The code changes look good to me. ,"If a Swift module built with library evolution enabled is an overlay of a C++ module, allow referring to the non-resilient C++ symbols from the Swift code.

Overlays are usually built and shipped along with the C/C++ modules, so library evolution is less of a concern there. A developer providing a Swift overlay for a C++ library would expect to be able to refer to the symbols from the C++ library within the overlay.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77793,2024-11-21T21:40:22Z,2024-12-03T10:12:16Z,hamishknight,1,0,1,1,1,1,1,['swift 6.1'],911665.0,0,995518.0,0,0,0,0,2138506.35681,,0,1,0,False,['hamishknight'],@swift-ci please test,,"- Explanation: This can be hit for `IsNonUserModuleRequest`. On main this is properly fixed by enforcing that a ModuleDecl's files are immutable after construction (#77666).
- Scope: N/A
- Issue: rdar://137769081
- Risk: None, this is just removing an assert
- Testing: None, this is just removing an assert
- Reviewer: Ben Barham",
77853,2024-11-27T12:19:30Z,2024-12-02T06:12:08Z,eeckstein,2,0,1,33,2,0,0,[],18.0,0,509975.0,0,0,0,0,2139301.541459,,1,1,0,False,['eeckstein'],@swift-ci smoke test @swift-ci smoke test Windows,,"Some terminator instructions can have type-dependent operands. Therefore we need to use `getNumRealOperands` instead of `getNumOperands`.

Fixes a compiler crash.

rdar://140842806
",
77896,2024-12-02T14:30:34Z,2024-12-03T09:53:37Z,hamishknight,2,1,2,968,30,1,1,[],8.0,0,69786.0,0,0,0,0,2139628.506113,,14,2,0,False,['hamishknight'],@swift-ci please test @swift-ci please test source compatibility,,"FunctionRefKind was originally designed to represent the handling needed for argument labels on function references, in which the unapplied and compound cases are effectively the same. However it has since been adopted in a bunch of other places where the spelling of the function reference is entirely orthogonal to the application level.

Split out the application level from the ""is compound"" bit, and rename to FunctionRefInfo. Should be NFC. I've left some FIXMEs for non-NFC changes that I'll address in a follow-up.

Resolves #77804
rdar://140415962","This is a good abstraction, thank you!"
77858,2024-11-27T17:07:26Z,2024-12-02T06:11:56Z,eeckstein,2,0,2,24,3,0,0,[],8.0,0,485257.0,0,0,0,0,2146745.846572,,1,2,0,False,['eeckstein'],@swift-ci test @swift-ci smoke test Windows,,"Sometimes it can happen that a deinit function, which is imported from another module, has shared linkage.
In this case it is important to de-serialize the function body. Otherwise it would be illegal SIL.

Also change an assert to a bail-out condition in `SILFunction::getLocation` to avoid a crash if a function doesn't have a debug location (for whatever reason).

Unfortunately I don't have a test case for this.

rdar://140112207",
77902,2024-12-02T18:39:25Z,2024-12-02T23:27:30Z,eeckstein,1,0,1,17,2,0,0,[],12.0,0,43550.0,0,0,0,0,2150933.874443,,0,1,0,False,['eeckstein'],@swift-ci smoke test,,"Also consider that the (transitive) operand of a load can be a multi-value instruction, like begin_cow_mutation

rdar://140778782
",
77901,2024-12-02T18:27:13Z,2024-12-03T01:36:06Z,eeckstein,2,0,1,2,1,0,0,[],9.0,0,43604.0,0,0,0,0,2151613.561299,,0,1,0,False,['eeckstein'],@swift-ci smoke test @swift-ci smoke test Windows,,"Triggered by https://github.com/swiftlang/swift/pull/77806

rdar://140778726
",
76457,2024-09-13T18:14:07Z,2024-12-03T01:41:50Z,aschwaighofer,1,0,3,63,2,1,1,[],11.0,0,6938863.0,0,0,0,0,2169141.184492,,0,3,0,False,['aschwaighofer'],@swift-ci testWe'll take this; it's been thoroughly vetted and addresses an assertion,We'll take this; it's been thoroughly vetted and addresses an assertion,"Description: Fixes a missing case to large types reg2mem. Without adding
this case asserts compiler will complain and cause the compiler to
crash.

Risk: Low. This is the same code that we would have generated with an no-asserts
compiler where we fallback to a solution that loads and stores back to memory.

Scope: Fixes a compiler crasher in asserts toolchains.

Testing: Regression test added.

rdar://134914984",
77797,2024-11-21T23:51:25Z,2024-12-03T00:33:43Z,xedin,3,0,4,321,19,0,0,[],1384.0,0,952939.0,0,0,0,0,2173227.538467,,5,4,0,False,['xedin'],@swift-ci please test @swift-ci please build toolchain macOS @swift-ci please smoke test,,"This type is intended to be used to wrap compiler synthesized nodes
(i.e. variables) to make it easier for diagnostic to diagnose precise
failure locations.

Consider the situation like:

```
protocol P {}

extension Array: P where Element: P {}

func test<T: P>() -> T {
  $_a = ...
  $_b = ...
  return [$_a, $_b]
}
```

This is a common pattern with result builders.

In this case if one of the elements don't conform to `P` the best
user experience would be to attach diagnostic to the element otherwise
the developers would have to figure out where in result expression
the error occurred before attempting to fix it.

Resolves: rdar://139842210

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77886,2024-12-01T02:09:22Z,2024-12-02T22:21:46Z,tshortli,1,0,9,845,44,0,0,[],135182.0,0,159146.0,0,0,0,0,2181144.707325,,17,9,0,False,['tshortli'],@swift-ci please smoke test,,"In the near future interpreting some of the properties of an `AvailableAttr` will require access to the `Decl` the attribute is attached to. This will mean that queries for `AvailableAttr`s can no longer be defined on `DeclAttributes` since it lacks context of the `Decl` the attributes belong to. Move the queries to `Decl` instead, which seems more intuitive anyways.

NFC.",
77817,2024-11-22T22:12:13Z,2024-12-02T21:54:57Z,gottesmm,2,0,1,107,3,0,0,[],6.0,0,862966.0,0,0,0,0,2182754.278093,,4,1,0,False,['gottesmm'],@swift-ci smoke test @swift-ci smoke test,,"I also added a small runtime test just as a sanity check. We do not change any codegen here since the change is at the Sema level... but I thought it would be prudent to at least have a small smoke test.

rdar://140439795
",
77816,2024-11-22T22:02:40Z,2024-12-02T21:52:31Z,xedin,3,3,2,79,3,3,1,[],16.0,0,863391.0,0,0,0,0,2182903.05997,,2,2,0,False,['xedin'],"@swift-ci please test @swift-ci please test @swift-ci please smoke testLooks great, thank you!","Looks great, thank you!","…n external property wrapper

The check to see whether argument matches the parameter exactly causes two problems: 
prevents projected value initialized injection; and, if there are multiple parameters with property 
wrappers, would apply incorrect wrapper to other locations because the wrapper application
index wasn't incremented.

Resolves: rdar://140282980

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","I do wonder if could do away with this short-circuiting altogether, seems like too easy of a footgun and I'm not sure it's buying us much Yeah, that's what I was thinking as well, I just think it might be worth doing that separately... Oh yeah definitely, doesn't have to be this PR"
77261,2024-10-28T22:30:12Z,2024-12-02T21:33:22Z,hjyamauchi,4,0,4,333,16,2,2,[],92.0,0,3020590.0,0,0,0,0,2184053.274213,,5,4,0,False,['hjyamauchi'],"Please test with following PRs:
https://github.com/swiftlang/llvm-project/pull/9476

@swift-ci please test Please test with following PRs:
https://github.com/swiftlang/llvm-project/pull/9476

@swift-ci please test @rjmccall @eeckstein @hyp @compnerd This is a cherrypick of the fixes for the ARM64 compiler to `release/6.0`. Can you review? @DougGregor would you review this cherrypick of the fixes for the ARM64 compiler to release/6.0? The context is https://github.com/swiftlang/swift/issues/74866.",,"  - **Explanation**: This PR cherrypicks the fixes for the Bridged C++ class/struct indirect return ABI for Windows ARM64 that are necessary to fix the windows arm64 compiler.
    <!--
    A description of the changes. This can be brief, but it should be clear.
    -->
  - **Scope**: The changes are mostly localized to the MSVC ARM64 environment but includes a change to (appropriately) use `arrangeCXXMethodCall` for C++ methods instead of `arrangeFreeFunctionCall` in the IRGen.
    <!--
    An assessment of the impact and importance of the changes. For example, can
    the changes break existing code?
    -->
  - **Issues**: https://github.com/swiftlang/swift/issues/74866
    <!--
    References to issues the changes resolve, if any.
    -->
  - **Original PRs**:
    - https://github.com/swiftlang/swift/pull/76589
    - https://github.com/swiftlang/swift/pull/76324
    - https://github.com/swiftlang/swift/pull/76159
    - https://github.com/swiftlang/swift/pull/76433
    - https://github.com/llvm/llvm-project/pull/111597
    <!--
    Links to mainline branch pull requests in which the changes originated.
    -->
  - **Risk**: The additional Bridged C++ class/struct constructors are low risk. The IRGen change could unintendedly affect the non-MSVC ARM64 environments but these are deemed a correct fix.
    <!--
    The (specific) risk to the release for taking the changes.
    -->
  - **Testing**: The usual PR validating CIs and local multi-generation toolchain bootstrap builds using the (similarly patched) 5.10 toolchain (the first gen) and a cross-compile on Windows/X64 to Windows/ARM64 (the second gen) and a native Windows/ARM64 native toolchain build (the third gen) using the second gen toolchain.
    <!--
    The specific testing that has been done or needs to be done to further
    validate any impact of the changes.
    -->
  - **Reviewers**: rjmccall eeckstein compnerd hyp egorzhdan
    <!--
    The code owners that GitHub-approved the original changes in the mainline
    branch pull requests. If an original change has not been GitHub-approved by
    a respective code owner, provide a reason. Technical review can be delegated
    by a code owner or otherwise requested as deemed appropriate or useful.
    -->


",
76199,2024-09-01T05:13:22Z,2024-12-02T19:57:17Z,finagolfin,9,0,2,72,4,2,1,['c++ interop'],107215.0,0,8006683.0,0,0,0,0,2184970.646338,,0,2,0,False,"['DougGregor', 'timothyklim', 'finagolfin']","> This might be a breaking change for certain setups

Such as?

> I don't think we can land this kind of change in a bugfix release.

Ideally, we'd get it into Swift 6.0.0 also, once it's accepted into this branch. > > This might be a breaking change for certain setups
> 
> Such as?

I think the answer is that we don't know, but past experience has shown that changing search paths can break configurations that we hadn't heard about. 

This does look like the right set of changes to make, but I'm somewhat concerned that the issue @compnerd hit with https://github.com/swiftlang/swift/pull/74814 isn't known to be resolved. > I think the answer is that we don't know, but past experience has shown that changing search paths can break configurations that we hadn't heard about.

OK, I looked into it and Saleem added this first SDK lookup five years ago in 370aa9d9c, precisely to look for these module maps in full SDKs that are causing the problems now. I think this was to paper over the frontend not looking for Swift modules in full SDKs altogether, as I reported earlier this year in swiftlang/swift-driver#1562, and @artemcm's Frontend pull for that is how it should've been fixed instead.

I don't think most compilation scenarios set the `-sdk` flag, as I noted in the writeup about `Risk`, so the only question is whether this is worth fixing for the niche scenarios I listed where the current lookup order is broken despite the potential unknown niche scenarios that depend on the current lookup order.

> I'm somewhat concerned that the issue @compnerd hit with https://github.com/swiftlang/swift/pull/74814 isn't known to be resolved.

That was with an earlier version of this patch, but since this merged version was made available a couple weeks ago, their CI has been broken or they have been traveling, so we have not received any notice on this patch.

I suspect this patch works fine, but as I said above, I'm still waiting on them to verify. @shahmishal, we're going on three weeks with no response here, can we get this in? I suspect the reason Saleem had an issue with an earlier version of this patch is that I made a mistake initially, which Egor then found and we corrected.

This has been in trunk for a month now without any reported issues and [distros like Fedora have to pull it in for their 6.0 build](https://src.fedoraproject.org/rpms/swift-lang/blob/ea96108046f8a1021f3bbd46d95c8cef7799626e/f/resource_dir.patch). @swift-ci please test Ping @shahmishal or @DougGregor, this passed the 6.0 CI, just need a decision now. Ping, this has been in trunk for four months now and in the downstream 6.0 release of Fedora for the last month: I think we have a pretty good body of evidence that it is unlikely to break anything. Ping @DougGregor, with the next patch release coming up, can you make a decision on this? I consider this a small fix for more advanced build scenarios, but I leave it up to you release managers if it's worth backporting. >Suppose you have Swift 5.10 installed in the system and are trying to build Swift 6.0 from source. In that scenario, the CMake config explicitly passes -sdk / and https://github.com/swiftlang/swift/issues/74696#issuecomment-2198714412

This bug caused me a lot of hours to be able to make a build for NixOSThis might be a breaking change for certain setups, I don't think we can land this kind of change in a bugfix release. Yeah, we should take this. Thank you!","This might be a breaking change for certain setups, I don't think we can land this kind of change in a bugfix release. Yeah, we should take this. Thank you!","__Explanation:__ The frontend currently looks in `-sdk` for a C/C++ sysroot and `-resource-dir` for Swift modules, with the former implicitly set to `/` and the latter always explicitly passed in by `swift-driver`. However, a ""full SDK"" contains both C/C++ headers _and_ Swift modules, so in that case and _if_ `-sdk` is explicitly passed in, this `ClangImporter` was looking in the full SDK first and wrongly using those Swift module maps, rather than the ones in `-resource-dir`.

__Scope:__ When does that actually happen? Suppose you have Swift 5.10 installed in the system and are trying to build Swift 6.0 from source. In that scenario, the CMake config explicitly passes `-sdk /` and [the Swift 6 compiler wrongly uses the old Swift 5.10 C and C++ module maps and fails](https://github.com/swiftlang/swift/issues/74696#issuecomment-2198714412). This could also affect some SDK bundles, say if one linux distro triple's Swift modules are placed in the common SDK itself, while others are put in separate `-resource-dir` paths, since compiling SDK bundles passes in an explicit `-sdk`.

It _does not_ affect simply building Swift packages with a local SwiftPM 6.0 while the implicit system SDK path of `/` has a system Swift 5.10 installed, as no explicit `-sdk` is passed to build those packages.

__Issue:__ #74696

__Original PRs:__ #74814 and #76119

__Risk:__ Low, since this only affects the few listed scenarios where the `-sdk` flag is explicitly passed to the compiler

__Testing:__ Passed all CI on trunk and my and others' testing locally. @compnerd did report an issue with his new Android SDK with an earlier version of this patch, so I'll wait on his further testing and approval before asking to merge this.

__Reviewer:__ @egorzhdan",
77799,2024-11-22T09:05:04Z,2024-12-02T21:14:06Z,shahmishal,1,0,1,12,4,0,0,[],9.0,0,907745.0,0,0,0,0,2185207.194173,,5,1,0,False,['shahmishal'],@swift-ci test,,,
77899,2024-12-02T16:44:12Z,2024-12-02T20:47:20Z,MaxDesiatov,1,0,1,2,1,0,0,"['bug', 'documentation', 'driver options']",10.0,0,14590.0,0,0,0,0,2186815.353169,,1,1,0,False,['MaxDesiatov'],@swift-ci smoke test,,"`when it is use for linking` -> `when it is used for linking`

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77828,2024-11-25T11:19:46Z,2024-12-02T19:27:50Z,Xazax-hun,2,0,1,325,4,2,2,['c++ interop'],347053.0,0,634086.0,0,0,0,0,2191585.703803,,0,1,0,False,['Xazax-hun'],@swift-ci please test @swift-ci please test,,"As this feature is still under design, we do not want users to depend on the semantics we ship in 6.1, so remove the annotations from the bridging header. This PR also removes the tests that rely on these annotations.
",
76594,2024-09-20T03:12:37Z,2024-12-02T18:40:17Z,stevapple,6,12,3,60,1,3,0,[],5172451.0,0,6363287.0,0,0,0,0,2194014.960225,,1,3,0,False,"['weliveindetail', 'stevapple', 'compnerd']","@swift-ci please test Windows platform Although a workaround is applied, I do think we were misusing `T:` in the CI config. It is a relative path on Windows, so appending any component to it will result in another relative path, which is most likely not what we want for a build script. @swift-ci please test Windows platform @swift-ci please test @stevapple Are you fine to merge this? > @stevapple Are you fine to merge this?

Ofc, let's go ahead:)I'm liking this direction!",I'm liking this direction!,"Per request of https://github.com/swiftlang/swift/pull/76568#issuecomment-2361349599, this PR cherry-picks d7057c9da2c093c5d52fbfb98d51a716789ce63e which replaces the use of host Python with the cached version.","Is there a way to just perform the installation assuming it is not present without any adverse effects?  Is this embedded into the generated binaries? This is only used in the build step. Only `Python3_LIBRARY` will be linked IIRC. I don’t think that’s a good idea, but it’s certainly doable. Had a simple try and found that we cannot easily reuse `Extract-ZipFile` because `Expand-Archive` requires `.zip` as file extension, and wheels aren’t extracted to standalone directories. Given that `pip` is already included (no download required) and simply just not installed, it shouldn’t be a real problem. Awesome! As long as there is no reference embedded into the binary of this path, we should be fine with this change. I think that using `pip` is fine, just trying to see if we can simplify some of the logic here by just unconditionally doing `python -I -m ensurepip -U --default-pip`. Running conditionally should work, but I intended to log precisely about what’s happening. Also need to notice that this command will output some noise when you already have pip installed. ```suggestion
  return Join-Path -Path $BinaryCache -ChildPath ""Python$($HostArch.CMakeName)-$PythonVersion\tools\python.exe""
``` Thanks for working on this @stevapple! The move away from host Python solved an issue for me accessing modules in LLDB tests. And I can re-use your approach for installing modules: https://github.com/swiftlang/swift/pull/76894/commits/942538fbfcee4f68199503e88d6e31364c668cd8 What else do you think will be necessary to merge this PR? @weliveindetail Glad to hear that it helped you! Let’s wait for @compnerd to kick off a new CI run and see if there’s any other problem. Great. Then I will wait for it to land, rebase my changes on top of it and add my Python modules for lldb tests. Maybe I will have to factor out a function or so, that would be no problem to do. What do you think @compnerd?"
77827,2024-11-25T10:44:24Z,2024-12-02T17:37:41Z,hamishknight,1,0,1,56,4,1,1,"['🍒 release cherry pick', 'swift 6.1']",605385.0,0,629600.0,0,0,0,0,2198195.71336,,1,1,0,False,['hamishknight'],@swift-ci please test,,"*6.1 cherry-pick of #77802*

- Explanation: Fixes a spurious `@Sendable` mismatch error when pattern-matching in Swift 6 language mode
- Scope: Affects type-checking of patterns in Swift 6 language mode
- Issue: rdar://139234188
- Risk: Low, the fix is straightforward and narrow
- Testing: Added tests to test suite
- Reviewer: Pavel Yaskevich",
77814,2024-11-22T21:28:08Z,2024-12-02T17:34:22Z,rintaro,1,0,1,23,3,2,2,[],8.0,0,849974.0,0,0,0,0,2198397.772216,,0,1,0,False,['rintaro'],@swift-ci Please test,,"Cherry-pick #77813 into `release/6.1`

**Explanation**: Fix a regression caused by https://github.com/swiftlang/swift/pull/76981.  `UnresolvedSpecializeExpr`  should be a part of `OptionalEvaluationExpr`. This change fixes the `OptionalEvaluationExpr` regression. Also this makes unresolved member chain expressions have ability to contain specialized nested types.
**Scope**: Expression type checker
**Risk**: Low. The change is simple and targeted
**Testing**: Added regression test cases 
**Issuee**: rdar://140378864
**Reviewer**: Pavel Yaskevich (@xedin)",
77781,2024-11-21T18:31:10Z,2024-12-02T17:34:12Z,rintaro,1,0,1,46,3,1,1,[],25.0,0,946982.0,0,0,0,0,2198409.073416,,0,1,0,False,['rintaro'],@swift-ci Please test,,"Cherry-pick #77755 into `release/6.1`

**Explanation**: In the new diagnostic printing style, diagnostics at EOF were mistakenly ignored. This change fix that by adjusting the position checking logic, and also make sure it emits the diagnostics at the correct position.
**Scope**: Diagnostics
**Risk**: Low. The change is simple enough
**Testing**: Added a regression test case
**Issues**: rdar://129883075 rdar://138426038
**Reviewers**: Doug Gregor (@DougGregor), Hamish Knight (@hamishknight), and Alex Hoppen (@ahoppen)",
77796,2024-11-21T23:44:41Z,2024-12-02T17:14:12Z,nkcsgexi,1,0,5,118,11,1,1,[],6.0,0,926971.0,0,0,0,0,2199609.773142,,0,5,0,False,['nkcsgexi'],@swift-ci please test,,"Cherry-pick of PR against main: https://github.com/swiftlang/swift/pull/77710

- Description: these changes are integral to the feature of emitting fine-grained module trace files, therefore we need to cherry-pick to the 6.1 branch where most of the feature is already in.
- Origination: new compiler feature of emitting the fine-grained module trace file.
- Risk: Low.
- Tested: Existing tests pass.
- Radar: rdar://138776708
- Reviewed by: Doug Gregor
",
77813,2024-11-22T20:08:58Z,2024-12-02T17:33:38Z,rintaro,1,0,1,23,3,1,1,[],9.0,0,854680.0,0,0,0,0,2198443.872144,,2,1,0,False,['rintaro'],@swift-ci Please smoke test,,"Optional chain and unresolved member chain should consider a generic specialization as a chain expression.

rdar://140378864
",
77839,2024-11-26T10:44:51Z,2024-12-02T17:13:36Z,jamieQ,1,0,1,2,1,1,1,[],214379.0,0,541726.0,0,0,0,0,2199646.291031,,0,1,0,False,['slavapestov'],@swift-ci Please smoke test ,,"- fixes a minor typo i noticed while reading
",
77811,2024-11-22T18:23:50Z,2024-12-02T16:42:35Z,DougGregor,2,0,3,62,5,1,1,[],152.0,0,858531.0,0,0,0,0,2200902.809294,,0,3,0,False,['DougGregor'],@swift-ci please test @swift-ci please test,,"* Description: The `@_noLocks`/`@_noAllocation` checking considers throwing a typed error to always use generic metadata, even though it is designed not to unless specifically hooked (by a debugger). Teach the checker to allow typed errors in `@_noLocks/`@_noAllocation` mode.
* Origination: With the introduction of typed throws, we failed to account for this checking pass.
* Risk: Low.
* Tested: New tests.
* Main pull request: https://github.com/swiftlang/swift/pull/77780
* Radar: rdar://140230684
* Reviewed by: Erik Eckstein
",
77782,2024-11-21T19:19:41Z,2024-12-02T16:35:31Z,justice-adams-apple,2,0,1,1,1,1,1,[],844.0,0,940553.0,0,0,0,0,2201930.004271,,1,1,0,False,['justice-adams-apple'],@swift-ci test @swift-ci please smoke testThank you!,Thank you!,Set `CMAKE_VISIBILITY_INLINES_HIDDEN` for libSwiftCore alongside `CMAKE_CXX_VISIBILITY_PRESET` and `CMAKE_C_VISIBILITY_PRESET`,
77777,2024-11-21T17:14:04Z,2024-12-02T16:34:41Z,justice-adams-apple,2,2,1,5,1,3,2,[],6735.0,0,948039.0,0,0,0,0,2201982.497296,,0,1,0,False,['justice-adams-apple'],@swift-ci test @swift-ci please smoke test,,Add source file `ObjectIdentifier+DebugDescription.swift` to the target when not building for Android or Linux,"@compnerd Would it be preferred to use a cmake flag here which can be toggled on/off? Or will this suffice? I think that given that this is a workaround for an issue, leaving this focused as the specific cases is fine. I do wonder if the underlying issue has been resolved and this workaround is now outdated."
77848,2024-11-26T21:19:53Z,2024-12-02T16:25:55Z,compnerd,2,0,1,6,1,0,0,[],7.0,0,500765.0,0,0,0,0,2202507.903184,,4,1,0,False,['compnerd'],@swift-ci please test CC: @etcwilde @justice-adams-apple,,Adjust the build rules to use the `LibXml2::LibXml2` target rather than use the explicit include paths and link flags. This allows us to track additional dependencies (implicit linked libraries) as well as properly propagate the include paths and library search paths.,
77867,2024-11-28T13:31:01Z,2024-12-02T16:21:44Z,egorzhdan,1,0,1,1,1,1,1,[],8.0,0,355846.0,0,0,0,0,2202759.220261,,3,1,0,False,['egorzhdan'],@swift-ci please smoke test,,"This fixes a warning emitted by MSVC when building Swift.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77861,2024-11-27T18:04:32Z,2024-12-02T15:56:06Z,compnerd,5,0,1,28,4,2,2,[],9.0,0,424296.0,0,0,0,0,2204299.812449,,2,1,0,False,['compnerd'],"@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test Windows platfom @swift-ci please test Windows platformLGTM, thank you!","LGTM, thank you!","When compiling the swiftmodule from the textual swift interface, ensure that we re-serialise the static or dynamic nature of the module. This is required for proper code generation where the static and dynamic linking is material to symbolic references. This also opens the possibility of optimizations on other platforms via internalisation of the symbols.

Fixes: #77756",
77818,2024-11-22T22:38:04Z,2024-12-02T15:33:06Z,tshortli,1,0,7,443,17,0,0,[],579503.0,0,838502.0,0,0,0,0,2205682.120789,,16,7,0,False,['tshortli'],@swift-ci please test,,Make the memory footprint of `AvailableAttr` smaller by optimizing for the common case of no `rename:` decl being associated with the attribute.,
77802,2024-11-22T13:46:56Z,2024-12-02T13:07:09Z,hamishknight,3,0,1,56,4,1,1,[],8.0,0,865418.0,0,0,0,0,2210634.437486,,2,1,0,False,['hamishknight'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please smoke test,,"Currently we set `FunctionRefKind::Compound` for enum element patterns with tuple sub-patterns to ensure the member has argument labels stripped. As such, we need to account for the correct application level in `getNumApplications`. We ought to be setting the correct FunctionRefKind and properly handling the label matching in the solver though. We also ought to consider changing FunctionRefKind such that ""is compound"" is a separate bit from the application level.

Filed #77803 & #77804 to track properly fixing things here.

rdar://139234188",
77800,2024-11-22T11:24:28Z,2024-12-02T10:44:05Z,Xazax-hun,1,0,1,34,3,1,1,[],24.0,0,861580.0,0,0,0,0,2223021.727581,,0,1,0,False,['Xazax-hun'],@swift-ci please test,,"Non-escapable types are now enabled by default. Use the new lifetime dependence feature flag to gate interpreting lifetime annotations on the C++ side and add tests to make sure we get the expected diagnostics when the feature flag is off.
",
77764,2024-11-21T12:04:19Z,2024-12-02T10:43:20Z,Xazax-hun,1,0,1,46,2,1,1,['c++ interop'],88142.0,0,945543.0,0,0,0,0,2223068.216217,,4,1,0,False,['Xazax-hun'],"@swift-ci please smoke testLGTM, thanks!","LGTM, thanks!","rdar://140271527
",
77855,2024-11-27T16:03:42Z,2024-12-02T10:42:22Z,Xazax-hun,2,2,1,35,1,3,1,['c++ interop'],12.0,0,412724.0,0,0,0,0,2223124.7244,,0,1,0,False,['Xazax-hun'],@swift-ci please smoke test @swift-ci please smoke test Windows,,,"Please don't add naked radar links to the main source code like this.  First and foremost, you should describe the issue that you're working around instead of just adding a link.  Second, this is an open-source project, so you should really link to an open source GitHub issue which will be readable by non-Apple employees. Got it. This one was here before my change. I'll try to replace it with the summary of what the rdar is about in a followup PR. "
77791,2024-11-21T20:59:58Z,2024-12-02T09:19:47Z,hamishknight,1,0,2,37,3,1,1,[],673650.0,0,908395.0,0,0,0,0,2228079.240383,,0,2,0,False,['hamishknight'],@swift-ci please smoke test,,"I've been living on this for a bit without issue, enable by default. Filed #77790 to track splitting up ""umbrella"" targets such that they can benefit.

Resolves #77418",
77807,2024-11-22T15:51:11Z,2024-12-02T09:19:12Z,hamishknight,1,3,2,18,2,2,1,[],571.0,0,840488.0,0,0,0,0,2228113.559514,,0,2,0,False,['hamishknight'],@swift-ci please smoke test,,Clarify why a development snapshot is needed for stdlib Swift targets.,"nit:
```suggestion
                          due to the fact that the the stdlib is built using the just-built Swift
``` ```suggestion
      due to the fact that the the stdlib is built using the just-built Swift
``` Heh good catch, thanks!"
77752,2024-11-20T23:13:17Z,2024-12-02T06:54:07Z,DougGregor,7,0,5,123,8,1,1,[],558.0,0,978054.0,0,0,0,0,2236822.192344,,1,5,0,False,['DougGregor'],"This builds on https://github.com/swiftlang/swift/pull/77748. That PR made typed throws avoid allocations in practice, lifting a restriction. This PR removes the hack that allowed untyped throws through the performance-annotation checker, even though they would allocate. So this PR tightens up performance annotation checking in a way that may reject existing code (that should always have been rejected). @swift-ci please smoke test Rebased on top of https://github.com/swiftlang/swift/pull/77780, removed `NonErrorHandlingBlocks`. @swift-ci please smoke test @swift-ci please smoke test  @swift-ci please smoke test @swift-ci please smoke test macOSPlease remove the declaration of `neBlocks`, too. And at that occasion also in `visitFunctionEmbeddedSwift`.
You can remove the `NonErrorHandlingBlocks` utility at all. It's not used anywhere else and we will not need it anymore - at least not in C++. lgtm, thanks!","Please remove the declaration of `neBlocks`, too. And at that occasion also in `visitFunctionEmbeddedSwift`.
You can remove the `NonErrorHandlingBlocks` utility at all. It's not used anywhere else and we will not need it anymore - at least not in C++. lgtm, thanks!","When performance diagnostics were introduced, typed throws didn't exist
so it was not generally possible to have throws anywhere without
triggering performance diagnostics. As a short term hack, we disabled
checking of `throw` instructions and the basic blocks that terminate
in a `throw`.

Now that typed throws is available and can be used to eliminate
allocations with error handling, remove all of the hacks. We'll now
diagnose attempts to throw or catch existential values (e.g., the `any
Error` used for untyped throws), but typed throws are fine.",
77879,2024-11-30T03:40:52Z,2024-12-02T06:53:30Z,3405691582,3,3,1,16,5,3,2,[],42258.0,0,184358.0,0,0,0,0,2236864.390951,,0,1,0,False,"['DougGregor', '3405691582']","> LGTM, further OpenBSD AArch64 patches incoming?

This contains just the key changes to get it building (especially with #77815). If I get around to addressing test failures and similar, then there may be more. PTAL, if you feel so inclined, since I have had to change the scope and implementation here.  @swift-ci please testLGTM, further OpenBSD AArch64 patches incoming? This LGTM, thank you!","LGTM, further OpenBSD AArch64 patches incoming? This LGTM, thank you!","However, to do this, we end up changing how amd64 is supported too. Previously, I had tried to keep some meaningful separation between platform spelling and LLVM spelling, but this is becoming more difficult
to meaningfully maintain.

See the commit comment for more specifics, but it suffices to say that it's far simpler to give up and rename to LLVM spellings right at the beginning. This does mean that this commit is less constrained to just adding the necessary parts to enable arm64, but it should mean less headaches overall from differing architecture spellings.

Other than that, the only real change of note is that `-Wl,-Bsymbolic` seems necessary to squash some relocation errors; I have not verified whether this is only necessary on arm64.
","I see that we're switching from amd64 -> x86_64. I assume that's intentional? Yes. 

There are various parts of the codebase and build system, which basically assume architecture names with LLVM spellings, not platform spellings. If triples elsewhere are constructed with platform spellings, then missing module errors and the like end up manifesting. It ends up being simpler to just use the LLVM names rather than try and introduce special cases throughout the build system. That makes sense, thank you!"
77805,2024-11-22T14:20:34Z,2024-12-02T06:13:24Z,eeckstein,1,0,1,37,8,0,0,[],13.0,0,834776.0,0,0,0,0,2239264.448807,,2,1,0,False,['eeckstein'],@swift-ci smoke test,,"This was missing from https://github.com/swiftlang/swift/pull/77763
",
77806,2024-11-22T14:33:41Z,2024-12-02T06:13:08Z,eeckstein,8,0,5,1658,26,0,0,[],119.0,0,833967.0,0,0,0,0,2239287.13143,,3,5,0,False,['eeckstein'],"@swift-ci test @swift-ci benchmark @swift-ci test linux
 @swift-ci test linux @swift-ci test @swift-ci benchmark @swift-ci test @swift-ci benchmark",,"Instead, improve load-simplification and redundant-load-elimination so that those optimizations can do what ArrayElementPropagation did.
Therefore ArrayElementPropagation is not needed anymore.

ArrayElementPropagation also performed a second optimization: replace `Array.append(contentsOf:)` with individual `Array.append` calls. But the benefit of this optimization is questionably, anyway. In most cases it resulted in a code size increase. So makes sense to remove it without a replacement.
",
77852,2024-11-27T11:17:17Z,2024-12-02T06:10:10Z,eeckstein,3,0,2,139,4,0,0,[],9.0,0,413578.0,0,0,0,0,2239461.60619,,0,2,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark @swift-ci smoke test Windows,,"Calls of such closures were not considered to read or modify the inout argument.

Fixes a miscompile.
rdar://140338313",
70496,2023-12-15T17:20:36Z,2023-12-16T20:27:55Z,slavapestov,2,0,1,42,2,1,1,[],84.0,0,30235381.0,0,0,0,0,2463059.927671,,1,1,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please smoke test,,"Fixes https://github.com/apple/swift/issues/61934.
Fixes #67337.",
77857,2024-11-27T17:00:31Z,2024-11-28T07:27:24Z,egorzhdan,2,0,1,12,1,0,0,['c++ interop'],84.0,0,52015.0,0,0,0,0,2580431.362417,,3,1,0,False,['egorzhdan'],@swift-ci please test @swift-ci please test Linux,,"This is a workaround for https://github.com/swiftlang/swift/issues/77856.

rdar://140358388

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77843,2024-11-26T16:30:21Z,2024-11-27T10:18:04Z,egorzhdan,5,0,1,15,2,1,1,['c++ interop'],6.0,0,64067.0,0,0,0,0,2656591.003381,,2,1,0,False,"['egorzhdan', 'shahmishal', 'al45tair']",@swift-ci please test @swift-ci please build toolchain Ubuntu 24.04 @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Ubuntu 24.04 Merging to unblock nightly builds.,,"In certain versions of libstdc++, `std::hash<std::string>` defines `operator()` in a base class. It looks like Swift is not correctly deserializing an inherited `operator()` for inlinable functions. This change sidesteps the issue by moving the call to `callAsFunction`/`operator()` to the C++ shim layer.

rdar://140358388

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77850,2024-11-27T09:57:28Z,2024-11-27T09:58:01Z,al45tair,0,0,1,7,1,0,0,[],,0,33.0,0,0,0,0,2657798.286228,,0,1,0,False,[],,,"This was broken by #77692.

rdar://140313372
",
77780,2024-11-21T18:20:30Z,2024-11-22T04:02:32Z,DougGregor,3,0,3,62,5,0,0,[],18.0,0,82131.0,0,0,0,0,3063918.673493,,2,3,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,"Prior to throwing, Swift emits a call to `swift_willThrow(Typed)`, which allows various diagnostic tools (such as debuggers and testing libraries) to intercept errors at the point where they are initially thrown.

Since `swift_willThrow(Typed)` can be hooked by arbitrary code at runtime, there is no way for it to meet performance constraints like @_noLocks or @_noAllocation. Therefore, in a function that has those performance constraints specified, disable emission of the call to `swift_willThrow(Typed)`.

Fixes rdar://140230684.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77808,2024-11-22T16:16:25Z,2024-11-22T16:19:14Z,al45tair,0,0,1,8,2,0,0,[],,0,170.0,0,0,0,0,3066925.90623,,1,1,0,False,[],,,"There's nothing particularly interesting about testing these for arm64e, and doing so would require changing the test to cope with ptrauth.  Disable for arm64e instead.

rdar://140369127
",
77801,2024-11-22T13:33:36Z,2024-11-22T16:18:17Z,eeckstein,1,0,1,1,1,0,0,[],17.0,0,9881.0,0,0,0,0,3066984.339811,,0,1,0,False,['eeckstein'],@swift-ci smoke test,,"rdar://140405972
",
77763,2024-11-21T10:46:17Z,2024-11-22T05:42:29Z,eeckstein,5,2,3,2684,979,2,1,[],53.0,0,68176.0,0,0,0,0,3105129.126743,,6,3,0,False,"['rjmccall', 'eeckstein']","@swift-ci test @rjmccall I'm replying in this PR to your comment in https://github.com/swiftlang/swift/pull/77714

> I don't like the idea of having multiple dialects of SIL itself

It would not call this a dialect. It just makes printing the type annotations optional.
Anyway, with this PR I changed it to the default (and added `-Xllvm -sil-print-types` to force printing type annotations for all operands - which is the old behavior).

>  Or we could make operand types optional and then only print them when blocks are rendered out of order?

Yes, that's exactly how it works.
 @swift-ci test @swift-ci test > @rjmccall I'm replying in this PR to your comment in #77714
> 
> > I don't like the idea of having multiple dialects of SIL itself
> 
> It would not call this a dialect. It just makes printing the type annotations optional. Anyway, with this PR I changed it to the default (and added `-Xllvm -sil-print-types` to force printing type annotations for all operands - which is the old behavior).
>
> > Or we could make operand types optional and then only print them when blocks are rendered out of order?
> 
> Yes, that's exactly how it works.

Ah, yes, if that was the existing behavior of your patch, then (1) I definitely misunderstood what you were proposing and (2) I agree that this not a dialect.  ""Pure"" SIL sounded much more like a dialect.",,"Type annotations for instruction operands are omitted, e.g.

```
  %3 = struct $S(%1, %2)
```

Operand types are redundant anyway and were only used for sanity checking in the SIL parser.

But: operand types _are_ printed if the definition of the operand value was not printed yet.
This happens:

* if the block with the definition appears after the block where the operand's instruction is located

* if a block or instruction is printed in isolation, e.g. in a debugger

The old behavior can be restored with `-Xllvm -sil-print-types`.
This option is added to many existing test files which check for operand types in their check-lines.

Also add `-Xllvm -sil-print-no-uses` to not print use-list comments in textual SIL.

(This PR was originally part of https://github.com/swiftlang/swift/pull/77714)","I know we have a bunch of this already, but we really need to kick the habit of using global `llvm::cl::opt`s instead of breaking down the command line into a context and threading that context into passes. This stuff all turns into global constructors that have to run in every process that even links this code in. The Carbon folks are finding that the uses in the LLVM passes alone are a significant contributor to their compile times; admittedly, they have a much faster compiler overall, but still.

Anyway, just feedback for a later PR. Yeah, we should clean up our command line options"
77787,2024-11-21T20:28:35Z,2024-11-22T03:10:48Z,slavapestov,1,0,1,4,1,1,1,[],38.0,0,24133.0,0,0,0,0,3114235.241218,,0,1,0,False,['slavapestov'],@swift-ci Please test,,"6.1 cherry-pick of https://github.com/swiftlang/swift/pull/77786.

* **Description:** Fixes a spurious assertion failure due to invariant violations with opaque return types in the SILCloner.
* **Origination:** The assertion was introduced in https://github.com/swiftlang/swift/pull/76263.
* **Tested:** Existing tests pass.
* **Risk:** None.
* **Radar:** rdar://139469939
* **Reviewed by:** @hborla",
77784,2024-11-21T19:59:56Z,2024-11-22T00:59:42Z,nkcsgexi,2,0,1,6,2,1,1,[],7.0,0,17988.0,0,0,0,0,3122099.9439,,6,1,0,False,['nkcsgexi'],@swift-ci please smoke test @swift-ci please smoke test WindowsThank you!,Thank you!,,
77758,2024-11-21T05:55:00Z,2024-11-21T21:03:08Z,tshortli,1,3,3,180,19,3,0,[],40630.0,0,66671.0,0,0,0,0,3124113.707233,,15,3,0,False,['tshortli'],"@swift-ci please smoke testLGTM, thank you","LGTM, thank you","- Expose getters for `Platform` and `PlatformAgnostic` and adopt throughout the compiler.
- Move `Platform` and `PlatformAgnostic` into `DeclAttribute` bit storage.
- Prefer boolean convenience getters over calling `getPlatformAgnosticAvailability()`. ","Leftover comment? Ugh yes, thanks Fixed. I need a push hook that's reminds me about leaving TODOs in like that."
77786,2024-11-21T20:25:23Z,2024-11-22T00:15:07Z,slavapestov,1,0,1,4,1,0,0,[],10.0,0,13784.0,0,0,0,0,3124778.179073,,2,1,0,False,['slavapestov'],@swift-ci Please smoke test,,"This unconditional assert was added recently so it started failing in noassert toolchains. I'll have a proper fix soon.
",
77757,2024-11-21T05:27:50Z,2024-11-21T23:45:18Z,compnerd,3,0,1,30,1,0,0,[],31.0,0,65850.0,0,0,0,0,3126565.884633,,0,1,0,False,['compnerd'],"Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/350

@swift-ci please build toolchain Windows platform Please test with following PRs:
https://github.com/swiftlang/swift-installer-scripts/pull/350

@swift-ci please test Windows ARM64 platform @swift-ci please smoke test",,"This switches us to use CMake to build swift-inspect. In doing so, we can now cross-compile this tool. Due to the use of CMake, we now have install rules for the products, which allows the toolchain deployment and simpler rules in the installer.",
77778,2024-11-21T17:40:08Z,2024-11-21T23:16:03Z,xedin,1,0,1,4,1,1,1,[],9.0,0,20155.0,0,0,0,0,3128324.041119,,1,1,0,False,['xedin'],@swift-ci please smoke test,,"Attempting to dump opaque decl while type-checking a body of the declaration it's associated with results in a request cycle because underlying substitutions request would trigger type-checking if the body isn't type-checked yet.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77747,2024-11-20T21:05:38Z,2024-11-21T14:59:13Z,kateinoigakukun,2,0,1,2,1,0,0,[],9.0,0,93662.0,0,0,0,0,3128887.374593,,1,1,0,False,['kateinoigakukun'],@swift-ci test WebAssembly @swift-ci smoke test,,"As of a recent fix included in LLVM 17 [^1] and wasi-libc fix [^2], we can enable `LIBCXX_ENABLE_FILESYSTEM` in libcxx build for WebAssembly/WASI. This allows us to use `<filesystem>`, `<fstream>`, etc in C++ code.

[^1]: https://github.com/llvm/llvm-project/commit/66a562d22e708ba40b8443b58e504ac3f983ba59
[^2]: https://github.com/WebAssembly/wasi-libc/pull/463

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77717,2024-11-19T21:07:42Z,2024-11-21T21:40:22Z,artemcm,2,0,1,5,1,1,1,[],6.0,0,175694.0,0,0,0,0,3133132.176571,,0,1,0,False,['artemcm'],@swift-ci smoke test @swift-ci smoke test,,,
77702,2024-11-19T16:14:58Z,2024-11-21T04:18:38Z,artemcm,3,0,1,98,8,1,1,"['🍒 release cherry pick', 'swift 6.1']",7.0,0,190373.0,0,0,0,0,3136018.139549,,0,1,0,False,"['shahmishal', 'artemcm']",@swift-ci test @swift-ci test @swift-ci test,,"Cherry-pick of https://github.com/swiftlang/swift/pull/77686
---------------------------------

This change ensures that when loading some module dependency 'Bar' which has a package-only dependency on 'Foo', only the following clients attempt to resolve/load 'Foo':
- Source compilation with package-name equal to that of 'Bar'.
- Textual interface compilation of a *'package'* interface with package-name equal to that of 'Bar'.

Ensuring that the following kinds of clients do not attempt to resolve/load 'Foo':
- Source compilation with package-name different to that of 'Bar'
- Textual interface compilation of a public or private interface, regardless of package name.

This fixes the behavior where previously compilation of a Swift textual interface dependency 'X' from its public or private interface, with an interface-specified package-name, from a client without a matching package-name, resulted in a lookup of package-only dependencies of modules loaded into 'X'. This behavior is invalid if we are not building from the package textual interface, becuase the module dependency graph is defined by the package name of the source client, not individual module dependency package name. i.e. In-package module dependencies are resolved/loaded only if the parent source compile matches the package name.

Resolves rdar://139979180

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77776,2024-11-21T16:26:59Z,2024-11-21T20:57:15Z,egorzhdan,6,0,1,90,2,1,1,['c++ interop'],7.0,0,16217.0,0,0,0,0,3136653.384168,,2,1,0,False,"['egorzhdan', 'Azoy']",@swift-ci please test @swift-ci please benchmark `@_alwaysEmitIntoClient` implies `@inlinable` so you don’t need the latter. Thanks @Azoy! @swift-ci please smoke test @swift-ci please benchmark,,"The change in 269fc941 turned out not to be enough to solve linker errors when using the CxxStdlib overlay with a non-default C++ stdlib.

In addition to `@inlinable`, the Swift functions in the overlay need to be `@_alwaysEmitIntoClient` to prevent Swift from trying to link a program that uses libc++ on Linux against the CxxStdlib binary shipped in the toolchain.

rdar://138838506

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77721,2024-11-19T22:40:42Z,2024-11-21T20:35:04Z,rintaro,6,2,1,122,5,1,1,[],1062.0,0,165262.0,0,0,0,0,3137986.45754,,7,1,0,False,['rintaro'],"https://github.com/swiftlang/swift-syntax/pull/2900
@swift-ci Please smoke test @swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2900
@swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2900
@swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2900
@swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2900
@swift-ci Please smoke test",,"Use `ExportedSourceFile.sourceLocationConverter.lineTable.virtualFiles` to populate the information in `swift::SourceManger` and `swift::SourceFile` when ""parsing"" with ASTGen
","This looks unused? ```suggestion
  buffer.deinitialize()
  buffer.deallocate()
```"
77375,2024-11-04T22:57:36Z,2024-11-08T22:48:58Z,Steelskin,5,0,1,334,2,0,0,[],31.0,0,1459390.0,0,0,0,0,3138845.308831,,1,1,0,False,"['compnerd', 'Steelskin']",@compnerd PTAL @swift-ci please smoke test @swift-ci please smoke test Linux platform @swift-ci please smoke test @swift-ci please test Linux platform,,"This adds CMake cache files for Darwin builds to be used for alternative Swift toolchain builds, similar to the other files in the `cmake/caches` folder.",
77666,2024-11-16T23:04:32Z,2024-11-21T20:15:59Z,hamishknight,3,0,3,551,29,2,2,[],54797.0,0,421890.0,0,0,0,0,3139129.441674,,17,3,0,False,['hamishknight'],"https://github.com/swiftlang/llvm-project/pull/9618

@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9618

@swift-ci please test source compatibility https://github.com/swiftlang/llvm-project/pull/9618

@swift-ci please testNice cleanup, no notes","Nice cleanup, no notes","Rather than exposing an `addFile` member on ModuleDecl, have the `create` members take a lambda that populates the files for the module. Once module construction has finished, the files are immutable.",
77708,2024-11-19T19:39:35Z,2024-11-21T20:14:25Z,meg-gupta,2,0,5,589,93,2,2,[],40.0,0,174890.0,0,0,0,0,3139227.487378,,1,5,0,False,['meg-gupta'],@swift-ci test @swift-ci test macOS Platform,,"[SE-0446](https://swiftlang.github.io/swift-evolution/#?proposal=SE-0446) is accepted - Promote NonescapableTypes feature into a LANGUAGE_FEATURE. Move lifetime dependence support under a new experimental flag.

LifetimeDependence feature flag ensures Span's use of lifetime features are appropriately printed and work with older compilers which don't understand them yet.

Cherry pick of https://github.com/swiftlang/swift/pull/77637",
68930,2023-10-03T02:42:05Z,2023-10-04T14:31:22Z,jckarter,4,0,1,114,10,0,0,[],13.0,0,35917577.0,0,0,0,0,3140791.48642,,4,1,0,False,['jckarter'],@swift-ci Please test source compatibility @swift-ci Please test source compatibility @swift-ci Please test source compatibility @swift-ci Please test,,"This looks like it was never properly implemented, since when we generate the memberwise initializer for the struct in SILGen, it incorrectly tries to apply the entire initializer expression to each variable binding in the pattern, rather than destructuring the result and pattern-matching it to the variables. Since it never worked it doesn't look like anyone is using this, so let's put up an error saying it's unsupported until we can implement it properly. Add `StructLetDestructuring` as an experimental feature flag so that tests around the feature for things like module interface printing can still work.

Fixes https://github.com/apple/swift/issues/68915 | rdar://116343732.
",
77710,2024-11-19T19:55:26Z,2024-11-21T06:38:02Z,nkcsgexi,8,2,4,118,11,2,0,[],22.0,0,171421.0,0,0,0,0,3141746.839908,,7,4,0,False,"['DougGregor', 'nkcsgexi']","@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test > IIRC, the module trace format is fairly extensible. Should we extend that file rather than threading another trace file through the driver and frontend?

We might be just using the existing module trace file for these fine-grained symbol dependencies as well, yeah. However, we've heard one motivation for keeping them separate so that we could to keep each of these trace file relatively small for downloading/post-processing.  > We might be just using the existing module trace file for these fine-grained symbol dependencies as well, yeah. However, we've heard one motivation for keeping them separate so that we could to keep each of these trace file relatively small for downloading/post-processing.

Neither this data nor fine-grained API dependencies for non-ObjC APIs will be small for any sizable module. I can see an argument for keeping the existing module trace file coarse-grained (module-level info) and introducing one new file for fine-grained dependencies. But I think we shouldn't go and have to add a third kind of tracing file. My recommendation is to make this PR create a ""fine grained module trace"" file, which initially has information about ObjC selectors but can grow over time to include more fine-grained dependencies for non-ObjC APIs, similar to what we do for incremental builds of a single module. That's a reasonable suggestion. Will reposition this file to be a more general-purposed one! @swift-ci please smoke test @swift-ci please smoke testIIRC, the module trace format is fairly extensible. Should we extend that file rather than threading another trace file through the driver and frontend?","IIRC, the module trace format is fairly extensible. Should we extend that file rather than threading another trace file through the driver and frontend?","To simplify post-processing of these collected ObjC message traces, this PR teaches the compiler to atomically append the content of ObjC message trace to a file location provided by the build environment, instead of emitting multiple files.

",Can you remove the OBJC from this and use FINE_GRAINED instead? Will fix!
77765,2024-11-21T12:16:34Z,2024-11-21T19:01:53Z,hamishknight,2,0,3,231,7,1,1,[],7.0,0,24322.0,0,0,0,0,3143578.911643,,4,3,0,False,['hamishknight'],@swift-ci please test @swift-ci please test source compatibility,,"This matches the double curry thunk logic and ensures that the resulting autoclosure matches the expected type of the reference, avoiding mismatches with parent expressions. This requires fixing concurrency checking such that it respects global actors on autoclosure thunks, but while here it seems like it ought to respect them on autoclosures more generally.

rdar://140212823",
77755,2024-11-21T00:52:25Z,2024-11-21T18:16:29Z,rintaro,4,3,1,46,3,4,3,[],9.0,0,62645.0,0,0,0,0,3146305.803041,,2,1,0,False,"['DougGregor', 'slavapestov', 'rintaro']",@swift-ci Please smoke test Thank you! I believe this also fixes rdar://129883075 Thank you! @swift-ci Please smoke test,,"Adjust the valid position checking and special handle EOF position. If the requested location is at EOF, use the last token, but still emit the diagnostics at the specificied location.

rdar://129883075 rdar://138426038
","I assume you want `viewMode: .sourceAccurate` here because you’d want to return the last token that actually has a source code representation, not a missing token. It's `.all` because, for example, when the syntax is a `CodeBlockSyntax` with missing `}`, the compiler would diagnose at the _end_ of the `CodeBlockSyntax` which is probably a `.missing` token. I don't think that would happen at this point, but after correctly implementing macro expansion buffer parsing in ASTGen, it might.

That being said, it doesn't actually matter anyway, since we specify `position`,  `node` only used to get the `root` syntax from it. Ah, good point. I agree that `.all` is the correct choice then."
77605,2024-11-14T00:39:38Z,2024-11-21T17:59:52Z,jckarter,3,0,1,414,7,0,0,[],17.0,0,667214.0,0,0,0,0,3147304.027134,,1,1,0,False,['jckarter'],@swift-ci Please test @swift-ci Please test @swift-ci Please test,,"Noncopyable types may have user-defined code in their `deinit`s that requires passing the type's generic parameters, so a box for a captured noncopyable type needs to capture the generic environment even when the captured type is fixed- layout. Fixes rdar://138958210.
",
77559,2024-11-12T17:24:01Z,2024-11-13T16:45:01Z,egorzhdan,6,0,1,5,2,1,1,['c++ interop'],13.0,0,779183.0,0,0,0,0,3147873.546933,,2,1,0,False,"['egorzhdan', 'hjyamauchi']","@swift-ci please test @swift-ci please benchmark @swift-ci please test Linux ### Performance (x86_64): -O

**Regression**                         | **OLD** | **NEW** | **DELTA** | **RATIO**
:---                                   | ---:    | ---:    | ---:   | ---:     
Array.removeAll.keepingCapacity.Object | 5.995   | 7.483   | +24.8% | **0.80x (?)**
CharacterLiteralsLarge                 | 54.45   | 58.821  | +8.0%  | **0.93x (?)**
&nbsp; | | | | 
**Improvement**                        | **OLD** | **NEW** | **DELTA** | **RATIO**
Dictionary4                            | 281.714 | 209.667 | -25.6% | **1.34x (?)**
Dictionary4OfObjects                   | 309.25  | 230.667 | -25.4% | **1.34x (?)**
FlattenListFlatMap                     | 4419.0  | 3893.0  | -11.9% | **1.14x (?)**
ArrayInClass                           | 196.083 | 174.296 | -11.1% | **1.12x (?)**
DistinctClassFieldAccesses             | 37.448  | 33.899  | -9.5%  | **1.10x (?)**
ArraySetElement                        | 296.0   | 271.286 | -8.3%  | **1.09x (?)**
PrefixWhileSequence                    | 194.0   | 180.667 | -6.9%  | **1.07x (?)**

### Code size: -O

**Regression** | **OLD** | **NEW** | **DELTA** | **RATIO**
:---           | ---:  | ---:  | ---:  | ---:   
CxxVectorSum.o | 18128 | 18496 | +2.0% | **0.98x**
CxxSpanTests.o | 15634 | 15810 | +1.1% | **0.99x**

### Performance (x86_64): -Osize

**Regression**                         | **OLD**  | **NEW**  | **DELTA** | **RATIO**
:---                                   | ---:     | ---:     | ---:   | ---:     
CxxSpanTests.map                       | 377.4    | 535.667  | +41.9% | **0.70x (?)**
Array.removeAll.keepingCapacity.Object | 5.981    | 7.197    | +20.3% | **0.83x (?)**
ObjectiveCBridgeStubDateAccess         | 130.733  | 152.538  | +16.7% | **0.86x (?)**
Data.hash.Empty                        | 52.261   | 58.789   | +12.5% | **0.89x (?)**
CxxSpanTests.filter                    | 522.75   | 585.667  | +12.0% | **0.89x (?)**
FlattenListFlatMap                     | 3631.0   | 3996.0   | +10.1% | **0.91x (?)**
&nbsp; | | | | 
**Improvement**                        | **OLD**  | **NEW**  | **DELTA** | **RATIO**
Dictionary4                            | 208.75   | 163.556  | -21.6% | **1.28x (?)**
CxxSpanTests.reduce                    | 195.667  | 165.636  | -15.3% | **1.18x (?)**
CxxSpanTests.for.loop                  | 195.571  | 170.1    | -13.0% | **1.15x (?)**
StrComplexWalk                         | 3403.333 | 3004.286 | -11.7% | **1.13x (?)**
Dictionary4OfObjects                   | 239.0    | 218.429  | -8.6%  | **1.09x (?)**

### Code size: -Osize

**Regression** | **OLD** | **NEW** | **DELTA** | **RATIO**
:---           | ---:  | ---:  | ---:  | ---:   
CxxVectorSum.o | 16529 | 16913 | +2.3% | **0.98x**
CxxSpanTests.o | 13778 | 14089 | +2.3% | **0.98x**

### Performance (x86_64): -Onone

**Improvement**                     | **OLD**   | **NEW** | **DELTA** | **RATIO**
:---                                | ---:      | ---:    | ---:   | ---:     
PointerArithmetics                  | 56633.333 | 50175.0 | -11.4% | **1.13x (?)**
ObjectiveCBridgeStubNSDateRefAccess | 4311.0    | 3972.0  | -7.9%  | **1.09x (?)**
ArrayAppendGenericStructs           | 1240.0    | 1145.0  | -7.7%  | **1.08x (?)**
DataSubscriptMedium                 | 63.167    | 58.882  | -6.8%  | **1.07x (?)**

### Code size: -swiftlibs
 The benchmarks seem to be noisy. The only performance regressions are in CxxSpanTests.map and CxxSpanTests.filter. We can provide overloads `CxxConvertibleToCollection.map` and `CxxConvertibleToCollection.filter` to mitigate that. @egorzhdan it seems like this PR/commit may be related to the linker issue I'm seeing: https://github.com/swiftlang/swift/issues/77756 WDYT?LGTM!",LGTM!,"This enables library evolution for the two libraries that form the Swift overlay for the C++ standard library.

rdar://129169673

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77769,2024-11-21T13:22:21Z,2024-11-21T17:09:33Z,Xazax-hun,1,0,1,37,3,1,1,['c++ interop'],19.0,0,13633.0,0,0,0,0,3150324.17405,,4,1,0,False,['Xazax-hun'],@swift-ci please smoke testLGTM!,LGTM!,Non-escapable types are now enabled by default. Use the new lifetime dependence feature flag to gate interpreting lifetime annotations on the C++ side and add tests to make sure we get the expected diagnostics when the feature flag is off.,
77759,2024-11-21T08:39:12Z,2024-11-21T16:02:10Z,kovdan01,3,0,1,10,2,1,1,"['test suite', 'AutoDiff']",50.0,0,26579.0,0,0,0,0,3154367.429465,,0,1,0,False,"['kovdan01', 'asl']",Tagging @asl  @swift-ci please test Tagging @JaapWijnenThanks!,Thanks!,"A couple of tests were disabled due to crash described in https://github.com/swiftlang/swift/issues/55492. Now the crash is fixed and the issue is resolved, so tests could be enabled.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77637,2024-11-15T04:47:00Z,2024-11-19T08:25:21Z,meg-gupta,12,4,5,591,93,3,1,[],34744.0,0,558325.0,1,0,0,0,3154954.849627,,21,5,0,False,"['ahoppen', 'meg-gupta']","@swift-ci test  @swift-ci test Could you also enable the feature in swift-syntax by default? @swift-ci test  @swift-ci test preset=oss-swift-test-stdlib-with-toolchain
@swift-ci please test with toolchain and preset @swift-ci test preset=oss-swift-test-stdlib-with-toolchain
@swift-ci please test with toolchain and preset @swift-ci test @swift-ci test @swift-ci test @swift-ci testNo concerns from me!",No concerns from me!,"SE-0446 is accepted - Promote `NonescapableTypes` feature into a LANGUAGE_FEATURE. Move lifetime dependence support under a new experimental flag.

`LifetimeDependence` feature flag ensures Span's use of lifetime features are appropriately printed and work with older compilers which don't understand them yet.
","My expectation is that it is not safe to remove `NonescapableTypes` here until all older compilers we support have it enabled by default. Until then, `-enable-experimental-feature NonescapableTypes` needs to appear in the `.swiftinterface` so that the older compilers allow use of non-escapable types in the code in the interface. Late to the party, but is there a reason why we kept this line? See my resolved comment: https://github.com/swiftlang/swift/pull/77637#discussion_r1844274996 Ah, I see, thanks!
"
77629,2024-11-14T21:58:11Z,2024-11-21T00:31:47Z,asl,11,0,1,137,2,1,1,[],8.0,0,581071.0,0,0,0,0,3156738.308743,,1,1,0,False,"['eeckstein', 'asl']","@swift-ci please test @nate-chandler Thanks! @swift-ci please smoke test @asl Please always run the benchmarks for such optimizer changes (""@swift-ci benchmark"") > @asl Please always run the benchmarks for such optimizer changes (""@swift-ci benchmark"")

Oh, thanks! Sorry, I completely forgot about this. Does it make sense to run it post-commit? Is there any way to do this via CI? > Is there any way to do this via CI?

I don't think so. You could run the benchmarks locally I don't think that this change will have any significant impact on the benchmarks. But it would have beed good to double check.

Do you have a motivating test case/benchmark for this change? > I don't think so. You could run the benchmarks locally

I think I can open an opposite PR and run benchmarks there. > Is there any way to do this via CI?

What you could do is to create a PR which reverts this change and run the benchmarks on that > Do you have a motivating test case/benchmark for this change?

Yes, though direct case is autodiff-related (but this is how I noticed the issue, I believe the case is generic, I just need to craft standalone swift reproducer w/o autodiff). See https://github.com/swiftlang/swift/issues/77651 (if we'd explicitly manage the lifetime of closures via additional function, then we left with this inliner case). Benchmarking results are in https://github.com/swiftlang/swift/pull/77761#issuecomment-2490970699 (note that they are backwards)LGTM",LGTM,Closure specialization might create functions with lots of arguments. Increase inlining benefits for functions with more than 5 arguments and / or results. We assume that each argument beyond these 5 would be passed on stack and therefore would incur a pair of load and store.,
77772,2024-11-21T15:06:48Z,2024-11-21T15:07:36Z,al45tair,0,0,1,5,1,0,0,[],,0,48.0,0,0,0,0,3157644.391463,,2,1,0,False,[],,,"This test is buggy and fails under ASAN (which detects the bug). See #77771.
",
77714,2024-11-19T20:44:07Z,2024-11-21T11:45:09Z,eeckstein,3,14,1,18590,12,4,1,[],81305.0,0,150707.0,0,0,0,0,3159548.708381,,6,1,0,False,"['rjmccall', 'eeckstein']","I love the SIL documentation restructuring, that seems great.

Having a SIL printing mode that suppresses all the theoretically-helpful comments feels like a totally reasonable feature, albeit one that should be added in a separate PR from the docs rework.  I don't like the idea of having multiple dialects of SIL itself, though — if we agree that this is a better way to write SIL, we should just change SIL.  (We can probably write a script to mass-update the tests.)

The idea of removing types from printed operands is interesting. A lot of instructions already avoid operand types when they're redundant with other information in the instruction, and that's something we could pretty easily just do more of without dramatically changing how we parse SIL. If we want to do it in general by propagating type information from the value definition, we're going to run into the problem that basic blocks are not required to appear in an order consistent with dominance — SILGen usually (always?) emits them this way, but CFG optimizations can definitely mess that up.  The general solution to that problem is to introduce a parse tree, although I suppose we could also just recognize that we're processing out of order and skip tokens until we reach the next block. Or we could make operand types *optional* and then only print them when blocks are rendered out of order?  Or maybe when we've already rendered that instruction — the difference being that we'd sometimes still print operand types when rendering a subset of the function, e.g. when dumping a single instruction or basic block. > one that should be added in a separate PR from the docs rework.

Yes, that makes sense. I removed the SIL printing commit and will put it into a separate PR.


 @swift-ci smoke testJust some small flow comments. 💯 on
- -emit-pure-sil
- documentation structure
- OSSA examples (they look familiar, good to have them in the docs)

I don't think we need to worry about typos here or there in this PR","Just some small flow comments. 💯 on
- -emit-pure-sil
- documentation structure
- OSSA examples (they look familiar, good to have them in the docs)

I don't think we need to worry about typos here or there in this PR","The main changes in the documentation are:

* Created a new directory `docs/SIL` and  moved all SIL-related files into this directory.

* Converted `rst` files to markdown.

* Extracted sections from `SIL.md` which go into very much detail - including the instruction reference - into separate files: `Types.md`, `Ownership.md`, `FunctionAttributes.md`, `Instructions.md`. Those files are referenced from `SIL.md` at the relevant places.

* Rewrote and updated the OSSA part in `SIL.md`

* Removed a few sections, which are not relevant anymore, like ""Value dependency"" (which is replaced by ownership concepts).

* Fixed and improved a lot of small things.
","-> By using these ownership invariants, SIL in OSSA form can be validated statically as not containing use after free errors or leaked memory. This allows for the compiler at compile time to detect bugs in optimization passes and in SILGen code emitted by the swift frontend. -> In contrast, a non-trivial type requires extra code to be emitted to perform copies and destroys. Some common reasons why a type is non-trivial are:

1. The type (or a sub-type contained within it) contains a class reference which requiring retain/release operations.
2. The type contains an address only type which needs to be copied using addresses.
3. The type is a non-copyable type with a custom `reinit` that must be run when a value of such a type is destroyed. In contrast, references to literal constants, functions, global variables, or other entities are introduced as the results of  specialized instructions such as `integer_literal`, `function_ref`, and `global_addr`. e.g. -> e.x.

e.g. means that is... I think you mean for example which is e.x. I find this part confusing. It feels like this bullet point and the forwarding one should be a subtitle. Might be useful to talk about the ownership lattice and how they merge. ""the _forward-extended_ lifetime of the value"". Or something like that.

On another note, I like the diagram below. I think this is another case where you mean e.x. instead of e.g.  Maybe ignore the merging comment I made, since we talk about it here. e.g. -- for example ( https://en.wiktionary.org/wiki/e.g. )
i.e. -- that is ( https://en.wiktionary.org/wiki/i.e. ) I'm alarmed to see `e.x.` anywhere in our docs. what is that? I reworded it a bit As you said, that's in Ownership.md now A forward-extended lifetime does not refer to a single value. It involves multiple values, even multiple definitions (producers).
I think this is important to know and I added a paragraph+example for this."
77746,2024-11-20T20:27:22Z,2024-11-21T11:48:04Z,egorzhdan,4,0,1,42,2,1,1,['c++ interop'],6.0,0,55245.0,0,0,0,0,3169615.816053,,2,1,0,False,['egorzhdan'],@swift-ci please test @swift-ci please benchmark @swift-ci please test @swift-ci please benchmarkLGTM!,LGTM!,"This is a requirement for being able to use the CxxStdlib overlay with a C++ standard library which is not the platform default, specifically libc++ on Linux.

The module would get rebuilt from its textual interface (`CxxStdlib.swiftinterface`) by the compiler whenever a custom C++ stdlib is used. Since the mangled names of C++ stdlib symbols differ across implementations (libc++ vs libstdc++), a Swift program that uses these overlay functions would fail to link, unless the definitions of these functions are available.

rdar://138838506

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
76743,2024-09-27T04:55:24Z,2024-11-21T11:05:26Z,asl,12,0,1,111,2,1,1,[],7.0,0,4774203.0,0,0,0,0,3172175.927019,,3,1,0,False,"['aschwaighofer', 'asl', 'asavonic']","@swift-ci please test @asavonic Will you please review? preset=buildbot,tools=RA,stdlib=RD,test=non_executable
@swift-ci Please test with preset macOS Thank you! Looks much better now. @aschwaighofer @rjmccall Will you please take a look? @rjmccall @eeckstein @aschwaighofer Friendly ping Another ping. Thanks! @DougGregor @tkremenek Is there anything that could be done to get this reviewed? Sorry that got lost. LGTM @aschwaighofer @drexin Thanks! @swift-ci please smoke test @swift-ci please smoke test windows platformLGTM. @aschwaighofer any additional thoughts?",LGTM. @aschwaighofer any additional thoughts?,"Simplify the code while here.

This refactors some implementation bits of https://github.com/swiftlang/swift/pull/71653 (and effectively reverts some parts of it). In particular, it implements the coroutine call in terms of CallEmission rather than relying on implementation details of CallEmission.",
77729,2024-11-20T07:52:37Z,2024-11-21T06:16:50Z,atrick,5,0,2,44,3,0,0,[],10.0,0,81804.0,0,0,0,0,3188344.067809,,2,2,0,False,"['atrick', 'meg-gupta']","@swift-ci test `BitwiseCopyable` appears to be broken for `UnsafeBufferPointer`. I'm seeing this diagnostic, which never triggers for BitwiseCopyable types:
```
error: invalid use of borrow dependence with consuming ownership
extension Swift.Span where Element : ~Copyable {
   #if compiler(>=5.3) && $LifetimeDependence
   @lifetime(borrow buffer)
                    `- error: invalid use of borrow dependence with consuming ownership
   @_alwaysEmitIntoClient public init(_unsafeElements buffer: Swift.UnsafeBufferPointer<Element>) {
``` @swift-ci test LGTM @swift-ci smoke test windows",,"Without this fix, the standard library source will break with shortly upcoming compiler toolchain.

Never explicitly copy a pointer before passing it to an argument that is the source of a lifetime dependency on the function's return value. That will always raise a diagnostic error: depending on a temporary value is not the same as depending on a variable. A temporary value's scope is only the current expression.

Also avoid using ownership modifiers for UnsafePointer. We don't want to treat them like noncopyable types. They are simply values. Treating them like noncopyable types creates a lot of overhead in the representation, which is likely to interfere with diagnostics and optimization.",
77741,2024-11-20T19:39:09Z,2024-11-21T00:11:15Z,tshortli,1,0,2,43,5,1,1,[],9.0,0,37050.0,0,0,0,0,3190706.073127,,4,2,0,False,['tshortli'],"@swift-ci please smoke testLGTM, thank you","LGTM, thank you","As proposed in the amendment described on the [forums](https://forums.swift.org/t/downgrade-upcoming-feature-is-already-enabled-error-to-a-warning/75762), only warn about explicitly enabled features that are already enabled by the language mode.",
77713,2024-11-19T20:37:54Z,2024-11-21T08:46:37Z,jakepetroules,2,0,1,6,1,1,1,[],27.0,0,130125.0,0,0,0,0,3180506.1531,,2,1,0,False,['jakepetroules'],"swiftlang/swift-driver#1731
swiftlang/swift#77713

@swift-ci please test swiftlang/swift-driver#1731
swiftlang/swift#77713

@swift-ci please test",,Following swiftlang/swift-driver#1731,
77742,2024-11-20T19:47:04Z,2024-11-21T03:02:42Z,tshortli,4,0,2,43,5,1,1,[],11.0,0,36572.0,0,0,0,0,3190711.627721,,1,2,0,False,"['DougGregor', 'tshortli']","@swift-ci please test Are you missing a commit from https://github.com/swiftlang/swift/pull/77741 ? This only has test changes Oops, fixed. Thanks! @swift-ci please test",,"As proposed in the amendment described on the [forums](https://forums.swift.org/t/downgrade-upcoming-feature-is-already-enabled-error-to-a-warning/75762), only warn about explicitly enabled features that are already enabled by the language mode.

Cherry-pick of https://github.com/swiftlang/swift/pull/77741.",
77724,2024-11-19T23:43:25Z,2024-11-21T05:14:24Z,compnerd,2,0,1,76,3,1,1,[],61648.0,0,106261.0,0,0,0,0,3193241.644956,,1,1,0,False,['compnerd'],"This doesn't follow best practices for CMake by putting everything into a single CMakeLists.txt, but this project is relatively small, so this might be a good compromise. @swift-ci please smoke test",,This addition will allow us to cross-compile swift-inspect to Windows ARM64. Enabling the Windows ARM64 build permits the toolchain to become more similar across the architectures.,
77707,2024-11-19T19:28:35Z,2024-11-20T23:56:34Z,atrick,4,0,2,34,2,0,0,[],22.0,0,111570.0,0,0,0,0,3203222.661456,,5,2,0,False,['atrick'],"@swift-ci test @swift-ci test @meg-gupta note that I'm getting lifetime dependence from a new part of the type checker:
`AbstractStorageDecl::visitExpectedOpaqueAccessors`.
I have no idea if there are any rules that need to be followed in this respect. @swift-ci smoke test",,"This applies to all _read accessors whose result depends on a borrow of self. In this case, the coroutine defines the borrow scope, and the ~Escapable property value can only be used within that scope. This makes it impossible to synthesize a getter. Returning the ~Escpable value from the getter would always escape the coroutine.",
77735,2024-11-20T17:24:05Z,2024-11-20T21:33:58Z,rintaro,1,0,1,18,1,1,1,[],8.0,0,30374.0,0,0,0,0,3205490.649303,,3,1,0,False,['rintaro'],@swift-ci Please smoke test,,"These are ""simple"" attributes.",
77738,2024-11-20T18:33:14Z,2024-11-21T00:48:09Z,kastiglione,5,0,1,32,12,1,1,[],16.0,0,22496.0,0,0,0,0,3209219.807524,,2,1,0,False,"['DougGregor', 'kastiglione']","@swift-ci test > Can we also remove the DebugDescriptionMacro feature entirely?

Ideally, yes. However I was wondering: If I remove the feature, and some build references, will there be an error for referencing a non-existent feature? > > Can we also remove the DebugDescriptionMacro feature entirely?
> 
> Ideally, yes. However I was wondering: If I remove the feature, and some build references, will there be an error for referencing a non-existent feature?

It's not an error to reference a non-existent feature, and hasFeature on it doesn't have much meaning for user code, so I think this one might actually be safe to remove. Maybe do that in a separate PR Just In Case. I realized I can easily answer my own question 🤦 – I will remove the feature altogether in a separate PR. Removing the feature: https://github.com/swiftlang/swift/pull/77739Thanks for cleaning these up. Can we also remove the DebugDescriptionMacro feature entirely?",Thanks for cleaning these up. Can we also remove the DebugDescriptionMacro feature entirely?,"The `DebugDescription` macro has been accepted. Additionally, the `DebugDescriptionMacro` feature was not providing conditional declaration as I originally intended. References to the feature are not needed and can be removed.",
77728,2024-11-20T03:17:22Z,2024-11-21T00:43:43Z,slavapestov,2,0,8,247,11,1,0,[],55125.0,0,77813.0,0,0,0,0,3208854.950359,,7,8,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please test source compatibilityLooks reasonable!,Looks reasonable!,"We used `operator[]` to both insert and find vertices in the ConstraintGraph. Split it up into two operations to better enforce invariants.

Also, when freeing a vertex, we don't have to clear it -- assuming all changes were undone correctly, then at the time we're ready to undo the creation of the vertex, it should be empty already. Just assert instead.

Finally, `ConstraintGraphNode::Bindings` doesn't need to be Optional anymore because we never reset it. Once again, it should be empty when we free the node.",
77723,2024-11-19T22:48:51Z,2024-11-21T00:43:32Z,slavapestov,2,0,2,193,10,1,1,[],72001.0,0,93281.0,0,0,0,0,3209499.920095,,4,2,0,False,['slavapestov'],@swift-ci Please test source compatibility @swift-ci Please smoke test,,"This PR adds some statistical counters for counting trail steps, and makes improvements to the flags:
- The scope threshold was hard-coded at 1 million, now it can be set with `-Xfrontend -solver-scope-threshold=...`. Setting it to 0 disables the limit entirely.
- Passing `-Xfrontend -solver-expression-time-threshold=0` will now disable the timer, instead of setting it to 0 so it always fails.
- There is a new `-Xfrontend -solver-trail-threshold=...` flag. This is set to 64 million by default. This counts steps in the trail so it's more fine-grained than scopes. As with the other two, it can be set to 0 to disable the limit.

My goal is to disable the expression timer by default. Right now it is set to 10 minutes, so in practice 'too complex' expressions are caught by the solver memory or scope thresholds. Since `llvm::TimeRecord` class collects a lot of information, we spend a lot of CPU time just querying system calls for a pointless timer we don't need.

The trail check is almost good enough to replace the timer, except it doesn't quite replicate the behaviors of the existing timer with conjunctions and closures, so I'll look at that next.

This will address rdar://109613871 once the timer is turned off by default.",
77734,2024-11-20T17:24:00Z,2024-11-20T23:01:08Z,compnerd,2,0,1,1,1,0,0,[],12.0,0,20230.0,0,0,0,0,3215642.170868,,0,1,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please build toolchain Windows platform,,This property was unused and has been removed from the WiX rules as of swiftlang/swift-installer-scripts#347. Simplify the invocation.,
77712,2024-11-19T20:21:07Z,2024-11-20T23:01:34Z,compnerd,6,0,1,5,1,2,2,[],14.0,0,96029.0,0,0,0,0,3215616.22889,,1,1,0,False,['compnerd'],@swift-ci please test @swift-ci please test Windows platform @swift-ci please test Linux platform @swift-ci please test Windows platform @swift-ci please test Linux platform @swift-ci please test macOS platform,,`-fno-split-cold-code` should no longer be needed after llvm/llvm-project#99759. Remove the use of unsafe flags.,
77736,2024-11-20T18:11:26Z,2024-11-20T21:59:29Z,tshortli,1,0,4,34,6,1,1,[],8.0,0,16298.0,0,0,0,0,3216730.143052,,0,4,0,False,['tshortli'],@swift-ci please smoke test,,"- Use a consistent definition of the ""future"" availability triple and add support for visionOS.
- Remove some out of date TODOs.
- Update IRGen tests to avoid direct use of `99.99` triples and use relevant Swift release target triple substitutions where possible.",
77711,2024-11-19T20:04:44Z,2024-11-20T21:45:05Z,hamishknight,1,0,1,77,3,1,1,[],54270.0,0,92424.0,0,0,0,0,3220206.415036,,2,1,0,False,['hamishknight'],@swift-ci please test,,"Make sure we only attempt to query the concrete type for `Self` for a constrained protocol extension.

rdar://138774888
",
77715,2024-11-19T20:59:27Z,2024-11-20T20:58:02Z,nate-chandler,6,0,1,59,2,1,1,[],42.0,0,88073.0,0,0,0,0,3221274.668993,,1,1,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark @swift-ci please test linux platform @swift-ci please test windows platform @swift-ci please test macos platformSeems reasonable :),Seems reasonable :),"When replacing a `begin_apply` with an allocation, replace uses of the old allocation with uses of the new.
",
77720,2024-11-19T22:25:51Z,2024-11-20T17:26:48Z,tshortli,1,0,7,250,11,0,0,[],10451.0,0,68461.0,0,0,0,0,3235704.379961,,5,7,0,False,['tshortli'],@swift-ci please test,,This utility duplicated logic that is now meant to be encapsulated by `getUnsatisfiedAvailabilityConstraint()`. Update `init(rawValue:)` synthesis to use `getUnsatisfiedAvailabilityConstraint()` and improve test coverage.,
77706,2024-11-19T19:20:04Z,2024-11-20T17:09:46Z,xedin,4,0,1,37,2,1,1,[],485.0,0,78582.0,0,0,0,0,3236730.493032,,5,1,0,False,['xedin'],@swift-ci please test @swift-ci please smoke test @swift-ci please test Linux platform @swift-ci please test,,"Fixes an issue where parent type wasn't set for qualified ObjC pointers which leads to crashes during Sema because non-pointer uses are imported correctly.

Resolves: rdar://102564592

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77692,2024-11-18T22:45:36Z,2024-11-20T16:57:19Z,cyndyishida,8,0,3,61,10,1,1,[],5089.0,0,152321.0,0,0,0,0,3237060.049046,,3,3,0,False,"['egorzhdan', 'cyndyishida']","@swift-ci  please test @swift-ci please test @swift-ci please test @swift-ci please test @egorzhdan Do you know if there are additional changes needed for disabling i386-watch-sim for the `Cxx` & `Cxxstdlib` modules? @swift-ci please test Going to merge this, the macOS log shows builds of x86_64-watch-sim and nothing for `i386` @cyndyishida there shouldn't be any extra changes required for Cxx and CxxStdlib, removing i386 from `SUPPORTED_WATCHOS_SIMULATOR_ARCHS` should be enough",,"In Xcode16 it is not supported.

resolves: rdar://138924057",
77689,2024-11-18T21:54:59Z,2024-11-20T16:44:49Z,JanBaig,2,0,1,39,2,1,1,[],71658.0,0,154190.0,0,0,0,0,3238229.439088,,2,1,0,False,['xedin'],@swift-ci please test @swift-ci please test Windows platform,,"
This commit fixes a compiler crash that occurred when dealing with external property wrappers that had a missing wrappedValue init when they were applied onto parameters.

Resolves: #65500 

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77592,2024-11-13T19:30:14Z,2024-11-20T16:44:19Z,xedin,6,0,1,64,2,0,0,[],7.0,0,594845.0,0,0,0,0,3238259.649591,,2,1,0,False,['xedin'],@swift-ci please test @swift-ci please test @swift-ci please test source compatibility @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,"…double property/variable

Situations like:
```
  let _: Double = <<CGFloat>>
  <var/property of type Double> = <<CGFloat>>
```

Used to be supported due to an incorrect fix added in
diagnostic mode. Lower impact here means that right-hand
side of the assignment is allowed to maintain CGFloat
until the very end which minimizes the number of conversions
used and keeps literals as Double when possible.

Resolves: rdar://139675914

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77678,2024-11-18T14:17:17Z,2024-11-20T13:59:00Z,Xazax-hun,1,5,1,72,2,2,1,['c++ interop'],26.0,0,171705.0,0,0,0,0,3248177.347476,,4,1,0,False,['Xazax-hun'],"@swift-ci please smoke testI only have one question, otherwise LGTM","I only have one question, otherwise LGTM","rdar://140115862
","I'm wondering if this would work with variadic templates, e.g. `std::tuple`? But that's out of scope of this patch 🙂 Should this loop stop once `rec->isTranslationUnit()`? Good point! I think this would not work for that. I'd address that in a follow-up PR.  When `rec->isTranslationUnit()` is true, `rec->getParent()` returns null and the loop terminates. That being said, I just realized `rec` is a bit confusing name here.  I see, that makes sense."
77709,2024-11-19T19:45:50Z,2024-11-20T06:22:50Z,gottesmm,6,0,5,335,9,0,0,[],76.0,0,62149.0,0,0,0,0,3251621.684761,,6,5,0,False,['gottesmm'],@swift-ci smoke test @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test Had to restart testing due my needing a specific fix that when I original smoke tested had not been committed yet.,,"I am preparing a larger patch that actually implements the experimental feature that allows for nonisolated functions to inherit isolation from their caller.

To make the larger patch easier to review, I am peeling the onion by slicing off some refactoring commits that it depends on for early testing/landing.",
77174,2024-10-22T21:01:27Z,2024-11-20T13:00:53Z,slavapestov,2,3,5,198,7,2,1,[],2438602.0,0,2476766.0,0,0,0,0,3251668.538214,,4,5,0,False,['slavapestov'],"@swift-ci Please test source compatibility @swift-ci Please smoke testLGTM! I feel like dealing with constraints after binding a type variable is an overkill, we might get away with keeping the set as is but using simplifyType during BindingSet construction because all of the logic to compute flags (i.e. pontential incomplete, literal, delayed etc.) moved there.","LGTM! I feel like dealing with constraints after binding a type variable is an overkill, we might get away with keeping the set as is but using simplifyType during BindingSet construction because all of the logic to compute flags (i.e. pontential incomplete, literal, delayed etc.) moved there.","This was a loose end from my SolverScope refactoring. We would undo all fixed type variable bindings first and then undo the graph updates, because the graph updates were recorded in the wrong order with respect to type variable bindings. By refactoring the logic here a little we can undo changes in the order they were recorded, eliminating a second pass over the trail.",Looks like the logic in `retractFromInference(Type)` and `introduceToInference` could be unified into `a method i.e. `updateAfterBind` that would accept a callback that either introduces or retracts constraints... Good idea. Done!
77727,2024-11-20T02:47:13Z,2024-11-20T09:55:15Z,felipepiovezan,1,0,4,109,12,1,1,[],47.0,0,25682.0,0,0,0,0,3262806.539887,,2,4,0,False,['felipepiovezan'],@swift-ci test,,"This swift branch was not cut in sync with llvm's stable/20240723,  which contains patches that depend on the missing commits being cherry-picked here.",
77690,2024-11-18T22:25:23Z,2024-11-20T05:38:43Z,slavapestov,1,0,1,22,2,1,1,[],95373.0,0,112401.0,0,0,0,0,3278199.130278,,2,1,0,False,['slavapestov'],@swift-ci Please smoke test,,Fixes rdar://139238003.,
77657,2024-11-15T23:46:32Z,2024-11-19T23:03:31Z,kubamracek,5,0,2,61,5,1,1,[],91.0,0,343020.0,0,0,0,0,3301911.867555,,5,2,0,False,"['kubamracek', 'benrimmington', 'rauhul']","thanks! @swift-ci please test `StaticBigInt` will be limited by issue #75652. @swift-ci please test > `StaticBigInt` will be limited by issue #75652.

Good point. Let's use https://github.com/swiftlang/swift/issues/75652 to track that problem. (The suggestion to increase the bitWidth sounds reasonable to me.)Seems reasonable to me given the current status of embedded",Seems reasonable to me given the current status of embedded,"Straightforward enablement of a bunch of files to the Embedded stdlib, which seem to be excluded for no reason:

- DiscontiguousSlice.swift
- DropWhile.swift
- Filter.swift
- FlatMap.swift
- Flatten.swift
- Join.swift
- Map.swift
- PrefixWhile.swift
- CollectionDifference.swift
- Diffing.swift
- StaticBigInt.swift
- UnfoldSequence.swift

rdar://139729059
rdar://139729075
rdar://139729137",
77716,2024-11-19T21:05:36Z,2024-11-20T05:06:15Z,slavapestov,1,0,1,11,2,1,1,[],13728.0,0,28839.0,0,0,0,0,3280149.024838,,1,1,0,False,['slavapestov'],@swift-ci Please smoke test,,"This is showing up in performance profiles.

Fixes rdar://136106973.",
77653,2024-11-15T19:42:29Z,2024-11-19T22:22:57Z,xedin,4,0,1,51,2,0,0,[],7.0,0,355229.0,0,0,0,0,3304347.193987,,1,1,0,False,['xedin'],@swift-ci please test Reverts https://github.com/swiftlang/swift/pull/76487 and https://github.com/swiftlang/swift/pull/77153 but leaves their tests. @swift-ci please smoke test @swift-ci please smoke test,,"This change although correct cases performance issues in some scenarios.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77703,2024-11-19T16:24:39Z,2024-11-19T20:22:16Z,felipepiovezan,1,0,1,1,1,0,0,[],8.0,0,14783.0,0,0,0,0,3311063.851592,,1,1,0,False,['felipepiovezan'],@swift-ci smoke test,,"A previous commit added a check for a store of `i32`, which would not work for 32-bit targets. In order to avoid having multiple test, this commit addresses the issue by requiring a 64-bit architecture for the target. This follows the example of other async debug info tests.",
77630,2024-11-14T22:13:40Z,2024-11-15T18:39:29Z,artemcm,1,0,1,7,1,1,1,[],6.0,0,425334.0,0,0,0,0,3311572.040059,,0,1,0,False,['artemcm'],@swift-ci test,,"Cherry-pick of https://github.com/swiftlang/swift/pull/77601
------------------------------
Due to the ordering of our build system, we may encounter a race when building standard library variants using tools produced by Swift's 'tools' CMake build. As a workaround, for now, ensure that the compiler building standard library variants does not rely on libSwiftScan built as part of 'tools'.
",
77698,2024-11-19T12:13:01Z,2024-11-19T19:08:12Z,hamishknight,1,0,1,75,7,1,1,[],7.0,0,24914.0,0,0,0,0,3316032.483776,,4,1,0,False,['hamishknight'],@swift-ci please test,,"The previous logic for this was unused, replace it with new logic that consults `InvertibleProtocols.def` for the list of protocols to suggest.

rdar://139212286",
77695,2024-11-19T06:34:18Z,2024-11-19T18:22:25Z,atrick,1,0,6,57,7,0,0,[],8.0,0,42490.0,0,0,0,0,3318780.363151,,5,6,0,False,['atrick'],@swift-ci test,,"Preparation for lifetime dependent coroutines and accessors.

Includes a minor fix to BeginApply that I missed in the previous PR.

Add flexibility to mark_dependence diagnostics. This allows SILGen to emit mark_dependence [unresolved] in more places.

These changes are covered by unit tests on the branch that they were pulled from.",
77696,2024-11-19T07:20:46Z,2024-11-19T17:30:04Z,shahmishal,3,0,1,515,1,0,0,['swift 6.1'],42.0,0,36561.0,0,0,0,0,3321921.56237,,0,1,1,False,['shahmishal'],@swift-ci test @swift-ci test Failures are not related to the scheme update. ,,"…old configs

(cherry picked from commit 067bb257e9ed341c466e2007131f3802dea50af2)
",
77684,2024-11-18T18:53:44Z,2024-11-19T16:56:58Z,xedin,2,0,2,92,14,2,2,[],410.0,0,79394.0,0,0,0,0,3323911.735828,,4,2,0,False,['xedin'],@swift-ci please test @swift-ci please test,,"`SWIFT_COMPILER_VERSION` has more than 4 components and it's
easier to use `Version` API over `VersionTuple` as well.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77697,2024-11-19T09:11:20Z,2024-11-19T16:54:33Z,eeckstein,1,0,1,20,2,1,1,[],45.0,0,27797.0,0,0,0,0,3324053.455965,,1,1,0,False,['eeckstein'],@swift-ci smoke test,,"SILProperties are only needed for resilient builds.

Fixes a crash in IRGen
https://github.com/swiftlang/swift/issues/77682
",
77677,2024-11-18T13:05:58Z,2024-11-19T12:57:53Z,egorzhdan,1,0,1,7,1,1,1,['c++ interop'],7.0,0,85918.0,0,0,0,0,3338254.851306,,3,1,0,False,['egorzhdan'],@swift-ci please test,,"This fixes incremental builds of the overlay.

The CxxStdlib overlay re-exports the entire C++ standard library, which has headers that transitively include Clang builtin headers, bringing in the _Builtin_float module.

rdar://140036608

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77691,2024-11-18T22:26:39Z,2024-11-19T09:11:30Z,hamishknight,1,0,2,94,5,1,1,[],7.0,0,38696.0,0,0,0,0,3351836.853619,,5,2,0,False,['hamishknight'],@swift-ci please test,,"Introduce `getKeyPathTypeForDynamicMemberLookup` which returns the KeyPath type, and can be used from both `RootAndResultTypeOfKeypathDynamicMemberRequest` and `isValidKeyPathDynamicMemberLookup`. This ensures we look to the superclass for e.g protocol compositions with `Sendable` for completion. This also means we now return an interface type, which is what the client of `RootAndResultTypeOfKeypathDynamicMemberRequest` wanted anyway.

rdar://138418296
Resolves #77035",
77694,2024-11-19T01:25:31Z,2024-11-19T07:18:36Z,shahmishal,1,0,1,515,1,0,0,[],16.0,0,21186.0,0,0,0,0,3358615.936628,,0,1,0,False,['shahmishal'],@swift-ci smoke test,,…old configs,
77688,2024-11-18T21:22:15Z,2024-11-19T01:11:01Z,glessard,1,0,4,94,2,2,2,[],44.0,0,27462.0,0,0,0,0,3366936.320456,,1,4,0,False,['glessard'],@swift-ci please smoke test,,"This PR fixes some stray comments and improves how `Span.withUnsafeBytes()` is written, making its definition in swiftinterface files compatible with older compilers. We also remove `_elementsEqual()` here, since it was only used for testing.",
77686,2024-11-18T19:54:23Z,2024-11-19T03:39:16Z,artemcm,3,1,1,98,8,2,2,[],7.0,0,27893.0,0,0,0,0,3371778.600877,,3,1,0,False,"['nkcsgexi', 'artemcm']",@swift-ci test Thank you Artem! This change is reasonable to me. @swift-ci test,,"This change ensures that when loading some module dependency 'Bar' which has a package-only dependency on 'Foo', only the following clients attempt to resolve/load 'Foo':
- Source compilation with package-name equal to that of 'Bar'.
- Textual interface compilation of a *'package'* interface with package-name equal to that of 'Bar'.

Ensuring that the following kinds of clients do not attempt to resolve/load 'Foo':
- Source compilation with package-name different to that of 'Bar'
- Textual interface compilation of a public or private interface, regardless of package name.

This fixes the behavior where previously compilation of a Swift textual interface dependency 'X' from its public or private interface, with an interface-specified package-name, from a client without a matching package-name, resulted in a lookup of package-only dependencies of modules loaded into 'X'. This behavior is invalid if we are not building from the package textual interface, becuase the module dependency graph is defined by the package name of the source client, not individual module dependency package name. i.e. In-package module dependencies are resolved/loaded only if the parent source compile matches the package name.

Resolves rdar://139979180",Nit: `clang-format`
77655,2024-11-15T21:01:11Z,2024-11-19T00:31:11Z,felipepiovezan,9,3,3,108,12,1,1,[],3886.0,0,271804.0,0,0,0,0,3383060.383473,,0,3,0,False,"['felipepiovezan', 'adrian-prantl']","https://github.com/swiftlang/llvm-project/pull/9614
@swift-ci test The actual change looks good! addressed review comments https://github.com/swiftlang/llvm-project/pull/9614
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9614
@swift-ci test linux platform Fixed backtracing tests https://github.com/swiftlang/llvm-project/pull/9614
@swift-ci test Fixed Linux tests https://github.com/swiftlang/llvm-project/pull/9614
@swift-ci test",,"This patch performs two NFC refactors to make the code control flow legible, and then fixes an issue where incorrect line numbers causes poor debugging experience.",short Doxygen comment? and here this should be in the declaration I think
76665,2024-09-24T05:28:54Z,2024-11-18T23:24:13Z,tshortli,5,1,2,33,4,1,0,[],1506092.0,0,4816658.0,0,0,0,0,3386943.651001,,5,2,0,False,"['nkcsgexi', 'tshortli']","@swift-ci please smoke test Now depends on https://github.com/swiftlang/swift/pull/77662. https://github.com/swiftlang/swift-driver/pull/1730

@swift-ci please smoke test https://github.com/swiftlang/swift-driver/pull/1730

@swift-ci please smoke test 🎉",,"It was already supposed to be enabled, but I forgot to update the CMake when I renamed the feature from `ExtensionImportVisibility` to `MemberImportVisibility`.

However, leave it disabled on the CxxStdlib module since the C++ standard library's modularization varies a lot by platform, making it difficult to add the right conditional imports.",I think this flag should probably only be on the CxxStdlib module. The Cxx module doesn't import the C++ standard library and is mostly platform-independent.
77683,2024-11-18T17:32:22Z,2024-11-18T22:40:52Z,slavapestov,2,0,3,219,7,1,1,[],876.0,0,18510.0,0,0,0,0,3389685.400689,,2,3,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please test source compatibility,,,
77652,2024-11-15T19:14:00Z,2024-11-18T18:14:14Z,xedin,3,0,1,12,2,1,1,[],1704.0,0,255614.0,0,0,0,0,3405683.854145,,1,1,0,False,['xedin'],@swift-ci please test @swift-ci please smoke test macOS platform @swift-ci please testThanks!,Thanks!,"If the base type of the specialization is invalid, the AST node is going to be replaced with `ErrorExpr`.

We need to handle that gracefully when attempting
to apply specialization in such situations.

Resolves: https://github.com/swiftlang/swift/issues/77644

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77675,2024-11-18T09:40:45Z,2024-11-18T17:44:25Z,atrick,1,0,9,212,15,0,0,[],9.0,0,29025.0,0,0,0,0,3407467.871165,,3,9,0,False,['atrick'],@swift-ci test,,A set of NFC utilities for working with coroutines. These are currently blocking the enablement of lifetime dependent `_read` accessors.,
76740,2024-09-27T00:15:45Z,2024-11-03T01:21:39Z,drodriguez,30,3,4,1565,733,2,1,[],45.0,0,4554598.0,0,0,0,0,3408597.215259,,22,4,0,False,"['jamieQ', 'rintaro', 'tshortli', 'drodriguez']","@swift-ci please test @swift-ci please test This seems like a good idea to me. @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test Would it be easy to separate out the `REQUIRES:` additions that are not strictly necessary from this PR? It seems like the bulk of the modified files in this PR are test cases that gained a `REQUIRES:` line where they previously did not have one. I'm not opposed in principle to consistently using the new `REQUIRES:` lines in every test that depends on a feature, but I think the additions to tests that didn't previously need any `REQUIRES:` lines make this PR somewhat harder to fully review. Separating out the mechanical changes into a follow up would help. > Would it be easy to separate out the `REQUIRES:` additions that are not strictly necessary from this PR? It seems like the bulk of the modified files in this PR are test cases that gained a `REQUIRES:` line where they previously did not have one. I'm not opposed in principle to consistently using the new `REQUIRES:` lines in every test that depends on a feature, but I think the additions to tests that didn't previously need any `REQUIRES:` lines make this PR somewhat harder to fully review. Separating out the mechanical changes into a follow up would help.

It is in part for simplicity (and as you point out consistency). The `--enable-experimental-feature` / `--enable-upcoming-feature` has some edge cases that are hard to deal with in an automatic way:

- One can use `--enable-experimental-feature` for an upcoming feature because of compatibility (https://github.com/swiftlang/swift/blob/54ef4dc67ad3507b2f2c3aee898dc4e5a6cd05ae/lib/Frontend/CompilerInvocation.cpp#L1058-L1064). The `REQUIRES:` is not technically necessary.
- Some `--enable-experimental-feature` can be used in production compilers.
- `--enable-upcoming-feature` still works for features that are not longer upcoming (it prints a warning, but keeps working)

I use a script like the one in `verify-swift-feature-testing.test-sh` to apply the right `REQUIRES:` to each file (and to remove the `REQUIRES: asserts`), which does most of the legwork, but not all, and have to be manually re-adjusted for some cases. To account for those three edge cases, I would need to parse the contents of `Features.def` to figure out if the `REQUIRES:` is really necessary or not. This is not going to be easy in Bash (maybe it is not even possible), but I welcome ideas of how to approach that.

I can also split this PR in 2, but I tried to keep the three commits as ""on topic"" as possible to make review of the first and third commit as easy as possible. Since I have been working on this, I had to rebase and recalculate the second commit all the time, which I understand is difficult to review. I can maybe split it per feature ""sets"", if people think it is easier to review that way.

BTW, I was planning to probably merge this over a weekend or similar, since it is the moment less people are working on the repos and I can probably avoid anybody introducing another usage of an experimental feature in the tests while this PR is being tested.
 @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test Thinking in landing this over the weekend to be less disruptive, if nobody has more feedback and all the testing is green (I will probably rebase again and redo testing to avoid any race conditions landing with other code). I would appreciate a thumbs up, if nobody has any problems with the approach. @swift-ci please test After pulling this down and rebuilding swift from scratch, I'm unable to run tests:
```
python3 ../llvm-project/llvm/utils/lit/lit.py --succinct --verbose ../build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/test-macosx-arm64
lit.py: /Users/allan/Projects/swift/swift-project/llvm-project/llvm/utils/lit/lit/TestingConfig.py:152: fatal: unable to parse config file '/Users/allan/Projects/swift/swift-project/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/test-macosx-arm64/lit.site.cfg', traceback: Traceback (most recent call last):
  File ""/Users/allan/Projects/swift/swift-project/llvm-project/llvm/utils/lit/lit/TestingConfig.py"", line 140, in load_from_path
    exec(compile(data, path, ""exec""), cfg_globals, None)
    ~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/allan/Projects/swift/swift-project/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/test-macosx-arm64/lit.site.cfg"", line 186, in <module>
    lit_config.load_config(config, os.path.join(config.test_exec_root, ""lit.swift-features.cfg""))
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/allan/Projects/swift/swift-project/llvm-project/llvm/utils/lit/lit/LitConfig.py"", line 154, in load_config
    config.load_from_path(path, self)
    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^
  File ""/Users/allan/Projects/swift/swift-project/llvm-project/llvm/utils/lit/lit/TestingConfig.py"", line 127, in load_from_path
    f = open(path)
FileNotFoundError: [Errno 2] No such file or directory: '/Users/allan/Projects/swift/swift-project/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/test-macosx-arm64/lit.swift-features.cfg'
``` > FileNotFoundError: [Errno 2] No such file or directory: '/Users/allan/Projects/swift/swift-project/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/test-macosx-arm64/lit.swift-features.cfg'

Did you try with `build-script --reconfigure` maybe? https://github.com/swiftlang/swift/pull/76740/files#diff-33394812ba204689144fd2f80832db83853ba1cb32403edb4e15fe4893e675fdR321 is part of the CMake configuration phase. I would expect going through one `ninja` or `cmake` invocation would have recreated that file, but I am not sure if you executed one of those or directly `lit.py`.


 Yes, I made sure I re-ran with `--reconfigure`. The only way I was able to work around this was to invoke `build-script` with `--test` one time, which caused the necessary file to be produced. > Yes, I made sure I re-ran with `--reconfigure`. The only way I was able to work around this was to invoke `build-script` with `--test` one time, which caused the necessary file to be produced.

In https://github.com/swiftlang/swift/blob/c0a55e11d4309a34ef2612c91ca21453ccd5e721/CMakeLists.txt#L1553-L1554 if `SWIFT_INCLUDE_TESTS` is not set, the full `test/` subdirectory is skipped from CMake. I normally keep my presets with `--test` and `--validation-test` enabled, and then `--skip-test-swift` (and a bunch of others) so the tests do not actually run while building. I wonder if there is much of a benefit to skipping the test subdirectory in the CMake when `--test` is not specified? I think it's a bit awkward if everyone has to build with both `--test` and `--skip-test-swift` simultaneously specified in order to be able to run the tests locally. Not the end of the world, but I expect a lot of other contributors will hit the same confusion I did since it wasn't necessary previously. I am surprised that it was working for you without going into that directory at least once before. The code for `lit.swift-features.cfg` is written to parallel the one for `lit.site.cfg` (https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#L303) which would had also be not generated without `--test`. That said, I agree that configuring the tests and executing the tests should not be tied together in the `build-script`. `KeyPathWithStaticMembers` was removed from `Features.def` in 5d77f3ca016abfd30dfd6b4224a89e2b24299223, so some tests became `UNSUPPORTED` unexpectedly.
@drodriguez , could you add a check to verify all the `swift_feature_{Name}` in each test are listed in Feature.def?  > `KeyPathWithStaticMembers` was removed from `Features.def` in [5d77f3c](https://github.com/swiftlang/swift/commit/5d77f3ca016abfd30dfd6b4224a89e2b24299223), so some tests became `UNSUPPORTED` unexpectedly.

I was not expecting features disappearing from that file. I can try to see what I can do.

 @drodriguez – apologies for hijacking this PR commentary, but i just hit the same issue @tshortli reported above after updating my checkout to f88b29bfdc4 yesterday and re-running the `build-script` command i had last used to configure my checkout for development (yes, it was missing the `--test` flag). IMO this seems like a bit of a regression to the initial contributor experience since the [guide](https://github.com/swiftlang/swift/blob/45d15d1268868b42f87daead40eed8bb6bdddeb7/docs/HowToGuides/GettingStarted.md#the-actual-build) seemingly does not indicate that passing the `--test` flag is required. granted i did not check out a commit preceding this change so i'm not entirely sure if this is exactly responsible. at any rate, i filed an issue here: https://github.com/swiftlang/swift/issues/77642 See my answer in the forums https://forums.swift.org/t/missing-lit-config-file-after-swift-compiler-build/76019/14.

Were you running `lit.py` directly? While faster, it will not rebuild the dependencies of the tests. Only CMake knows how to do that.",,"Features in Swift can be experimental, upcoming or base features. During their lifetime features evolve from one category to other categories. Usually experimental features are only available in ""asserts"" compilers, but they can also be experimental features in ""non asserts"" compilers. Upcoming and base features are available in both ""asserts"" and ""non asserts"" compilers.

When coding a new feature, the feature normally will start as an experimental feature. In the past this has required to mark the tests that use that feature with `REQUIRES: asserts` to avoid the test failing when testing in a ""non asserts"" compilers. This requisite is not always follow, and we forget to add those `REQUIRES: asserts` from time to time. This causes breakages for people that test the ""non asserts"" compilers. For some experimental features that are available in production compilers the `REQUIRES: asserts` is not even needed, which can make adding those lines work against one intentions. When the feature graduates from experimental to upcoming or base, we sometimes forget to update the the related tests to remove those `REQUIRES: asserts`, so a ""non asserts"" compiler will not actually execute those tests, and bugs can be introduced by mistake in those compilers.

The changes in this PR introduce a system that aims to simplify testing those experimental features and avoid some of the problems noted above.

The first change is take the canonical `Features.def` and transform its contents in something that LLVM Lit can create `available_features` for. This is done abusing the Clang preprocessor to transform the `.def` file into a Python file that can be loaded by `lit.site.cfg` during testing. This is done for each build and will pick up changes in the `Features.def` as they happen, so it will always be up-to-date. Additionally it understand when features as available depending on ""asserts"" or ""non asserts"" compilers, and will not incorrectly require an ""asserts"" compiler for non-production features, or let experimental features be tested in a ""non asserts"" compiler.

The second part of the change is keeping the tests up-to-date with the features they are testing, so each test that uses a feature is marked as such. This is done with a test itself, which greps through the existing tests, checks for the usage of `-enable-experimental-feature` or `-enable-upcoming-feature` and warns the user about the missing `REQUIRES:` lines (failing the test suite, so nobody can submit a test that skips the requirements).

Finally, the last change is modifying a huge number of tests to follow the new rules. All the tests that currently use `-enable-experimental-feature` or `-enable-upcoming-feature` have been annotated with `REQUIRES:` lines, and the (now unnecessary) `REQUIRES: asserts` have been removed.","All existing features that can be tested with `REQUIRES:` are snake case. Can you make the feature ones snake case instead of kebab case too? Do you mean `swift_feature_ParserASTGen`? I would like not to transform the feature names and keep those as the original ones in `Features.def` (camel case).

(Never heard ""kebab case"", but it is a great name) Yes, I'm suggesting `swift_feature_ParserASTGen` instead of `swift-feature-ParserASTGen`. I agree it's not worthwhile to try to transform the feature identifiers themselves."
77658,2024-11-15T23:54:45Z,2024-11-18T17:24:45Z,drodriguez,3,0,1,72,1,0,0,[],10.0,0,235806.0,0,0,0,0,3408649.252533,,0,1,0,False,['drodriguez'],@swift-ci please test @swift-ci please test macOS platform @swift-ci please test macOS platform,,"Some people are reporting problems with the features file being missing during testing. Try executing the same process that will regenerate the files when dependencies change during CMake generation, so the file is there after the project is configured.

(Maybe)
Fixes #77642
",
77646,2024-11-15T15:31:21Z,2024-11-18T12:50:27Z,egorzhdan,3,1,1,44,4,2,1,['c++ interop'],42.0,0,249548.0,0,0,0,0,3425111.5879,,4,1,0,False,['egorzhdan'],@swift-ci please test @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Amazon Linux 2,,"This reverts commit 3066bd6919b4b44524ca48a2241511353f44adb3.

This re-lands a change after it got reverted because of a regression in the build of SwiftCompilerSources.

rdar://136838485

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",This is the new part in the re-landing of this change.
77623,2024-11-14T21:19:01Z,2024-11-18T10:52:13Z,augusto2112,1,0,1,6,2,0,0,[],24.0,0,307992.0,0,0,0,0,3432209.242609,,1,1,0,False,['augusto2112'],"https://github.com/swiftlang/llvm-project/pull/9600
@swift-ci smoke test",,"The ""specification_of"" attribute in LLVM IR was renamed to ""specification"". Adapt the  tests to the new name.
",
77665,2024-11-16T22:30:12Z,2024-11-17T02:17:28Z,hamishknight,1,0,1,2,1,0,0,[],8.0,0,40930.0,0,0,0,0,3522200.674957,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,Ensure we can handle a `PATH` with spaces.,
77628,2024-11-14T21:52:16Z,2024-11-16T09:12:27Z,DougGregor,5,8,5,447,23,3,2,[],6.0,0,256901.0,0,0,0,0,3481305.697943,,15,5,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test windowsThank you for doing this! Nice!,Thank you for doing this! Nice!,"The Clang importer was directly calling into the parser to parse the
attribute (or modifier) within swift_attr. Aside from being gross, this
isn't possible with ASTGen.

Instead, teach ParseSourceFileRequest to deal with modifiers in the
same way that the Clang importer was hardcoding, and have the Clang
importer pull the attributes/modifiers off of the ""missing""
declaration introduced by the request.

One benefit of this approach is that we're only parsing each
swift_attr source buffer once, then cloning the attributes each time
it's used, so we should be doing less work overall.

Fixes rdar://139119159."," `ArgumentList *argList;` and `PatternBindingInitializer *initContext;` are not cloned. Do we need to support `CustomAttr` in swift_attrs? If not, we should make this `UNIMPLEMENTED_CLONE`, then skip `CustomAttr` before cloning in ImportDecl (and diagnose). ```suggestion
  UNIMPLEMENTED_CLONE(TypeEraserAttr)
``` ```suggestion
  UNIMPLEMENTED_CLONE(RawLayoutAttr)
``` Should this be called `AttributeFromClang` or `ImportedAttribute` or something? We do need `CustomAttr`, yes.  Nice catch, thank you! Thank you! I've added some static checking so this can't happen again. Yes, that's a good idea."
77667,2024-11-17T03:08:13Z,2024-11-17T07:01:21Z,slavapestov,1,0,1,2656,21,0,0,[],11.0,0,13989.0,0,0,0,0,3532462.212625,,0,1,0,False,['slavapestov'],@swift-ci Please smoke test,,"Overhaul the ""Conformance Paths"" chapter to use the new notation for derived requirements.",
77540,2024-11-11T22:26:14Z,2024-11-12T02:13:00Z,gottesmm,1,0,2,5644,2,0,0,[],7.0,0,448927.0,0,0,0,0,3546443.715767,,1,2,0,False,['gottesmm'],@swift-ci smoke test,,"TLDR: Was looking at some performance traces and saw that we need to cache the
result of this value.

----

Specifically, I noticed that we were spending a lot of time computing this
operation. When I looked at the code I saw that we already had a cache along the
relevant code paths... but the cache was from equivalence class representative
-> state. Before we hit that cache, we were performing the work to map the value
to the equivalence class representative... so the work to perform the relevant
lookup from value -> state (which goes through the equivalence class
representative) was not just a hash table lookup. This operation makes it
cheaper by making it two cache lookups.

It may be possible to make this cheaper by redoing the actual mapping of
information so that we can go straight from value to state. I think it would be
slightly different since we would probably need to represent the state in a
separate array and map with indices... which is really just a more efficient
hash table. We could also use malloc/etc but lets not even talk about that.

rdar://139520959",
77664,2024-11-16T21:17:45Z,2024-11-17T03:10:31Z,slavapestov,2,0,3,220,26,0,0,[],12.0,0,21167.0,0,0,0,0,3546312.827276,,7,3,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please test source compatibility,,"I've wanted to change the representation of abstract conformances for a while, so that they store a conforming type, just like concrete conformances do. This will fix some edge cases involving opaque type substitution.

For now, land a change that introduces the new `forAbstract()` factory method, that just ignores the conforming type. I've had this change locally for a while, and I'm tired of rebasing it, so I'm just landing this now.",
77662,2024-11-16T02:28:58Z,2024-11-16T23:13:59Z,tshortli,2,0,1,286,4,0,0,[],9.0,0,74705.0,0,0,0,0,3560503.383523,,2,1,0,False,['tshortli'],@swift-ci please test Will update [swiftlang/swift-driver](https://github.com/swiftlang/swift-driver) separately.,,"To allow feature build settings to be composed more flexibly, allow an `-enable-upcoming-feature` flag to be overridden by a `-disable-upcoming-feature` flag. Whichever comes last on the command line takes effect. Provide the same functionality for `-enable-experimental-feature` as well.

Resolves rdar://126283879.
",
77663,2024-11-16T03:53:41Z,2024-11-16T20:50:31Z,rjmccall,1,0,1,61,3,0,0,[],7.0,0,61010.0,0,0,0,0,3569115.83354,,2,1,0,False,['rjmccall'],@swift-ci Please smoke test,,Not used yet.  Apparently difficult to unit-test because we don't reliably actually build the runtime unit tests anymore.,
77649,2024-11-15T17:45:30Z,2024-11-16T19:44:31Z,hamishknight,2,1,2,37,2,3,3,[],8.0,0,93549.0,0,0,0,0,3573068.182327,,0,2,0,False,['hamishknight'],@swift-ci please test @swift-ci please test macOSNice. That was easy.,Nice. That was easy.,"We may not have a semantic context kind if the subscript decl is missing, for cases such as the implicit `keyPath` subscript.

rdar://139333904",Thank you 🙏 
77660,2024-11-16T00:35:22Z,2024-11-16T18:01:09Z,xedin,3,0,1,9,1,1,1,[],60.0,0,62747.0,0,0,0,0,3579279.80173,,1,1,0,False,['xedin'],@swift-ci please test I will follow-up with an actual fix to switch `-interface-compiler-version` to Version. @tshortli It'll happen on Monday :)I feel like maybe we should consider renaming this API in the meantime unless the proposed long term fix will happen very quickly.,I feel like maybe we should consider renaming this API in the meantime unless the proposed long term fix will happen very quickly.,"At the moment the only user of this method is `-interface-compiler-version` and it's checked against major + minor only, so this is not going to affect functionality.

In the future we should switch from `llvm::VersionTuple` to `swift::Version` because swift tags have five components.

Resolves: rdar://140006577

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77645,2024-11-15T14:46:26Z,2024-11-15T22:37:51Z,meg-gupta,1,0,1,13,2,1,0,[],8.0,0,95605.0,0,0,0,0,3581758.402649,,4,1,0,False,['meg-gupta'],@swift-ci testThanks for cleaning this up.,Thanks for cleaning this up.,"We don't need this anymore since we have @lifetime(target: sources) syntax

",
77632,2024-11-14T22:45:38Z,2024-11-16T04:36:55Z,slavapestov,2,0,13,307,14,0,0,[],85659.0,0,107477.0,0,0,0,0,3627534.919788,,5,13,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please test source compatibility,,"A common mistake that can lead to subtle bugs is calling `SubstitutionMap::get()` with a list of conformances that don't match the replacement types. Such substitution maps can be silently introduced in the AST or SIL and only cause problems later.

This PR dusts off the old `SubstitutionMap::verify()` and fixes a few of the problems revealed. So far there's nothing serious here. Note that verification is off by default.",
77659,2024-11-16T00:01:33Z,2024-11-16T00:05:35Z,slavapestov,1,0,1,2,1,0,0,[],14.0,0,242.0,0,0,0,0,3643817.056955,,1,1,0,False,['slavapestov'],@swift-ci Please smoke test,,Fixes rdar://139993108.,
77656,2024-11-15T22:17:40Z,2024-11-16T02:20:41Z,ahoppen,2,2,1,10,1,2,1,[],4.0,0,14582.0,0,0,0,0,3635710.067483,,0,1,0,False,['ahoppen'],@swift-ci Please test  @swift-ci Please smoke test ,,,"I wonder if we can rewrite this as:

```suggestion
$ActionForOutput = switch ($Action) {
Build { ""Building"" }
Test { ""Testing"" }
TestParallel { ""Testing"" }
}
``` Ah, nice. Didn’t know that was possible."
77650,2024-11-15T18:08:16Z,2024-11-16T03:30:03Z,rintaro,3,1,1,462,3,2,1,[],664.0,0,33707.0,0,0,0,0,3631549.580719,,3,1,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke testNice,Nice,"`generateWithLabeledExprListArguments(attribute:_:)` ensures all the `LabeledExprListSyntax` arguments are processed in the generator function.

It simplifies:
```swift
    guard var args = node.arguments?.as(LabeledExprListSyntax.self)?[...] else {
      self.diagnose(.expectedArgumentsForAttribtue(node))
      return nil
    }
    
    ...consume arguments...   

    if !args.isEmpty {
      self.diagnose(.extraneousArgumentsInAttribute(node, args.first!))
    }
```
into:
```swift
    self.generateWithLabeledExprListArguments(attribute: node) { args in
      ...consume arguments...
    }
```",This looks like a stray line break?
77625,2024-11-14T21:19:46Z,2024-11-15T19:11:33Z,etcwilde,1,0,1,6,1,2,2,[],8.0,0,78755.0,0,0,0,0,3661413.269256,,0,1,0,False,['etcwilde'],@swift-ci please smoke test,,"The C++ runtime bits should not have RTTI or exceptions enabled. Disabling those now, but keeping the unwind tables to match the old build.",
77643,2024-11-15T14:27:38Z,2024-11-15T18:23:51Z,hamishknight,1,0,1,14,1,1,1,[],8.0,0,16399.0,0,0,0,0,3662097.361861,,1,1,0,False,['hamishknight'],@swift-ci please smoke testThanks!,Thanks!,,
77588,2024-11-13T17:02:50Z,2024-11-15T18:26:17Z,Xazax-hun,2,5,1,180,7,3,2,['c++ interop'],2286.0,0,177808.0,0,0,0,0,3664176.961005,,7,1,0,False,['Xazax-hun'],@swift-ci please smoke test @swift-ci please smoke testLGTM with a couple of very minor comments,LGTM with a couple of very minor comments,"This PR adds a variadic macro that builds a SwiftAttr string containing the names of the template type parameters that need to be escapable for the type to be considered escapable. It also adds logic to interpret this annotation.

rdar://139065437
","Should we trim white space here? I found that the preprocessor is trimming the spaces for us. But we might want to in case some people want to use this attribute directly instead of using the convenience macros.  We do not support nested templates yet. I plan to do that in a follow-up PR.  Minor: redundant `importer::` (here and below). What do you think about slightly re-wording the first sentence, e.g.
```
Specifies that a C++ `class` or `struct` should be imported ...
```"
77631,2024-11-14T22:15:03Z,2024-11-15T17:03:44Z,xedin,2,0,1,19,3,0,0,[],2774.0,0,67722.0,0,0,0,0,3669131.727666,,1,1,0,False,['xedin'],@swift-ci please test @swift-ci please test,,"…d after use

Currently nothing destroys the injected checked continuations which means that their ""canaries"" leak.

Resolves: rdar://134442168

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77599,2024-11-13T22:06:03Z,2024-11-15T17:02:25Z,slavapestov,2,0,1,40,5,0,0,[],19.0,0,154583.0,0,0,0,0,3669210.747123,,3,1,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please smoke test macOS,,"This was never implemented properly, but it works sometimes.

When the protocol is parameterized, it started crashing in a new way, because the interface type of an existential is now derived from the generalization signature, which will have nothing to do with the signature that IRGen is passing in here.

Tweak the workaround to keep things limping along.

Fixes rdar://problem/139745699",
77595,2024-11-13T20:17:05Z,2024-11-15T17:02:16Z,slavapestov,2,0,1,16,2,1,1,[],13.0,0,161111.0,0,0,0,0,3669221.325504,,2,1,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please smoke test Linux,,Fixes rdar://139747886.,
77641,2024-11-15T11:18:44Z,2024-11-15T15:02:45Z,eeckstein,1,0,1,4,1,0,0,[],25.0,0,18170.0,0,0,0,0,3671665.016109,,1,1,0,False,['eeckstein'],@swift-ci smoke test,,,
77619,2024-11-14T18:17:51Z,2024-11-15T17:01:20Z,rintaro,1,1,1,690,19,3,2,[],46095.0,0,81810.0,0,0,0,0,3669278.194267,,3,1,0,False,['rintaro'],@swift-ci Please smoke test🎉  Fantastic progress!,🎉  Fantastic progress!,"Now that `ASTGen` should be able to generate most Swift code. Let's remove ""legacy parser"" call-in, and remove the unhealthy cyclic dependency between lib/Parse and ASTGen.
",Will rebase on #77412 after merging it.
77634,2024-11-14T23:57:28Z,2024-11-15T08:42:01Z,j-hui,2,0,1,2,1,2,2,[],96.0,0,33921.0,0,0,0,0,3696790.482891,,1,1,0,False,['j-hui'],@swift-ci please smoke test (I wasn't entirely sure if a smoke test is necessary for a pure documentation change but the GitHub UI seemed to indicate it is)Thanks!,Thanks!,"In these instructions, `platform` is a shell variable, not a command (or function or alias).
",
77610,2024-11-14T12:39:54Z,2024-11-15T06:53:11Z,eeckstein,3,0,1,28,2,0,0,[],8.0,0,65601.0,0,0,0,0,3705766.488546,,3,1,0,False,['eeckstein'],"@swift-ci test
 @swift-ci benchmark @swift-ci test",,"In OSSA we only insert a copy_value of the element at the array initialization point. This would result in an over-consume if the getElement is in a loop. Therefore require that both semantic calls are in the same block.

Fixes an ownership verifier crash when OSSA modules are enabled.
",
76460,2024-09-13T20:21:10Z,2024-11-15T08:50:40Z,finagolfin,14,4,1,35,5,4,3,[],894679.0,0,5403382.0,0,0,0,0,3697109.618454,,5,1,0,False,"['bnbarham', 'shahmishal', 'finagolfin', 'hyp']","Rebased, @al45tair, would you run the CI on this and review? @swift-ci test Rebased, updated to latest NDK 27c, and added some runtime libraries that were being listed over and over again when linking test runners for Android to the list of libraries to be de-duplicated.

@etcwilde, would you review? It can wait.

The BC guys like Saleem haven't been too active on github lately, something going on? @hyp, if you're active again, would you review? Rebased and enabled another C++ Interop test that now passes on Android.

Ping @etcwilde, it's been three weeks with no response, it would be good to get this in before the branch. If the BC people have any complaint later, which is extremely unlikely, we can always modify the single module map change then. > It is unclear if the test/modularization changes would result in issues for r26 or not.

The modularization change was explicitly tested with NDK 26, as I noted months ago above, ""it still worked fine with NDK 26 too."" The test change I've only been running with NDK 27 lately, but I believe it works for both.

> In essence, does this prevent the use of r26 or is it simply updating the documentation to reference r27?

Neither, both NDKs should be fine and it is clearly updating more than the docs.

> r26 also is a LTS release, so I'm not sure if we should be upgrading so aggressively

[NDK 27 is the current LTS release](https://developer.android.com/ndk/downloads), which means [NDK 26 is no longer officially supported](https://github.com/android/ndk/wiki/Unsupported-Downloads#r26d). Nevertheless, this pull should work fine with both.

> However, updating to also support r27 is preferable.

Yes, that is what this pull does. Ping @compnerd, answered all your questions, would be good to get this in. @egorzhdan, need a CI run here. @bnbarham, please run the CI here. @swift-ci please test I validated this on a windows host with NDK 26 , this looks good to me Alright, passed CI, @ktoso, would you merge? I figure everybody else in this thread is in the US and probably sleeping now. Thanks, @etcwilde, @compnerd, @hyp, and @ktoso, wanted to get this in before the upcoming branch.I think the changes look fine. I'd like to get approval from @compnerd once he's back though. Is this needed immediately, or can it wait a couple more weeks? It is unclear if the test/modularization changes would result in issues for r26 or not. In essence, does this prevent the use of r26 or is it simply updating the documentation to reference r27? r26 also is a LTS release, so I'm not sure if we should be upgrading so aggressively. However, updating to also support r27 is preferable. Ok, happy to since seems others approved already","I think the changes look fine. I'd like to get approval from @compnerd once he's back though. Is this needed immediately, or can it wait a couple more weeks? It is unclear if the test/modularization changes would result in issues for r26 or not. In essence, does this prevent the use of r26 or is it simply updating the documentation to reference r27? r26 also is a LTS release, so I'm not sure if we should be upgrading so aggressively. However, updating to also support r27 is preferable. Ok, happy to since seems others approved already","Add a new `bits/` header to the Android overlay, include runtime libraries that are
auto-extracted and listed many times to the list of libraries to be de-duplicated,
enable a C++ interop test that's working again, and update the doc with new
libraries that need to be available to run a simple executable.

@compnerd and @hyp, I [switched over to the latest NDK 27 with this patch a couple months ago](https://github.com/finagolfin/swift-android-sdk/commit/606ccefea792a7791cfbd49014f2e89d4347f2c7#diff-964afbea403833de16a6303ebb0c7f740abbf37e652520bb815db206aa268de1R10), no problem, plus it still worked fine with NDK 26 too. Let me know if you're using NDK 27 yet and please review.

@etcwilde, let me know what you think.","Is this backwards compatible? Is this backwards compatible? With NDK 26? As I wrote above, ""it still worked fine with NDK 26 too."" With NDK 26? I think this was fixed by the new Android overlay, so it should be."
77618,2024-11-14T17:25:46Z,2024-11-15T06:51:09Z,eeckstein,2,0,1,50,2,1,1,[],34.0,0,48327.0,0,0,0,0,3705888.888817,,2,1,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark,,"Scope-ending instructions, like `end_borrow` are only irrelevant for RLE if the preceding load is not changed. If it is changed from `load [copy]` -> `load [take]` the memory effects of those scope-ending instructions prevent that the `load [take]` will illegally mutate memory which is protected from mutation by the scope.

Fixes a memory verifier crash
rdar://139824805
",
77300,2024-10-30T17:24:37Z,2024-11-15T02:00:28Z,meg-gupta,3,1,1,147,2,1,0,[],17.0,0,1326951.0,0,0,0,0,3723335.779208,,2,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test Linux platform @swift-ci test,," If a load_borrow was computed from another borrow scope, disable DCE of the parent borrow.
This is because when its reborrow is dead, DCE has to insert end_borrows in predecessor blocks and it cannot yet handle borrow nesting and can run into an issue if the parent borrow's reborrow is adjacent and dead. 

Alternatively, we can allow DCE to insert end_borrows inside-out. 

Fixes rdar://138663452

",Can you avoid this code duplication? Either by extracting it into a helper function or even merging the two switch cases
77621,2024-11-14T20:47:57Z,2024-11-15T01:31:34Z,artemcm,1,0,1,7,1,0,0,[],8.0,0,17020.0,0,0,0,0,3725066.841804,,0,1,0,False,['artemcm'],@swift-ci smoke test,,"Reverts swiftlang/swift#77601

https://github.com/swiftlang/swift/pull/77606 is the more-principled solution to the problem we were seeing. ",
77412,2024-11-06T00:50:50Z,2024-11-15T03:08:21Z,rintaro,5,7,3,592,15,2,1,[],508334.0,0,785852.0,0,0,0,0,3719261.954077,,8,3,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test,,Also basic macro role attributes. ,"Nit: probably ought to `undef` this afterwards Will this compile in a no-asserts build? Should this be `llvm_unreachable` instead? ```suggestion
    if let args = node.arguments {
``` This reminds me, currently we create these even when attached to non-PatternBindingDecls :( This crashes (rdar://100585434):

```swift
@attached(member)
macro M<T>(_ x: T) = #externalMacro(module: """", type: """")

@M({})
struct S {}
```

Not to be solved in this PR though 😄  Huh. Do we only need it for PBD? If so, I think we should just pre-create `PatternBindingInitializer` when generating `PatternBindingDecl` if it has any attributes or initializers, and generate the attributes and the initializers with `withDeclContext` I believe we need _some_ local context to contextualize closures for the non-PatternBindingDecl cases, but it can't be PatternBindingInitializer, we probably need a new kind of context (or maybe we could rework PatternBindingInitializer such that it doesn't assume it's on a PBD). I see let me leave this as is for now :)"
77616,2024-11-14T16:32:05Z,2024-11-14T20:28:33Z,egorzhdan,1,0,1,53,4,1,1,['c++ interop'],447.0,0,14189.0,0,0,0,0,3743252.412635,,4,1,0,False,['egorzhdan'],@swift-ci please smoke test😢 ,😢 ,"This reverts commit fbbec48c

The change was causing regressions in certain build configs that need to be investigated.

rdar://139723218

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77606,2024-11-14T00:39:39Z,2024-11-14T20:31:12Z,artemcm,3,2,1,13,10,1,0,[],15.0,0,71494.0,0,0,0,0,3743093.415893,,0,1,0,False,['artemcm'],@swift-ci smoke test @swift-ci smoke test @swift-ci smoke test,,"- [Move libSwiftScan from 'tools' to 'lib/Tooling'](https://github.com/swiftlang/swift/commit/8ce8af4029dfc31ff262929a988e3295b01c5298). Due to https://github.com/swiftlang/swift/blob/1965f96aff453778cf9f11e6a6ef16c904af9acd/CMakeLists.txt#L1475-L1500 we currently configure `stdlib` before `tools`. To bypass that, begin separating libraries used by the compiler into a separate directory in `lib`: `Tooling`, just like Clang does, and ensure they get configured before the standard library build.","The freestanding configurations will likely fail with this since they don't build the tools. (alternatively said, they should not build tools nor tool libraries. They should only build the runtimes and use a pre-built toolchain.)"
17604,2018-06-28T20:35:51Z,2018-07-02T11:28:08Z,Azoy,5,0,1,16,1,2,2,[],51922.0,0,201402535.0,0,0,0,0,3738680.531043,,0,1,0,False,"['swift-ci', 'lorentey']","@swift-ci please benchmark @swift-ci please test **Build failed**
[Swift Test Linux Platform](https://ci.swift.org/job/swift-PR-Linux/5895/)
Git Sha - 04a16df3c214ce1382f726d4d5d2c7be2f934acd
 Hm, the Linux failure seems unrelated. Let's try again, for luck?

@swift-ci clean test linux platform Build comment file: 
--------------

### Optimized (O)  


<details>
  <summary>Regression (12)</summary>
  
TEST                                                      | OLD    | NEW    | DELTA  | SPEEDUP   
---                                                       | ---    | ---    | ---    | ---       
BinaryFloatingPointPropertiesBinade                       | 23     | 28     | +21.7% | **0.82x** 
DataCount                                                 | 30     | 33     | +10.0% | **0.91x** 
Calculator                                                | 170    | 186    | +9.4%  | **0.91x** 
OpenClose                                                 | 56     | 61     | +8.9%  | **0.92x** 
RC4                                                       | 133    | 144    | +8.3%  | **0.92x** 
MapReduceAnyCollection                                    | 332    | 358    | +7.8%  | **0.93x** 
WordSplitASCII                                            | 6658   | 7145   | +7.3%  | **0.93x (?)** 
MapReduce                                                 | 335    | 359    | +7.2%  | **0.93x** 
StringComparison_fastPrenormal                            | 758    | 812    | +7.1%  | **0.93x** 
BinaryFloatingPointPropertiesUlp                          | 31     | 33     | +6.5%  | **0.94x** 
StringWithCString                                         | 38022  | 40131  | +5.5%  | **0.95x** 
NopDeinit                                                 | 28329  | 29869  | +5.4%  | **0.95x** 

</details>

<details open >
  <summary>Improvement (10)</summary>
  
TEST                                                      | OLD    | NEW    | DELTA  | SPEEDUP   
---                                                       | ---    | ---    | ---    | ---       
RandomIntegersLCG                                         | 891    | 155    | -82.6% | **5.75x** 
RandomShuffleLCG                                          | 105885 | 51783  | -51.1% | **2.04x** 
DictionarySwapAt                                          | 7680   | 5935   | -22.7% | **1.29x** 
RandomDoubleLCG                                           | 2600   | 2029   | -22.0% | **1.28x** 
ChainedFilterMap                                          | 1262   | 1117   | -11.5% | **1.13x** 
SetIsSubsetOf_OfObjects                                   | 451    | 406    | -10.0% | **1.11x (?)** 
MapReduceLazyCollectionShort                              | 33     | 30     | -9.1%  | **1.10x** 
PointerArithmetics                                        | 30822  | 28251  | -8.3%  | **1.09x** 
ObjectiveCBridgeStubFromArrayOfNSString                   | 30356  | 28823  | -5.1%  | **1.05x (?)** 
DataReplaceSmallBuffer                                    | 7869   | 7473   | -5.0%  | **1.05x (?)** 

</details>

<details >
  <summary>No Changes (424)</summary>
  
TEST                                                      | OLD    | NEW    | DELTA  | SPEEDUP   
---                                                       | ---    | ---    | ---    | ---       
AngryPhonebook                                            | 3414   | 3391   | -0.7%  | 1.01x (?) 
AnyHashableWithAClass                                     | 79235  | 77942  | -1.6%  | 1.02x (?) 
Array2D                                                   | 2545   | 2544   | -0.0%  | 1.00x (?) 
ArrayAppend                                               | 952    | 948    | -0.4%  | 1.00x (?) 
ArrayAppendArrayOfInt                                     | 673    | 672    | -0.1%  | 1.00x (?) 
ArrayAppendAscii                                          | 3457   | 3436   | -0.6%  | 1.01x (?) 
ArrayAppendAsciiSubstring                                 | 22342  | 22582  | +1.1%  | 0.99x     
ArrayAppendFromGeneric                                    | 675    | 674    | -0.1%  | 1.00x (?) 
ArrayAppendGenericStructs                                 | 1210   | 1211   | +0.1%  | 1.00x (?) 
ArrayAppendLatin1                                         | 37148  | 37096  | -0.1%  | 1.00x (?) 
ArrayAppendLatin1Substring                                | 129190 | 128926 | -0.2%  | 1.00x (?) 
ArrayAppendLazyMap                                        | 1179   | 1175   | -0.3%  | 1.00x (?) 
ArrayAppendOptionals                                      | 1212   | 1212   | +0.0%  | 1.00x     
ArrayAppendRepeatCol                                      | 1174   | 1174   | +0.0%  | 1.00x     
ArrayAppendReserved                                       | 724    | 717    | -1.0%  | 1.01x (?) 
ArrayAppendSequence                                       | 980    | 979    | -0.1%  | 1.00x (?) 
ArrayAppendStrings                                        | 5552   | 5653   | +1.8%  | 0.98x     
ArrayAppendToFromGeneric                                  | 676    | 674    | -0.3%  | 1.00x (?) 
ArrayAppendToGeneric                                      | 676    | 674    | -0.3%  | 1.00x (?) 
ArrayAppendUTF16                                          | 37208  | 36959  | -0.7%  | 1.01x (?) 
ArrayAppendUTF16Substring                                 | 126932 | 126893 | -0.0%  | 1.00x (?) 
ArrayInClass                                              | 77     | 77     | +0.0%  | 1.00x     
ArrayLiteral                                              | 0      | 0      | +0.0%  | 1.00x     
ArrayOfGenericPOD2                                        | 130    | 129    | -0.8%  | 1.01x     
ArrayOfGenericRef                                         | 3945   | 3948   | +0.1%  | 1.00x (?) 
ArrayOfPOD                                                | 156    | 156    | +0.0%  | 1.00x     
ArrayOfRef                                                | 3899   | 3909   | +0.3%  | 1.00x (?) 
ArrayPlusEqualArrayOfInt                                  | 674    | 674    | +0.0%  | 1.00x     
ArrayPlusEqualFiveElementCollection                       | 4831   | 4810   | -0.4%  | 1.00x (?) 
ArrayPlusEqualSingleElementCollection                     | 954    | 949    | -0.5%  | 1.01x (?) 
ArrayPlusEqualThreeElements                               | 1509   | 1489   | -1.3%  | 1.01x (?) 
ArraySubscript                                            | 1359   | 1378   | +1.4%  | 0.99x (?) 
ArrayValueProp                                            | 7      | 7      | +0.0%  | 1.00x     
ArrayValueProp2                                           | 7      | 7      | +0.0%  | 1.00x     
ArrayValueProp3                                           | 7      | 7      | +0.0%  | 1.00x     
ArrayValueProp4                                           | 7      | 7      | +0.0%  | 1.00x     
BinaryFloatingPointPropertiesNextUp                       | 25     | 25     | +0.0%  | 1.00x     
BitCount                                                  | 181    | 189    | +4.4%  | 0.96x     
ByteSwap                                                  | 93     | 90     | -3.2%  | 1.03x (?) 
COWArrayGuaranteedParameterOverhead                       | 7758   | 7815   | +0.7%  | 0.99x (?) 
COWTree                                                   | 3289   | 3290   | +0.0%  | 1.00x (?) 
CSVParsing                                                | 589219 | 588324 | -0.2%  | 1.00x (?) 
CSVParsingAlt                                             | 725354 | 724764 | -0.1%  | 1.00x (?) 
CSVParsingAltIndices                                      | 304698 | 308297 | +1.2%  | 0.99x (?) 
CStringLongAscii                                          | 3617   | 3762   | +4.0%  | 0.96x     
CStringLongNonAscii                                       | 2144   | 2176   | +1.5%  | 0.99x (?) 
CStringShortAscii                                         | 2989   | 3006   | +0.6%  | 0.99x (?) 
CaptureProp                                               | 3686   | 3667   | -0.5%  | 1.01x (?) 
CharIndexing_ascii_unicodeScalars                         | 14612  | 14609  | -0.0%  | 1.00x (?) 
CharIndexing_ascii_unicodeScalars_Backwards               | 14361  | 14381  | +0.1%  | 1.00x (?) 
CharIndexing_chinese_unicodeScalars                       | 11061  | 11067  | +0.1%  | 1.00x (?) 
CharIndexing_chinese_unicodeScalars_Backwards             | 10882  | 10891  | +0.1%  | 1.00x (?) 
CharIndexing_japanese_unicodeScalars                      | 17482  | 17485  | +0.0%  | 1.00x (?) 
CharIndexing_japanese_unicodeScalars_Backwards            | 17182  | 17213  | +0.2%  | 1.00x (?) 
CharIndexing_korean_unicodeScalars                        | 14167  | 14168  | +0.0%  | 1.00x (?) 
CharIndexing_korean_unicodeScalars_Backwards              | 13927  | 13945  | +0.1%  | 1.00x (?) 
CharIndexing_punctuatedJapanese_unicodeScalars            | 2648   | 2657   | +0.3%  | 1.00x (?) 
CharIndexing_punctuatedJapanese_unicodeScalars_Backwards  | 2617   | 2619   | +0.1%  | 1.00x (?) 
CharIndexing_punctuated_unicodeScalars                    | 3317   | 3319   | +0.1%  | 1.00x (?) 
CharIndexing_punctuated_unicodeScalars_Backwards          | 3267   | 3268   | +0.0%  | 1.00x (?) 
CharIndexing_russian_unicodeScalars                       | 12171  | 12172  | +0.0%  | 1.00x (?) 
CharIndexing_russian_unicodeScalars_Backwards             | 11962  | 11983  | +0.2%  | 1.00x (?) 
CharIndexing_tweet_unicodeScalars                         | 28794  | 28794  | +0.0%  | 1.00x     
CharIndexing_tweet_unicodeScalars_Backwards               | 28314  | 28357  | +0.2%  | 1.00x (?) 
CharIndexing_utf16_unicodeScalars                         | 20549  | 20541  | -0.0%  | 1.00x (?) 
CharIndexing_utf16_unicodeScalars_Backwards               | 20895  | 20925  | +0.1%  | 1.00x (?) 
CharIteration_ascii_unicodeScalars                        | 18308  | 18205  | -0.6%  | 1.01x (?) 
CharIteration_ascii_unicodeScalars_Backwards              | 13548  | 13549  | +0.0%  | 1.00x (?) 
CharIteration_chinese_unicodeScalars                      | 13853  | 13804  | -0.4%  | 1.00x (?) 
CharIteration_chinese_unicodeScalars_Backwards            | 10258  | 10262  | +0.0%  | 1.00x (?) 
CharIteration_japanese_unicodeScalars                     | 21930  | 21808  | -0.6%  | 1.01x     
CharIteration_japanese_unicodeScalars_Backwards           | 16218  | 16216  | -0.0%  | 1.00x (?) 
CharIteration_korean_unicodeScalars                       | 17756  | 17651  | -0.6%  | 1.01x (?) 
CharIteration_korean_unicodeScalars_Backwards             | 13131  | 13138  | +0.1%  | 1.00x (?) 
CharIteration_punctuatedJapanese_unicodeScalars           | 3286   | 3277   | -0.3%  | 1.00x (?) 
CharIteration_punctuatedJapanese_unicodeScalars_Backwards | 2450   | 2455   | +0.2%  | 1.00x (?) 
CharIteration_punctuated_unicodeScalars                   | 4110   | 4100   | -0.2%  | 1.00x (?) 
CharIteration_punctuated_unicodeScalars_Backwards         | 3066   | 3071   | +0.2%  | 1.00x (?) 
CharIteration_russian_unicodeScalars                      | 15242  | 15186  | -0.4%  | 1.00x     
CharIteration_russian_unicodeScalars_Backwards            | 11283  | 11289  | +0.1%  | 1.00x (?) 
CharIteration_tweet_unicodeScalars                        | 36453  | 36030  | -1.2%  | 1.01x (?) 
CharIteration_tweet_unicodeScalars_Backwards              | 26755  | 26762  | +0.0%  | 1.00x (?) 
CharIteration_utf16_unicodeScalars                        | 24928  | 24809  | -0.5%  | 1.00x     
CharIteration_utf16_unicodeScalars_Backwards              | 16635  | 16792  | +0.9%  | 0.99x     
CharacterLiteralsLarge                                    | 5329   | 5304   | -0.5%  | 1.00x (?) 
CharacterLiteralsSmall                                    | 195    | 197    | +1.0%  | 0.99x     
CharacterPropertiesFetch                                  | 4108   | 4225   | +2.8%  | 0.97x (?) 
CharacterPropertiesPrecomputed                            | 931    | 926    | -0.5%  | 1.01x (?) 
CharacterPropertiesStashed                                | 1366   | 1326   | -2.9%  | 1.03x     
CharacterPropertiesStashedMemo                            | 1437   | 1415   | -1.5%  | 1.02x (?) 
Chars                                                     | 914    | 913    | -0.1%  | 1.00x (?) 
ClassArrayGetter                                          | 13     | 13     | +0.0%  | 1.00x     
Combos                                                    | 434    | 436    | +0.5%  | 1.00x (?) 
DataAccessBytes                                           | 1024   | 1022   | -0.2%  | 1.00x (?) 
DataAppendArray                                           | 4594   | 4592   | -0.0%  | 1.00x (?) 
DataAppendBytes                                           | 4595   | 4543   | -1.1%  | 1.01x (?) 
DataAppendDataLargeToLarge                                | 60411  | 60077  | -0.6%  | 1.01x (?) 
DataAppendDataLargeToMedium                               | 31636  | 31826  | +0.6%  | 0.99x (?) 
DataAppendDataLargeToSmall                                | 31053  | 30736  | -1.0%  | 1.01x (?) 
DataAppendDataMediumToLarge                               | 33828  | 33965  | +0.4%  | 1.00x (?) 
DataAppendDataMediumToMedium                              | 5859   | 5935   | +1.3%  | 0.99x (?) 
DataAppendDataMediumToSmall                               | 5248   | 5274   | +0.5%  | 1.00x (?) 
DataAppendDataSmallToLarge                                | 33299  | 33336  | +0.1%  | 1.00x (?) 
DataAppendDataSmallToMedium                               | 5360   | 5370   | +0.2%  | 1.00x (?) 
DataAppendDataSmallToSmall                                | 5170   | 5282   | +2.2%  | 0.98x (?) 
DataAppendSequence                                        | 18130  | 18052  | -0.4%  | 1.00x (?) 
DataCopyBytes                                             | 386    | 390    | +1.0%  | 0.99x (?) 
DataMutateBytes                                           | 3469   | 3468   | -0.0%  | 1.00x (?) 
DataReplaceLarge                                          | 33558  | 33195  | -1.1%  | 1.01x (?) 
DataReplaceLargeBuffer                                    | 50777  | 50744  | -0.1%  | 1.00x (?) 
DataReplaceMedium                                         | 6934   | 6655   | -4.0%  | 1.04x (?) 
DataReplaceMediumBuffer                                   | 9802   | 9735   | -0.7%  | 1.01x (?) 
DataReplaceSmall                                          | 5089   | 4926   | -3.2%  | 1.03x (?) 
DataReset                                                 | 2508   | 2505   | -0.1%  | 1.00x (?) 
DataSetCount                                              | 493    | 494    | +0.2%  | 1.00x (?) 
DataSubscript                                             | 197    | 197    | +0.0%  | 1.00x     
DictOfArraysToArrayOfDicts                                | 695    | 701    | +0.9%  | 0.99x (?) 
Dictionary                                                | 457    | 466    | +2.0%  | 0.98x (?) 
Dictionary2                                               | 567    | 582    | +2.6%  | 0.97x     
Dictionary2OfObjects                                      | 1859   | 1859   | +0.0%  | 1.00x     
Dictionary3                                               | 200    | 200    | +0.0%  | 1.00x     
Dictionary3OfObjects                                      | 661    | 660    | -0.2%  | 1.00x (?) 
Dictionary4                                               | 307    | 297    | -3.3%  | 1.03x     
Dictionary4Legacy                                         | 666    | 664    | -0.3%  | 1.00x (?) 
Dictionary4OfObjects                                      | 410    | 408    | -0.5%  | 1.00x (?) 
Dictionary4OfObjectsLegacy                                | 861    | 867    | +0.7%  | 0.99x (?) 
DictionaryBridge                                          | 1040   | 1036   | -0.4%  | 1.00x (?) 
DictionaryCopy                                            | 92808  | 93569  | +0.8%  | 0.99x (?) 
DictionaryFilter                                          | 92508  | 93365  | +0.9%  | 0.99x     
DictionaryGroup                                           | 192    | 193    | +0.5%  | 0.99x (?) 
DictionaryGroupOfObjects                                  | 1888   | 1905   | +0.9%  | 0.99x (?) 
DictionaryKeysContainsCocoa                               | 36     | 36     | +0.0%  | 1.00x     
DictionaryKeysContainsNative                              | 28     | 28     | +0.0%  | 1.00x     
DictionaryLiteral                                         | 1718   | 1715   | -0.2%  | 1.00x (?) 
DictionaryOfObjects                                       | 2128   | 2126   | -0.1%  | 1.00x (?) 
DictionaryRemove                                          | 3936   | 3755   | -4.6%  | 1.05x     
DictionaryRemoveOfObjects                                 | 23038  | 23222  | +0.8%  | 0.99x (?) 
DictionarySubscriptDefaultMutation                        | 238    | 239    | +0.4%  | 1.00x (?) 
DictionarySubscriptDefaultMutationArray                   | 539    | 539    | +0.0%  | 1.00x     
DictionarySubscriptDefaultMutationArrayOfObjects          | 3580   | 3591   | +0.3%  | 1.00x (?) 
DictionarySubscriptDefaultMutationOfObjects               | 1542   | 1528   | -0.9%  | 1.01x (?) 
DictionarySwap                                            | 934    | 925    | -1.0%  | 1.01x     
DictionarySwapAtOfObjects                                 | 46856  | 46977  | +0.3%  | 1.00x (?) 
DictionarySwapOfObjects                                   | 7915   | 7875   | -0.5%  | 1.01x (?) 
DoubleWidthDivision                                       | 0      | 0      | +0.0%  | 1.00x     
DropFirstAnyCollection                                    | 68     | 68     | +0.0%  | 1.00x     
DropFirstAnyCollectionLazy                                | 57503  | 57991  | +0.8%  | 0.99x (?) 
DropFirstAnySeqCRangeIter                                 | 83     | 83     | +0.0%  | 1.00x     
DropFirstAnySeqCRangeIterLazy                             | 83     | 83     | +0.0%  | 1.00x     
DropFirstAnySeqCntRange                                   | 64     | 64     | +0.0%  | 1.00x     
DropFirstAnySeqCntRangeLazy                               | 64     | 64     | +0.0%  | 1.00x     
DropFirstAnySequence                                      | 1652   | 1652   | +0.0%  | 1.00x     
DropFirstAnySequenceLazy                                  | 1652   | 1652   | +0.0%  | 1.00x     
DropFirstArray                                            | 31     | 31     | +0.0%  | 1.00x     
DropFirstArrayLazy                                        | 31     | 31     | +0.0%  | 1.00x     
DropFirstCountableRange                                   | 31     | 31     | +0.0%  | 1.00x     
DropFirstCountableRangeLazy                               | 31     | 31     | +0.0%  | 1.00x     
DropFirstSequence                                         | 2404   | 2404   | +0.0%  | 1.00x     
DropFirstSequenceLazy                                     | 2489   | 2488   | -0.0%  | 1.00x (?) 
DropLastAnyCollection                                     | 25     | 25     | +0.0%  | 1.00x     
DropLastAnyCollectionLazy                                 | 19144  | 19322  | +0.9%  | 0.99x (?) 
DropLastAnySeqCRangeIter                                  | 2948   | 2946   | -0.1%  | 1.00x (?) 
DropLastAnySeqCRangeIterLazy                              | 2944   | 2952   | +0.3%  | 1.00x (?) 
DropLastAnySeqCntRange                                    | 10     | 10     | +0.0%  | 1.00x     
DropLastAnySeqCntRangeLazy                                | 10     | 10     | +0.0%  | 1.00x     
DropLastAnySequence                                       | 4428   | 4428   | +0.0%  | 1.00x     
DropLastAnySequenceLazy                                   | 4515   | 4508   | -0.2%  | 1.00x (?) 
DropLastCountableRange                                    | 10     | 10     | +0.0%  | 1.00x     
DropLastCountableRangeLazy                                | 10     | 10     | +0.0%  | 1.00x     
DropLastSequence                                          | 568    | 590    | +3.9%  | 0.96x     
DropLastSequenceLazy                                      | 567    | 590    | +4.1%  | 0.96x     
DropWhileAnyCollection                                    | 89     | 89     | +0.0%  | 1.00x     
DropWhileAnyCollectionLazy                                | 116    | 116    | +0.0%  | 1.00x     
DropWhileAnySeqCRangeIter                                 | 68     | 68     | +0.0%  | 1.00x     
DropWhileAnySeqCRangeIterLazy                             | 116    | 116    | +0.0%  | 1.00x     
DropWhileAnySeqCntRange                                   | 85     | 85     | +0.0%  | 1.00x     
DropWhileAnySeqCntRangeLazy                               | 116    | 116    | +0.0%  | 1.00x     
DropWhileAnySequence                                      | 1669   | 1668   | -0.1%  | 1.00x (?) 
DropWhileAnySequenceLazy                                  | 1664   | 1663   | -0.1%  | 1.00x (?) 
DropWhileArrayLazy                                        | 79     | 79     | +0.0%  | 1.00x     
DropWhileCountableRange                                   | 32     | 32     | +0.0%  | 1.00x     
DropWhileCountableRangeLazy                               | 94     | 94     | +0.0%  | 1.00x     
DropWhileSequence                                         | 1991   | 1976   | -0.8%  | 1.01x     
DropWhileSequenceLazy                                     | 79     | 79     | +0.0%  | 1.00x     
EqualStringSubstring                                      | 45     | 46     | +2.2%  | 0.98x     
EqualSubstringString                                      | 45     | 45     | +0.0%  | 1.00x     
EqualSubstringSubstring                                   | 45     | 45     | +0.0%  | 1.00x     
EqualSubstringSubstringGenericEquatable                   | 45     | 45     | +0.0%  | 1.00x     
ErrorHandling                                             | 1067   | 1072   | +0.5%  | 1.00x (?) 
ExclusivityGlobal                                         | 5      | 5      | +0.0%  | 1.00x     
ExclusivityIndependent                                    | 2      | 2      | +0.0%  | 1.00x     
FatCompactMap                                             | 180240 | 179299 | -0.5%  | 1.01x     
FilterEvenUsingReduce                                     | 1163   | 1173   | +0.9%  | 0.99x (?) 
FilterEvenUsingReduceInto                                 | 131    | 133    | +1.5%  | 0.98x (?) 
FloatingPointPrinting_Double_description_small            | 19322  | 19304  | -0.1%  | 1.00x (?) 
FloatingPointPrinting_Double_description_uniform          | 18864  | 18862  | -0.0%  | 1.00x (?) 
FloatingPointPrinting_Double_interpolated                 | 55311  | 55373  | +0.1%  | 1.00x (?) 
FloatingPointPrinting_Float80_description_small           | 25487  | 25525  | +0.1%  | 1.00x (?) 
FloatingPointPrinting_Float80_description_uniform         | 24700  | 24636  | -0.3%  | 1.00x (?) 
FloatingPointPrinting_Float80_interpolated                | 58481  | 58660  | +0.3%  | 1.00x (?) 
FloatingPointPrinting_Float_description_small             | 4856   | 4948   | +1.9%  | 0.98x     
FloatingPointPrinting_Float_description_uniform           | 4825   | 5055   | +4.8%  | 0.95x     
FloatingPointPrinting_Float_interpolated                  | 34512  | 34722  | +0.6%  | 0.99x (?) 
FrequenciesUsingReduce                                    | 4337   | 4410   | +1.7%  | 0.98x (?) 
FrequenciesUsingReduceInto                                | 1341   | 1342   | +0.1%  | 1.00x (?) 
Hanoi                                                     | 1952   | 1924   | -1.4%  | 1.01x (?) 
HashTest                                                  | 832    | 837    | +0.6%  | 0.99x (?) 
Histogram                                                 | 635    | 627    | -1.3%  | 1.01x     
Integrate                                                 | 301    | 301    | +0.0%  | 1.00x     
IterateData                                               | 1353   | 1385   | +2.4%  | 0.98x     
Join                                                      | 150    | 151    | +0.7%  | 0.99x (?) 
LazilyFilteredArrayContains                               | 32881  | 32529  | -1.1%  | 1.01x (?) 
LazilyFilteredArrays                                      | 59009  | 58977  | -0.1%  | 1.00x (?) 
LazilyFilteredRange                                       | 3471   | 3458   | -0.4%  | 1.00x     
LessSubstringSubstring                                    | 45     | 45     | +0.0%  | 1.00x     
LessSubstringSubstringGenericComparable                   | 45     | 45     | +0.0%  | 1.00x     
LinkedList                                                | 6748   | 6745   | -0.0%  | 1.00x (?) 
LuhnAlgoEager                                             | 403    | 404    | +0.2%  | 1.00x (?) 
LuhnAlgoLazy                                              | 403    | 399    | -1.0%  | 1.01x (?) 
MapReduceAnyCollectionShort                               | 1820   | 1825   | +0.3%  | 1.00x (?) 
MapReduceClass                                            | 2692   | 2693   | +0.0%  | 1.00x (?) 
MapReduceClassShort                                       | 4146   | 4097   | -1.2%  | 1.01x (?) 
MapReduceLazyCollection                                   | 12     | 12     | +0.0%  | 1.00x     
MapReduceLazySequence                                     | 77     | 77     | +0.0%  | 1.00x     
MapReduceSequence                                         | 404    | 406    | +0.5%  | 1.00x (?) 
MapReduceShort                                            | 1784   | 1807   | +1.3%  | 0.99x (?) 
MapReduceShortString                                      | 18     | 18     | +0.0%  | 1.00x     
MapReduceString                                           | 43     | 43     | +0.0%  | 1.00x     
Memset                                                    | 191    | 193    | +1.0%  | 0.99x (?) 
MonteCarloE                                               | 9167   | 9298   | +1.4%  | 0.99x     
MonteCarloPi                                              | 38312  | 38415  | +0.3%  | 1.00x (?) 
NSDictionaryCastToSwift                                   | 5997   | 5988   | -0.2%  | 1.00x (?) 
NSError                                                   | 146    | 146    | +0.0%  | 1.00x     
NSStringConversion                                        | 635    | 623    | -1.9%  | 1.02x     
NibbleSort                                                | 3315   | 3288   | -0.8%  | 1.01x (?) 
ObjectAllocation                                          | 118    | 119    | +0.8%  | 0.99x (?) 
ObjectiveCBridgeFromNSArrayAnyObject                      | 21560  | 22124  | +2.6%  | 0.97x (?) 
ObjectiveCBridgeFromNSArrayAnyObjectForced                | 4146   | 4218   | +1.7%  | 0.98x (?) 
ObjectiveCBridgeFromNSArrayAnyObjectToString              | 41462  | 41177  | -0.7%  | 1.01x (?) 
ObjectiveCBridgeFromNSArrayAnyObjectToStringForced        | 39916  | 38172  | -4.4%  | 1.05x (?) 
ObjectiveCBridgeFromNSDictionaryAnyObject                 | 97711  | 100673 | +3.0%  | 0.97x (?) 
ObjectiveCBridgeFromNSSetAnyObject                        | 49668  | 50128  | +0.9%  | 0.99x (?) 
ObjectiveCBridgeFromNSSetAnyObjectForced                  | 4599   | 4579   | -0.4%  | 1.00x (?) 
ObjectiveCBridgeFromNSSetAnyObjectToString                | 65834  | 66559  | +1.1%  | 0.99x (?) 
ObjectiveCBridgeFromNSString                              | 1103   | 1117   | +1.3%  | 0.99x (?) 
ObjectiveCBridgeFromNSStringForced                        | 2427   | 2433   | +0.2%  | 1.00x (?) 
ObjectiveCBridgeStubDataAppend                            | 5633   | 5693   | +1.1%  | 0.99x (?) 
ObjectiveCBridgeStubDateMutation                          | 359    | 359    | +0.0%  | 1.00x     
ObjectiveCBridgeStubFromNSDate                            | 5530   | 5503   | -0.5%  | 1.00x (?) 
ObjectiveCBridgeStubFromNSString                          | 929    | 920    | -1.0%  | 1.01x (?) 
ObjectiveCBridgeStubFromNSStringRef                       | 142    | 142    | +0.0%  | 1.00x     
ObjectiveCBridgeStubNSDataAppend                          | 2314   | 2286   | -1.2%  | 1.01x (?) 
ObjectiveCBridgeStubNSDateMutationRef                     | 11645  | 11538  | -0.9%  | 1.01x (?) 
ObjectiveCBridgeStubToArrayOfNSString                     | 35453  | 35663  | +0.6%  | 0.99x (?) 
ObjectiveCBridgeStubToNSDate                              | 13412  | 13285  | -0.9%  | 1.01x (?) 
ObjectiveCBridgeStubToNSDateRef                           | 3058   | 3079   | +0.7%  | 0.99x (?) 
ObjectiveCBridgeStubToNSString                            | 2087   | 2093   | +0.3%  | 1.00x (?) 
ObjectiveCBridgeStubToNSStringRef                         | 103    | 101    | -1.9%  | 1.02x (?) 
ObjectiveCBridgeStubURLAppendPath                         | 245969 | 240667 | -2.2%  | 1.02x (?) 
ObjectiveCBridgeStubURLAppendPathRef                      | 247339 | 238770 | -3.5%  | 1.04x (?) 
ObjectiveCBridgeToNSArray                                 | 13233  | 12962  | -2.0%  | 1.02x (?) 
ObjectiveCBridgeToNSDictionary                            | 24053  | 23135  | -3.8%  | 1.04x (?) 
ObjectiveCBridgeToNSSet                                   | 15494  | 15563  | +0.4%  | 1.00x (?) 
ObjectiveCBridgeToNSString                                | 403    | 411    | +2.0%  | 0.98x (?) 
ObserverClosure                                           | 1910   | 1903   | -0.4%  | 1.00x (?) 
ObserverForwarderStruct                                   | 1034   | 1038   | +0.4%  | 1.00x (?) 
ObserverPartiallyAppliedMethod                            | 3293   | 3325   | +1.0%  | 0.99x (?) 
ObserverUnappliedMethod                                   | 2155   | 2168   | +0.6%  | 0.99x (?) 
OpaqueConsumingUsers                                      | 3748   | 3749   | +0.0%  | 1.00x (?) 
PartialApplyDynamicType                                   | 0      | 0      | +0.0%  | 1.00x     
Phonebook                                                 | 5970   | 6183   | +3.6%  | 0.97x     
PolymorphicCalls                                          | 22     | 22     | +0.0%  | 1.00x     
PopFrontArray                                             | 1706   | 1754   | +2.8%  | 0.97x (?) 
PopFrontArrayGeneric                                      | 1773   | 1766   | -0.4%  | 1.00x (?) 
PopFrontUnsafePointer                                     | 8167   | 8531   | +4.5%  | 0.96x (?) 
PrefixAnyCollection                                       | 68     | 68     | +0.0%  | 1.00x     
PrefixAnyCollectionLazy                                   | 57355  | 58168  | +1.4%  | 0.99x (?) 
PrefixAnySeqCRangeIter                                    | 35     | 35     | +0.0%  | 1.00x     
PrefixAnySeqCRangeIterLazy                                | 35     | 35     | +0.0%  | 1.00x     
PrefixAnySeqCntRange                                      | 64     | 64     | +0.0%  | 1.00x     
PrefixAnySeqCntRangeLazy                                  | 64     | 64     | +0.0%  | 1.00x     
PrefixAnySequence                                         | 1236   | 1236   | +0.0%  | 1.00x     
PrefixAnySequenceLazy                                     | 1236   | 1236   | +0.0%  | 1.00x     
PrefixArray                                               | 31     | 31     | +0.0%  | 1.00x     
PrefixArrayLazy                                           | 31     | 31     | +0.0%  | 1.00x     
PrefixCountableRange                                      | 31     | 31     | +0.0%  | 1.00x     
PrefixCountableRangeLazy                                  | 31     | 31     | +0.0%  | 1.00x     
PrefixSequence                                            | 1993   | 1989   | -0.2%  | 1.00x (?) 
PrefixSequenceLazy                                        | 2041   | 2041   | +0.0%  | 1.00x     
PrefixWhileAnyCollection                                  | 131    | 131    | +0.0%  | 1.00x     
PrefixWhileAnyCollectionLazy                              | 64     | 64     | +0.0%  | 1.00x     
PrefixWhileAnySeqCRangeIter                               | 340    | 340    | +0.0%  | 1.00x     
PrefixWhileAnySeqCRangeIterLazy                           | 79     | 79     | +0.0%  | 1.00x     
PrefixWhileAnySeqCntRange                                 | 127    | 127    | +0.0%  | 1.00x     
PrefixWhileAnySeqCntRangeLazy                             | 64     | 64     | +0.0%  | 1.00x     
PrefixWhileAnySequence                                    | 1374   | 1376   | +0.1%  | 1.00x (?) 
PrefixWhileAnySequenceLazy                                | 1248   | 1248   | +0.0%  | 1.00x     
PrefixWhileArray                                          | 79     | 79     | +0.0%  | 1.00x     
PrefixWhileArrayLazy                                      | 63     | 63     | +0.0%  | 1.00x     
PrefixWhileCountableRange                                 | 33     | 32     | -3.0%  | 1.03x     
PrefixWhileCountableRangeLazy                             | 31     | 31     | +0.0%  | 1.00x     
PrefixWhileSequence                                       | 319    | 319    | +0.0%  | 1.00x     
PrefixWhileSequenceLazy                                   | 47     | 47     | +0.0%  | 1.00x     
Prims                                                     | 803    | 803    | +0.0%  | 1.00x     
PrimsSplit                                                | 809    | 811    | +0.2%  | 1.00x (?) 
QueueConcrete                                             | 1024   | 1026   | +0.2%  | 1.00x (?) 
QueueGeneric                                              | 1025   | 1025   | +0.0%  | 1.00x     
RGBHistogram                                              | 2937   | 2888   | -1.7%  | 1.02x (?) 
RGBHistogramOfObjects                                     | 21152  | 21211  | +0.3%  | 1.00x (?) 
Radix2CooleyTukey                                         | 11060  | 10930  | -1.2%  | 1.01x (?) 
Radix2CooleyTukeyf                                        | 7918   | 7857   | -0.8%  | 1.01x (?) 
RandomDoubleDef                                           | 24184  | 23864  | -1.3%  | 1.01x (?) 
RandomIntegersDef                                         | 21859  | 22051  | +0.9%  | 0.99x (?) 
RandomShuffleDef                                          | 724408 | 726984 | +0.4%  | 1.00x (?) 
RangeAssignment                                           | 301    | 302    | +0.3%  | 1.00x (?) 
RangeIterationSigned                                      | 179    | 179    | +0.0%  | 1.00x     
RangeReplaceableCollectionPlusDefault                     | 901    | 901    | +0.0%  | 1.00x     
RecursiveOwnedParameter                                   | 103    | 103    | +0.0%  | 1.00x     
RemoveWhereFilterInts                                     | 41     | 41     | +0.0%  | 1.00x     
RemoveWhereFilterString                                   | 221    | 223    | +0.9%  | 0.99x (?) 
RemoveWhereFilterStrings                                  | 389    | 389    | +0.0%  | 1.00x     
RemoveWhereMoveInts                                       | 13     | 13     | +0.0%  | 1.00x     
RemoveWhereMoveStrings                                    | 633    | 635    | +0.3%  | 1.00x (?) 
RemoveWhereQuadraticInts                                  | 1158   | 1159   | +0.1%  | 1.00x (?) 
RemoveWhereQuadraticString                                | 338    | 330    | -2.4%  | 1.02x     
RemoveWhereQuadraticStrings                               | 2474   | 2476   | +0.1%  | 1.00x (?) 
RemoveWhereSwapInts                                       | 17     | 17     | +0.0%  | 1.00x     
RemoveWhereSwapStrings                                    | 770    | 769    | -0.1%  | 1.00x (?) 
ReversedArray                                             | 51     | 51     | +0.0%  | 1.00x     
ReversedBidirectional                                     | 15195  | 14980  | -1.4%  | 1.01x     
ReversedDictionary                                        | 204    | 204    | +0.0%  | 1.00x     
RomanNumbers                                              | 72497  | 74988  | +3.4%  | 0.97x     
SequenceAlgosAnySequence                                  | 10738  | 10715  | -0.2%  | 1.00x (?) 
SequenceAlgosArray                                        | 1386   | 1387   | +0.1%  | 1.00x (?) 
SequenceAlgosContiguousArray                              | 1386   | 1386   | +0.0%  | 1.00x     
SequenceAlgosList                                         | 1213   | 1214   | +0.1%  | 1.00x (?) 
SequenceAlgosRange                                        | 2311   | 2311   | +0.0%  | 1.00x     
SequenceAlgosUnfoldSequence                               | 988    | 989    | +0.1%  | 1.00x (?) 
SetExclusiveOr                                            | 4487   | 4466   | -0.5%  | 1.00x (?) 
SetExclusiveOr_OfObjects                                  | 10581  | 10563  | -0.2%  | 1.00x (?) 
SetIntersect                                              | 616    | 613    | -0.5%  | 1.00x (?) 
SetIntersect_OfObjects                                    | 1573   | 1566   | -0.4%  | 1.00x (?) 
SetIsSubsetOf                                             | 319    | 306    | -4.1%  | 1.04x (?) 
SetUnion                                                  | 3989   | 4009   | +0.5%  | 1.00x (?) 
SetUnion_OfObjects                                        | 9013   | 9045   | +0.4%  | 1.00x (?) 
SevenBoom                                                 | 748    | 748    | +0.0%  | 1.00x     
Sim2DArray                                                | 537    | 537    | +0.0%  | 1.00x     
SortLargeExistentials                                     | 4990   | 4996   | +0.1%  | 1.00x (?) 
SortLettersInPlace                                        | 889    | 888    | -0.1%  | 1.00x (?) 
SortSortedStrings                                         | 765    | 780    | +2.0%  | 0.98x     
SortStrings                                               | 1583   | 1602   | +1.2%  | 0.99x     
SortStringsUnicode                                        | 2275   | 2285   | +0.4%  | 1.00x (?) 
StackPromo                                                | 22332  | 22366  | +0.2%  | 1.00x (?) 
StaticArray                                               | 8      | 8      | +0.0%  | 1.00x     
StrComplexWalk                                            | 1593   | 1593   | +0.0%  | 1.00x     
StrToInt                                                  | 2846   | 2902   | +2.0%  | 0.98x     
StringAdder                                               | 491    | 507    | +3.3%  | 0.97x     
StringBuilder                                             | 412    | 423    | +2.7%  | 0.97x     
StringBuilderLong                                         | 1121   | 1120   | -0.1%  | 1.00x (?) 
StringBuilderSmallReservingCapacity                       | 424    | 436    | +2.8%  | 0.97x     
StringBuilderWithLongSubstring                            | 1290   | 1293   | +0.2%  | 1.00x (?) 
StringComparison_abnormal                                 | 705    | 696    | -1.3%  | 1.01x     
StringComparison_ascii                                    | 900    | 912    | +1.3%  | 0.99x     
StringComparison_emoji                                    | 771    | 766    | -0.6%  | 1.01x (?) 
StringComparison_latin1                                   | 590    | 604    | +2.4%  | 0.98x     
StringComparison_longSharedPrefix                         | 852    | 856    | +0.5%  | 1.00x     
StringComparison_nonBMPSlowestPrenormal                   | 1499   | 1495   | -0.3%  | 1.00x (?) 
StringComparison_slowerPrenormal                          | 1634   | 1617   | -1.0%  | 1.01x (?) 
StringComparison_zalgo                                    | 108888 | 109289 | +0.4%  | 1.00x (?) 
StringEdits                                               | 151326 | 154704 | +2.2%  | 0.98x (?) 
StringEnumRawValueInitialization                          | 771    | 770    | -0.1%  | 1.00x (?) 
StringEqualPointerComparison                              | 256    | 256    | +0.0%  | 1.00x     
StringFromLongWholeSubstring                              | 19     | 19     | +0.0%  | 1.00x     
StringFromLongWholeSubstringGeneric                       | 19     | 19     | +0.0%  | 1.00x     
StringHasPrefixAscii                                      | 2003   | 2029   | +1.3%  | 0.99x     
StringHasPrefixUnicode                                    | 89334  | 89485  | +0.2%  | 1.00x (?) 
StringHasSuffixAscii                                      | 2054   | 2080   | +1.3%  | 0.99x     
StringHasSuffixUnicode                                    | 90170  | 91019  | +0.9%  | 0.99x (?) 
StringInterpolation                                       | 8099   | 8115   | +0.2%  | 1.00x (?) 
StringInterpolationManySmallSegments                      | 16396  | 16521  | +0.8%  | 0.99x (?) 
StringInterpolationSmall                                  | 3806   | 3893   | +2.3%  | 0.98x (?) 
StringMatch                                               | 10751  | 10924  | +1.6%  | 0.98x     
StringRemoveDupes                                         | 426    | 430    | +0.9%  | 0.99x (?) 
StringUTF16Builder                                        | 2370   | 2392   | +0.9%  | 0.99x (?) 
StringUTF16SubstringBuilder                               | 5282   | 5246   | -0.7%  | 1.01x (?) 
StringWalk                                                | 1385   | 1406   | +1.5%  | 0.99x     
StringWordBuilder                                         | 2213   | 2237   | +1.1%  | 0.99x (?) 
StringWordBuilderReservingCapacity                        | 1681   | 1695   | +0.8%  | 0.99x     
SubstringComparable                                       | 12     | 12     | +0.0%  | 1.00x     
SubstringEqualString                                      | 569    | 567    | -0.4%  | 1.00x (?) 
SubstringEquatable                                        | 1344   | 1336   | -0.6%  | 1.01x (?) 
SubstringFromLongString                                   | 9      | 9      | +0.0%  | 1.00x     
SubstringFromLongStringGeneric                            | 66     | 66     | +0.0%  | 1.00x     
SuffixAnyCollection                                       | 25     | 25     | +0.0%  | 1.00x     
SuffixAnyCollectionLazy                                   | 19323  | 19417  | +0.5%  | 1.00x (?) 
SuffixAnySeqCRangeIter                                    | 3217   | 3205   | -0.4%  | 1.00x (?) 
SuffixAnySeqCRangeIterLazy                                | 3212   | 3204   | -0.2%  | 1.00x (?) 
SuffixAnySeqCntRange                                      | 15     | 15     | +0.0%  | 1.00x     
SuffixAnySeqCntRangeLazy                                  | 15     | 15     | +0.0%  | 1.00x     
SuffixAnySequence                                         | 4391   | 4407   | +0.4%  | 1.00x (?) 
SuffixAnySequenceLazy                                     | 4496   | 4506   | +0.2%  | 1.00x (?) 
SuffixCountableRange                                      | 10     | 10     | +0.0%  | 1.00x     
SuffixCountableRangeLazy                                  | 10     | 10     | +0.0%  | 1.00x     
SuffixSequence                                            | 3276   | 3264   | -0.4%  | 1.00x (?) 
SuffixSequenceLazy                                        | 3276   | 3265   | -0.3%  | 1.00x (?) 
SumUsingReduce                                            | 91     | 91     | +0.0%  | 1.00x     
SumUsingReduceInto                                        | 89     | 91     | +2.2%  | 0.98x (?) 
SuperChars                                                | 17923  | 17910  | -0.1%  | 1.00x (?) 
TwoSum                                                    | 1310   | 1332   | +1.7%  | 0.98x (?) 
TypeFlood                                                 | 0      | 0      | +0.0%  | 1.00x     
UTF8Decode                                                | 268    | 267    | -0.4%  | 1.00x (?) 
UTF8Decode_InitDecoding                                   | 1221   | 1221   | +0.0%  | 1.00x     
UTF8Decode_InitDecoding_ascii                             | 581    | 584    | +0.5%  | 0.99x (?) 
UTF8Decode_InitFromBytes                                  | 1067   | 1064   | -0.3%  | 1.00x (?) 
UTF8Decode_InitFromBytes_ascii                            | 439    | 432    | -1.6%  | 1.02x (?) 
UTF8Decode_InitFromData                                   | 1135   | 1129   | -0.5%  | 1.01x (?) 
UTF8Decode_InitFromData_ascii                             | 639    | 626    | -2.0%  | 1.02x (?) 
Walsh                                                     | 398    | 389    | -2.3%  | 1.02x     
WordCountHistogramASCII                                   | 7155   | 7207   | +0.7%  | 0.99x (?) 
WordCountHistogramUTF16                                   | 12945  | 13191  | +1.9%  | 0.98x (?) 
WordCountUniqueASCII                                      | 1850   | 1889   | +2.1%  | 0.98x (?) 
WordCountUniqueUTF16                                      | 6789   | 6790   | +0.0%  | 1.00x (?) 
WordSplitUTF16                                            | 8728   | 8952   | +2.6%  | 0.97x (?) 
XorLoop                                                   | 336    | 337    | +0.3%  | 1.00x (?) 

</details>

### Unoptimized (Onone)  


<details>
  <summary>Regression (7)</summary>
  
TEST                                                      | OLD     | NEW     | DELTA  | SPEEDUP   
---                                                       | ---     | ---     | ---    | ---       
ArrayOfPOD                                                | 678     | 759     | +11.9% | **0.89x** 
DataAppendDataMediumToSmall                               | 5265    | 5809    | +10.3% | **0.91x (?)** 
DataReplaceMediumBuffer                                   | 10475   | 11411   | +8.9%  | **0.92x (?)** 
MapReduceShortString                                      | 189     | 201     | +6.3%  | **0.94x** 
ObjectiveCBridgeFromNSStringForced                        | 2530    | 2690    | +6.3%  | **0.94x (?)** 
Dictionary3OfObjects                                      | 1941    | 2056    | +5.9%  | **0.94x (?)** 
EqualSubstringSubstringGenericEquatable                   | 53      | 56      | +5.7%  | **0.95x** 

</details>

<details  open>
  <summary>Improvement (12)</summary>
  
TEST                                                      | OLD     | NEW     | DELTA  | SPEEDUP   
---                                                       | ---     | ---     | ---    | ---       
TypeFlood                                                 | 206     | 176     | -14.6% | **1.17x (?)** 
CharacterPropertiesStashedMemo                            | 4432    | 3898    | -12.0% | **1.14x (?)** 
UTF8Decode_InitFromData_ascii                             | 749     | 665     | -11.2% | **1.13x (?)** 
DictionaryOfObjects                                       | 5711    | 5245    | -8.2%  | **1.09x** 
FloatingPointPrinting_Float80_interpolated                | 109484  | 101062  | -7.7%  | **1.08x (?)** 
SubstringFromLongString                                   | 14      | 13      | -7.1%  | **1.08x** 
FloatingPointPrinting_Float_interpolated                  | 64825   | 60458   | -6.7%  | **1.07x (?)** 
ObjectiveCBridgeToNSSet                                   | 17585   | 16612   | -5.5%  | **1.06x (?)** 
RandomShuffleLCG                                          | 1355274 | 1281166 | -5.5%  | **1.06x** 
ObjectiveCBridgeFromNSArrayAnyObjectToString              | 45786   | 43451   | -5.1%  | **1.05x (?)** 
NSDictionaryCastToSwift                                   | 7764    | 7374    | -5.0%  | **1.05x (?)** 
StringWalk                                                | 12027   | 11437   | -4.9%  | **1.05x** 

</details>

<details >
  <summary>No Changes (427)</summary>
  
TEST                                                      | OLD     | NEW     | DELTA  | SPEEDUP   
---                                                       | ---     | ---     | ---    | ---       
AngryPhonebook                                            | 4779    | 4727    | -1.1%  | 1.01x (?) 
AnyHashableWithAClass                                     | 92594   | 93078   | +0.5%  | 0.99x (?) 
Array2D                                                   | 553902  | 561489  | +1.4%  | 0.99x (?) 
ArrayAppend                                               | 4069    | 4069    | +0.0%  | 1.00x     
ArrayAppendArrayOfInt                                     | 727     | 729     | +0.3%  | 1.00x (?) 
ArrayAppendAscii                                          | 24006   | 23969   | -0.2%  | 1.00x (?) 
ArrayAppendAsciiSubstring                                 | 63215   | 63262   | +0.1%  | 1.00x (?) 
ArrayAppendFromGeneric                                    | 733     | 732     | -0.1%  | 1.00x (?) 
ArrayAppendGenericStructs                                 | 1275    | 1277    | +0.2%  | 1.00x (?) 
ArrayAppendLatin1                                         | 58657   | 58606   | -0.1%  | 1.00x (?) 
ArrayAppendLatin1Substring                                | 143654  | 143855  | +0.1%  | 1.00x (?) 
ArrayAppendLazyMap                                        | 149471  | 149945  | +0.3%  | 1.00x     
ArrayAppendOptionals                                      | 1281    | 1279    | -0.2%  | 1.00x (?) 
ArrayAppendRepeatCol                                      | 172430  | 176673  | +2.5%  | 0.98x     
ArrayAppendReserved                                       | 3834    | 3835    | +0.0%  | 1.00x (?) 
ArrayAppendSequence                                       | 94133   | 93804   | -0.3%  | 1.00x (?) 
ArrayAppendStrings                                        | 5730    | 5758    | +0.5%  | 1.00x (?) 
ArrayAppendToFromGeneric                                  | 734     | 734     | +0.0%  | 1.00x     
ArrayAppendToGeneric                                      | 738     | 739     | +0.1%  | 1.00x (?) 
ArrayAppendUTF16                                          | 58951   | 58801   | -0.3%  | 1.00x     
ArrayAppendUTF16Substring                                 | 141898  | 141995  | +0.1%  | 1.00x (?) 
ArrayInClass                                              | 5670    | 5702    | +0.6%  | 0.99x     
ArrayLiteral                                              | 1598    | 1601    | +0.2%  | 1.00x (?) 
ArrayOfGenericPOD2                                        | 1010    | 1062    | +5.1%  | 0.95x     
ArrayOfGenericRef                                         | 9458    | 9488    | +0.3%  | 1.00x (?) 
ArrayOfRef                                                | 8676    | 8646    | -0.3%  | 1.00x (?) 
ArrayPlusEqualArrayOfInt                                  | 733     | 735     | +0.3%  | 1.00x (?) 
ArrayPlusEqualFiveElementCollection                       | 203952  | 204666  | +0.4%  | 1.00x (?) 
ArrayPlusEqualSingleElementCollection                     | 201121  | 201246  | +0.1%  | 1.00x (?) 
ArrayPlusEqualThreeElements                               | 7979    | 7944    | -0.4%  | 1.00x (?) 
ArraySubscript                                            | 95075   | 95920   | +0.9%  | 0.99x     
ArrayValueProp                                            | 3285    | 3289    | +0.1%  | 1.00x (?) 
ArrayValueProp2                                           | 13369   | 13374   | +0.0%  | 1.00x (?) 
ArrayValueProp3                                           | 3808    | 3817    | +0.2%  | 1.00x (?) 
ArrayValueProp4                                           | 3732    | 3736    | +0.1%  | 1.00x (?) 
BinaryFloatingPointPropertiesBinade                       | 82      | 79      | -3.7%  | 1.04x     
BinaryFloatingPointPropertiesNextUp                       | 125     | 123     | -1.6%  | 1.02x     
BinaryFloatingPointPropertiesUlp                          | 118     | 117     | -0.8%  | 1.01x     
BitCount                                                  | 8169    | 8169    | +0.0%  | 1.00x     
ByteSwap                                                  | 8656    | 8693    | +0.4%  | 1.00x     
COWArrayGuaranteedParameterOverhead                       | 12594   | 12961   | +2.9%  | 0.97x (?) 
COWTree                                                   | 10484   | 10257   | -2.2%  | 1.02x (?) 
CSVParsing                                                | 2459602 | 2471700 | +0.5%  | 1.00x (?) 
CSVParsingAlt                                             | 1281407 | 1266541 | -1.2%  | 1.01x (?) 
CSVParsingAltIndices                                      | 2059677 | 2117772 | +2.8%  | 0.97x (?) 
CStringLongAscii                                          | 3763    | 3839    | +2.0%  | 0.98x     
CStringLongNonAscii                                       | 2232    | 2266    | +1.5%  | 0.98x (?) 
CStringShortAscii                                         | 5454    | 5510    | +1.0%  | 0.99x (?) 
Calculator                                                | 838     | 867     | +3.5%  | 0.97x     
CaptureProp                                               | 259687  | 258861  | -0.3%  | 1.00x     
ChainedFilterMap                                          | 206540  | 207556  | +0.5%  | 1.00x (?) 
CharIndexing_ascii_unicodeScalars                         | 290810  | 281894  | -3.1%  | 1.03x     
CharIndexing_ascii_unicodeScalars_Backwards               | 329944  | 314535  | -4.7%  | 1.05x (?) 
CharIndexing_chinese_unicodeScalars                       | 212896  | 212832  | -0.0%  | 1.00x (?) 
CharIndexing_chinese_unicodeScalars_Backwards             | 242250  | 240827  | -0.6%  | 1.01x (?) 
CharIndexing_japanese_unicodeScalars                      | 337130  | 338589  | +0.4%  | 1.00x (?) 
CharIndexing_japanese_unicodeScalars_Backwards            | 387682  | 380163  | -1.9%  | 1.02x (?) 
CharIndexing_korean_unicodeScalars                        | 272887  | 274087  | +0.4%  | 1.00x (?) 
CharIndexing_korean_unicodeScalars_Backwards              | 306842  | 304762  | -0.7%  | 1.01x (?) 
CharIndexing_punctuatedJapanese_unicodeScalars            | 49965   | 50286   | +0.6%  | 0.99x (?) 
CharIndexing_punctuatedJapanese_unicodeScalars_Backwards  | 55252   | 54524   | -1.3%  | 1.01x (?) 
CharIndexing_punctuated_unicodeScalars                    | 62997   | 63165   | +0.3%  | 1.00x (?) 
CharIndexing_punctuated_unicodeScalars_Backwards          | 72009   | 69289   | -3.8%  | 1.04x     
CharIndexing_russian_unicodeScalars                       | 235875  | 234414  | -0.6%  | 1.01x (?) 
CharIndexing_russian_unicodeScalars_Backwards             | 264626  | 261553  | -1.2%  | 1.01x (?) 
CharIndexing_tweet_unicodeScalars                         | 559913  | 565060  | +0.9%  | 0.99x (?) 
CharIndexing_tweet_unicodeScalars_Backwards               | 633982  | 626112  | -1.2%  | 1.01x (?) 
CharIndexing_utf16_unicodeScalars                         | 251653  | 247457  | -1.7%  | 1.02x (?) 
CharIndexing_utf16_unicodeScalars_Backwards               | 274626  | 269626  | -1.8%  | 1.02x     
CharIteration_ascii_unicodeScalars                        | 132177  | 130930  | -0.9%  | 1.01x     
CharIteration_ascii_unicodeScalars_Backwards              | 222878  | 223593  | +0.3%  | 1.00x (?) 
CharIteration_chinese_unicodeScalars                      | 100166  | 99005   | -1.2%  | 1.01x (?) 
CharIteration_chinese_unicodeScalars_Backwards            | 167973  | 167043  | -0.6%  | 1.01x (?) 
CharIteration_japanese_unicodeScalars                     | 157950  | 156385  | -1.0%  | 1.01x (?) 
CharIteration_japanese_unicodeScalars_Backwards           | 266957  | 265081  | -0.7%  | 1.01x (?) 
CharIteration_korean_unicodeScalars                       | 127686  | 126699  | -0.8%  | 1.01x (?) 
CharIteration_korean_unicodeScalars_Backwards             | 215061  | 213860  | -0.6%  | 1.01x (?) 
CharIteration_punctuatedJapanese_unicodeScalars           | 23517   | 23269   | -1.1%  | 1.01x (?) 
CharIteration_punctuatedJapanese_unicodeScalars_Backwards | 38793   | 38682   | -0.3%  | 1.00x (?) 
CharIteration_punctuated_unicodeScalars                   | 29498   | 29197   | -1.0%  | 1.01x     
CharIteration_punctuated_unicodeScalars_Backwards         | 49219   | 48702   | -1.1%  | 1.01x (?) 
CharIteration_russian_unicodeScalars                      | 110215  | 109040  | -1.1%  | 1.01x (?) 
CharIteration_russian_unicodeScalars_Backwards            | 185159  | 184108  | -0.6%  | 1.01x (?) 
CharIteration_tweet_unicodeScalars                        | 261092  | 258926  | -0.8%  | 1.01x     
CharIteration_tweet_unicodeScalars_Backwards              | 438833  | 435764  | -0.7%  | 1.01x (?) 
CharIteration_utf16_unicodeScalars                        | 113419  | 112256  | -1.0%  | 1.01x (?) 
CharIteration_utf16_unicodeScalars_Backwards              | 195808  | 192794  | -1.5%  | 1.02x (?) 
CharacterLiteralsLarge                                    | 5207    | 5174    | -0.6%  | 1.01x     
CharacterLiteralsSmall                                    | 612     | 612     | +0.0%  | 1.00x     
CharacterPropertiesFetch                                  | 5093    | 5267    | +3.4%  | 0.97x (?) 
CharacterPropertiesPrecomputed                            | 3176    | 3140    | -1.1%  | 1.01x (?) 
CharacterPropertiesStashed                                | 2108    | 2126    | +0.9%  | 0.99x (?) 
Chars                                                     | 31356   | 31393   | +0.1%  | 1.00x (?) 
ClassArrayGetter                                          | 867     | 863     | -0.5%  | 1.00x     
Combos                                                    | 1962    | 1914    | -2.4%  | 1.03x (?) 
DataAccessBytes                                           | 2101    | 2101    | +0.0%  | 1.00x     
DataAppendArray                                           | 4836    | 4763    | -1.5%  | 1.02x (?) 
DataAppendBytes                                           | 4415    | 4342    | -1.7%  | 1.02x (?) 
DataAppendDataLargeToLarge                                | 59563   | 60279   | +1.2%  | 0.99x (?) 
DataAppendDataLargeToMedium                               | 32125   | 31798   | -1.0%  | 1.01x (?) 
DataAppendDataLargeToSmall                                | 30906   | 30886   | -0.1%  | 1.00x (?) 
DataAppendDataMediumToLarge                               | 34461   | 34549   | +0.3%  | 1.00x (?) 
DataAppendDataMediumToMedium                              | 5882    | 5960    | +1.3%  | 0.99x (?) 
DataAppendDataSmallToLarge                                | 32734   | 32788   | +0.2%  | 1.00x (?) 
DataAppendDataSmallToMedium                               | 5461    | 5515    | +1.0%  | 0.99x (?) 
DataAppendDataSmallToSmall                                | 5364    | 5480    | +2.2%  | 0.98x (?) 
DataAppendSequence                                        | 1766975 | 1777533 | +0.6%  | 0.99x     
DataCopyBytes                                             | 404     | 408     | +1.0%  | 0.99x (?) 
DataCount                                                 | 200     | 200     | +0.0%  | 1.00x     
DataMutateBytes                                           | 4551    | 4712    | +3.5%  | 0.97x (?) 
DataReplaceLarge                                          | 34474   | 33189   | -3.7%  | 1.04x (?) 
DataReplaceLargeBuffer                                    | 51655   | 52027   | +0.7%  | 0.99x (?) 
DataReplaceMedium                                         | 7129    | 7241    | +1.6%  | 0.98x (?) 
DataReplaceSmall                                          | 5155    | 4941    | -4.2%  | 1.04x (?) 
DataReplaceSmallBuffer                                    | 7645    | 7919    | +3.6%  | 0.97x (?) 
DataReset                                                 | 2553    | 2544    | -0.4%  | 1.00x (?) 
DataSetCount                                              | 501     | 505     | +0.8%  | 0.99x (?) 
DataSubscript                                             | 398     | 398     | +0.0%  | 1.00x     
DictOfArraysToArrayOfDicts                                | 3048    | 3077    | +1.0%  | 0.99x (?) 
Dictionary                                                | 1934    | 1943    | +0.5%  | 1.00x (?) 
Dictionary2                                               | 1144    | 1153    | +0.8%  | 0.99x (?) 
Dictionary2OfObjects                                      | 3776    | 3775    | -0.0%  | 1.00x (?) 
Dictionary3                                               | 752     | 747     | -0.7%  | 1.01x (?) 
Dictionary4                                               | 1076    | 1072    | -0.4%  | 1.00x (?) 
Dictionary4Legacy                                         | 1341    | 1338    | -0.2%  | 1.00x (?) 
Dictionary4OfObjects                                      | 1593    | 1598    | +0.3%  | 1.00x (?) 
Dictionary4OfObjectsLegacy                                | 1935    | 1899    | -1.9%  | 1.02x (?) 
DictionaryBridge                                          | 1173    | 1161    | -1.0%  | 1.01x (?) 
DictionaryCopy                                            | 277272  | 274667  | -0.9%  | 1.01x     
DictionaryFilter                                          | 287947  | 286753  | -0.4%  | 1.00x (?) 
DictionaryGroup                                           | 3937    | 3963    | +0.7%  | 0.99x     
DictionaryGroupOfObjects                                  | 6140    | 6324    | +3.0%  | 0.97x (?) 
DictionaryKeysContainsCocoa                               | 63      | 60      | -4.8%  | 1.05x (?) 
DictionaryKeysContainsNative                              | 50      | 49      | -2.0%  | 1.02x (?) 
DictionaryLiteral                                         | 7658    | 7727    | +0.9%  | 0.99x     
DictionaryRemove                                          | 15105   | 15025   | -0.5%  | 1.01x     
DictionaryRemoveOfObjects                                 | 48710   | 48993   | +0.6%  | 0.99x (?) 
DictionarySubscriptDefaultMutation                        | 1767    | 1761    | -0.3%  | 1.00x (?) 
DictionarySubscriptDefaultMutationArray                   | 1998    | 1995    | -0.2%  | 1.00x (?) 
DictionarySubscriptDefaultMutationArrayOfObjects          | 8369    | 8363    | -0.1%  | 1.00x (?) 
DictionarySubscriptDefaultMutationOfObjects               | 4798    | 4765    | -0.7%  | 1.01x (?) 
DictionarySwap                                            | 4404    | 4357    | -1.1%  | 1.01x     
DictionarySwapAt                                          | 29281   | 29141   | -0.5%  | 1.00x (?) 
DictionarySwapAtOfObjects                                 | 100890  | 101672  | +0.8%  | 0.99x (?) 
DictionarySwapOfObjects                                   | 17805   | 17354   | -2.5%  | 1.03x (?) 
DoubleWidthDivision                                       | 0       | 0       | +0.0%  | 1.00x     
DropFirstAnyCollection                                    | 13949   | 14037   | +0.6%  | 0.99x     
DropFirstAnyCollectionLazy                                | 95377   | 98151   | +2.9%  | 0.97x (?) 
DropFirstAnySeqCRangeIter                                 | 21705   | 21653   | -0.2%  | 1.00x (?) 
DropFirstAnySeqCRangeIterLazy                             | 21607   | 21714   | +0.5%  | 1.00x     
DropFirstAnySeqCntRange                                   | 13925   | 13990   | +0.5%  | 1.00x (?) 
DropFirstAnySeqCntRangeLazy                               | 14067   | 14018   | -0.3%  | 1.00x     
DropFirstAnySequence                                      | 11780   | 11764   | -0.1%  | 1.00x (?) 
DropFirstAnySequenceLazy                                  | 11557   | 11476   | -0.7%  | 1.01x     
DropFirstArray                                            | 3116    | 3122    | +0.2%  | 1.00x (?) 
DropFirstArrayLazy                                        | 26561   | 26528   | -0.1%  | 1.00x (?) 
DropFirstCountableRange                                   | 314     | 310     | -1.3%  | 1.01x (?) 
DropFirstCountableRangeLazy                               | 31338   | 31189   | -0.5%  | 1.00x (?) 
DropFirstSequence                                         | 11475   | 11410   | -0.6%  | 1.01x (?) 
DropFirstSequenceLazy                                     | 11284   | 11205   | -0.7%  | 1.01x     
DropLastAnyCollection                                     | 4664    | 4697    | +0.7%  | 0.99x     
DropLastAnyCollectionLazy                                 | 31534   | 32670   | +3.6%  | 0.97x (?) 
DropLastAnySeqCRangeIter                                  | 35339   | 35476   | +0.4%  | 1.00x     
DropLastAnySeqCRangeIterLazy                              | 35245   | 35314   | +0.2%  | 1.00x (?) 
DropLastAnySeqCntRange                                    | 4640    | 4684    | +0.9%  | 0.99x     
DropLastAnySeqCntRangeLazy                                | 4700    | 4680    | -0.4%  | 1.00x (?) 
DropLastAnySequence                                       | 26298   | 26209   | -0.3%  | 1.00x (?) 
DropLastAnySequenceLazy                                   | 26531   | 26273   | -1.0%  | 1.01x     
DropLastCountableRange                                    | 111     | 107     | -3.6%  | 1.04x     
DropLastCountableRangeLazy                                | 10482   | 10401   | -0.8%  | 1.01x (?) 
DropLastSequence                                          | 26285   | 26086   | -0.8%  | 1.01x (?) 
DropLastSequenceLazy                                      | 26453   | 26231   | -0.8%  | 1.01x (?) 
DropWhileAnyCollection                                    | 18143   | 18111   | -0.2%  | 1.00x (?) 
DropWhileAnyCollectionLazy                                | 20413   | 20281   | -0.6%  | 1.01x     
DropWhileAnySeqCRangeIter                                 | 22287   | 22271   | -0.1%  | 1.00x (?) 
DropWhileAnySeqCRangeIterLazy                             | 20570   | 20270   | -1.5%  | 1.01x     
DropWhileAnySeqCntRange                                   | 18192   | 18114   | -0.4%  | 1.00x (?) 
DropWhileAnySeqCntRangeLazy                               | 20298   | 20156   | -0.7%  | 1.01x     
DropWhileAnySequence                                      | 12399   | 12441   | +0.3%  | 1.00x (?) 
DropWhileAnySequenceLazy                                  | 11145   | 11097   | -0.4%  | 1.00x (?) 
DropWhileArrayLazy                                        | 12431   | 12270   | -1.3%  | 1.01x (?) 
DropWhileCountableRange                                   | 4446    | 4406    | -0.9%  | 1.01x     
DropWhileCountableRangeLazy                               | 20027   | 19864   | -0.8%  | 1.01x     
DropWhileSequence                                         | 11974   | 12082   | +0.9%  | 0.99x (?) 
DropWhileSequenceLazy                                     | 10835   | 10773   | -0.6%  | 1.01x (?) 
EqualStringSubstring                                      | 66      | 69      | +4.5%  | 0.96x     
EqualSubstringString                                      | 67      | 67      | +0.0%  | 1.00x     
EqualSubstringSubstring                                   | 66      | 68      | +3.0%  | 0.97x     
ErrorHandling                                             | 4566    | 4662    | +2.1%  | 0.98x (?) 
ExclusivityGlobal                                         | 174     | 166     | -4.6%  | 1.05x     
ExclusivityIndependent                                    | 66      | 66      | +0.0%  | 1.00x     
FatCompactMap                                             | 262369  | 258311  | -1.5%  | 1.02x     
FilterEvenUsingReduce                                     | 3231    | 3223    | -0.2%  | 1.00x (?) 
FilterEvenUsingReduceInto                                 | 1649    | 1645    | -0.2%  | 1.00x (?) 
FloatingPointPrinting_Double_description_small            | 20026   | 20208   | +0.9%  | 0.99x (?) 
FloatingPointPrinting_Double_description_uniform          | 30503   | 30360   | -0.5%  | 1.00x (?) 
FloatingPointPrinting_Double_interpolated                 | 82426   | 83463   | +1.3%  | 0.99x (?) 
FloatingPointPrinting_Float80_description_small           | 26215   | 26300   | +0.3%  | 1.00x (?) 
FloatingPointPrinting_Float80_description_uniform         | 54376   | 52301   | -3.8%  | 1.04x (?) 
FloatingPointPrinting_Float_description_small             | 5905    | 5726    | -3.0%  | 1.03x     
FloatingPointPrinting_Float_description_uniform           | 15358   | 15249   | -0.7%  | 1.01x (?) 
FrequenciesUsingReduce                                    | 9310    | 9495    | +2.0%  | 0.98x     
FrequenciesUsingReduceInto                                | 2803    | 2803    | +0.0%  | 1.00x     
Hanoi                                                     | 17341   | 17295   | -0.3%  | 1.00x (?) 
HashTest                                                  | 18895   | 18677   | -1.2%  | 1.01x (?) 
Histogram                                                 | 5550    | 5503    | -0.8%  | 1.01x (?) 
Integrate                                                 | 526     | 526     | +0.0%  | 1.00x     
IterateData                                               | 4477    | 4461    | -0.4%  | 1.00x     
Join                                                      | 172     | 171     | -0.6%  | 1.01x     
LazilyFilteredArrayContains                               | 662428  | 665398  | +0.4%  | 1.00x     
LazilyFilteredArrays                                      | 1269205 | 1266891 | -0.2%  | 1.00x (?) 
LazilyFilteredRange                                       | 482595  | 479497  | -0.6%  | 1.01x     
LessSubstringSubstring                                    | 68      | 68      | +0.0%  | 1.00x     
LessSubstringSubstringGenericComparable                   | 52      | 52      | +0.0%  | 1.00x     
LinkedList                                                | 29037   | 29090   | +0.2%  | 1.00x (?) 
LuhnAlgoEager                                             | 5025    | 5033    | +0.2%  | 1.00x (?) 
LuhnAlgoLazy                                              | 5240    | 5137    | -2.0%  | 1.02x (?) 
MapReduce                                                 | 22549   | 22315   | -1.0%  | 1.01x (?) 
MapReduceAnyCollection                                    | 22533   | 22318   | -1.0%  | 1.01x     
MapReduceAnyCollectionShort                               | 32227   | 31497   | -2.3%  | 1.02x (?) 
MapReduceClass                                            | 26158   | 26059   | -0.4%  | 1.00x     
MapReduceClassShort                                       | 35641   | 35706   | +0.2%  | 1.00x (?) 
MapReduceLazyCollection                                   | 20079   | 20281   | +1.0%  | 0.99x     
MapReduceLazyCollectionShort                              | 29435   | 29902   | +1.6%  | 0.98x (?) 
MapReduceLazySequence                                     | 18525   | 18370   | -0.8%  | 1.01x     
MapReduceSequence                                         | 27255   | 26983   | -1.0%  | 1.01x     
MapReduceShort                                            | 32107   | 31743   | -1.1%  | 1.01x (?) 
MapReduceString                                           | 1539    | 1537    | -0.1%  | 1.00x (?) 
Memset                                                    | 40436   | 40413   | -0.1%  | 1.00x (?) 
MonteCarloE                                               | 1009128 | 1015539 | +0.6%  | 0.99x (?) 
MonteCarloPi                                              | 4592111 | 4604141 | +0.3%  | 1.00x     
NSError                                                   | 552     | 550     | -0.4%  | 1.00x (?) 
NSStringConversion                                        | 682     | 668     | -2.1%  | 1.02x     
NibbleSort                                                | 458328  | 460325  | +0.4%  | 1.00x (?) 
NopDeinit                                                 | 180153  | 172761  | -4.1%  | 1.04x     
ObjectAllocation                                          | 1115    | 1118    | +0.3%  | 1.00x (?) 
ObjectiveCBridgeFromNSArrayAnyObject                      | 24982   | 25923   | +3.8%  | 0.96x (?) 
ObjectiveCBridgeFromNSArrayAnyObjectForced                | 8443    | 8171    | -3.2%  | 1.03x (?) 
ObjectiveCBridgeFromNSArrayAnyObjectToStringForced        | 40712   | 42160   | +3.6%  | 0.97x (?) 
ObjectiveCBridgeFromNSDictionaryAnyObject                 | 103463  | 105511  | +2.0%  | 0.98x (?) 
ObjectiveCBridgeFromNSSetAnyObject                        | 53704   | 54297   | +1.1%  | 0.99x (?) 
ObjectiveCBridgeFromNSSetAnyObjectForced                  | 6210    | 6211    | +0.0%  | 1.00x (?) 
ObjectiveCBridgeFromNSSetAnyObjectToString                | 72794   | 72336   | -0.6%  | 1.01x (?) 
ObjectiveCBridgeFromNSString                              | 2625    | 2742    | +4.5%  | 0.96x (?) 
ObjectiveCBridgeStubDataAppend                            | 6071    | 6094    | +0.4%  | 1.00x     
ObjectiveCBridgeStubDateMutation                          | 696     | 696     | +0.0%  | 1.00x     
ObjectiveCBridgeStubFromArrayOfNSString                   | 30904   | 30280   | -2.0%  | 1.02x (?) 
ObjectiveCBridgeStubFromNSDate                            | 6149    | 6149    | +0.0%  | 1.00x     
ObjectiveCBridgeStubFromNSString                          | 978     | 982     | +0.4%  | 1.00x (?) 
ObjectiveCBridgeStubFromNSStringRef                       | 176     | 176     | +0.0%  | 1.00x     
ObjectiveCBridgeStubNSDataAppend                          | 2813    | 2731    | -2.9%  | 1.03x (?) 
ObjectiveCBridgeStubNSDateMutationRef                     | 14193   | 14238   | +0.3%  | 1.00x (?) 
ObjectiveCBridgeStubToArrayOfNSString                     | 35674   | 35828   | +0.4%  | 1.00x (?) 
ObjectiveCBridgeStubToNSDate                              | 14381   | 14628   | +1.7%  | 0.98x (?) 
ObjectiveCBridgeStubToNSDateRef                           | 3161    | 3113    | -1.5%  | 1.02x     
ObjectiveCBridgeStubToNSString                            | 2163    | 2166    | +0.1%  | 1.00x (?) 
ObjectiveCBridgeStubToNSStringRef                         | 137     | 138     | +0.7%  | 0.99x     
ObjectiveCBridgeStubURLAppendPath                         | 260566  | 266193  | +2.2%  | 0.98x (?) 
ObjectiveCBridgeStubURLAppendPathRef                      | 268640  | 270864  | +0.8%  | 0.99x (?) 
ObjectiveCBridgeToNSArray                                 | 14232   | 13841   | -2.7%  | 1.03x (?) 
ObjectiveCBridgeToNSDictionary                            | 25302   | 25075   | -0.9%  | 1.01x (?) 
ObjectiveCBridgeToNSString                                | 495     | 491     | -0.8%  | 1.01x (?) 
ObserverClosure                                           | 5787    | 5781    | -0.1%  | 1.00x (?) 
ObserverForwarderStruct                                   | 3933    | 3920    | -0.3%  | 1.00x (?) 
ObserverPartiallyAppliedMethod                            | 7078    | 7094    | +0.2%  | 1.00x (?) 
ObserverUnappliedMethod                                   | 7240    | 7245    | +0.1%  | 1.00x (?) 
OpaqueConsumingUsers                                      | 12035   | 12030   | -0.0%  | 1.00x (?) 
OpenClose                                                 | 486     | 474     | -2.5%  | 1.03x     
PartialApplyDynamicType                                   | 36927   | 37641   | +1.9%  | 0.98x (?) 
Phonebook                                                 | 13630   | 13870   | +1.8%  | 0.98x     
PointerArithmetics                                        | 105289  | 105304  | +0.0%  | 1.00x (?) 
PolymorphicCalls                                          | 2171    | 2176    | +0.2%  | 1.00x (?) 
PopFrontArray                                             | 4138    | 4169    | +0.7%  | 0.99x     
PopFrontArrayGeneric                                      | 4630    | 4661    | +0.7%  | 0.99x     
PopFrontUnsafePointer                                     | 10040   | 10058   | +0.2%  | 1.00x (?) 
PrefixAnyCollection                                       | 13940   | 14017   | +0.6%  | 0.99x (?) 
PrefixAnyCollectionLazy                                   | 98175   | 96976   | -1.2%  | 1.01x (?) 
PrefixAnySeqCRangeIter                                    | 17226   | 17056   | -1.0%  | 1.01x     
PrefixAnySeqCRangeIterLazy                                | 17221   | 17425   | +1.2%  | 0.99x (?) 
PrefixAnySeqCntRange                                      | 13912   | 13985   | +0.5%  | 0.99x     
PrefixAnySeqCntRangeLazy                                  | 14064   | 14067   | +0.0%  | 1.00x (?) 
PrefixAnySequence                                         | 9653    | 9592    | -0.6%  | 1.01x     
PrefixAnySequenceLazy                                     | 9538    | 9662    | +1.3%  | 0.99x     
PrefixArray                                               | 3119    | 3110    | -0.3%  | 1.00x     
PrefixArrayLazy                                           | 26539   | 26513   | -0.1%  | 1.00x (?) 
PrefixCountableRange                                      | 310     | 310     | +0.0%  | 1.00x     
PrefixCountableRangeLazy                                  | 31374   | 31194   | -0.6%  | 1.01x (?) 
PrefixSequence                                            | 9231    | 9228    | -0.0%  | 1.00x (?) 
PrefixSequenceLazy                                        | 9105    | 9147    | +0.5%  | 1.00x     
PrefixWhileAnyCollection                                  | 26180   | 26239   | +0.2%  | 1.00x     
PrefixWhileAnyCollectionLazy                              | 16937   | 16998   | +0.4%  | 1.00x (?) 
PrefixWhileAnySeqCRangeIter                               | 30047   | 30051   | +0.0%  | 1.00x (?) 
PrefixWhileAnySeqCRangeIterLazy                           | 16740   | 16774   | +0.2%  | 1.00x (?) 
PrefixWhileAnySeqCntRange                                 | 26483   | 26266   | -0.8%  | 1.01x     
PrefixWhileAnySeqCntRangeLazy                             | 16806   | 16908   | +0.6%  | 0.99x (?) 
PrefixWhileAnySequence                                    | 23264   | 23035   | -1.0%  | 1.01x (?) 
PrefixWhileAnySequenceLazy                                | 9964    | 9933    | -0.3%  | 1.00x (?) 
PrefixWhileArray                                          | 9293    | 9250    | -0.5%  | 1.00x (?) 
PrefixWhileArrayLazy                                      | 10879   | 10858   | -0.2%  | 1.00x     
PrefixWhileCountableRange                                 | 12484   | 12494   | +0.1%  | 1.00x (?) 
PrefixWhileCountableRangeLazy                             | 16772   | 16630   | -0.8%  | 1.01x     
PrefixWhileSequence                                       | 22849   | 22736   | -0.5%  | 1.00x (?) 
PrefixWhileSequenceLazy                                   | 9721    | 9610    | -1.1%  | 1.01x (?) 
Prims                                                     | 8285    | 8440    | +1.9%  | 0.98x (?) 
PrimsSplit                                                | 8411    | 8480    | +0.8%  | 0.99x (?) 
QueueConcrete                                             | 12528   | 12551   | +0.2%  | 1.00x     
QueueGeneric                                              | 16533   | 16583   | +0.3%  | 1.00x (?) 
RC4                                                       | 14539   | 14618   | +0.5%  | 0.99x     
RGBHistogram                                              | 20800   | 20695   | -0.5%  | 1.01x (?) 
RGBHistogramOfObjects                                     | 71536   | 71883   | +0.5%  | 1.00x (?) 
Radix2CooleyTukey                                         | 37493   | 37532   | +0.1%  | 1.00x (?) 
Radix2CooleyTukeyf                                        | 31613   | 31642   | +0.1%  | 1.00x (?) 
RandomDoubleDef                                           | 77710   | 75610   | -2.7%  | 1.03x (?) 
RandomDoubleLCG                                           | 54610   | 52977   | -3.0%  | 1.03x (?) 
RandomIntegersDef                                         | 40622   | 41303   | +1.7%  | 0.98x (?) 
RandomIntegersLCG                                         | 31634   | 31310   | -1.0%  | 1.01x (?) 
RandomShuffleDef                                          | 1954535 | 1957534 | +0.2%  | 1.00x (?) 
RangeAssignment                                           | 2486    | 2453    | -1.3%  | 1.01x (?) 
RangeIterationSigned                                      | 13295   | 13002   | -2.2%  | 1.02x (?) 
RangeReplaceableCollectionPlusDefault                     | 8918    | 9255    | +3.8%  | 0.96x (?) 
RecursiveOwnedParameter                                   | 5611    | 5605    | -0.1%  | 1.00x (?) 
RemoveWhereFilterInts                                     | 1856    | 1854    | -0.1%  | 1.00x (?) 
RemoveWhereFilterString                                   | 1198    | 1191    | -0.6%  | 1.01x     
RemoveWhereFilterStrings                                  | 2318    | 2315    | -0.1%  | 1.00x (?) 
RemoveWhereMoveInts                                       | 3002    | 3015    | +0.4%  | 1.00x (?) 
RemoveWhereMoveStrings                                    | 3482    | 3473    | -0.3%  | 1.00x     
RemoveWhereQuadraticInts                                  | 7583    | 7641    | +0.8%  | 0.99x (?) 
RemoveWhereQuadraticString                                | 2310    | 2309    | -0.0%  | 1.00x (?) 
RemoveWhereQuadraticStrings                               | 9028    | 9041    | +0.1%  | 1.00x (?) 
RemoveWhereSwapInts                                       | 5389    | 5465    | +1.4%  | 0.99x     
RemoveWhereSwapStrings                                    | 6045    | 6038    | -0.1%  | 1.00x (?) 
ReversedArray                                             | 11415   | 11361   | -0.5%  | 1.00x (?) 
ReversedBidirectional                                     | 40129   | 40434   | +0.8%  | 0.99x (?) 
ReversedDictionary                                        | 20302   | 20145   | -0.8%  | 1.01x (?) 
RomanNumbers                                              | 1187018 | 1177903 | -0.8%  | 1.01x (?) 
SequenceAlgosAnySequence                                  | 11868   | 11898   | +0.3%  | 1.00x     
SequenceAlgosArray                                        | 662819  | 656957  | -0.9%  | 1.01x     
SequenceAlgosContiguousArray                              | 267698  | 266654  | -0.4%  | 1.00x     
SequenceAlgosList                                         | 7870    | 7821    | -0.6%  | 1.01x     
SequenceAlgosRange                                        | 1164197 | 1166438 | +0.2%  | 1.00x     
SequenceAlgosUnfoldSequence                               | 5865    | 5788    | -1.3%  | 1.01x     
SetExclusiveOr                                            | 14656   | 14606   | -0.3%  | 1.00x     
SetExclusiveOr_OfObjects                                  | 37717   | 37706   | -0.0%  | 1.00x (?) 
SetIntersect                                              | 6142    | 6071    | -1.2%  | 1.01x     
SetIntersect_OfObjects                                    | 9693    | 9645    | -0.5%  | 1.00x (?) 
SetIsSubsetOf                                             | 1055    | 1054    | -0.1%  | 1.00x (?) 
SetIsSubsetOf_OfObjects                                   | 2034    | 2029    | -0.2%  | 1.00x (?) 
SetUnion                                                  | 10618   | 10582   | -0.3%  | 1.00x     
SetUnion_OfObjects                                        | 27097   | 27193   | +0.4%  | 1.00x (?) 
SevenBoom                                                 | 911     | 908     | -0.3%  | 1.00x (?) 
Sim2DArray                                                | 39311   | 39309   | -0.0%  | 1.00x (?) 
SortLargeExistentials                                     | 8724    | 8742    | +0.2%  | 1.00x (?) 
SortLettersInPlace                                        | 1409    | 1402    | -0.5%  | 1.00x (?) 
SortSortedStrings                                         | 792     | 820     | +3.5%  | 0.97x (?) 
SortStrings                                               | 1646    | 1701    | +3.3%  | 0.97x (?) 
SortStringsUnicode                                        | 2479    | 2483    | +0.2%  | 1.00x (?) 
StackPromo                                                | 86918   | 85731   | -1.4%  | 1.01x (?) 
StaticArray                                               | 2317    | 2361    | +1.9%  | 0.98x (?) 
StrComplexWalk                                            | 6131    | 6129    | -0.0%  | 1.00x (?) 
StrToInt                                                  | 70113   | 69611   | -0.7%  | 1.01x (?) 
StringAdder                                               | 656     | 675     | +2.9%  | 0.97x     
StringBuilder                                             | 4464    | 4502    | +0.9%  | 0.99x (?) 
StringBuilderLong                                         | 1280    | 1272    | -0.6%  | 1.01x (?) 
StringBuilderSmallReservingCapacity                       | 4467    | 4496    | +0.6%  | 0.99x (?) 
StringBuilderWithLongSubstring                            | 3060    | 2975    | -2.8%  | 1.03x (?) 
StringComparison_abnormal                                 | 1203    | 1193    | -0.8%  | 1.01x (?) 
StringComparison_ascii                                    | 7901    | 7937    | +0.5%  | 1.00x (?) 
StringComparison_emoji                                    | 1779    | 1779    | +0.0%  | 1.00x     
StringComparison_fastPrenormal                            | 4368    | 4473    | +2.4%  | 0.98x (?) 
StringComparison_latin1                                   | 3411    | 3387    | -0.7%  | 1.01x (?) 
StringComparison_longSharedPrefix                         | 2117    | 2102    | -0.7%  | 1.01x (?) 
StringComparison_nonBMPSlowestPrenormal                   | 3299    | 3305    | +0.2%  | 1.00x (?) 
StringComparison_slowerPrenormal                          | 3733    | 3702    | -0.8%  | 1.01x (?) 
StringComparison_zalgo                                    | 111603  | 111675  | +0.1%  | 1.00x (?) 
StringEdits                                               | 336909  | 335799  | -0.3%  | 1.00x (?) 
StringEnumRawValueInitialization                          | 18764   | 18918   | +0.8%  | 0.99x (?) 
StringEqualPointerComparison                              | 1498    | 1496    | -0.1%  | 1.00x (?) 
StringFromLongWholeSubstring                              | 20      | 20      | +0.0%  | 1.00x     
StringFromLongWholeSubstringGeneric                       | 178     | 176     | -1.1%  | 1.01x     
StringHasPrefixAscii                                      | 2875    | 2901    | +0.9%  | 0.99x     
StringHasPrefixUnicode                                    | 90194   | 91260   | +1.2%  | 0.99x (?) 
StringHasSuffixAscii                                      | 2964    | 2977    | +0.4%  | 1.00x (?) 
StringHasSuffixUnicode                                    | 91157   | 91641   | +0.5%  | 0.99x (?) 
StringInterpolation                                       | 10536   | 10907   | +3.5%  | 0.97x (?) 
StringInterpolationManySmallSegments                      | 16808   | 17071   | +1.6%  | 0.98x (?) 
StringInterpolationSmall                                  | 5503    | 5508    | +0.1%  | 1.00x (?) 
StringMatch                                               | 34515   | 34347   | -0.5%  | 1.00x (?) 
StringRemoveDupes                                         | 647     | 647     | +0.0%  | 1.00x     
StringUTF16Builder                                        | 6925    | 6938    | +0.2%  | 1.00x (?) 
StringUTF16SubstringBuilder                               | 19196   | 19503   | +1.6%  | 0.98x (?) 
StringWithCString                                         | 37058   | 38972   | +5.2%  | 0.95x     
StringWordBuilder                                         | 2166    | 2118    | -2.2%  | 1.02x (?) 
StringWordBuilderReservingCapacity                        | 1776    | 1789    | +0.7%  | 0.99x     
SubstringComparable                                       | 1412    | 1419    | +0.5%  | 1.00x (?) 
SubstringEqualString                                      | 1563    | 1548    | -1.0%  | 1.01x (?) 
SubstringEquatable                                        | 4894    | 4898    | +0.1%  | 1.00x (?) 
SubstringFromLongStringGeneric                            | 93      | 93      | +0.0%  | 1.00x     
SuffixAnyCollection                                       | 4671    | 4682    | +0.2%  | 1.00x     
SuffixAnyCollectionLazy                                   | 31822   | 33009   | +3.7%  | 0.96x (?) 
SuffixAnySeqCRangeIter                                    | 32119   | 32142   | +0.1%  | 1.00x (?) 
SuffixAnySeqCRangeIterLazy                                | 31812   | 31955   | +0.4%  | 1.00x (?) 
SuffixAnySeqCntRange                                      | 4651    | 4681    | +0.6%  | 0.99x     
SuffixAnySeqCntRangeLazy                                  | 4713    | 4685    | -0.6%  | 1.01x (?) 
SuffixAnySequence                                         | 22874   | 22692   | -0.8%  | 1.01x (?) 
SuffixAnySequenceLazy                                     | 22948   | 22729   | -1.0%  | 1.01x (?) 
SuffixCountableRange                                      | 108     | 107     | -0.9%  | 1.01x     
SuffixCountableRangeLazy                                  | 10470   | 10404   | -0.6%  | 1.01x (?) 
SuffixSequence                                            | 22641   | 22730   | +0.4%  | 1.00x     
SuffixSequenceLazy                                        | 22888   | 22549   | -1.5%  | 1.02x     
SumUsingReduce                                            | 140315  | 139833  | -0.3%  | 1.00x     
SumUsingReduceInto                                        | 134096  | 134056  | -0.0%  | 1.00x (?) 
SuperChars                                                | 81460   | 81452   | -0.0%  | 1.00x (?) 
TwoSum                                                    | 3100    | 3102    | +0.1%  | 1.00x (?) 
UTF8Decode                                                | 25920   | 25946   | +0.1%  | 1.00x (?) 
UTF8Decode_InitDecoding                                   | 1263    | 1265    | +0.2%  | 1.00x (?) 
UTF8Decode_InitDecoding_ascii                             | 781     | 784     | +0.4%  | 1.00x (?) 
UTF8Decode_InitFromBytes                                  | 1071    | 1089    | +1.7%  | 0.98x (?) 
UTF8Decode_InitFromBytes_ascii                            | 502     | 511     | +1.8%  | 0.98x (?) 
UTF8Decode_InitFromData                                   | 1163    | 1137    | -2.2%  | 1.02x (?) 
Walsh                                                     | 11146   | 11136   | -0.1%  | 1.00x (?) 
WordCountHistogramASCII                                   | 33324   | 33170   | -0.5%  | 1.00x     
WordCountHistogramUTF16                                   | 41539   | 41320   | -0.5%  | 1.01x (?) 
WordCountUniqueASCII                                      | 6243    | 6243    | +0.0%  | 1.00x     
WordCountUniqueUTF16                                      | 11732   | 11837   | +0.9%  | 0.99x (?) 
WordSplitASCII                                            | 10602   | 10737   | +1.3%  | 0.99x (?) 
WordSplitUTF16                                            | 12356   | 12518   | +1.3%  | 0.99x (?) 
XorLoop                                                   | 21347   | 21353   | +0.0%  | 1.00x (?) 

</details>

<details>
   <summary><strong>Hardware Overview</strong></summary>

      Model Name: Mac Pro
      Model Identifier: MacPro6,1
      Processor Name: 8-Core Intel Xeon E5
      Processor Speed: 3 GHz
      Number of Processors: 1
      Total Number of Cores: 8
      L2 Cache (per Core): 256 KB
      L3 Cache: 25 MB
      Memory: 64 GB
</details>

--------------Looks good! Hopefully we'll see some nice speedups.",Looks good! Hopefully we'll see some nice speedups.,"This is a continuation of https://github.com/apple/swift/pull/16863. @lorentey you said you weren't too worried about the `FixedWidthInteger._random()` implementation as it will soon use the new words initializer™, but I'm simply curious to see if this has any improvements for custom generators in any way. (Can you benchmark?)",
76257,2024-09-04T17:06:28Z,2024-11-14T14:18:00Z,AZero13,4,0,1,10,4,1,1,[],5903749.0,0,6145261.0,0,0,0,0,3744519.678457,,1,1,0,False,"['al45tair', 'AZero13']",@al45tair Thoughts on this? @swift-ci Please smoke test Nice @al45tair  Using `instancetype` is definitely an improvement. Thank-you for your contribution :-),,"<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->

This is more for consistency than anything else, really.",
77594,2024-11-13T19:53:45Z,2024-11-14T18:23:01Z,kubamracek,1,0,1,21,2,1,1,[],5186.0,0,80956.0,0,0,0,0,3750787.692682,,4,1,0,False,['kubamracek'],@swift-ci please test,,"Straightforward addition of `stdlib/public/core/IntegerParsing.swift` into the embedded stdlib.

rdar://139729135
",
77608,2024-11-14T07:15:31Z,2024-11-14T17:45:44Z,rintaro,2,0,2,132,3,1,1,[],30.0,0,38790.0,0,0,0,0,3752048.058088,,3,2,0,False,['rintaro'],"@swift-ci Please smoke test I _guess_ missing name happens mostly when the programmer just started writing the decl, or renaming them.
It's probably pretty rare to edit inside a decl without naming. but yeah it's possible. Let's revisit here after we finish the initial implementation!Seems a shame to throw away the entire decl, including e.g member and function bodies, though this does match the current C++ parser behavior. I do wonder whether it may be worth synthesizing unique decl names e.g `$errorDecl(N)` for these cases so we can continue to provide semantic functionality in member + function bodies, or whether that might cause confusion if the synthesized names end up in diagnostics.","Seems a shame to throw away the entire decl, including e.g member and function bodies, though this does match the current C++ parser behavior. I do wonder whether it may be worth synthesizing unique decl names e.g `$errorDecl(N)` for these cases so we can continue to provide semantic functionality in member + function bodies, or whether that might cause confusion if the synthesized names end up in diagnostics.","Value decls without the name are not valuable in AST. Don't bother to generate them.
",
77602,2024-11-14T00:02:14Z,2024-11-14T10:30:11Z,tshortli,1,0,1,34,4,1,1,[],8.0,0,59713.0,0,0,0,0,3757123.879695,,1,1,0,False,['tshortli'],@swift-ci please smoke test,,"Property descriptors for static properties were only recently introduced with SE-438. Since these symbols are not present in Swift libraries that were compiled with earlier versions of the compiler, it is not safe for `#_hasSymbol` to check for the property descriptor symbols, since they can be absent at either link time or runtime.

Resolves rdar://139749275.",
77611,2024-11-14T13:46:38Z,2024-11-14T17:34:19Z,egorzhdan,1,0,1,1,1,1,1,['c++ interop'],8.0,0,13662.0,0,0,0,0,3753711.16563,,2,1,0,False,['egorzhdan'],@swift-ci please smoke test,,"rdar://139839740

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77601,2024-11-13T23:15:46Z,2024-11-14T03:02:38Z,artemcm,1,0,1,7,1,1,1,[],10.0,0,60708.0,0,0,0,0,3758917.234505,,0,1,0,False,['artemcm'],@swift-ci smoke testThanks,Thanks,"Due to the ordering of our build system, we may encounter a race when building standard library variants using tools produced by Swift's 'tools' CMake build. As a workaround, for now, ensure that the compiler building standard library variants does not rely on libSwiftScan built as part of 'tools'.",
77571,2024-11-12T23:46:20Z,2024-11-14T15:44:19Z,meg-gupta,2,0,1,70,3,0,0,[],26.0,0,143880.0,0,0,0,0,3760313.072227,,3,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test,,"Unlike non-ossa, ossa's switch_enum accepts an argument for the default case When all other cases are unreachable, replace the default block's phi with the switch_enum's operand and transform the switch_enum to a branch.

Fixes rdar://139441002

",
77590,2024-11-13T19:05:55Z,2024-11-14T15:18:54Z,eeckstein,3,0,2,155,11,1,1,[],27.0,0,72784.0,0,0,0,0,3761834.245519,,2,2,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark @swift-ci testThanks!,Thanks!,"When replacing an `enum` - `unchecked_enum_data` pair and the enum's operand is another non-trivial enum which is constructed with a trivial payload, and this happens in different basic blocks, we need to insert a compensating `destroy_value`.

This peephole optimization was implemented both in SILCombine and as instruction simplification in the SwiftCompilerSources. Both implementations had the same problem. I fixed it in the instruction simplification and made the instruction simplification available in SILCombine. The old SILCombine implementation is not needed anymore.

Fixes a verifier crash
rdar://139787167",
77603,2024-11-14T00:18:56Z,2024-11-14T15:06:36Z,nate-chandler,3,0,4,98,8,0,0,[],18925.0,0,53264.0,0,0,0,0,3762573.390775,,0,4,0,False,['nate-chandler'],@swift-ci please test @swift-ci please apple silicon benchmark @swift-ci please test source compatibility,,"Fix TBDGen, an issue with devirtualization, and two issues with default synthesis.
",
77597,2024-11-13T20:50:22Z,2024-11-14T14:11:37Z,drexin,2,0,1,48,12,2,1,[],1189.0,0,62482.0,0,0,0,0,3765871.592213,,0,1,0,False,['drexin'],@swift-ci smoke test @swift-ci smoke testLGTM.  We'll have to remember to actually update the OS versions that provide Swift 6.1 when they're released.,LGTM.  We'll have to remember to actually update the OS versions that provide Swift 6.1 when they're released.,"rdar://139375022

CVW should not be generated when the deployment target does not have the necessary runtime functions.",
77445,2024-11-07T08:19:12Z,2024-11-14T13:09:21Z,CrazyFanFan,7,6,1,60,3,2,1,['c++ interop'],26462.0,0,622354.0,0,0,0,0,3769469.93017,,5,1,0,False,"['egorzhdan', 'CrazyFanFan']","@swift-ci please test @egorzhdan  It seems that the compilation failed on Linux. Is there an easy way to cross-compile to Linux from macOS? Thank you! 
 @CrazyFanFan I don't know any easy way to do that unfortunately. I would recommend using an Ubuntu VM to reproduce these issues, unless the reason is visible in the CI build log. @swift-ci please smoke test @egorzhdan  Thank you for your review. I have addressed all the comments, and everything has passed the unit tests on my local environment. @swift-ci please test @swift-ci please build toolchain Amazon Linux 2This looks awesome, thank you @CrazyFanFan!

I only have a couple of very minor code style comments, otherwise this patch is good to go. LGTM!","This looks awesome, thank you @CrazyFanFan!

I only have a couple of very minor code style comments, otherwise this patch is good to go. LGTM!","Allow removing elements from std::set/std::unordered_set in Swift.

 Resolves https://github.com/swiftlang/swift/issues/72799
","I think it should be possible to just call `self.erase(member)` if you add `func erase` method to the protocol. The original C++ `erase` method has an overload that should be usable from Swift without needing the unsafe underscored methods:

(4) at https://en.cppreference.com/w/cpp/container/set/erase @egorzhdan  Thank you for your response.   Here are some of my thoughts, please correct me if I am wrong:

To return the actual removed element, it is necessary to perform the `__findUnsafe` operation. Using `__eraseUnsafe` leverages the result of `__findUnsafe`. If we directly use func `erase`, it would involve two lookup operations due to both `erase` and `__findUnsafe` performing a query.
 Ah, you're correct, we would need to use the unsafe overload to get the removed element back. I think I would slightly prefer reusing `cxxInputIteratorProto` instead of introducing `cxxMutableInputIteratorProto`, that way it would be more clear to the reader that we're not checking the conformance to `UnsafeCxxMutableInputIterator`. Minor: we usually try to follow the code style of Swift stdlib, which assumes spelling out `self.` when calling a method, i.e. `self.__endUnsafe()` and `self.__eraseUnsafe()`. This doesn't change anything functionally, but makes it slightly easier to reason through the code. Minor: could you please insert a line break between `@inlinable` and `public`"
77580,2024-11-13T06:42:11Z,2024-11-14T11:19:17Z,DougGregor,5,7,6,309,34,3,0,[],6.0,0,113096.0,0,0,0,0,3766148.996047,,16,6,0,False,"['DougGregor', 'rintaro']","@swift-ci please smoke test While you are here, could you make the parsing use `ParseSourceFileRequest`? (rdar://139119159) @swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test",,"Introduce a number of fixes to allow us to fully use declarations that are produced by applying a peer macro to an imported declarations.

These changes include:
* Treating the source file containing `swift_attr` macros as one that stores macros, so we don't parse it as top-level code
* Ensuring that we have the right set of imports in the source file containing the macro expansion, because it depends only on the module it comes from
* Ensuring that name lookup looks in that file even when the DeclContext hierarchy doesn't contain the source file (because it's based on the Clang module structure)


Expand testing to be sure that we're getting the right calls, diagnostics, printing APIs, and generated IR symbols.","The comment above says ""We only care about macros, so skip everything else"", but aren't macros attributes in the grammar? I wouldn't expect us to skip `GeneratedSourceInfo::Attribute` here. Is it not possible to instead have `swift-ide-test` return an error code if the input has errors? That seems like a simpler solution. Not sure what effect they have, but it sounds like `--test-input-complete` or ` --typecheck` could be useful. The comment means ""we only care about macro expansion buffers."" I'll clarify it Could you move `.attribute` to `. memberAttributeMacroExpansion` branch below, it's still not implemented and doing the same thing, but just not to forget to move it later. Oh apparently, `swift_attr` accepts modifiers OR attributes, but `parseExpandedAttributeList` only accepts attributes? 🤔 

https://github.com/swiftlang/swift/blob/0bcd25189c5578167c1243f444d7704b073157be/lib/ClangImporter/ImportDecl.cpp#L8411-L8427 Yeah, and we have some things that are permitted but are neither attributes nor modifiers, which is odd. I'm going to have to think about this refactoring more. Okay, done!"
77598,2024-11-13T21:57:55Z,2024-11-14T04:30:49Z,rintaro,2,0,1,24,2,0,0,[],18.0,0,50186.0,0,0,0,0,3774116.807902,,4,1,0,False,"['hamishknight', 'rintaro']","@swift-ci Please smoke test IIRC at the time SwitchStmt hadn't been implemented, thanks!",,Not sure why this was missing..,
77587,2024-11-13T16:44:28Z,2024-11-14T06:17:40Z,eeckstein,2,0,1,141,3,0,0,[],30.0,0,48796.0,0,0,0,0,3794314.175298,,3,1,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark,,"Checking if an access base is derived from a begin-borrow was too optimistic. We have to bail for instructions which are not handled by the walker utilities.

Fixes a verifier crash.
rdar://139788357
",
77591,2024-11-13T19:19:04Z,2024-11-14T10:45:11Z,egorzhdan,1,0,1,8,3,1,1,['c++ interop'],15.0,0,55570.0,0,0,0,0,3778264.196677,,4,1,0,False,['egorzhdan'],@swift-ci please smoke test,,"This makes sure that different class template instantiations get distinct generated Swift type names.

Similar to aa6804a3.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77600,2024-11-13T22:14:10Z,2024-11-14T04:26:05Z,rjmccall,1,0,1,76,4,1,1,[],10.0,0,22320.0,0,0,0,0,3801010.308648,,1,1,0,False,['rjmccall'],"@swift-ci Please testNice, lgtm 👍 ","Nice, lgtm 👍 ","…if we're not in the async self-isolated actor initializer case.

Fixes rdar://138394497 and #71174, bugs where we didn't set up isolation correctly for an async parameter-isolated initializer, but also probably a non-trivial number of other latent differences between initializers and normal functions.",
75965,2024-08-19T20:33:03Z,2024-11-14T01:04:54Z,compnerd,15,4,1,60,2,3,2,[],10.0,0,7446712.0,0,0,0,0,3813085.632806,,0,1,0,False,['compnerd'],CC: @artemcm @etcwilde  @swift-ci please test @swift-ci please test Linux platform @swift-ci please test Linux platform @swift-ci please test macOS platform @swift-ci please test Linux platform @swift-ci please test Linux platform @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test Linux platform @swift-ci please test Linux platform @swift-ci please test macOS platform @swift-ci please test Windows platform,,"Windows has a strict limit on the file path, and use of extended names for the build is not possible. Rather than hardcoding the location of the early swift-driver build, allow the user to specify the path. If the path is specified, we will attempt to copy `swift-driver` and `swift-help` from that location. Adjust the code to account for the build executable suffix. This should allow Windows to experiment with an early swift-driver build.","Can we use `CMAKE_EXECUTABLE_SUFFIX`? It should match whatever we're building the frontend for. What if we are cross-compiling? Then nothing works anyway because we use this driver and the just-built swift-frontend later to build the stdlib.
At the very least, both the frontend and early swift driver should be built for the same thing. This seems like it should check that we're building the early swift driver.
You can forward the early swift driver flag in `utils/swift_build_support/swift_build_support/build_script_invocation.py` into the build-script-impl invocation.

You might be able to get a decent idea of what's going on from following the `--skip-build` flag or the zlib/libxml2/curl flags."
77116,2024-10-18T23:47:14Z,2024-11-14T00:39:45Z,bnbarham,11,0,1,172,6,1,1,[],18.0,0,2249559.0,0,0,0,0,3814587.640718,,2,1,0,False,['bnbarham'],"https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test @swift-ci please test https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test Windows platform https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test macOS platform https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test macOS platform https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test Windows platform https://github.com/swiftlang/llvm-project/pull/9140

@swift-ci please test Windows platform",,"`Hashing.h` is non-deterministic between runs. Update the index hashing to use BLAKE3 for the record hash. xxhash is faster in benchmarks that I've found, but there's no easy `HashBuilder` option for it today.",
72681,2024-03-28T21:48:34Z,2024-03-29T01:22:11Z,tshortli,5,0,1,66,6,2,2,[],15.0,0,19876380.0,0,0,0,0,3820488.369454,,3,1,0,False,"['FouadMagdy01', 'tshortli', 'drodriguez']","@swift-ci please smoke test Can you add a `REQUIRES: asserts` in `test/ModuleInterface/ExperimentalFeatures.swiftinterface` that was modified in #72632 ?

Otherwise it fails if one tries to run the tests in a noasserts compiler with:

```
<unknown>:0: error: unexpected error produced: experimental feature 'ParserRoundTrip' cannot be enabled in production compiler
<unknown>:0: error: diagnostic produced elsewhere: experimental feature 'ParserRoundTrip' cannot be enabled in production compiler
``` > Can you add a `REQUIRES: asserts` in `test/ModuleInterface/ExperimentalFeatures.swiftinterface` that was modified in #72632 ?
> 
> Otherwise it fails if one tries to run the tests in a noasserts compiler with:
> 
> ```
> <unknown>:0: error: unexpected error produced: experimental feature 'ParserRoundTrip' cannot be enabled in production compiler
> <unknown>:0: error: diagnostic produced elsewhere: experimental feature 'ParserRoundTrip' cannot be enabled in production compiler
> ```

This PR is fixing that issue you're reporting. Adding `REQUIRES: asserts` would defeat the purpose of the test; it is meant to validate that the test works in `no_asserts`, I just didn't accomplish that correctly on the first try. Sorry then, I misunderstood how the fix worked. > > Can you add a `REQUIRES: asserts` in `test/ModuleInterface/ExperimentalFeatures.swiftinterface` that was modified in #72632 ?
> > Otherwise it fails if one tries to run the tests in a noasserts compiler with:
> > ```
> > <unknown>:0: error: unexpected error produced: experimental feature 'ParserRoundTrip' cannot be enabled in production compiler
> > <unknown>:0: error: diagnostic produced elsewhere: experimental feature 'ParserRoundTrip' cannot be enabled in production compiler
> > ```
> 
> This PR is fixing that issue you're reporting. Adding `REQUIRES: asserts` would defeat the purpose of the test; it is meant to validate that the test works in `no_asserts`, I just didn't accomplish that correctly on the first try.

How did you solve this
I get this issue
`<unknown>:0: experimental feature 'OpaqueTypeErasure' cannot be enabled in a production compiler`",,"The fix for https://github.com/apple/swift/pull/72632 was not sufficient because when modules are built from textual interface that happens in a sub-invocation which does not have typecheck-from-interface or compile-from-interface requested action. Instead of checking a requested action, set a language option to control whether non-production experimental features are allowed.

Resolves rdar://125561443
",
77378,2024-11-05T01:01:19Z,2024-11-13T22:37:57Z,chrismiles,3,6,1,990,39,3,1,['playground transform'],426.0,1,769001.0,0,0,0,0,3821902.883849,,2,1,0,False,['chrismiles'],"@swift-ci Please smoke test I'm expecting a test failure with these changes, until https://github.com/swiftlang/swift/pull/77350 lands. @swift-ci Please smoke testLGTM, though it's of course unfortunate to have to spell out 5 and 6 in all the tests.  I know we don't have other options right now.  At least everything is normalized now.  Thank you!","LGTM, though it's of course unfortunate to have to spell out 5 and 6 in all the tests.  I know we don't have other options right now.  At least everything is normalized now.  Thank you!","PlaygroundTransform tests now compile test cases for both Swift language modes 5 and 6.

rdar://139244753","Would it make sense to use wildcards for the line numbers here also?  It looks as if that's what the other tests do.

I'm kind of on-the-fence but perhaps it would make sense to have a single focused test on correct lines and columns, and all the others using wildcards?  This one looks particular to async-let? Nit: you might consider `%target-typecheck-verify-swift` when `-typecheck` is involved and I think `-Xfrontend` is redundant since this is already a frontend invocation that is being invoked here. Maybe it's possible to use `RUN: %target-run-simple-swift` instead of build+codesign+run here? It might make sense, but I purposefully left the test logic unchanged.  I didn't want to make any assumptions about specific tests, as part of this change, until we have a chance to look at them individually. I like to keep the changes isolated to the purpose of the change. Good tip, thanks. Will update the test. Unfortunately not, as that macro removes %t which blows away the PlaygroundSupport module that was just built.

As a separate change, I'd like to look at crafting a PlaygroundTransform-specific macro that takes care of building PlaygroundSupport and linking it, as well as code signing and running.  That should clean things up quite a bit."
77578,2024-11-13T06:29:54Z,2024-11-13T21:37:06Z,tshortli,1,1,6,125,14,2,2,[],40924.0,0,54678.0,0,0,0,0,3825311.035145,,6,6,0,False,['tshortli'],@swift-ci please smoke testThanks!,Thanks!,There are a bunch of warnings emitted when building the runtime and some unit tests. Address or suppress them.,"Based on the structure of the test, it looks like this would usually be less than 500, but that's not going to make for a reliable test...."
77585,2024-11-13T16:26:13Z,2024-11-13T20:13:57Z,artemcm,1,0,1,9,1,2,2,[],7.0,0,13665.0,0,0,0,0,3830546.662135,,6,1,0,False,['artemcm'],@swift-ci smoke test,,"Previous behavior had the scanner simply proceed if the header input of a binary Swift module dependency could not be resolved on the filesystem

Resolves rdar://139736789",
77554,2024-11-12T12:41:23Z,2024-11-13T18:04:46Z,hamishknight,2,0,6,481,14,2,2,[],20944.0,0,105807.0,0,0,0,0,3838295.014743,,3,6,0,False,['hamishknight'],@swift-ci please test @swift-ci please test source compatibilityAvailability changes look good.,Availability changes look good.,"- Avoid calling `performStmtDiagnostics` in CSApply, instead leaving it up to the SyntacticDiagnosticWalker
- Ensure we run `performStmtDiagnostics` for `catch` clauses, including allowing the ambiguous where clause diagnostic to be emitted for it
- Cleanup `diagnoseStmtAvailability` + `ExprAvailabilityWalker` a bit
- Make sure we visit MacroExpansionDecl args, I missed this in #77534

Resolves #77453
Resolves #77553",
77583,2024-11-13T11:05:23Z,2024-11-13T17:51:45Z,eeckstein,1,0,1,27,2,1,1,[],15.0,0,24386.0,0,0,0,0,3839076.278541,,1,1,0,False,['eeckstein'],@swift-ci test,,"DCE cannot reason about values in memory.

Fixes a memory lifetime verification error
rdar://139779406
",
77574,2024-11-13T01:20:06Z,2024-11-13T16:54:59Z,allevato,1,0,1,93,8,1,1,[],11.0,0,56100.0,0,0,0,0,3842480.79933,,1,1,0,False,['allevato'],@swift-ci please smoke test,,"The `-include-submodules` flag causes the synthesized interface to include implicit Clang submodules of the module being printed. Since these are automatically made visible when importing the corresponding top-level module, it's often useful to have them present in the same synthesized Swift interface instead of having to make separate invocations to get each submodule separately.

The `-print-fully-qualified-types` causes type names to be printed with full module qualification. This is useful when using the synthesized interface for some other kind of analysis, because it ensures that all type references explicitly indicate which module they came from, instead of having to guess scoping and import resolution rules to figure out which module a reference comes from.
",
77564,2024-11-12T21:05:53Z,2024-11-13T15:16:47Z,aschwaighofer,5,0,1,84,5,0,0,[],7.0,0,65531.0,0,0,0,0,3848302.986233,,1,1,0,False,['aschwaighofer'],"@swift-ci test @swift-ci test source compatibility  @swift-ci test macOS Alternatively, we could managed the parameter types into the signature saving a little bit of code size. mangle",,rdar://136376117,
77572,2024-11-13T00:55:26Z,2024-11-13T08:07:56Z,nate-chandler,2,0,1,7,2,1,1,[],22.0,0,51207.0,0,0,0,0,3848854.381176,,0,1,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test linux platform,,"rdar://139759304
",
77582,2024-11-13T09:50:31Z,2024-11-13T13:44:47Z,eeckstein,1,0,1,9,1,0,0,[],17.0,0,18446.0,0,0,0,0,3849511.897376,,0,1,0,False,['eeckstein'],@swift-ci smoke test,,This is a follow-up of https://github.com/swiftlang/swift/pull/77527,
77581,2024-11-13T09:40:45Z,2024-11-13T14:57:43Z,eeckstein,1,0,1,187,26,1,1,[],23.0,0,19022.0,0,0,0,0,3849522.184442,,1,1,0,False,['eeckstein'],@swift-ci smoke test,,"It's redundant because only guaranteed phis can be reborrows.

Also keep supporting parsing the old `@reborrow @guaranteed` syntax.
",
77575,2024-11-13T01:21:47Z,2024-11-13T13:22:31Z,atrick,1,0,2,79,4,1,1,[],23732.0,0,43244.0,0,0,0,0,3855238.549267,,2,2,0,False,['atrick'],@swift-ci testlgtm,lgtm,And remove all trivial extend_lifetime instructions during the MoveOnlyWrappedTypeEliminator pass.,
77568,2024-11-12T22:06:30Z,2024-11-13T12:10:31Z,meg-gupta,2,0,1,49,2,1,1,[],20.0,0,50641.0,0,0,0,0,3859560.310723,,0,1,0,False,['meg-gupta'],Can be merged after https://github.com/swiftlang/swift/pull/77527 @swift-ci testlgtm,lgtm,"DCE inserts end_borrow at phi operands when a guaranteed phi becomes dead. This should be done only for reborrows which end the lifetime of the incoming value. The existing check was not accurate and ended up inserting end_borrow for forwarded values as well.

Fixes rdar://139283745

",
77561,2024-11-12T18:36:04Z,2024-11-13T00:25:41Z,hamishknight,1,0,1,35,1,1,1,[],6.0,0,61880.0,0,0,0,0,3860947.326281,,1,1,0,False,['hamishknight'],@swift-ci please testThanks!,Thanks!,,
77579,2024-11-13T06:39:33Z,2024-11-13T10:24:14Z,DougGregor,1,0,1,143,7,0,0,[],18.0,0,13482.0,0,0,0,0,3865936.866915,,5,1,0,False,['DougGregor'],@swift-ci please smoke test,,"This reverts commit 0aff85ced7346d5f115a764f5af2957452a3cfa4. This functionality is incomplete and not really needed, so remove it before it grows clients.
",
77566,2024-11-12T21:22:54Z,2024-11-13T06:02:00Z,etcwilde,1,0,3,36,5,2,2,[],12.0,0,31340.0,0,0,0,0,3881479.524664,,2,3,0,False,['etcwilde'],@swift-ci please smoke test,,"This patch set applies the appropriate fixes to ensure that the symbols exported from `swiftCore.dylib` match what is expected from the Apple builds, providing knobs to enable and disable the various features. I went through the list of relevant knobs that `add_swift_target_library` exposed and made them knobs for the swiftCore build instead, making it easier to enable and disable them depending on the goals of the vendor. I've also hidden the C/C++ symbols by default to ensure that we don't accidentally leak anything.",
77527,2024-11-11T17:10:53Z,2024-11-13T06:21:13Z,eeckstein,6,0,10,643,44,1,1,[],3941.0,0,133824.0,0,0,0,0,3880516.651317,,3,10,0,False,['eeckstein'],"@swift-ci test @swift-ci please test source compatibility @swift-ci benchmark
 @swift-ci test macos @swift-ci test @swift-ci benchmarkNice!

> With the new re-borrow flag computation, verification can fail before the re-borrow flags are updated at the end of the pass.

This sort of thing is unfortunate. A good goal is to be able to verify SIL immediately after every transformation, not just after a pass. Otherwise, we don't know what SIL utilities are valid within the pass. I wonder why your other fixes are not sufficient to keep the reborrow flags in a valid state during LoopRotate. It should be enough to avoid rotating if a begin_borrow has no scope-ending uses and then to automatically update the reborrow flag when creating the new phi.
","Nice!

> With the new re-borrow flag computation, verification can fail before the re-borrow flags are updated at the end of the pass.

This sort of thing is unfortunate. A good goal is to be able to verify SIL immediately after every transformation, not just after a pass. Otherwise, we don't know what SIL utilities are valid within the pass. I wonder why your other fixes are not sufficient to keep the reborrow flags in a valid state during LoopRotate. It should be enough to avoid rotating if a begin_borrow has no scope-ending uses and then to automatically update the reborrow flag when creating the new phi.
","Re-borrow flags were computed based on the presence of forwarding instructions in the incoming values.
This is not correct in all cases, because optimizations can optimize away forwarding instructions.

Now, compute the re-borrow flags based on the presence of an end_borrow in the transitive uses.
To do this:
1.  Automatically set the re-borrow flags for phi-arguments when creating an `end_borrow` or setting the operand of an `end_borrow`. This already  catches most of the cases.
2. For some optimizations it's required to explicitly update the re-borrow flags. This is done in `updateAllBorrowArguments` and `updateBorrowArguments`.

Re-borrow flags are only set, but never cleared. If an optimization creates a dead-end block by cutting off the control flow before an end_borrow, the re-borrow flags still have to remain without the possibility to re-calculate them from the (now missing) end_borrows.

Fixes a verifier crash: rdar://139280579",
77576,2024-11-13T01:30:41Z,2024-11-13T05:27:46Z,tshortli,1,0,1,7,2,0,0,[],12.0,0,16431.0,0,0,0,0,3881522.630357,,1,1,0,False,['tshortli'],@swift-ci please smoke test,,"When lazy typechecking is enabled, extensions that do not typecheck can make it to TBDGen, which would crash during its AST walk because `SILSymbolVisitor` tried to dereference the null nominal type for the extension.

Resolves rdar://139320515.
",
77560,2024-11-12T17:37:22Z,2024-11-13T06:03:51Z,eeckstein,3,1,1,74,2,2,2,[],23.0,0,44793.0,0,0,0,0,3881561.068065,,0,1,0,False,['eeckstein'],@swift-ci test @swift-ci benchmark @swift-ci testThanks! Thanks!,Thanks! Thanks!,"Make sure that an enum is only initialized once before it is taken. This implies that the initialization must dominate the take.

Fixes a verifier crash: rdar://139381701
",Unrelated to PR: we can ignore `debug_value` as well here. 
77573,2024-11-13T00:55:52Z,2024-11-13T04:42:14Z,tshortli,1,0,1,68,1,0,0,[],9.0,0,13583.0,0,0,0,0,3886461.088197,,3,1,0,False,['tshortli'],@swift-ci please smoke test,,"Also, test property wrapper availability diagnostics on wrapped local vars.

Inspired by https://github.com/swiftlang/swift/issues/63139, though it doesn't seem to reproduce.
",
77569,2024-11-12T23:13:34Z,2024-11-13T03:29:28Z,drexin,1,0,1,50,2,1,1,[],6.0,0,15355.0,0,0,0,0,3890827.927892,,1,1,0,False,['drexin'],@swift-ci smoke test,,"…ble in CVW runtime

rdar://139708680

The entry was missing in the function table, causing runtime crashes.",
77570,2024-11-12T23:24:01Z,2024-11-13T03:15:31Z,tshortli,1,0,1,94,2,0,0,[],9.0,0,13890.0,0,0,0,0,3891667.139883,,0,1,0,False,['tshortli'],@swift-ci please smoke test,,,
76588,2024-09-19T22:47:14Z,2024-11-13T02:38:41Z,meg-gupta,14,4,8,110,22,3,2,[],1603.0,0,4679487.0,1,0,0,0,3893877.681297,,18,8,0,False,['meg-gupta'],"@swift-ci test @swift-ci test macOS platform  @swift-ci smoke test macOS platform @swift-ci smoke test macOS platform @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci testI only have a few comments on the changes to C++ interop. The C++ interop changes LGTM now, thanks!
I haven't reviewed the rest of the PR. LGTM","I only have a few comments on the changes to C++ interop. The C++ interop changes LGTM now, thanks!
I haven't reviewed the rest of the PR. LGTM",Lifetime dependence inference runs on all function results that are ~Escapable. It was guarded by the NonEscapable feature flag. This PR removes the feature guard. This should theoretically be an NFC because ~Escapable types are flagged by Sema without the feature flag.,"This makes the entire function not available in Swift, but I don't think that's what we really want (and that would be a source compatibility breakage). I think we should just drop the default expression for this parameter by adding `&& !isTemplated` to the if-condition above. Could we check for `isa<clang::FunctionTemplateDecl>(param->getDeclContext())` instead of having an extra `isTemplated` parameter? Done Done."
77541,2024-11-11T22:58:03Z,2024-11-12T23:58:33Z,artemcm,2,0,2,10,2,0,0,[],6.0,0,91778.0,0,0,0,0,3901738.181477,,2,2,0,False,['artemcm'],@swift-ci test @swift-ci test,,"It appears that 'swiftCore' and following associated 'embedded-stdlib-*' targets may begin building before the libSwiftScan library has completed building, which may cause crashes if the compiler process building 'swiftCore' attempts to load it.

Resolves rdar://137674862",
77563,2024-11-12T19:18:19Z,2024-11-12T23:21:19Z,tshortli,2,2,4,967,27,2,1,[],15.0,0,14958.0,0,0,0,0,3905343.579656,,4,4,0,False,['tshortli'],@swift-ci please smoke test @swift-ci please smoke testCool! ,Cool! ,"Clarify the role `TypeRefinementContext` by renaming it to `AvailabilityScope`. There are a few reasons for doing this, despite the churn:

- `TypeRefinementContext` is a fairly broad name that doesn't provide much of a hint about the primary purpose of this structure for most contributors. Having `Availability` in the name is clarifying.
- This better aligns the names of files related to availability checking for code owner rules and file navigation.
- This infrastructure is already being heavily refactored, so it's a relatively good time to rename it.
- `AvailabilityScope` is evocative of `ASTScope`, which is useful because the two represent very similar concepts and have similar structures.
- The name ""context"" is overused in the compiler. Using ""scope"" instead allows us to use more distinct names in local variables, for example, which can clarify the code.",Please also update `Options.swift` in [swift-driver](https://github.com/swiftlang/swift-driver).  https://github.com/swiftlang/swift-driver/pull/1728
77557,2024-11-12T15:41:13Z,2024-11-12T22:50:09Z,jansvoboda11,2,0,1,11,2,1,1,[],24.0,0,25738.0,0,0,0,0,3907589.864122,,6,1,0,False,['jansvoboda11'],"https://github.com/swiftlang/llvm-project/pull/9573
@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9573
@swift-ci please smoke test",,Makes Swift correctly build with https://github.com/swiftlang/llvm-project/pull/9573.,
77538,2024-11-11T20:37:13Z,2024-11-12T21:59:39Z,xymus,2,0,1,40,2,1,1,[],7.0,0,91350.0,0,0,0,0,3910618.438668,,3,1,0,False,['xymus'],@swift-ci Please smoke test @swift-ci Please smoke test,,"Importing a clang submodule from Swift implies importing the top-level module too. We make sure we don't warn on the import of the top-level module as being unused when the submodule is used by associating all references to the top-level module instead of submodules. This change applies the same logic for transitive imports, marking the import of the top-level module as used instead of the submodule with the `export *`.

In the updated test, this silences the following warning:
```
public import of 'ClangReexportedSubmodulePublic' was not used in public
declarations or inlinable code
```

rdar://139492772",
77548,2024-11-12T04:36:17Z,2024-11-12T12:40:42Z,glessard,1,0,1,72,2,2,1,[],21.0,0,61281.0,0,0,0,0,3911944.648857,,0,1,0,False,['glessard'],@swift-ci please smoke testThanks!,Thanks!,"In the initial `Span` pull request (https://github.com/swiftlang/swift/pull/76406,) the underscored initializers returned ""immortal"" instances due to a gap in the new parser. Now that the parser is fixed (https://github.com/swiftlang/swift-syntax/pull/2894,) this annotates the initializers with the correct lifetime.

Addresses rdar://139668469",
77476,2024-11-08T04:55:38Z,2024-11-12T21:34:12Z,hborla,7,0,7,363,12,2,2,[],7.0,0,405517.0,0,0,0,0,3912147.914638,,0,7,0,False,"['DougGregor', 'hborla']","@swift-ci please test ```
/Users/ec2-user/jenkins/workspace/swift-PR-macos/branch-release/6.0/swift/test/Concurrency/predates_concurrency_swift6.swift:183:25: error: expected note not produced
class NotSendable {} // expected-note 2 {{class 'NotSendable' does not conform to the 'Sendable' protocol}}
                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    
/Users/ec2-user/jenkins/workspace/swift-PR-macos/branch-release/6.0/swift/test/Concurrency/predates_concurrency_swift6.swift:190:6: error: expected warning not produced
  // expected-warning@-1 {{type 'NotSendable' does not conform to the 'Sendable' protocol}}
~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``` Heh, on `release/6.0`, predates_concurrency_swift6.swift passes `-disable-availability-checking`

```
// RUN: %target-swift-frontend -disable-availability-checking -swift-version 6 %s -emit-sil -o /dev/null -verify
``` @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test",,"- **Explanation**: Sendable violations inside `@preconcurrency @Sendable` closures, or not satisfying a `Sendable` conformance requirement of a `@preconcurrency` generic declaration, should be suppressed in minimal checking, and diagnosed as warnings under complete checking, including the Swift 6 language mode. This change fixes an issue where warnings were still produced in minimal checking, and errors were still produced under -swift-version 6, which means that libraries cannot stage in new Sendable annotations if their clients have already migrated to Swift 6.
- **Scope**: This only impacts the diagnostic behavior of `@preconcurrency` declarations with `@Sendable` annotations or `where T: Sendable` generic requirements.
- **Issues**: rdar://138535438, rdar://139234188, https://github.com/swiftlang/swift/issues/76652
- **Original PRs**: https://github.com/swiftlang/swift/pull/77459, https://github.com/swiftlang/swift/pull/77510
- **Risk**: Low. While this change required a little bit of plumbing for whether a `Sendable` annotation was on a `@preconcurrency` declaration, the only effect of this change is downgrading some concurrency diagnostics.
- **Testing**: Added new CI tests.",
77549,2024-11-12T05:06:42Z,2024-11-12T20:51:20Z,glessard,3,0,1,18,2,1,1,[],9.0,0,56682.0,0,0,0,0,3914719.596965,,0,1,0,False,"['glessard', 'stephentyrone']","@swift-ci please test Looks good, thanks.

I do have a question of whether we need to no-op these out when source.isEmpty or we can allow that case to fall through, which I think boils down to a question about the semantics of `Builtin.assignCopyArrayFrontToBack` and friends. I asked Andy and Arnold to weigh in on that on slack.

There's one comment that implies that it's OK:
```
// This builtin is equivalent to:
// for i in 0..<count {
//   self[i] = source[i]
// }
```
but I'm not certain that this comment intended to document the behavior in the count == 0 case. Ok, clarified that `count == 0` is OK, here, please merge.",,"Writing these functions with calls through optional chaining (the `?` operator) meant that an extra `nil` check could never be elided from code that uses them. We replace the `?` operator with `unsafelyUnwrapped` instead, providing safety in debug mode in the presence of a malformed `UnsafeMutableBufferPointer`, while eliding the nil check in release mode.",
77555,2024-11-12T14:58:54Z,2024-11-12T18:43:52Z,egorzhdan,1,0,1,24,1,1,1,['c++ interop'],6.0,0,13499.0,0,0,0,0,3922372.254667,,4,1,0,False,['egorzhdan'],@swift-ci please smoke testLGTM!,LGTM!,"We were searching for types in the Swift stdlib by name, just to get the names back from the types. Let's just return the type name without performing the search.

No user-facing change intended.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
76891,2024-10-07T17:39:40Z,2024-11-12T19:47:24Z,natecook1000,9,4,7,331,6,4,1,[],15.0,0,3118066.0,0,0,0,0,3918559.2895,,1,7,0,False,"['natecook1000', 'stephentyrone']",@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test macOS platform @swift-ci Please smoke test @swift-ci Please smoke test Linux platform Can we add a simple benchmark so that a change that hides this overload will get flagged? @swift-ci Please benchmark @swift-ci Please smoke test @swift-ci test Linux,,"The _StringProcessing module provides a generic, collection-based `contains` method that performs poorly for ranges and closed ranges. This addresses the primary issue by providing concrete overloads for Range and ClosedRange which match the expected performance for these operations.

This change also fixes an issue with the existing range overlap tests. The generated `(Closed)Range.overlap` tests are ignoring the ""other"" range type when generating ranges for testing, so all overlap tests are only being run against ranges of the same type. This fixes things so that heterogeneous testing is included.
","You can remove both of these attributes and just use `@_alwaysEmitIntoClient`. Done 👍🏻 ```suggestion
//===--- RangeContains.swift ----------------------------------------------===//
``` ```suggestion
// Copyright (c) 2024 Apple Inc. and the Swift project authors
```"
77546,2024-11-12T01:02:55Z,2024-11-12T18:40:52Z,nate-chandler,3,0,3,222,9,0,0,[],5503.0,0,63480.0,0,0,0,0,3922551.028402,,10,3,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark,,"They are mutually exclusive.
",
77536,2024-11-11T19:41:16Z,2024-11-11T22:33:40Z,hjyamauchi,5,0,1,5,1,1,1,[],18.0,0,80863.0,0,0,0,0,3924468.703574,,0,1,0,False,"['shahmishal', 'hjyamauchi']","@swift-ci please test This was fixed: https://github.com/swiftlang/swift/pull/77489 Hi @shahmishal 

The cross repo testing didn't work for me on `release/5.10` after https://github.com/swiftlang/swift/pull/77489.

We think this additional cherrypick of https://github.com/swiftlang/swift/pull/74955 is necessary. Without that, the [regex](https://github.com/swiftlang/swift/blame/7ae74fba21a7a7967a26a44c06cb08b7b9edc98d/utils/update_checkout/update_checkout/update_checkout.py#L678) looks for `apple/xxx` (like `apple/llvm-project`) while [the lookup](https://github.com/swiftlang/swift/blame/7ae74fba21a7a7967a26a44c06cb08b7b9edc98d/utils/update_checkout/update_checkout/update_checkout.py#L135) won't later match the updated repo id `swiftlang/llvm-project`.

CC @compnerd  Thanks @hjyamauchi!  I was able to confirm that this works now! TY @shahmishal ",,"  - **Explanation**: This cherrypick is necessary for the cross-repo testing on the `release/5.10` CI to work because the repo ID of the `llvm-project` changed from `apple/llvm-project` to `swiftlang/llvm-project` as a result of  https://github.com/swiftlang/swift/pull/77489
    <!--
    A description of the changes. This can be brief, but it should be clear.
    -->
  - **Scope**: The cross-repo testing in `release/5.10`.
    <!--
    An assessment of the impact and importance of the changes. For example, can
    the changes break existing code?
    -->
  - **Issues**: https://github.com/swiftlang/swift/issues/77535
    <!--
    References to issues the changes resolve, if any.
    -->
  - **Original PRs**:
    - https://github.com/swiftlang/swift/pull/74955
    <!--
    Links to mainline branch pull requests in which the changes originated.
    -->
  - **Risk**: The cross-repo testing could be affected.
    <!--
    The (specific) risk to the release for taking the changes.
    -->
  - **Testing**: The CI
    <!--
    The specific testing that has been done or needs to be done to further
    validate any impact of the changes.
    -->
  - **Reviewers**: shahmishal
    <!--
    The code owners that GitHub-approved the original changes in the mainline
    branch pull requests. If an original change has not been GitHub-approved by
    a respective code owner, provide a reason. Technical review can be delegated
    by a code owner or otherwise requested as deemed appropriate or useful.
    -->",
77537,2024-11-11T19:42:31Z,2024-11-12T10:40:54Z,hamishknight,2,3,3,174,12,4,2,[],6.0,0,82428.0,0,0,0,0,3922828.905221,,3,3,0,False,['hamishknight'],@swift-ci please test @swift-ci please SourceKit stress testLooks reasonable LGTM,Looks reasonable LGTM,"Local functions can capture variables from parent closures, so we need to make sure we type-check parent closures when doing completion in a local function. Ideally we ought to be able to be more selective about the elements of the parent closure that we type-check, but that's a more complex change I'm leaving as future work for now.

Resolves #77305","Maybe we should skip adding them to the local decls and macro lists?  Sure, I don't mind #77561"
77542,2024-11-11T22:58:11Z,2024-11-12T16:58:53Z,drodriguez,1,0,1,215,9,0,0,[],13.0,0,64847.0,0,0,0,0,3928670.252369,,9,1,0,False,['drodriguez'],@swift-ci please test,,"Sometimes features are removed from `Features.def`, but they are not removed from the test files. The compiler ignores every feature that does not exist. This leads to removed features still being tested, and with the introduction of #76740, `REQUIRED:`.

Modify the code that generates the active feature set for testing to also generate the set of existing features, and pass this list of existing features to the verifier script. If a feature is trying to be activated and does not exist, the verifier will warn the user.

- `SwiftParser` feature was renamed `ParserASTGen`, but some tests were using both spellings. Remove the mentions of `SwiftParser` in the tests.
- `ImportObjcForwardDeclarations` was spelled with upper case `C` in a couple of tests. Fix it so the matching is easier.
- `TransferringArgsAndResults` was an experimental feature that was removed.
- Ignore the usage of inexisting feature in `swift-export-as.swift` because it seems to be what the test is actually testing.
- Ignore the test `availability_define.swift` because it tests the pseudo-feature `AvailabilityMacro=` which is not part of `Features.def`.
",
77543,2024-11-11T23:36:42Z,2024-11-12T16:27:16Z,justice-adams-apple,1,0,1,1,1,2,2,[],516.0,0,60637.0,0,0,0,0,3930571.476602,,0,1,0,False,['etcwilde'],"@swift-ci please smoke testBleh, we had it declared but failed to handle it? Ugh.","Bleh, we had it declared but failed to handle it? Ugh.","Define the macro `SWIFT_STDLIB_ENABLE_VECTOR_TYPES` when cmake option `SwiftCore_ENABLE_VECTOR_TYPES` is set to True
",
76892,2024-10-07T18:13:53Z,2024-11-12T16:40:37Z,egorzhdan,30,5,1,148,13,2,2,['c++ interop'],14489.0,0,3104806.0,0,0,0,0,3929771.532275,,7,1,0,False,['egorzhdan'],"@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please smoke test Linux @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please smoke test @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please smoke test @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please test Linux @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please test @swift-ci please build toolchain Ubuntu 22.04 @swift-ci please build toolchain Amazon Linux 2 @swift-ci please test @swift-ci please build toolchain Amazon Linux 2 @swift-ci please test @swift-ci please build toolchain Amazon Linux 2 @swift-ci please build toolchain Amazon Linux 2 @swift-ci please test Linux @swift-ci please build toolchain Amazon Linux 2 @swift-ci please build toolchain Amazon Linux 2Mostly looks good to me, I have a couple minor questions inline.  LGTM!","Mostly looks good to me, I have a couple minor questions inline.  LGTM!","While private and protected fields coming from C++ cannot be accessed from Swift, they can affect Swift typechecking.

For instance, the Swift typechecker mechanism that adds implicit `Sendable` conformances works by iterating over all of the struct's fields and checking whether all of them are `Sendable`. This logic was broken for C++ types with private fields, since they were never accounted for. This resulted in erroneous implicit `Sendable` confromances being added.

Same applies for `BitwiseCopyable`.

In addition to this, ClangImporter used to mistakenly mark all C++ structs that have private fields as types with unreferenceable storage, which hampered optimizations.

As a side effect of this change, we now also provide a better diagnostic when someone tries to access a private C++ field from Swift.

rdar://134430857","Could we run into similar problems when of spuriously marking a class sendable if we do not import add a field from the base class?  Could we add a test case that has inheritance? Yeah, this change isn't enough to fix the inheritance case, since Sema's `StorageVisitor` only considers stored properties, while for inherited C++ types we synthesize a computed property. Let me see if we can change Sema logic to accommodate this. Yeap, added a test Made a change in Sema to make this work for C++ inheritance."
77507,2024-11-09T00:50:14Z,2024-11-12T16:21:59Z,etcwilde,3,2,3,34,2,3,2,[],8.0,0,315365.0,0,0,0,0,3930631.773021,,2,3,0,False,['etcwilde'],@swift-ci please test @swift-ci please smoke test @swift-ci please smoke test LinuxExcellent!,Excellent!,"This patch provides extension points on the build system so that vendors can keep vendor-specific build system settings private, without having to worry about merge conflicts haunting them for the rest of time.

The location of the extension modules is set with the `SwiftCore_PRIVATE_MODULE_DIR` variable. If it is not specified, the default location is under `cmake/modules/private`.

Currently, there are extension points for the default settings, and for the global settings.","What do you think of `SwiftCore_VENDOR_MODULE_DIR`? This is the vendor specific settings and makes it clear when you concatenate them even if you don't know what it is (e.g. `${SwiftCore_VENDOR_MODULE_DIR}/DefaultSettings.cmake` vs `${SwiftCore_PRIVATE_MODULE_DIR}/DefaultSettings.cmake`). Sure, sounds good to me"
77544,2024-11-11T23:38:23Z,2024-11-12T16:23:25Z,etcwilde,2,0,1,2,1,1,1,[],9.0,0,60472.0,0,0,0,0,3930637.651035,,1,1,0,False,['etcwilde'],"@swift-ci please smoke test The macro is public, so linking against it should propagate it. Once we're to the install story and have CMake export the targets for the supplemental libraries to consume, I believe we can mark the link `public` on `swiftCore`, and then linking against `swiftCore` will pick up the define appropriately too. Either way, we should be able to include it in the config file that the overlay and supplemental libraries consume.I wonder if we can handle this slightly differently. `SwiftPrivateLibcExtras` also needs this flag. The shared options are going to be interesting as we need the rest of the modules integrated before we can start hoisting these to avoid having them diverge in different places.",I wonder if we can handle this slightly differently. `SwiftPrivateLibcExtras` also needs this flag. The shared options are going to be interesting as we need the rest of the modules integrated before we can start hoisting these to avoid having them diverge in different places.,Set the SWIFT_STDLIB_HAS_COMMANDLINE macro when the stdlib has command line support. This is needed while building SwiftCore to ensure that it exports the appropriate symbols.,
77550,2024-11-12T05:53:11Z,2024-11-12T15:20:42Z,tshortli,1,0,1,96,3,0,0,[],10.0,0,34059.0,0,0,0,0,3934562.798849,,3,1,0,False,['tshortli'],@swift-ci please smoke test,,"Fixes a bug where references to the opaque types of other decls were printed with the `some Type` syntax, breaking the interface. Only the opaque type introduced by a declaration should be printed with the `some Type` syntax; other opaque types must always be printed as a stable addresses instead.

Resolves rdar://134582913.
",
77521,2024-11-10T23:48:47Z,2024-11-12T16:20:29Z,tshortli,7,10,1,25,4,3,2,['c++ interop'],26736.0,0,145911.0,0,0,0,0,3930975.424279,,12,1,0,False,"['Xazax-hun', 'hamishknight', 'tshortli', 'xedin']","@swift-ci please test FYI this looks like the same issue as rdar://139486938, cc @Xazax-hun > FYI this looks like the same issue as rdar://139486938, cc @Xazax-hun

Wow! Indeed, the repro I have seems to be fixed by this PR. I'll assign the rdar to @tshortli > FYI this looks like the same issue as rdar://139486938, cc @Xazax-hun

Yeah, I was trying to reproduce a different compatibility suite regression and hit this instead. @swift-ci please test source compatibility @swift-ci please test @swift-ci please test source compatibilityLGTM, thank you! LGTM!","LGTM, thank you! LGTM!","ClangImporter synthesized declarations inherently do not have user written  code. Unfortunately, despite that they are not always marked implicit as they should be. This was causing a crash when attempting to generate profile coverage maps for synthesized constructors for imported structs.

I tried marking the constructors implicit, but that had too many knock-on effects in tests. This more targeted fix unblocks compatibility suite testing without trying to grapple with the implications of that more fundamental fix.

Resolves rdar://139486938.","Hmm, are we intentionally not emitting these constructors in the symbolic interface anymore? This will be because we're filtering out implicit decls, I wonder if maybe the ASTPrinter check here should only exclude non-synthesized implicit decls? We could then mark these decls as synthesized, allowing them to continue to be printed. I think that would be the best approach 👍  What is the symbolic interface used for?

Most declarations produced by ClangImporter were already marked as implicit, which seems correct for the purpose of the implicit bit. If I make the change to start printing synthesized declarations, are we going to over-print anything? Can we separate these changes, or do we think they must be made together? In C++ interop, the symbolic interface is used by SourceKit/Xcode for C++ class templates, since there isn't currently a mechanism that would instantiate C++ templates on the fly for the purpose of code completion, jump-to-definition, quick doc, etc. This logic is also used more generally for the generated module interface provided by SourceKit if you e.g jump-to-definition into an imported module. I'm not against doing the changes separately > are we going to over-print anything?

Jump-to-definition relies on the USR of a decl reference being present in the generated interface it jumps to, so I think we ought to have all synthesized decls printed, otherwise jump-to-definition would just open the module interface, which isn't too helpful. I believe this should only affect Clang cases since I don't think we ever synthesize public decls for Swift I explored distinguishing synthesized declarations from implicit but it seems like that might not really be the distinction we want as I believe that some forms of printing want to omit synthesized, too. I think the approach I'm going to take is to just include implicit decls in the symbolic interfaces for now. Actually, I've just landed on checking whether the implicit declaration belongs to a ClangModuleUnit. That doesn't work either. Now there are a bunch of other interface printing tests that are broken due to the inclusion of many unexpected synthesized clang declarations. I don't want to solve the subproblem of determining whether those are legitimate or not (some of them look a bit weird to me).

I think I'm going to scrap the whole approach of correctly marking the constructors as implicit and instead teach SILGen to avoid creating a profiler for decls belonging to a clang module, implicit or not. Someone more familiar with these various interface kinds should probably look into how best to make this a bit more self-consistent, though."
77547,2024-11-12T01:51:32Z,2024-11-12T05:35:21Z,DougGregor,1,0,1,46,4,0,0,[],17.0,0,47672.0,0,0,0,0,3935450.983767,,3,1,0,False,['DougGregor'],@swift-ci please smoke test,,,
77532,2024-11-11T18:26:54Z,2024-11-12T09:35:43Z,DougGregor,5,0,2,73,11,2,2,[],7.0,0,74280.0,0,0,0,0,3935521.161949,,4,2,0,False,"['DougGregor', 'glessard']",@swift-ci please smoke test @swift-ci please smoke test @swift-ci please build toolchain macOS platform Update incoming for the pointer-bounds tests before I can merge this @swift-ci please smoke testLooks like what I hoped for.,Looks like what I hoped for.,"While Span is present, we don't yet have an official way to create Span instances. Until then, put uses of Span and RawSpan behind an experimental feature flag (`Span`) that must be set to use these.

Addresses rdar://139308307.
",
76406,2024-09-11T17:57:39Z,2024-11-08T02:25:50Z,glessard,27,30,23,1661,8,6,2,[],8.0,0,5342257.0,1,0,0,0,3939700.414417,,1,23,0,False,"['glessard', 'apple-fcloutier', 'DougGregor']","@swift-ci please build toolchain @swift-ci please test @swift-ci please build toolchain @swift-ci please build toolchain @swift-ci please build toolchain windows platform Initial toolchain for macOS 14.x:
https://ci.swift.org/job/swift-PR-toolchain-macos/1491/artifact/branch-main/swift-PR-76406-1491-osx.tar.gz
 @swift-ci please build toolchain Toolchain for macOS: https://ci.swift.org/job/swift-PR-toolchain-macos/1498/artifact/branch-main/swift-PR-76406-1498-osx.tar.gz
Toolchain for Linux (Ubuntu): https://download.swift.org/tmp/pull-request/76406/1039/ubuntu2004/PR-ubuntu2004.tar.gz @swift-ci please build toolchain windows platform @swift-ci please smoke test macOS platform @swift-ci please build toolchain windows platform Toolchain for macOS: https://ci.swift.org/job/swift-PR-toolchain-macos/1498/artifact/branch-main/swift-PR-76406-1498-osx.tar.gz
Toolchain for Linux (Ubuntu): https://download.swift.org/tmp/pull-request/76406/1039/ubuntu2004/PR-ubuntu2004.tar.gz
Toolchain for Windows: https://ci-external.swift.org/job/swift-PR-build-toolchain-windows/5477/artifact/*zip*/archive.zip Please don't forget to add `@unsafe` to all unsafe members that don't have unsafe pointers in their interface (such as `subscript(unchecked:)`, the RawSpan-to-Span conversion methods, the sub-span methods, etc). @swift-ci please test @swift-ci please test macOS platform @swift-ci please test @swift-ci please test @swift-ci please test windows platform @swift-ci please test @swift-ci please test macOS platform @swift-ci please test @swift-ci please build toolchain macOS platform @swift-ci please test Windows platform @swift-ci please test Windows @swift-ci please test @swift-ci please test Woohoo!A few small questions, but this looks great! There’s several comments I put only on RawSpan but that also apply on Span.

I think that all of the issues I have are easily fixed. One additional thing that would really help me, though, is if we wrote down what is always expected to hold for any Span/RawSpan (e.g. pointer is aligned, size is not negative, etc) and what each unsafe initializer is expected to verify vs. what it expects callers to have verified already.  Sorry for all the identical comments about `lifetime(immortal)`. There were many more of them than I originally counted. None of those cases are actually immortal. I have to believe you disabled lifetime dependence everywhere because of compiler bugs. Should those cases have FIXMEs? Lots of nits, but this is looking good!

General comments:
- We need the tests ported
- There should be no `@usableFromInline` operations; everything should be `@_aEIC`
- We try to use explicit access modifiers in stdlib code
","A few small questions, but this looks great! There’s several comments I put only on RawSpan but that also apply on Span.

I think that all of the issues I have are easily fixed. One additional thing that would really help me, though, is if we wrote down what is always expected to hold for any Span/RawSpan (e.g. pointer is aligned, size is not negative, etc) and what each unsafe initializer is expected to verify vs. what it expects callers to have verified already.  Sorry for all the identical comments about `lifetime(immortal)`. There were many more of them than I originally counted. None of those cases are actually immortal. I have to believe you disabled lifetime dependence everywhere because of compiler bugs. Should those cases have FIXMEs? Lots of nits, but this is looking good!

General comments:
- We need the tests ported
- There should be no `@usableFromInline` operations; everything should be `@_aEIC`
- We try to use explicit access modifiers in stdlib code
","Implementation of SE-0447, the `Span` [proposal](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0447-span-access-shared-contiguous-storage.md) ([review thread](https://forums.swift.org/t/74676)).

The tests will be added in a separate pull request; they are being ported from https://github.com/apple/swift-collections/tree/future/Tests/FutureTests.","This seems surprising – why is a zero-length span always considered a subrange of every other span? We could make the effort of making sure that the span's pointer is within the range of addresses of the other span, but I'm not convinced it's worth the computational complexity. Otherwise, the logic is that the empty set is included in any other set. After trying both ways, I changed the implementation to be stricter, as in a zero-length span is only a subrange of another if the addresses actually match (or they're both `nil`.) The additional complexity was actually minimal. I'm asking Doug if this needs to be explicitly `@unsafe`. The strict memory safety vision isn't clear on whether generics parametrized with unsafe types are implicitly unsafe. Doug says this is implicitly unsafe, no change needed. This should be `<=`, as this would currently prevent you from creating a 0-length subspan with the range count..<count, while all other 0-length subspans appear to be valid Subdirectories! Finally! Should we use `SwiftStdlib 5.1` here, or are we intentionally holding off on that pending the ""how do we create an instance of a `Span` discussion?"" This is not necessarily a problem, but it's surprising to me that all 0-length RawSpans have a `nil` start address. With -fbounds-safety for instance, it's perfectly fine to have a 0-length pointer anywhere. Using `nil` as the start address prevents people from using pointer equality to check if a 0-length raw span is derived from another raw span. Yeah, it's implicitly unsafe in the model that's experimentally implemented now. When `@unsafe` comes for a proper pitch and review, we'll have to decide what to do---this (and many other APIs) might end up being marked `@unsafe`, but we would do it as a group. Should this parameter have optional type? Same question: should this parameter have optional type? Given that any UnsafeBufferPointer can be turned into an UnsafeRawBufferPointer trivially, that this is already an unsafe methods, and assuming that we don't intend people to initialize their RawSpans themselves (preferring instead to use `withSpan` or whatever other  mechanism we settle on), the BitwiseCopyable constraint is not providing security. (You are welcome to keep it around for non-security reasons, of course. I'm just saying that if security is the reason, then we are out of your way on this one.) `start` parameter should have optional type? `pointer` parameter should have optional type? I assume the same FIXME applies to the index subscript above. Probably unimportant: this should be <=, as you are currently unable to load 0-sized objects (like a Void instance) from the end of a RawSpan. Would suggest using `_count - offset >= MemoryLayout<T>.size` instead of doing an unchecked arithmetic operation (here and in a few other places below). I think `SwiftStdlib 6.1` would be fine, but we need to make sure to remember to change it if the feature slips to 6.2 with delays to the other proposals. The `Unsafe[*]BufferPointer`-taking initializers are the way to supply an optional pointer; it cuts down a bit on the number of required precondition checks, but that could be an unnecessary optimization. There shouldn't be a runtime arithmetic overflow check here even if you used regular -, and we should file a bug if there is one. I don't think that changing it would be very important, though. Okay! It's UB (from the LLVM level) to get the distance between two unrelated pointers. I think the check you need is:

```swift
let start = _start
let end = _start + _count
let subspanStart = subspan._start
let subspanEnd = subspanStart + subspan._count

guard start <= subspanStart && end >= subspanEnd else { return nil }
``` It looks like what happens when you have a `nil` pointer with a non-zero count ends up being somewhat inconsistent. You will run into cases where it seems like a C API is using or returning pointer-count pairs where the pointer is NULL but the count is non-zero, so somebody between you and whoever is tasked with C interop might have to care about this. Coming from a place of ignorance: it’s surprising to me that an object could both have lifetime constraints and be considered “bitwise copyable”. Are there funny interactions we should be aware of? For instance, how would we need to annotate the eventual MutableRawSpan.store signature to mean it can take any BitwiseCopyable but it’s going to escape it? The precondition check we'd have to add is this, right?

```swift
_precondition(count == 0 || pointer != nil)
```

So if I'm coming in from a C entry point that has separate pointer + count, where the pointer itself is generally going to be optional, the right way to do this is to go through UnsafeBufferPointer. Now, the UnsafeBufferPointer initializer only has a `_debugPrecondition` assertion for this condition, so in release builds the invariant doesn't hold for UnsafeBufferPointer. It looks like Span's init from an UnsafeBufferPointer doesn't validate this condition, either. Should there be a subscript on RawSpan, like there is on UnsafeRawPointer? This should probably try to use withContiguousStorageIfAvailable to escape generics world if possible and fall back to AnySequence only if everything else failed.  How is the ambiguity between Collection and Sequence resolved? Does it always resolve to Collection because Collection extends Sequence and is therefore “more specific”? Is BitwiseCopyable the right constraint for this? Wouldn’t plain Copyable be OK?"
76331,2024-09-08T00:14:12Z,2024-11-12T12:46:32Z,allevato,6,0,1,10,2,0,0,[],13.0,0,5661145.0,0,0,0,0,3943820.170328,,4,1,0,False,['allevato'],@swift-ci please test @swift-ci please test macOS platform @swift-ci please smoke test macOS platform @swift-ci please smoke test @swift-ci please test macOS platform Working on clearing out my PR queue; I'm going to go ahead and merge this small fix. The current behavior is obviously wrong given that it was even encoded in the tests.,,"`visitBinaryExpr` wasn't handling `UnresolvedDeclRefExpr` nodes, which the synthesized `==` implementation uses to compare fields/payloads. Also fixed the test that wasn't catching it since it also left out the operators.
",
77531,2024-11-11T18:12:09Z,2024-11-12T12:33:51Z,egorzhdan,1,0,1,29,4,1,1,['c++ interop'],8.0,0,66104.0,0,0,0,0,3944584.435075,,4,1,0,False,['egorzhdan'],@swift-ci please smoke testLGTM!,LGTM!,"This makes sure that different class template instantiations with enum arguments get distinct generated Swift type names.

Similar to aa6804a3.

rdar://139437761 / resolves https://github.com/swiftlang/swift/issues/77358

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77534,2024-11-11T19:32:00Z,2024-11-12T10:42:11Z,hamishknight,2,0,2,116,5,2,2,[],7.0,0,54615.0,0,0,0,0,3951283.936347,,2,2,0,False,['hamishknight'],"@swift-ci please test @swift-ci please test source compatibilityThis all looks great to me, thank you","This all looks great to me, thank you","Previously we would only run MiscDiagnostics passes on macro arguments for some statement diagnostics, update the expression walkers that inherit from BaseDiagnosticWalker such that we consistently do MiscDiagnostics on macro arguments.",
77545,2024-11-12T00:23:13Z,2024-11-12T06:39:21Z,drexin,2,0,1,114,2,0,0,[],6.0,0,22572.0,0,0,0,0,3965854.332157,,1,1,0,False,['drexin'],@swift-ci smoke test @swift-ci smoke test,,"rdar://139664644

The code that differentiates between regular ObjC and native Swift ObjC references could crash when generics were involved. Instead of through the TypeInfo, we are going directly throught the SILType to the type decl, which avoids the crash caused by casting the TypeInfo.
",
77410,2024-11-06T00:06:31Z,2024-11-12T05:09:43Z,gottesmm,2,0,1,95,8,0,0,[],6.0,0,536592.0,0,0,0,0,3971236.563189,,0,1,0,False,['gottesmm'],@swift-ci smoke test @swift-ci smoke test linux platform,,Just some small improvements I made while triaging some bugs.,
77411,2024-11-06T00:07:43Z,2024-11-12T05:07:19Z,gottesmm,2,0,1,32,4,0,0,[],6.0,0,536376.0,0,0,0,0,3971381.990559,,0,1,0,False,['gottesmm'],@swift-ci smoke test @swift-ci smoke test linux platform,,"Just upstreaming a few changes I made to swift snapshot tool while I was using it to triage some bugs. In this case, I just added support for running scripts by providing to the running script a path to the SWIFT_LIBRARY_PATH along side SWIFTC and SWIFT_FRONTEND.",
77539,2024-11-11T22:12:56Z,2024-11-12T02:32:37Z,drexin,1,0,1,1,1,0,0,[],6.0,0,15584.0,0,0,0,0,3980661.402883,,1,1,0,False,['drexin'],@swift-ci smoke test,,"rdar://139555118

This test fails on arm64e, because of expected differences in code gen, because of ptrauth.
",
77533,2024-11-11T19:09:59Z,2024-11-12T00:06:50Z,rintaro,3,4,1,340,10,3,1,[],422.0,0,17812.0,0,0,0,0,3989411.155655,,6,1,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test,,"Still TODO:
* Capture list
* Anonymous parameters
","These tests were unexpectedly disabled. `SwiftParser` feature doesn't exist (anymore?) but the command still had `-enable-experimental-feature SwiftParser`. cc: @drodriguez  I will have a look at what can be done. ```suggestion
    BridgedSourceLoc cArrowLoc, BridgedNullableTypeRepr cExplicitResultType,
``` #77542

Found this one and a couple more. Seems that `SwiftParser` was renamed to `ParserASTGen`, but the old spelling was kept in the tests (together with the new spelling)."
76951,2024-10-10T14:41:38Z,2024-11-11T22:55:56Z,kovdan01,8,2,1,217,10,2,1,[],49.0,0,2794459.0,0,0,0,0,3993666.486185,,8,1,0,False,"['kovdan01', 'DougGregor', 'asl']","Tagging @asl  @swift-ci please test @slavapestov This implements your request from https://github.com/swiftlang/swift/pull/58965#discussion_r900652891 Would be glad to see feedback from everyone interested Also tagging @rxwei  Would be glad to see feedback from everyone interested @swift-ci please smoke test Kicking off CI once more just to be sure, then once it's green let's mergeThis looks good! I have one non-actionable comment, but let's go ahead and merge","This looks good! I have one non-actionable comment, but let's go ahead and merge","In #58965, lookup for custom derivatives in non-primary source files was
introduced. It required triggering delayed members parsing of nominal types in
a file if the file was compiled with differential programming enabled.

This patch introduces `CustomDerivativesRequest` to address the issue.
We only parse delayed members if tokens `@` and `derivative` appear
together inside skipped nominal type body (similar to how member operators
are handled).

Resolves #60102
","I don't have a specific suggestion on how to improve it, but this logic was a little tangled before with `onlyOperators` and now it's... really hard to sort through. Thanks for bringing attention to this! I agree that the logic is pretty complicated and should be simplified somehow. I was also unable to quickly find a nice way to fix this, but I'll think of it and submit a subsequent PR once the refactoring of this function is ready."
77490,2024-11-08T19:53:44Z,2024-11-11T22:43:16Z,compnerd,2,0,1,4,1,0,0,[],16.0,0,269373.0,0,0,0,0,3994427.199212,,0,1,0,False,['compnerd'],@swift-ci please smoke test @swift-ci please smoke test Linux platform,,When building with the early swift driver we need to add the explicit `-Xfrontend` to make the option take effect.,
76969,2024-10-10T22:51:59Z,2024-11-11T22:54:26Z,hnrklssn,20,30,13,1339,51,2,2,[],32.0,0,2764947.0,0,0,0,0,3993758.960208,,6,13,0,False,"['DougGregor', 'hnrklssn']","@swift-ci Please smoke test Managed to get things to build and run properly now. Will start addressing comments tomorrow. @swift-ci Please smoke test depends on https://github.com/swiftlang/swift-syntax/pull/2886 > depends on [swiftlang/swift-syntax#2886](https://github.com/swiftlang/swift-syntax/pull/2886)

I'd like to break this dependency on the swift-syntax change, which I feel needs more discussion independently of this PR. Can you bring in whatever bits from swiftlang/swift-syntax#2886 that you need here so we can land this PR without any changes to swift-syntax? Once we do get to an answer there, we can move over to the corresponding API. @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test ```
/home/build-user/swift/lib/Macros/Sources/SwiftMacros/DebugDescriptionMacro.swift:244:7: warning: default will never be executed
      @unknown default:
      ^
/home/build-user/swift/lib/Macros/Sources/SwiftMacros/DebugDescriptionMacro.swift:440:5: warning: default will never be executed
    @unknown default:
    ^
/home/build-user/swift/lib/Macros/Sources/SwiftMacros/OptionSetMacro.swift:122:12: error: cannot convert return expression of type '(StructDeclSyntax, EnumDeclSyntax, GenericArgumentSyntax.Argument)' to return type '(StructDeclSyntax, EnumDeclSyntax, TypeSyntax)?'
    return (structDecl, optionsEnum, rawType)
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                              as! (StructDeclSyntax, EnumDeclSyntax, TypeSyntax)
/home/build-user/swift/lib/Macros/Sources/SwiftMacros/DistributedResolvableMacro.swift:145:39: error: value of type 'SameTypeRequirementSyntax.LeftType' has no member 'isActorSystem'
           where sameTypeReq.leftType.isActorSystem:
                 ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~
/home/build-user/swift/lib/Macros/Sources/SwiftMacros/DistributedResolvableMacro.swift:146:40: error: cannot assign value of type 'SameTypeRequirementSyntax.RightType' to type 'TypeSyntax?'
        specificActorSystemRequirement = sameTypeReq.rightType.trimmed
                                       ^
```

@DougGregor this doesn't look related to this patch at all. Is it a failure in main? I suspect you need to rebase your swift and update your swift-syntax @swift-ci Please smoke test @swift-ci Please smoke test @swift-ci please smoke test @hnrklssn the`Span` PR landed before this :)

```
error: 'Span' is ambiguous for type lookup in this context
``` @swift-ci Please smoke test @swift-ci please smoke test Windows @swift-ci please smoke testBah, Python lint issue due to the long name XFAIL'ing tests that need more standard library support to work properly","Bah, Python lint issue due to the long name XFAIL'ing tests that need more standard library support to work properly","@PointerBounds is a macro intended to be applied by ClangImporter when importing functions with pointer parameters from C headers. By leveraging C attributes we can get insight into bounds, esapability, and (eventually) lifetimes of pointers, allowing us to map them to safe(r) and more ergonomic types than UnsafePointer.

This initial macro implementation supports CountedBy and Sizedby, but not yet EndedBy. It can generate function overloads with and without an explicit count parameter, as well as with UnsafeBufferPointer or Span (if marked nonescaping), and any of their combinations. It supports nullable/optional pointers, and both mutable and immutable pointers. It supports arbitrary count expressions. These are passed to the macro as a string literal since any parameters referred to in the count expression will not have been declared yet when parsing the macro.

It does not support indirect pointers or inout parameters. It supports functions with return values, but returned pointers can not be bounds checked yet.

Bounds checked pointers must be of type Unsafe[Mutable]Pointer[?]<T>. Count expressions must conform to the BinaryInteger protocol, and have an initializer with signature ""init(exactly: Int) -> T?"" (or accept a supertype of Int).

rdar://137628612","We shouldn't create a new target here. The actual `macro` declaration and the types it depend on will go into the standard library so it's always available. In the short term, we can put them into the test cases themselves or (better) a module within the `test` directory that we build and feed in to the test command. These cases could all use documentation.  Looks like this file is missing I'd rather not have `_ptrCount` typed to `some BinaryInteger`, which is erasing information when we could be more precise. Maybe just leave off the type annotation and let the compiler figure it out? We're going to want to be sure this is `@_alwaysEmitIntoClient`.  FYI, you don't need `SymbolLinkageMarkers` enabled here I did this because the expression could be any type, and in the case that it does have the wrong type, the type error here makes it clearer that the error is because of the user annotation rather than a bug in the macro. Maybe there's a neater way to do something like this?
```
let _ptrCount = size * count
let _assertPtrCountBinaryIntegerType: some BinaryInteger = _ptrCount // unused, only for asserting type
``` ended up in the wrong directory, moved now Wouldn't placing it in the `test` dir rather than conditionally making it part of the stdlib make it harder to create pre-release versions for testing on real codebases? The indentation here is a bit odd. Can you swift-format it? More formatting oddities. Should this be normalized to a count index? That would be more consistent with the other parameters that are resolved as indices. This also might come in as `Swift.Void`, textually. Or could be written as `()`. It's probably best to add an `isVoid` predicate to `TypeSyntax` so we can collect checks for these cases in one place rather than doing string comparisons here. Could you indent the code in the multi-line string literal here? Please extract out the `Int` check to a `TypeSyntaxProtocol.isSwiftInt` property so we can also check for the `Swift.Int` case. That should also get rid of the force-unwrap `!` at the end here. It's okay to use `return` to call a void-returning function from a void-returning function, so you could probably skip the `hasReturnType` dance entirely and always emit the `return`. Should the Variant capture all of the information about whether it's raw vs. typed (the `isSizedBy`), mutable vs. immutable, lifetime-bound vs. unowned rather than scattering the information across more than one property? Per my comment earlier, I think this would be simpler (and not have any failure cases) if we resolved the count expression to a count parameter index earlier, as part of validating inputs. FYI, SwiftSyntax has an API `IntegerLiteralExprSyntax.representedLiteralValue` that does this for you, including handling the radix. I suggest using that instead. This is slightly better as `boolLiteral.literal.tokenKind == .keyword(.true)`. It's annoying that there is no SwiftSyntax API here. We should fix that (separately); it doesn't need to block this. Introducing a new Swift target library is a bit of a pain, and may make it harder to get this integrated into the Clang importer. It's also a bit unnecessary, because none of these APIs are ever actually used on the target---they are just here in support the macro. What if you instead put all of these APIs into the standard library (`public/core` directory) behind

```swift
#if SWIFT_ENABLE_EXPERIMENTAL_POINTER_BOUNDS
/// ...
#endif
```

so it's there in the standard library right where we want it when the experimental flag is enabled, but disappears entirely when the flag is disabled. At this point, I expect Span will land before this PR, now that it's been accepted. I guess if we have a function like this we could form a call to it: 

```swift
@_alwaysEmitIntoClient 
func _assertBinaryInteger<T: BinaryInteger>(_: T) { }
```

... but the result is basically the same, so what you've done will work. My main concern is that the opaque type we're creating here will have some runtime impact that doesn't get optimized away. I'm surprised you needed this. If we replace the `_PointerBounds` module with an `#if` in the `Swift` module, you won't need it. How would you then represent count expressions with e.g. addition or multiplication? To get there, we'd have to ""parse"" the C/C++ expression and map it into something. We can represent that here with an expression in terms of Swift if we need to. The distinction I had in mind for `Variant` was to hold things that are true for all parameters in the function call, i.e. either we generate spans or we don't, and either we remove all count parameters or none. This was more relevant when generating multiple overloads, since if you had multiple countedBy parameters you wouldn't want to generate all possible combinations of span vs UBP, and all combinations of implicit vs explicit count variable.

When only ever generating a single overload, I think it makes more sense to bake this information into the builder object for each parameter's builder object. This is no longer needed if we always emit `return`, but I updated the existing helper in swift-syntax to cover the `Swift.Void` case also. Indeed. So far I've punted that issue, because the basic operations that cover most use cases have the same syntax in Swift. I imagine a macro syntax like this: `.mul(.param(2), .param(3))`. This has the upside of only being able to represent expressions we support, and downside of requiring us to add explicit support for every type of expression. It would also let us add an enum case representing the return value of a function, so malloc could be annotated with `@PointerBounds(.sizedByOrNull(pointer: .retVal, size: .param(1)))`. Great! I'll keep it for now for my own testing, seeing as Span hasn't landed, but I'll make sure to remove it before merging this."
77347,2024-11-01T16:58:15Z,2024-11-11T22:42:17Z,cachemeifyoucan,2,0,1,112,4,1,1,[],14.0,0,884642.0,0,0,0,0,3994488.690051,,2,1,0,False,['cachemeifyoucan'],@swift-ci please smoke test ping,,"Add an utility action to print information contained in the swift compile cache key. This is useful to figure out why cache key is different.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77528,2024-11-11T17:31:33Z,2024-11-11T21:44:32Z,DougGregor,1,0,1,4,1,1,1,[],35.0,0,16134.0,0,0,0,0,3996999.438473,,0,1,0,False,['DougGregor'],@swift-ci please smoke test,,,
77523,2024-11-11T13:06:32Z,2024-11-11T20:51:15Z,eeckstein,1,0,1,21,2,0,0,[],8.0,0,27886.0,0,0,0,0,4001148.959334,,0,1,0,False,['eeckstein'],@swift-ci test,,"A dead borrowed-from can only be removed if the argument (= operand) is also removed.

Fixes a compiler crash.
",
77512,2024-11-09T18:55:59Z,2024-11-10T00:45:00Z,nate-chandler,1,2,2,55,4,2,0,[],17.0,0,178389.0,0,0,0,0,4002479.871571,,4,2,0,False,['nate-chandler'],@swift-ci please test,,"`FixedArray<T> : BitwiseCopyable` iff `T : BitwiwseCopyable`; determining this requires using `checkConformance`, not `lookupConformance`.


Also fix type-lowering verification for FixedArray--the new aggregate type must be walked into--addressing an asserts-only disableable-via-flag assertion failure.

rdar://139448358
",This flag shouldn't be necessary anymore. https://github.com/swiftlang/swift/pull/77525
77525,2024-11-11T15:41:20Z,2024-11-11T19:27:00Z,nate-chandler,1,0,1,6,2,0,0,[],16.0,0,17257.0,0,0,0,0,4002491.547802,,4,1,0,False,['nate-chandler'],@swift-ci please smoke test,,"It shouldn't be necessary for ValueGenerics anymore.
",
77526,2024-11-11T16:10:44Z,2024-11-11T20:00:14Z,hamishknight,2,0,1,23,1,0,0,[],8.0,0,15204.0,0,0,0,0,4002781.193464,,3,1,0,False,['hamishknight'],@swift-ci please smoke test FYI @jckarter ,,This appears to be a dead function now since the landing of #72967,
77479,2024-11-08T11:06:17Z,2024-11-11T19:27:58Z,hamishknight,3,4,4,240,5,2,1,[],24208.0,0,289304.0,0,0,0,0,4006149.254927,,2,4,0,False,['hamishknight'],Going to drop the `performStmtDiagnostics` change for now since that's going to be a larger change to fix @swift-ci please test source compatibility @swift-ci please test,,"- Delay expanding macros until the end of CSApply to ensure the solution is applied to any parent expression nodes, avoiding a crash for the implicit-self diagnostic logic
- Avoid double-diagnosing macro expansions in MiscDiagnostics, ensuring we only walk expansions in MiscDiagnostics when type-checking the expansion itself

rdar://138997009
","Okay it turns out the intention is to diagnose for both the argument and the expansion. I'll remove these FIXMEs, and can fix MiscDiagnostics to consistently visit the arguments in a follow-up Could you please separately evaluate whether it would be possible to subtype all of this walkers from `BaseDiagnosticWalker` and remove all of these overrides? Heh, I have that exact change in a follow-up PR :) Perfect! :)"
77493,2024-11-08T20:57:07Z,2024-11-11T19:24:31Z,compnerd,1,0,1,19,1,0,0,[],9.0,0,253646.0,0,0,0,0,4006357.496198,,0,1,0,False,['compnerd'],@swift-ci please smoke test,,"The functions should be named [verb]-[noun], remove the extraneous `-` in the name. Also homogenise the call to avoid the parenthesis.",
77450,2024-11-07T15:40:47Z,2024-11-11T17:48:02Z,egorzhdan,7,3,1,106,4,3,1,['c++ interop'],42.0,0,353237.0,0,0,0,0,4012147.400679,,4,1,0,False,['egorzhdan'],"@swift-ci please smoke test @slavapestov we don't always import the types of template arguments. They are only imported if used elsewhere in the header within fields, parameters, etc. The template parameter could also have a type that we don't import into Swift, or it can be a literal value or an expression that we wouldn't import into Swift. Please test with following PR:

https://github.com/swiftlang/llvm-project/pull/9561

@swift-ci please smoke test Please test with following PR:

https://github.com/swiftlang/llvm-project/pull/9561

@swift-ci please smoke test Please test with following PR:

https://github.com/swiftlang/llvm-project/pull/9561

@swift-ci please clean smoke test Please test with following PR:

https://github.com/swiftlang/llvm-project/pull/9561

@swift-ci please smoke test Please test with following PR:

https://github.com/swiftlang/llvm-project/pull/9561

@swift-ci please smoke testLGTM! It seems you're converting a Clang Type into something that looks like a string printout of a Swift Type. Don't you already have the Swift Type for the template argument somewhere so you can just print that out instead?",LGTM! It seems you're converting a Clang Type into something that looks like a string printout of a Swift Type. Don't you already have the Swift Type for the template argument somewhere so you can just print that out instead?,"This makes sure that different template instantiations of `std::tuple` get distinct Swift type names.

Similar to aa6804a3.

This also refactors `swift::importer::printClassTemplateSpecializationName` to follow a proper visitor pattern for the C++ template arguments.

rdar://139435937

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","This bit is the new functionality, the rest is just refactoring. I plan to submit a patch to upstream Clang to fix that. Patch up: https://github.com/llvm/llvm-project/pull/115336"
77510,2024-11-09T18:14:49Z,2024-11-11T17:26:22Z,hborla,2,0,1,54,2,0,0,[],14.0,0,169896.0,0,0,0,0,4013447.793004,,2,1,0,False,['hborla'],@swift-ci please build toolchain @swift-ci please smoke test,,"Otherwise, the availability checker won't appropriately downgrade unavailable `Sendable` conformances for `@preconcurrency` declarations.",
77517,2024-11-10T15:38:25Z,2024-11-11T00:43:20Z,DougGregor,1,2,1,121,6,2,0,[],32.0,0,93238.0,0,0,0,0,4013089.809225,,3,1,0,False,['DougGregor'],"@swift-ci please smoke testLGTM, thanks!","LGTM, thanks!","The construction of type refinement contexts performs lazy expansion for the contents of macro expansions, so that TRC creation doesn't force all macros to be expanded. However, the logic that skips macro expansions would *also* skip some declarations produced within a macro expansion, even when building the TRC specifically for that macro expansion buffer. This manifest as missing some availability information within the TRC, rejecting some well-formed code.

Tune the logic for ""don't visit macro expansions when building a TRC"" to recognize when we're building a TRC for that macro expansion.

Fixes rdar://128400301.","Looks like your thought wasn't finished here Thank you, finished the thought in https://github.com/swiftlang/swift/pull/77528"
77519,2024-11-10T17:28:00Z,2024-11-11T17:22:09Z,tshortli,1,0,2,160,6,1,1,[],14.0,0,86052.0,0,0,0,0,4013701.730682,,4,2,0,False,['tshortli'],@swift-ci please test,,"Opaque type metadata accessor functions could be miscompiled for functions that contain `if #available` checks for inactive platforms. For example, this function will always return `A` when compiled for macOS, but the opaque type accessor would instead return the type metadata for `B`:

```
func f() -> some P {
  if #available(iOS 99, *) {
    return A() // Returns an A on macOS
  } else {
    return B()
  }
}
```

Resolves rdar://139487970.",
77496,2024-11-08T21:53:10Z,2024-11-11T16:41:56Z,tbkka,1,4,1,134,5,2,1,[],304.0,0,240527.0,0,0,0,0,4016118.328585,,1,1,0,False,['tbkka'],"@swift-ci Please testOne possible optimization, but looks good.","One possible optimization, but looks good.","A `@convention(block)` closure in Swift is completely compatible with Objective-C and does not need to be wrapped in a `__SwiftValue` box for use.

Previously, it was bridged verbatim when appearing by itself, but could end up boxed when it went through array bridging.

The test verifies that:
* Objective-C does not see a `__SwiftValue` box
* Swift `type(of:)` does not see a `__SwiftValue` box
* Objective-C can actually call the closure

Resolves rdar://138132321","This function has always been a long if-else chain; I've reformatted it some to make that a bit more explicit.

I've also adjusted the comment layout to hopefully make it clearer:
```
// Explain first if
if (...) {
  ...
}
// Explain second if
else if (....) {
  ...
}
// Explain third if
else if (...) {
  ...
}
``` This is the new case:  If this is a function type with a block convention, then bridge it verbatim. This test does `NSArray` bridging explicitly here, but the bug also manifests when a Swift array is implicitly bridged to NSArray when calling Obj-C code. It's important to verify that Objective-C really does see what we expect."
77524,2024-11-11T13:22:11Z,2024-11-11T17:05:37Z,hamishknight,1,0,1,9,1,1,1,[],6.0,0,14368.0,0,0,0,0,4013736.330471,,2,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Make it clear why this is a different bit to `isImplicit`.
",
77461,2024-11-07T21:12:06Z,2024-11-11T16:34:17Z,xedin,10,0,2,60,5,1,1,[],11.0,0,328931.0,0,0,0,0,4016579.191037,,2,2,0,False,['xedin'],@swift-ci please test https://github.com/swiftlang/swift/pull/76952 uncovered the fact that application result types bound too eagerly in some cases. @swift-ci please test @swift-ci please test source compatibility @swift-ci please test Linux platform @swift-ci please test Linux platform @swift-ci please test source compatibility @swift-ci please test Linux platform @swift-ci please test @swift-ci please test,,"…happens

Until `ApplicableFunction` constraint is simplified result type associated with 
it cannot be bound because the binding set if incomplete.

Resolves: rdar://139237088

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
76625,2024-09-21T05:42:41Z,2024-11-11T07:44:46Z,shahmishal,2,0,1,8,1,0,0,[],12.0,0,4413726.0,0,0,0,0,4048350.745374,,0,1,0,False,['shahmishal'],@swift-ci smoke test @swift-ci smoke test,,"…undation-icu, and swift-foundation repo url to swiftlang org",
77518,2024-11-10T15:43:29Z,2024-11-10T19:49:13Z,aschwaighofer,3,0,1,4,2,0,0,[],10.0,0,14745.0,0,0,0,0,4091283.750933,,1,1,0,False,['aschwaighofer'],@swift-ci smoke test @swift-ci test WebAssembly Failing bot: https://ci.swift.org/job/oss-swift-pr-test-crosscompile-wasm-ubuntu-20_04,,PR#77502 disabled aggresive reg2mem heuristic for wasm. These two tests check IR patterns that are influenced by said heuristic.,
77429,2024-11-06T21:24:30Z,2024-11-10T15:43:12Z,nate-chandler,3,0,11,771,21,0,0,[],181550.0,0,325125.0,0,0,0,0,4106043.64436,,6,11,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmark,,"When a protocol which has a `read` (or `modify`) requirement is built with the `CoroutineAccessors` feature, it gains a `read2` (or `modify2`, respectively) requirement.  For this to be compatible with binaries built without the feature, a default implementation for these new requirements must be provided.  Cause these new accessor requirements to have default implementations by returning `true` from `doesAccessorHaveBody` when the context is a `ProtocolDecl` and the relevant availability check passes.
",
77509,2024-11-09T15:11:44Z,2024-11-09T18:56:47Z,aschwaighofer,1,0,1,6,2,0,0,[],8.0,0,13503.0,0,0,0,0,4180832.682194,,1,1,0,False,['aschwaighofer'],@swift-ci smoke test,,PR#77502 disabled aggresive reg2mem heuristic for wasm. These two tests check IR patterns that are influenced by said heuristic.,
77515,2024-11-09T20:17:29Z,2024-11-10T00:18:52Z,hamishknight,1,0,5,358,10,0,0,[],8.0,0,16500.0,0,0,0,0,4159490.754864,,0,5,0,False,['hamishknight'],@swift-ci please smoke test,,"Generate buildable folders for compatible targets when `--buildable-folders` is passed. Currently disabled by default, I'd like to live on it for a bit before enabling by default, and ideally we'd also split up ""umbrella"" targets like `stdlib` + `unittests` such that they can benefit from it.

#77418",
77485,2024-11-08T16:26:57Z,2024-11-09T17:25:06Z,cachemeifyoucan,8,0,1,23,1,1,1,[],17.0,0,89889.0,0,0,0,0,4186334.602303,,8,1,0,False,"['cachemeifyoucan', 'adrian-prantl']","@swift-ci please smoke test @swift-ci please test We _know_ that there were situations where it was already doing this — which specific (new) situation does this address? > We _know_ that there were situations where it was already doing this — which specific (new) situation does this address?

Let me know if you want me to look into it but I don't know how current lldb loads clang explicit module. If I just take all the command line options from the lldb logs and send to clang driver, every `-fmodule-files=` flag is dropped when converting to cc1 flag. I might need to step through the lldb to figure out how it finds the already built modules. Maybe @kastiglione knows? > Let me know if you want me to look into it but I don't know how current lldb loads clang explicit module. If I just take all the command line options from the lldb logs and send to clang driver, every -fmodule-files= flag is dropped when converting to cc1 flag.

Since you're actively making changes here, I think it would be _great_ if you could clarify this and potentially document your findings. There's an explicit modules test in `test/API/lang/swift/ExplicitModules`. > We know that there were situations where it was already doing this — which specific (new) situation does this address?

I think I figured out the difference. The behavior is that without this change, clang needs to find the module map for the module to import, even `-fmodule-file` is passed on the command-line. That means lldb need to inherit the entire full search paths to find all clang module maps, just to import prebuilt ones.

After this change, swift clang importer will just skip the module map lookup stage and directly importing explicit modules if those exists, and only fallback to module map lookup when an implicit build is needed. @swift-ci please smoke test Commit message updated to address the finding.",,"Improve clang importor so it can directly load explicit module even implicit module is enabled. This is a special configuration used by lldb because lldb sometimes need to load additional modules when binding external types. This provide the path in clang importer that can load explicit module without locating the clang module map, while fallback to module map lookup when implicit module is needed.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77471,2024-11-07T23:39:12Z,2024-11-09T07:04:53Z,kubamracek,7,0,1,759,3,1,1,[],6.0,0,113141.0,0,0,0,0,4223549.044546,,1,1,0,False,['kubamracek'],@swift-ci please test @swift-ci please built toolchain macOS platform @swift-ci please build toolchain macOS platform @swift-ci please test @swift-ci please build toolchain macOS platform @swift-ci please test @swift-ci please build toolchain macOS platform,,"When using arrays in a constant-folding string interpolation, under Embedded Swift, we can hit an assert:
```
Assertion failed: (getKind() == Address), function getAddressValue, file SILConstants.cpp, line 674.
...
7  swift-frontend           0x00000001062bd580 swift::SymbolicValue::getAddressValue(llvm::SmallVectorImpl<unsigned int>&) const (.cold.2) + 0
8  swift-frontend           0x00000001012eb390 swift::SymbolicValue::getAddressValue(llvm::SmallVectorImpl<unsigned int>&) const + 136
9  swift-frontend           0x0000000101021678 swift::ConstExprFunctionState::loadAddrValue(swift::SILValue, swift::SymbolicValue) + 88
10 swift-frontend           0x000000010101ea04 swift::ConstExprFunctionState::computeWellKnownCallResult(swift::ApplyInst*, WellKnownFunction) + 2732
```

This PR fixes that by relaxing the expectation inside the handling of WellKnownFunction::ArrayAppendElement, which have only been expecting that Array.append is generic (non-specialized) and takes the element parameter indirectly. That's not always true under Embedded Swift where Array.append is going to be specialized.

rdar://139351327
",
77459,2024-11-07T20:36:48Z,2024-11-09T15:18:50Z,hborla,11,2,5,318,12,3,2,[],2066.0,0,153725.0,0,0,0,0,4193909.261152,,3,5,0,False,"['hborla', 'Lukasa']","@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please test source compatibility @swift-ci build toolchain @swift-ci build toolchain macOS platform Hmm, this toolchain did not appear to work. Building the current `main` of Hummingbird using the current `main` of swift-nio (by putting swift-nio in edit mode) produces the same errors using the downloaded Ubuntu 20.04 toolchain as we see with the current 6.0 toolchain:

```
/hummingbird/Sources/HummingbirdTLS/TLSChannel.swift:40:44: error: conformance of 'NIOSSLHandler' to 'Sendable' is unavailable
38 |     @inlinable
39 |     public func setup(channel: Channel, logger: Logger) -> EventLoopFuture<Value> {
40 |         return channel.pipeline.addHandler(NIOSSLServerHandler(context: self.sslContext)).flatMap {
   |                                            `- error: conformance of 'NIOSSLHandler' to 'Sendable' is unavailable
41 |             self.baseChannel.setup(channel: channel, logger: logger)
42 |         }

/hummingbird/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/NIOSSLHandler.swift:791:1: note: conformance of 'NIOSSLHandler' to 'Sendable' has been explicitly marked unavailable here
 789 | 
 790 | @available(*, unavailable)
 791 | extension NIOSSLHandler: Sendable {}
     | `- note: conformance of 'NIOSSLHandler' to 'Sendable' has been explicitly marked unavailable here
 792 | 
 793 | extension NIOSSLHandler {
/hummingbird/Sources/HummingbirdTLS/TLSChannel.swift:40:44: error: conformance of 'NIOSSLHandler' to 'Sendable' is unavailable
38 |     @inlinable
39 |     public func setup(channel: Channel, logger: Logger) -> EventLoopFuture<Value> {
40 |         return channel.pipeline.addHandler(NIOSSLServerHandler(context: self.sslContext)).flatMap {
   |                                            `- error: conformance of 'NIOSSLHandler' to 'Sendable' is unavailable
41 |             self.baseChannel.setup(channel: channel, logger: logger)
42 |         }

/hummingbird/.build/checkouts/swift-nio-ssl/Sources/NIOSSL/NIOSSLHandler.swift:791:1: note: conformance of 'NIOSSLHandler' to 'Sendable' has been explicitly marked unavailable here
 789 | 
 790 | @available(*, unavailable)
 791 | extension NIOSSLHandler: Sendable {}
     | `- note: conformance of 'NIOSSLHandler' to 'Sendable' has been explicitly marked unavailable here
 792 | 
 793 | extension NIOSSLHandler {
```

This is the [`addHandler` method](https://github.com/apple/swift-nio/blob/6d30ec4738389e875f1a22345463468d4d581063/Sources/NIOCore/ChannelPipeline.swift#L170-L175) in question, with the `@preconcurrency` annotation on it. @swift-ci build toolchain @swift-ci please smoke test @swift-ci build toolchain @swift-ci please smoke testThis all looks safe, and will downgrade a number of errors to warnings based on `@preconcurrency`. Thank you!","This all looks safe, and will downgrade a number of errors to warnings based on `@preconcurrency`. Thank you!","Sendable violations inside `@preconcurrency @Sendable` closures should be suppressed in minimal checking, and diagnosed as warnings under complete checking, including the Swift 6 language mode. This change fixes an issue where warnings were still produced in minimal checking, and errors were still produced under `-swift-version 6`, which means that libraries cannot stage in new `Sendable` annotations if their clients have already migrated to Swift 6.

The preconcurrency downgrade infrastructure is currently pretty difficult to follow, because the information is passed through `SendableCheckContext` throughout the `diagnoseNonSendableTypes` APIs, and there are different code paths for `@preconcurrency` on nominal declarations versus import statements. This PR does not attempt to clean any of this code up, because I'd like to cherry pick the bug fix to `release/6.0`. I'll look at clarifying this code in a follow up change.

This change also downgrades `Sendable` requirement failures when the requirement is on a `@preconcurrency` declaration. However, the change in this PR is not sufficient for requirement inference, e.g.

```swift

// module A
@preconcurrency
struct RequireSendable<T: Sendable> {}

// module B

class NotSendable {}

func f<T, U: Sendable>(_: T, _: U) -> RequireSendable<T>? { nil }

func call(ns: NotSendable) {
  f(ns, ns)
}
```

A case like the above requires more careful handling. `@preconcurrency` can't simply be inferred on `f`,  because that would break ABI by stripping `U: Sendable` from the generic signature. `@preconcurrency` may need to apply per requirement in order to maintain source compatibility without breaking ABI.

Resolves: rdar://138535438, rdar://139234188, https://github.com/swiftlang/swift/issues/76652

","This is why isolatedByPreconcurrency is a closure that's passed in, right? Yes, and it looks like `ClosureIsolatedByPreconcurrency` (used by constraint system calls) does check the constraint system state, but I ran into a case while debugging where this line of code returned an unexpected result mid constraint solving. It didn't seem to be causing any issues for the preconcurrency downgrade behavior, so I left this comment for myself to figure out what happened there after I land this."
77495,2024-11-08T21:49:48Z,2024-11-09T05:49:43Z,artemcm,1,0,1,3,1,2,2,[],357.0,0,28796.0,0,0,0,0,4228059.383266,,0,1,0,False,['artemcm'],"@swift-ci testAssuming this passes, worth a try I guess?","Assuming this passes, worth a try I guess?","We are seeing strange crashes during embedded stdlib build stage on Ubuntu 24.04. These crashes only seem to occur when we dispatch many stdlib emit-module tasks at the same time. While we root-cause it, this change attempts to slow down the process to only two Embedded StdLib tasks at-a-time.

Workaround for rdar://137674862",
77502,2024-11-08T23:53:32Z,2024-11-09T05:14:13Z,aschwaighofer,5,0,2,5,1,0,0,[],27.0,0,19242.0,0,0,0,0,4230190.203446,,2,2,0,False,"['ahoppen', 'aschwaighofer']",Failing bot: https://ci.swift.org/job/oss-swift-pr-test-crosscompile-wasm-ubuntu-20_04 @swift-ci smoke test @swift-ci Please test WebAssembly @swift-ci smoke test @swift-ci Please test WebAssembly,,"It causes an LLVM WASM backend instruction selection failure.

rdar://139541259
",
77466,2024-11-07T22:34:48Z,2024-11-09T05:12:49Z,meg-gupta,3,0,1,100,28,0,0,[],304.0,0,110281.0,0,0,0,0,4230275.707496,,8,1,0,False,['meg-gupta'],"Please test with following pull request:
https://github.com/swiftlang/swift-syntax/pull/2894

@swift-ci Please test Please test with following pull request:
https://github.com/swiftlang/swift-syntax/pull/2894

@swift-ci Please test Linux platform Please test with following pull request:
https://github.com/swiftlang/swift-syntax/pull/2894

@swift-ci Please smoke test macOS platform",,,
77494,2024-11-08T21:28:43Z,2024-11-09T02:41:13Z,egorzhdan,1,0,1,4,1,0,0,['c++ interop'],12.0,0,18751.0,0,0,0,0,4239371.526702,,5,1,0,False,['egorzhdan'],@swift-ci please smoke test,,"Certain build configurations of SwiftCompilerSources now incorrectly treat `BridgedSwiftObject` as a non-copyable type, causing compiler errors. This is a short-term workaround for these errors.

rdar://138924133

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77501,2024-11-08T23:43:17Z,2024-11-08T23:48:09Z,ktoso,1,0,1,2,1,0,0,[],179.0,0,5846.0,0,0,0,0,4244203.191291,,0,1,0,False,['ktoso'],@swift-ci please smoke test,,"investigate failure on simulator

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77465,2024-11-07T22:03:17Z,2024-11-09T00:45:36Z,shahmishal,5,0,1,6,1,2,2,[],10.0,0,96141.0,0,0,0,0,4246308.839742,,0,1,0,False,"['shahmishal', 'finagolfin']","@swift-ci build toolchain @swift-ci test Looks like a bug in one of the linux rpaths; I've also [seen an issue with CMake 3.30 when cross-compiling Foundation](https://github.com/swiftlang/swift-foundation/pull/878#issuecomment-2365493005), had to work around it by [disabling these Android linker flags](https://github.com/finagolfin/swift-android-sdk/blob/5a80b4733c097b53befe867e7fd2a65c4b2791d4/swift-android.patch#L56).  https://github.com/swiftlang/swift-testing/pull/792
@swift-ci build toolchain Linux https://github.com/swiftlang/swift-testing/pull/792

@swift-ci test linux",,,
77491,2024-11-08T20:00:25Z,2024-11-09T00:31:43Z,slavapestov,1,0,1,77,2,1,1,[],19.0,0,16278.0,0,0,0,0,4247144.812894,,2,1,0,False,['slavapestov'],@swift-ci Please smoke testLGTM!,LGTM!,"A function declaration cannot have an opaque parameter type appearing in consuming position:

    func f(_: (some P) -> ()) {}

However, we should skip this check for a closure, because if the closure's parameter list references an opaque parameter declaration, it means something else: namely, the inferred type of the closure refers to an opaque parameter from an outer scope. That's allowed.

This unnecessary prohibition has been there ever since the check was added, but only for multi-statement closures, so nobody seemed to notice.

When https://github.com/swiftlang/swift/pull/76473 made it so we always call TypeChecker::checkParameterList(), this exposed the problem in a single-expression closure in an existing project.

Fixes rdar://139237671.",
77500,2024-11-08T23:26:27Z,2024-11-09T00:29:30Z,nate-chandler,2,0,1,4,1,1,1,[],175.0,0,3788.0,0,0,0,0,4247273.351545,,3,1,0,False,"['nate-chandler', 'aschwaighofer']",Should we add a comment on which version of clang on linux this failed? @swift-ci please smoke test,,"Disable optimization on a function which returns a `std::optional<bool>`.

rdar://139105149
",
77452,2024-11-07T16:42:59Z,2024-11-08T23:21:58Z,aschwaighofer,7,0,2,7,3,0,0,[],7.0,0,110340.0,0,0,0,0,4251329.969834,,4,2,0,False,['aschwaighofer'],@swift-ci test @swift-ci test source compatibility @swift-ci test linux @swift-ci test linux @swift-ci test linux @swift-ci test Linux  @swift-ci test,,rdar://136292425,
77499,2024-11-08T23:05:39Z,2024-11-08T23:06:53Z,mikeash,1,0,1,1,1,0,0,[],29.0,0,74.0,0,0,0,0,4252236.855339,,0,1,0,False,['mikeash'],@swift-ci please test,,"Cherry-pick https://github.com/swiftlang/swift/pull/75953 to `release/6.0`.

This header is needed for std::pair.",
77486,2024-11-08T16:59:04Z,2024-11-08T22:57:59Z,drexin,1,0,1,2,1,0,0,[],8.0,0,21535.0,0,0,0,0,4252771.323668,,0,1,0,False,['drexin'],@swift-ci smoke test,,"…throws_abi.swift

rdar://139480718

Executable tests need to be marked as such to prevent failures in non-executable test environments.",
77433,2024-11-06T23:25:52Z,2024-11-08T20:30:57Z,mikeash,2,0,1,983,8,1,1,[],119.0,0,162305.0,0,0,0,0,4261593.978878,,0,1,0,False,['mikeash'],@swift-ci please smoke test @swift-ci please test,,"Cherry-pick https://github.com/swiftlang/swift/pull/75376 to `release/6.0`.

The descriptor map is keyed by a simplified mangling that canonicalizes the differences that we accept in _contextDescriptorMatchesMangling, such as the ability to specify any kind of type with an OtherNominalType node.

This simplified mangling is not necessarily unique, but we use _contextDescriptorMatchesMangling for the final equality checking when looking up entries in the map, so occasional collisions are acceptable and get resolved when probing the table.

The table is meant to be comprehensive, so it includes all descriptors that can be looked up by name, and a negative result means the descriptor does not exist in the shared cache. We add a flag to the options that can mark it as non-definitive in case we ever need to degrade this, and fall back to a full search after a negative result.

The map encompasses the entire shared cache but we need to reject lookups for types in images that aren't loaded. The map includes an image index which allows us to cheaply query whether a given descriptor is in a loaded image or not, so we can ignore ones which are not.

TypeMetadataPrivateState now has a separate sections array for sections within the shared cache. _searchTypeMetadataRecords consults the map first. If no result is found in the map and the map is marked as comprehensive, then only the sections outside the shared cache need to be scanned.

Replace the SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED environment variable with one specifically for metadata and one for descriptor lookup so they can be controlled independently. Also add SWIFT_DEBUG_VALIDATE_LIB_PRESPECIALIZED_DESCRIPTOR_LOOKUP which consults the map and does the full scan, and ensures they produce the same result, for debugging purposes.

Enhance the environment variable code to track whether a variable was set at all. This allows SWIFT_DEBUG_ENABLE_LIB_PRESPECIALIZED to override the default in either direction.

Remove the disablePrespecializedMetadata global and instead modify the mapConfiguration to disable prespecialized metadata when an image is loaded that overrides one in the shared cache.

rdar://113059233",
77475,2024-11-08T04:50:25Z,2024-11-08T20:15:28Z,slavapestov,3,2,1,45,5,2,1,[],10.0,0,55503.0,0,0,0,0,4262524.18593,,1,1,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke testLGTM but please fix the RUN commands for the new test.,LGTM but please fix the RUN commands for the new test.,"When we replay a solution, we must record changes in the trail, so fix the logic to do that. This fixes the first assertion failure with this test case.

The test case also exposed a second issue. We synthesize a CustomAttr in applySolutionToClosurePropertyWrappers() with a type returned by simplifyType(). Eventually, CustomAttrNominalRequest::evaluate() looks at this type, and passes it to directReferencesForType(). Unfortunately, this entry point does not understand type aliases whose underlying type is a type parameter. However, directReferencesForType() is the wrong thing to use here, and we can just call getAnyNominal() instead.

Fixes rdar://139237781.
","For SwiftUI tests please use: 

```
// RUN: %target-typecheck-verify-swift -target %target-cpu-apple-macosx10.15 -swift-version 5
// REQUIRES: objc_interop
// REQUIRES: OS=macosx
```

Otherwise it would start failing in some CI configurations we have.
 Fixed, I don't think it needs -swift-version 5 though"
77464,2024-11-07T21:34:37Z,2024-11-08T20:11:54Z,artemcm,2,0,1,4,1,0,0,[],6.0,0,81437.0,0,0,0,0,4262738.413542,,0,1,0,False,['artemcm'],@swift-ci smoke test @swift-ci smoke test Linux platform,,Resolves rdar://138880276,
77458,2024-11-07T19:52:39Z,2024-11-08T20:10:03Z,artemcm,4,1,1,89,2,1,1,[],5.0,0,87445.0,0,0,0,0,4262849.356654,,0,1,0,False,['artemcm'],@swift-ci test @swift-ci test @swift-ci test @swift-ci test Linux platformLGTM.,LGTM.,"This set, belonging to 'ModuleDependenciesCache', is only updated in a critical section behind a lock in the scanner. However, it is queried unsynchronized inside the Clang scanner itself. If an update causes a re-hash to happen, chaose can ensue with concurrent lookups.

Since this set only affects the produced set of results from teh Clang scanning query, we should simply pass in an immutable copy to scanning queries and rely on downstream de-duplication of scanning results.

Resolves rdar://139414443
",Mark this `const`. 
77489,2024-11-08T18:49:05Z,2024-11-08T19:24:47Z,shahmishal,1,0,1,50,1,0,0,[],7.0,0,2144.0,0,0,0,0,4265565.102166,,0,1,0,False,['shahmishal'],@swift-ci test,,,
77434,2024-11-06T23:26:32Z,2024-11-08T17:22:14Z,xedin,3,0,1,76,2,1,1,[],8.0,0,150943.0,0,0,0,0,4272919.573919,,1,1,0,False,['xedin'],@swift-ci please smoke test @swift-ci please smoke test Linux platform @swift-ci please smoke test Linux platform,,"Allow witnesses to introduce `any Sendable` types into their interface before 
requirements (predicated on presence of `@preconcurrency` and Swift 5 
language mode) as a pathway for concurrency adoption.

Resolves: rdar://134503878

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77473,2024-11-08T02:33:33Z,2024-11-08T17:15:40Z,xedin,1,0,1,36,2,1,1,[],7.0,0,52928.0,0,0,0,0,4273314.58113,,1,1,0,False,['xedin'],@swift-ci please smoke test,,"…ng disjunctions

`filterDisjunction` should ignore the choices that are already disabled while attempting to optimize disjunctions related to dynamic member lookup.

Resolves: rdar://139314763

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77469,2024-11-07T23:26:51Z,2024-11-08T16:19:53Z,etcwilde,4,0,2,5,2,1,1,[],9.0,0,60783.0,0,0,0,0,4276662.24076,,1,2,0,False,['etcwilde'],"@swift-ci please smoke test Linux failure:
```
******************** TEST 'lldb-shell :: SwiftREPL/BreakpointSimple.test' FAILED ********************
Exit Code: -9
Timeout: Reached timeout of 600 seconds

Command Output (stderr):
--
RUN: at line 3: /home/build-user/build/buildbot_linux/lldb-linux-x86_64/bin/lldb --no-lldbinit -S /home/build-user/build/buildbot_linux/lldb-linux-x86_64/test/Shell/lit-lldb-init-quiet --repl < /home/build-user/llvm-project/lldb/test/Shell/SwiftREPL/BreakpointSimple.test | /home/build-user/build/buildbot_linux/llvm-linux-x86_64/bin/FileCheck /home/build-user/llvm-project/lldb/test/Shell/SwiftREPL/BreakpointSimple.test
+ /home/build-user/build/buildbot_linux/lldb-linux-x86_64/bin/lldb --no-lldbinit -S /home/build-user/build/buildbot_linux/lldb-linux-x86_64/test/Shell/lit-lldb-init-quiet --repl
+ /home/build-user/build/buildbot_linux/llvm-linux-x86_64/bin/FileCheck /home/build-user/llvm-project/lldb/test/Shell/SwiftREPL/BreakpointSimple.test

--
``` @swift-ci please test Linux @swift-ci please test macOS",,"These patches add the missing header search paths for building the `swiftrt.o`, as well as adding it to the default settings when building for BSD and Android to ensure that it isn't forgotten.",
77467,2024-11-07T23:04:20Z,2024-11-08T16:19:40Z,etcwilde,2,0,1,2,1,2,2,[],931.0,0,62120.0,0,0,0,0,4276676.562208,,1,1,0,False,['etcwilde'],@swift-ci please smoke test @swift-ci please smoke test Linux,,"Adding an option to toggle the runtime function counter functionality.
",
77468,2024-11-07T23:09:40Z,2024-11-08T16:19:27Z,etcwilde,3,1,1,19,4,2,1,[],619.0,0,61787.0,0,0,0,0,4276691.177876,,2,1,0,False,['etcwilde'],@swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please smoke test,,"Hooking up the bits of the build to link the swift commandline support C++ bits into swiftCore.
",remove this TODO
77463,2024-11-07T21:25:10Z,2024-11-08T15:45:15Z,slavapestov,2,0,1,160,5,0,0,[],428.0,0,66005.0,0,0,0,0,4278743.709877,,3,1,0,False,['slavapestov'],@swift-ci Please smoke test @swift-ci Please smoke test Linux,,"I added commit 7eecf971326161a32dade93500fc8f66a537d419 a while ago to fix a newly-added assertion failure that came up, however this had the inadvertent side effect of changing symbol mangling and ASTPrinter behavior.

The problem in both instances was that we would incorrectly return certain requirements as unsatisfied when really they are satisfied.

There is nothing to fix in the ASTPrinter, because printing redundant requirements does not change the generic signature of the extension; they are simply dropped. I added a test to exercise the new behavior showing that the requirements are dropped.

As for the mangler, the fix introduced an ABI break, because the symbol name of a conformance descriptor includes its conditional requirements, so we must preserve the redundant requirements forever.

I'm plumbing down a flag to isRequirementSatified() to preserve compatibility with the old behavior where we would mangle these redundant requirements. No other callers should pass this flag, except for the mangler.

Fixes rdar://139089004.",
77477,2024-11-08T07:01:50Z,2024-11-08T12:15:24Z,DougGregor,2,1,1,54,2,2,3,[],6.0,0,30941.0,0,0,0,0,4279208.193744,,2,1,0,False,['DougGregor'],"@swift-ci please test For reference, I introduced this bug with the removal of `IfConfigDecl` in https://github.com/swiftlang/swift/pull/76565. Prior to that PR, we'd have a leftover `IfConfigDecl` as the case statement, so we wouldn't do this early-exit, but the builder transform would skip over the `IfConfigDecl` and end up making an empty `buildBlock` call... which is totally fine. Now, we'll get the same semantics.",,"Remove code that aborts the result builder transform when we encounter a case that has no statements in it. This can occur when the only statements were behind a `#if` that evaluataed empty, so it should not cause an abort.

Previously, the presence of an IfConfigDecl within the case statement would have prevented us from aborting the traversal here. However, the removal of IfConfigDecl from the AST turned this previously-accepted code into a compiler crash.

Fixes rdar://139312426.
","Empty protocol and struct is really needed ? 

I guess yes because of static funcs returns on `VB`."
77470,2024-11-07T23:32:11Z,2024-11-08T14:36:16Z,aschwaighofer,2,0,1,50,3,1,1,[],9.0,0,54245.0,0,0,0,0,4282884.380147,,1,1,0,False,['aschwaighofer'],@swift-ci smoke test @swift-ci smoke test linux,,rdar://139457907,
77460,2024-11-07T21:01:28Z,2024-11-08T14:30:48Z,aschwaighofer,5,0,2,64,2,0,0,[],9.0,0,62961.0,0,0,0,0,4283211.986116,,1,2,0,False,['aschwaighofer'],"@swift-ci test @swift-ci test Hmm, the same lldb test `SwiftREPL/BreakpointSimple.test` fails with a timeout on two of my PRs:

https://ci.swift.org/job/swift-PR-Linux/18056
https://ci.swift.org/job/swift-PR-Linux/18065

Seems unrelated. @swift-ci test linux @swift-ci test linux",,"Metadata lookup uses getRuntimeReifiedType(X) in places, fill the cache with key entries for X and getRuntimeReifiedType(X) such that they can be found on lookup.

rdar://139234543",
77457,2024-11-07T18:57:43Z,2024-11-08T10:14:25Z,fahadnayyar,2,0,1,14,2,1,1,['c++ interop'],12.0,1,55003.0,0,0,0,0,4298595.356675,,5,1,0,False,['fahadnayyar'],@swift-ci please smoke test @swift-ci please smoke test linuxLGTM,LGTM,Minor refactoring so that we avoid code duplication in checking whether clang::RecordDecl has reference semantics.,
77438,2024-11-07T00:59:25Z,2024-11-08T09:15:58Z,ktoso,6,0,3,88,21,1,1,[],1397.0,0,116195.0,0,0,0,0,4302102.687917,,5,3,0,False,['ktoso'],"@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test Linux @swift-ci please smoke test ```

TIMEOUT: lldb-shell :: SwiftREPL/BreakpointSimple.test (3017 of 3017)
******************** TEST 'lldb-shell :: SwiftREPL/BreakpointSimple.test' FAILED ********************
``` @swift-ci please smoke test LinuxYes, let's make sure everything is exactly right before we enable by default","Yes, let's make sure everything is exactly right before we enable by default","Reverts swiftlang/swift#77364

We have to keep it experimental for now while we keep addressing some issues this still has.

FYI @nickolas-pohilets sadly this work keeps triggering large scale fallout in optimized or simulator CIs we run after merging through the PR validation. We'll have to keep working on fixing those.",
77474,2024-11-08T02:36:02Z,2024-11-08T06:23:42Z,tshortli,1,0,1,7,2,2,2,[],11.0,0,17984.0,0,0,0,0,4308117.162528,,2,1,0,False,['tshortli'],@swift-ci please smoke testIt should be possible to ask Sema to provide r-value type for this context but this is okay temporarily.,It should be possible to ask Sema to provide r-value type for this context but this is okay temporarily.,"When computing the actor type for an expression, be sure to look through l-value types to get the underlying type.

Resolves rdar://139470254.
",
71871,2024-02-25T00:15:50Z,2024-02-26T20:23:54Z,amomchilov,2,0,1,8,1,1,1,[],64873.0,0,22203943.0,0,0,0,0,4335370.599676,,0,1,0,False,['xwu'],@swift-ci smoke test @swift-ci smoke test Windows platform,,Just a small typo discovered in apple/swift-algorithms#224,
76630,2024-09-21T18:41:41Z,2024-11-07T23:56:22Z,drexin,12,0,17,5969,15,0,0,[],75.0,0,4079685.0,0,0,0,0,4335678.834111,,2,17,0,False,['drexin'],@swift-ci build toolchain macos @swift-ci test @swift-ci smoke test @swift-ci build toolchain macos @swift-ci smoke test @swift-ci build toolchain macos @swift-ci smoke test linux @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test @swift-ci smoke test,,"rdar://135954459
",
77431,2024-11-06T22:54:47Z,2024-11-07T23:55:08Z,drexin,3,2,1,186,5,1,2,[],7.0,0,90021.0,0,0,0,0,4335757.436023,,2,1,0,False,['drexin'],"@swift-ci smoke test @swift-ci smoke test @swift-ci smoke testSmall comments, but LGTM overall.","Small comments, but LGTM overall.","…nd blocks

rdar://138487964

On platforms that don't have reserved bits in objc (including unknown) pointers, we use the spare bits for Swift enums, so they have to be masked out. Blocks don't have reserved bits on any platform.","Do we know for sure that the block has been copied to the heap already? `_Block_copy` returns its parameter iff the block isn't still on the stack. I recall that the Swift compiler doesn't try too hard to avoid copying blocks so we may never see a stack block here, but this worries me a bit, especially if the compiler got smarter about not copying nonescaping blocks at some point. It would be good to comment these so we can remember why this masking is predicated on 0 reserved bits. Maybe extract it into a little helper function with a more descriptive name."
77454,2024-11-07T17:44:00Z,2024-11-07T23:47:07Z,xymus,1,0,1,9,1,1,1,[],10.0,0,21791.0,0,0,0,0,4336235.109387,,3,1,0,False,['xymus'],@swift-ci Please smoke test,,"Align the behavior between release and debug compilers to always report this as an error. Downstream compilers already make this an error.

The release behavior is already tested since https://github.com/swiftlang/swift/pull/76386/commits/20b4187e25fbff0da11894fa264edb4323a7a9d6. That test will be fixed by this PR.

rdar://136041870",
77422,2024-11-06T15:35:51Z,2024-11-07T23:31:55Z,ahatanaka,7,0,2,89,2,1,1,[],130.0,0,114965.0,0,0,0,0,4337151.056878,,6,2,0,False,['ahatanaka'],"The API is implemented here: https://github.com/swiftlang/llvm-project/pull/9519 @swift-ci Please test @swift-ci Please smoke test macOS @swift-ci Please smoke test Linux @swift-ci Please test Windows @swift-ci Please smoke test Linux @swift-ci Please smoke test LinuxThank you for sharing the implementation here, Akira!","Thank you for sharing the implementation here, Akira!",,
77427,2024-11-06T20:14:05Z,2024-11-07T22:45:46Z,mikeash,4,0,1,10,1,0,0,[],6.0,0,95501.0,0,0,0,0,4339921.567617,,1,1,0,False,['mikeash'],@swift-ci please smoke test Needs more `#if`. Trying again.... @swift-ci please smoke test @swift-ci please smoke test linux platform,,"It may not be available at runtime even if it was present at build time, so add a WEAK_CHECK/WEAK_USE to it.",
77149,2024-10-21T19:54:20Z,2024-11-07T22:04:27Z,Azoy,7,8,10,315,23,2,1,[],4022.0,0,1477024.0,0,0,0,0,4341984.594225,,10,10,0,False,"['rintaro', 'Azoy']","Please test with the following pull request:
https://github.com/swiftlang/swift-syntax/pull/2859

@swift-ci please test Please test with the following pull request:
https://github.com/swiftlang/swift-syntax/pull/2859

@swift-ci please test Please add tests in `lib/ASTGen/`.
Also, could we remove `-disable-experimental-parser-round-trip` in the following tests now?

test/Interpreter/value_generics.swift
test/ModuleInterface/value_generics.swift
test/Sema/value_generics.swift
test/Serialization/value_generics.swift
 Please test with the following pull request:
https://github.com/swiftlang/swift-syntax/pull/2859
https://github.com/swiftlang/swift-format/pull/866

@swift-ci please test Please test with the following pull request:
https://github.com/swiftlang/swift-syntax/pull/2859
https://github.com/swiftlang/swift-format/pull/866

@swift-ci please test Please test with the following pull request:
https://github.com/swiftlang/swift-syntax/pull/2859
https://github.com/swiftlang/swift-format/pull/866

@swift-ci please test Please test with the following pull request:
https://github.com/swiftlang/swift-syntax/pull/2859
https://github.com/swiftlang/swift-format/pull/866

@swift-ci please testlib/Parse and lib/ASTGen changes look good to me. Thanks!
Still missing `test/ASTGen` test cases. Also just a small issues in `SwiftMacros` Thank you for doing this!","lib/Parse and lib/ASTGen changes look good to me. Thanks!
Still missing `test/ASTGen` test cases. Also just a small issues in `SwiftMacros` Thank you for doing this!","In support of the Swift syntax parser being able to parse integer changes, we need to handle those in ASTGen.

Syntax PR: https://github.com/swiftlang/swift-syntax/pull/2859","Could you use `self.copyAndStripUnderscores(text: node.rawText)` (where `node` is `IntegerLiteralExprSyntax`) Could be
```suggestion
        guard let node = node.expression.as(IntegerLiteralExprSyntax.self) else {
``` ```suggestion
  func generateIntegerType(
    integerLiteralExpr node: IntegerLiteralExprSyntax,
    minusLoc: BridgedSourceLoc = BridgedSourceLoc()
  ) -> IntegerLiteralTypeRepr {
```

ASTGen has a loose `generate` function naming convention `generate{Result}({source}:)` where `{Result}` is what to generate, and `{source}` is the input syntax type. Also we'd like to delay upcasting (`.asTypeRepr`) as much as possible.

Also could this function include the common logic between `case .expr(let expr):` bodies of the two functions above? i.e. 
```swift
    ...
    case .expr(let expr):
      return self.generateIntegerType(expr: expr).asTypeRepr
    }
  }
  
  func generateIntegerType(expr node: ExprSyntax) -> BridgedIntegerTypeRepr {
    let minusLoc: SourceLoc
    let literalExpr: integerLiteralExprSyntax

    switch node.as(ExprSyntaxEnum.self) {
    case .integerLiteralExpr(let node):
      minusLoc = nil
      literalExpr = node
    case .prefixOperatorExpr(let node):
      // .. check `-{IntergerLiteralSyntax}` ...
      minusLoc = self.generateSourceLoc(op)
      literalExpr = ...
    default:
      fatalError(...)
    }

    return .createParsed(
      self.ctx,
      string: self.copyAndStripUnderscores(text: literalExpr.rawText),
      loc: self.generateSourceLoc(literalExpr),
      minusLoc: minusLoc
    )
  }
```
 Weird indentation for the second `case` branch Assume this won't crash the plugin when a user writes like this?
```swift
@Resolvable protocol MyProto: DistributedActor where ActorSystem == 4 { ... }
```
because the compiler doesn't try expanding it? If so, could you add some comment? This is intended as there is another switch. I'll change this to throw a diagnostic instead. Oh, my bad. I didn't see it"
77285,2024-10-29T21:48:34Z,2024-11-07T21:51:35Z,xymus,3,0,1,47,2,0,0,[],12.0,0,777781.0,0,0,0,0,4343174.074862,,0,1,0,False,['xymus'],@swift-ci Please smoke test @swift-ci Please smoke test Windows @swift-ci Please smoke test Windows,,"The diagnostics about unintended override of Objective-C methods deserialize more decls than strictly necessary. Any of these could trigger a deserialization failure if they rely on hidden dependencies. Simply ignore methods failing to deserialize instead of crashing.

We could improve further if necessary, this logic may ignore methods that are actually colliding. Instead we could put more information in the lookup table to avoid the need to fully deserializing the decls.

rdar://138764733",
77403,2024-11-05T20:11:35Z,2024-11-07T21:22:07Z,etcwilde,7,30,17,1024,19,4,2,[],15.0,0,177032.0,0,0,0,0,4344943.618116,,3,17,0,False,['etcwilde'],"@swift-ci please smoke test Linux test failure:

```
CMake Error at CMakeLists.txt:32 (cmake_minimum_required):
  CMake 3.26 or higher is required.  You are running version 3.24.2
``` We'll need to update our CMake version @swift-ci please test @swift-ci please smoke test @swift-ci please smoke test @swift-ci please test Linux",,"This PR gets us up to SwiftCore building with the new build system.
I've wired it into the existing build and am enabling building with it in the Linux smoke-tests to keep things going. We are not currently running or installing the built code though.

rdar://139221398","Why default to `OFF` for this? Is this just maintaining parity? Can we reference a swiftlang/swift issue here? Should we use a variable instead? `SwiftCore_SWIFT_COMPILER_SOURCES` which we set to `${PROJECT_SOURCE_DIR}/../..`. I'm concerned about the hardcoded layout. ```suggestion
  target_compile_definitions(swiftDemangling PRIVATE SWIFT_SUPPORT_OLD_MANGLING=1)
``` ```suggestion
  target_compile_definitions(swiftDemangling PRIVATE SWIFT_SUPPORT_OLD_MANGLING=0)
``` ```suggestion
if(LINUX OR BSD)
``` Can we set it to 1 when enabled and un-set it when disabled? That should work for both. Should this be gitignored? Looks like `PlatformInfo.cmake` writes this when it's needed. Or maybe `PlatformInfo.cmake` doesn't need to write it. Nit: just in case you actually want to add a radar number. Nit: There's no `cmake/configs` right now. Can we reference a swiftlang/swift issue here? Did you try…?

```
include(CheckTypeSize)
check_type_size(""void *"" ptr_bytes)
``` Are the `-D` prefixes required here? Nit: I might be thinking of other directory, but I think it is normally `lib/clang/<version>/include`. ```suggestion
    swiftCore_EXPORTS
    SWIFT_ENABLE_BACKTRACING=$<BOOL:${SwiftCore_ENABLE_BACKTRACING}>
    SWIFT_RUNTIME
    SWIFT_TARGET_LIBRARY_NAME=swiftRuntime
    $<$<BOOL:${SwiftCore_ENABLE_REFLECTION}>:SWIFT_ENABLE_REFLECTION>
    $<$<BOOL:${SwiftCore_BACKTRACER_PATH}>:SWIFT_RUNTIME_FIXED_BACKTRACER_PATH=""${SwiftCore_BACKTRACER_PATH}"">
    $<$<BOOL:${SwiftCore_ENABLE_CRASH_REPORTER_CLIENT}>:SWIFT_HAVE_CRASHREPORTERCLIENT>)
``` I am seeing this `${PROJECT_SOURCE_DIR}/../..` bit in several places. I don't think `Runtimes/Core` has a lot of chances of changing directory levels, but in case it does, chasing all these might not be fun. I was thinking in having a `SWIFT_TOP_LEVEL_SOURCE_DIR` calculated once after the `project()` call, which can be used in the rest of the files. It also happens to document how to get to the top level source dir, if necessary. ```suggestion
```

If you want to include the current directory prefer:

```cmake
set(CMAKE_INCLUDE_CURRENT_DIRECTORY YES)
``` ```suggestion
  add_library(swiftrt OBJECT SwiftRT-COFF.cpp)
``` ```suggestion
``` ```suggestion
``` Nit: `# crashes if they are` (if we are talking about ""sources"", right?) ```suggestion
  message(SEND_ERROR ""Unknown object format '${SwiftCore_OBJECT_FORMAT}'"")
  return()
endif()
target_compile_definitions(swiftrt PRIVATE
  SWIFT_ENABLE_BACKTRACING=$<$<BOOL:${SwiftCore_ENABLE_BACKTRACING}>>)
``` This file is explicitly used in `PlatformInfo.cmake` below. I think that you mean `${CMAKE_C_COMPILER} /T /Fo -` (even `clang-cl` will require that you adjust the flags). Can we do this once and cache the value? This seems like it would help reduce the configure times. Please follow @etcwilde's advice 😆 This forces WMO on all modules. Should we be controlling this based on an option? Should we consider a list of gyb sources and then just iterate over them? This violates the ORDER DEPENDENCY. Can we use `target_compile_definitions` or does that not wire up through the clang importer?"
77455,2024-11-07T18:00:30Z,2024-11-07T19:01:47Z,aschwaighofer,2,0,1,17,1,0,0,[],11.0,0,5578.0,0,0,0,0,4351462.741723,,1,1,0,False,['aschwaighofer'],@swift-ci smoke test https://ci.swift.org/job/oss-swift-incremental-ASAN-RA-macos/7223/ has the fix and hopefully is green again,,"rdar://139398409

Should fix the failure in  https://ci.swift.org/job/oss-swift-incremental-ASAN-RA-macos/7219

```
=================================================================
==36519==ERROR: AddressSanitizer: heap-use-after-free on address 0x61b000759fd9 at pc 0x00010d30c053 bp 0x7ff7b46c3670 sp 0x7ff7b46c3668
WRITE of size 1 at 0x61b000759fd9 thread T0
    #0 0x10d30c052 in runPeepholesAndReg2Mem
    ```",
77323,2024-10-31T16:01:51Z,2024-11-07T17:44:07Z,Xazax-hun,3,1,1,69,13,2,1,['c++ interop'],78467.0,0,610938.0,0,0,0,0,4358022.475109,,10,1,0,False,['Xazax-hun'],"@swift-ci please smoke test @swift-ci please smoke test Please test with following pull request:
https://github.com/swiftlang/llvm-project/pull/9538

@swift-ci please smoke test",,"A recent PR (#77204) started to import C++ source locations into Swift. This PR flips a switch so these locations are actually used more widely.
","Previously, this error had unknown location."
77224,2024-10-25T14:40:44Z,2024-11-07T17:02:59Z,allevato,3,0,1,302,5,1,1,[],22.0,0,1131737.0,0,0,0,0,4360491.86704,,5,1,0,False,"['allevato', 'DougGregor']","@swift-ci please smoke test Friendly ping; can someone please take a look at this? @DougGregor @beccadax  This looks great, @allevato , thank you for the ping and my apologies for missing it. Please feel free to merge.",,"Some macro-generated declarations are not being printed in the Obj-C/C++ generated header. Members introduced by attached `member` macros on a type appear to be fine, but those introduced by a attached `peer` or freestanding `declaration` macros don't show up.

This change updates the header writer to call `getAllMembers` throughout instead of `getMembers`, which makes sure that everything gets collected. Likewise, we update the top-level logic from `getTopLevelDecls` to `getTopLevelDeclsWithAuxiliaryDecls` to pick up freestanding decls introduced at file scope.

Fixes https://github.com/swiftlang/swift/issues/68170.
",
77394,2024-11-05T15:54:57Z,2024-11-07T16:34:13Z,aschwaighofer,2,0,1,22,3,1,1,[],9.0,0,175156.0,0,0,0,0,4362219.95265,,0,1,0,False,['aschwaighofer'],@swift-ci smoke test @swift-ci smoke testThanks!,Thanks!,,
77439,2024-11-07T01:00:25Z,2024-11-07T16:21:16Z,jckarter,1,0,1,1,1,0,0,[],8.0,0,55251.0,0,0,0,0,4362997.8765,,1,1,0,False,['jckarter'],@swift-ci Please smoke test,,,
77442,2024-11-07T01:28:33Z,2024-11-07T08:47:04Z,tshortli,1,0,2,77,5,0,0,[],14.0,0,50041.0,0,0,0,0,4366520.985593,,3,2,0,False,['tshortli'],@swift-ci please test,,"Suppression of diagnostics about use of unavailable declarations in equivalently unavailable contexts now relies on querying the `TypeRefinementContext` hierarchy. Generation of the `TypeRefinementContext` tree was suppressed when `-disable-availability-checking` was specified, though, causing some unavailability diagnostics to be emitted when they ought to be suppressed.

Instead of refusing to generate a `TypeRefinementContext` hierarchy, instead just avoid populating nodes for `if #available` checks for OS versions since these checks are meant to have no effect when `-disable-availability-checking` is specified.

Resolves rdar://138987918.",
77391,2024-11-05T12:18:34Z,2024-11-07T15:48:16Z,Xazax-hun,2,5,1,22,2,2,1,['c++ interop'],121.0,0,185383.0,0,0,0,0,4364978.122776,,2,1,0,False,['Xazax-hun'],@swift-ci please smoke test @swift-ci please smoke test,,"This is not yet supported, so skip exporting those accessors for now.

Fixes #77304

rdar://138944832
","What would happen if a Swift property has a `_read` accessor and a setter? Could you please add a test just to make sure we don't crash? Do we rely on Obj-C runtime in this test? Should this be `// REQUIRES: synchronization` instead? Could you help me come up with an example? In the code snippets I tried swift synthesized a getter. Seemingly the only way I could prevent that is to have a property with `~Copyable` type. But in that case, a setter would not compile, I need a `_modify` accessor. 

If there is any other way to prevent Swift from synthesizing a getter (despite me only spelling out a `_read` accessor) let me know.  I was thinking of something like this:
```swift
struct Foo {
  private var x: Int = 123
  var computedVar: Int {
    _read { yield &x }
    set { x = newValue }
  }
}
```
Would Swift synthesize a getter in this case? I got this error:
```
20 |     _read { yield &x }
   |                   `- error: '&' may only be used to pass an argument to inout parameter
```

After removing the `&`, I see `Foo::getComputedVar()` in the generated interop header, so I think the getter is being synthesized in this case. "
75778,2024-08-08T13:39:23Z,2024-11-07T15:20:36Z,JaapWijnen,14,3,1,40,1,3,2,[],37.0,0,7868473.0,0,0,0,0,4366640.587099,,0,1,0,False,"['JaapWijnen', 'rxwei', 'asl']","tagging @asl also tagging @rxwei  @swift-ci please test preset=buildbot,tools=RA,stdlib=RA
@swift-ci Please test with preset macOS preset=buildbot,tools=RA,stdlib=DA
@swift-ci Please test with preset macOS preset=buildbot,tools=RA,stdlib=DA
@swift-ci Please test with preset macOS How much is the performance boost? Could you quantify that in the PR description? @rxwei updated my original post with some benchmark numbers > @rxwei updated my original post with some benchmark numbers

wow! Anyone specific I could tag for the other required review? @rxwei  @swiftlang/standard-librarians
Kindly requesting a review on this if possible! 
A note regarding ABI, no users of the stdlib are affected by this change since we're only differentiation related parts `Array.DifferentiableView`. 
But all  differentiation related changes are ABI compatible, we’re only making additions since we're marking more methods inlinable so we're not removing anything.  @rxwei @swiftlang/standard-librarians What is the policy for such stdlib changes? Should it be additionally reviewed / approved by someone? @rxwei I've been going through all the methods in stdlib/public/Differentiation and there's also some candidates for adding @inlinable in OptionalDifferentiation.swift and FloatingPointDifferentiation.swift.gyb
Would it be worth including these in this MR or should I make that a separate one?  @asl Can we merge this? Seems to be fully approved! :)This looks plausible to me as a stdlib engineer; the implementations exposed look relatively obvious and unlikely to need to change, and making them inlinable will allow client modules to specialize them.

As noted though, this change is only safe to make as long as `Differentiation` is not expected to be ABI stable in any context.","This looks plausible to me as a stdlib engineer; the implementations exposed look relatively obvious and unlikely to need to change, and making them inlinable will allow client modules to specialize them.

As noted though, this change is only safe to make as long as `Differentiation` is not expected to be ABI stable in any context.","This PR marks several methods in ArrayDifferentiation.swift with @inlinable adding much more opportunity for specialisation. This leads to huge performance increases and much lower memory usage in a few Differentiable example programs using Array and Array.DifferentiableView.

Main increase is due to being able to specialise Array.DifferentiableView's + operator from it's conformance to AdditiveArithmetic and therefore further being able to inline function calls and not having to go through the protocol witness table.

Technically we do restrict ourselves wrt future changes to the `DifferentiableView` implementation since the internals are now marked `@usableFromInline`. We currently think this is acceptable since Differentiation currently is not shipped to an ABI stable platform. 

Some performance numbers:
The benchmark I'm using is a reimplementation of the original SwiftForTensorflow example found here: https://github.com/tensorflow/swift-models/tree/2fb0b92e1291b730fd1a5cd8a3b107c8e75c7d7a/Examples/Shallow-Water-PDE
This was implemented on top of the Tensor type that S4TF introduced. 
My example uses an Array for storage. 

For the benchmark I've set the amount of iterations to 1 so I'm benchmarking the wall clock time and malloc of running a forward pass and pullback once through an array of `resolution * resolution` and `duration` amount of time steps 
Every tilmestep the benchmark applies the Laplace operator to every cell of the array. 
I ran my benchmark for values of 10 and 20 for both of these variables. You can find the results below. As you can see the difference in performance is quite enormous ranging from at least 20x in both categories to 60-70x

```
----------------------------------------------------------------------------------------------------------------------------
Optimization res: 10, duration: 10 metrics
----------------------------------------------------------------------------------------------------------------------------

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│         Time (wall clock) (ms) *         │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │  323301 │  326631 │  328466 │  331612 │  336331 │  346292 │  346705 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │   15549 │   15704 │   15909 │   16204 │   16368 │   17957 │   23918 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │ -307752 │ -310927 │ -312557 │ -315408 │ -319963 │ -328335 │ -322787 │       0 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      95 │      95 │      95 │      95 │      95 │      95 │      93 │       0 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│           Malloc (total) (K) *           │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │    3640 │    3640 │    3640 │    3640 │    3640 │    3640 │    3640 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │     131 │     131 │     131 │     131 │     131 │     131 │     131 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │   -3509 │   -3509 │   -3509 │   -3509 │   -3509 │   -3509 │   -3509 │       0 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      96 │      96 │      96 │      96 │      96 │      96 │      96 │       0 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

----------------------------------------------------------------------------------------------------------------------------
Optimization res: 10, duration: 20 metrics
----------------------------------------------------------------------------------------------------------------------------

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│         Time (wall clock) (ms) *         │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │  641372 │  646447 │  649593 │  655360 │  662700 │  684196 │  741245 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │   30743 │   31080 │   31293 │   31687 │   32195 │   32997 │   33447 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │ -610629 │ -615367 │ -618300 │ -623673 │ -630505 │ -651199 │ -707798 │       0 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      95 │      95 │      95 │      95 │      95 │      95 │      95 │       0 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│           Malloc (total) (K) *           │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │    7233 │    7233 │    7233 │    7233 │    7233 │    7233 │    7233 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │     261 │     261 │     261 │     261 │     261 │     261 │     261 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │   -6972 │   -6972 │   -6972 │   -6972 │   -6972 │   -6972 │   -6972 │       0 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      96 │      96 │      96 │      96 │      96 │      96 │      96 │       0 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

----------------------------------------------------------------------------------------------------------------------------
Optimization res: 20, duration: 10 metrics
----------------------------------------------------------------------------------------------------------------------------

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│         Time (wall clock) (ms) *         │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │ 5645665 │ 5679088 │ 5708448 │ 5796528 │ 6027215 │ 6033953 │ 6033953 │      18 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │  180295 │  181535 │  182452 │  184287 │  188350 │  209977 │  213960 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │ -54653… │ -54975… │ -55259… │ -56122… │ -58388… │ -58239… │ -58199… │      82 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      97 │      97 │      97 │      97 │      97 │      97 │      96 │      82 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│           Malloc (total) (K) *           │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │      68 │      68 │      68 │      68 │      68 │      68 │      68 │      18 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │       1 │       1 │       1 │       1 │       1 │       1 │       1 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │     -67 │     -67 │     -67 │     -67 │     -67 │     -67 │     -67 │      82 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      99 │      99 │      99 │      99 │      99 │      99 │      99 │      82 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

----------------------------------------------------------------------------------------------------------------------------
Optimization res: 20, duration: 20 metrics
----------------------------------------------------------------------------------------------------------------------------

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│         Time (wall clock) (ms) *         │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │ 112075… │ 112742… │ 113330… │ 113749… │ 115526… │ 115526… │ 115526… │       9 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │  358827 │  363856 │  367002 │  370672 │  374604 │  392167 │  408872 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │ -10848… │ -10910… │ -10966… │ -11004… │ -11178… │ -11160… │ -11143… │      91 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      97 │      97 │      97 │      97 │      97 │      97 │      96 │      91 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛

╒══════════════════════════════════════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╤═════════╕
│           Malloc (total) (K) *           │      p0 │     p25 │     p50 │     p75 │     p90 │     p99 │    p100 │ Samples │
╞══════════════════════════════════════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╪═════════╡
│                  alpha                   │     135 │     135 │     135 │     135 │     135 │     135 │     135 │       9 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│               Current_run                │       2 │       2 │       2 │       2 │       2 │       2 │       2 │     100 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│                    Δ                     │    -133 │    -133 │    -133 │    -133 │    -133 │    -133 │    -133 │      91 │
├──────────────────────────────────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│              Improvement %               │      99 │      99 │      99 │      99 │      99 │      99 │      99 │      91 │
╘══════════════════════════════════════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╧═════════╛
```

","Beware, adding `@usableFromInline` introduces a newly exported symbol without availability. It would not be safe to make this change in a module that's expected to have stable ABI. Newly built code after this change may not be binary compatible with Differentiation in earlier Swift releases.

(However, as I understand it, while Differentation is being build with library evolution enabled, it is not distributed as such on any platform where Swift is ABI stable. It is also unclear if the problematic stored property accessor exports are ever actually called in practice for a `@frozen` structure like this.) Thanks for the review @lorentey !
Just to double check, this is considered unsafe because the struct was already decorated with `@frozen`? Or is using `@usableFromInline` without public availability generally ABI unstable? I might not fully grasp the subtlety here but would love to understand better to keep these in mind for future changes. 
But indeed Differentiation is not yet distributed to a platform that is ABI stable, so it's not an issue yet! @rxwei in your opinion, are we good to go here? As @lorentey points out we break ABI here but that's currently not an issue yet right? I'll add some comments to the main PR message regarding ABI stability.

As an additional question, just for my understanding. Is the following change binary incompatible? And if so why? It seems to me that we're only adding information to the interface not changing the binary layout of the struct. But I also don't have a lot of experience here so would like to understand the details if possible!
```
@frozen 
struct Thing {
    var storage: Float
}
```
-> 
```
@frozen 
struct Thing {
    @usableFromInline
    var storage: Float
}
```

Also tagging @asl "
77444,2024-11-07T01:50:51Z,2024-11-07T09:15:22Z,mikeash,1,0,1,4,1,0,0,[],15.0,0,26671.0,0,0,0,0,4388555.144592,,1,1,0,False,['mikeash'],@swift-ci please test,,"The direct call to _getTypeByMangledName made the compiler angry when doing an optimizd simulator build. Instead, use _typeByName with a string that has an embedded NUL to achieve the same effect.

rdar://139264622",
77428,2024-11-06T20:35:58Z,2024-11-07T02:16:35Z,hamishknight,1,0,1,10,1,0,0,[],8.0,0,45957.0,0,0,0,0,4388162.215194,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,"Make it a bit clearer that `utils/generate-xcode` is a convenience for the `swift-xcodegen` script in this directory.
",
77440,2024-11-07T01:07:39Z,2024-11-07T05:40:00Z,DougGregor,1,6,1,54,6,2,0,[],7.0,0,22375.0,0,0,0,0,4395445.243671,,2,1,0,False,['DougGregor'],"@swift-ci please smoke testInstead of dragging diagnostic transaction around could we take a look at `TentativeDiagnostics` instead, I think that would be equivalent?","Instead of dragging diagnostic transaction around could we take a look at `TentativeDiagnostics` instead, I think that would be equivalent?","When we are using diagnostic transactions to disable immediate emission of diagnostics, `DiagnosticEngine::hadAnyError()` no longer accurately reports whether an error occurred. Thread the DiagnosticTransaction into the ConstraintSystem so we can also check whether it contains an error before emitting the fallback diagnostic.

Fixes rdar://128272346.
","It seems like `hadError()` is too restrictive here and we should add a new method on DiagnosticEngine i.e. `emittedOrHasPendingErrors()` which would examine TentativeDiagnostics from all currently open transactions as well as `hadError()`. I was thinking we should keep this narrow, so it doesn't get suppressed due to an unrelated diagnostic transaction.  So I think my approach is better here than checking `TentativeDiagnostics`. I'm going to merge proactively, but am willing to change if I'm wrong. This approach checks only the innermost transaction, there could be others ones with errors. I think that's a feature. We don't know if we care about any other active transactions. Sounds good then!"
77441,2024-11-07T01:08:59Z,2024-11-07T01:23:36Z,gottesmm,1,0,1,2,1,1,0,[],71.0,0,2517.0,0,0,0,0,4415223.60384,,0,1,0,False,['gottesmm'],"@swift-ci smoke testLgtm
","Lgtm
",,
77436,2024-11-06T23:56:25Z,2024-11-07T04:25:50Z,DougGregor,1,0,1,43,4,1,1,[],6.0,0,16173.0,0,0,0,0,4405921.618374,,7,1,0,False,['DougGregor'],@swift-ci please smoke test,,"This started out as a crash, where an expression macro could not be defined in terms of one of the builtin macros (e.g., `#line`), because we were expecting a macro expansion expression but didn't get one. Easy fix.

However, this uncovered a second bug, which is that we couldn't handle an expression macro expansino to `#line`. This is because we were parsing the macro expansion buffer as ""top level items"", which treats `#line` at the start of a line as a deprecated alias of `#sourceLocation`. Switch over to parsing a single expression in these contexts, and fix up an issue where `#isolation` didn't even have that expression.

Fixes rdar://139372780.
",
76113,2024-08-27T21:48:04Z,2024-09-04T05:26:45Z,andrurogerz,5,5,2,62,1,2,2,[],65243.0,0,6146718.0,0,0,0,0,4417479.786576,,2,2,0,False,"['andrurogerz', 'compnerd', 'hjyamauchi']","@hjyamauchi would you mind having a look at this change?

@shahmishal I believe you have some stake in `build.ps1` changes not breaking CI. This change is meant to have no effect unless the new argument is provided, so should be a noop for you. LGTM. Note the `IncludeDS2` flag is an opt-in (off by default.) @swift-ci please test @swift-ci please test @swift-ci please smoke test",,"Conditionally include the [DS2debug server](https://github.com/compnerd/ds2) in the Android Swift SDK build. DS2 and its dependencies are only included when `build.ps1` is invoked with the `-IncludeDS2` flag.

This change is comprised of three primary parts:
1. Fetch and unpack WinFlexBison tools; `flex` and `bison` equivalents are required to build DS2.
2. Build the `RegsGen2` host tool, specifying the previously unpacked `win_flex.exe` and `win_bison.exe` tools.
3. Build ds2 binary for each each requested Android SDK architecture and install it to the proper location under the `Android.platform` directory.

NOTE: the Android SDK isn't currently included in the installer build, so the ds2 binary only ends up in the output directory and not in any .msi file.

## Test Plan
Build with and without ds2 included
```
cd S:\SourceCache
.\swift\utils\build.cmd -AndroidSDKs aarch64,x86_64
.\swift\utils\build.cmd -AndroidSDKs aarch64,x86_64 -IncludeDS2
```
Confirm the ds2 binary appears in the expected location only when `-IncludeDS2` is specified
```
cd S:\b
dir /s /b ds2
S:\b\aarch64\Android\ds2
S:\b\aarch64\Android\ds2\ds2
S:\b\arm64\Android.platform\Developer\Library\aarch64-unknown-linux-android\bin\ds2
S:\b\x64\Android.platform\Developer\Library\x86_64-unknown-linux-android\bin\ds2
S:\b\x86_64\Android\ds2
S:\b\x86_64\Android\ds2\ds2
```

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
","Could have a `;` at the end of the line? ```suggestion
  return Join-Path -Path $BinaryCache -ChildPath ""win_flex_bison\win_flex.exe""
``` ```suggestion
  return Join-Path -Path $BinaryCache -ChildPath ""win_flex_bison\win_bison.exe""
``` This seems wrong - this should be using `Get-BuildProjectBinaryCache` as the tool is being run on build, not host. Why not hoist this into the tools build above? I think it makes sense to build this around the compilers phase and in the same block."
76262,2024-09-04T18:31:58Z,2024-09-04T22:44:09Z,andrurogerz,1,0,1,2,1,2,2,[],339.0,0,5467273.0,0,0,0,0,4417490.801999,,0,1,0,False,['compnerd'],@swift-ci please smoke test,,"## Purpose
Defines `CMAKE_POSITION_INDEPENDENT_CODE=YES` when building libxml2 and curl on Windows with `build.ps1`. Defining this property makes `build.ps` consistent with the Python build scripts `swift_build_support\products\libxml2.py` and `swift_build_support\products\curl.py`.

## Problem Details
Android i686/x86 binaries fail to link against libraries compiled without `-fPIC`.

## Validation
Successfully built swift toolchain locally with the following command on Windows:
```
S:\SourceCache\swift\utils\build.cmd -AndroidSDKs x86_64,aarch64,i686
```
This command previously failed linking with i686 libcurl due to not being compiled with `-fPIC`.

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77423,2024-11-06T18:19:55Z,2024-11-06T22:48:45Z,DougGregor,2,0,1,45,3,2,2,[],14.0,0,20056.0,0,0,0,0,4422231.153134,,3,1,0,False,['DougGregor'],@swift-ci please smoke test @swift-ci please smoke test macOSNice find,Nice find,"The condition to make sure that the parser makes progress when there is an ill-formed macro expansion to members was incorrect, causing an infinite loop if there was at least one well-formed declaration followed by ill-formed code (in this case, a `}`). Fix the condition.

Fixes rdar://137828917.
",
77413,2024-11-06T04:26:17Z,2024-11-06T23:33:26Z,etcwilde,4,0,1,21,1,1,1,[],9.0,0,68835.0,0,0,0,0,4423472.837846,,2,1,0,False,['etcwilde'],"@swift-ci please test preset=asan
@swift-ci please test with preset macOS platform preset=asan
@swift-ci please test with preset macOS platform @swift-ci please test",,"Cherry-Picking PR: https://github.com/swiftlang/swift/pull/74033

Don't use the just-built clang on macOS. macOS does this more ""right"" than the Linux build. Linux will sometimes use the just-built Swift-driver with the just-built clang, but sometimes would use the system clang instead. macOS uses the toolchain Swift-driver with the toolchain clang. This is correct, but it means that if we force the other clang, we'll get mismatched sanitizer runtimes so the ASAN bot will fail.

rdar://139245838",
77425,2024-11-06T19:17:06Z,2024-11-06T23:09:11Z,tshortli,3,0,1,78,5,2,2,[],14.0,0,14121.0,0,0,0,0,4424738.479453,,3,1,0,False,"['elsh', 'tshortli']","@swift-ci please smoke test Please remove the flag from test/Sema/package_enums_treat_exhaustive.swift > Please remove the flag from test/Sema/package_enums_treat_exhaustive.swift

I think it is in the PR - am I missing it somewhere?",,"It is unsound to expose `package` declarations in textual interfaces without a package identity for them to belong to so we should not offer this flag.

Resolves rdar://139361524.
",
77176,2024-10-22T23:45:42Z,2024-11-06T23:46:20Z,augusto2112,7,0,1,30,2,1,1,[],14.0,0,1296038.0,0,0,0,0,4422705.505436,,0,1,0,False,['augusto2112'],"https://github.com/swiftlang/llvm-project/pull/9466
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9466
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9466
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9466
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9466
@swift-ci test https://github.com/swiftlang/llvm-project/pull/9466
@swift-ci test @swift-ci test WindowsGreat if we don't need it any more — was there no test for this?",Great if we don't need it any more — was there no test for this?,"We're now able to calculate the spare bits mask from other information. Stop emitting it in debug info.
",
77369,2024-11-04T16:40:27Z,2024-11-06T23:09:55Z,ChrisBenua,5,0,1,2,1,2,2,[],36.0,0,196168.0,0,0,0,0,4424891.970281,,0,1,0,False,"['ChrisBenua', 'jmschonfeld']","@swift-ci Please smoke test Here is test that will check correctness of my changes: [Error.swift](https://github.com/swiftlang/swift/blob/af036feb50598591216098bb741b8d393b027182/test/stdlib/Error.swift#L112) @swift-ci please smoke test Swift Test Windows Platform failed on one sourcekit-lsp test. Seems like flaky-failure to me. 

@jmschonfeld could you please rerun tests for Windows platform? Thanks in advance! @swift-ci please smoke test Windows platform",,"Optimized `Error._domain` calculation.

`String(reflecting:)` for `Any.Type` objects eventually calls `_type(:qualified:)`. But `String(reflecting:)` call has overhead because of `as?` checks. 

All details are listed in [issue](https://github.com/swiftlang/swift-foundation/issues/1031).

Resolves https://github.com/swiftlang/swift-foundation/issues/1031

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77367,2024-11-04T13:46:02Z,2024-11-06T22:41:44Z,egorzhdan,4,0,1,36,3,2,2,['c++ interop'],7.0,0,204944.0,0,0,0,0,4426581.697552,,2,1,0,False,['egorzhdan'],@swift-ci please test @swift-ci please test @swift-ci please test @swift-ci please testLGTM! LGTM,LGTM! LGTM,"In C++, a field of a derived class might be placed into the tail padding of a base class. Swift was not handling this case correctly, causing an asserts-disabled compiler to run out of RAM, and an asserts-enabled compiler to fail with an assertion.

Fixes this IRGen assertion:
```
Assertion failed: (offset >= NextOffset && ""adding fields out of order""), function addField, file GenStruct.cpp, line 1509.
```

rdar://138764929

<!--
If this pull request is targeting a release branch, please fill out the
following form:
https://github.com/swiftlang/.github/blob/main/PULL_REQUEST_TEMPLATE/release.md?plain=1

Otherwise, replace this comment with a description of your changes and
rationale. Provide links to external references/discussions if appropriate.
If this pull request resolves any GitHub issues, link them like so:

  Resolves <link to issue>, resolves <link to another issue>.

For more information about linking a pull request to an issue, see:
https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue
-->

<!--
Before merging this pull request, you must run the Swift continuous integration tests.
For information about triggering CI builds via @swift-ci, see:
https://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci

Thank you for your contribution to Swift!
-->
",
77424,2024-11-06T18:59:20Z,2024-11-06T23:00:58Z,rintaro,1,0,1,1,1,0,0,[],11.0,0,14498.0,0,0,0,0,4425429.71824,,3,1,0,False,['rintaro'],@swift-ci Please smoke test,,'ParserDiagnostics' experimental feature has been removed in #77352 ,
77376,2024-11-04T23:07:15Z,2024-11-06T22:20:01Z,jansvoboda11,4,0,1,5,2,1,1,[],92.0,0,169968.0,0,0,0,0,4427886.229429,,8,1,0,False,['jansvoboda11'],"https://github.com/swiftlang/llvm-project/pull/9507
@swift-ci please test https://github.com/swiftlang/llvm-project/pull/9507
@swift-ci please smoke test https://github.com/swiftlang/llvm-project/pull/9507
@swift-ci please test Windows platform https://github.com/swiftlang/llvm-project/pull/9507
@swift-ci please test Windows platform",,Makes Swift correctly build with https://github.com/swiftlang/llvm-project/pull/9507.,
77409,2024-11-05T23:00:57Z,2024-11-06T20:40:07Z,meg-gupta,2,0,1,3,1,1,1,[],8.0,0,77950.0,0,0,0,0,4433882.856936,,3,1,0,False,['meg-gupta'],@swift-ci test @swift-ci test linux,,"`@_transparent` on `deinit` was diagnosed as an error in older compilers. Making `Atomic.deinit` `@_transparent` will break compiling newer sdk with older compilers. 

I originally added this to avoid failing performance constraints tests since Synchronization is no longer in ossa. But there aren't any such issues. If this ends up being needed we can reintroduce with an experimental feature. 

Fixes rdar://139194948

",
77379,2024-11-05T01:08:29Z,2024-11-06T19:36:34Z,aschwaighofer,10,0,6,141,11,1,1,[],7.0,0,152885.0,0,0,0,0,4437696.044767,,6,6,0,False,['aschwaighofer'],@swift-ci test @swift-ci test macOS @swift-ci test linux @swift-ci test @swift-ci Please Test Source Compatibility Release @swift-ci test macOS @swift-ci test windows @swift-ci test source compatibility debug @swift-ci test windows @swift-ci test windowslgtm,lgtm,rdar://123916109,
77421,2024-11-06T15:12:13Z,2024-11-06T19:21:26Z,hamishknight,1,0,1,5,1,0,0,[],10.0,0,15653.0,0,0,0,0,4437905.193049,,0,1,0,False,['hamishknight'],@swift-ci please smoke test,,These are now tracked with GitHub issues (https://github.com/swiftlang/swift/issues?q=is%3Aissue+is%3Aopen+label%3Aswift-xcodegen),
77417,2024-11-06T12:44:33Z,2024-11-06T18:46:18Z,hamishknight,1,0,1,28,2,1,1,[],8.0,0,22074.0,0,0,0,0,4440345.245865,,1,1,0,False,['hamishknight'],@swift-ci please test,,"This matches how we handle OverloadSetRefExpr and avoids a crash for e.g redeclared macros.

Resolves #77393",
77404,2024-11-05T20:30:30Z,2024-11-06T18:59:36Z,rintaro,3,2,1,211,5,4,3,[],2723.0,0,80946.0,0,0,0,0,4439916.517809,,2,1,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test Windows @swift-ci Please smoke test Windows,,"This simplifies both the diagnostic declarations and usages.

To create a new diangnostic message, create a static method in `ASTGen/Diagnostics.swift`:

```swift
    static func invalidToken(_ token: TokenSyntax) -> Self {
      Self( node: token, message: ""invalid token: '\(token.trimmed)'"")
    }
```

To use it in ASTGenVisitor:

```swift
  self.diagnose(.invalidToken(token))
```
",Are these messages intended to be multi-line. I don’t think we have multi-line diagnostics anywhere else at the moment. I think we need to revisit here before enabling ASTGen by default.
77408,2024-11-05T22:52:57Z,2024-11-06T18:31:34Z,tshortli,1,2,3,224,16,3,2,[],17.0,0,70722.0,0,0,0,0,4441594.760714,,6,3,0,False,['tshortli'],@swift-ci please testThank you!,Thank you!,"In an attempt to work around some bugs, `-package-name` was removed from public and private `.swiftinterface` files (https://github.com/swiftlang/swift/pull/76244). This has the side effect of breaking access level checking for `@usableFromInline package` declarations in `.swiftinterfaces`, so another workaround was implemented to give them special behavior (https://github.com/swiftlang/swift/pull/75745). The combination of these changes has caused source compatibility regressions because `@usableFromInline package` members of SDK modules are now accessible to name lookup where they were not previously, which can result in ambiguities.

There was another fix for the root cause of the original problem that motivated removing `-package-name` from non-package interfaces, so we can safely revert both of https://github.com/swiftlang/swift/pull/76244 and https://github.com/swiftlang/swift/pull/75745. They should not be reattempted as it is not sound to disassociate `package` declarations from their package context.

Resolves rdar://139236053.",why this error? The client is in the same package and should be able to access FrozenUfiPkgEnum.  This test is explicitly exercising `-disable-print-package-name-for-non-package-interface` so it's expected here. We should clean this up after removing `-disable-print-package-name-for-non-package-interface`.
77350,2024-11-01T18:25:52Z,2024-11-06T18:21:10Z,chrismiles,2,3,1,95,3,3,2,['playground transform'],84.0,1,431720.0,0,0,0,0,4442222.730101,,2,1,0,False,['chrismiles'],@swift-ci Please smoke test @swift-ci Please smoke testThis looks great!,This looks great!,"When ImplicitOpenExistentials was enabled (default in Swift language mode 6) the Instrumenter would crash the compiler while building logger calls. This was due to an incorrect assumption that the newly created apply expr wouldn't change type when type-checked. However, the type checker is free to change the kind of expression and did so in circumstances where the call expr was wrapped in an open existential expr.

This change fixes that erroneous assumption and type-checks the new call expr before wrapping it in Added<Expr *>, removing another assumption that only Apply expressions are being added.

rdar://136459076
","Just curious if you ever saw this be `nullptr` here.  By my reading it should not be possible for `doTypeCheckExpr()` to have returned `true` but then the expression to have been set to `nullptr` (and it looks as if `Added<T>` just wraps whatever is given).

This isn't a request for change — it's great to be defensive here (and in fact I think the playground transform should be _a lot_ more defensive in general, so that failures result in missing logger calls rather than compiler crashes!

Just curious as I read through the code in detail and tested out the changes locally. Good call out. You're right, this check should be unnecessary.  Originally, `doTypeCheck()` was setting `Added.Contents` to null by a failed dyn_cast, which was the cause of the crash. I had added this check to fail gracefully in that case, before applying the full fix.  This check is no longer needed, as the Added constructor shouldn't fail to wrap the expression, and `doTypeCheckExpr()` will return false if expression is null after type checking. Great, thanks for clarifying and confirming.  To be clear, I don't think it hurts, just in case we ever do end up with `nullptr` here."
77398,2024-11-05T18:51:43Z,2024-11-06T18:15:37Z,rintaro,4,5,1,409,6,2,1,[],9.0,0,84234.0,0,0,0,0,4442557.963438,,6,1,0,False,['rintaro'],@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test Windows @swift-ci Please smoke test Windows,,,"Comparing `-dump-ast` instead of `-dump-parse` because we generate `KeyPathExpr` differently.
In `libParse` the root expression is parsed as a normal expression, but in `SwiftParser` it's parsed as a `TypeSyntax`, so we generate it as `TypeExpr`. But they are normalized in `PreCheckTarget` and should be end up with the same type-checked AST. Would it be worth adding this as a comment to the test? Amusingly you can also do `\[A][x]` 😄  Hm I thought we require a dot if the first ""path"" part is a subscript. But apparently not 🤔  FWIW this cases are pulled from `test/expr/unary/keypath/keypath.swift` And I will add more test cases from it when I revisit here for adding AST diagnostics (for e.g. empty components)"
77415,2024-11-06T12:22:05Z,2024-11-06T17:32:31Z,hamishknight,1,0,2,15,5,0,0,[],8.0,0,20536.0,0,0,0,0,4443234.792804,,0,2,0,False,['hamishknight'],@swift-ci please smoke test,,"This may not always be present for toolchain builds.

Resolves #77407",
77406,2024-11-05T21:20:56Z,2024-11-06T11:58:14Z,hamishknight,6,3,1,8369,63,2,0,[],4891.0,0,74431.0,0,0,0,0,4443409.872707,,3,1,0,False,"['amritpan', 'hamishknight', 'jamieQ']","@swift-ci please smoke test Looks like `swift-xcodegen.test` is failing in CI (#77407). Passes locally, going to disable for now and will resolve tomorrow. wow, this is very exciting! i expect upon merge, this will also resolve https://github.com/swiftlang/swift/issues/70604? 🚢  @hamishknight I'm running into this error when I attempt to generate an Xcode project using the new setup: 

``` **error**: keyNotFound(CodingKeys(stringValue: ""output"", intValue: nil), Swift.DecodingError.Context(codingPath: [_JSONKey(stringValue: ""Index 0"", intValue: 0)], debugDescription: ""No value associated with key CodingKeys(stringValue: \""output\"", intValue: nil) (\""output\"")."", underlyingError: nil))```

This is after building the toolchain for `--debug-swift`

The full output is: 
```
utils/generate-xcode /Users/amritpankaur/swift-project/build/Ninja-DebugAssert
Building for production...
[1/1] Write swift-version--58304C5D6DBC2206.txt
Build complete! (0.24s)
info: Generating project for '/Users/amritpankaur/swift-project/build/Ninja-DebugAssert'...
error: keyNotFound(CodingKeys(stringValue: ""output"", intValue: nil), Swift.DecodingError.Context(codingPath: [_JSONKey(stringValue: ""Index 0"", intValue: 0)], debugDescription: ""No value associated with key CodingKeys(stringValue: \""output\"", intValue: nil) (\""output\"")."", underlyingError: nil))
``` @amritpan should be fixed by #77415",,"This is a tool specifically designed to generate Xcode projects for the Swift repo (as well as a couple of adjacent repos such as LLVM and Clang). It aims to provide a much more user-friendly experience than the CMake Xcode generation (`build-script --xcode`). Forum post to follow.

Resolves #70604","nit:
```suggestion
                          using Xcode with a main development snapshot (and as such is disabled
``` Thanks, will resolve in a follow-up Resolving in https://github.com/swiftlang/swift/pull/77415"
77336,2024-10-31T21:34:02Z,2024-11-06T03:53:20Z,dylansturg,7,0,1,71,2,1,2,[],326708.0,0,496474.0,0,0,0,0,4452581.204082,,3,1,0,False,"['ahoppen', 'allevato', 'dylansturg']","@swift-ci Please smoke test  CI failure was unrelated. Re-triggering

@swift-ci Please smoke test  @swift-ci Please smoke test Linux I think the Linux test failure is related to your changes. Seems like `TR` can be `nullptr`, I think it would be good to try and understand when this can happen to add a test case for it. I'm looking into the failure now. Looking at other usages of `TypeExpr` `getTypeRepr`, it looks like a nullptr is expected for ""implicit"" `TypeExpr`. A variety of expressions seem to generate implicit `TypeExpr`, so I think this just needs to guard accordingly. @swift-ci please smoke testThanks! LGTM.",Thanks! LGTM.,"Normally references to initializers of collections like Array and Dict are emitted into the index data. It was missing any initializer called using the collection's literal type resentation instead of the type name.

For example:

```
_ = Array<Int>(repeating: 0, count: 1)  // Reference is emitted.
_ = [Int](repeating: 0, count: 1) // Reference is missing.
```

This PR fixes the inconsistency by emitting references for those collection initializers.

I had to handle these references in a fairly custom way, because most constructor-refs are emitted when the `TypeRepr` is visited. The AST walker keeps a list of  ctors and emits a reference to the matching ctor when visting the associated `TypeRepr`. This works fine for the ctor in `Array<Int>(...)` because there's a `TypeRepr` for `Array<Int>` that matches a ctor on the list of ""seen"" ctors. For the shorthand initialization like `[Int](...)`, the `TypeRepr` is an `ArrayTypeRepr` instead of a `DeclRefTypeRepr` so there's no associated decl when the AST walker gets to that `TypeRepr`.

Resolves #68974
",
77342,2024-11-01T13:07:11Z,2024-11-06T12:40:14Z,Xazax-hun,2,0,1,31,2,1,1,['c++ interop'],50.0,0,430386.0,0,0,0,0,4462681.110354,,4,1,0,False,['Xazax-hun'],@swift-ci please smoke test @swift-ci please smoke test windowsLGTM!,LGTM!,"ClangImporter already had some logic in place to rename certain unsafe C++ methods to make sure their name indicates unsafety. With the recent push for auditability, we have a new @unsafe attribute so we can automate parts of the auditing process. This patch makes sure whenever we rename a method as ""Unsafe"", we also add the @unsafe attribute.
",
77414,2024-11-06T07:59:32Z,2024-11-06T11:44:15Z,rintaro,1,0,1,2,2,0,0,[],23.0,0,13483.0,0,0,0,0,4466044.069377,,2,1,0,False,['rintaro'],"https://github.com/swiftlang/swift-corelibs-foundation/pull/5133
@swift-ci Please smoke test",,`IsolatedDeinit` is now not experimental nor upcoming in https://github.com/swiftlang/swift/pull/77364,
77400,2024-11-05T19:37:49Z,2024-11-06T06:16:35Z,eeckstein,1,0,1,47,4,1,1,[],14.0,0,38329.0,0,0,0,0,4485701.370036,,0,1,0,False,['eeckstein'],@swift-ci testLGTM,LGTM,"This ended up in creating a lot of Array functions, even if a program didn't use Array at all. Now, only add specialization attributes if a function is already there. Otherwise remember the attributes and add them to a function once it is created.
",
74033,2024-05-30T21:18:50Z,2024-07-10T06:21:36Z,etcwilde,12,0,2,13,3,1,1,[],8.0,0,13765137.0,0,0,0,0,4490433.401497,,1,2,0,False,['etcwilde'],"@swift-ci please test preset=asan
@swift-ci please test with preset macOS platform preset=asan
@swift-ci please test with preset macOS platform preset=asan
@swift-ci please test with preset Linux platform @swift-ci please test preset=asan
@swift-ci please test with preset macOS platform preset=asan
@swift-ci please test with preset Linux platform Ooohhh kay, so it appears that the combination of toolchain tools and just-built tools changes when building with ASAN vs not on Linux. 😭

Building normally
macOS: consistently uses the swiftc from the toolchain, so clang invocations and clang-linker invocations use the same
Linux: uses just-built swiftc which falls back on the toolchain clang for a bit, and then uses the just-built clang

Building with ASAN
both seem to use the swiftc from the toolchain instead of mixing just-built vs not. preset=asan
@swift-ci please test with preset macOS platform preset=asan
@swift-ci please test with preset Linux platform I'm a bit confused about how the Linux ASAN ever worked. `libswiftCore.so` and `unittests/Threading/SwiftThreadingTests` are being built with different `clang`s, which means it's going to pick up different compiler resource directories and have mismatched sanitizers. I think let's get macOS working for now so that we have ASAN working somewhere, and then can look into Linux with the upcoming build fix work.

swiftcore is built with `/home/build-user/build/buildbot_incremental_asan/llvm-linux-x86_64/./bin/clang++`, while the threading unittests are built with `/opt/swift/5.8.1/usr/bin/clang++`. @swift-ci please testThanks!",Thanks!,"Don't use the just-built clang on macOS. macOS does this more ""right"" than the Linux build. Linux will sometimes use the just-built Swift-driver with the just-built clang, but sometimes would use the system clang instead. macOS uses the toolchain Swift-driver with the toolchain clang. This is correct, but it means that if we force the other clang, we'll get mismatched sanitizer runtimes so the ASAN bot will fail.

rdar://128602427",
76939,2024-10-10T00:05:04Z,2024-11-06T02:51:31Z,ahoppen,3,0,1,12,8,0,0,[],165800.0,0,2342790.0,0,0,0,0,4498007.23105,,5,1,0,False,['ahoppen'],@swift-ci Please test  @swift-ci Please smoke test  @swift-ci Please test Windows ,,"Also, track all remaining uses of `-disable-experimental-parser-round-trip` by issues.
",
77364,2024-11-04T09:33:35Z,2024-11-06T02:49:07Z,nickolas-pohilets,1,0,1,86,21,1,1,[],95718.0,0,148532.0,0,0,0,0,4498154.603587,,6,1,0,False,['ktoso'],@swift-ci please smoke testLGTM! Now that the complete feature was implemented,LGTM! Now that the complete feature was implemented,"After [fixing interaction with stack promotion optimization](https://github.com/swiftlang/swift/pull/76995) and [updating task-locals behavior](https://github.com/swiftlang/swift/pull/77249) as requested in the proposal review, we can now make [SE-0371](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0371-isolated-synchronous-deinit.md) non-experimental.",
77401,2024-11-05T19:44:26Z,2024-11-06T02:14:53Z,nate-chandler,3,1,2,45,2,1,1,[],20.0,0,24410.0,0,0,0,0,4499227.01983,,2,2,0,False,['nate-chandler'],@swift-ci please test @swift-ci please test source compatibility @swift-ci please apple silicon benchmarkLGTM!,LGTM!,"The instruction only deallocates the box, it doesn't destroy its contents.  It's even less mutating than a `destroy_value`, which is already regarded as non-mutating.

rdar://139235335
",Not related to this PR - I noticed `copy_value` / `begin_borrow` is not handled here.  Maybe it is okay since `findEscapeOrMutationUses` is looking for it.
77280,2024-10-29T20:00:35Z,2024-11-06T00:58:21Z,j-hui,4,0,3,249,1,1,1,[],479402.0,0,622670.0,0,0,0,0,4504798.544755,,1,3,0,False,"['j-hui', 'eeckstein']","@swift-ci smoke test @swift-ci Please smoke test @eeckstein I added the arguments scraped from `--help` as we discussed offline, and added a comment documenting how I did that so it can be updated in the future.

It's in a separate commit but I can squash these two when I merge. I've also rebased onto `main` so that the smoke test will pass. @swift-ci Please smoke test
lgtm, thanks!","lgtm, thanks!","I noticed split-cmdline was missing several flags from its hard-coded list of flags that expect an argument, which I've added in this commit. These are all Swift compiler flags being generated by Xcode and SwiftPM.",
77372,2024-11-04T19:29:09Z,2024-11-05T01:36:27Z,etcwilde,3,11,2,183,3,5,3,[],9.0,0,101292.0,0,0,0,0,4509663.088275,,2,2,0,False,['etcwilde'],@swift-ci please smoke test @swift-ci please smoke test @swift-ci please smoke test,,"This patch adds a readme and a cmake script for extracting the standard library sources into the new layout.
To avoid merge conflicts, the sources extracted can't be checked into the repository. Once the build split is complete, we'll go ahead and delete the script and use `git mv` to move the sources to retain the commit history.

With Darwin pulling the overlay out of the Swift build, I want to keep the platforms building in a similar manner.
Some of the stdlib pieces depend on the platform overlay, while the platform overlay depends on swiftCore and folks want to depend on Concurrency. While we could use a bunch of flags and options to mask out parts of the build depending on which platform you're on, this is pretty awkward and will likely be prone to forgotten flags. I'd rather just break it into three pieces, one for Core and Concurrency, one for the overlay, and one for the libraries sit on top of both of those. Then it's a matter of building Core first, building the overlay with the built and installed swiftCore libraries, and finally building the desired supplemental libraries against the built swiftCore and platform overlay. Then all platforms are built with roughly the same flow.

To get started, use the resync script (`cmake -P Resync.cmake`) to copy the sources from the current stdlib directory into the new layout. That will put the files in the appropriate subproject (once they're implemented).

rdar://139218858","```suggestion
> [!NOTE]
> Once the migration is completed, we will be deleting this script. It
``` ```suggestion
_Core_ project and default platform libraries.
``` I don't think this should ever fail normally, so it might be better to make it a hard error for easier diagnosis. What makes the concurrency library ""core""? Is it because it's implicitly imported by all Swift modules? If so, then `StringProcessing` is also core in that regard. I also envision that `Synchronization` will be depended upon by the concurrency library sooner or later. The only thing that's truly core IMO is `libswiftCore` 😄  Generally things for which there is syntactic sugar that implicitly pulls in the module should be a ""core"" library, but without creating a cyclic dependency between layers.

More specifically:
 - Things that crash the compiler if the modules don't exist is `Core` (though we should probably make the compiler a bit more resilient to missing modules too and just say, ""this runtime doesn't have X support"")
 - Things that do not depend on the platform overlay can be `Core` (platform overlay can't depend on things that depend on the platform overlay, which currently rules out Synchronization and StringProcessing).
 - Things that are required by platform overlays must be in `Core` for the overlay to depend on it.

~IIRC, at least the Darwin overlay contains MainActor annotations, requiring the concurrency runtime~ Okay, the overlay doesn't seem to have MainActor annotations, but folks have expressed interest in using concurrency in their platform overlays. > Things that crash the compiler if the modules don't exist is Core (though we should probably make the compiler a bit more resilient to missing modules too and just say, ""this runtime doesn't have X support"")

So... StringProcessing?

```swift
// '-disable-implicit-string-processing-import' to simulate not having the module

let x = /\w+/
``` That doesn't seem to compile... ?

```
ewilde@Pancake /tmp %  cat test.swift 
let x = /\w+/
ewilde@Pancake /tmp %  swiftc test.swift 
test.swift:1:9: error: '/' is not a prefix unary operator
1 | let x = /\w+/
  |         `- error: '/' is not a prefix unary operator
2 | 

test.swift:1:10: error: cannot find operator '+/' in scope
1 | let x = /\w+/
  |          `- error: cannot find operator '+/' in scope
2 | 

test.swift:1:10: error: cannot find 'w' in scope
1 | let x = /\w+/
  |          `- error: cannot find 'w' in scope
2 | 

test.swift:1:10: error: invalid component of Swift key path
1 | let x = /\w+/
  |          `- error: invalid component of Swift key path
2 | 
ewilde@Pancake /tmp %  swiftc --version
swift-driver version: 1.113 Apple Swift version 6.0 (swiftlang-6.0.0.7.6 clang-1600.0.24.1)
Target: arm64-apple-macosx15.0
```

It looks like the overlay import is just the variadics generator, so we could probably sink the library lower. May I ask what you're hoping to get by sinking it down into `Core` though? Are platform overlays trying to use regex? `-swift-version 6` Still not a compiler crash :)

```
ewilde@Pancake /tmp %  swiftc -Xfrontend -disable-implicit-string-processing-module-import test.swift -swift-version 6
test.swift:1:9: error: missing 'Regex' declaration, probably because the '_StringProcessing' module was not imported properly
1 | let x = /\w+/
  |         `- error: missing 'Regex' declaration, probably because the '_StringProcessing' module was not imported properly
2 | 
```

But anyway, there's project-level parallelism in there that we could take advantage of if they are kept separate. 
We really only need to drive it down into `Core` if folks are trying/wanting to use it in the platform overlay itself. Otherwise, it doesn't matter if it's built in the supplemental libraries or not."
77384,2024-11-05T04:00:01Z,2024-11-05T18:56:56Z,tshortli,2,0,2,252,9,1,1,[],10.0,0,70439.0,0,0,0,0,4509865.282752,,2,2,0,False,['tshortli'],@swift-ci please smoke test @swift-ci please smoke test Linux,,"Also, pull its definition out into a separate header.",
77333,2024-10-31T20:31:46Z,2024-11-01T10:15:44Z,tshortli,3,0,1,37,3,0,0,[],10.0,0,442913.0,0,0,0,0,4509886.587873,,3,1,0,False,['tshortli'],@swift-ci please smoke test @swift-ci please smoke test Windows @swift-ci please smoke test,,"https://github.com/swiftlang/swift/pull/76621 caused a regression by skipping the AST nodes nested under `defer` blocks. The node associated with a `defer` block is implicit because it is a kind of closure context synthesized by the compiler. However, the nodes it contains are not implicit and so they must be visited by the `TypeRefinementContextBuilder`.

Resolves rdar://139012152.",
77395,2024-11-05T16:46:25Z,2024-11-05T23:30:32Z,kastiglione,2,0,1,2,1,1,1,[],247.0,0,24248.0,0,0,0,0,4510073.321663,,0,1,0,False,['kastiglione'],@swift-ci smoke test @swift-ci smoke test windows,,"This change allows build-script to be invoked with the following combination:

```
--llvm-targets-to-build=host --build-embedded-stdlib=false
```

When `--build-embedded-stdlib=false` is used, it's unnecessary to force-configure
additional compiler-rt targets. Further, when `--llvm-targets-to-build` is used,
the resulting llvm usually won't support the force targets of armv6/armv7.
",
77352,2024-11-01T19:02:06Z,2024-11-05T23:05:52Z,rintaro,4,1,1,705,21,2,2,[],82195.0,0,360226.0,0,0,0,0,4511555.615992,,7,1,0,False,['rintaro'],"https://github.com/swiftlang/swift-syntax/pull/2889
@swift-ci Please smoke test https://github.com/swiftlang/swift-syntax/pull/2889
@swift-ci Please smoke test @swift-ci Please smoke test @swift-ci Please smoke test",,"* Move `ExportedSourceFileRequest::evaluate()` to `ParseRequests.cpp`
* Pass  the decl context and `GeneatedSourceFileInfo::Kind` to `swift_ASTGen_parseSourceFile()` to customize the parsing
* Make `ExportedSourceFile` to hold an arbitrary Syntax node
* Move round-trip checking into `ExportedSourceFileRequest::evaluate()`
* Split `parseSourceFileViaASTGen` completely from C++ parsing logic (in `ParseSourceFileRequest::evaluate()`)","```suggestion
      if !isTopLevel {
```"
77383,2024-11-05T02:59:31Z,2024-11-05T19:20:22Z,drexin,1,3,1,141,4,2,1,[],12.0,0,69278.0,0,0,0,0,4514659.024848,,2,1,0,False,['drexin'],"@swift-ci smoke testOne possibly pointless question, otherwise LGTM.","One possibly pointless question, otherwise LGTM.","…erences in CVW

rdar://139106139

Regular ObjC references do not have unused bits or extra inhabitants for storing enum tags, because they may be tagged pointers. However, ObjC classes that are implemented in Swift do, so we must differentiate between the two.
","Do we need to reverse these in case dest and src are the same? If the references are the same, the ref count would already be at least two. The src and dest pointer passed to the witness functions MUST not point to the same memory, so we will always work with two separate copies. Makes sense. This was a big thing from the days of ObjC manual memory management, where it was common to pass +0 references into setters, which might then blow up if you set the same object that was already there. But a language where we're guaranteed to be holding a strong reference to the new object avoids that whole problem."
77396,2024-11-05T16:56:01Z,2024-11-05T20:44:36Z,nkcsgexi,1,0,1,10,1,1,1,[],11.0,0,13716.0,0,0,0,0,4520031.340972,,2,1,0,False,['nkcsgexi'],@swift-ci please smoke testThanks!,Thanks!,,
76532,2024-09-17T23:02:51Z,2024-11-02T00:52:53Z,kavon,3,0,2,125,8,0,0,[],3543103.0,0,4220839.0,0,0,0,0,4524500.219915,,11,2,0,False,['kavon'],@swift-ci test @swift-ci smoke test @swift-ci test,,"Adds the following flags to `swift-frontend`:
- `-debug-info-for-profiling`, matching clang's `-fdebug-info-for-profiling`. It includes DWARF discriminators to the debug info so that PC samples can be mapped back to individual basic blocks.
- `-profile-sample-use=<FILE>`, matching clang's `-fprofile-sample-use=`. It takes a sampling-based profile file emitted from llvm-profdata.

Currently, these are ""frontend only"" flags, so you'd need to use `swiftc -Xfrontend -profile-sample-use=...` to trigger their functionality.

rdar://135443278",
74522,2024-06-18T17:14:17Z,2024-08-07T01:51:19Z,mateusrodriguesxyz,30,30,12,747,14,6,1,['swift evolution approved'],11346.0,0,12105313.0,1,0,0,0,4523340.828238,,24,12,0,False,"['mikeash', 'al45tair', 'ahoppen', 'hborla', 'eeckstein', 'nervenes', 'mateusrodriguesxyz', 'xwu']","apple/swift-syntax#2689

@swift-ci build toolchain apple/swift-syntax#2689

@swift-ci build toolchain @mateusrodriguesxyz Would it be wise to add tests that exercise the code paths where you've made changes in response to @ahoppen? https://github.com/swiftlang/swift-syntax/pull/2689

@swift-ci build toolchain Toolchain links:

* [Ubuntu](https://download.swift.org/tmp/pull-request/74522/899/ubuntu2004/PR-ubuntu2004.tar.gz)
* [Windows](https://ci-external.swift.org/job/swift-PR-build-toolchain-windows/5327/artifact/)
* [macOS](https://download.swift.org/tmp/pull-request/74522/1327/xcode/swift-PR-74522-1327-osx.tar.gz)
 @hborla as code owner and member of the language steering group do you have advice about how should I proceed now that [SE-0439 has been accepted with modifications](https://forums.swift.org/t/accepted-with-modifications-se-0439-allow-trailing-comma-in-comma-separated-lists/73216/1)? Should I remove all code unrelated with the accepted design or the group wants to keep some of it (e.g: if/guard/while conditions) under an experimental flag? Should I ungate the accepted parts and remove the flag? I would appreciate any direction, thanks! @mateusrodriguesxyz Good question, thanks for asking!

> Should I remove all code unrelated with the accepted design or the group wants to keep some of it (e.g: if/guard/while conditions) under an experimental flag? Should I ungate the accepted parts and remove the flag?

Since this proposal doesn't need the experimental feature flag to be promoted to an upcoming feature flag, I recommend un-gating the accepted parts of the design, and leaving the flag in place to gate the parts of the design that were subsetted out. I also recommend splitting up the tests so that the parts of the tests that need the flag are in a separate file that enable the experimental feature, while the bulk of the tests don't enable the flag. @hborla following your recomendations I've ungated the accepted parts and moved the parts of the tests that need the flag  to a diffeent file. I also removed support from `#available` because it really doens't make sense and while running the full suit of parser tests I noticed that it made the diagnostic worse when `*` is missing. @mateusrodriguesxyz Would you mind throwing in tests to ensure that `[Int,]` in type position, `@inline(never,)`, and the like remain invalid? And have you been able to look into which other built-in attributes have custom parameter parsing that doesn't work like a comma-separated parameter list to ensure that we're not adding support for trailing commas in those positions? > And have you been able to look into which other built-in attributes have custom parameter parsing that doesn't work like a comma-separated parameter list to ensure that we're not adding support for trailing commas in those positions?

I will look into this as soon as possible. @xwu I've updated the tests with built-in attributes. None of them currently support trailing comma but maybe `backDeployed` and `storageRestrictions` should because they take a variadic list of value as the last argument? > For the places where trailing commas are currently only allowed behind the experimental feature, could you also add a test case that checks that we reject the syntax if the experimental feature is not passed?

I have added these tests at the end:
https://github.com/swiftlang/swift/blob/e4ff4846a78633e1361f7f6e735f06ae16771562/test/Parse/trailing-comma.swift#L112-L139

Did you mean this? > Could you also add a test case that checks that we reject the syntax if the experimental feature is not passed?

Sorry, I'm not following. Could you please give an example of what you mean? > Sorry, I'm not following. Could you please give an example of what you mean?

I was stupid. Didn’t realize that trailing-comma.swift vs trailing-comman-experimental.swift is exactly what I wanted. Sorry for the confusion. > @xwu I've updated the tests with built-in attributes. None of them currently support trailing comma but maybe backDeployed and storageRestrictions should because they take a variadic list of value as the last argument?

IMO, whatever `@backDeployed` is doing `@available` should also, but as this hasn't been worked through, if all the list handling in built-in attributes are custom and your PR never made any changes to the status quo then we can consider them not part of the proposal and leave it alone since that would be most consistent with the review decision.

If the proposal had been accepted with the original scope that everything that's a comma-separated list with an unambiguous terminator should support a trailing comma, then we would need to puzzle over which of these attributes have such a regular list, but we don't have to do that now :) > if all the list handling in built-in attributes are custom

FWIW `backDeployed` actually uses `parseListItem` with `AllowSepAfterLast` set to `false`. Ship it? > Ship it?

Hi @xwu,  just one last thing: Should I remove `@attached` trailing support since it's a built-in attribute? I'm kind of surprised to learn it was included in the first place, as it's not really a list. I had thought you'd audited all the built-in attributes and none support trailing comma in your PR? Or are you referring to the `named(...)` part? No, I mean something like `@attached(extension, conformances: P1, P2,)`. I think I've implented this one way back in the PR because it's parsed in a different way then the others built-in attributes. I will remove it. Makes sense, I run the git-format and forget about this 😫 Got it. I'm not certain, so the safer route is not to add trailing comma support. I guess `git-format` got a little too eager? The `clang-format-diff.py` script that comes with clang has worked well for me to apply `clang-format` to just my changes. Yes, please do not mass-reformat existing code. It makes it nearly impossible to merge between branches without creating a large amount of conflicts. Sorry about the mess. Should I force push to replace the merge commit or make one reverting the formatting? FWIW, using `git clang-format HEAD^n` where `n` is the number of commits you've made is fine, since that will only reformat things you've changed. Reformatting as you've done here also has the downside that you've pulled in far more reviewers than are likely needed for your actual change.

I'd use force-push to undo the format changes; if you leave them in and add another commit to undo them, I think we can still end up with merge conflicts when trying to merge between branches. That's a much nicer looking diff now, thanks! @swift-ci Please smoke test  hey, just a novice here, what does it mean for a feature to be experimental, like this one? i can see that many features seems to be gated behind experimental flags, but what does it imply? is there a testing period (if so how long is it usually?) where good feedback will make the feature available by default? how does it work. sorry if this might not be the best place to ask it.

also, i can see in the proposal that this was accepted with modifications, what are the modifications? will we be able to have trailing commas for function arguments? You can refer to the [Swift Forums](https://forums.swift.org) for information about new language features adopted through the Swift Evolution process. In this case, the acceptance with modifications is documented [here](https://forums.swift.org/t/accepted-with-modifications-se-0439-allow-trailing-comma-in-comma-separated-lists/73216). This feature isn't experimental, and no flags will be required to use it when it ships. It has not, however, shipped in any officially released version of Swift yet. You can check the release notes of any release to see what features are included in that release. You can try out development snapshots which contain new features not yet released by going to the [Swift.org Install](https://www.swift.org/install/) page.

Experimental flags are a way to allow work-in-progress to be integrated and tested; they can be added and removed arbitrarily and, for end users, should be disregarded. User-facing features that are meant to be made available to end users generally go through the [Swift Evolution](https://www.swift.org/swift-evolution/) process, which is conducted on the Swift Forums. While a feature is being pitched or reviewed as part of the Swift Evolution process, there may be experimental flags mentioned specifically or even custom toolchains so that everyone can try it out and give feedback, but you should not expect any experimental flags to continue working in the same way or at all.Sorry for taking so long to review this. 

I didn’t review the places where trailing comma is now unconditionally enabled vs enabled behind the `TrailingComma` experimental feature because I lost track of which parts of SE-0439 got accepted. I’d like to review that after the proposal has been updated (assuming that it will be).

For the places where trailing commas are currently only allowed behind the experimental feature, could you also add a test case that checks that we reject the syntax if the experimental feature is not passed? Could you also add a test case that checks that we reject the syntax if the experimental feature is not passed? There are a lot of formatting changes here. Not sure if we want those changes, but at the very least they should be in their own PR to avoid cluttering the functional changes here, and to make it easier to merge/revert/cherry-pick/etc. this work.","Sorry for taking so long to review this. 

I didn’t review the places where trailing comma is now unconditionally enabled vs enabled behind the `TrailingComma` experimental feature because I lost track of which parts of SE-0439 got accepted. I’d like to review that after the proposal has been updated (assuming that it will be).

For the places where trailing commas are currently only allowed behind the experimental feature, could you also add a test case that checks that we reject the syntax if the experimental feature is not passed? Could you also add a test case that checks that we reject the syntax if the experimental feature is not passed? There are a lot of formatting changes here. Not sure if we want those changes, but at the very least they should be in their own PR to avoid cluttering the functional changes here, and to make it easier to merge/revert/cherry-pick/etc. this work.",This is a implementation for https://github.com/swiftlang/swift-evolution/pull/2344 gated behind `-enable-experimental-feature TrailingComma`. After feedback from the language steering group I have expanded the original proposal and implementation that I began in https://github.com/apple/swift/pull/71975.,"Could you check for `Tok.is(tok::r_paren)` instead of comparing the text? Same comment that I have on the swift-syntax PR here: Can we allow trailing comma in inheritance clauses because `associatedtype` declarations don’t have a  clear terminator? I think you also need to check for `oper_binary_unspaced` here. So... I don't know why but `Tok.is(tok::r_paren)` doesn't work here 🫠 Do you know what the token’s kind is? Otherwise I’ll try and start debugging it because I’m curious now. Inside string literal the token kind is `eof` but the text `"")\""\n""`, so I think that's the problem. This is documented here: https://github.com/swiftlang/swift/blob/fe0e68332e5a3e12d0adbffcaccd76742b5e067d/lib/Parse/ParseExpr.cpp#L2023-L2026 @ahoppen do you have a valid example that would check `oper_binary_unspaced`? I can't figure out. That should be something like the following (no spaces around `!=`). Or am I missing something?

```swift
if true, { (x: () -> Void) in true }!=nil { print(0) }
``` Nit: Is this line clang-formatted, it looks longer than 80 columns Also curious, that if we `checkForInputComplete` wouldn't a call to `!isInputIncomplete()` achieve the same as this check `Tok.is(tok::eof) && Tok.getText() == "")""` does? (note condition is different so that is why I think maybe negate it could have same result)  Please switch the argument here to `false`; this controls whether the experimental feature is enable-able in production compiler builds, which this experimental feature shouldn't be. You'll need to `// REQUIRE: asserts` in any tests that use the experimental flag, which is fine! `HasNextType` is a little confusing now because it’s `true` even if there isn’t a next type but we’re a the trailing comma. I would rename it to `HasComma`. 

Similar in other loops. What is this needed for? This will also allow a trailing comma in a `yield` statement while the new parser doesn’t allow a trailing comma there. I’m not sure which is the correct behavior but we should be consistent. Why do we need to check for `Source != AvailabilitySpecSource::Available` here? Would it make sense to keep these deleted tests around to make sure that we now parse them correctly? I did this so `#available` won't support trailing comma. It doesn't really make sense and it leads to worse diagnostic when `*` is missing. I delete here because I added a similar test case to trailing comma test files.
https://github.com/swiftlang/swift/blob/e4ff4846a78633e1361f7f6e735f06ae16771562/test/Parse/trailing-comma.swift#L69-L71 This is for handling trailing comma in a string interpolation. I don't know the `yield` statement but if it's something like `yield(...)` I believe it should. My plan is to go back to the swift-syntax PR to fix any inconsistent once this PR is approved. Ah, I see. Could you add that as a comment? `yield` can be followed by an expression list without parentheses. Eg. `yield x, y` is valid. But `yield x, ` should be disallowed. Why don’t we need to check for `AvailabilitySpecSource::Unavailable`? Ah, I missed that. Thanks. Why do we need to add `-disable-experimental-parser-round-trip`? If we do, that indicates that there is a round-trip bug in the new parser that should be fixed. Honestly I just copied this from another test file 😅 I will remove it! Makes more sense indeed. The accepted portions of the proposal include exclusively symmetrically delimited comma-separated lists (i.e., those surrounded by `(...)`, `[...]`, `<...>`, etc.), so this would need to be gated behind a flag if enabled. @ahoppen do you have an example for this? I tried the following but it doesn't parse::
```
struct Foo {
  var x: Int
  var y: Int {
    _read { yield x, } // ❌ consecutive statements on a line must be separated by ';' | expected expression
  }
}
``` Ah, sorry. I did misremember how `yield` works. It does require parentheses if multiple expressions should be yielded, so this is not an issue. Apologies for the confusion."
76915,2024-10-08T19:54:53Z,2024-11-05T18:04:31Z,artemcm,13,3,1,1961,16,3,1,[],6.0,0,2417545.0,0,0,0,0,4524672.853563,,10,1,0,False,['artemcm'],"@swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test macOS platform @swift-ci test @swift-ci test @swift-ci test @swift-ci test @swift-ci test macOS platform @swift-ci test Windows platform  > @artemcm You didn't add me as reviewer so I never got the review request.

Ah, sorry about missing the review request button, I'd assumed you were on the list. 

> 
> LGTM in general. One small comment is that it seems you can async dispatch scanning as you collect the clang modules, rather than do it together in the end.

I agree, I think that would be a good direction to pursue. The only reason I have not yet is that this approach seemed a bit simpler to implement, and the Swift scanning portion is really quite fast so my intuition is that it will make not that great a difference. 

> 
> I also doubt if `ModuleDependenciesCache` is thread safe but I haven't had time to reason it thoroughly.

Queries/Updates to the `ModuleDependenciesCache` are done on the main scanner thread, unless I missed something, which motivated some of the refactoring here as well. 

@cachemeifyoucan ping @artemcm You didn't add me as reviewer so I never got the review request.

LGTM in general. One small comment is that it seems you can async dispatch scanning as you collect the clang modules, rather than do it together in the end.

I also doubt if `ModuleDependenciesCache` is thread safe but I haven't had time to reason it thoroughly.","@cachemeifyoucan ping @artemcm You didn't add me as reviewer so I never got the review request.

LGTM in general. One small comment is that it seems you can async dispatch scanning as you collect the clang modules, rather than do it together in the end.

I also doubt if `ModuleDependenciesCache` is thread safe but I haven't had time to reason it thoroughly.","This change refactors the top-level dependency scanning flow to follow the following procedure:

`resolveImportedModuleDependencies()`:
1. From the source target under scan, query all imported module identifiers for a *Swift* module. Leave unresolved identifiers unresolved. Proceed transitively to build a *Swift* module dependency graph.
2. Take every unresolved import identifier in the graph from (1) and, assuming that it must be a Clang module, dispatch all of them to be queried in-parallel by the scanner's worker pool.
3. Resolve bridging header Clang module dependencies
4. Resolve all Swift overlay dependencies, relying on all Clang modules collected in (2) and (3)

Following `resolveImportedModuleDependencies()`, for the source target under scan, use all of the above discovered module dependencies to resolve all cross-import overlay dependencies.

Because operation (1) is typically quite fast (it does not take much work to discover Swift modules and their dependencies), this results in a much higher degree of parallelism available for operation (2). Note, that operations (4) and (5) themselves call into the top-level `resolveImportedModuleDependencies` for newly-discovered modules.","Previously, we kept adding things to `directDependencies` and marked them resolved when done. 
Now, instead, we keep track of dependencies of various kinds separately, meaning each dependency kind is only ever set once and therefore we no longer need to track which dependencies are ""resolved"". This got refactored to instead return a result that the client can use to update the dependency scanner cache, instead of doing it in-place.  You have clang module lookup here in the threads. I guess it should be fine since this is technically a `const` value for lookup only but I am a bit paranoid about the mistake can be made. Maybe do the cache lookup before `async` and don't capture `cache` at all will make it less error prone."
77390,2024-11-05T09:55:14Z,2024-11-05T17:17:28Z,eeckstein,2,0,2,64,4,1,0,[],18.0,0,33791.0,0,0,0,0,4525207.733885,,0,2,0,False,['eeckstein'],@swift-ci test @swift-ci testLGTM,LGTM,"Otherwise optimizations like retain-sinking might create retain_value instructions with a non-copyable operand.

Fixes a compiler crash.
rdar://139103557",
77380,2024-11-05T01:43:08Z,2024-11-05T18:35:37Z,drodriguez,2,0,3,268,10,1,1,[],10.0,0,60763.0,0,0,0,0,4527762.150105,,7,3,0,False,['drodriguez'],@swift-ci please test @swift-ci please testNice! Thank you!,Nice! Thank you!,"While doing #76740 I iteratively was adding new `REQUIRES:` as new usages of the features were found, but I did not realize that at the same time other people might be removing some of those usages. The tests in this commit had some `REQUIRES:` line for a previous `-enable-experimental/upcoming-feature`, but they not longer use those features, so the `REQUIRES:` were effectively disabling the tests (at least in the case of `KeyPathWithStaticMembers`. In other cases they might still had executed).",
9714,2017-05-17T22:54:29Z,2017-05-18T00:33:47Z,moiseev,5,4,3,182,5,2,0,[],767.0,0,240474874.0,0,0,0,0,35080.674994,,0,3,0,False,"['moiseev', 'dabrahams', 'swift-ci']","@swift-ci Please test @swift-ci Please smoke benchmark @swift-ci Please Test Source Compatibility The need for these changes makes me 😢 but glad you figured this out Build comment file: 
--------------
Build failed before running benchmark.

--------------
",,"Utilizing the shortcut in the compiler to make expression with heavy use of bitwise operators and shifts compile much faster, especially in Swift 3 mode.

Fixes #47286, and also <rdar://problem/31543153>.","Should this be `swift(>=4)` or `swift(>=3.2)`? `>=4` covers the compatibility mode, so the former. Not that it matters much in the benchmark, that's always built in Swift 4 mode. Do you mean you want the compatibility mode to take the old path or the new? It will (very deliberately) take the old. Yes, that is what I want it to do. My phrasing leaves a lot to be desired. Compatibility mode should take the same path as Swift 3 compiler would."
