pr_number,created_at,merged_at,author,number_of_comments,number_of_review_comments,number_of_commits,lines_of_code_changed,number_of_files_changed,number_of_reviewers,number_of_approvals,labels,time_to_first_response,number_of_assignees,review_duration,number_of_changes_requested,number_of_build_runs,number_of_build_failures,number_of_linked_issues,time_since_last_commit,test_coverage,number_of_reviews_requested,number_of_revisions,number_of_milestones,dependency_changes,comment_authors,issue_comments_text,reviews_text,issue_text,review_comments
30208,2024-12-26T03:51:28Z,2024-12-26T17:55:56Z,linbingquan,3,0,2,1,1,0,0,[],180.0,0,88153.0,0,0,0,0,-15021.943389,,0,2,1,False,"['github-actions[bot]', 'linbingquan', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.27 <br> **135.68** | 488.27 <br> **135.68** | +0 B <br> **+0 B** |
| WebGPU Nodes | 487.74 <br> **135.56** | 487.74 <br> **135.56** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.06 <br> **151.21** | 558.06 <br> **151.21** | +0 B <br> **+0 B** |
| WebGPU Nodes | 514.13 <br> **140.95** | 514.13 <br> **140.95** | +0 B <br> **+0 B** | I think exporting the method chaining is a flaw. I think we can prevent this issue if the user uses tree-shaking in their code.  I would suggest removing the current `addMethodChaining` method instead of adding a new one. > I think exporting the method chaining is a flaw.

@sunag Excuse me, What flaw do you mean, I think it is difficult to add custom method to `ShaderNode` without `addMethodChaining` in third-party library.


",,"Related PR: #30201

**Description**

Export `addMethodsChaining` method, users can be simplify the code.
",
30217,2024-12-27T01:56:12Z,2024-12-27T02:03:16Z,sunag,1,0,1,226,3,0,0,[],179.0,0,430.0,0,0,0,0,-6782.794343,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.35 <br> **135.72** | 488.88 <br> **135.69** | +535 B <br> **-34 B** |
| WebGPU Nodes | 487.81 <br> **135.6** | 488.35 <br> **135.56** | +535 B <br> **-39 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.14 <br> **151.24** | 558.8 <br> **151.3** | +657 B <br> **+61 B** |
| WebGPU Nodes | 514.21 <br> **140.99** | 514.87 <br> **141.08** | +657 B <br> **+92 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30201, https://github.com/mrdoob/three.js/pull/30207#discussion_r1897786828

**Description**

Reverting to preferred style.",
30215,2024-12-26T18:52:28Z,2024-12-26T19:53:54Z,sunag,1,0,1,19,1,0,0,[],180.0,0,3689.0,0,0,0,0,15382.23946,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.29 <br> **135.69** | 488.35 <br> **135.72** | +59 B <br> **+27 B** |
| WebGPU Nodes | 487.76 <br> **135.57** | 487.81 <br> **135.6** | +59 B <br> **+27 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.08 <br> **151.22** | 558.14 <br> **151.24** | +59 B <br> **+25 B** |
| WebGPU Nodes | 514.15 <br> **140.96** | 514.21 <br> **140.99** | +59 B <br> **+26 B** |",,"**Description**

Improve error message if value is not a `THREE.Texture` or `null`.",
30214,2024-12-26T17:47:20Z,2024-12-26T18:02:10Z,sunag,1,0,2,2,1,0,0,[],168.0,0,897.0,0,0,0,0,22083.773968,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.27 <br> **135.68** | 488.29 <br> **135.69** | +21 B <br> **+9 B** |
| WebGPU Nodes | 487.74 <br> **135.56** | 487.76 <br> **135.57** | +21 B <br> **+11 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.06 <br> **151.21** | 558.08 <br> **151.22** | +21 B <br> **+8 B** |
| WebGPU Nodes | 514.13 <br> **140.95** | 514.15 <br> **140.96** | +21 B <br> **+7 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/30203, https://github.com/mrdoob/three.js/pull/29799

**Description**

Calculate the depth should be required for depth testing, but it won't necessarily write once it is disabled in the pipeline if `material.depthWrite` is `false`.",
30213,2024-12-26T12:38:23Z,2024-12-26T13:08:16Z,Mugen87,1,0,4,891,9,0,0,[],175.0,0,1794.0,0,0,0,0,39724.032503,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.26 <br> **135.68** | 488.27 <br> **135.68** | +6 B <br> **+2 B** |
| WebGPU Nodes | 487.73 <br> **135.56** | 487.74 <br> **135.56** | +6 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.05 <br> **151.21** | 558.06 <br> **151.21** | +6 B <br> **+1 B** |
| WebGPU Nodes | 514.13 <br> **140.95** | 514.13 <br> **140.95** | +6 B <br> **+2 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30182

**Description**

Document more modules.",
30206,2024-12-26T02:38:59Z,2024-12-26T17:22:05Z,sunag,0,0,1,2,1,0,0,[],,0,52989.0,0,0,0,0,24493.06722,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/30023#issuecomment-2558051040

**Description**

antialias for this example was more for testing for visual purposes since it didn't work without the PR Fix https://github.com/mrdoob/three.js/pull/30023",
30209,2024-12-26T08:23:19Z,2024-12-26T11:32:21Z,RenaudRohlinger,1,0,1,45,5,1,1,[],187.0,0,11342.0,0,0,0,0,45481.564719,,0,1,0,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.13 <br> **135.63** | 488.26 <br> **135.68** | +133 B <br> **+55 B** |
| WebGPU Nodes | 487.6 <br> **135.5** | 487.73 <br> **135.56** | +133 B <br> **+54 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.92 <br> **151.16** | 558.05 <br> **151.21** | +133 B <br> **+52 B** |
| WebGPU Nodes | 514 <br> **140.89** | 514.13 <br> **140.95** | +133 B <br> **+57 B** |",,"Before:
<img width=""342"" alt=""Screenshot 2024-12-26 at 15 11 12"" src=""https://github.com/user-attachments/assets/8ed58451-f14e-4618-9864-7d6cc7076c3a"" />

After:
<img width=""342"" alt=""Screenshot 2024-12-26 at 15 11 09"" src=""https://github.com/user-attachments/assets/0e2f6bb5-c9a8-47be-8bdc-2e3e087b9e1e"" />

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30201,2024-12-25T03:51:37Z,2024-12-26T02:17:44Z,linbingquan,1,2,4,226,3,2,0,[],178.0,0,83350.0,0,0,0,0,76176.008278,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.67 <br> **135.59** | 488.13 <br> **135.63** | -535 B <br> **+36 B** |
| WebGPU Nodes | 488.13 <br> **135.48** | 487.6 <br> **135.5** | -535 B <br> **+28 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.58 <br> **151.21** | 557.92 <br> **151.16** | -657 B <br> **-52 B** |
| WebGPU Nodes | 514.65 <br> **140.99** | 514 <br> **140.89** | -657 B <br> **-94 B** |",,"Related issue: #XXXX

**Description**

Simple verification. Should reduce the packing volume.
","I think the conversion methods are not matching the original.  For example: `addMethodChaining( 'toVec2', vec2 );` should be `toVec2: vec2` Sorry, my mistake"
30205,2024-12-26T01:55:43Z,2024-12-26T09:25:27Z,puxiao,0,0,1,105,2,1,1,[],,0,26984.0,0,0,0,0,53096.094208,,0,1,1,False,[],,,,
30204,2024-12-25T15:06:16Z,2024-12-26T02:07:50Z,sunag,1,0,1,7,2,1,1,[],171.0,0,39698.0,0,0,0,0,79350.532746,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.75 <br> **135.61** | 488.67 <br> **135.59** | -81 B <br> **-17 B** |
| WebGPU Nodes | 488.21 <br> **135.49** | 488.13 <br> **135.48** | -81 B <br> **-16 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.66 <br> **151.23** | 558.58 <br> **151.21** | -81 B <br> **-22 B** |
| WebGPU Nodes | 514.73 <br> **141.01** | 514.65 <br> **140.99** | -81 B <br> **-22 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30178

**Description**

I think it would be to disable the fog in the shadow-map, maybe preserve the fog make more sense for other nodes like `OutlineNode` or `SSAAPass` for example. @Mugen87 
",
30200,2024-12-25T00:38:05Z,2024-12-25T04:13:37Z,sunag,1,0,1,2,1,0,0,[],184.0,0,12935.0,0,0,0,0,158204.803067,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.75 <br> **135.6** | 488.75 <br> **135.61** | +1 B <br> **+2 B** |
| WebGPU Nodes | 488.21 <br> **135.49** | 488.21 <br> **135.49** | +1 B <br> **+2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.66 <br> **151.23** | 558.66 <br> **151.23** | +0 B <br> **+0 B** |
| WebGPU Nodes | 514.73 <br> **141.01** | 514.73 <br> **141.01** | +0 B <br> **+0 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30198

**Description**

Fix matrix update",
30199,2024-12-24T22:22:28Z,2024-12-24T22:33:40Z,sunag,1,0,1,3,1,0,0,[],174.0,0,678.0,0,0,0,0,178600.085231,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.7 <br> **135.59** | 488.75 <br> **135.6** | +43 B <br> **+17 B** |
| WebGPU Nodes | 488.17 <br> **135.47** | 488.21 <br> **135.49** | +43 B <br> **+16 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.66 <br> **151.23** | 558.66 <br> **151.23** | +0 B <br> **+0 B** |
| WebGPU Nodes | 514.73 <br> **141.01** | 514.73 <br> **141.01** | +0 B <br> **+0 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30197

**Description**

Force `autoClear`",
30162,2024-12-18T18:02:16Z,2024-12-24T09:54:50Z,cmhhelgeson,1,0,2,75,4,1,1,[],175.0,0,489155.0,0,0,0,0,224135.504626,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.51 <br> **134.96** | 486.51 <br> **134.96** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.98 <br> **134.87** | 485.98 <br> **134.87** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.65 <br> **150.41** | 555.65 <br> **150.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.54 <br> **140.14** | 511.54 <br> **140.14** | +0 B <br> **+0 B** |",,"Related issue: #XXXX

**Description**

First draft documentation of WorkgroupInfoNode and ComputeBuiltinNode. Edit of AtomicFunctionNode and BarrierNode to acknowledge their limitations as WebGPU/WGSL exclusive node type. ",
30155,2024-12-18T06:13:45Z,2024-12-23T13:51:27Z,RenaudRohlinger,3,4,20,615,17,4,1,[],166.0,0,511798.0,0,0,0,0,244003.960011,,0,20,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.44 <br> **79.06** | +33 B <br> **+7 B** |
| WebGPU | 487.31 <br> **135.17** | 488.69 <br> **135.58** | +1.39 kB <br> **+415 B** |
| WebGPU Nodes | 486.77 <br> **135.07** | 488.16 <br> **135.47** | +1.39 kB <br> **+399 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.47 <br> **150.87** | 558.65 <br> **151.23** | +1.18 kB <br> **+364 B** |
| WebGPU Nodes | 513.54 <br> **140.64** | 514.73 <br> **141.01** | +1.18 kB <br> **+366 B** | Maybe `Render3DTarget` and `RenderArrayTarget`? /cc @mrdoob  > Maybe `Render3DTarget` and `RenderArrayTarget`? /cc @mrdoob

I think using suffix may be the best yeah.

```js
RenderTarget3D
RenderTargetArray
RenderTargetCube // We'll have to rename this one
```

/cc @elalish ",,"**Description**
Introduce support for 3D textures and texture arrays in multi-render target (MRT) setups for both WebGPU and WebGL backends.

Unlike WebGLRenderer I used suffix instead of prefix (`WebGLArrayRenderTarget` -> `RenderTargetArray`) as a `3DRenderTarget` felt wrong.


Made a example while working on it that displays 4 meshes:
<img width=""1720"" alt=""image"" src=""https://github.com/user-attachments/assets/0569abf3-0423-464b-a609-4e4f5a2fc77a"" />


- A mesh rendering a 3D texture.
- A mesh rendering a 2D array texture.
- A mesh rendering a 3D FBO texture.
- A mesh rendering a 2D array FBO texture.

Each slice of both RenderTarget is incremented and rendered every 50ms.



*This contribution is funded by [Utsubo](https://utsubo.com)*
","## Unused variable, import, function or class

Unused imports screenCoordinate, vec2.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3350) @sunag FYI here I updated the RenderContext to support RenderTarget that has not been rendered yet.

This way this prevent issues where the clear Pass doesn't match the correct descriptor associated to a texture and reuse how we setup a descriptor with `_getRenderPassDescriptor` which also makes the code cleaner. I think you will need to pass a parameter to do the `GPULoadOp.Clear` instead of `GPULoadOp.Load` the colorAttachments if you will use `_getRenderPassDescriptor()`. Good catch! Done."
30194,2024-12-23T12:47:11Z,2024-12-23T13:10:18Z,Mugen87,1,0,1,715,12,0,0,[],181.0,0,1387.0,0,0,0,0,298809.886878,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.31 <br> **135.17** | 487.31 <br> **135.17** | +9 B <br> **+3 B** |
| WebGPU Nodes | 486.77 <br> **135.07** | 486.78 <br> **135.07** | +9 B <br> **+3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.47 <br> **150.87** | 557.48 <br> **150.87** | +6 B <br> **+1 B** |
| WebGPU Nodes | 513.54 <br> **140.64** | 513.55 <br> **140.64** | +6 B <br> **+3 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30182

**Description**

Documents more renderer modules.
",
30188,2024-12-22T11:11:36Z,2024-12-23T04:09:51Z,Mugen87,1,1,2,405,11,1,0,[],167.0,0,61095.0,0,0,0,0,331237.3924,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.34 <br> **135.17** | 487.31 <br> **135.17** | -34 B <br> **+2 B** |
| WebGPU Nodes | 486.81 <br> **135.07** | 486.77 <br> **135.07** | -34 B <br> **+3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.5 <br> **150.86** | 557.47 <br> **150.87** | -34 B <br> **+4 B** |
| WebGPU Nodes | 513.58 <br> **140.64** | 513.54 <br> **140.64** | -34 B <br> **+2 B** |",,"Related issue: #30182

**Description**

More documentation.
",@sunag It seems more consistent to return the reference of the Chain Map itself instead of one the internal Weak Maps that holds the value. 
30191,2024-12-22T18:30:45Z,2024-12-22T18:42:25Z,renovate[bot],0,0,1,171,1,0,0,[],,0,753.0,0,0,0,0,365230.728235,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [chalk](https://redirect.github.com/chalk/chalk) | [`5.3.0` -> `5.4.1`](https://renovatebot.com/diffs/npm/chalk/5.3.0/5.4.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/chalk/5.4.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/chalk/5.4.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/chalk/5.3.0/5.4.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/chalk/5.3.0/5.4.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [magic-string](https://redirect.github.com/rich-harris/magic-string) | [`0.30.15` -> `0.30.17`](https://renovatebot.com/diffs/npm/magic-string/0.30.15/0.30.17) | [![age](https://developer.mend.io/api/mc/badges/age/npm/magic-string/0.30.17?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/magic-string/0.30.17?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/magic-string/0.30.15/0.30.17?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/magic-string/0.30.15/0.30.17?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.28.1` -> `4.29.1`](https://renovatebot.com/diffs/npm/rollup/4.28.1/4.29.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.29.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.29.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.28.1/4.29.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.28.1/4.29.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>chalk/chalk (chalk)</summary>

### [`v5.4.1`](https://redirect.github.com/chalk/chalk/releases/tag/v5.4.1)

[Compare Source](https://redirect.github.com/chalk/chalk/compare/v5.4.0...v5.4.1)

-   Fix `navigator` not defined `ReferenceError` ([#&#8203;642](https://redirect.github.com/chalk/chalk/issues/642))  [`4ebb62d`](https://redirect.github.com/chalk/chalk/commit/4ebb62d)

### [`v5.4.0`](https://redirect.github.com/chalk/chalk/releases/tag/v5.4.0)

[Compare Source](https://redirect.github.com/chalk/chalk/compare/v5.3.0...v5.4.0)

-   Update `CIRCLECI` environments to return level 3 color support  [`f838120`](https://redirect.github.com/chalk/chalk/commit/f838120)

</details>

<details>
<summary>rich-harris/magic-string (magic-string)</summary>

### [`v0.30.17`](https://redirect.github.com/rich-harris/magic-string/blob/HEAD/CHANGELOG.md#03017-2024-12-16)

[Compare Source](https://redirect.github.com/rich-harris/magic-string/compare/v0.30.16...v0.30.17)

##### Bug Fixes

-   remove problematic `type: module` ([092697b](https://redirect.github.com/rich-harris/magic-string/commit/092697b3be479a19ab5e763f872e612743075d4a))

### [`v0.30.16`](https://redirect.github.com/rich-harris/magic-string/blob/HEAD/CHANGELOG.md#03016-2024-12-16)

[Compare Source](https://redirect.github.com/rich-harris/magic-string/compare/v0.30.15...v0.30.16)

##### Bug Fixes

-   missing mapping after a line break with `hires: 'boundary'` ([#&#8203;298](https://redirect.github.com/rich-harris/magic-string/issues/298)) ([24cb8ea](https://redirect.github.com/rich-harris/magic-string/commit/24cb8ea50dfe913ea01f6de04d727b27a70f5db7))

##### Features

-   introduce offset ([#&#8203;297](https://redirect.github.com/rich-harris/magic-string/issues/297)) ([29f260e](https://redirect.github.com/rich-harris/magic-string/commit/29f260e1902fee9ec17a86ec4ab641b089344131))

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.29.1`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4291)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.29.0...v4.29.1)

*2024-12-21*

##### Bug Fixes

-   Fix crash from deoptimized logical expressions ([#&#8203;5771](https://redirect.github.com/rollup/rollup/issues/5771))

##### Pull Requests

-   [#&#8203;5769](https://redirect.github.com/rollup/rollup/pull/5769): Remove unnecessary lifetimes ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5771](https://redirect.github.com/rollup/rollup/pull/5771): fix: do not optimize the literal value if the cache is deoptimized ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi))

### [`v4.29.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4290)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.28.1...v4.29.0)

*2024-12-20*

##### Features

-   Treat objects as truthy and always check second argument to better simplify logical expressions ([#&#8203;5763](https://redirect.github.com/rollup/rollup/issues/5763))

##### Pull Requests

-   [#&#8203;5759](https://redirect.github.com/rollup/rollup/pull/5759): docs: add utf-8 encoding to JSON file reading ([@&#8203;chouchouji](https://redirect.github.com/chouchouji))
-   [#&#8203;5760](https://redirect.github.com/rollup/rollup/pull/5760): fix(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5763](https://redirect.github.com/rollup/rollup/pull/5763): fix: introduce UnknownFalsyValue for enhancing if statement tree-shaking ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi))
-   [#&#8203;5766](https://redirect.github.com/rollup/rollup/pull/5766): chore(deps): update dependency [@&#8203;rollup/plugin-node-resolve](https://redirect.github.com/rollup/plugin-node-resolve) to v16 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5767](https://redirect.github.com/rollup/rollup/pull/5767): fix(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS44MC4wIiwidXBkYXRlZEluVmVyIjoiMzkuODAuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
30190,2024-12-22T16:51:31Z,2024-12-22T18:29:43Z,renovate[bot],0,0,1,6,1,0,0,[],,0,5956.0,0,0,0,0,365982.653527,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `df409f7` -> `48ab28a` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS44MC4wIiwidXBkYXRlZEluVmVyIjoiMzkuODAuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
30189,2024-12-22T16:51:27Z,2024-12-22T18:29:32Z,renovate[bot],0,0,1,4,2,0,0,[],,0,5960.0,0,0,0,0,365983.17442,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/upload-artifact](https://redirect.github.com/actions/upload-artifact) | action | digest | `b4b15b8` -> `6f51ac0` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS44MC4wIiwidXBkYXRlZEluVmVyIjoiMzkuODAuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
30178,2024-12-20T15:23:46Z,2024-12-21T15:41:22Z,Mugen87,3,0,2,6,1,0,0,[],173.0,0,87456.0,0,0,0,0,462548.631904,,0,2,1,False,"['github-actions[bot]', 'sunag', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.25 <br> **135.14** | 487.34 <br> **135.17** | +90 B <br> **+25 B** |
| WebGPU Nodes | 486.72 <br> **135.04** | 486.81 <br> **135.07** | +90 B <br> **+24 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.41 <br> **150.83** | 557.5 <br> **150.86** | +90 B <br> **+28 B** |
| WebGPU Nodes | 513.49 <br> **140.61** | 513.58 <br> **140.64** | +90 B <br> **+29 B** | @sunag Unfortunately, this PR exhibits an issue with toggling fog: If you render the shadow pass with disabled fog and then restore the setting for the beauty pass, you end up with no fog in the beauty pass since the caching system does not detect the change in the scene. If you call [Nodes.updateFog()](https://github.com/mrdoob/three.js/blob/fbd54d51847312ea137cf81d432082c71f2ba460/src/renderers/common/nodes/Nodes.js#L363) in `RenderUtils`, the issue is fixed however there is now a constant object creation and deletion overhead in `updateFog()` every frame. 

Maybe we can store the created `fogNode`  in `updateFog()` in a separate cache so we don't create it over and over again. I'll check that out.",,"Fixed #30177

**Description**

The PR makes sure `RendererUtils` honors fog definitions.
",
30180,2024-12-21T05:50:59Z,2024-12-21T15:29:34Z,sunag,1,0,1,124,2,0,0,[],165.0,0,34722.0,0,0,0,0,463250.426032,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.04 <br> **135.09** | 487.26 <br> **135.14** | +216 B <br> **+48 B** |
| WebGPU Nodes | 486.51 <br> **134.99** | 486.73 <br> **135.04** | +216 B <br> **+49 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.21 <br> **150.78** | 557.42 <br> **150.83** | +216 B <br> **+44 B** |
| WebGPU Nodes | 513.28 <br> **140.56** | 513.5 <br> **140.6** | +216 B <br> **+41 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30178

**Description**

The PR fixes changing of shader-related scene properties like `scene.fog`, `scene.environment` when changed during the rendering pass using `Node.updateBefore()`, and also creates a cache layer for the related classes.",
30182,2024-12-21T09:57:46Z,2024-12-21T10:09:23Z,Mugen87,1,0,7,1143,6,0,0,[],168.0,0,697.0,0,0,0,0,482468.90575,,0,7,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.04 <br> **135.09** | 487.03 <br> **135.09** | -9 B <br> **+6 B** |
| WebGPU Nodes | 486.51 <br> **134.99** | 486.5 <br> **135** | -9 B <br> **+7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.21 <br> **150.78** | 557.2 <br> **150.79** | -9 B <br> **+8 B** |
| WebGPU Nodes | 513.28 <br> **140.56** | 513.27 <br> **140.57** | -9 B <br> **+6 B** |",,"Related issue: -

**Description**

This PR begins the documentation of the new renderer modules.",
30023,2024-12-03T07:12:36Z,2024-12-03T21:25:44Z,sunag,7,0,2,92,9,0,0,[],174.0,0,1560288.0,0,0,0,0,487988.462615,,0,2,1,False,"['github-actions[bot]', 'Spiri0', 'RenaudRohlinger', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.6 <br> **134.48** | 484.8 <br> **134.59** | +205 B <br> **+110 B** |
| WebGPU Nodes | 484.06 <br> **134.38** | 484.27 <br> **134.49** | +205 B <br> **+110 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 465 <br> **112.04** | +385 B <br> **+58 B** |
| WebGPU | 553.55 <br> **149.82** | 554.14 <br> **150.01** | +590 B <br> **+188 B** |
| WebGPU Nodes | 509.43 <br> **139.53** | 510.02 <br> **139.72** | +590 B <br> **+191 B** | That sounds interesting, because since I think r165 I have to use the depthTexture with f32 in the shader, which I find very nice but the sampling has suffered a bit compared to the way with texture_depth_2d and its sampler. Sometimes I see very fine seems with the scalar depth value. It's nothing that really bothers me but with texture_depth_2d and sampler the quality was perfect.
Will this have an impact on this application?

```
sceneDepthPass = depthPass( scene, camera );
sceneDepthPassColor = sceneDepthPass.getTextureNode( 'depth' );

shaderParams = {
   viewPortDepthTexture: sceneDepthPassColor,
}

//in the wgsl shader header
viewPortDepthTexture: f32,
```

Sounds almost like texture_depth_2d is usable again with sampler.  I remember you had commented, in theory it should solve, I just haven't tested it in `wgslFn`, it will add `multisampled` in the type like `texture_depth_multisampled_2d`. I'm curious and will add your extension locally to test it. I now need the depth texture for occlusion culling anyway. I'm confident. Everything else is going like clockwork too. Ah, so the type will extended.
In the fragment shader it works like this again:

```
fn main_fragment(
   vUv: vec2<f32>,
   depthTexture: texture_depth_2d,
   depthSampler: sampler,
) -> vec4<f32> {

   var depth = textureSample( depthTexture, depthSampler, vUv );

   //...
```

But now I can also use texture_depth_2d in the compute shader. Just samplers don't work. Since samplers and textureSampleLevel can be used in compute shaders, I added them in 3 places in the WGSLNodeBuilder and it works.
Your PR has good timing now that I'm dealing with occlusion culling in compute shaders. I'll make a PR right away where I've added the samplers for textureSampleLevel for compute shaders, it's pretty small.

 I noticed a small conflict. The line:
```
( this.isSampleCompare( texture ) === false && texture.minFilter === NearestFilter && texture.magFilter === NearestFilter ) ||
```

in this function in the WGSLNodeBuilder.js corrupt https://github.com/mrdoob/three.js/pull/30033. 
If I comment out the line, the sampler for depth textures works again. The line specifically excludes depth textures.

```	
isSampleCompare( texture ) {
	return texture.isDepthTexture === true && texture.compareFunction !== null;
}
isUnfilterable( texture ) {
	return this.getComponentTypeFromTexture( texture ) !== 'float' ||
		( ! this.isAvailable( 'float32Filterable' ) && texture.isDataTexture === true && texture.type === FloatType ) ||
		( this.isSampleCompare( texture ) === false && texture.minFilter === NearestFilter && texture.magFilter === NearestFilter ) ||
		texture.isMultisampleRenderTargetTexture === true;
		this.renderer.backend.utils.getTextureSampleData( texture ).primarySamples > 1;

}
```
@sunag is the line essential?
Even with nearest filters for depth textures, samplers are important in compute shaders. 
This looks like a harmless thing to me :)



 Adding `antialias: true` caused the `webgpu_backdrop_water` to run at less than 50fps on my M1 Max, compared to a smooth 120fps previously. This is the first time I've experienced such low performance. Removing antialias fixes the issue. @sunag",,"Related issue: https://github.com/mrdoob/three.js/pull/28784#discussion_r1665207548

**Description**

The problem seems a bit more complicated than it seems. We needed a `Texture.renderTarget` property to bind `RenderTarget` to get `RenderTarget.samples` and thus handle it in `WebGPUBackend`.

I tried to make `Texture.isRenderTargetTexture` become a get if `.renderTarget !== null` but this seems to break the tests in `WebGLRenderer` so I kept the property.

Now `webgpu_backdrop_water` work with antialias.",
30118,2024-12-13T18:18:31Z,2024-12-20T09:31:52Z,borisghidaglia,0,8,2,8,2,2,1,[],,0,605220.0,0,0,0,0,539102.436022,,0,2,1,False,[],,,"Related issue: #11475 

**Description**

Add TSL example for the onBeforeCompile method in the Material doc.

Note: `en` and `fr` doc only
","It must be noted that TSL can't be used with `WebGLRenderer`. I didn't know about that! 

The [doc](https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language#why-tsl) says: 

> Other benefits that TSL brings besides simplifying shading creation is keeping the renderer agnostic

And I can't find any instance of ""WebGLRenderer"" or ""WebGPURenderer"" on the page.

I'm sure you are right on this as you know Three.js infinitely better than me, so could you elaborate or link to something I can read so that I understand?

It will help me make a clear statement in the doc.

Thanks!  We are currently in the process of documenting the node material, TSL and `WebGPURenderer` so if you wait two or three releases there should be more resources in that regard.

We've already made good progress with the node material and TSL but `WebGPURenderer` isn't documented yet. Apart from the Wiki page, there are no guides and articles yet which provide a more coherent view on the new system.  But like I said before we have noticed the demand from the developer side and focus on docs now.

To answer the actual question in short: The node material and TSL are only supported by `WebGPURenderer`.  `WebGPURenderer` has a WebGPU and WebGL backend though so it can generate WGSL or GLSL depending on the supported backend. That simplifies the development of 3D apps on the web since you as a developer don't need separate renderers and shaders for WebGPU and WebGL. For now, I would rephrase the new text to:

>  Useful for the modification of built-in materials, but the recommended approach moving forward is to use `WebGPURenderer` with the new Node Material system and [link:https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language TSL]. > there should be more resources in that regard

Awesome!

> WebGPURenderer has a WebGPU and WebGL backend though so it can generate WGSL or GLSL depending on the supported backend.

There was my confusion! I thought `WebGLRenderer` handled WebGL/GLSL and `WebGPURenderer` was dealing with WebGPU/WGSL. Thanks for clarifying :)

> I would rephrase the new text to:

I implemented your suggestion (en/fr) > avec le nouveau système de Node Material

This feels a bit weird, but translating Node Material in french might be even weirder. Wdyt?
Maybe a link to this new Node Material would make things more natural? 

Is it part of the doc that is WIP and that you were talking about? Or can I link to it now? You can't link to it yet since it is too early to host the new docs. For now, I suggest you don't translate the term an use Node Material. Got it, so all good then? 

In case you missed it, I pushed the changes you suggested

https://github.com/mrdoob/three.js/pull/30118#discussion_r1893025730
> I implemented your suggestion (en/fr)"
30175,2024-12-20T13:43:56Z,2024-12-20T14:19:22Z,ycw,1,0,1,2,1,0,0,[],171.0,0,2605.0,0,0,0,0,553392.757353,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.05 <br> **135.09** | 487.04 <br> **135.09** | -4 B <br> **-3 B** |
| WebGPU Nodes | 486.51 <br> **134.99** | 486.51 <br> **134.99** | -4 B <br> **-3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.21 <br> **150.78** | 557.21 <br> **150.78** | -4 B <br> **-1 B** |
| WebGPU Nodes | 513.28 <br> **140.56** | 513.28 <br> **140.56** | +0 B <br> **+0 B** |",,"should be `.offsetNode`, not `.offsetNodeNode` 

",
30176,2024-12-20T14:09:32Z,2024-12-20T14:18:54Z,ycw,1,0,1,3,1,0,0,[],185.0,0,1059.0,0,0,0,0,553403.306556,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487.05 <br> **135.09** | 487.05 <br> **135.09** | +0 B <br> **+0 B** |
| WebGPU Nodes | 486.51 <br> **134.99** | 486.51 <br> **134.99** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.21 <br> **150.78** | 557.21 <br> **150.78** | +0 B <br> **+0 B** |
| WebGPU Nodes | 513.28 <br> **140.56** | 513.28 <br> **140.56** | +0 B <br> **+0 B** |",,ensures that node factories `Fn(...)` are all qualified with `@function` ,
29878,2024-11-14T12:08:59Z,2024-11-14T12:28:32Z,Mugen87,3,0,2,91,4,0,0,[],58485.0,0,3088021.0,0,0,0,0,584075.582537,,0,2,1,False,"['mrdoob', 'ligaofeng0901', 'sunag']","It’s really beautiful to see the reflections now. The refelction looks nice, but It seems that it still doesn't work correctly with `logarithmicDepthBuffer`, 
With `logarithmicDepthBuffer` on, I got this effect:
<img width=""680"" alt=""image"" src=""https://github.com/user-attachments/assets/90143cc3-2a83-4037-b0aa-bbc8e02a8974"">
And I tried to change 
https://github.com/mrdoob/three.js/blob/dev/examples/jsm/tsl/display/SSRNode.js#L142
to `logarithmicDepthToViewZ`, it is still not correct.  While improving the example (https://github.com/mrdoob/three.js/commit/98170ef6c7c9e1fd9582ced1dc7e1b614df92c6d) I noticed that the materials in the model have `side` set to `DoubleSide`.",,"Related issue: - 

**Description**

The PR makes the WebGPU SSR demo more attractive by introducing a new asset and scene settings.",
30161,2024-12-18T17:36:49Z,2024-12-18T22:14:09Z,sunag,1,1,2,11,2,1,0,[],185.0,0,130905.0,0,0,0,0,583921.757802,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.51 <br> **134.96** | 486.63 <br> **135.03** | +118 B <br> **+62 B** |
| WebGPU Nodes | 485.98 <br> **134.87** | 486.1 <br> **134.92** | +118 B <br> **+58 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.65 <br> **150.41** | 555.77 <br> **150.47** | +118 B <br> **+61 B** |
| WebGPU Nodes | 511.54 <br> **140.14** | 511.66 <br> **140.2** | +118 B <br> **+59 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29991

**Description**

Fix  `webgpu_postprocessing_motion_blur` after ignore MRT in shadow rendering.","May be better to do a local `WeakMap` for this?
I think we should avoid leaking renderer internals into `userData`."
30173,2024-12-20T04:32:03Z,2024-12-20T05:11:40Z,sunag,1,0,3,12,2,0,0,[],170.0,0,2379.0,0,0,0,0,586734.157789,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 487 <br> **135.07** | 487.05 <br> **135.09** | +48 B <br> **+17 B** |
| WebGPU Nodes | 486.46 <br> **134.99** | 486.51 <br> **134.99** | +48 B <br> **+4 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.18 <br> **150.77** | 557.21 <br> **150.78** | +29 B <br> **+10 B** |
| WebGPU Nodes | 513.25 <br> **140.55** | 513.28 <br> **140.56** | +29 B <br> **+9 B** |",,"**Description**

Adds an alternative to `varying()` but without the name parameter. 
This should make it easier to understand through the name proposed in the function.
",
30171,2024-12-20T01:01:46Z,2024-12-20T03:50:15Z,sunag,1,0,2,30,3,0,0,[],182.0,0,10112.0,0,0,0,0,591619.337152,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.93 <br> **135.03** | 487 <br> **135.07** | +71 B <br> **+40 B** |
| WebGPU Nodes | 486.39 <br> **134.95** | 486.46 <br> **134.99** | +71 B <br> **+35 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.13 <br> **150.77** | 557.18 <br> **150.77** | +50 B <br> **+2 B** |
| WebGPU Nodes | 513.2 <br> **140.53** | 513.25 <br> **140.55** | +50 B <br> **+22 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30161#discussion_r1891189236

**Description**

Gets the object data that can be shared between different rendering steps.",
30172,2024-12-20T01:43:17Z,2024-12-20T01:52:41Z,sunag,1,0,1,88,17,0,0,[],166.0,0,567.0,0,0,0,0,598673.573614,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.93 <br> **135.03** | 486.93 <br> **135.03** | -6 B <br> **+1 B** |
| WebGPU Nodes | 486.4 <br> **134.95** | 486.39 <br> **134.95** | -6 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 557.13 <br> **150.77** | 557.13 <br> **150.77** | +0 B <br> **+0 B** |
| WebGPU Nodes | 513.2 <br> **140.53** | 513.2 <br> **140.53** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30170

**Description**

Rename `PostProcessingUtils` -> `RendererUtils`.",
30170,2024-12-19T17:43:04Z,2024-12-19T22:58:01Z,Mugen87,5,0,4,59,3,0,0,[],189.0,0,18897.0,0,0,0,0,609157.085814,,0,4,1,False,"['github-actions[bot]', 'Mugen87', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.67 <br> **135.01** | 486.76 <br> **135.02** | +95 B <br> **+15 B** |
| WebGPU Nodes | 486.13 <br> **134.91** | 486.23 <br> **134.94** | +95 B <br> **+32 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.76 <br> **150.47** | 557.09 <br> **150.77** | +1.32 kB <br> **+297 B** |
| WebGPU Nodes | 511.83 <br> **140.23** | 513.15 <br> **140.53** | +1.32 kB <br> **+295 B** | > @sunag We might want to rename PostProcessingUtils to RendererUtils maybe^^?

I'm happy we're so aligned, as I was considering this as well :)

 The PR breaks the motion blur demo. Investigating... There was actually a bug in `resetRendererAndSceneState()` (no reset for renderer properties happened). I have refactored the module slightly so this oversight does not happen anymore. @sunag With this PR, the shadows in `webgpu_shadowmap_opacity` look a bit darker. That happens because the scene's background does not influence the shadow map anymore (verified this by toggle the scene reset). I _think_ the shadow color is now more correct.",,"Fixed #30111.

**Description**

The PR makes sure the scene background does not affect the shadow map anymore.

@sunag We might want to rename `PostProcessingUtils` to `RendererUtils` maybe^^?",
30167,2024-12-19T12:46:31Z,2024-12-19T20:29:19Z,Mugen87,1,1,1,801,8,1,0,[],173.0,0,27768.0,0,0,0,0,618080.271782,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.48 <br> **134.97** | 486.66 <br> **134.98** | +174 B <br> **+10 B** |
| WebGPU Nodes | 485.95 <br> **134.87** | 486.12 <br> **134.88** | +174 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.58 <br> **150.43** | 555.63 <br> **150.44** | +48 B <br> **+3 B** |
| WebGPU Nodes | 511.65 <br> **140.19** | 511.7 <br> **140.2** | +48 B <br> **+4 B** |",,"Related issue: #29984

**Description**

Documents the remaining node material classes.
",Fixed a small bug since it must be checked for `specularIntensityMap`.
30169,2024-12-19T16:14:30Z,2024-12-19T17:10:20Z,Mugen87,1,0,1,40,1,0,0,[],177.0,0,3351.0,0,0,0,0,630018.547054,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.48 <br> **134.97** | 486.67 <br> **135.01** | +183 B <br> **+39 B** |
| WebGPU Nodes | 485.95 <br> **134.87** | 486.13 <br> **134.91** | +183 B <br> **+36 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.58 <br> **150.43** | 555.76 <br> **150.47** | +183 B <br> **+40 B** |
| WebGPU Nodes | 511.65 <br> **140.19** | 511.83 <br> **140.23** | +183 B <br> **+40 B** |",,"Related issue: #30111

**Description**

This makes sure the `backgroundNode` and  `environmentNode` are treated a bit more strictly than before since they only allow node input now. So something like below has no effect anymore:
```js
scene.backgroundNode = new THREE.Color( 0x222222 );
```
It must be:
```js
scene.backgroundNode = color( 0x222222 );
```
or 
```js
scene.background = new THREE.Color( 0x222222 );
```",
30164,2024-12-18T19:26:10Z,2024-12-19T09:14:50Z,s-rigaud,0,0,1,83,1,1,1,[],,0,49720.0,0,0,0,0,658549.955383,,0,1,1,False,[],,,"**Description**

Seems like https://threejs.org/manual/#en/material-table is not really up to date.

I added the missing wireframe, fog, flat shading and reflectivity. I also sorted the properties in order to match the output table.


**Preview**

https://raw.githack.com/s-rigaud/three.js/manual-improve-material-feature-table/manual/index.html#en/material-table",
30130,2024-12-16T07:39:09Z,2024-12-16T18:58:46Z,sunag,2,1,7,83,3,1,0,[],182.0,0,256117.0,0,0,0,0,667375.257373,,0,7,1,False,"['github-actions[bot]', 'ligaofeng0901']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.17 <br> **134.89** | 486.17 <br> **134.89** | +1 B <br> **-6 B** |
| WebGPU Nodes | 485.63 <br> **134.79** | 485.64 <br> **134.79** | +1 B <br> **-3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.32** | 555.29 <br> **150.3** | -28 B <br> **-21 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.21 <br> **140.06** | -28 B <br> **-23 B** | Hello @sunag 
in https://github.com/mrdoob/three.js/blob/dev/examples/jsm/tsl/lighting/TiledLightsNode.js#L71 .  The method `customCacheKey` depends on `this._compute`, which is initialized in method `_create`.

But I found `customCacheKey` is invoked before `_create`, it cause an error `Cannot read properties of null (reading 'getCacheKey')`

The example https://github.com/mrdoob/three.js/blob/dev/examples/webgpu_lights_tiled.html works fine because `setSize` of light node is called in renderLoop in https://github.com/mrdoob/three.js/blob/dev/examples/webgpu_lights_tiled.html#L190
",,"Related issue: https://github.com/mrdoob/three.js/pull/30062

**Description**

Improve cache-key performance by removing PointLights cache-key:
There's no need to recreate the shader when adding or removing PointLights in Tiled Lights.

- [x] [LightsNode: Fix lights property reference](https://github.com/mrdoob/three.js/commit/9b9fdad5be2f39aa8735f97aa3ced20b795edab9)
- [x] [`webgpu_lights_tiled`: Fix normal map tiles](https://github.com/mrdoob/three.js/commit/feb3ff6013e9e74d7398e0d16196242ac8730398)","## Unused variable, import, function or class

Unused import NodeUtils.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3347)"
30150,2024-12-17T21:11:43Z,2024-12-18T22:05:01Z,sunag,1,0,1,9,2,0,0,[],183.0,0,89601.0,0,0,0,0,698737.412603,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.55 <br> **134.98** | 486.59 <br> **134.98** | +42 B <br> **-6 B** |
| WebGPU Nodes | 486.02 <br> **134.88** | 486.06 <br> **134.88** | +42 B <br> **-3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.67 <br> **150.42** | 555.67 <br> **150.42** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.57 <br> **140.14** | 511.57 <br> **140.14** | +0 B <br> **+0 B** |",,"**Description**

- [x] Add `inversesqrt` -> `inverseSqrt`
- [x] Add `faceforward` -> `faceForward`",
30152,2024-12-17T23:12:02Z,2024-12-18T22:04:21Z,sunag,3,0,3,24,5,1,1,[],391.0,0,82342.0,0,0,0,0,698777.873213,,0,3,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.55 <br> **134.98** | 486.54 <br> **134.97** | -15 B <br> **-9 B** |
| WebGPU Nodes | 486.02 <br> **134.88** | 486 <br> **134.88** | -15 B <br> **-8 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.67 <br> **150.42** | 555.66 <br> **150.41** | -12 B <br> **-4 B** |
| WebGPU Nodes | 511.57 <br> **140.14** | 511.56 <br> **140.14** | -12 B <br> **-3 B** | Actually shouldn't shadowPositionWorld be shadowPositionView? Only being able to update the world position seems restrictive. > Actually shouldn't shadowPositionWorld be shadowPositionView? Only being able to update the world position seems restrictive.

The projection should be in world space, but maybe you have another idea? Maybe you could formulate it in a PR for us to analyze?",,"**Description**

Keeps names more consistent with other nodes.
",
30163,2024-12-18T18:47:08Z,2024-12-18T19:20:08Z,Mugen87,1,5,2,751,14,2,0,[],181.0,0,1980.0,0,0,0,0,708635.337892,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.51 <br> **134.96** | 486.34 <br> **134.92** | -178 B <br> **-40 B** |
| WebGPU Nodes | 485.98 <br> **134.87** | 485.8 <br> **134.83** | -178 B <br> **-39 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.65 <br> **150.41** | 555.47 <br> **150.37** | -178 B <br> **-33 B** |
| WebGPU Nodes | 511.54 <br> **140.14** | 511.54 <br> **140.14** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Documenting more node material classes.
","I have removed these statements since the default of `lights` is already `false`. I have removed this property since I think it's from a time where `InstancedPointsNodeMaterial` was not available yet and we assumed we have to implement size support in `PointsNodeMaterial`. @sunag You have added this line in #23600 although points are by default opaque according to `PointsMaterial`. Do you recall why you have added this? I don't remember, but removing it seems correct in the current context for me. I was doing a review on `InstancedPointsNodeMaterial`, with Nodes we wouldn't need variations for all this kind of case, and once we have Raycaster and BoundBox through GPU we will have an optimized support for procerural things. I'll try to show something in the next few weeks."
29991,2024-11-29T02:24:40Z,2024-11-29T04:15:16Z,sunag,1,0,4,64,3,0,0,[],181.0,0,1696356.0,0,0,0,0,714807.416462,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.46 <br> **134.42** | 484.61 <br> **134.47** | +148 B <br> **+53 B** |
| WebGPU Nodes | 483.93 <br> **134.32** | 484.08 <br> **134.37** | +148 B <br> **+56 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.23 <br> **149.71** | 553.37 <br> **149.76** | +148 B <br> **+52 B** |
| WebGPU Nodes | 509.11 <br> **139.43** | 509.25 <br> **139.47** | +148 B <br> **+38 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29942

**Description**

This PR certifies that examples like `webgl_shadowmap_pointlight` work in `WebGPURenderer`.

- [x] `alphaTest` and `alphaMap` were not working in the shadows.
- [x] `PointLight` shadow was not working with more than one shadow.
- [x] Force MRT null during shadow rendering.

![image](https://github.com/user-attachments/assets/73daf14d-7051-4dfa-b81b-7ce00a645c23)
",
30159,2024-12-18T15:19:26Z,2024-12-18T15:19:54Z,Mugen87,1,0,1,6,1,0,0,[],187.0,0,189.0,0,0,0,0,722888.739754,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.51 <br> **134.96** | 486.51 <br> **134.96** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.98 <br> **134.87** | 485.98 <br> **134.87** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.65 <br> **150.41** | 555.65 <br> **150.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.54 <br> **140.14** | 511.54 <br> **140.14** | +0 B <br> **+0 B** |",,"Related issue: #30158

**Description**

Minor clean up in `ScriptableNode`.
",
30157,2024-12-18T13:54:21Z,2024-12-18T14:11:57Z,Mugen87,1,0,1,438,4,0,0,[],180.0,0,1057.0,0,0,0,0,727127.139124,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.55 <br> **134.98** | 486.53 <br> **134.97** | -24 B <br> **-15 B** |
| WebGPU Nodes | 486.02 <br> **134.88** | 485.99 <br> **134.87** | -24 B <br> **-14 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.67 <br> **150.42** | 555.65 <br> **150.41** | -24 B <br> **-11 B** |
| WebGPU Nodes | 511.57 <br> **140.14** | 511.54 <br> **140.14** | -24 B <br> **-4 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Now starting to document the node material classes.",
30153,2024-12-18T00:29:33Z,2024-12-18T09:13:35Z,cmhhelgeson,1,0,5,118,2,1,1,[],167.0,0,31443.0,0,0,0,0,745029.207456,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.4 <br> **79.05** | 339.4 <br> **79.05** | +0 B <br> **+0 B** |
| WebGPU | 486.55 <br> **134.98** | 486.55 <br> **134.98** | +0 B <br> **+0 B** |
| WebGPU Nodes | 486.02 <br> **134.88** | 486.02 <br> **134.88** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 555.67 <br> **150.42** | 555.67 <br> **150.42** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.57 <br> **140.14** | 511.57 <br> **140.14** | +0 B <br> **+0 B** |",,"Related issue: #XXXX

**Description**

Document AtomicFunctionNode and BarrierNode in src/nodes/gpu.
",
29844,2024-11-08T12:32:40Z,2024-12-18T03:58:07Z,gkjohnson,11,0,2,22,1,0,0,[],176.0,1,3425130.0,0,0,0,0,763955.671628,,0,2,1,False,"['github-actions[bot]', 'gkjohnson', 'CodyJasonBennett', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.22 <br> **79.04** | 339.41 <br> **79.07** | +192 B <br> **+37 B** |
| WebGPU | 476.9 <br> **132.19** | 476.9 <br> **132.19** | +0 B <br> **+0 B** |
| WebGPU Nodes | 476.2 <br> **132.01** | 476.2 <br> **132.01** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.67 <br> **111.99** | 464.87 <br> **112.03** | +192 B <br> **+38 B** |
| WebGPU | 545.93 <br> **147.86** | 545.93 <br> **147.86** | +0 B <br> **+0 B** |
| WebGPU Nodes | 501.81 <br> **137.56** | 501.81 <br> **137.56** | +0 B <br> **+0 B** | I'm very sick right now, so I can't give this my full attention until the end of next week.

Just a quick glance: bullet points are reasonable and code looks nonintrusive so far.

If I want hardware filtering for depth and shadows, I'll add it myself. No need for that burden now. Hey @CodyJasonBennett - just wanted to ping again. No rush though - hope you're feeling better! Yes, feeling much better. I'm hopping on a plane in a few hours, but just ping or assign me and I'll go through them first thing when I land. Thanks again for leading this stuff. How are you testing this? I'm noticing I have to disable `depthBuffer` or three will crash when looking for a depth attachment when rendering to mipmaps. In the following example, I render unique colors for each mip level, but I only see the first mip when sampling from it with `textureLod`. Disabling L73 will show the expected result with a unique color per mip level.

https://jsfiddle.net/7jtmzpoL > I'm noticing I have to disable depthBuffer or three will crash when looking for a depth attachment when rendering to mipmaps.

This looks like it's maybe related to setting the `mipmaps` array - which I am not doing and generally seems not-so-well documented or tested especially for render targets. I'm just setting `generateMipmaps` to true so the texture storage is available.

> In the following example, I render unique colors for each mip level, but I only see the first mip when sampling from it with textureLod. Disabling L73 will show the expected result with a unique color per mip level.
>
> https://jsfiddle.net/7jtmzpoL

If you set `renderTarget.texture.minFilter` to `THREE.LinearMipmapLinearFilter` the fiddle works. Looks like `textureLod` respects the minification sampling filter. Cool, that works well with `generateMipmaps`. Perhaps that's a better API than overloading `mipmaps` with `{}` like `webgl_materials_cubemap_render_to_mipmaps` does, although that's with a cube target. Should this be merged? Yes. Would you want an example? One immediate use case might be custom mipmaps for alpha-testing (#20522). Sorry for losing track of this! Yes I think this is ready to be merged.

> Would you want an example? One immediate use case might be custom mipmaps for alpha-testing (#20522).

I think an example like that would be great and help identify some of the remaining issues with custom mip rendering. For something like the alpha test use case, for example, I think we'd want to be able to bind and render to actual raw `Texture` (non-RenderTarget) mipmap levels and prevent the automatic generation of mipmaps when `generateMipmaps` is true. Both of these concepts are both relevant to WebGPU I believe, and listed #29779.

Here's a rough idea of what that could look like:
```js
const texture = await new TextureLoader().loadAsync( /* texture url */ );
texture.generateMipmaps = MIPMAP_STORAGE;

const levels = getMipmapLevels( texture );
for ( let i = 1; i < levels; i ++ ) {

  const resolution = getMipmapResolution( texture, i );
  renderer.setRenderTarget( texture, 0, i );
  /* render to texture mipmap */

}
```

@CodyJasonBennett Not sure if it's worth thinking about MRT use cases before going too far down this path. Merging - we can discuss further needed changes in #29779",,"Related issue: #29779

**Description**

Adjusts `setRenderTarget` to afford binding and rendering into a specific mipmap level of a 2d render target texture. A scratch frame buffer is used to avoid cases where there are other attachments on the cached framebuffer without mipmaps (ie a depth buffer) resulting in an error when drawing (which was happening with 3d render targets, as well).

- Depth buffers & rendering into depth textures, multiple render targets are not supported.
- Mipmaps are now no longer automatically generated when rendering into a mipmap layer.

cc @CodyJasonBennett 

_edit ~looks like this will need some different handling for multisample targets but I'm not sure what the best way is to handle that~ Fixed by not rebinding mipmap level == 0 MSRT textures_",
30145,2024-12-17T16:15:49Z,2024-12-17T21:53:48Z,s-rigaud,0,0,1,24,2,0,0,[],,0,20279.0,0,0,0,0,785818.949276,,0,1,1,False,[],,,"**Description**

Remove typos in CurveModifier and CurveModifierGPU.

Tested with: 

* https://raw.githack.com/s-rigaud/three.js/spline-typos/examples/webgl_modifier_curve_instanced.html
* https://raw.githack.com/s-rigaud/three.js/spline-typos/examples/webgl_modifier_curve.html
* https://raw.githack.com/s-rigaud/three.js/spline-typos/examples/webgpu_modifier_curve.html",
30144,2024-12-17T16:05:41Z,2024-12-17T21:54:37Z,s-rigaud,0,0,1,28,2,1,1,[],,0,20939.0,0,0,0,0,785767.021191,,0,1,1,False,[],,,"**Description**

Fix minor typos in two loaders.

Tested with https://raw.githack.com/s-rigaud/three.js/loader-typos/examples/webgl_loader_vrml.html.",
30146,2024-12-17T17:19:49Z,2024-12-17T21:52:17Z,s-rigaud,0,4,1,36,8,3,0,[],,0,16351.0,0,0,0,0,785907.611968,,0,1,1,False,[],,,"**Description**

Fix typos in the examples folder.

Tested with:

- https://raw.githack.com/s-rigaud/three.js/example-typos/examples/webgl_materials_toon.html
- https://raw.githack.com/s-rigaud/three.js/example-typos/examples/webgpu_backdrop_water.html
- https://raw.githack.com/s-rigaud/three.js/example-typos/examples/webgpu_compute_geometry.html
- https://raw.githack.com/s-rigaud/three.js/example-typos/examples/webgpu_compute_particles_snow.html
- https://raw.githack.com/s-rigaud/three.js/example-typos/examples/webgpu_materials_toon.html
- https://raw.githack.com/s-rigaud/three.js/example-typos/examples/webgpu_reflection.html","TBH, I think we should not fix these type of ""typos"". It's totally normal to shorten variable names and it don't has to be grammatically correct, imo.

I appreciate your efforts here but I suggest you focus on comments for now on. We should not overdo it we these typo fixing... Ok no problem, just trying to help :)
 @Mugen87 I agree that shortening variable names is OK, but I'd prefer to see spelling errors corrected.

I view the changes here as falling into the later category, and would vote to merge this PR. I'm okay with that. I just want to avoid that we invest too much time in this renaming variables thing. It takes more effort to test/verify such changes than just fixing comments so I'd like to minimize these tasks if possible."
30147,2024-12-17T18:57:53Z,2024-12-17T19:26:25Z,sunag,1,0,2,29,3,0,0,[],176.0,0,1715.0,0,0,0,0,794660.718069,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.37 <br> **134.95** | 486.55 <br> **134.98** | +178 B <br> **+36 B** |
| WebGPU Nodes | 485.84 <br> **134.85** | 486.02 <br> **134.88** | +178 B <br> **+36 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.5 <br> **150.38** | 555.67 <br> **150.42** | +178 B <br> **+39 B** |
| WebGPU Nodes | 511.4 <br> **140.12** | 511.57 <br> **140.14** | +168 B <br> **+27 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30108

**Description**

Add a `setupModelViewProjection()` interface to allow extended materials to manipulate the MVP if needed.",
30143,2024-12-17T15:47:54Z,2024-12-17T16:01:25Z,s-rigaud,1,0,1,40,12,0,0,[],188.0,0,814.0,0,0,0,0,806960.880453,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.36 <br> **134.94** | 486.36 <br> **134.94** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.83 <br> **134.84** | 485.83 <br> **134.84** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.49 <br> **150.38** | 555.49 <br> **150.38** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.4 <br> **140.12** | 511.4 <br> **140.12** | +0 B <br> **+0 B** |",,"**Description**

Fix minor typos in the source code.",
30142,2024-12-17T12:06:03Z,2024-12-17T15:33:55Z,Mugen87,1,3,2,470,6,1,0,[],176.0,0,12472.0,0,0,0,0,808614.571878,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.36 <br> **134.94** | 486.36 <br> **134.94** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.83 <br> **134.84** | 485.83 <br> **134.84** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.49 <br> **150.38** | 555.49 <br> **150.38** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.4 <br> **140.12** | 511.4 <br> **140.12** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Documents more node modules.
","This fixes the runtime errors which are currently present in production. The node classes are not available in the `TSL` namespace anymore.  Nit: This resource definition is not required to make the code work. I have added this minimal code example for `ScriptableNode` so it's easier to figure out how to use the module. 

That said, a separate guide or tutorial would be the better place to explain the concepts in more detail. It's a real interesting class!"
30138,2024-12-16T16:49:47Z,2024-12-17T09:20:24Z,s-rigaud,0,0,1,52,5,1,1,[],,0,59441.0,0,0,0,0,831022.557944,,0,1,1,False,[],,,"**Description**

Fix typos inside `src/nodes` folder. 

I tested by searching for previous references and with those examples:

- https://raw.githack.com/s-rigaud/three.js/typos-nodes/examples/webgl_shadowmap_csm.html
- https://raw.githack.com/s-rigaud/three.js/typos-nodes/examples/webgl_postprocessing_outline.html
- https://raw.githack.com/s-rigaud/three.js/typos-nodes/examples/webgl_postprocessing_unreal_bloom.html
- https://raw.githack.com/s-rigaud/three.js/typos-nodes/examples/webgpu_lights_tiled.html",
30139,2024-12-16T17:16:28Z,2024-12-16T18:59:16Z,sunag,1,0,3,40,2,0,0,[],180.0,0,6171.0,0,0,0,0,882691.710013,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.27 <br> **134.93** | 486.27 <br> **134.93** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.74 <br> **134.83** | 485.74 <br> **134.83** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.42 <br> **150.35** | 555.42 <br> **150.35** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.34 <br> **140.12** | 511.34 <br> **140.12** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30132, https://github.com/mrdoob/three.js/pull/29982

**Description**

After this PR https://github.com/mrdoob/three.js/pull/29982, the original sound was removed introducing an error when reusing the effect, fixed in this [PR](https://github.com/mrdoob/three.js/pull/30132), but I think the original implementation is a little better because it does not need to reset the output buffer.",
30131,2024-12-16T09:21:30Z,2024-12-16T18:55:47Z,sunag,1,0,2,74,8,0,0,[],175.0,0,34461.0,0,0,0,0,882900.453979,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.17 <br> **134.89** | 486.26 <br> **134.91** | +90 B <br> **+19 B** |
| WebGPU Nodes | 485.63 <br> **134.79** | 485.73 <br> **134.81** | +90 B <br> **+19 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.32** | 555.41 <br> **150.36** | +89 B <br> **+39 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.32 <br> **140.1** | +89 B <br> **+12 B** |",,"**Description**

This PR makes `atan2` overloaded like it is in GLSL, making the transition smoother.

Related: https://www.youtube.com/watch?v=NxeRcnLr0ko by @akella",
30119,2024-12-13T20:59:14Z,2024-12-16T16:04:35Z,s-rigaud,3,0,1,372,81,1,1,[],176.0,0,241523.0,0,0,0,0,893175.616769,,0,1,1,False,"['github-actions[bot]', 's-rigaud', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.21 <br> **79.01** | -30 B <br> **-9 B** |
| WebGPU | 486.17 <br> **134.89** | 486.17 <br> **134.89** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.63 <br> **134.79** | 485.63 <br> **134.79** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.1 <br> **112.07** | -30 B <br> **-8 B** |
| WebGPU | 555.32 <br> **150.32** | 555.32 <br> **150.32** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.24 <br> **140.09** | +0 B <br> **+0 B** | Is it possible to only split the PR so this one only fixes typos in comments? 

Right now, it also renames variables and that needs a closer test. Done ✔️ ",,"**Description**

I used `cSpell` to clear the project of most (all ? 🤞)  typos. 

Sorry for the long read, I hope this is the final PR in an effort to clean all typos.
",
30136,2024-12-16T12:05:05Z,2024-12-16T16:15:20Z,AlaricBaraou,1,0,2,298,4,1,1,[],183.0,0,15053.0,0,0,0,0,892494.724447,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.27 <br> **134.93** | 486.27 <br> **134.93** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.74 <br> **134.83** | 485.74 <br> **134.83** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.07** | 465.1 <br> **112.07** | +0 B <br> **+0 B** |
| WebGPU | 555.42 <br> **150.35** | 555.42 <br> **150.35** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.34 <br> **140.12** | 511.34 <br> **140.12** | +0 B <br> **+0 B** |",,"**Description**

When using the WebGPURenderer the cameraHelper would show the wrong near.

You can see how the near plane change in the camera demo between WebGLRenderer and WebGPURenderer

Before

https://github.com/user-attachments/assets/b8c1b618-ef7e-401a-81b5-7a601e8de12d

After

https://github.com/user-attachments/assets/5744c4fb-a364-48df-a73b-62ce4b655e19

This PR also add the camera example in its WebGPURenderer version ( used to test the helper )
If you prefer without the example I can remove it.
Also please confirm that I added / edited the correct files to add an example, it's my first.

This contribution is funded by [Alaric Baraou](https://alaricbaraou.com/)💶",
30137,2024-12-16T15:52:37Z,2024-12-16T16:04:07Z,Mugen87,0,0,1,1515,10,0,0,[],,0,691.0,0,0,0,0,893205.177951,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Documents the remaining post processing modules.
",
30132,2024-12-16T09:31:51Z,2024-12-16T16:03:14Z,RenaudRohlinger,1,0,4,42,2,0,0,[],190.0,0,23483.0,0,0,0,0,893260.545551,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.17 <br> **134.89** | 486.27 <br> **134.93** | +103 B <br> **+36 B** |
| WebGPU Nodes | 485.63 <br> **134.79** | 485.74 <br> **134.83** | +103 B <br> **+34 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.32** | 555.42 <br> **150.35** | +103 B <br> **+34 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.34 <br> **140.12** | +103 B <br> **+35 B** |",,"**Description**

Fix GPU buffer readback by correctly sequencing map/unmap operations. It was necessary to create a detached copy of mapped data before unmapping to ensure buffer data remains accessible after the GPU operation completes.
There is no need to update the WebGLBackend as it was already properly returning a detached typed array.

I also noticed the audio example wasn't working anymore in production (related https://github.com/mrdoob/three.js/pull/29972), so I fixed it.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30129,2024-12-15T21:41:23Z,2024-12-16T06:25:29Z,Methuselah96,1,0,2,1,1,0,0,[],173.0,0,59522.0,0,0,0,0,899849.585796,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.15 <br> **134.88** | 486.17 <br> **134.89** | +23 B <br> **+10 B** |
| WebGPU Nodes | 485.61 <br> **134.79** | 485.63 <br> **134.79** | +23 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.32** | 555.32 <br> **150.32** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.24 <br> **140.09** | +0 B <br> **+0 B** |",,"Related issue: N/A

**Description**

I think this is missing from https://github.com/mrdoob/three.js/pull/30060 in order to export `shadowWorldPosition` from `Three.TSL.js`?",
30135,2024-12-16T11:25:36Z,2024-12-16T11:41:30Z,Mugen87,0,0,4,1389,22,0,0,[],,0,954.0,0,0,0,0,908964.94288,,0,4,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adding more docs.
",
30128,2024-12-15T17:06:21Z,2024-12-16T09:32:55Z,renovate[bot],2,0,1,10,2,0,0,[],175.0,0,59223.0,0,0,0,0,916652.337691,,0,1,0,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.15 <br> **134.88** | 486.15 <br> **134.88** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.61 <br> **134.79** | 485.61 <br> **134.79** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.32** | 555.32 <br> **150.32** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.24 <br> **140.09** | +0 B <br> **+0 B** | Tested the `16.0.0` version of `@rollup/plugin-node-resolve` locally and it seems to work.",,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [@rollup/plugin-node-resolve](https://redirect.github.com/rollup/plugins/tree/master/packages/node-resolve/#readme) ([source](https://redirect.github.com/rollup/plugins/tree/HEAD/packages/node-resolve)) | [`^15.0.1` -> `^16.0.0`](https://renovatebot.com/diffs/npm/@rollup%2fplugin-node-resolve/15.3.1/16.0.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/@rollup%2fplugin-node-resolve/16.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/@rollup%2fplugin-node-resolve/16.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/@rollup%2fplugin-node-resolve/15.3.1/16.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/@rollup%2fplugin-node-resolve/15.3.1/16.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rollup/plugins (@&#8203;rollup/plugin-node-resolve)</summary>

### [`v16.0.0`](https://redirect.github.com/rollup/plugins/blob/HEAD/packages/node-resolve/CHANGELOG.md#v1600)

*2024-12-15*

##### Breaking Changes

-   feat!: set development or production condition ([#&#8203;1823](https://redirect.github.com/rollup/plugins/issues/1823))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS41OC4xIiwidXBkYXRlZEluVmVyIjoiMzkuNTguMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29849,2024-11-08T23:18:58Z,2024-11-21T04:25:16Z,sunag,2,8,16,786,9,1,0,[],186.0,0,3236670.0,0,0,0,0,913648.527291,,0,16,1,False,"['github-actions[bot]', 'Spiri0']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 478.76 <br> **132.73** | 482.43 <br> **133.72** | +3.67 kB <br> **+992 B** |
| WebGPU Nodes | 478.23 <br> **132.61** | 481.9 <br> **133.62** | +3.67 kB <br> **+1.01 kB** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 546.92 <br> **148.18** | 550.49 <br> **149.19** | +3.57 kB <br> **+1 kB** |
| WebGPU Nodes | 502.8 <br> **137.9** | 506.37 <br> **138.9** | +3.57 kB <br> **+1 kB** | This looks very good even if the shadow cast is not yet correct",,"**Description**

Implementation of `PointShadowNode` and revisions.

[Live example](https://raw.githack.com/sunag/three.js/dev-pointlight-shadow/examples/webgpu_lights_physical.html)

<img width=""835"" alt=""image"" src=""https://github.com/user-attachments/assets/02d259fb-3a0c-4571-b471-052aaf19de5e"">

","## Unused variable, import, function or class

Unused import vec3.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3316) ## Unused variable, import, function or class

Unused import mix.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3317) ## Unused variable, import, function or class

Unused import mul.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3318) ## Unused variable, import, function or class

Unused import glslFn.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3319) ## Unused variable, import, function or class

Unused import perspectiveDepthToViewZ.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3320) ## Unused variable, import, function or class

Unused import positionView.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3321) ## Unused variable, import, function or class

Unused imports depth, linearDepth, viewZToPerspectiveDepth.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3322) ## Unused variable, import, function or class

Unused import modelViewProjection.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3323)"
30127,2024-12-15T16:38:00Z,2024-12-15T18:37:48Z,renovate[bot],0,0,1,232,1,0,0,[],,0,7218.0,0,0,0,0,970360.113221,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [@rollup/plugin-node-resolve](https://redirect.github.com/rollup/plugins/tree/master/packages/node-resolve/#readme) ([source](https://redirect.github.com/rollup/plugins/tree/HEAD/packages/node-resolve)) | [`15.3.0` -> `15.3.1`](https://renovatebot.com/diffs/npm/@rollup%2fplugin-node-resolve/15.3.0/15.3.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/@rollup%2fplugin-node-resolve/15.3.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/@rollup%2fplugin-node-resolve/15.3.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/@rollup%2fplugin-node-resolve/15.3.0/15.3.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/@rollup%2fplugin-node-resolve/15.3.0/15.3.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [eslint-plugin-compat](https://redirect.github.com/amilajack/eslint-plugin-compat) | [`6.0.1` -> `6.0.2`](https://renovatebot.com/diffs/npm/eslint-plugin-compat/6.0.1/6.0.2) | [![age](https://developer.mend.io/api/mc/badges/age/npm/eslint-plugin-compat/6.0.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/eslint-plugin-compat/6.0.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/eslint-plugin-compat/6.0.1/6.0.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/eslint-plugin-compat/6.0.1/6.0.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [magic-string](https://redirect.github.com/rich-harris/magic-string) | [`0.30.14` -> `0.30.15`](https://renovatebot.com/diffs/npm/magic-string/0.30.14/0.30.15) | [![age](https://developer.mend.io/api/mc/badges/age/npm/magic-string/0.30.15?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/magic-string/0.30.15?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/magic-string/0.30.14/0.30.15?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/magic-string/0.30.14/0.30.15?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [qunit](https://qunitjs.com) ([source](https://redirect.github.com/qunitjs/qunit)) | [`2.22.0` -> `2.23.1`](https://renovatebot.com/diffs/npm/qunit/2.22.0/2.23.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/qunit/2.23.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/qunit/2.23.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/qunit/2.22.0/2.23.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/qunit/2.22.0/2.23.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.28.0` -> `4.28.1`](https://renovatebot.com/diffs/npm/rollup/4.28.0/4.28.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.28.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.28.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.28.0/4.28.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.28.0/4.28.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rollup/plugins (@&#8203;rollup/plugin-node-resolve)</summary>

### [`v15.3.1`](https://redirect.github.com/rollup/plugins/blob/HEAD/packages/node-resolve/CHANGELOG.md#v1531)

*2024-12-15*

##### Updates

-   refactor: replace `test` with `includes` ([#&#8203;1787](https://redirect.github.com/rollup/plugins/issues/1787))

</details>

<details>
<summary>amilajack/eslint-plugin-compat (eslint-plugin-compat)</summary>

### [`v6.0.2`](https://redirect.github.com/amilajack/eslint-plugin-compat/releases/tag/v6.0.2)

[Compare Source](https://redirect.github.com/amilajack/eslint-plugin-compat/compare/v6.0.1...v6.0.2)

-   fix: disable failing tests  [`2bb7d81`](https://redirect.github.com/amilajack/eslint-plugin-compat/commit/2bb7d81)
-   chore: bump deps  [`861e42b`](https://redirect.github.com/amilajack/eslint-plugin-compat/commit/861e42b)

***

</details>

<details>
<summary>rich-harris/magic-string (magic-string)</summary>

### [`v0.30.15`](https://redirect.github.com/rich-harris/magic-string/blob/HEAD/CHANGELOG.md#03015-2024-12-10)

[Compare Source](https://redirect.github.com/rich-harris/magic-string/compare/v0.30.14...v0.30.15)

##### Features

-   add `sideEffects: false` to package.json ([#&#8203;295](https://redirect.github.com/rich-harris/magic-string/issues/295)) ([889bd73](https://redirect.github.com/rich-harris/magic-string/commit/889bd738675cc599e6db591cef85c85cb36c8658))

</details>

<details>
<summary>qunitjs/qunit (qunit)</summary>

### [`v2.23.1`](https://redirect.github.com/qunitjs/qunit/blob/HEAD/History.md#2231--2024-12-06)

[Compare Source](https://redirect.github.com/qunitjs/qunit/compare/2.23.0...2.23.1)

\==================

##### Fixed

-   CLI: Fix support for strict [TAP parsers](https://qunitjs.com/api/config/reporters/#tap) by limiting colors to test names. [#&#8203;1801](https://redirect.github.com/qunitjs/qunit/pull/1801)
-   CLI: Fix confusing [`--seed` option](https://qunitjs.com/api/config/seed/) eating the file argument. [#&#8203;1691](https://redirect.github.com/qunitjs/qunit/issues/1691)
-   CLI: Remove confusing `expected: undefined` under error messages in TAP reporter. [#&#8203;1794](https://redirect.github.com/qunitjs/qunit/pull/1794)
-   HTML Reporter: Fix broken ""Rerun without max depth"" link. [da0c59e101](https://redirect.github.com/qunitjs/qunit/commit/da0c59e1016685ecd2b813bba914d33170e7bf98) (see also [91db92dbc5](https://redirect.github.com/qunitjs/qunit/commit/91db92dbc50bbbc41c5060a27e7aafd4e073e289), [73c03cf277](https://redirect.github.com/qunitjs/qunit/commit/73c03cf27745e179396a6d7c9af011a20d3b9082))
-   HTML Reporter: Fix `<label>` to wrap `<select>` for multi-value urlConfig item. [#&#8203;1773](https://redirect.github.com/qunitjs/qunit/pull/1773)

### [`v2.23.0`](https://redirect.github.com/qunitjs/qunit/blob/HEAD/History.md#2230--2024-12-03)

[Compare Source](https://redirect.github.com/qunitjs/qunit/compare/2.22.0...2.23.0)

\==================

##### Added

-   Core: Add automatic labels in [`QUnit.test.each()`](https://qunitjs.com/api/QUnit/test.each/) to simple array values. [#&#8203;1733](https://redirect.github.com/qunitjs/qunit/issues/1733)

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.28.1`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4281)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.28.0...v4.28.1)

*2024-12-06*

##### Bug Fixes

-   Support running Rollup natively on LoongArch ([#&#8203;5749](https://redirect.github.com/rollup/rollup/issues/5749))
-   Add optional `debugId` to `SourceMap` types ([#&#8203;5751](https://redirect.github.com/rollup/rollup/issues/5751))

##### Pull Requests

-   [#&#8203;5749](https://redirect.github.com/rollup/rollup/pull/5749): feat: add support for LoongArch ([@&#8203;darkyzhou](https://redirect.github.com/darkyzhou))
-   [#&#8203;5751](https://redirect.github.com/rollup/rollup/pull/5751): feat: Add `debugId` to `SourceMap` types ([@&#8203;timfish](https://redirect.github.com/timfish), [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5752](https://redirect.github.com/rollup/rollup/pull/5752): chore(deps): update dependency mocha to v11 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5753](https://redirect.github.com/rollup/rollup/pull/5753): chore(deps): update dependency vite to v6 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5754](https://redirect.github.com/rollup/rollup/pull/5754): fix(deps): update swc monorepo (major) ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5755](https://redirect.github.com/rollup/rollup/pull/5755): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5756](https://redirect.github.com/rollup/rollup/pull/5756): Test if saving the Cargo cache can speed up FreeBSD ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS41OC4xIiwidXBkYXRlZEluVmVyIjoiMzkuNTguMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
26160,2023-05-28T22:31:54Z,2023-10-06T10:25:22Z,CodyJasonBennett,30,5,15,182,7,4,1,[],205.0,0,48991407.0,0,0,0,0,953737.115036,,0,15,1,False,"['PhilipZhu', 'danrossi', 'marcofugaro', 'CodyJasonBennett', 'github-actions[bot]', 'cabanier', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 649.2 kB (160.9 kB) | 649.5 kB (161 kB) | +351 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 442.5 kB (107.1 kB) | 442.8 kB (107.1 kB) | +351 B | This PR shouldn't have any performance implications since it doesn't touch any hot paths. Are you concerned with post-postprocessing end-to-end or something more implementation specific with this PR?

I tested the unreal bloom example which you can try at https://raw.githack.com/CodyJasonBennett/three.js/test/xr-bloom/examples/webgl_postprocessing_unreal_bloom.html. Not all effects work like the pixel pass, but I don't plan on addressing them here but separately since this PR contains fixes I'd like to not block.

In user-land, I'd recommend [pmndrs/postprocessing](https://github.com/pmndrs/postprocessing) since it has very performant effects, but I haven't been able to get a stable enough implementation over WebXR in three.js prior. > This PR shouldn't have any performance implications since it doesn't touch any hot paths. Are you concerned with post-postprocessing end-to-end or something more implementation specific with this PR?

I am worried about introducing flushes because they will impact performance and introduce visual glitches (ie ""snow""). If postprocessing could discard depth or even not create a resolve, that would be better.

> I tested the unreal bloom example which you can try at https://raw.githack.com/CodyJasonBennett/three.js/test/xr-bloom/examples/webgl_postprocessing_unreal_bloom.html. Not all effects work like the pixel pass, but I don't plan on addressing them here but separately since this PR contains fixes I'd like to not block.

Could you create an example based on that?

 If you're referring to internal disposal from resizing effects/render targets in EffectComposer, I can split that into a separate PR. I don't want that to block this PR behind further enhancements. > If you're referring to internal disposal from resizing effects/render targets in EffectComposer, I can split that into a separate PR. I don't want that to block this PR behind further enhancements.

No, just a simple example that uses these new code paths. That way I can make sure that nothing is broken in our PRs for multiview and our work for spacewarp and timewarp layers. I've added a minimal demo [webxr_vr_postprocessing](https://rawcdn.githack.com/mrdoob/three.js/2bca4ee57f2c676a209d85b6b399c85475664a54/examples/webxr_vr_postprocessing.html) that uses EffectComposer, UnrealBloom, and the new OutputPass. My PR description has a demo that performs a simple blit via workarounds if you want something smaller and without this PR. I tried to change parameters from the control panels in [https://raw.githack.com/CodyJasonBennett/three.js/test/xr-bloom/examples/webgl_postprocessing_unreal_bloom.html](https://raw.githack.com/CodyJasonBennett/three.js/test/xr-bloom/examples/webgl_postprocessing_unreal_bloom.html), and regular rendering from the browser window and XR rendering doesn't match. This is true for both the chrome emulator extension and Quest2
Regular broswer window:
![image](https://github.com/mrdoob/three.js/assets/13618538/24525839-2cca-4e01-ad13-ceb7507c3eff)
VR render:
![image](https://github.com/mrdoob/three.js/assets/13618538/7760a939-f3d1-4b19-913d-779f654f2b4d) really useful PR! would love to see it merged I have xr examples with postprocessing, a lens distortion effect with the xr fix. It may need some work there too.

with fix

https://danrossi.github.io/three-lens-distortion/example/postprocessing.html
https://danrossi.github.io/three-lens-distortion/example/postprocessing-video-xr.html

without
https://danrossi.github.io/three-lens-distortion/example/postprocessing-video.html

 @danrossi you've been commenting on every WebXR related project and issue that I have access to. Can you please take this offline or to a forum if you're not contributing to this feature? I'd be happy to help you there, but this is just stifling helpful resolve on your end. I might have something for postprocessing with these fixes and migrate the same changes to postprocessing. but not sure if the distortion is applied to both cameras or the whole viewport. It doesn't seem to be scaling properly yet. 

https://github.com/pmndrs/postprocessing/issues/452#issuecomment-1632665067 Okay, let's give this a try! This is not a good change as it destroys foveation and constantly rebinds the buffer. Performance will be bad which will frustrate developers.
Testing on Quest 2, these 4 triangles can barely be rendered. Looking with [ovrgpuprofiler](https://developer.oculus.com/documentation/unity/ts-ovrgpuprofiler/), i can see retargeting of the drawing buffer, flushing of the depth buffer and temporary textures (some of which are full resolution 64 bit). Multisampling also isn't working in the example.

Unless this can be addressed, please revert this for now.
Here is the output of a single frame from ovrgpuprofiler of webxr_vr_postprocessing :


> Surface 0    | 2880x1584 | color 32bit, depth 24bit, stencil 64bit, MSAA 1, Mode: 0 (Direct)    | 1   2880x1584 bins ( 1   rendered) |  0.00 ms | 1   stages : Render : 0.002ms
> Surface 1    | 2880x1584 | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   2880x1584 bins ( 1   rendered) |  0.07 ms | 2   stages : Render : 0.062ms Blit : 0.002ms
> Surface 2    | 1440x792  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   1440x792 bins ( 1   rendered) |  0.42 ms | 2   stages : Render : 0.416ms Blit : 0.001ms
> Surface 3    | 1440x792  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   1440x792 bins ( 1   rendered) |  0.34 ms | 2   stages : Render : 0.336ms Blit : 0.002ms
> Surface 4    | 1440x792  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   1440x792 bins ( 1   rendered) |  1.23 ms | 4   stages : Render : 0.549ms Blit : 0.002ms Preempt : 0.673ms
> Surface 5    | 720 x396  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   720x396 bins ( 1   rendered) |  1.09 ms | 2   stages : Render : 1.079ms Blit : 0.003ms
> Surface 6    | 720 x396  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   720x396 bins ( 1   rendered) |  0.15 ms | 2   stages : Render : 0.149ms Blit : 0.002ms
> Surface 7    | 360 x198  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   360x198 bins ( 1   rendered) |  0.38 ms | 2   stages : Render : 0.378ms Blit : 0.002ms
> Surface 8    | 360 x198  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   360x198 bins ( 1   rendered) |  0.08 ms | 2   stages : Render : 0.079ms Blit : 0.002ms
> Surface 9    | 180 x99   | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 2 (SwBinning) | 1   192x112 bins ( 2   rendered) |  0.15 ms | 4   stages : Render : 0.132ms StoreColor : 0.004ms Blit : 0.002ms StoreDepthStencil : 0.003ms
> Surface 10   | 180 x99   | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 2 (SwBinning) | 1   192x112 bins ( 2   rendered) |  0.05 ms | 4   stages : Render : 0.033ms StoreColor : 0.004ms Blit : 0.002ms StoreDepthStencil : 0.003ms
> Surface 11   | 90  x50   | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 2 (SwBinning) | 1   96 x64  bins ( 2   rendered) |  0.06 ms | 4   stages : Render : 0.05ms StoreColor : 0.002ms Blit : 0.002ms StoreDepthStencil : 0.002ms
> Surface 12   | 90  x50   | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 2 (SwBinning) | 1   96 x64  bins ( 2   rendered) |  0.03 ms | 4   stages : Render : 0.017ms StoreColor : 0.003ms Blit : 0.002ms StoreDepthStencil : 0.003ms
> Surface 13   | 1440x792  | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   1440x792 bins ( 1   rendered) |  0.42 ms | 2   stages : Render : 0.411ms Blit : 0.002ms
> Surface 14   | 2880x1584 | color 64bit, depth 24bit, stencil 0 bit, MSAA 1, Mode: 0 (Direct)    | 1   2880x1584 bins ( 1   rendered) |  1.82 ms | 3   stages : Render : 1.112ms Preempt : 0.708ms
> Surface 15   | 2880x1584 | color 32bit, depth 24bit, stencil 64bit, MSAA 1, Mode: 2 (SwBinning) | 36  480x288 bins ( 30  rendered) |  2.12 ms | 88  stages : Render : 0.998ms StoreColor : 0.472ms Blit : 0.004ms StoreDepthStencil : 0.482ms
> Surface 16   | 2880x1584 | color 32bit, depth 24bit, stencil 64bit, MSAA 1, Mode: 0 (Direct)    | 1   2880x1584 bins ( 1   rendered) |  0.00 ms | 1   stages : Render : 0.002ms

This is how it looks when done properly (web_vr_dragging):
> Surface 0    | 2880x1584 | color 32bit, depth 24bit, stencil 64bit, MSAA 4, Mode: 1 (HwBinning) | 135 192x176 bins ( 96  rendered) |  5.14 ms | 195 stages : Binning : 0.637ms Render : 1.758ms StoreColor : 1.323ms Blit : 0.064ms Preempt : 0.78ms
 I don't understand why this should be addressed anywhere else than Quest Browser. Is `gl.bindFramebuffer` expected to be destructive? The number of calls doesn't change with this PR, only the target. Maybe this can be reverted and instead done by exposing what's currently `WebXRManager._getRenderTarget()`? It could be instead bound by `EffectComposer` or `OutputPass` when rendering to screen if that gives any behavioral benefit. I now have #26902 which does so. `webxr_vr_postprocessing` is a good test. > I don't understand why this should be addressed anywhere else than Quest Browser. 

This is unfortunately nothing that the browser can fix. It's a side effect of how mobile/tile based GPUs are designed.

> Is `gl.bindFramebuffer` expected to be destructive? 

Yes :-\

> The number of calls doesn't change with this PR, only the target. Maybe this can be reverted and instead done by exposing what's currently `WebXRManager._getRenderTarget()`? It could be instead bound by `EffectComposer` or `OutputPass` when rendering to screen if that gives any behavioral benefit.

There are definitely ways to solve post-processing with careful coding and using layers (especially on Quest 3). They require deeper changes to three though. I just noticed there's a depth/stencil attachment configured in `WebXRManager`. That would explain your comments. Thanks. Should we still merge #26902 or revert for now? #26902 reverts the changes to `WebGLRenderer` with an alternative solution for postprocessing. I believe that addresses this issue, but would appreciate device testing to confirm. I'm also happy to pick in any lost changes to examples and such if you'd prefer to simply revert. > #26902 reverts the changes to `WebGLRenderer` with an alternative solution for postprocessing. I believe that addresses this issue, but would appreciate device testing to confirm.

I applied your change locally. It didn't seem to make a difference. I'm at a loss of what's actually happening then. I've implemented many post-processing systems that worked well as low as Pixel 3a, notably via mipmaps in a similar fashion such as `MipmapBlur` out of [pmndrs/postprocessing](https://github.com/pmndrs/postprocessing). This has included bloom, SSAO, and full volumetric effects. @RenaudRohlinger may be inclined to demo such examples, but I have no direction as for how to continue. Thanks for testing! Okay then let's revert for now. > I'm at a loss of what's actually happening then. I've implemented many post-processing systems that worked well as low as Pixel 3a, notably via mipmaps in a similar fashion such as `MipmapBlur` out of [pmndrs/postprocessing](https://github.com/pmndrs/postprocessing). This has included bloom, SSAO, and full volumetric effects. @RenaudRohlinger may be inclined to demo such examples, but I have no direction as for how to continue.

I'm sorry to be the bearer of bad news. :-\
Stereo foveated headsets require more careful coding than mono screens that are not as sensitive to performance.
It IS definitely possible by re-arranging how things are rendered so you only bind once to the main framebuffer, by discarding depth when needed and by doing postprocessing that doesn't require a resolve. I thought #26902 would help in that regard, but I'm happy to help if there are other means you find more appropriate. I'd like to revisit this. I don't think that pinning performance issues with tiled GPUs and multiple passes is fair to this PR nor the issues it addresses outside of postprocessing and incorrect render state. That's not inherent to this PR, but surrounding usage and implementation. I've also demonstrated how performant effects for mobile exist in the ecosystem and not strictly three.js examples which both rely on changes to core. This PR doesn't affect existing apps, but ensures a valid drawing target is bound which has regressed since the introduction of layers. Performance characteristics do not change this way. This should be considered a fix, and I'm happy to remove changes to `EffectComposer` if that's the only way for this to be considered as such, but I believe that would be largely an oversight. > This PR doesn't affect existing apps, but ensures a valid drawing target is bound which has regressed since the introduction of layers.

I don't understand why the introduction of layers affects this. If anything, it makes it easier to work around the rebinding. Since almost all of VR uses tiled GPUs, I don't think we should introduce postprocessing unless it can be made performant on mobile platforms.
 > I don't understand why the introduction of layers affects this. If anything, it makes it easier to work around the rebinding.

I apologize if I'm completely wrong here. I'm going off of memory from https://twitter.com/Cody_J_Bennett/status/1482585611781480448 which I recall working in the old emulator but not on-device. Same observation prompted this PR when I noticed rendering was to the canvas instead of a layer.

> Since almost all of VR uses tiled GPUs, I don't think we should introduce postprocessing unless it can be made performant on mobile platforms.

I'm confused as to why we don't give people the agency to even prove otherwise, let alone allow broken rendering state as-is for other cases. I've already demonstrated numerous times this can be done with [pmndrs/postprocessing](https://github.com/pmndrs/postprocessing) and other linked related work. I also stress that this PR isn't strictly an enhancement to enable postprocessing, but to ensure that `renderer.setRenderTarget` (at any frequency) does not break further rendering. I've tried to reduce the changes here to entertain this case only, but I believe that to be a disservice to the ecosystem.
 sorry that I sounded a bit blunt. 
I too want to have post-processing support in WebXR. However, the hard part is how to make it performant and I hope that we can make changes to three to make it so.
We likely have to be smart about when we render and introduce multiview. We can also wait for WebGPU which will give us more control over the render pipeline so we don't have to be as careful. I have to repeat my last comment if you insist on performance, but I will not let this PR be a casualty of multiview. If the order of operations matters for its implementation, then it alone should wait for WebGPU. You don't *need* multiview; it would just make implementing usable postprocessing easier...This looks like a good change but it would be nice to see how it performs on mobile hardware.
Can you also add a vr example that invokes these new codepaths? (or is there one already?) The changes to the composer and renderer look good to me! The only thing where I struggle a bit are the changes to the XR manager.","This looks like a good change but it would be nice to see how it performs on mobile hardware.
Can you also add a vr example that invokes these new codepaths? (or is there one already?) The changes to the composer and renderer look good to me! The only thing where I struggle a bit are the changes to the XR manager.","Fixed #21188, #18846
Related issue: #8146

**Description**

Binds `renderer.setRenderTarget(null)` to `renderer.setRenderTarget(_layerRenderTarget)` in WebXR. This fixes scenes which render offscreen and composite like post-processing, GPGPU (e.g. LUTs), and volumes. This can be worked around by calling `renderer.getRenderTarget` at the start of each frame and binding to that instead which is effectively what this PR does.

I've also updated fixes from #18846 for the new layers API so `renderer.getDrawingBufferSize` and `renderer.getSize` will report correctly in WebXR, resolving #21188 (cc @gkjohnson). Note that `renderer.getPixelRatio` will always report 1 regardless of native scaling factor (as implemented).

This demo works around the above issues, rendering a grid to a render target and blitting it: https://codesandbox.io/s/mdhg6s

<details>

<summary>Before, that would be:</summary>

```js
const handleResize = () => {
  renderer.setSize(window.innerWidth, window.innerHeight)
  renderTarget.setSize(window.innerWidth, window.innerHeight)
  camera.aspect = window.innerWidth / window.innerHeight
  camera.updateProjectionMatrix()
}
handleResize()
window.addEventListener('resize', handleResize)
renderer.xr.addEventListener('sessionend', handleResize)

// https://github.com/mrdoob/three.js/issues/21188
const resizeWithBaseLayer = () => {
  const layer = renderer.xr.getBaseLayer()
  const width = layer.textureWidth ?? layer.framebufferWidth
  const height = layer.textureHeight ?? layer.framebufferHeight
  renderTarget.setSize(width, height)
}
renderer.xr.addEventListener('sessionstart', resizeWithBaseLayer)

renderer.setAnimationLoop(() => {
  controls.update()

  // In the DOM, gl.bindFramebuffer(gl.FRAMEBUFFER, null) binds
  // to the canvas, but in WebXR we render straight to a layer.
  //
  // Three.js creates an internal render target, so calling
  // renderer.setRenderTarget(null) will not render to screen
  // in WebXR.
  //
  // Layers will also have a different size, so mirror the
  // render target's dimensions which correspond to the layer.
  const _surface = renderer.getRenderTarget()

  renderer.setRenderTarget(renderTarget)
  renderer.render(scene, camera)

  // Disable XR projection for fullscreen effects
  const xrEnabled = renderer.xr.enabled
  renderer.xr.enabled = false
  renderer.setRenderTarget(_surface)
  renderer.render(effect, camera)
  renderer.xr.enabled = xrEnabled
})
```

</details>

<details>

<summary>Now, that would be:</summary>

```js
const size = new THREE.Vector2()

const handleResize = () => {
  renderer.setSize(window.innerWidth, window.innerHeight)
  renderer.getDrawingBufferSize(size)
  renderTarget.setSize(size.width, size.height)
  camera.aspect = window.innerWidth / window.innerHeight
  camera.updateProjectionMatrix()
}
handleResize()
window.addEventListener('resize', handleResize)
renderer.xr.addEventListener('sessionstart', handleResize)
renderer.xr.addEventListener('sessionend', handleResize)

renderer.setAnimationLoop(() => {
  controls.update()

  renderer.setRenderTarget(renderTarget)
  renderer.render(scene, camera)

  // Disable XR projection for fullscreen effects
  const xrEnabled = renderer.xr.enabled
  renderer.xr.enabled = false
  renderer.setRenderTarget(null)
  renderer.render(effect, camera)
  renderer.xr.enabled = xrEnabled
})
```

</details>

<hr />

Regarding examples and EffectComposer, I've since mirrored the above demo -- resizing with the base layer and disabling XR projection for fullscreen effects via `FullScreenQuad`.

I have a branch based on this one which enables WebXR for all of the postprocessing examples ([diff](https://github.com/CodyJasonBennett/three.js/compare/fix/offscreen-webxr...CodyJasonBennett:three.js:test/offscreen-xr)) which you can try at https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/?q=postprocessing#webgl_postprocessing. Notably, (S)SAO/Background don't work because of `CustomBlending` and unexpected clearing with `WebGLBackground` from the XR environment blend mode (fixed since https://github.com/mrdoob/three.js/pull/26428).

<details>

<summary>Show examples:</summary><br />

Below are taken with an emulator, but this PR ensures it also works on-device.

| Example | Preview |
|--------|--------|
| [webgl_postprocessing](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing) | ![webgl_postprocessing](https://github.com/mrdoob/three.js/assets/23324155/0fd37936-574d-4712-8f1e-46edde2a6940)|
| [webgl_postprocessing_3dlut](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_3dlut) | ![webgl_postprocessing_3dlut](https://github.com/mrdoob/three.js/assets/23324155/6f9ffe7a-15ee-4c03-97c2-284a040e60b2)|
| [webgl_postprocessing_afterimage](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_afterimage) | ![webgl_postprocessing_afterimage](https://github.com/mrdoob/three.js/assets/23324155/83468f3d-d2e4-4b0c-a9d9-c34b03bb7188)|
| [webgl_postprocessing_dof](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_dof) | ![webgl_postprocessing_dof](https://github.com/mrdoob/three.js/assets/23324155/b43ff848-0259-4696-92dd-9bb31411fd31) |
| [webgl_postprocessing_fxaa](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_fxaa) | ![webgl_postprocessing_fxaa](https://github.com/mrdoob/three.js/assets/23324155/82fb3682-178d-4d69-a43b-a3286efec37f) |
| [webgl_postprocessing_glitch](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_glitch) | ![webgl_postprocessing_glitch](https://github.com/mrdoob/three.js/assets/23324155/756150e5-568c-4a6b-bba9-a464a9109dc8) |
| [webgl_postprocessing_rgb_halftone](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_rgb_halftone) | ![webgl_postprocessing_rgb_halftone](https://github.com/mrdoob/three.js/assets/23324155/36e1ae80-cbee-4512-ba10-3af3d8829993) |
| [webgl_postprocessing_sobel](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_sobel) | ![webgl_postprocessing_sobel](https://github.com/mrdoob/three.js/assets/23324155/4138c6c2-ba6c-40a9-bb94-5f106f5fb82f) |
| [webgl_postprocessing_unreal_bloom](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_unreal_bloom) | ![webgl_postprocessing_unreal_bloom](https://github.com/mrdoob/three.js/assets/23324155/68ce4904-f4be-4502-b226-e408581d006e) |
| [webgl_postprocessing_unreal_bloom_selective](https://rawcdn.githack.com/CodyJasonBennett/three.js/c13f9091360c8eda4c198f164d2c63eb1b3986a0/examples/#webgl_postprocessing_unreal_bloom_selective) | ![webgl_postprocessing_unreal_bloom_selective](https://github.com/mrdoob/three.js/assets/23324155/ce7257fc-2a69-48ff-89e7-d6238fa5fe3d) |

</details>

<hr />

WRT previous concerns for performance, I haven't opted for adding any external examples for [pmndrs/postprocessing](https://github.com/pmndrs/postprocessing) since https://github.com/mrdoob/three.js/pull/18846#issuecomment-1421894253, but I have tested against this PR's builds with the library against a few R3F examples that use it (e.g. https://codesandbox.io/s/7c35ym). I'd recommend this library since it has very performant effects that I've been able to run on low end mobile hardware, and they're modular enough to mix with three's if you really want to. Notable user-land integrations include [0beqz/realism-effects](https://github.com/0beqz/realism-effects) and [N8python/n8ao](https://github.com/N8python/n8ao).","Should this be kept private? I don't see how this is useful in user-land with these fixes, and is otherwise an implementation detail. ## Identical operands

Operands [window.innerHeight](1) and [window.innerHeight](2) are identical.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/1798) Defaulting to keeping this private. I think you have to use `getSize()` here. Otherwise the renderer gets a too large size when later using `setDrawingBufferSize()`. 

The problem is that the vector returned from `getDrawingBufferSize()` is the effective resolution meaning dimension * pixel ratio. When restoring the renderer's size via `setDrawingBufferSize()`, you have to apply width and height without the pixel ratio honored (because the pixel ratio is applied as the third parameter). If the drawing buffer methods are too confusing from your point of view, consider to use a combination of `setSize()`/`setPixelRatio()` and `getSize()`/`getPixelRatio()`. Maybe the code gets easier to read with this."
30126,2024-12-15T16:37:45Z,2024-12-15T17:05:35Z,renovate[bot],0,0,1,6,1,0,0,[],,0,1718.0,0,0,0,0,975875.421576,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `aa57810` -> `df409f7` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS41OC4xIiwidXBkYXRlZEluVmVyIjoiMzkuNTguMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
30117,2024-12-13T15:22:56Z,2024-12-13T17:34:34Z,Mugen87,1,0,4,748,13,0,0,[],177.0,0,156720.0,0,0,0,0,998163.97853,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.18 <br> **134.92** | 486.18 <br> **134.91** | +1 B <br> **-1 B** |
| WebGPU Nodes | 485.64 <br> **134.82** | 485.64 <br> **134.82** | +1 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.34** | 555.32 <br> **150.34** | +1 B <br> **-1 B** |
| WebGPU Nodes | 511.23 <br> **140.1** | 511.23 <br> **140.1** | +1 B <br> **-1 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

More documentation.
",
30015,2024-12-02T14:44:20Z,2024-12-02T17:06:24Z,s-rigaud,0,0,1,22,9,1,1,[],,0,1107238.0,0,0,0,0,1000362.13344,,0,1,1,False,[],,,"**Description**

Fix some typos",
29999,2024-11-30T10:29:22Z,2024-11-30T11:50:49Z,NeelDigonto,0,0,1,4,1,1,1,[],,0,1295091.0,0,0,0,0,1000607.317971,,0,1,1,False,[],,,"fix: change ""implement"" to it's past participle form ""implemented"".",
30116,2024-12-13T11:51:27Z,2024-12-13T18:56:43Z,Spiri0,0,0,13,5,2,0,0,[],,0,91071.0,0,0,0,0,1076503.98072,,0,13,1,False,[],,,"I only added a background because sunag fixed the reflection issue. Previously, when you used ```fromScene```, the environment was incorrectly reflected, which was not noticeable because the beckground was set to null.
This couldn't be noticed with the spheres because the upside down reflection looked the same because of their color.

I actually wanted to look at the position topic as a parameter #30071 , but I don't want to make any promises that I can't keep. I am largely a user and am very busy with my projects

",
30123,2024-12-14T14:34:44Z,2024-12-14T14:54:48Z,Mugen87,1,3,3,1140,13,1,0,[],184.0,0,1205.0,0,0,0,0,1070173.048761,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.18 <br> **134.91** | 486.15 <br> **134.88** | -32 B <br> **-32 B** |
| WebGPU Nodes | 485.64 <br> **134.82** | 485.61 <br> **134.79** | -32 B <br> **-31 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.34** | 555.32 <br> **150.32** | +2 B <br> **-21 B** |
| WebGPU Nodes | 511.23 <br> **140.1** | 511.24 <br> **140.09** | +2 B <br> **-18 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adding more docs.

@cmhhelgeson I was not able to properly document some GPGPU related modules.  Maybe you can have a look at the TODOs in `src/nodes/gpgpu` folder?
",Removing this bit since it's the same like in the upper class `Node`. Removing this method since it is the same like in the upper class `Node`. Cleaning up some deprecation warnings.
30121,2024-12-14T10:04:20Z,2024-12-14T10:05:08Z,Mugen87,1,0,1,18,6,0,0,[],188.0,0,189.0,0,0,0,0,1087413.166586,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.18 <br> **134.91** | 486.18 <br> **134.91** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.64 <br> **134.82** | 485.64 <br> **134.82** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.34** | 555.32 <br> **150.34** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.23 <br> **140.1** | 511.23 <br> **140.1** | +0 B <br> **+0 B** |",,"Fixed #30120.

**Description**

Removes the `fog` property from the `MeshNormalMaterial` page.
",
30112,2024-12-12T21:40:33Z,2024-12-13T04:58:59Z,toji,1,0,1,10,2,0,0,[],175.0,0,74070.0,0,0,0,0,1144560.858188,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.24 <br> **79.02** | +35 B <br> **+15 B** |
| WebGPU | 486.17 <br> **134.91** | 486.17 <br> **134.91** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.63 <br> **134.81** | 485.63 <br> **134.81** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.13 <br> **112.08** | +35 B <br> **+15 B** |
| WebGPU | 555.31 <br> **150.34** | 555.31 <br> **150.34** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.22 <br> **140.1** | 511.22 <br> **140.1** | +0 B <br> **+0 B** |",,"**Description**

Currently Three.js tests for WebXR layers support by checking to see if the `layers` attribute is present in the `session.renderState` object. This isn't ideal, however.

It's possible that the `layers` attribute may be present but not usable if the session did not request the `'layers'` feature, if they did request it but the browser denied it, or if the browser supports `layers` but the backend being used does not.

A more reliable way to check for `layers` support is to look at the `session.enabledFeatures` list and check to see if it contains the `'layers'` string. If so the the session is confirmed to have layers support and the rest of the code can be used as-is. This PR makes that change to both the layers sample and the WebXRManager.
",
30115,2024-12-13T10:48:33Z,2024-12-13T11:00:19Z,Mugen87,1,0,2,1476,13,0,0,[],173.0,0,709.0,0,0,0,0,1170642.058695,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.24 <br> **79.02** | 339.24 <br> **79.02** | +0 B <br> **+0 B** |
| WebGPU | 486.17 <br> **134.91** | 486.18 <br> **134.92** | +10 B <br> **+1 B** |
| WebGPU Nodes | 485.63 <br> **134.81** | 485.64 <br> **134.82** | +10 B <br> **+3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.13 <br> **112.08** | 465.13 <br> **112.08** | +0 B <br> **+0 B** |
| WebGPU | 555.31 <br> **150.34** | 555.32 <br> **150.34** | +10 B <br> **-1 B** |
| WebGPU Nodes | 511.22 <br> **140.1** | 511.23 <br> **140.1** | +10 B <br> **+2 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

More docs.
",
29767,2024-10-30T02:41:54Z,2024-10-31T01:00:44Z,RenaudRohlinger,2,8,5,67,4,2,1,[],179.0,0,3845988.0,0,0,0,0,1156162.251771,,0,5,1,False,"['github-actions[bot]', 'Makio64']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.67 <br> **171.43** | 691.67 <br> **171.43** | +0 B <br> **+0 B** |
| WebGPU | 820.87 <br> **221.46** | 821.69 <br> **221.79** | +816 B <br> **+325 B** |
| WebGPU Nodes | 820.38 <br> **221.33** | 821.2 <br> **221.66** | +816 B <br> **+328 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.82 <br> **112.17** | 463.82 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 541.7 <br> **146.38** | 542.52 <br> **146.73** | +816 B <br> **+343 B** |
| WebGPU Nodes | 497.7 <br> **136.21** | 498.52 <br> **136.55** | +816 B <br> **+343 B** | @RenaudRohlinger thanks for this PR ! 

Can you confirm this part `renderer.onDeviceLost = ( _info ) => await renderer.init()` is only to call when `_info.api =='WebGPU'` 

Also I guess it also needs to restart all the engine ( add back all items, restore all state etc.. ) right or can I use the previous texture / scene / material etc.. ?

Final question do you have an easy way to test the context lost ? :)

Thanks again ! ",,"**Description**
Handle device/context Lost Event on both backends of the WebGPURenderer.

By default a formatted error will appear like so:
![Screenshot 2024-10-30 at 11 37 31](https://github.com/user-attachments/assets/7da5c772-67fb-4271-99a2-6b380dda78fa)
And just like in the `WebGLRenderer`, both loop will throw an early return.


Also added a way to easily handle the error for the developer:
```js
renderer.onDeviceLost = ( info ) => console.log( 'Device Lost', info );
```
![Screenshot 2024-10-30 at 11 38 08](https://github.com/user-attachments/assets/76fd9ddc-6247-4586-bafa-194250559a36)

Even better, unlike WebGL, we could even gracefully restart the app/device in WebGPU:
```js
renderer.onDeviceLost = ( _info ) => await renderer.init()
```

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
","It would be good to remove this event listener when `renderer.dispose()` is called.

Do you mind implementing a `dispose()` method for the WebGL backend that is called from `Renderer.dispose()`? It seems this property is never used. Should it be `isDeviceLost`?

How about using `false` as the default value? We don't have a `dispose()` method in the backends.
I could add an abstract one in the `Backend` class and on both backends, also I'm not sure if adding an `onContextLost` event outside the `WebGLBackend` Class, just like we do in the `WebGLRenderer`, will not break the tree-shaking?

For the moment I just remove the listener directly into the onContextLost (if that's possible?):
https://github.com/mrdoob/three.js/pull/29767/commits/e97021c548642b6850bf2f11c6ccc6c182430155#diff-2dc5b01c4242a7be2dc61d5019c5e6e60b231903addc2b221d495d480bffca48R43-R53 Ah, good catch. I pushed a fix. Not sure this is ideal. Normally you want to keep the listener added since after a context restore the context might be lost again. The event listener should only be removed when the renderer isn't used anymore (so when calling `dispose()`.

> We don't have a dispose() method in the backends. I could add an abstract one in the Backend class and on both backends,

That sounds good to me. I'm not aware how the event listeners should break tree shaking if we use `removeEventListener()` in `dispose()`.  This throws a runtime error right now. Ah yes I forgot to cleanup my dispose changes. It should be fix with the latest change. I tried using `about:gpucrash` on Chrome on both backends. It should be now good!"
30106,2024-12-11T15:42:15Z,2024-12-12T22:52:34Z,s-rigaud,3,0,1,53,5,0,0,[],12630.0,0,112223.0,0,0,0,0,1214307.754626,,0,1,1,False,"['donmccurdy', 'Mugen87', 's-rigaud']","I'm fine with the changes, but, are we doing anything with JSDoc in these folders? Would we prefer to limit ESLint to the folders where JSDoc is run? As `eqeqeq` eslint rule has been deactivated from the whole project because it was causing too many warnings in the `addons` folder while running the lint command, I think it might be great to keep the `valid-jsdoc` rule. The only issue with this rule is that currently some documentation in addons are treated as invalid JSdoc and so 30 warnings have been added in the linting command output. With this PR I just tried to remove all these warnings polluting the output, no addition to previous doc is wanted simply reducing the current doc treated by default as JSdoc due to the syntax 🤔  Okay, let's merge but let's also focus the JSDoc efforts on `src/nodes` for now. ",,"**Description**

Add missing parameter types to decrease eslint warnings. From `33` to `4`.
",
30098,2024-12-11T06:48:34Z,2024-12-12T22:50:07Z,ChenKuan1110,0,1,3,8,1,1,0,[],,0,144094.0,0,0,0,0,1214458.140138,,0,3,1,False,[],,,"Comparing the relevant example file, I found that there is an error here It is not clear how the document was generated, I found that other related translation documents also have this error


**Description**

I find this code is wrong, It's confusing，Especially a new beginner like me

<!-- Remove the line below if is not relevant -->


","> bloomPass.copyUniforms.strength.value = someValue;

It should be `bloomPass.combineUniforms.strength.value = someValue;`."
30092,2024-12-10T15:57:07Z,2024-12-12T19:17:34Z,sunag,1,0,5,8,6,0,0,[],180.0,0,184830.0,0,0,0,0,1227209.208591,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.18 <br> **134.92** | 486.17 <br> **134.91** | -9 B <br> **-5 B** |
| WebGPU Nodes | 485.64 <br> **134.82** | 485.63 <br> **134.81** | -9 B <br> **-6 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.32 <br> **150.35** | 555.31 <br> **150.34** | -9 B <br> **-7 B** |
| WebGPU Nodes | 511.23 <br> **140.11** | 511.22 <br> **140.1** | -9 B <br> **-8 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30080

**Description**

- [x] Add `output` support",
30108,2024-12-12T06:53:12Z,2024-12-12T17:57:23Z,sunag,2,0,7,148,13,0,0,[],167.0,0,39854.0,0,0,0,0,1232021.58197,,0,7,1,False,"['github-actions[bot]', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.3 <br> **134.97** | 486.18 <br> **134.92** | -123 B <br> **-54 B** |
| WebGPU Nodes | 485.76 <br> **134.87** | 485.64 <br> **134.82** | -123 B <br> **-52 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.32 <br> **150.35** | -91 B <br> **-46 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.23 <br> **140.11** | -30 B <br> **+5 B** | Maybe we can follow use WebGL's `lowp`, `mediump` and `highp`?

```
lowpModelViewMatrix
mediumpModelViewMatrix
highpModelViewMatrix
```",,"Related issue: https://github.com/mrdoob/three.js/pull/29555#issue-2567645846, https://github.com/mrdoob/three.js/issues/29659#issuecomment-2464958545

**Description**

The PR fixes the `SpriteMaterial` fog and brings some improvements related to MVP and Vertex.

- [x] Fix `fog` in `SpriteMaterial` and `SpriteNodeMaterial`
- [x] `NodeMaterial:` Add `.setupPositionView()`
- [x] `NodeMaterial:` Add `.setupVertex()`
- [x] `modelViewProjection` is a const now instead of a function like `modelViewProjection()`
- [x] Add `mediumpModelViewMatrix`
- [x] Rename `highPrecisionModelNormalViewMatrix` ->  `highpModelNormalViewMatrix`
- [x] Rename `highPrecisionModelViewMatrix ` ->  `highpModelViewMatrix`",
30110,2024-12-12T13:42:51Z,2024-12-12T13:53:29Z,s-rigaud,1,0,1,36,8,1,1,[],181.0,0,638.0,0,0,0,0,1246659.084596,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.3 <br> **134.97** | 486.3 <br> **134.97** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.76 <br> **134.87** | 485.76 <br> **134.87** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.41 <br> **150.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.26 <br> **140.1** | +0 B <br> **+0 B** |",,"**Description**

Improve some JSdoc types in the `src/nodes` folder.",
30016,2024-12-02T17:49:48Z,2024-12-04T06:07:50Z,Samsy,3,0,3,21,1,1,1,[],130051.0,0,860592.0,0,0,0,0,1235888.289795,,0,3,1,False,"['Samsy', 'RenaudRohlinger']","This won't work, `getViewport` returns a `vec4` and the resolution is on `zw`. All good! I will add an example too. Thanks! @RenaudRohlinger 
Actually, discovered another problem, you cannot raycast lines that are not visible in the first hand, like a ghost geometry, since the resolution is only updated on the onBefore etc, which then need to set the resolution manually, I'm not sure if there is a general solution for this, or going by hand is the way we want it ",,"Fixed https://github.com/mrdoob/three.js/issues/29986


**Description**

Fixed raycasting for the LineSegments2 for WebGPU

",
30109,2024-12-12T10:40:10Z,2024-12-12T10:53:27Z,Mugen87,1,0,3,1016,56,0,0,[],172.0,0,797.0,0,0,0,0,1257462.362577,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.3 <br> **134.97** | 486.3 <br> **134.97** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.76 <br> **134.87** | 485.76 <br> **134.87** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.41 <br> **150.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.26 <br> **140.1** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adds more documentation.
",
30107,2024-12-11T21:04:03Z,2024-12-11T21:20:16Z,s-rigaud,1,1,2,4,1,1,1,[],189.0,0,1075.0,0,0,0,0,1306152.061697,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.3 <br> **134.97** | 486.3 <br> **134.97** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.76 <br> **134.87** | 485.76 <br> **134.87** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.41 <br> **150.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.26 <br> **140.1** | +0 B <br> **+0 B** |",,"**Description**

Fix `Line2NodeMaterial` code using undeclared variables.",Please do not modify unrelated files in this PR.
30103,2024-12-11T14:30:01Z,2024-12-11T19:44:37Z,s-rigaud,1,6,8,106,28,2,1,[],183.0,0,19006.0,0,0,0,0,1311863.30323,,0,8,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.3 <br> **134.97** | 486.3 <br> **134.97** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.77 <br> **134.86** | 485.77 <br> **134.86** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.41 <br> **150.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.26 <br> **140.1** | +0 B <br> **+0 B** |",,"**Description**

Fix some typos and improve typings for some attributes.","The ctor needs an update since the value behind constants like `THREE.LinearToneMapping` are numbers. ```js
@type {Node?}
``` Why not using `Object<String, Texture>`?. Then it might be the constructor parameter type that is wrong ? 

```@param {String} toneMapping - The tone mapping type.``` I'm used to Record as I am mainly working with TypeScript. Object is totally fine for JSdoc though 👍  Yes, the ctor needs an update."
30105,2024-12-11T15:17:26Z,2024-12-11T17:45:23Z,sunag,1,1,4,23,3,1,0,[],177.0,0,8880.0,0,0,0,0,1319145.502686,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.91 <br> **134.87** | 486.25 <br> **134.97** | +340 B <br> **+98 B** |
| WebGPU Nodes | 485.38 <br> **134.77** | 485.72 <br> **134.86** | +340 B <br> **+93 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.02 <br> **150.3** | 555.36 <br> **150.39** | +340 B <br> **+84 B** |
| WebGPU Nodes | 510.87 <br> **140.01** | 511.21 <br> **140.1** | +340 B <br> **+86 B** |",,"**Description**

`positionWorld` was performant once if used on `positionNode` and `colorNode` at the same time. However `positionNode` should make changes to `positionWorld` if used in fragment-stage, this PR re-assigns `positionWorld` if used in both.","## Useless assignment to property

This write to property 'reassignPosition' is useless, since [another property write](1) always overrides it.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3343)"
30082,2024-12-10T00:31:39Z,2024-12-11T17:39:25Z,sunag,1,1,9,4,2,1,0,[],189.0,0,148069.0,0,0,0,0,1319504.002392,,0,9,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.91 <br> **134.87** | 485.96 <br> **134.87** | +49 B <br> **+0 B** |
| WebGPU Nodes | 485.38 <br> **134.77** | 485.43 <br> **134.77** | +49 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.02 <br> **150.3** | 555.07 <br> **150.31** | +45 B <br> **+4 B** |
| WebGPU Nodes | 510.87 <br> **140.01** | 510.92 <br> **140.02** | +45 B <br> **+4 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30070

**Description**

- [x] [Add 'texture_depth_multisampled_2d' for wgslFn](https://github.com/mrdoob/three.js/commit/ad99022df0656b1f6fde21677efce5bf6b1544df)
- [x] [Add options for depthPass()](https://github.com/mrdoob/three.js/commit/ae193ff0f511c7c183151c8854a44dbe7e0d4ae5)","## Unused variable, import, function or class

Unused import nodeObject.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3341)"
30078,2024-12-09T18:56:49Z,2024-12-09T21:32:46Z,s-rigaud,4,0,1,13,5,0,0,[],419.0,0,157688.0,0,0,0,0,1329975.222606,,0,1,1,False,"['github-actions[bot]', 's-rigaud', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.2 <br> **79.01** | 339.21 <br> **79.01** | +2 B <br> **+1 B** |
| WebGPU | 485.98 <br> **134.92** | 485.98 <br> **134.91** | +4 B <br> **-3 B** |
| WebGPU Nodes | 485.44 <br> **134.82** | 485.45 <br> **134.82** | +4 B <br> **-2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +2 B <br> **+0 B** |
| WebGPU | 555.38 <br> **150.4** | 555.38 <br> **150.4** | +4 B <br> **-4 B** |
| WebGPU Nodes | 511.23 <br> **140.1** | 511.23 <br> **140.09** | +3 B <br> **-2 B** | I've reverted the rule via de859295a214bac0ecb2da1bdccf4383c5104716 since it is too strict for the addons folder, see discussion in #30089. What do you think about keeping the rule but not applying it in `addons` for now ? This way the core source code can stay a bit safer and eslint does not complain for `addons`. The following eslint config does the trick:

```json
  ""overrides"": [
      {
          ""files"": [""examples/jsm/**/*.js""],
          ""rules"": {
              ""eqeqeq"": ""off""
          }
      }
  ]
``` IMO, we should not start to distinct rules per directories that makes everything unnecessarily complicated. Let's not over-engineer the ESLint usage and keeps things simple.",,"**Description**

Add eslint rule to avoid relying on  `==` or `!=` that can lead to unexpected behavior. Most of the code is already using triple `===` or `!==`.

If this PR get approved I will create another one for `==` usage in addons and examples. ",
30076,2024-12-09T14:45:55Z,2024-12-09T17:58:52Z,s-rigaud,1,9,2,151,25,2,0,[],180.0,0,171508.0,0,0,0,0,1331210.70198,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.2 <br> **79.01** | 339.2 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.98 <br> **134.92** | 485.98 <br> **134.92** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.44 <br> **134.82** | 485.44 <br> **134.82** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.38 <br> **150.4** | 555.38 <br> **150.4** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.23 <br> **140.1** | 511.23 <br> **140.1** | +0 B <br> **+0 B** |",,"**Description**

Ensure that functions using JSdoc are properlly documented (no more parameter naming mistake and better editor linting support)","I don't think this bit is right. We do not document a setter here but just a property. Properties don't use `param`. Even though the node does not return a bool (since it is abstract), `@return` should define the type and the description for this abstract method. Please use here `PointShadowNode`. Well I was thinking the same at first but without this line, eslint hrow this `Missing JSDoc for parameter 'value'.eslint[valid-jsdoc]` 🤔  This also ends up throwing an eslint error as there is no direct return in this abstract function, that's why I move the annotation to a standard description sentence.  Settings the @abstract flag seems to fix the issue Seems like some recommendations are to not document the setter at all, what do you think ? https://github.com/jsdoc/jsdoc/issues/973 Yes, the idea is to document setter/getter only once per name. 

Would it work if you document the getter instead? Yes, the documentation is also available on the setter 
![image](https://github.com/user-attachments/assets/881e993b-7cba-42e0-ac81-ba2f1e336642)
"
30049,2024-12-06T15:18:26Z,2024-12-06T15:21:08Z,s-rigaud,1,0,1,40,13,1,1,[],184.0,0,428756.0,0,0,0,0,1331211.954616,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.85 <br> **134.59** | 484.85 <br> **134.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.31 <br> **134.5** | 484.31 <br> **134.5** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.24 <br> **150.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.12 <br> **139.75** | +0 B <br> **+0 B** |",,"**Description**

Fix small typos in `src/node` folder.",
30019,2024-12-02T21:29:56Z,2024-12-02T22:27:37Z,s-rigaud,0,0,1,156,30,0,0,[],,0,752066.0,0,0,0,0,1331212.015743,,0,1,1,False,[],,,,
30013,2024-12-02T13:55:50Z,2024-12-02T17:07:26Z,s-rigaud,1,0,1,42,10,1,1,[],207.0,0,779310.0,0,0,0,0,1331215.544497,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.57 <br> **134.48** | 484.57 <br> **134.48** | +1 B <br> **-3 B** |
| WebGPU Nodes | 484.04 <br> **134.38** | 484.04 <br> **134.38** | +1 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.36 <br> **149.77** | 553.36 <br> **149.77** | +0 B <br> **+0 B** |
| WebGPU Nodes | 509.24 <br> **139.48** | 509.24 <br> **139.48** | +0 B <br> **+0 B** |",,"**Description**

Fix some minor typos in the `Node` folder",
29997,2024-11-29T22:03:42Z,2024-11-29T22:19:56Z,s-rigaud,0,0,1,287,27,1,1,[],,0,1009238.0,0,0,0,0,1331215.808609,,0,1,1,False,[],,,"**Description**

As the eslint rules have been updated on [another PR](https://github.com/mrdoob/three.js/pull/29981), I re-run `npm run lint-fix` on the project and I manually updated some errors.",
29981,2024-11-27T14:45:40Z,2024-11-29T18:50:44Z,s-rigaud,2,4,2,57,9,1,0,[],179.0,0,1208320.0,0,0,0,0,1331216.102995,,0,2,0,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.69 <br> **134.48** | 484.69 <br> **134.48** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.15 <br> **134.38** | 484.15 <br> **134.38** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.61 <br> **111.98** | 464.61 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.43 <br> **149.79** | 553.43 <br> **149.79** | +0 B <br> **+0 B** |
| WebGPU Nodes | 509.31 <br> **139.5** | 509.31 <br> **139.5** | +0 B <br> **+0 B** | Do you mind resolving the merge conflicts?",,"**Description**

I figured out from [reading PRs](https://github.com/mrdoob/three.js/pull/29940/files#diff-9087429b1ee34c6d26572a1ba2634bf6ad9c6d061d6091b7e29cb007c39ba229) or [making one](https://github.com/mrdoob/three.js/pull/29717) that some eslint rules might be added to the project to improve code quality. 

As the core developers will be mainly impacted by the rule changes, you are in a better spot to judge what rules should be added or not. This PR is just a small suggestion. 

I updated the code with new rules to get a preview of the changes (there is no error left).","This rule is too strict, imo. Unused variables are already reported as warnings. That seems sufficient to me. This one is okay though. I would not change the log level in this case."
29805,2024-11-04T19:59:02Z,2024-11-04T21:11:09Z,s-rigaud,0,0,1,44,5,1,1,[],,0,3176717.0,0,0,0,0,1331218.547081,,0,1,1,False,[],,,Fallback for Date.now has been dropped in https://github.com/mrdoob/three.js/pull/29233,
29804,2024-11-04T19:50:21Z,2024-11-04T19:50:54Z,s-rigaud,0,0,1,24,1,1,1,[],,0,3177237.0,0,0,0,0,1331219.716472,,0,1,1,False,[],,, fix typos,
29803,2024-11-04T18:35:04Z,2024-11-04T19:50:12Z,s-rigaud,0,0,1,10,1,1,1,[],,0,3181754.0,0,0,0,0,1331219.860897,,0,1,1,False,[],,,"Simply emphasize the difference between Instanced and Batched meshes in the docs. I didn't grasp the difference from my first reading of the two current descriptions.

![image](https://github.com/user-attachments/assets/e435e285-fc99-49d4-b0b0-f1e313107c52)

![image](https://github.com/user-attachments/assets/6e71f813-d68f-474e-aeab-715afa9327a6)
",
30095,2024-12-10T21:37:08Z,2024-12-10T22:05:19Z,s-rigaud,1,0,1,30,8,0,0,[],177.0,0,60428.0,0,0,0,0,1331223.328907,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.93 <br> **134.88** | 485.93 <br> **134.88** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.39 <br> **134.78** | 485.39 <br> **134.78** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.03 <br> **150.31** | 555.03 <br> **150.31** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.88 <br> **140.02** | 510.88 <br> **140.02** | +0 B <br> **+0 B** |",,"**Description**

Fix small typos in the JSdoc.",
30093,2024-12-10T18:02:28Z,2024-12-10T20:37:44Z,s-rigaud,0,0,1,473,38,0,0,[],,0,73307.0,0,0,0,0,1331224.611344,,0,1,1,False,[],,,"**Description**

As JSdoc syntax is now inspected by eslint, I just fixed some warnings in `addons` and move the doc closer to the constructor in the `editor` having the benefit of type hinting the constructor params and the class attributes at the same time.",
30079,2024-12-09T19:33:51Z,2024-12-09T21:31:42Z,s-rigaud,1,0,1,34,9,0,0,[],182.0,0,154222.0,0,0,0,0,1331226.718761,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.2 <br> **79.01** | 339.2 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.98 <br> **134.92** | 485.98 <br> **134.91** | +6 B <br> **-5 B** |
| WebGPU Nodes | 485.44 <br> **134.82** | 485.45 <br> **134.81** | +6 B <br> **-3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.38 <br> **150.4** | 555.38 <br> **150.39** | +6 B <br> **-5 B** |
| WebGPU Nodes | 511.23 <br> **140.1** | 511.24 <br> **140.09** | +6 B <br> **-4 B** |",,"**Description**

I tried running Typescript to check the coherence of all the types inside the `nodes` folder. I found some updates to improve the existing code and fix some TS warning:

* Better typing for WeakMap
* TempNode constructor name is not set from existing children like `AssignNode` or `SetNode` so I set the name as optional
* String.charCodeAt requires an argument
* Other small fixes",
30100,2024-12-11T12:48:27Z,2024-12-11T13:26:45Z,Mugen87,1,0,2,1051,39,0,0,[],182.0,0,2298.0,0,0,0,0,1334676.201035,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.93 <br> **134.88** | 485.91 <br> **134.87** | -14 B <br> **-9 B** |
| WebGPU Nodes | 485.39 <br> **134.78** | 485.38 <br> **134.77** | -14 B <br> **-7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.03 <br> **150.31** | 555.02 <br> **150.3** | -6 B <br> **-4 B** |
| WebGPU Nodes | 510.88 <br> **140.02** | 510.87 <br> **140.01** | -6 B <br> **-4 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Document more modules.
",
30087,2024-12-10T12:23:07Z,2024-12-10T12:29:42Z,Mugen87,1,0,1,377,6,0,0,[],178.0,0,395.0,0,0,0,0,1424499.435621,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.92 <br> **134.87** | 485.93 <br> **134.88** | +6 B <br> **+2 B** |
| WebGPU Nodes | 485.38 <br> **134.78** | 485.39 <br> **134.78** | +6 B <br> **+1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.03 <br> **150.31** | 555.03 <br> **150.31** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.88 <br> **140.02** | 510.88 <br> **140.02** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

More docs.
",
30083,2024-12-10T06:58:56Z,2024-12-10T11:34:39Z,RenaudRohlinger,1,0,2,8,3,0,0,[],172.0,0,16544.0,0,0,0,0,1427801.54777,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.85 <br> **134.89** | 485.9 <br> **134.87** | +45 B <br> **-21 B** |
| WebGPU Nodes | 485.32 <br> **134.79** | 485.36 <br> **134.77** | +45 B <br> **-19 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 554.96 <br> **150.32** | 555 <br> **150.3** | +45 B <br> **-19 B** |
| WebGPU Nodes | 510.81 <br> **140.03** | 510.86 <br> **140.01** | +45 B <br> **-17 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/28237

**Description**

Clipping in the WebGPURenderer is not working when using `vertexNode` as `setupHardwareClipping` is defined in `setupPosition`. This PR fixes the issue by moving it to `setup`.
Also this feature highlighted the fact that `compileAsync` was missing the group argument resulting in an error.

*This contribution is funded by [Utsubo](https://utsubo.com)*",
30084,2024-12-10T11:22:20Z,2024-12-10T11:34:21Z,RenaudRohlinger,1,0,2,12,1,0,0,[],183.0,0,721.0,0,0,0,0,1427822.000616,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.85 <br> **134.89** | 485.87 <br> **134.89** | +21 B <br> **+4 B** |
| WebGPU Nodes | 485.32 <br> **134.79** | 485.34 <br> **134.8** | +21 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 554.96 <br> **150.32** | 554.98 <br> **150.33** | +21 B <br> **+3 B** |
| WebGPU Nodes | 510.81 <br> **140.03** | 510.83 <br> **140.03** | +21 B <br> **+3 B** |",,"As titled.

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30080,2024-12-09T21:37:12Z,2024-12-10T03:53:07Z,sunag,1,0,1,372,14,0,0,[],176.0,0,22558.0,0,0,0,0,1455493.259512,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.99 <br> **134.91** | 485.82 <br> **134.88** | -168 B <br> **-31 B** |
| WebGPU Nodes | 485.45 <br> **134.81** | 485.29 <br> **134.78** | -168 B <br> **-31 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.39 <br> **150.39** | 554.93 <br> **150.31** | -459 B <br> **-86 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 510.78 <br> **140.01** | -459 B <br> **-76 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30077

**Description**

Improve TSL fog apporach.
This allows you to manipulate the fog more easily, where the factor and colors are separated.

- [x] Added `rangeFogFactor`, `densityFogFactor`
- [x] `fog()` -> `vec4( color, factor )`
",
30081,2024-12-09T21:53:26Z,2024-12-10T00:42:49Z,sunag,1,0,4,4,3,0,0,[],176.0,0,10166.0,0,0,0,0,1466911.37777,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.21 <br> **79.01** | 339.21 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 485.99 <br> **134.91** | 486.02 <br> **134.92** | +33 B <br> **+11 B** |
| WebGPU Nodes | 485.45 <br> **134.81** | 485.49 <br> **134.82** | +33 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.39 <br> **150.39** | 555.42 <br> **150.41** | +33 B <br> **+17 B** |
| WebGPU Nodes | 511.24 <br> **140.09** | 511.27 <br> **140.11** | +33 B <br> **+18 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/28973

**Description**

Fix blending opacity in shadows.

| Before | After |
| ------------- | ------------- |
| ![image](https://github.com/user-attachments/assets/97623d34-a142-4e5f-99f7-7aa9bfc797c2) | ![image](https://github.com/user-attachments/assets/9e0b86cc-4f82-4862-9c46-12bf2d0745b6) |


",
30075,2024-12-09T12:13:41Z,2024-12-09T12:22:32Z,Mugen87,1,0,1,510,19,0,0,[],186.0,0,531.0,0,0,0,0,1511332.747272,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.2 <br> **79.01** | 339.2 <br> **79.01** | +0 B <br> **+0 B** |
| WebGPU | 486.02 <br> **134.93** | 485.98 <br> **134.92** | -46 B <br> **-14 B** |
| WebGPU Nodes | 485.49 <br> **134.83** | 485.44 <br> **134.82** | -46 B <br> **-15 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.1 <br> **112.06** | 465.1 <br> **112.06** | +0 B <br> **+0 B** |
| WebGPU | 555.42 <br> **150.4** | 555.38 <br> **150.4** | -46 B <br> **-5 B** |
| WebGPU Nodes | 511.27 <br> **140.11** | 511.23 <br> **140.1** | -46 B <br> **-12 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adding more docs.
",
30068,2024-12-08T18:53:14Z,2024-12-09T08:30:17Z,renovate[bot],0,0,1,6,1,0,0,[],,0,49090.0,0,0,0,0,1525201.161999,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `f09c1c0` -> `aa57810` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS40Mi40IiwidXBkYXRlZEluVmVyIjoiMzkuNDIuNCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
30018,2024-12-02T19:30:35Z,2024-12-09T08:32:56Z,michaeldll,6,4,4,20,3,2,1,[],174.0,0,565341.0,0,0,0,0,1525109.312223,,0,4,1,False,"['github-actions[bot]', 'michaeldll', 'Makio64', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.2 <br> **79.01** | +95 B <br> **+23 B** |
| WebGPU | 486.01 <br> **134.92** | 486.01 <br> **134.92** | +0 B <br> **+0 B** |
| WebGPU Nodes | 485.48 <br> **134.83** | 485.48 <br> **134.83** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465.1 <br> **112.06** | +95 B <br> **+24 B** |
| WebGPU | 555.41 <br> **150.39** | 555.41 <br> **150.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.26 <br> **140.1** | +0 B <br> **+0 B** | I realized that I have done this directly on the `dev` branch instead of making my own by mistake. Let me know if this is fixable or if I should open another PR instead. Sorry about that. Yes, I think a scale factor for transmission makes sense. Depending on the device, using the full resolution is quite taxing.

> I realized that I have done this directly on the dev branch instead of making my own by mistake.

That is not an issue. The PR looks good to me!

Having the ability to scale the transmission render target resolution is indeed useful. When I remember correctly from earlier discussions, there were reservations to add such properties to the renderer interface. However, since the transmission render target is global we can't use a material setting. So I think the solution here is fine.
 @michaeldll can you add this ability in one example using transmission so it's easy to find for new comers ?

ps : thanks for this pr, very useful for mobile and low power device! @Makio64 Good call, just added it to `webgl_materials_physical_transmission`:

https://github.com/user-attachments/assets/577b52d7-d632-44ff-be17-74f0e5be202a

",,"Fixed #30017.

**Description**

By default, the transmission render target takes up the full viewport. Reducing this render target size is valuable due to the considerable performance impact of rendering at full resolution and minimal visual degradation by just scaling the transmission render target size.

Here is a quick side-by-side comparison of full scale versus 33% scale, respectively:

<img width=""1225"" alt=""100-Screenshot 2024-12-02 at 20 20 59"" src=""https://github.com/user-attachments/assets/f11b8d7c-4158-4152-8a6f-6c3eb92dbfd5"">


<img width=""1226"" alt=""33-Screenshot 2024-12-02 at 20 20 38"" src=""https://github.com/user-attachments/assets/1eccc8f7-ba82-43e4-bdd5-6f623061ba14"">","Do you mind documenting this new property here: https://threejs.org/docs/index.html#api/en/renderers/WebGLRenderer Can we rename this to `transmissionResolutionScale`? Done! Done, let me know if the wording is clear enough."
30069,2024-12-08T22:20:21Z,2024-12-08T22:28:31Z,Mugen87,0,0,1,4,2,0,0,[],,0,491.0,0,0,0,0,1561374.54064,,0,1,1,False,[],,,"Related issue: https://discourse.threejs.org/t/bug-in-editor-auto-activate-show-normals/74903

**Description**

Unfortunately, #28613 introduced a regression with skinned meshes. With this fix, the editor now only recreates the vertex normals helper if the active helper is of type `VertexNormalsHelper`.",
30063,2024-12-08T04:09:54Z,2024-12-08T15:48:19Z,sunag,1,3,3,8,2,2,0,[],169.0,0,41909.0,0,0,0,0,1585384.261987,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 486.01 <br> **134.92** | 486.03 <br> **134.93** | +14 B <br> **+7 B** |
| WebGPU Nodes | 485.48 <br> **134.83** | 485.49 <br> **134.83** | +14 B <br> **+7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.42 <br> **150.4** | +14 B <br> **+10 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.27 <br> **140.11** | +14 B <br> **+9 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30048

**Description**

Apparently the problem was with the back of the materials, I changed the approach a bit to do the flip-y on the sampler instead of the generator and it worked. The cause of the problem is still a bit unclear for me.","Did you mean `cubeCamera.up.set( 0, 0, - 1 );`?

Even so, this code block does not look correct to me. When looking up the y-axis, the ""up-direction"" is different than it is when looking down the y-axis. `cubeCamera.up.set( 0, - 1, 0 )` It was just a trick to rotate the camera 180 degrees on the y-axis while using `lookAt()`. I believe the original version used it for the same purpose with `upSign[x]`. https://github.com/mrdoob/three.js/blob/c4071d4332c9184a8a24ce70a37dd3f5c9769c55/src/renderers/common/extras/PMREMGenerator.js#L475-L476
You are setting the up-direction to be parallel to the look-direction. Doing so is invalid.

When looking parallel to the y-axis, the up-direction was set to either +/- z in the original PMREM generator."
30067,2024-12-08T11:17:07Z,2024-12-08T15:46:44Z,Mugen87,1,1,1,471,11,1,0,[],175.0,0,16178.0,0,0,0,0,1585482.28745,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 486.01 <br> **134.92** | 486.01 <br> **134.92** | -2 B <br> **-1 B** |
| WebGPU Nodes | 485.48 <br> **134.83** | 485.48 <br> **134.82** | -2 B <br> **-2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 555.41 <br> **150.39** | 555.41 <br> **150.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 511.26 <br> **140.1** | 511.26 <br> **140.1** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

More documentation.","@sunag This is a minor fix to prevent `NaN` values in the attribute. `Vector4.set()` should always be used with four arguments otherwise properties end up `undefined` and then produce garbage values in subsequent computations.

Since the code assumes a four-component color value, `1` is used so alpha gets `1`."
30064,2024-12-08T04:23:06Z,2024-12-08T05:38:05Z,sunag,1,0,2,12,4,0,0,[],173.0,0,4520.0,0,0,0,0,1621982.370132,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 485.96 <br> **134.92** | 486.01 <br> **134.92** | +47 B <br> **+4 B** |
| WebGPU Nodes | 485.43 <br> **134.82** | 485.48 <br> **134.83** | +47 B <br> **+4 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 555.36 <br> **150.4** | 555.41 <br> **150.39** | +47 B <br> **-1 B** |
| WebGPU Nodes | 511.21 <br> **140.1** | 511.26 <br> **140.1** | +47 B <br> **+0 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30053#issuecomment-2525393067

**Description**

Fix `updateMatrices` sequence.",
30062,2024-12-08T03:28:42Z,2024-12-08T03:45:34Z,sunag,1,0,3,59,4,0,0,[],172.0,0,1015.0,0,0,0,0,1628752.091376,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 486.05 <br> **134.9** | 485.92 <br> **134.9** | -129 B <br> **+0 B** |
| WebGPU Nodes | 485.51 <br> **134.81** | 485.39 <br> **134.81** | -129 B <br> **-2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 555.42 <br> **150.37** | 555.32 <br> **150.38** | -100 B <br> **+10 B** |
| WebGPU Nodes | 511.27 <br> **140.08** | 511.17 <br> **140.08** | -100 B <br> **-1 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30045

**Description**

Introduces an interface for custom cache key generation.",
30033,2024-12-04T08:48:13Z,2024-12-08T03:44:51Z,Spiri0,1,0,6,6,1,0,0,[],175.0,0,327398.0,0,0,0,0,1628798.095158,,0,6,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.77 <br> **134.58** | 484.81 <br> **134.6** | +45 B <br> **+14 B** |
| WebGPU Nodes | 484.23 <br> **134.49** | 484.28 <br> **134.51** | +45 B <br> **+18 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.1 <br> **150** | 554.15 <br> **150.02** | +45 B <br> **+17 B** |
| WebGPU Nodes | 509.98 <br> **139.72** | 510.03 <br> **139.73** | +45 B <br> **+15 B** |",,"Enables the use of samplers in compute shaders because textureSampleLevel is usable in compute shaders.
",
30061,2024-12-07T19:23:56Z,2024-12-07T23:10:31Z,sunag,1,0,1,208,33,0,0,[],169.0,0,13599.0,0,0,0,0,1645255.355539,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 485.86 <br> **134.87** | 485.84 <br> **134.86** | -22 B <br> **-12 B** |
| WebGPU Nodes | 485.33 <br> **134.78** | 485.31 <br> **134.76** | -22 B <br> **-12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 555.23 <br> **150.32** | 555.23 <br> **150.33** | -5 B <br> **+7 B** |
| WebGPU Nodes | 511.12 <br> **140.04** | 511.08 <br> **140.04** | -33 B <br> **-5 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29974#issuecomment-2506606434

**Description**

Rename `.uv()` -> `.sample()`.",
30060,2024-12-07T18:50:23Z,2024-12-07T19:25:15Z,sunag,1,0,1,83,5,0,0,[],172.0,0,2095.0,0,0,0,0,1658772.792603,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 485.65 <br> **134.83** | 485.86 <br> **134.87** | +208 B <br> **+43 B** |
| WebGPU Nodes | 485.12 <br> **134.73** | 485.33 <br> **134.78** | +208 B <br> **+44 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 555.05 <br> **150.28** | 555.23 <br> **150.32** | +187 B <br> **+43 B** |
| WebGPU Nodes | 510.93 <br> **140** | 511.12 <br> **140.04** | +187 B <br> **+44 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/30053, https://github.com/mrdoob/three.js/pull/29921

**Description**

- [x] Add `ShadowBaseNode`
- [x] Fix CSM `shadowWorldPosition`",
30059,2024-12-07T18:47:12Z,2024-12-07T18:47:21Z,Mugen87,0,0,1,30,10,0,0,[],,0,9.0,0,0,0,0,1661049.913977,,0,1,1,False,[],,,"Fixed #30057.

**Description**

Removes the `fog` property from `MeshDepthMaterial` and `MeshDistanceMaterial` docs.
",
30058,2024-12-07T17:12:53Z,2024-12-07T18:43:58Z,sunag,1,0,6,16,1,0,0,[],176.0,0,5485.0,0,0,0,0,1661234.229525,,0,6,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 485.6 <br> **134.82** | 485.65 <br> **134.83** | +54 B <br> **+13 B** |
| WebGPU Nodes | 485.07 <br> **134.72** | 485.12 <br> **134.73** | +54 B <br> **+14 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.99 <br> **150.26** | 555.05 <br> **150.28** | +54 B <br> **+17 B** |
| WebGPU Nodes | 510.87 <br> **139.97** | 510.93 <br> **140** | +54 B <br> **+31 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30051

**Description**

Fix `getNodeType()` after `paddedType` for auto-conversion.",
30045,2024-12-06T09:55:14Z,2024-12-07T16:40:30Z,Mugen87,2,0,2,24,1,0,0,[],176.0,0,110717.0,0,0,0,0,1668661.613825,,1,2,1,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 485.36 <br> **134.74** | 485.6 <br> **134.82** | +245 B <br> **+80 B** |
| WebGPU Nodes | 484.82 <br> **134.64** | 485.07 <br> **134.72** | +245 B <br> **+78 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.75 <br> **150.18** | 554.99 <br> **150.26** | +245 B <br> **+79 B** |
| WebGPU Nodes | 510.63 <br> **139.89** | 510.87 <br> **139.97** | +245 B <br> **+81 B** | I made a few minor modifications, I hope it helps a bit with performance.",,"Related issue: Fixes #30044

**Description**

Fixes the cache key by including the IDs of the scene's lights into the key computation.",
30051,2024-12-06T18:18:22Z,2024-12-07T15:29:32Z,holtsetio,1,0,1,107,1,0,0,[],191.0,0,76394.0,0,0,0,0,1672796.775908,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.85 <br> **134.59** | 485.33 <br> **134.73** | +485 B <br> **+134 B** |
| WebGPU Nodes | 484.31 <br> **134.5** | 484.8 <br> **134.63** | +485 B <br> **+133 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.72 <br> **150.17** | +485 B <br> **+123 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.61 <br> **139.88** | +485 B <br> **+120 B** |",,"**Description**

This change adds support for mat2, mat3 and mat4 datatypes in uniform arrays which was missing before. mat3 values are uploaded as mat4 to ensure 16 byte alignment.",
30055,2024-12-07T12:15:19Z,2024-12-07T15:27:04Z,Mugen87,1,1,2,540,12,1,0,[],195.0,0,11506.0,0,0,0,0,1673069.226684,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.85 <br> **134.59** | 484.87 <br> **134.6** | +24 B <br> **+10 B** |
| WebGPU Nodes | 484.31 <br> **134.5** | 484.34 <br> **134.51** | +24 B <br> **+12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.26 <br> **150.06** | +24 B <br> **+15 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.14 <br> **139.77** | +24 B <br> **+13 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adding more docs.
","@sunag FYI: There is a small fix to ensure the `targetType` is correctly computed. Previously, something like `color.setRG( vec2( 1, 1 ) )` produced a runtime error."
30054,2024-12-07T09:57:56Z,2024-12-07T11:14:54Z,Mugen87,1,0,1,4,1,0,0,[],180.0,0,4618.0,0,0,0,0,1688200.376587,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.85 <br> **134.59** | 484.85 <br> **134.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.31 <br> **134.5** | 484.31 <br> **134.5** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.24 <br> **150.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.12 <br> **139.75** | +0 B <br> **+0 B** |",,"Fixed #30035.

**Description**

The PR makes sure `PropertyBinding` uses the `is*` flags for type detection. The previous approach of using update flags is error prone since such property might only exist as a setter.
",
30043,2024-12-05T18:32:15Z,2024-12-06T14:09:03Z,borisghidaglia,0,0,5,20,5,0,0,[],,0,70632.0,0,0,0,0,1764127.572269,,0,5,1,False,[],,,"Related issue: #11475

**Description**

Add examples for the onBeforeCompile method in the Material doc.",
30046,2024-12-06T12:23:29Z,2024-12-06T12:43:11Z,Mugen87,1,0,1,328,14,0,0,[],179.0,0,1182.0,0,0,0,0,1769305.10856,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.85 <br> **134.59** | 484.85 <br> **134.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.31 <br> **134.5** | 484.31 <br> **134.5** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.24 <br> **150.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.12 <br> **139.75** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Documenting more node related code.
",
30038,2024-12-05T00:55:29Z,2024-12-05T19:15:23Z,sunag,1,2,2,110,2,2,0,[],172.0,0,66525.0,0,0,0,0,1831642.435309,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.85 <br> **134.59** | 484.85 <br> **134.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.31 <br> **134.5** | 484.31 <br> **134.5** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.24 <br> **150.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.12 <br> **139.75** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30025

**Description**

More docs, address TODO.
",This should be `Node`. `augments` is equal to `extends` so it tells JSdoc the upper class. I had read `arguments` 😅
30041,2024-12-05T13:17:17Z,2024-12-05T19:13:23Z,Mugen87,4,4,2,374,12,2,0,[],174.0,0,21366.0,0,0,0,0,1832293.749077,,0,2,1,False,"['github-actions[bot]', 'sunag', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.86 <br> **134.6** | 484.85 <br> **134.59** | -9 B <br> **-6 B** |
| WebGPU Nodes | 484.32 <br> **134.5** | 484.31 <br> **134.5** | -9 B <br> **-7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.24 <br> **150.04** | 554.24 <br> **150.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 510.12 <br> **139.75** | 510.12 <br> **139.75** | +0 B <br> **+0 B** | While writing the JSDoc there were multiple occasions where I had to document a property or parameter of a node type. The issue is in most cases I have to use the `Node` type because of the generic character of the node system. However, it would be more precise to additionally mentioned what data type is expected by the module.  

For example a `uvNode` is currently documented as `Node` but I wonder if something like `Node<vec2>` would be more precise. > For example a uvNode is currently documented as Node but I wonder if something like Node<vec2> would be more precise.

Sounds good to me 👍 This should help especially in TSL Okay, I'll revisit this aspect with a separate PR. Adding the node type less work than writing the JSDoc in the first place^^.",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adding more docs.
","@sunag One question about the texture sharing in `ViewportSharedTextureNode`:

Right now, the module only shares the instance of `FramebufferTexture` across all nodes. However, for each node, `updateBefore()` is called and thus `copyFramebufferToTexture()` is executed which overwrites the data in the shared texture instance. Is that correct?

One could expect the copy only happens once per frame no matter how many `ViewportSharedTextureNode` objects are used.  

The current behavior seems intended because `ViewportSharedTextureNode` returns `this` in its overwritten `updateReference()` method. Without this bit (meaning by using the default implementation from `TextureNode`), `NodeFrame` should execute `updateBefore()` once per frame for _all_ `ViewportSharedTextureNode` instances. FYI: `updateMap` has been removed since it was unused in the code. This combination causes `viewportSharedTexture()` to be called once per mesh renderer, but it would only be called once in FRAME if the same node was shared with other materials like in `PhysicalLightingModel`.

https://github.com/mrdoob/three.js/blob/ae90867ef660be18c8095e22fe9de7d9b1b63efd/src/nodes/functions/PhysicalLightingModel.js#L71-L72

In this example we share the nodes instead of redeclaring for example `const viewportBackSideTexture = viewportMipTexture()` instead of `viewportMipTexture()` just defined in the code, it will be used only once in the FRAME because the reference is `this` as we saw in `updateReference()`, it will use the Node declaration.

We can have refraction over refraction in `webgpu_backdrop` and just one update as it happens in `PhysicalLightingModel`.

I'm not sure if FRAME was supposed to be RENDER, or this was due to some reflection optimization, but it would be easy to change after some testing. Okay, I can see that in the node sharing case, the class does what I originally expected. I guess we can leave the docs as they are until more details are requested. "
30032,2024-12-04T06:54:44Z,2024-12-04T18:11:36Z,RenaudRohlinger,1,0,1,8,1,0,0,[],170.0,0,40612.0,0,0,0,0,1922401.948016,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.77 <br> **134.58** | 484.95 <br> **134.62** | +179 B <br> **+41 B** |
| WebGPU Nodes | 484.23 <br> **134.49** | 484.41 <br> **134.53** | +179 B <br> **+40 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.1 <br> **150** | 554.28 <br> **150.05** | +179 B <br> **+45 B** |
| WebGPU Nodes | 509.98 <br> **139.72** | 510.16 <br> **139.76** | +179 B <br> **+43 B** |",,"Fixed: https://github.com/mrdoob/three.js/issues/30026

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30037,2024-12-04T14:01:43Z,2024-12-04T18:08:34Z,Mugen87,1,1,1,691,13,1,0,[],188.0,0,14811.0,0,0,0,0,1922584.409413,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.77 <br> **134.58** | 484.72 <br> **134.56** | -45 B <br> **-24 B** |
| WebGPU Nodes | 484.23 <br> **134.49** | 484.19 <br> **134.47** | -45 B <br> **-23 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.1 <br> **150** | 554.11 <br> **150** | +4 B <br> **-1 B** |
| WebGPU Nodes | 509.98 <br> **139.72** | 509.99 <br> **139.72** | +4 B <br> **-2 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Documents more node classes.
",I have moved this function into `AnamorphicNode` because it seems application specific to me. Image thresholding typically works differently by segmenting images into black and white depending on a threshold value (so it's a binary operator with no interpolation). 
30036,2024-12-04T12:42:51Z,2024-12-04T13:38:11Z,mrxz,0,0,1,1,1,1,1,[],,0,3320.0,0,0,0,0,1938807.623061,,0,1,1,False,[],,,"Related issue: #30008 

**Description**

Prettify strips white-space from code blocks unless they are preformatted. This is based on the element's computed style. While the page is loading, the iframe is hidden using `display: none`, which under Firefox means `getComputedStyle` returns empty results. Depending on load order and connection speed, this could cause prettify to incorrectly assume code blocks _aren't_ preformatted.

This PR sets the `currentStyle` property on the code block elements before loading `prettify.js`. This triggers a code path that avoids `getComputedStyle` working around the issue. The code path is originally for old versions of IE.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Fern Solutions](https://fern.solutions/)*
",
30030,2024-12-04T06:26:37Z,2024-12-04T12:58:25Z,RenaudRohlinger,0,0,1,374,5,1,1,[],,0,23508.0,0,0,0,0,1941194.707615,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/30016

**Description**

New Raycasting example on WebGPU Segments2.
https://rawcdn.githack.com/renaudrohlinger/three.js/utsubo/feat/fat-lines-raycasting/examples/webgpu_lines_fat_raycasting.html


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30027,2024-12-03T14:33:19Z,2024-12-03T15:00:46Z,Mugen87,1,0,3,503,13,0,0,[],189.0,0,1648.0,0,0,0,0,2020253.440375,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.6 <br> **134.47** | 484.61 <br> **134.48** | +10 B <br> **+1 B** |
| WebGPU Nodes | 484.06 <br> **134.38** | 484.07 <br> **134.38** | +10 B <br> **+1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.55 <br> **149.82** | 553.56 <br> **149.82** | +10 B <br> **-1 B** |
| WebGPU Nodes | 509.43 <br> **139.53** | 509.44 <br> **139.53** | +10 B <br> **-1 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Adding some more docs.",
30031,2024-12-04T06:31:41Z,2024-12-04T06:55:39Z,RenaudRohlinger,1,0,1,2,1,0,0,[],170.0,0,1438.0,0,0,0,0,1962961.455079,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.81 <br> **134.59** | 484.77 <br> **134.58** | -46 B <br> **-3 B** |
| WebGPU Nodes | 484.28 <br> **134.49** | 484.23 <br> **134.49** | -46 B <br> **-3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465 <br> **112.04** | 465 <br> **112.04** | +0 B <br> **+0 B** |
| WebGPU | 554.15 <br> **150.01** | 554.1 <br> **150** | -46 B <br> **-4 B** |
| WebGPU Nodes | 510.03 <br> **139.72** | 509.98 <br> **139.72** | -46 B <br> **-4 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29970

**Description**

Partially revert https://github.com/mrdoob/three.js/pull/29970 as the usage of `await this.device.queue.onSubmittedWorkDone();` seems too heavy on the CPU (add an average of 3ms) and should be manually handled by the developer using `renderer.waitForGPU()` if needed instead.


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30025,2024-12-03T10:48:21Z,2024-12-03T10:54:21Z,Mugen87,1,0,1,607,1,0,0,[],181.0,0,13521.0,0,0,0,0,2021879.583438,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.6 <br> **134.48** | 484.6 <br> **134.47** | +0 B <br> **-1 B** |
| WebGPU Nodes | 484.06 <br> **134.38** | 484.06 <br> **134.38** | +0 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.55 <br> **149.82** | 553.55 <br> **149.82** | +0 B <br> **+0 B** |
| WebGPU Nodes | 509.43 <br> **139.53** | 509.43 <br> **139.53** | +0 B <br> **-1 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

@sunag I have finalized the JSDoc for `NodeBuilder` however I was not able to document the flow, stack and chaining related logic to full extend (types and signatures are defined though). It would be great if you can revisit this bit at some point and resolve the `TODO`s.
",
30020,2024-12-03T01:34:11Z,2024-12-03T08:52:33Z,sunag,1,0,1,4,1,0,0,[],166.0,0,46595.0,0,0,0,0,2022056.264351,,1,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.6 <br> **134.48** | 484.6 <br> **134.48** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.06 <br> **134.38** | 484.06 <br> **134.38** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.55 <br> **149.82** | 553.55 <br> **149.82** | +0 B <br> **+0 B** |
| WebGPU Nodes | 509.43 <br> **139.53** | 509.43 <br> **139.53** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30012#discussion_r1865732866
",
24950,2022-11-14T02:43:11Z,2022-11-15T08:12:33Z,donmccurdy,21,0,2,420,4,0,0,['Loaders'],8.0,0,64830762.0,0,0,0,0,2033749.326486,,0,2,1,False,"['elalish', 'takahirox', 'donmccurdy', 'mrdoob', 'andybak', 'Jeggery']","/cc @takahirox  I think it's ok to remove them. For users who still need the extension, we can provide the plugins at or somewhere else.

https://github.com/takahirox/three-gltf-extensions  @elalish following up on https://github.com/mrdoob/three.js/pull/23630#issuecomment-1057239267 — the web app https://gltf.report will now do the spec/gloss → metal/rough conversion automatically. The same conversion could be applied in other web-based tools, with:

```javascript
import { WebIO } from '@gltf-transform/core';
import { KHRONOS_EXTENSIONS } from '@gltf-transform/extensions';
import { metalRough } from '@gltf-transform/functions';

const io = new WebIO().registerExtensions(KHRONOS_EXTENSIONS);

const document = await io.readBinary(byteArray);

// spec/gloss → metal/rough
await document.transform(metalRough());

const glb = await io.writeBinary(document);
``` I also think it's time 👍 SG, thanks @donmccurdy! Now I just need to remember to point people to that tool in our next release notes.  Also, here's a migration guide for converting existing glTF files:

- [Converting glTF PBR materials from spec/gloss to metal/rough](https://www.donmccurdy.com/2022/11/28/converting-gltf-pbr-materials-from-specgloss-to-metalrough/) It's good to add it to the Three.js migration guide? https://github.com/mrdoob/three.js/wiki/Migration-Guide Thanks, I'd missed that it covered r147 already — done! @donmccurdy Does `gltf-transform` work in the browser so that I could add this conversion to our editor? @elalish the script above, https://github.com/mrdoob/three.js/pull/24950#issuecomment-1313842312, will work in a browser, yes. 👍

What I'd do would be to load from the URL or [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) API into glTF Transform, then export a GLB as Uint8Array, and to parse or load from a Blob URL in THREE.GLTFLoader from there. Happy to take questions in [discussions](https://github.com/donmccurdy/glTF-Transform/discussions) as well! For future reference - there's a lot of models out there and a lot of code out there that still use KHR_materials_pbrSpecularGlossiness and I personally feel that backwards compatibility should be given a higher priority than it seems to have had here. Pre-processing gltf files is not an option in many cases (i.e. when you have no control over provenance).

I'll try and find time to contribute a plugin to handle this on import.  Our editor does the conversion on import - it's open source so you're welcome to crib the code if it's helpful: https://modelviewer.dev/editor/ @elalish Thanks I'll take a look. 

(I just spotted that you're behind manifold as well - I'd love to chat to you about that also at some point!) @elalish How does the conversion code look like? Is it small enough that we could add it to `GLTFLoader`? Well, we just took a dependency on `gltf-transform`, which is probably heavier than what you want. You could look into extracting just that part of @donmccurdy's code - might not be too bad.  Right, glTF Transform is about 20kb minzipped, plus any [extensions](https://gltf-transform.dev/extensions) you need. Fine for processing user uploads, but pre-processing the model offline would clearly be preferable for production. The conversion work is mainly rewriting textures...

https://github.com/donmccurdy/glTF-Transform/blob/84f1629e08750b61ce6ab344168dd6033d4656ee/packages/functions/src/metal-rough.ts#L81-L106

... which isn't a lot of code to re-implement, but is (1) slow, and (2) dependent on Canvas 2D or WebGL or WebGPU, which GLTFLoader otherwise would not require. My main concern was/is complexity and maintenance of GLTFLoader. I think being dependent on Canvas 2D is okay. And also that it's slow.

We could log a message saying that the textures got converted and suggest using glTF Transform.

I think that's better than just black? With one the edge case that we can't convert KTX2 textures so easily (but surely that combination is rare...) I think that would work well enough. If someone would like to open a PR rewriting spec/gloss textures to spec/rough (as in the link above), that sounds good to me. > With one the edge case that we can't convert KTX2 textures so easily (but surely that combination is rare...)

So does Threejs GLTFExporter support ktx2 textures？ When you load KTX2 textures in three.js, they become THREE.CompressedTexture instances. When exporting materials with THREE.CompressedTexture textures using THREE.GLTFExporter, the textures are automatically decompressed to PNG or JPG images for export. The exporter cannot transcode backwards from the GPU texture format to the Basis Universal (BasisLZ / ETC1S / UASTC) encoding to produce a universal KTX2 texture. > When you load KTX2 textures in three.js, they become THREE.CompressedTexture instances. When exporting materials with THREE.CompressedTexture textures using THREE.GLTFExporter, the textures are automatically decompressed to PNG or JPG images for export. The exporter cannot transcode backwards from the GPU texture format to the Basis Universal (BasisLZ / ETC1S / UASTC) encoding to produce a universal KTX2 texture.

Okay, thank you for your answer. I understand now",,"The Khronos Group archived the `KHR_materials_pbrSpecularGlossiness` extension (""no longer recommended for creating new files"") about a year ago. I think it would be reasonable for us to remove support at this point, and focus efforts on the metal/rough workflow instead. All new and upcoming PBR features — volumetric refraction, iridescence, clearcoat, subsurface scattering, ... — are authored around the metal/rough model. With support for `KHR_materials_ior` and `KHR_materials_specular`, there is no particular advantage left to the spec/gloss model.

Existing spec/gloss models can be converted losslessly to metal/rough with:

```shell
npm install --global @gltf-transform/cli

gltf-transform metalrough in.glb out.glb
```

Related:

- https://github.com/mrdoob/three.js/pull/23630

Migration guide:

- [Converting glTF PBR materials from spec/gloss to metal/rough](https://www.donmccurdy.com/2022/11/28/converting-gltf-pbr-materials-from-specgloss-to-metalrough/)",
30010,2024-12-02T04:58:18Z,2024-12-02T17:11:03Z,sam6321,3,0,9,56,4,0,0,[],14723.0,0,71640.0,0,0,0,0,2071165.403556,,0,9,1,False,"['sam6321', 'Mugen87']","Interesting. Do you mind updating the [webgl_loader_texture_dds](https://threejs.org/examples/webgl_loader_texture_dds) and use such a 24 bit texture so we have a test case for validation? To make the CI work, you have to regenerate the examples E2E screenshot via:
```
npm run make-screenshot webgl_loader_texture_dds
```
Besides, please revert the changes to `package-lock.json` (if the revert troubles you, copy the contents from `dev` into your branch). ~~I don't understand why those changes are there, I've checked out that file multiple times from dev and it's still showing changes.~~
Should be fixed now.

I'll re-generate the examples ",,"**Description**

Adds support for 24bit uncompressed RGB textures to DDSLoader. The texture data is read from the file in RGB, and returned in RGBA format with a=1.

I came across a bumpmap texture that was using this format that could not be parsed by DDSLoader. I've attached the texture for reference.

[wave_normals.zip](https://github.com/user-attachments/files/17972710/wave_normals.zip)
",
30012,2024-12-02T11:58:58Z,2024-12-02T17:24:19Z,Mugen87,1,2,2,461,6,1,0,[],195.0,0,19526.0,0,0,0,0,2098040.285378,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.57 <br> **134.48** | 484.6 <br> **134.48** | +24 B <br> **-3 B** |
| WebGPU Nodes | 484.04 <br> **134.38** | 484.06 <br> **134.38** | +24 B <br> **-2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.36 <br> **149.77** | 553.55 <br> **149.82** | +185 B <br> **+48 B** |
| WebGPU Nodes | 509.24 <br> **139.48** | 509.43 <br> **139.53** | +185 B <br> **+56 B** |",,"Related issue: #29984

**Description**

More API documentation.","@sunag I have slightly refactored `getStructTypeFromNode()` so it is more similar to `getBufferAttributeFromNode()` or `getUniformFromNode()`. @sunag Not sure about the purpose of `count`.

It also seems this part of the code throws currently a runtime error in `GLSLNodeFunction`. Try [webgpu_materials](https://threejs.org/examples/webgpu_materials) with a WebGL backend.

> Uncaught TypeError: undefined has no properties
    parse$1 https://threejs.org/build/three.webgpu.js:27563
    GLSLNodeFunction https://threejs.org/build/three.webgpu.js:27607
    parseFunction https://threejs.org/build/three.webgpu.js:27655



"
29984,2024-11-28T11:45:36Z,2024-11-30T10:01:06Z,Mugen87,5,4,7,789,9,2,0,['Documentation'],1210.0,0,303042.0,0,0,0,0,2160926.291489,,0,7,1,False,"['github-actions[bot]', 'donmccurdy', 'Mugen87', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.02 <br> **134.26** | 484.02 <br> **134.26** | +0 B <br> **-1 B** |
| WebGPU Nodes | 483.49 <br> **134.16** | 483.49 <br> **134.16** | +0 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.83 <br> **149.53** | 552.83 <br> **149.53** | +0 B <br> **+1 B** |
| WebGPU Nodes | 508.71 <br> **139.25** | 508.71 <br> **139.25** | +0 B <br> **+0 B** | Sounds good to me!
Thanks for working on this 🙏 Does JSDoc have a way to do this without polluting the source file?

![Screenshot 2024-11-29 11 39 39](https://github.com/user-attachments/assets/22db22a7-010a-4bf9-8fbf-325b504f490b)
 **Live examples**

I have not seen something like this by default in JSDoc. However, the currently used theme has a demo that shows how to include live examples:

https://ankdev.me/clean-jsdoc-theme/v4/AgentArray.html

They have updated their JSDoc config so the build includes a custom JavaScript file that injects the iFrame into the final doc page. The script looks like so:

https://github.com/ankitskvmdam/clean-jsdoc-theme/blob/eebd46d31777106171ffa0573ae8825b228fab1d/demo/src/assets/agentarray.js#L8-L26

I guess we could do something similar with out material/geometry browsers. 

@donmccurdy Do you know of other strategies for including live examples?

**Code Snippets**

Code example should already work nicely but they are normally embedded in the JSDoc. Since there is markdown support, the result looks without further CSS like so:

<img width=""980"" alt=""image"" src=""https://github.com/user-attachments/assets/6d6e87fb-9199-4731-8e75-c3304494f343"">

 > Do you know of other strategies for including live examples?

I'm not aware of any convention for live examples that would work for off-the-shelf JSDoc themes. Perhaps we would want to find a JSDoc-to-HTML or JSDoc-to-JSON-to-HTML workflow that's flexible enough to support a custom handler for something like:

```javascript
/**
 * ...
 * @example {@embed scenes/material-browser.html#MeshPhysicalMaterial}
 */
class MeshPhysicalMaterial extends MeshStandardMaterial {

}
```

The `{@embed <url>}` syntax is just an idea, based loosely on the often-used `{@link <token>}` syntax. For that matter, an HTML `<iframe />` tag might 'just work' depending on the Markdown parser being used by the JSDoc theme.",,"Related issue: #24984

**Description**

There is an increasing interest in documentation for `WebGPURenderer` and the node material system so let's improve the situation by adding more docs.

To me, this is a good opportunity to start with adding JSDoc (see https://github.com/mrdoob/three.js/issues/24984#issuecomment-1647146748). The PR introduces a minimal JSDoc setup with a basic template that generates the documentation into `docs_new`. This directory is not under version control and not intended for hosting yet.

We can switch to a custom template at a later point with a style similar to the existing documentation. I'm ready for reviewing PRs that migrate existing modules next to `WebGPURenderer` or node material (anything in `src` or `examples/jsm`) to JSDoc. I'll will add more documentation by myself over the next weeks.

To move things forward I suggest we ignore i18n and TypeScript related details for now. The focus should be on providing an auto-generated English documentation based on JSDoc. ","@sunag I guess I could document most parts of `Node` however there are some bits where I need your help.

E.g. it would be good to describe when `Node.global` should be set to `true` in derived classes. Looking at the code base, this aspect is not 100% clear to me. `getShared()` is also not clear to me. Is the method related to the `Proxy` usage in node classes? If `true` when creating conditionals, functions or isolated caches it will preserve the original declaration, if `false` the Node System will create new ones. For example, all `attribute` are `true` for `global`, because these should only be declared once. `getShared()` will check if any other similar Node is present through `.getHash()`, if there is already a `hash` equal to this code flow, the Node System will reuse it, avoiding duplicate code. For example, if the user uses `attribute( 'uv' )` several times, it will only use the first reference to generate the code."
30009,2024-12-01T23:02:52Z,2024-12-01T23:12:00Z,Mugen87,1,0,1,422,11,0,0,[],171.0,0,548.0,0,0,0,0,2163585.16211,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.11 <br> **78.98** | 339.11 <br> **78.98** | +0 B <br> **+0 B** |
| WebGPU | 484.59 <br> **134.49** | 484.57 <br> **134.48** | -20 B <br> **-5 B** |
| WebGPU Nodes | 484.06 <br> **134.39** | 484.04 <br> **134.38** | -20 B <br> **-6 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.38 <br> **149.78** | 553.36 <br> **149.77** | -20 B <br> **-9 B** |
| WebGPU Nodes | 509.26 <br> **139.49** | 509.24 <br> **139.48** | -20 B <br> **-9 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29984

**Description**

Some more documentation.
",
30005,2024-12-01T19:31:12Z,2024-12-01T21:09:36Z,renovate[bot],0,0,1,160,1,0,0,[],,0,5906.0,0,0,0,0,2170928.097522,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [magic-string](https://redirect.github.com/rich-harris/magic-string) | [`0.30.13` -> `0.30.14`](https://renovatebot.com/diffs/npm/magic-string/0.30.13/0.30.14) | [![age](https://developer.mend.io/api/mc/badges/age/npm/magic-string/0.30.14?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/magic-string/0.30.14?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/magic-string/0.30.13/0.30.14?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/magic-string/0.30.13/0.30.14?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.27.4` -> `4.28.0`](https://renovatebot.com/diffs/npm/rollup/4.27.4/4.28.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.28.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.28.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.27.4/4.28.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.27.4/4.28.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rich-harris/magic-string (magic-string)</summary>

### [`v0.30.14`](https://redirect.github.com/rich-harris/magic-string/blob/HEAD/CHANGELOG.md#03014-2024-11-26)

[Compare Source](https://redirect.github.com/rich-harris/magic-string/compare/v0.30.13...v0.30.14)

##### Features

-   Include `debugId` in `SourceMap` types ([#&#8203;294](https://redirect.github.com/rich-harris/magic-string/issues/294)) ([5d93dcf](https://redirect.github.com/rich-harris/magic-string/commit/5d93dcf7b59a6b6627bb591b13448d5b189b5dff))

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.28.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4280)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.27.4...v4.28.0)

*2024-11-30*

##### Features

-   Allow to specify how to handle import attributes when transpiling Rollup config files ([#&#8203;5743](https://redirect.github.com/rollup/rollup/issues/5743))

##### Pull Requests

-   [#&#8203;5743](https://redirect.github.com/rollup/rollup/pull/5743): fix: supports modify the import attributes key in the config file ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi), [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5747](https://redirect.github.com/rollup/rollup/pull/5747): chore(deps): update codecov/codecov-action action to v5 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5748](https://redirect.github.com/rollup/rollup/pull/5748): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS4xOS4wIiwidXBkYXRlZEluVmVyIjoiMzkuMTkuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
30000,2024-11-30T16:08:46Z,2024-11-30T17:47:47Z,Mugen87,2,7,7,516,15,3,0,[],178.0,0,109353.0,0,0,0,0,2166027.361683,,0,7,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.69 <br> **134.48** | 484.63 <br> **134.49** | -57 B <br> **+13 B** |
| WebGPU Nodes | 484.15 <br> **134.38** | 484.1 <br> **134.4** | -57 B <br> **+12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.61 <br> **111.98** | 464.61 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.43 <br> **149.79** | 553.37 <br> **149.8** | -57 B <br> **+10 B** |
| WebGPU Nodes | 509.31 <br> **139.5** | 509.25 <br> **139.51** | -57 B <br> **+10 B** | <img width=""131"" alt=""image"" src=""https://github.com/user-attachments/assets/8a28be0e-ca44-4a1d-a24b-a27c1fac3b1b"">

Nice milestone, btw^^.",,"Related issue: #29984

**Description**

More documentation for the node classes.","@sunag `BypassNode` is not used very often so I've struggled with a description. Do you mind explaining the purpose of this module? @sunag It would be good to explain why some some nodes derive from `Node` others from `TempNode` instead. What is the purpose of `TempNode`? `TempNode` uses cache management to create temporary variables if the node is used more than once to prevent duplicate calculations. `BypassNode` generates the code of a node but returns another node in the output. This can be used to call a method or node that does not return a value, i.e. type `void` on an input where returning a value is required. Example: `material.colorNode = myColor.bypass( runVoidFn() )`
 FYI: `version` and `needsUpdate` were defined in this class although it is derived from `Node`. I've removed the redefinition since it is equal to `Node.version` and `Node.needsUpdate`. assing?! 9d40e23976288b423aea678379b86aaa8fd56ebd"
30004,2024-12-01T12:13:00Z,2024-12-01T12:19:04Z,Mugen87,1,0,1,21,1,0,0,[],179.0,0,364.0,0,0,0,0,2202762.984005,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.11 <br> **78.98** | -27 B <br> **-8 B** |
| WebGPU | 484.62 <br> **134.49** | 484.59 <br> **134.49** | -27 B <br> **-8 B** |
| WebGPU Nodes | 484.09 <br> **134.4** | 484.06 <br> **134.39** | -27 B <br> **-8 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.61 <br> **111.98** | -3 B <br> **-1 B** |
| WebGPU | 553.38 <br> **149.78** | 553.37 <br> **149.8** | -17 B <br> **+18 B** |
| WebGPU Nodes | 509.26 <br> **139.49** | 509.25 <br> **139.51** | -17 B <br> **+30 B** |",,"Related issue: #26427

**Description**

The PR removes the deprecated `WebGLMultipleRenderTargets` module.
",
30002,2024-12-01T11:14:10Z,2024-12-01T11:45:57Z,Mugen87,1,0,1,13,1,0,0,[],200.0,0,2950.0,0,0,0,0,2203707.971316,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.63 <br> **134.49** | 484.63 <br> **134.49** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.1 <br> **134.4** | 484.1 <br> **134.4** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.61 <br> **111.98** | 464.61 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.37 <br> **149.8** | 553.37 <br> **149.8** | +0 B <br> **+0 B** |
| WebGPU Nodes | 509.25 <br> **139.51** | 509.25 <br> **139.51** | +0 B <br> **+0 B** |",,"Related issue: -

**Description**

It seems the file `src/nodes/core/UniformGroup.js` is not in use and thus can be deleted.
",
30003,2024-12-01T11:53:37Z,2024-12-01T12:01:45Z,Mugen87,0,0,1,24224,57,0,0,[],,0,488.0,0,0,0,0,2203803.295306,,0,1,1,False,[],,,"Related issue: #29698

**Description**

The PR removes the deprecated MMD modules from the repository.",
30001,2024-12-01T11:10:59Z,2024-12-01T11:46:21Z,Mugen87,1,0,3,465,12,0,0,[],178.0,0,2122.0,0,0,0,0,2204727.859671,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.63 <br> **134.49** | 484.62 <br> **134.49** | -8 B <br> **+2 B** |
| WebGPU Nodes | 484.1 <br> **134.4** | 484.09 <br> **134.4** | -8 B <br> **+2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.61 <br> **111.98** | 464.61 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.37 <br> **149.8** | 553.37 <br> **149.8** | -8 B <br> **+2 B** |
| WebGPU Nodes | 509.25 <br> **139.51** | 509.25 <br> **139.51** | -8 B <br> **+2 B** |",,"Related issue: #29984

**Description**

Another bunch of node modules documented.
",
29988,2024-11-28T20:58:07Z,2024-11-29T17:11:24Z,bbsimong,0,4,2,14,2,2,1,[],,0,72797.0,0,0,0,0,2358026.483022,,0,2,1,False,[],,,"**Description**

This allows for setting a different speed of rotation when using the keyboard vs when using a mouse. Similar in approach to the existing keyPanSpeed.
","Would you mind not changing the default value so we don't change the behavior? Happy to change this default to 1 as it's now configurable. But .. The default of `1` is fairly slow when moving with the keyboard. Having a slightly faster speed, would be similar to `keyPanSpeed` which is also higher when using the keyboard (7 vs 1).

The following recordings is me just holding shift+<arrow> down, so no repeated presses:

keyRotateSpeed = 1

https://github.com/user-attachments/assets/4e488e40-f61b-4491-b386-2b41acfea5e7

keyRotateSpeed = 10

https://github.com/user-attachments/assets/773b8a5a-bc38-4232-97e5-0233ecbbb9d8

Let me know what you think, happy to go either way on this

 Um, at least on my macMini the the rotate speed feels a bit too high.

TBH, I feel more safe if we don't touch the default value. Is that okay for you? No worries at all, I pushed a commit which sets it to 1"
29948,2024-11-23T16:19:30Z,2024-11-24T19:41:06Z,sunag,2,0,6,1253,202,0,0,[],1327.0,0,499683.0,0,0,0,0,2379857.683462,,0,6,1,False,"['github-actions[bot]', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 483.69 <br> **134.01** | 481.83 <br> **133.9** | -1.86 kB <br> **-111 B** |
| WebGPU Nodes | 483.16 <br> **133.9** | 481.3 <br> **133.8** | -1.86 kB <br> **-105 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.99 <br> **149.23** | 550.99 <br> **149.23** | +0 B <br> **+0 B** |
| WebGPU Nodes | 506.87 <br> **138.94** | 506.87 <br> **138.94** | +0 B <br> **+0 B** | > || Before | After | Diff |
> |:-:|:-:|:-:|:-:|
> | WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
> | WebGPU | 483.69 <br> **134.01** | 481.83 <br> **133.9** | -1.86 kB <br> **-111 B** |
> | WebGPU Nodes | 483.16 <br> **133.9** | 481.3 <br> **133.8** | -1.86 kB <br> **-105 B** |

I was thinking the WebGPU builds would get smaller when moving the TSL out of it?",,"Related issue: https://github.com/mrdoob/three.js/pull/29644#discussion_r1853206580

**Description**

- Introduce `three/tsl` build to import maps. The new file is `three.tsl.js`. ( TSL )
- Introduce `three/webgl` to import maps. ( Core + WebGPURenderer + Nodes )
- Update all examples and depedencies.

Example
```js
import { RenderTarget, Texture, Vector2, QuadMesh, NodeMaterial, TempNode } from 'three/webgpu';

import { If, Loop, int, Break, sqrt, sign, mix } from 'three/tsl';
```

@mrdoob I think both unnoticed already have a `TSL.js` file in the lib, what do you think if we follow the second option `Three.TSL.js` for the build?",
29998,2024-11-30T06:40:29Z,2024-11-30T17:27:05Z,linbingquan,0,0,1,6,1,0,0,[],,0,38796.0,0,0,0,0,2270685.871537,,0,1,1,False,[],,,"Related issue: #XXXX

**Description**

Rename `Nodes` to `TSL`
",
29992,2024-11-29T04:18:03Z,2024-11-29T05:28:15Z,RenaudRohlinger,1,0,1,6,1,0,0,[],180.0,0,4212.0,0,0,0,0,2400217.349465,,1,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.61 <br> **134.47** | 484.69 <br> **134.48** | +74 B <br> **+10 B** |
| WebGPU Nodes | 484.08 <br> **134.37** | 484.15 <br> **134.38** | +74 B <br> **+11 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.37 <br> **149.76** | 553.45 <br> **149.77** | +74 B <br> **+9 B** |
| WebGPU Nodes | 509.25 <br> **139.47** | 509.33 <br> **139.48** | +74 B <br> **+10 B** |",,"**Description**
https://www.w3.org/TR/webgpu/#external-texture-sampling
> External textures are represented in WGSL with texture_external and may be read using textureLoad and textureSampleBaseClampToEdge.

https://www.w3.org/TR/WGSL/#textureload
<img width=""810"" alt=""image"" src=""https://github.com/user-attachments/assets/647f6c41-015f-4bb0-a035-0174806d08f6"">

This PR adds support to read a single texel from a video or storage texture in the vertex and compute shading.


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29993,2024-11-29T04:27:22Z,2024-11-29T05:27:05Z,RenaudRohlinger,1,0,2,1,1,0,0,[],169.0,0,3583.0,0,0,0,0,2400287.648583,,1,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.61 <br> **134.47** | 484.61 <br> **134.47** | +0 B <br> **+0 B** |
| WebGPU Nodes | 484.08 <br> **134.37** | 484.08 <br> **134.37** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 553.37 <br> **149.76** | 553.37 <br> **149.76** | +0 B <br> **+0 B** |
| WebGPU Nodes | 509.25 <br> **139.47** | 509.25 <br> **139.47** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29881

**Description**
Missing export was breaking the example `webgpu_compute_texture_pingpong.html`.

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29989,2024-11-28T21:09:01Z,2024-11-28T23:57:44Z,sunag,1,0,2,315,7,0,0,[],172.0,0,18676.0,0,0,0,0,2411495.820214,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.02 <br> **134.26** | 484.46 <br> **134.42** | +441 B <br> **+158 B** |
| WebGPU Nodes | 483.49 <br> **134.16** | 483.93 <br> **134.32** | +441 B <br> **+154 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.83 <br> **149.53** | 553.23 <br> **149.71** | +394 B <br> **+172 B** |
| WebGPU Nodes | 508.71 <br> **139.25** | 509.11 <br> **139.43** | +394 B <br> **+175 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29942

**Description**

Add `SpotLight.map` support for `WebGPURenderer`. Unlike `WebGLRenderer`, turning on `.castShadow` should be optional.

- [x] Add `SpotLight.map` support.
- [x] Add `Light.colorNode` optional usage
- [x] TSL:  Add `lightShadowMatrix( light )`, `lightProjectionUV( light )`


WebGLRenderer:
![image](https://github.com/user-attachments/assets/b4da00f5-a74a-4001-861c-5945e4c4e321)",
29979,2024-11-27T07:35:50Z,2024-11-27T14:50:07Z,sunag,3,0,2,16,1,0,0,[],183.0,0,124793.0,0,0,0,0,2440571.282244,,0,2,1,False,"['github-actions[bot]', 'Makio64', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.7 <br> **134.18** | 483.88 <br> **134.22** | +173 B <br> **+36 B** |
| WebGPU Nodes | 483.17 <br> **134.09** | 483.34 <br> **134.12** | +173 B <br> **+37 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.83 <br> **149.53** | 552.83 <br> **149.53** | +0 B <br> **+0 B** |
| WebGPU Nodes | 508.71 <br> **139.25** | 508.71 <br> **139.25** | +0 B <br> **+0 B** | Thanks @sunag ! 

I discovered with this PR the `viewportSharedTexture`, so now in threejs we can get the current state of the `rendering texture` at any point using this ? 

Looks super powerful, is there throwback in term of performance using it ?

ps: very clever to just do the `line color+current color(sharedTexture)` with the ratio `alpha/1-alpha` but why in the output do we still need an alpha at the end then ?

Thanks a lot, didnt even know that was possible.. I'm glad it helped :)

> I discovered with this PR the viewportSharedTexture, so now in threejs we can get the current state of the rendering texture at any point using this ?

At any time, you can get the depth map too, that was the basis of the example `webgpu_backdrop_water`.

> Looks super powerful, is there throwback in term of performance using it ?

Although it is very fast, there is an additional load, but that would be the case with all the approaches presented for this. I let it update the texture every time the object is rendered, but if we have any issues I can leave it only for the opaque ones, just like `transmission` works.

> ps: very clever to just do the line color+current color(sharedTexture) with the ratio alpha/1-alpha but why in the output do we still need an alpha at the end then ?

I didn't implement the alpha for the HTML background, so this will only be necessary in this case, what do you think about implementing a PR for this?

",,"Related issue: https://github.com/mrdoob/three.js/pull/29964

**Description**

Add `opacity` support for `Line2NodeMaterial` using `backdrop`.

The change of `fragmentNode` to `colorNode`, should enable support for MRT and `alphaHash` as optional for performance.

[Live demo](https://raw.githack.com/sunag/three.js/dev-fat-line-demo/examples/webgpu_lines_fat.html)

![image](https://github.com/user-attachments/assets/ba2194c1-8b61-4eaf-bbfe-62a091a611cb)

I just added support for `NormalBlending`. For other support would be to simply add the other formulas in the outputNode.",
29987,2024-11-28T14:22:31Z,2024-11-28T14:28:09Z,Zelif,0,0,2,3,1,0,0,[],,0,338.0,0,0,0,0,2454225.42911,,0,2,1,False,[],,,"Related issue: Didn't file an issue.

The example for path tracing errors out with the LDrawLoader requiring the conditional line material.

This just imports the material and adds it into the loader for use.
",
29985,2024-11-28T12:02:02Z,2024-11-28T12:02:08Z,Mugen87,1,0,1,0,1,0,0,[],176.0,0,179.0,0,0,0,0,2462813.629526,,0,1,0,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 484.02 <br> **134.26** | 484.02 <br> **134.26** | +0 B <br> **+0 B** |
| WebGPU Nodes | 483.49 <br> **134.16** | 483.49 <br> **134.16** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.83 <br> **149.53** | 552.83 <br> **149.53** | +0 B <br> **+0 B** |
| WebGPU Nodes | 508.71 <br> **139.25** | 508.71 <br> **139.25** | +0 B <br> **+0 B** |",,"Related issue: 27d10544cccd795a6158086e4f8d50026510cc10

**Description**

Fixes the broken builds.",
29982,2024-11-27T15:29:58Z,2024-11-27T16:14:04Z,sunag,1,0,4,43,6,0,0,[],182.0,0,2649.0,0,0,0,0,2534269.116833,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.88 <br> **134.22** | 484.02 <br> **134.26** | +147 B <br> **+38 B** |
| WebGPU Nodes | 483.34 <br> **134.12** | 483.49 <br> **134.16** | +147 B <br> **+40 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.83 <br> **149.53** | 552.83 <br> **149.53** | +0 B <br> **+0 B** |
| WebGPU Nodes | 508.71 <br> **139.25** | 508.71 <br> **139.25** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29881#discussion_r1858885430

**Description**

This PR is a follow-up to https://github.com/mrdoob/three.js/pull/29881. It seems that if we just have `storage()` it will be easier for the user to understand and use these buffers. Defining `.setPBO()` made it clearer why it is used.
",
29978,2024-11-27T06:00:19Z,2024-11-27T06:12:38Z,sunag,1,0,1,16,1,0,0,[],181.0,0,742.0,0,0,0,0,2570355.22402,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.57 <br> **134.16** | 483.72 <br> **134.2** | +144 B <br> **+37 B** |
| WebGPU Nodes | 483.04 <br> **134.06** | 483.18 <br> **134.1** | +144 B <br> **+40 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.7 <br> **149.51** | 552.85 <br> **149.55** | +144 B <br> **+42 B** |
| WebGPU Nodes | 508.58 <br> **139.23** | 508.73 <br> **139.27** | +144 B <br> **+41 B** |",,"**Description**

Update viewport/scissor after `copyFramebufferToTexture()` is called.",
29977,2024-11-27T05:45:39Z,2024-11-27T06:01:23Z,sunag,1,0,2,20,1,0,0,[],173.0,0,953.0,0,0,0,0,2571024.553069,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.59 <br> **134.17** | 483.57 <br> **134.16** | -15 B <br> **-12 B** |
| WebGPU Nodes | 483.06 <br> **134.07** | 483.04 <br> **134.06** | -15 B <br> **-12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.72 <br> **149.52** | 552.7 <br> **149.51** | -15 B <br> **-16 B** |
| WebGPU Nodes | 508.6 <br> **139.24** | 508.58 <br> **139.23** | -15 B <br> **-14 B** |",,"**Description**

Remove variable conflicts for now until we create an auto-naming system.",
29976,2024-11-26T13:35:17Z,2024-11-26T15:24:53Z,holtsetio,1,0,2,64,3,0,0,[],179.0,0,12331.0,0,0,0,0,2617870.008886,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483 <br> **134.08** | 483.59 <br> **134.17** | +594 B <br> **+91 B** |
| WebGPU Nodes | 482.46 <br> **133.98** | 483.06 <br> **134.07** | +594 B <br> **+90 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.12 <br> **149.43** | 552.72 <br> **149.52** | +594 B <br> **+95 B** |
| WebGPU Nodes | 508 <br> **139.14** | 508.6 <br> **139.24** | +594 B <br> **+98 B** |",,"Related issue: Closes #29952

**Description**

Before this fix, int/ivec/uint/uvec uniforms were uploaded as floats while still being treated as integers by webgpu, thus causing nonsense values.
The Compute Attractors Particles Demo was also modified to use an uint uniform for the number of attractors instead of float, for best practice and to showcase the integer uniform fix.
",
29919,2024-11-19T02:32:12Z,2024-11-24T09:52:40Z,whatisor,22,21,6,8,2,4,1,[],175.0,0,694696.0,0,0,0,0,2580090.64288,,0,6,1,False,"['verekia', 'whatisor', 'donmccurdy', 'CodyJasonBennett', 'github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 484.71 <br> **134.2** | 484.87 <br> **134.24** | +156 B <br> **+45 B** |
| WebGPU Nodes | 484.18 <br> **134.1** | 484.34 <br> **134.14** | +156 B <br> **+44 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 552.01 <br> **149.42** | 552.17 <br> **149.47** | +156 B <br> **+44 B** |
| WebGPU Nodes | 507.89 <br> **139.13** | 508.05 <br> **139.18** | +156 B <br> **+44 B** | Note – I've renamed the issue to ""fix global references in Node.js"". I think that's the issue here, not React. Next.js is a React-based framework that happens to execute code in both a browser environment and server-side in Node.js. I have set up a test suite of various build environments, like Vite, with and without React, Next.js, R3F, and a specific one to check this PR: https://github.com/verekia/three-gpu-ecosystem-tests

The PR does indeed fix Next.js crashing on reference errors 🙌 That being said, I am getting a `Multiple instances of Three.js being imported` warning, which I don't get when importing WebGPURenderer dynamically. Maybe @CodyJasonBennett would have insights on why that happens.

Regular import (fixed by this PR):
`next-pages-vanilla-pr-29919/pages/index.js`

Dynamic import workaround:
`next-pages-vanilla-dynamic-8ce69e0/pages/index.js` It seems the only blocking bit is the change in `WebGPUUtils`. 

@verekia Can you please verify if build works without this change? If so, we can revert it ( see https://github.com/mrdoob/three.js/pull/29919#discussion_r1849357796). Yes, it works without the `WebGPUUtils` change. I added the test case to my repo. Thanks for letting us know! I have reverted the changes in `WebGPUUtils` so it seems the PR is ready to go. > Thanks for letting us know! I have reverted the changes in `WebGPUUtils` so it seems the PR is ready to go.
@Mugen87 We still need to update WebGPUtils and examples because people stills use it from example and it will not be able to compile, don't we?
 @whatisor Could you provide a repro where `WebGPUUtils` causes a crash in a Next.js project?

My test is pretty basic, the only thing I import is:

```js
import * as THREE from 'three'
import { WebGPURenderer } from 'three/webgpu'
``` This PR has nothing to do with React or its strict mode etc. We need a reproduction to know what's going on here or if this is something we can actually support. Next is notorious for overzealous compilation the ecosystem itself can't mitigate. > @whatisor Could you provide a repro where `WebGPUUtils` causes a crash in a Next.js project?
> 
> My test is pretty basic, the only thing I import is:
> 
> ```js
> import * as THREE from 'three'
> import { WebGPURenderer } from 'three/webgpu'
> ```

I did not mean issue of Core. It is just simply call Webgpu.isAvailable() in your test to see compilation issue, but I will push PR to your test case @whatisor You are not supposed to call any method that's meant for browsers during SSR. These should live in a `useEffect` or similar. See this classic article about [hydration](https://www.joshwcomeau.com/react/the-perils-of-rehydration/).

```jsx
WebGPU.isAvailable() // ❌ Don't do that, it runs on the server during SSR

function MyComponent() {
  WebGPU.isAvailable() // ❌ Don't do that, it runs on the server during SSR

  useEffect(() => {
    WebGPU.isAvailable() // ✅ No problem, runs only in the browser
  }, [])

  return // ...
}
```

That's why the only concern for Three.js should be that _importing_ in a Next.js project doesn't cause a crash due to global browser variable access and top-level browser API calls. If you call methods during SSR that should never run on the server, then it's expected for SSR to break. I added [more test cases to my repo](https://github.com/verekia/three-gpu-ecosystem-tests), including Next 14/15, React 18/19, Pages/App router, and a TSL call for all cases. Now that this PR is merged, things are looking really good for Next.js support in r171. Thank you.

> - ✅ Vite + vanilla Three.js: Works in all cases.
> - ✅ Next.js + vanilla Three.js: Works in all cases.
> - ✅ Vite + R3F: Works.
> - ✅ Next.js 14 + R3F: Works in both Pages and App routers.
> - ❌ Next.js 15 + R3F: Does not work, except with Pages Router + React 18.

The recent release of Next.js 15 + React 19 RC is expected to break things on the R3F side, so it's not a problem Three.js should worry about. > ```js
>   useEffect(() => {
>     WebGPU.isAvailable() // ✅ No problem, runs only in the browser
>   }, [])
> ```
I added into your 2 test cases and it is failed from BUILD step.
![image](https://github.com/user-attachments/assets/af4e14a2-afcc-4d4d-a74f-a089738b37cf)

Thank @Mugen87  because of removing self but still issue with nagivator and warning with await.

 https://github.com/whatisor/three-gpu-ecosystem-tests/blob/main/next-14-pages-r3f-react-18/pages/index.js You're right @whatisor, this [`navigator`](https://github.com/mrdoob/three.js/blob/4749f998ca6127bd49f98ccfc773b50de02274b5/examples/jsm/capabilities/WebGPU.js#L1) is at the top-level, so it will break imports. The one we reverted in `WebGPUUtils` was not top-level, as it was in a class method. Let's keep hunting down only the top-level ones :) I guess we can simply do the following?
```js
let isAvailable = ( typeof navigator !== 'undefined'  && navigator.gpu !== undefined );
```
It does not matter that `isAvailable` ends up `false`, right? This is just a compile issue. > and warning with await.

How does this warning look like? Is it still possible to compile your code with the below `await` usage?

https://github.com/mrdoob/three.js/blob/4749f998ca6127bd49f98ccfc773b50de02274b5/examples/jsm/capabilities/WebGPU.js#L6 It compiles with this warning:

```
   ▲ Next.js 15.0.3

 ✓ Linting and checking validity of types    
   Creating an optimized production build ...
 ⚠ Compiled with warnings

./node_modules/three/examples/jsm/capabilities/WebGPU.js
The generated code contains 'async/await' because this module is using ""topLevelAwait"".
However, your target environment does not appear to support 'async/await'.
As a result, the code may not run as expected or may cause runtime errors.

Import trace for requested module:
./node_modules/three/examples/jsm/capabilities/WebGPU.js

 ✓ Compiled successfully
```
I am on Node v22.10.0, and interestingly, I was not getting the ReferenceError because `navigator` is actually defined in that version. I switched to Node 18 and it's not defined. Anyway, I think it's a good practice to do these `typeof` checks for `navigator`, `window`, and other global browser objects. I think we can live with that warning for now. `navigator` was [added in Node 21](https://nodejs.org/en/blog/announcements/v21-release-announce#navigator-object-integration) After another full day of testing and Dockerizing for more reliable reproductions, I have [updated the repo with new findings](https://github.com/verekia/three-gpu-ecosystem-tests#results). I have added an import of `capabilities/WebGPU.js` and call to `isAvailable` in all cases.

The main takeaway on the Three.js side is that importing top-level await modules such as `capabilities/WebGPU.js` does break Vite's default config, and causes that warning we discussed above in Next.js, both in the browser console and at compilation.

You can test it easily:

- `cd vite-vanilla-js`
- Comment out `optimizeDeps` and `build.target` in vite.config.js
- `npm run docker` (or `npm i && npm start` if you don't have Docker)

Or Next.js:

- cd `next15-pages-vanilla-react19`
- `npm run docker` (or `npm i && npm start`) Yeah,  I still need to implement my own WebGPU async checking anyway. Because cannot risky update everything to latest.",,"Fix #29916.

**Description**
Fix compilation issue on react.

","Is the compiled application still usable if you use `false` here?

In any event, I would at least use `{}` as a fallback. Besides, please write the tests like so:
```js
const adapter = ( typeof navigator !== 'undefined' ) ? await navigator.gpu.requestAdapter( adapterOptions ) : {};
```
Meaning you test for the normal case first and then handle the fallback. Same here:
```js
if ( typeof navigator !== 'undefined'  && /Windows/g.test( navigator.userAgent ) ) {
``` ```js
if ( ( typeof navigator !== 'undefined' && /Firefox|Deno/g.test( navigator.userAgent ) ) !== true ) {
``` ```js
getPreferredCanvasFormat() {

	// TODO: Remove this check when Quest 34.5 is out
	// https://github.com/mrdoob/three.js/pull/29221/files#r1731833949

	if ( typeof navigator !== 'undefined' ) {

		if ( navigator.userAgent.includes( 'Quest' ) ) {

			return GPUTextureFormat.BGRA8Unorm;

		} else {

			return navigator.gpu.getPreferredCanvasFormat();

		}

	} else {


		return GPUTextureFormat.BGRA8Unorm;

	}

}
``` Thanks, fixed. Thanks, fixed. Thanks, fixed. Thanks, fixed. @donmccurdy`{}` is intended as a workaround for node but I'm not sure `{}` is ideal here. Do you think this use case is handled appropriately or would you implement it in a different way? Base on that function code, it should be null, otherwise, next step is exceptional?
""adapter.features"" @whatisor are you executing this code in the Node.js environment and seeing runtime errors, or is this a compile-time error (like from TypeScript or Webpack)? Not clear to me from #29916.

I'm not sure that `backend.init( renderer )` should be making efforts to avoid runtime exceptions, if running in an environment where neither WebGL nor WebGPU exists. I would support fixes that avoid build-time errors, and run-time errors in module scope. But if you are initializing and using a renderer in Node.js, a runtime exception is to be expected. > I'm not sure that backend.init( renderer ) should be making efforts to avoid runtime exceptions, if running in an environment where neither WebGL nor WebGPU exists

I agree, I think we should be throwing an error here, it doesn't make much sense to me to proceed with an empty object as an adapter. @donmccurdy it is compile error.
We also need to fix three\examples\jsm\capabilities\WebGPU.js with global and await.
So, we should return null and (exception is next step as current)?
 > three\examples\jsm\capabilities\WebGPU.js

Capabilities should be optional, it should be possible to use `WebGPURenderer` without global await. https://github.com/mrdoob/three.js/pull/29218 can we do same thing with webgl to avoid await?
https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext

=> No, we still need to await for real adapter. I guess browser need to improve this part. Could we remove this? It is inside a function that will never be executed by the adapter return null in this case. I guess the issue is that it's a compiler error, not a runtime error? I wish we knew what in the Next.js stack is doing compile-time checks on dependencies, and what its requirements are. Avoiding all references to browser globals is a pretty tall order for a large library relying heavily on Web APIs. :/  The compiler throwing an error for a global variable inside a function seems strange to say the least, since a variable can be declared at the global level after the function declaration. Yeah, I'm not sure why... trying to reproduce the issue:

- https://github.com/mrdoob/three.js/issues/29916#issuecomment-2487126519 I think it is this one:
https://react.dev/reference/react/StrictMode"
29881,2024-11-14T15:24:47Z,2024-11-23T18:26:57Z,sunag,5,8,7,395,23,3,0,[],184.0,0,1041542.0,0,0,0,0,2618889.658139,,0,7,1,False,"['github-actions[bot]', 'Mugen87', 'cmhhelgeson', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.81 <br> **133.76** | 483.66 <br> **134** | +856 B <br> **+239 B** |
| WebGPU Nodes | 482.27 <br> **133.66** | 483.13 <br> **133.9** | +856 B <br> **+237 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.87 <br> **149.23** | 550.96 <br> **149.22** | +93 B <br> **-8 B** |
| WebGPU Nodes | 506.75 <br> **138.95** | 506.84 <br> **138.94** | +93 B <br> **-10 B** | This is a great encapsulation of the existing storage buffer functionality. Maybe you're still planning on adding this, but would users still have the ability to specify their storage node as an atomic? The PR does not remove the functionality of `storage()`, as array is storage, it could be used like: `array().toAtomic()`. I'm thinking about renaming `array` to `vertexArray` or `attributeArray`. I have a feeling this might confuse users since `uniformArray` has a similar purpose. In that case I vote for `attributeArray()`.",,"**Description**

Node allows the addition of anonymous attributes, so we don't need to link it to geometry for different effects. This also allows us to simplify the code for whoever is creating their shaders, making the process much simpler, closer to what would we do in conventional (non-gpu) JS code.

I made a revision so that `toReadOnly()` can be automatically applied to WebGPU if it is not in the compute shader, simplifying the process.

Common usage would be `attributeArray( count|array, type )` or  `instancedArray( count|array, type )` can be seen in the example below.

## `webgpu_compute_birds` example

### New approach
```js
// Labels applied to storage nodes and uniform nodes are reflected within the shader output,
// and are useful for debugging purposes.
				
const positionStorage = attributeArray( positionArray, 'vec3' ).label( 'positionStorage' );
const velocityStorage = attributeArray( velocityArray, 'vec3' ).label( 'velocityStorage' );
const phaseStorage = attributeArray( phaseArray, 'float' ).label( 'phaseStorage' );
```

### Previous approach

```js
// Create storage buffer attributes.

const positionBufferAttribute = new THREE.StorageBufferAttribute( positionArray, 3 );
const velocityBufferAttribute = new THREE.StorageBufferAttribute( velocityArray, 3 );
const phaseBufferAttribute = new THREE.StorageBufferAttribute( phaseArray, 1 );

// Labels applied to storage nodes and uniform nodes are reflected within the shader output,
// and are useful for debugging purposes.

// Access storage buffer attribute data from within shaders with a StorageNode.

const positionStorage = storage( positionBufferAttribute, 'vec3', positionBufferAttribute.count ).label( 'positionStorage' );
const velocityStorage = storage( velocityBufferAttribute, 'vec3', velocityBufferAttribute.count ).label( 'velocityStorage' );
const phaseStorage = storage( phaseBufferAttribute, 'float', phaseBufferAttribute.count ).label( 'phaseStorage' );

// Create read-only storage nodes. Storage nodes can only be accessed outside of compute shaders in a read-only state.

const positionRead = storageObject( positionBufferAttribute, 'vec3', positionBufferAttribute.count ).toReadOnly();
const velocityRead = storageObject( velocityBufferAttribute, 'vec3', velocityBufferAttribute.count ).toReadOnly();
const phaseRead = storageObject( phaseBufferAttribute, 'float', phaseBufferAttribute.count ).toReadOnly();
```","## Unused variable, import, function or class

Unused import instancedArray.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3310) ## Unused variable, import, function or class

Unused import storage.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3309) ## Unused variable, import, function or class

Unused import storage.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3311) ## Unused variable, import, function or class

Unused import storage.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/3312) @sunag The example throws a runtime error right now since `setPBO()` does not exist:

> Uncaught (in promise) TypeError: waveNode.setPBO is not a function
    at init (webgpu_compute_audio.html:107:14) Commented out the line for now: https://github.com/mrdoob/three.js/pull/29972

The effect in WebGL 2 does not sound correct though. It seems it was necessary to comment out the example because the WebGL 2 version is broken with this PR. The following WebGL warning occurs:

> WebGL warning: drawArraysInstanced: Vertex fetch requires 147456, but attribs only supply 16384.
 My idea was to release another PR after this for deprecating `storageObject()`, I hope to do it this week. The fallback was working but with differences even before the PR, as you can see in the image, after a few seconds in the WebGL2 version the birds are concentrated in the center, in the WebGPU version they spread.

![image](https://github.com/user-attachments/assets/5f0f272e-3804-4481-85b8-8c62fac3a676)"
29970,2024-11-26T06:43:13Z,2024-11-26T10:35:10Z,RenaudRohlinger,1,0,2,62,1,1,1,[],186.0,0,13917.0,0,0,0,0,2641009.763711,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.51 <br> **134.22** | 483 <br> **134.08** | -514 B <br> **-140 B** |
| WebGPU Nodes | 482.98 <br> **134.13** | 482.46 <br> **133.98** | -514 B <br> **-145 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.64 <br> **149.58** | 552.12 <br> **149.43** | -514 B <br> **-151 B** |
| WebGPU Nodes | 508.52 <br> **139.29** | 508 <br> **139.14** | -514 B <br> **-149 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29857 #29940

**Description**

This PR removes the patch introduced in [#29857](https://github.com/mrdoob/three.js/pull/29857), as the underlying issue is specific to WebGPU and will be resolved through [gpuweb/gpuweb#4941](https://github.com/gpuweb/gpuweb/pull/4941).

The logic has been streamlined by leveraging mapState and ensuring all pending work is completed using `await this.device.queue.onSubmittedWorkDone(); `(seems to be necessary as compute shading resolves too quickly).

*This contribution is funded by [Utsubo](https://utsubo.com)*",
29972,2024-11-26T09:21:52Z,2024-11-26T09:24:57Z,Mugen87,0,0,1,18,1,0,0,[],,0,1296.0,0,0,0,0,2644112.426189,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29881#discussion_r1858101062

**Description**

Refactors the start of the example to avoid the below Web Audio warning.

> webgpu_compute_audio.html:84 The AudioContext was not allowed to start. It must be resumed (or created) after a user gesture on the page. https://goo.gl/7K7WLu

Also comments out the problematic `setPBO()` call mentioned in #29881 (the sound effect in WebGL 2 isn't correct though).",
29967,2024-11-26T02:01:32Z,2024-11-26T03:30:42Z,holtsetio,4,0,2,17,1,1,1,[],187.0,0,28139.0,0,0,0,0,2643689.519111,,0,2,1,False,"['github-actions[bot]', 'RenaudRohlinger']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.41 <br> **134.17** | 483.51 <br> **134.22** | +100 B <br> **+51 B** |
| WebGPU Nodes | 482.88 <br> **134.07** | 482.98 <br> **134.13** | +100 B <br> **+54 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.54 <br> **149.53** | 552.64 <br> **149.58** | +100 B <br> **+48 B** |
| WebGPU Nodes | 508.42 <br> **139.24** | 508.52 <br> **139.29** | +100 B <br> **+47 B** | Good catch! Thanks!

Related PR:
https://github.com/mrdoob/three.js/pull/27103 Some additional context:

https://www.w3.org/TR/webgpu/#dom-gpuqueue-writebuffer

> If data is an [ArrayBuffer](https://webidl.spec.whatwg.org/#idl-ArrayBuffer) or [DataView](https://webidl.spec.whatwg.org/#idl-DataView), let the element type be ""byte"". Otherwise, data is a TypedArray; let the element type be the type of the TypedArray.

Which means that [ArrayBuffer](https://webidl.spec.whatwg.org/#idl-ArrayBuffer) or [DataView](https://webidl.spec.whatwg.org/#idl-DataView) still require ` * array.BYTES_PER_ELEMENT`.

I suggest we add a condition `const isTypedArray = ArrayBuffer.isView( attribute.array ) && attribute.array instanceof DataView !== true` to handle both case. Updated the PR consequently.",,"Related issue: #29966

**Description**

When using updateAttribute() with a range, the range start and count were wrongfully multiplied by array.BYTES_PER_ELEMENT before calling writeBuffer(), even though the writeBuffer() function expects the range start and count as number of typed array elements, not as bytes.",
29960,2024-11-25T07:49:01Z,2024-11-26T09:08:04Z,Byongho96,3,2,2,38,1,2,1,[],183.0,0,91143.0,0,0,0,0,2646237.785021,,0,2,1,False,"['github-actions[bot]', 'mrdoob', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.15 <br> **134.15** | 483.15 <br> **134.15** | +0 B <br> **+0 B** |
| WebGPU Nodes | 482.62 <br> **134.06** | 482.62 <br> **134.06** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.62 <br> **111.98** | 464.62 <br> **111.98** | +0 B <br> **+0 B** |
| WebGPU | 552.28 <br> **149.51** | 552.28 <br> **149.51** | +0 B <br> **+0 B** |
| WebGPU Nodes | 508.16 <br> **139.22** | 508.16 <br> **139.22** | +0 B <br> **+0 B** | I have always hesitated with adding `clone()` and `copy()` to audio classes since you are never able to copy the exact same state of the audio to another object. 

Granted, the derived methods from `Object3D` are not useful right now so it seems the proposed versions of the PR are an improvement. > Granted, the derived methods from `Object3D` are not useful right now so it seems the proposed versions of the PR are an improvement.

+1",,"This PR addresses issues with the `Audio` class's `clone` and `copy` methods.

**Description**

The `Object3D`'s `clone` method, inherited by `Audio`, creates a new instance without passing additional parameters. This causes errors when cloning an `Audio` object, as the `listener` is mandatory for its creation.

**Proposed Solution**
The `clone` method has been overridden to align with the expected behavior: reusing the existing `listener` when creating a new `Audio` instance.

The `copy` method has been overridden to correctly handle properties specific to the `Audio` class, ensuring all relevant data is properly transferred.

**Exception Handling for `sourceType`**
* `'buffer'`:  
  The `play` method regenerates the `source` internally using `context.createBufferSource`.
*  `'audioNode'`, `'mediaNode'`, or `'mediaStreamNode'`:    
  These source types are single-use and cannot be reused across multiple connections. A warning is logged, and these sources are excluded from the copy process to prevent misuse.

**Demo of the feature with buffer souce**  
before  
<video src=""https://github.com/user-attachments/assets/6328f09f-92ec-48d9-a8a1-cee83549b2c9"" />

after  
<video src=""https://github.com/user-attachments/assets/415f841d-4bcb-414c-bcfd-541d6c55ccc9"" />




","I understand you have left out some properties for functional purpose but why don't you honor `filters` in `copy()`? To be honest, I wasn’t sure if different Audios were sharing the same Context. But after looking at `AudioContext`, it seems that a single context was being reused. 55faa9badb884add2a6d97e637d370df0a12e9b2"
29965,2024-11-25T15:32:01Z,2024-11-25T15:40:23Z,Mugen87,0,0,1,3,1,0,0,[],,0,503.0,0,0,0,0,2709098.31292,,0,1,1,False,[],,,"Related issue: see https://github.com/mrdoob/three.js/pull/29919#issuecomment-2498323719

**Description**

The PR fixes the top-level usage of `navigator` as suggested in #29919.",
29959,2024-11-25T05:18:40Z,2024-11-25T13:56:49Z,sunag,1,0,4,58,1,0,0,['WebGPU'],180.0,0,31092.0,0,0,0,0,2715310.416073,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.15 <br> **134.15** | 483.41 <br> **134.17** | +260 B <br> **+17 B** |
| WebGPU Nodes | 482.62 <br> **134.06** | 482.88 <br> **134.07** | +260 B <br> **+15 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 552.25 <br> **149.49** | 552.51 <br> **149.51** | +260 B <br> **+26 B** |
| WebGPU Nodes | 508.13 <br> **139.2** | 508.39 <br> **139.23** | +260 B <br> **+24 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29951, https://github.com/mrdoob/three.js/pull/29942

**Description**

This PR improves backwards compatibility, even if the device is not initialized it returns the texture it will later use to generate the PMREM but keep the warnings.

- [x] Add optional `renderTarget` in `fromScene()`
- [x] Return the `RenderTarget` if asynchronous calls necessary instead of `Promise`.

![image](https://github.com/user-attachments/assets/28dfbdb4-9145-4659-9796-e571beed7c7a)",
29956,2024-11-24T23:15:54Z,2024-11-25T09:51:27Z,rotu,3,0,4,4,1,0,0,[],106.0,0,38133.0,0,0,0,0,2730036.727046,,0,4,1,False,"['github-actions[bot]', 'rotu', 'Mugen87']","It may be appropriate to also emit a warning or to also set the draw range to only the newly set positions. ### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.15 <br> **134.15** | 483.15 <br> **134.15** | +0 B <br> **+0 B** |
| WebGPU Nodes | 482.62 <br> **134.06** | 482.62 <br> **134.06** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.62 <br> **111.98** | +25 B <br> **+17 B** |
| WebGPU | 552.25 <br> **149.49** | 552.28 <br> **149.51** | +25 B <br> **+17 B** |
| WebGPU Nodes | 508.13 <br> **139.2** | 508.16 <br> **139.22** | +25 B <br> **+17 B** | > It may be appropriate to also emit a warning or to also set the draw range to only the newly set positions.

If the developer intentionally wants to update just a part of the position buffer but rendering the entire range, updating draw range or emitting a warning would be confusing though. I think the PR is fine as it is.",,"**Description**

https://github.com/mrdoob/three.js/pull/29696 introduced a crash condition where calling `BufferGeometry.setFromPoints` would cause a crash like `three.module.js:10894 Uncaught TypeError: Cannot read properties of undefined (reading 'x')` if trying to set fewer points than is in the `position` attribute.",
29958,2024-11-25T03:23:17Z,2024-11-25T03:43:29Z,sunag,0,0,1,96,3,0,0,[],,0,1215.0,0,0,0,0,2752112.053801,,0,1,1,False,[],,,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29928

**Description**

Fixed issues reported here: https://github.com/mrdoob/three.js/issues/29928
",
29957,2024-11-25T03:14:07Z,2024-11-25T03:24:07Z,sunag,1,0,1,10,1,0,0,[],191.0,0,603.0,0,0,0,0,2753274.320233,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.14 <br> **78.99** | 339.14 <br> **78.99** | +0 B <br> **+0 B** |
| WebGPU | 483.12 <br> **134.14** | 483.15 <br> **134.15** | +32 B <br> **+11 B** |
| WebGPU Nodes | 482.58 <br> **134.04** | 482.62 <br> **134.06** | +32 B <br> **+11 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 552.25 <br> **149.49** | 552.25 <br> **149.49** | +0 B <br> **+0 B** |
| WebGPU Nodes | 508.13 <br> **139.2** | 508.13 <br> **139.2** | +0 B <br> **+0 B** |",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29851

**Description**

Returns the texture automatically if the input is a `pass()`.",
29911,2024-11-16T20:04:50Z,2024-11-16T20:36:20Z,sunag,1,0,3,71,5,0,0,[],180.0,0,696267.0,0,0,0,0,2774568.63061,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 478.22 <br> **132.63** | 478.37 <br> **132.7** | +153 B <br> **+64 B** |
| WebGPU Nodes | 477.68 <br> **132.51** | 477.84 <br> **132.58** | +153 B <br> **+69 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.95 <br> **148.2** | 547.04 <br> **148.23** | +93 B <br> **+34 B** |
| WebGPU Nodes | 502.83 <br> **137.91** | 502.93 <br> **137.95** | +93 B <br> **+48 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29071

**Description**

Introduce `instance()` for custom use.

```js
mesh = new THREE.Mesh( geometry, material );
mesh.count = count;

instanceMatrix = new THREE.InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );
instanceMatrix.setUsage( THREE.DynamicDrawUsage );

mesh.material.positionNode = Fn( ( { object } ) => {

	// object is the mesh here
	// .append() will run instance() immediately, appying instanceMatrix transform in positionLocal and normalLocal
	// this way you can get positionLocal before or after instance(()
	instance( object.count, instanceMatrix ).append();

	return positionLocal;

} )();

scene.add( mesh );

// update matrix

dummy.matrix.toArray( instanceMatrix.array, i ++ * 16 );
```",
29954,2024-11-24T16:58:17Z,2024-11-24T17:47:50Z,renovate[bot],0,0,1,6,1,0,0,[],,0,3000.0,0,0,0,0,2787828.950323,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `ea9e4e3` -> `f09c1c0` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS4xOS4wIiwidXBkYXRlZEluVmVyIjoiMzkuMTkuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29955,2024-11-24T16:58:42Z,2024-11-24T17:47:41Z,renovate[bot],0,0,1,157,1,0,0,[],,0,2974.0,0,0,0,0,2787830.110692,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [magic-string](https://redirect.github.com/rich-harris/magic-string) | [`0.30.12` -> `0.30.13`](https://renovatebot.com/diffs/npm/magic-string/0.30.12/0.30.13) | [![age](https://developer.mend.io/api/mc/badges/age/npm/magic-string/0.30.13?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/magic-string/0.30.13?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/magic-string/0.30.12/0.30.13?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/magic-string/0.30.12/0.30.13?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.27.2` -> `4.27.4`](https://renovatebot.com/diffs/npm/rollup/4.27.2/4.27.4) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.27.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.27.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.27.2/4.27.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.27.2/4.27.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rich-harris/magic-string (magic-string)</summary>

### [`v0.30.13`](https://redirect.github.com/rich-harris/magic-string/blob/HEAD/CHANGELOG.md#03013-2024-11-18)

[Compare Source](https://redirect.github.com/rich-harris/magic-string/compare/v0.30.12...v0.30.13)

##### Features

-   Add support for sourcemap `debugId` property ([#&#8203;292](https://redirect.github.com/rich-harris/magic-string/issues/292)) ([ef531a8](https://redirect.github.com/rich-harris/magic-string/commit/ef531a80c0c3b92d37e07f4c07bf4732b32153a1))

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.27.4`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4274)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.27.3...v4.27.4)

*2024-11-23*

##### Bug Fixes

-   Update bundled magic-string to support sourcemap debug ids ([#&#8203;5740](https://redirect.github.com/rollup/rollup/issues/5740))

##### Pull Requests

-   [#&#8203;5740](https://redirect.github.com/rollup/rollup/pull/5740): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])

### [`v4.27.3`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4273)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.27.2...v4.27.3)

*2024-11-18*

##### Bug Fixes

-   Revert object property tree-shaking for now ([#&#8203;5736](https://redirect.github.com/rollup/rollup/issues/5736))

##### Pull Requests

-   [#&#8203;5736](https://redirect.github.com/rollup/rollup/pull/5736): Revert object tree-shaking until some issues have been resolved ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS4xOS4wIiwidXBkYXRlZEluVmVyIjoiMzkuMTkuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29951,2024-11-23T21:48:27Z,2024-11-24T03:11:23Z,sunag,1,0,2,54,1,0,0,[],173.0,0,19382.0,0,0,0,0,2840438.45878,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 483.69 <br> **134.01** | 484.71 <br> **134.2** | +1.02 kB <br> **+191 B** |
| WebGPU Nodes | 483.16 <br> **133.9** | 484.18 <br> **134.1** | +1.02 kB <br> **+192 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.99 <br> **149.23** | 552.01 <br> **149.42** | +1.02 kB <br> **+194 B** |
| WebGPU Nodes | 506.87 <br> **138.94** | 507.89 <br> **139.13** | +1.02 kB <br> **+192 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29942

**Description**

Based on the [PR](https://github.com/mrdoob/three.js/pull/29942) we can see that the `webgl_animation_keyframes` example emits a lot of error messages that may not make much sense to the user and it doesn't load the IBL properly.

![image](https://github.com/user-attachments/assets/501f2253-c506-4271-979b-dd0483dc5b5a)

This is because `PMREMGenerator` is being used without the WebGPU Backend being initialized. This PR aims to improve the error messages by guiding the user to replace functions like `pmremGenerator.fromScene()` with `pmremGenerator.fromSceneAsync()`.

After this PR.

![image](https://github.com/user-attachments/assets/726e9593-a592-43c4-a8dd-cdc8f8f4ba35)

The user can fix it using:

```js
scene.environment = ( await pmremGenerator.fromSceneAsync( new RoomEnvironment(), 0.04 ) ).texture;
```

![image](https://github.com/user-attachments/assets/082c4a6e-9fc1-4902-af82-115f201c5eba)
",
29950,2024-11-23T18:16:17Z,2024-11-23T18:27:29Z,sunag,1,0,1,4,1,0,0,[],189.0,0,676.0,0,0,0,0,2871874.81169,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.81 <br> **133.76** | 482.84 <br> **133.77** | +28 B <br> **+8 B** |
| WebGPU Nodes | 482.27 <br> **133.66** | 482.3 <br> **133.67** | +28 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.87 <br> **149.23** | 550.9 <br> **149.24** | +28 B <br> **+8 B** |
| WebGPU Nodes | 506.75 <br> **138.95** | 506.78 <br> **138.96** | +28 B <br> **+8 B** |",,"**Description**

Fix type conversion if used `varying` in WebGL Backend.

```js
material.colorNode = uniform( color( 0x00ff00 ) ).varying();
```

/cc @brunosimon ",
29947,2024-11-23T11:14:26Z,2024-11-23T16:20:37Z,Mugen87,1,0,1,22,1,0,0,[],177.0,0,18371.0,0,0,0,0,2879490.957737,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.5 <br> **133.72** | 482.81 <br> **133.76** | +311 B <br> **+36 B** |
| WebGPU Nodes | 481.96 <br> **133.62** | 482.27 <br> **133.66** | +311 B <br> **+37 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.56 <br> **149.19** | 550.87 <br> **149.23** | +311 B <br> **+36 B** |
| WebGPU Nodes | 506.44 <br> **138.91** | 506.75 <br> **138.95** | +311 B <br> **+36 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29898#issuecomment-2477948089

**Description**

The PR adds `initTexture()` in a snyc and async version so it is possible to avoid the texture decode overhead when textures are used in the first frame. 

I've verified the implementation with the WebGPU and WebGL backend by making sure the below texture decode metric does not appear in Chrome's performance analysis tool when rendering the first frame:

<img width=""148"" alt=""image"" src=""https://github.com/user-attachments/assets/2c5a7d52-2b2d-45ce-b11f-4dbd2cbc7001"">
 ",
29946,2024-11-22T14:33:01Z,2024-11-23T10:03:41Z,mrxz,0,0,1,31,5,1,1,[],,0,70240.0,0,0,0,0,2902108.323823,,0,1,1,False,[],,,"**Description**

Some of the equals functions in the unit tests (e.g. `matrixEquals4`) incorrectly compared signed delta values to the tolerance threshold, instead of absolute values. As a result differences where `b > a` would never ""exceed"" the tolerance and always pass.

Additionally the `bufferAttributeEquals` failed to actually compare the contents of the attributes. After resolving this issue, it became clear that the `computeVertexNormals (indexed)` test was broken. I tried to find out what the original intention of the test was but it seems it was introduced in a broken state in https://github.com/mrdoob/three.js/pull/12354. As such, I've taken the liberty to tweak it so that:

- There are only 6 vertices instead of 7 (ensuring non-indexed `computeVertexNormals` can actually compute all values)
- The index buffer uses the same two triangles as non-indexed, but in a counter-clockwise order, so that normals get flipped.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Fern Solutions](https://fern.solutions/)*
",
29945,2024-11-22T10:34:48Z,2024-11-22T10:51:24Z,Mugen87,1,0,1,2,1,0,0,[],179.0,0,996.0,0,0,0,0,2985645.541271,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.5 <br> **133.73** | 482.5 <br> **133.72** | -3 B <br> **-1 B** |
| WebGPU Nodes | 481.97 <br> **133.63** | 481.96 <br> **133.62** | -3 B <br> **-2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.56 <br> **149.2** | 550.56 <br> **149.19** | -3 B <br> **-2 B** |
| WebGPU Nodes | 506.44 <br> **138.91** | 506.44 <br> **138.91** | -3 B <br> **-1 B** |",,"Related issue: #29925

**Description**

When investigating #29925, I've noticed the color space of video textures is broken with the `WebGLBackend`. Turns out #29259 introduces a minor regression by not renaming `needsColorSpaceToLinearSRGB()` to `needsToWorkingColorSpace()` in `GLSLNodeBuilder`.
",
29944,2024-11-22T10:09:46Z,2024-11-22T10:20:45Z,Mugen87,1,0,1,2,1,0,0,[],186.0,0,659.0,0,0,0,0,2987484.944002,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.48 <br> **133.72** | 482.5 <br> **133.73** | +20 B <br> **+4 B** |
| WebGPU Nodes | 481.95 <br> **133.62** | 481.97 <br> **133.63** | +20 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.54 <br> **149.19** | 550.56 <br> **149.2** | +20 B <br> **+5 B** |
| WebGPU Nodes | 506.42 <br> **138.91** | 506.44 <br> **138.91** | +20 B <br> **+5 B** |",,"Fixed #29925.

**Description**

`Texture.dispose()` currently produces a runtime error with `VideoTexture` and `WebGPURenderer` since video textures are treated as external textures and thus don't have an instance of `GPUTexture`.",
29943,2024-11-22T01:45:07Z,2024-11-22T02:00:05Z,WestLangley,1,0,1,96,20,0,0,[],191.0,0,5616.0,0,0,0,0,3012808.423088,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.48 <br> **133.72** | 482.48 <br> **133.72** | +0 B <br> **+0 B** |
| WebGPU Nodes | 481.95 <br> **133.62** | 481.95 <br> **133.62** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.54 <br> **149.19** | 550.54 <br> **149.19** | +0 B <br> **+0 B** |
| WebGPU Nodes | 506.42 <br> **138.91** | 506.42 <br> **138.91** | +0 B <br> **+0 B** |",,"Follow-on to #29929


",
29404,2024-09-13T19:27:54Z,2024-11-08T09:01:24Z,CodyJasonBennett,30,6,27,804,6,5,4,[],1373.0,0,6005018.0,0,0,0,0,2997639.813218,,0,27,1,False,"['RenaudRohlinger', 'donmccurdy', 'Mugen87', 'CodyJasonBennett', 'mrdoob', 'github-actions[bot]', 'trusktr', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.29 <br> **171.01** | 338.07 <br> **78.63** | -352.22 kB <br> **-92.38 kB** |
| WebGPU | 815.35 <br> **219.78** | 467.13 <br> **129.1** | -348.22 kB <br> **-90.68 kB** |
| WebGPU Nodes | 814.86 <br> **219.65** | 466.83 <br> **129.03** | -348.03 kB <br> **-90.62 kB** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 463.4 <br> **111.57** | +93 B <br> **-314 B** |
| WebGPU | 538.09 <br> **145.28** | 538.09 <br> **145.28** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.2 <br> **135.15** | 494.2 <br> **135.15** | +0 B <br> **+0 B** | I think this looks like a good approach! Shared 'core' that the WebGL and WebGPU entrypoints can use, and that doesn't need to be exposed as a separate public entrypoint to users.

<details>
<summary>(obsolete / resolved issue)</summary>

Minor thing, but I'm seeing some duplication of build artifacts when running `npm run build` locally:

```
> ls ./build

three.cjs                 three.module.js           three.webgpu.min.js
three.core.min2.js        three.module.min.js       three.webgpu.nodes.js
three.core2.js            three.webgpu.js           three.webgpu.nodes.min.js
```

</details> Should I just remove the build artifacts from this PR or regenerate them? Removing them is better 👍 . @mrdoob @sunag Fixing #29156 is crucial for the community so if there are no objections from your side let's merge this  so we have a bit of room to `r170`.

The only workflow that is affected by this change is when devs copy builds around since there is `three.core.js` now. However, this is not a workflow that we promote in our installation guide (1. npm/build tool, 2. CDN). So I think this is good to go. I like the changes 👍  I tried this PR on a large-scale project, and overall, it works well. Auto-complete functions correctly, TypeScript issues are resolved, and the only refactoring I had to perform was updating imports to use `three/webgpu` for WebGPU-specific code (similar to how we previously handled `three/tsl`).

For example:
```js
import { Matrix4, WebGPURenderer,  StorageInstancedBufferAttribute } from 'three';
// becomes -->
import { Matrix4 } from 'three';
import { WebGPURenderer,  StorageInstancedBufferAttribute } from 'three/webgpu';
```
Which makes perfect sense.

However, this PR highlighted an existing issue, in most case addons code that relies on `./build/three.webgpu.js` won't be resolved out-of-the-box in developers' projects. For example, when using Vite, the following error occurs:
```shell
✘ [ERROR] No matching export in ""../node_modules/.pnpm/three@file+frontend+three-0.170.0-dev.tgz/node_modules/three/build/three.module.js"" for import ""Line2NodeMaterial""

    ../node_modules/.pnpm/three@file+frontend+three-0.170.0-dev.tgz/node_modules/three/examples/jsm/lines/webgpu/LineSegments2.js:12:1:
      12 │   Line2NodeMaterial
         ╵   ~~~~~~~~~~~~~~~~~
✘ [ERROR] No matching export in ""../node_modules/.pnpm/three@file+frontend+three-0.170.0-dev.tgz/node_modules/three/build/three.module.js"" for import ""Line2NodeMaterial""

    ../node_modules/.pnpm/three@file+frontend+three-0.170.0-dev.tgz/node_modules/three/examples/jsm/lines/webgpu/Line2.js:4:9:
      4 │ import { Line2NodeMaterial } from 'three';
```

Only a small portion of addon code relies on the WebGPU build. We just need to notify that these codes are part of the webgpu build through correct imports. I will submit a PR with a patch so we can merge it after this one.

Other than that, everything is good to go, and working with the WebGPURenderer feels even more amazing now, especially with auto-complete and TypeScript! Well, seems like we all agree to move on with this? Who's gonna take the lead and merge this (and #29644 next)? @Mugen87 @sunag  😄  I was just starting to build a collection here.

<img alt=""{B5E67FE8-FA97-46FD-8977-875A9FF8B95E}"" src=""https://github.com/user-attachments/assets/2cdb7bf3-5596-4221-9cc7-5a1807cda813"">
 > Well, seems like we all agree to move on with this? Who's gonna take the lead and merge this (and https://github.com/mrdoob/three.js/pull/29644 next)?

Sorry to ask this a little late, but can't we merge the class structure and then think about splitting the imports in the examples later? 

The syntax below changes a lot to be used as main in the examples, I haven't been able to dedicate myself to it yet to analyze other possibilities.
```js
import * as THREE from 'three';
import { WebGPURenderer } from 'three/webgpu'
``` > The syntax below changes a lot to be used as main in the examples, I haven't been able to dedicate myself to it yet to analyze other possibilities.
> ```js
> import * as THREE from 'three';
> import { WebGPURenderer } from 'three/webgpu'
> ```

Maybe I didn't clearly explain my point in the previous message. This PR doesn't change the imports in the examples, as we're still manually overriding the import map with ""three"": ""../build/three.webgpu.js"", which is essentially a workaround. So, the syntax:
```html
<script type=""importmap"">
	{
		""imports"": {
			""three"": ""../build/three.webgpu.js""
		}
	}
</script>
import * as THREE from 'three';
const renderer = THREE.WebGPURenderer()
```
continues to function without any issues, as seen in this PR, since none of the Puppeteer examples break. /cc @sunag


What I intended to highlight is that with this PR, we now have the option to use the correct imports for WebGPU without relying on the ""three"": ""../build/three.webgpu.js"" override, allowing us to simplify the import structure going forward. > Well, seems like we all agree to move on with this? Who's gonna take the lead and merge this (and https://github.com/mrdoob/three.js/pull/29644 next)?

 @mrdoob should definitely approve this change. The type of builds and the import structure is a fundamental aspect of the library and I'm not sure how he feels about this approach.

I understand the PR is a great solution for our current promoted workflows (npm, CDN) but it moves away from the idea to have a renderer with its core classes in a single self-contained build file.  Regarding #29644 I'm not sure it's a good user experience to have `three`, `three/webgpu` and `three/tsl`. Hopefully we can merge `three/webgpu` and `three/tsl` somehow so the imports get not too complicated for users. If you really need a compromise, we can bundle everything into the minified `three.module.min.js` and `three.webgpu.min.js` so they are self-contained, but continue code-splitting for non-minified bundles which NPM will accept. That assumes you'd only use one minified bundle at a time, as Renaud indicated for examples. I'm personally not a fan of example code or imports themselves diverging too much based on environment (CDN, bundler), but that is a casualty of this approach or effective workaround.

```js
<script type=""importmap"">
	{
		""imports"": {
			""three"": ""../build/three.webgpu.min.js""
		}
	}
</script>
import * as THREE from 'three';
const renderer = THREE.WebGPURenderer();
```
```js
// npm i three
import * as THREE from 'three/webgpu';
const renderer = THREE.WebGPURenderer();
``` It seems the examples can't be properly debugged and inspected if the builds are minified. Ideally, they use an unminified bundle.

That said, I'm personally fine with the initial approach you have implemented. I'm just curious to see how @mrdoob evaluates the PR and the need for self-contained bundles. Is there a reason we don't emit sourcemaps? That would have errors in all bundles point back to source code and allow tracing in Lighthouse. @CodyJasonBennett just checking you're aware that the sourcemaps are currently built with `yarn dev` but not `yarn build` — Are you asking about building and  publishing sourcemaps to npm as well? > @mrdoob should definitely approve this change. The type of builds and the import structure is a fundamental aspect of the library and I'm not sure how he feels about this approach.

> That said, I'm personally fine with the initial approach you have implemented. I'm just curious to see how @mrdoob evaluates the PR and the need for self-contained bundles.

Gentle ping @mrdoob 😊. This PR has received approval from most collaborators, but before proceeding, we would really appreciate your input. The import structure and build types are critical to the library's architecture, and we'd like to understand your perspective on the approach:

Self contained:
```js
// npm i three
import * as THREE from 'three/webgpu';
const renderer = THREE.WebGPURenderer();
```
Or not:
```js
import * as THREE from 'three';
import { WebGPURenderer } from 'three/webgpu'
``` This update will still require people to update their build setups (or importmaps). The idea in https://github.com/mrdoob/three.js/issues/29156#issuecomment-2457694632 would fully avoid the requirement for build setups to be updated, while providing *optional* ways to achieve the same goals as this new `three/webgpu` import path. That alternative would make ecosystem migration easier. Updating a version number and using new APIs is inevitable, but having to also update build setups is a hassle that could be avoided. I elaborated in https://github.com/mrdoob/three.js/issues/29156#issuecomment-2458239359, but this is a gross misdiagnosis. The `src` code split sounds good to me 👌

The naming is becoming weird though. 

This would look better to me:

```
src/Constants.js
src/Core.js
src/Legacy.js
src/Three.js // do we still need this one?
src/Utils.js
src/WebGL.js
src/WebGPU.js
```

The `builds`, I'm not so sure...

What do you guys think of this?

```
builds/three.core.js
builds/three.webgl.js
builds/three.webgpu.js
builds/three.module.js
```

**three.core.js**:  Core
**three.webgl.js**: WebGLRenderer only
**three.webgpu.js**: WebGPURenderer only (And NodeMaterials only)
**three.module.js**: Core + WebGLRenderer + WebGPURenderer @mrdoob For `src/` files, I like your suggestion. For `build/` files, I would think of it in terms of `package.json#exports` entrypoints. It is probably [too soon](https://github.com/mrdoob/three.js/issues/29156#issuecomment-2458416329) for the `three` entrypoint to include WebGPURenderer. Something like this I would support...

- `three` -> Core + WebGLRenderer
- `three/webgpu` -> Core + WebGPURenderer + Nodes

... which could be implemented on top of `build/three.core.js`, `build/three.webgl.js`, and `build/three.webgpu.js` bundles, similar to what's in this PR but renamed slightly. Optionally there could be additional `three/core`, `three/webgl`, and `three/tsl` entrypoints... I don't feel strongly about any of those others at the moment. >It is probably [too soon](https://github.com/mrdoob/three.js/issues/29156#issuecomment-2458416329) for the three entrypoint to include WebGPURenderer. Something like this I would support...

Having used WebGPURenderer across all my projects for over a year, I fully agree with the concerns. Given the WebGPU API's ongoing instability, it seems premature to push this onto most Three.js developers, especially since many Three.js developers may not adopt WebGPURenderer for some time. Adding it now could undermine previous efforts to optimize bundle size through tree-shaking:

<img width=""394"" alt=""image"" src=""https://github.com/user-attachments/assets/f11e5fc3-d20f-42a5-8f61-7683fd0984a0"">

(see https://github.com/mrdoob/three.js/pull/29827)


A structure like this strikes a balanced approach:
> three -> Core + WebGLRenderer
> three/webgpu -> Core + WebGPURenderer + Nodes

This setup respects the longevity of `WebGLRenderer`, which is likely to remain in widespread use, while also providing a clear, separate path for `WebGPURenderer`. Merging both renderers into the same module would likely add unnecessary complexity, with `WebGLRenderer` and `WebGLBackend` coexisting in a confusing, overlapping space.

There’s no real benefit in bundling both `WebGLRenderer` and `WebGPURenderer` together in the same app, as they can’t communicate with each other. Furthermore simply switching `WebGLRenderer` to `WebGPURenderer` isn’t feasible either, given that the material systems are fundamentally different. I think the naming suggestion is a good one, as the example `Core.js` instead of `Three.core.js`.

Merging the two renderers into a single module could limit flexibility in the creation process. For example, in cases like `PMREMGenerator`, where we kept the same API/interface but internally moved from GLSL to TSL, this could pose challenges if we need to do it in other core classes. It may also make it more difficult to simply swap the renderer from `WebGLRenderer` to `WebGPURenderer`, along with other concerns already mentioned.

I would suggest moving forward with the renaming and merging the PR as proposed, and addressing this additional issue later if needed.
 > I would suggest moving forward with the renaming and merging the PR as proposed, and addressing this additional issue later if needed.

Absolutely. What has been suggested in https://github.com/mrdoob/three.js/pull/29404#issuecomment-2460102908 sounds good to me as well. https://github.com/mrdoob/three.js/pull/29404#issuecomment-2460102908 sounds good to me too 👍 Nice 🚀! Then I think we can merge this PR as it is? /cc @Mugen87 Yeah, let's start with this configuration. We can apply further updates with additional PRs if necessary. > ### 📦 Bundle size
>
> _Full ESM build, minified and gzipped._
>
> || Before | After | Diff |
> |:-:|:-:|:-:|:-:|
> | WebGL | 690.29 <br> **171.01** | 338.07 <br> **78.63** | -352.22 kB <br> **-92.38 kB** |

Hmm, how come the minified build is now -92.38 kB less? 🤔 I could imagine the script still measures the sizes based on a single build file and does not honor `three.core` so far. Ah, got it. I'll need to update that table again then...I will vote for Cody's approach here, as it keeps both the WebGL and WebGPU entrypoints minimal even when used from a CDN. 

Alternatively we could skip the shared 'three.core.js' file and have 'three.webgpu.js' import from 'three.module.js'. That's fine for the bundler users, but CDN users would get a lot of extra JavaScript when trying to use WebGPU. So that would presumably be more of a temporary stopgap.

Tested:

- compared build sizes before/after in production builds
- compared build sizes before/after in dev builds
- no dual package hazard in production builds in an application w/ Vite
- no dual package hazard in development builds in an application w/ Vite
","I will vote for Cody's approach here, as it keeps both the WebGL and WebGPU entrypoints minimal even when used from a CDN. 

Alternatively we could skip the shared 'three.core.js' file and have 'three.webgpu.js' import from 'three.module.js'. That's fine for the bundler users, but CDN users would get a lot of extra JavaScript when trying to use WebGPU. So that would presumably be more of a temporary stopgap.

Tested:

- compared build sizes before/after in production builds
- compared build sizes before/after in dev builds
- no dual package hazard in production builds in an application w/ Vite
- no dual package hazard in development builds in an application w/ Vite
","Fixed #29156

**Description**

Emits a build where `three/webgpu` re-exports from core to avoid user configuration or duplication. Each entrypoint will no longer bundle a unique copy of three.js but share a single copy.

To prevent future issues with tree-shaking (#28670), I've code split the common core and code specific to a backend.

```js
// src/Three.core.js -> build/three.core.js -> build/three.core.min.js
export { Vector3 } from './math/Vector3.js';

// window.__THREE__ check for duplication here
```
```js
// src/Three.js -> build/three.module.js -> build/three.module.min.js -> build/three.cjs

export * from './Three.core.js';
export { WebGLRenderer } from './renderers/WebGLRenderer.js';
```
```js
// src/Three.WebGPU.js -> build/three.webgpu.js -> build/three.webgpu.min.js

export * from './Three.core.js';
export { WebGPURenderer } from './renderers/webgpu/WebGPURenderer.js';
```
```js
// src/Three.WebGPU.Nodes.js -> build/three.webgpu.nodes.js -> build/three.webgpu.nodes.min.js

export * from './Three.core.js';
export { WebGPURenderer } from './renderers/webgpu/WebGPURenderer.Nodes.js';
```","Undid this change, but `three.webgpu.nodes.js` is unused, and duplicate with WebGPU (missing only the recent `BundleGroup` export). CI still measures WebGL, WebGPU, WebGPU + Nodes. Maybe it can measure the common core instead? The WebGPU Nodes version has a `.Nodes.js` suffix in the file name, it is not present.

```js
export { default as WebGPURenderer } from './renderers/webgpu/WebGPURenderer.Nodes.js';
``` Interesting, and it seems WebGPU Nodes doesn't export `BundleGroup`. I'm assuming that much is also a mistake, but good to know they aren't identical. This is split from building `three.webgpu.js` since Rollup emits hashed chunks, which are common with nodes. We transform core twice in isolating the two, but ideally we emit `three.core.js`, Rollup would know this is external, and would not attempt to codesplit further.

<img width=""255"" alt=""{3A00D018-E15A-4122-B462-210C681C2E2A}"" src=""https://github.com/user-attachments/assets/9abb939b-6573-46c3-a9e7-d73e280afc21""> Why do we need Renderer/Core-related classes like WebGPURenderer and StorageBufferAttribute in three/tsl? Wouldn't this cause confusion and redundancy between `three/webgpu` and `three/tsl`?


In the package, aren’t these exports essentially placeholders?
```js
    ""./webgpu"": ""./build/three.webgpu.js"",
    ""./tsl"": ""./build/three.webgpu.js""
```

Shouldn't it instead be:
```js
    ""./webgpu"": ""./build/three.webgpu.js"",
    ""./tsl"": ""./build/three.webgpu.nodes.js""
```
where tsl only extends three.webgpu by adding node functionality, without duplicating the core WebGPU classes? The build `/three.webgpu.nodes.js` wouldn't exactly be a TLS package, it's an alternative to the standard `WebGPURenderer`, but without the shaders of the injected materials https://github.com/mrdoob/three.js/pull/28328, https://github.com/mrdoob/three.js/pull/28328#issuecomment-2136541224. The project must include one or the other, never both.

"
29644,2024-10-14T07:30:44Z,2024-11-12T14:41:26Z,RenaudRohlinger,0,24,6,21,4,5,0,[],,0,3352976.0,0,0,0,0,3014312.514876,,0,6,1,False,[],,,"Related PR: #29404

**Description**
Following #29404, fixes WebGPU Addons resolution with bundlers that depends on WebGPURenderer related code which now bundled under `three/webgpu` instead of `three`.
Related comment: https://github.com/mrdoob/three.js/pull/29404#issuecomment-2410244871


*This contribution is funded by [Utsubo](https://utsubo.com)*
","As mentioned in #29404 I would favor just one import path, not two. Do you mind using `three/tsl` for now? Otherwise I would suggest we migrate from `three/tsl` to `three/webgpu` in all examples (and then ditch `three/tsl`). I guess we should replace `three/tsl` to `three/webgpu` in all examples and completely remove `three` from the webgpu examples to align with the new build? Sounds good to me. After investigating a bit the refactor I would suggest that first we merge this as it is to fix the current build, then we can refactor in a second time most of the webgpu addons that uses `three` and `three/tsl` internally before being able to remove `""three/tsl"": ""../build/three.webgpu.js"",` and dropping `""three"": ""../...""`.

For example:
```js
import { FileLoader, Loader, TextureLoader, RepeatWrapping } from 'three';

import { MeshBasicNodeMaterial, MeshPhysicalNodeMaterial } from 'three/webgpu';

import {
	float, bool, int, vec2, vec3, vec4, color, texture,
	positionLocal, positionWorld, uv, vertexColor,
	normalLocal, normalWorld, tangentLocal, tangentWorld,
	add, sub, mul, div, mod, abs, sign, floor, ceil, round, pow, sin, cos, tan,
	asin, acos, atan2, sqrt, exp, clamp, min, max, normalize, length, dot, cross, normalMap,
	remap, smoothstep, luminance, mx_rgbtohsv, mx_hsvtorgb,
	mix, split,
	mx_ramplr, mx_ramptb, mx_splitlr, mx_splittb,
	mx_fractal_noise_float, mx_noise_float, mx_cell_noise_float, mx_worley_noise_float,
	mx_transform_uv,
	mx_safepower, mx_contrast,
	mx_srgb_texture_to_lin_rec709,
	saturation,
	timerLocal, frameId
} from 'three/tsl';
```

in `jsm/loaders/MaterialXLoader.js` would need to become:
```js
import { FileLoader, Loader, TextureLoader, RepeatWrapping, MeshBasicNodeMaterial, MeshPhysicalNodeMaterial  } from 'three/webgpu';

import {
	float, bool, int, vec2, vec3, vec4, color, texture,
	positionLocal, positionWorld, uv, vertexColor,
	normalLocal, normalWorld, tangentLocal, tangentWorld,
	add, sub, mul, div, mod, abs, sign, floor, ceil, round, pow, sin, cos, tan,
	asin, acos, atan2, sqrt, exp, clamp, min, max, normalize, length, dot, cross, normalMap,
	remap, smoothstep, luminance, mx_rgbtohsv, mx_hsvtorgb,
	mix, split,
	mx_ramplr, mx_ramptb, mx_splitlr, mx_splittb,
	mx_fractal_noise_float, mx_noise_float, mx_cell_noise_float, mx_worley_noise_float,
	mx_transform_uv,
	mx_safepower, mx_contrast,
	mx_srgb_texture_to_lin_rec709,
	saturation,
	timerLocal, frameId
} from 'three/webgpu';
```
this involve updating the imports for all the webgpu addons code (mostly in https://github.com/mrdoob/three.js/issues/29295)

/cc @sunag (as I want to make sure if we drop `three/tsl`) by the way I realized we might need to keep the alias `""three"": ""../build/three.webgpu.js"",` in the example for addons such as GLTFLoader which is used by both renderers... @Mugen87 > I guess we should [1] replace three/tsl to three/webgpu in all examples and [2] completely remove three from the webgpu examples to align with the new build?

I agree with (1), but I don't think (2) is strictly necessary. At least with a bundler it wouldn't be, and I'd expect import maps to behave the same — see https://github.com/mrdoob/three.js/pull/29827#issuecomment-2463655481. Is there some reason we need to remove `three` imports from examples using WebGPU, or is that a stylistic preference? purely stylistic preference and to avoid confusion in the future as to what is `three` and what is `three/webgpu`, since they will both point to `""../build/three.webgpu.js""`. However, I’d suggest keeping it as is for now with both in the importmap (as I mentioned with the GLTFLoader case). Thanks! Sounds good to me. `three/tsl` is also a stylistic change? I wouldn't want to decide this without @mrdoob's opinion, we had a conversation about it not too long ago with @mrdoob https://github.com/mrdoob/three.js/pull/28650#issuecomment-2183949649. I'm hesitant to change something now and go back on it in a few months. Perhaps this will become clearer as we get closer to full migration? 
 Which is why I suggest to merge this PR for the moment to at least fix the build on bundlers.

This PR use the following importmap:
```js
""three"": ""../build/three.webgpu.js"",
""three/tsl"": ""../build/three.webgpu.js"",
""three/webgpu"": ""../build/three.webgpu.js"",
```
We can discuss about the import map style preferences when we get closer to full migration. Maybe I was not too clear about the current issue here. For example if a project currently use `InstancedPointsNodeMaterial` the bundler will break as it cannot resolve without the alias dirty trick `three` -> `three/webgpu` `InstancedPointsNodeMaterial` in `three`:
```js
import {
	Mesh,
	InstancedPointsNodeMaterial
} from 'three';
```
The new build implies that we should import it from `three/webgpu` instead:
```js
import { Mesh } from 'three';

import { InstancedPointsNodeMaterial } from 'three/webgpu';
``` For consistency, I think this PR should use `three/tsl` instead of `three/webgpu`. In other addons like the post processing nodes, we also import classes like `NodeMaterial` from `three/tsl`.

Whether we migrate to `three/webgpu` can be decided in a different PR. This PR is about fixing the builds tools but doing this should adhere the current import policy. Noted! Updated the PR consequently. The changes became very minimal which is indeed a good thing and simplify the import map of the examples. > In other addons like the post processing nodes, we also import classes like `NodeMaterial` from `three/tsl`.

Does that sound okay though? I feel like we should be using `three/tsl` for TSL only and not for materials. What was the original motivation to have `three/tsl` next to `three/webgpu`?

Maybe I'm too overcautious here but I fear having `three/tsl`, `three/webgpu` and `three` as distinct imports could make things a bit confusing for users (in the sense of ""what import do I use for what module""). Regarding usability, isn't having less imports as possible better? 

My current preference would be using `three/webgpu` instead of `three/tsl`. Importing the TSL modules over `three/webgpu` also implies you can only use TSL in context of `WebGPURenderer`, not `WebGLRenderer`.



  It's about clearer imports...

If we just did this:

```js
import * as THREE from 'three';
```

A developer could end up doing TSL like this:

```js
const material = new THREE.MeshBasicNodeMaterial( {
	// Use vertex positions to create atmosphere colors
	colorNode: THREE.varying(
		THREE.vec4(
			THREE.sub( 0.25, THREE.positionLocal.y ),
			THREE.sub( - 0.25, THREE.positionLocal.y ),
			THREE.add( 1.5, THREE.positionLocal.y ),
			1.0
		)
	),
	side: THREE.BackSide
} );
```

If, instead of `*`, they imported every thing they use then i could end up like this:

```js
import {
    add,
    attribute,
    BufferAttribute,
    BufferGeometry,
    cameraProjectionMatrix,
    cameraViewMatrix,
    Continue,
    cos,
    dot,
    float,
    Fn,
    IcosahedronGeometry,
    If,
    instanceIndex,
    length,
    Loop,
    mat3,
    max,
    Mesh,
    MeshBasicNodeMaterial,
    modelWorldMatrix,
    negate,
    NeutralToneMapping,
    normalize,
    positionLocal,
    property,
    sin,
    sqrt,
    storage,
    StorageBufferAttribute,
    storageObject,
    sub,
    uint,
    uniform,
    varying,
    vec4,
    WebGPURenderer
} from 'three';
```

And I think that's pretty messy...

So I was hoping we would be able to have all these TSL functions in its own `three.tsl.js` file and then the imports code could look like this:

```js
import { IcosahedronGeometry, Mesh, MeshBasicNodeMaterial, WebGPURenderer } from 'three';
import { Fn, If, sin, sqrt, storage, sub } from 'three/tsl';
```

In short, what @satelllte said: https://github.com/mrdoob/three.js/issues/29847#issuecomment-2468064438 Perhaps we can keep the Node System in the core and move TSL out. I just want to ensure we are aligned on this because we’ve been planning to move the Node System to the core for nearly a decade. Let me clarify the reasoning behind this approach:

When I started implementing NodeMaterial for WebGPU, it initially relied on ShaderChunk, which made NodeMaterial dependent on three.module, similar to how things worked with WebGLRenderer. However, this approach proved limiting. For all the features the Node System offers, it required a new level of abstraction in the renderer. Since WebGPURenderer already uses the Node System in its core, we don’t need to worry about intermediating these resources, simplifying many processes.

For example, with the current lighting system, integrating TiledLighting into the base only required a few lines changes, thanks to the Node abstraction. The same applies to MRT and could extend to other systems in the future. Without Nodes, these implementations would have been far more complex.

The Node System also enables native shader code management, such as with wgslFn, and has room for improvement to better support native shader languages. Additionally, we’ve enhanced the BindingGroups system to optimize updates—differentiating between buffers updated per frame and per render.

If users had written raw shaders (non-Node System, such as raw WGSL or GLSL), they’d need to manually manage updates to bindings, group indexes, and other adjustments whenever system changes occurred. With the Node System, this overhead is eliminated, allowing us to implement significant updates without impacting existing code. The GLSL/WGSL implementations benefit from this abstraction managed by nodes, which addresses longstanding issues present in WebGLRenderer.

Now to separate the TSL from the core we will need at least:
- Convert TSL code to Nodes wherever it is used in the `core`.  
- Address the fact that many existing Nodes rely on TSL, meaning they would need to be converted to Nodes. Materials shaders, in particular, pose a challenge due to their number and complexity.  
- Rework PMREM to rely on a different abstraction, removing its dependency on TSL.  
- Update the Background system and others to use Nodes instead of TSL.  

There might be additional considerations I’m overlooking, but this seems to be the path forward if we aim to separate it as an extension. That said, this process doesn’t seem straightforward, and the benefits appear limited. The primary gains would be a cleaner import structure and potentially a slight reduction in library size. However, this is debatable, as replacing TSL with Nodes in Materials could lead to a larger codebase overall.

I just wanted to think if we have other possibilities.
 If the problem is just an alias, this should solve it:
https://shorturl.at/Q595z

```js
import * as THREE from './three.webgpu.js';
import { vec3 } from './three.tsl.js';

console.log( vec3(), THREE.TSL.vec3() );
```
 After this code split PR we have this:

```js
./build/three.core.js
./build/three.webgpu.js // this file imports ./three.core.js
```

If we moved the TSL language/functions to its own file we would end with this:

```js
./build/three.core.js
./build/three.tsl.js
./build/three.webgpu.js // this file imports ./three.core.js and ./three.tsl.js
```

For that we may need a new `./src/Three.TSL.js`?

`WebGPURenderer` and `NodeMaterial` could import things from `./src/Three.TSL.js` so we don't need to convert TSL to Nodes.

But I think this would allow this usage:

```js
import { vec3 } from './three.tsl.js';
import * as THREE from './three.webgpu.js';
```

I'm just not enjoying how we are polluting the `THREE` ""namespace"" with all the TSL functions.

Having this separation could also inspire/motivate other people/engines to look for ways of adopt TSL too. This could be nice too:

```js
import { TSL } from './three.webgpu.js';
const { vec2, vec3 } = TSL;
```

But I think you said that this approach was not tree-shakeable? > But I think you said that this approach was not tree-shakeable?

So I ended up figuring out another way to do this once we have a new file.

If we have a `three.tsl.js` file like you suggested but for the alias this will work with three-shaking. 
I posted a link to the working example https://github.com/mrdoob/three.js/pull/29644#discussion_r1852826825

Instead of `const { vec2, vec3 } = TSL;`  we would use `import { vec3 } from './three.tsl.js';`

The alias file would look like this:
```js
import { TSL } from './three.webgpu.js';  

const vec2 = TSL.vec2;
const vec3 = TSL.vec3;
// ...

export { vec3, vec2 };
```
 Sounds like we're in alignment then.

I think this approach is the most readable:

```js
import * as THREE from './three.webgpu.js';
import { vec2, vec3 } from './three.tsl.js';
```

Should we create `./src/Three.TSL.js` or `./src/TSL.js`? > Should we create ./src/Three.TSL.js or ./src/TSL.js?

Whatever you prefer, you usually choose the best names :) Haha! Ok, lets to `./src/TSL.js` 👍"
28650,2024-06-13T18:45:15Z,2024-06-30T09:27:28Z,sunag,12,6,36,77030,373,5,1,[],132.0,0,13914287.0,0,0,0,0,3039731.895307,,0,36,1,False,"['RenaudRohlinger', 'sunag', 'mrdoob', 'github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 682.2 kB (169 kB) | 682.2 kB (169 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 459.4 kB (110.9 kB) | 459.4 kB (110.9 kB) | +0 B | Seems that an update in `puppeteer` will be necessary. Could we also use this PR to move the `WebGPURenderer` and `TSL` files to a directory like `/webgpu/`? 😄

It feels a bit odd to point to the addons such as `examples/jsm/renderers/webgpu/Three.js` for the build. This change would also make it easier for maintainers to work on new the Renderer by separate the TSL and WebGPURenderer files from the hundreds of existing WebGLRenderer examples blended in.

The import map would then look like this:
```js
{
	""imports"": {
		""three"": ""../build/three.webgpu.js"",
		""three/debug"": ""./webgpu/renderers/webgpu/Three.js"",
		""three/addons/"": ""./jsm/""
	}
}
```

/cc @mrdoob @sunag @Mugen87  It wouldn't be `examples/jsm/renderers/webgpu/Three.js` but `three/addons/renderers/webgpu/Three.js` when importing from the npm package. 

TBH, I did not have the impression so far that import paths containing `addons` are an issue. 

> This change would also make it easier for maintainers to work on new the Renderer by separate the TSL and WebGPURenderer files from the hundreds of existing WebGLRenderer examples blended in.

Um, I'm not sure I agree. What would be exactly easier? > TBH, I did not have the impression so far that import paths containing addons are an issue.

It's a matter of best practice and trying to organize the repository more effectively. Why should the new Renderer and Node System be under the ""examples/jsm"" folder?
I understand that historically it was done this way, and while I don't mind maintaining that approach, it does seem counterintuitive.

It feels like anything that is not the WebGLRenderer is placed under examples/jsm by default.

I just feel that this PR will bring some fresh air to the repository and maybe we could take that opportunity to reorganize a bit! 😄  > It feels like anything that is not the WebGLRenderer is placed under examples/jsm by default.

Um, why not moving `Renderer`, `WebGPURenderer` and TSL related modules into `src`? Wouldn't be that the more obvious approach?

The directory size of `src` or its number of files is not the critical metric. It's the size of the build files that matters. However, it should be possible to manage more code in `src` while keeping the sizes of files like `three.module.js`, `three.module.min.js` and `three.cjs` consistent. Indeed, even better! 👍  > I did some tests to include TSL in the build, the first attempt was `THREE.TSL` and use `const { .. } = ` to import, which works well but is incompatible with `tree shaking`

Hmm, that would definitely more clean than `import { float, vec3, color } from 'three';`...

Why is it incompatible with `tree shaking`? > Why is it incompatible with tree shaking?

I created a mini example in the link below, when I used `const { .. } = `, it imports all the values ​​from TSL, unlike when I use `THREE.TSL.vec3()` for example.

https://shorturl.at/x6AKZ

 > I created a mini example in the link below, when I used const { .. } = , it imports all the values ​​from TSL, unlike when I use THREE.TSL.vec3() for example.

Same thing with `vite`.

Maybe we could add a `three/tsl` alias and advance? I'm a little worried about revisiting this PR every time we merge some PR, it feels like it's going to break at some point. > Maybe we could add a `three/tsl` alias and advance?

Yes, let's try that first 👍 For documentation purpose here is the correct way to use the new build:
```js
// vite.config.js

import { defineConfig } from 'vite';

export default defineConfig({
  resolve: {
    alias: {
       'three/examples/jsm': 'three/examples/jsm',
       'three/addons': 'three/examples/jsm',
       'three/tsl': 'three/webgpu',
       'three': 'three/webgpu',
    }
  }
});
```

The order is important otherwise `three/tsl` will try to resolve `three/webgpu/tsl` for example.

/cc @sunag ",,"Related issue: https://github.com/mrdoob/three.js/pull/28328, https://github.com/mrdoob/three.js/pull/28328#issuecomment-2136541224

**Description**

### TSL

I did some tests to include TSL in the build, the first attempt was `THREE.TSL` and use `const { .. } = ` to import, which works well but is incompatible with `tree shaking`, the second attempt was to preserve `three/tls` but that would prevent having a single build file for everything. I think that since TSL will be part of the agnostic rendering system, it seems correct for it to be an essential central part of the file, just like other materials are.

To import a TSL, just use:

```
import { float, vec3, color } from 'three/tsl';
```

For class creation this is more familiar:

```js
const material = THREE.MeshStandardNodeMaterial();
```

### Renderer

Using the Renderer has become simpler too with `THREE.`:

```js
const renderer = new THREE.WebGPURenderer();
```
> One possibility is that we can keep a `WebGLRenderer` class using `forceWebGL` automatically.

### PMREMGenerator

Previously it was necessary to reimport PMREMGenerator from a new path for webgpu, now it is possible to use the original `THREE.PMREMGenerator` syntax.

```js
const sceneRT = new THREE.PMREMGenerator( renderer ).fromScene( scene );
```

### RectAreaLightTexturesLib

I created a base LTC for use on WebGPU, WebGLRenderer also relies on this same class.

### QuadMesh, PostProcessing

QuadMesh and PostProcessing can be used with THREE.QuadMesh and THREE.PostProcessing.

### Lines2

We have a separate `jsm/lines/webgpu` class now to handle just TSL, previously we had a lot of GLSL mixed in between the class extensions.

### Imports

```json
{
	""imports"": {
		""three"": ""../build/three.webgpu.js"",
		""three/debug"": ""../src/Three.WebGPU.js"",
		""three/addons/"": ""./jsm/""
	}
}
```

If you want to edit the files without having to recompile them, you can use the imports above.

## Next steps

This simplifies the process for creating the `tree shaking` that will come with the next PR. Do you just need to update from `three.webgpu.js` to `three.webgpu.nodes.js` or `three.nodes.js`?","## Unused variable, import, function or class

Unused import toneMapping.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2256) `debug` does not appear to be needed. Should we have an example in which it is? I purposely put it in `sandbox` because I thought it could convey the idea of ​​`debug` since I can't make simple comments in the JSON, maybe there is a more suitable way to do this... Your choice... I'd vote to merge this PR ASAP if @Mugen87 approves. Let me think about the naming for all this for a couple of days 🙏 I replaced `three/nodes` to `three/webgpu` in package. I imagined that developers could use three alias in vite like:

```js
// vite.config.js

import { defineConfig } from 'vite';

export default defineConfig({
  resolve: {
    alias: {
      'three': 'three/webgpu'
    }
  }
});
```"
29146,2024-08-15T18:27:54Z,2024-09-12T08:21:42Z,Mugen87,9,4,5,226,12,3,0,[],398024.0,0,8441882.0,0,0,0,0,3069978.10051,,0,5,1,False,"['jacksontan', 'puxiao', 'VegarRingdalAibel', 'Mugen87']","@puxiao Actually I had to restore some deleted docs. The `camera` property actually represents the camera whereas the `object` reference represents the object that is controlled by `TransformControls`.

The thing is `TransformControls` does not transform the camera so it makes sense when `object` points to the controlled 3D object and the scene's camera is saved in a separate reference. Rome wasn't built in a day.



By the way, you forgot to delete these:

> docs/examples/en/controls/DragControls.html

```diff
    <h2>Methods</h2>

    <p>See the base [page:Controls] class for common methods.</p>

-    <h3>[method:undefined connect] ()</h3>
-    <p>
-        Adds the event listeners of the controls.
-    </p>

-    <h3>[method:undefined disconnect] ()</h3>
-    <p>
-        Removes the event listeners of the controls.
-    </p>

-    <h3>[method:undefined dispose] ()</h3>
-    <p>
-        Should be called if the controls is no longer required.
-    </p>

    <h2>Source</h2>
```

 @Mugen87  Will these PRs be released in r168?
I have prepared some Chinese translations, but have not submitted PR yet, waiting for your this PR. I'd like to wait for at least one feedback (see https://github.com/mrdoob/three.js/pull/29146#discussion_r1718826206) so the API change is approved. Hence, the change might not be included in `r168`. It has been a month since the PR was filed so I'm going ahead and merge it so we can finish the migration to `THREE.Controls`. 

Of course we can update the API at any point if things like `getGizmo()` or the connect/disconnect routines require changes. Updated from 167 to 169.
Got error when calling dispose(), error looks to be this:
https://github.com/mrdoob/three.js/blob/dev/examples/jsm/controls/TransformControls.js#L539-L544

Traverse was part of `Object3D` so dispose might need some changes. Unless Ive manged to overlook/mess something up.

 Hi, how do you get the function getGizmo from controls? I cannot seem to see it in 
https://threejs.org/docs/#examples/en/controls/TransformControls or https://threejs.org/docs/#api/en/extras/Controls

As the suggested comment, this code `scene.add(controls)` will break on r169 and suggestion is to use `scene.add( controls.getGizmo() );` but cannot get the gizmo. ![image](https://github.com/user-attachments/assets/8360f531-d015-44a6-b713-a54186df1513)
 ah right, thanks.TransformControls.html

You forgot to delete these: 

```diff
- <h3>[property:Object3D object]</h3>
- <p>
-	The 3D object being controlled.
- </p>
```
","TransformControls.html

You forgot to delete these: 

```diff
- <h3>[property:Object3D object]</h3>
- <p>
-	The 3D object being controlled.
- </p>
```
","Related issue: https://github.com/mrdoob/three.js/pull/29085

**Description**

Same as https://github.com/mrdoob/three.js/pull/29085.

This is a breaking change though. `TransformControls` was derived from `Object3D` so far which had pros and cons. You could add the controls directly to the scene to render the gizmo (the visual helpers) but the `Object3D` methods `attach()` and `detach()` were overwritten with control specific methods.

The new approach is conceptually cleaner and more consistent compared to all other controls. But since `TransformControls` is no 3D object anymore, developers must add the gizmo differently now. So instead of:
```js
scene.add( controls );
```
It is now:
```js
scene.add( controls.getGizmo() );
```","@mrdoob Are you okay with `getGizmo()`?  @arodic How does this change look to you? `getGizmo()` is okay 👌 Actually, `getHelper()` would follow the current naming: 
https://github.com/mrdoob/three.js/tree/dev/examples/jsm/helpers"
29941,2024-11-21T09:58:44Z,2024-11-21T10:05:16Z,Mugen87,0,0,2,53,2,0,0,[],,0,393.0,0,0,0,0,3074817.339361,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29878#issuecomment-2490253249

**Description**

This adds logarithmic depth support to `SSRNode` by using the same approach like for AO.",
29930,2024-11-20T08:12:11Z,2024-11-21T09:43:09Z,Jian-Nam,1,2,2,1,1,2,1,[],187.0,0,91858.0,0,0,0,0,3076146.831699,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 478.76 <br> **132.73** | 478.76 <br> **132.73** | +0 B <br> **+0 B** |
| WebGPU Nodes | 478.23 <br> **132.61** | 478.23 <br> **132.61** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 546.92 <br> **148.18** | 546.92 <br> **148.18** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.8 <br> **137.9** | 502.8 <br> **137.9** | +0 B <br> **+0 B** |",,"## Issue Description:
The `play` method of the audio object in Three.js sets the starting point based on the current `progress`. The `progress` is updated only when the `pause` or `stop` methods are called.

Currently, when `pause` is executed during playback, the `progress` is set to the pause point. If the audio is played to the end from that point, the `onEnded` event is triggered, and the audio stops. However, if playback is restarted after this, the `onEnded` event does not update the `progress`. As a result, the audio restarts from the previous `pause` point rather than the actual start of the audio.

## Proposed Solution:
This behavior is unintuitive and can lead to unexpected behavior. To resolve this issue, I modified the `onEnded` method to execute the `stop` method, which ensures that `progress` is updated correctly.

## ScreenShot
before

https://github.com/user-attachments/assets/676cb00d-f3b0-49c6-bf2f-e8145c0f88a0

after

https://github.com/user-attachments/assets/d22f169f-995b-4b06-bdf0-64bae2a08646





","Calling `stop()`  could cause a warning if the audio has no playback control.

To be on the safe side, I would simply add `this._progress = 0;` to fix the issue.

 I agree. I didn’t consider the playbackControl warning. I’ve updated the fix and pushed the commit again. dfe6c8c"
29939,2024-11-21T04:36:38Z,2024-11-21T04:43:41Z,sunag,1,0,1,2,1,0,0,[],186.0,0,426.0,0,0,0,0,3094111.985549,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 482.43 <br> **133.72** | 482.48 <br> **133.72** | +49 B <br> **+3 B** |
| WebGPU Nodes | 481.9 <br> **133.62** | 481.95 <br> **133.62** | +49 B <br> **+2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 550.49 <br> **149.19** | 550.54 <br> **149.19** | +49 B <br> **+5 B** |
| WebGPU Nodes | 506.37 <br> **138.9** | 506.42 <br> **138.91** | +49 B <br> **+5 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29849

**Description**

Fix toggle shadow enabled.",
29937,2024-11-20T16:48:10Z,2024-11-20T16:55:09Z,Mugen87,1,0,1,6,1,0,0,[],186.0,0,419.0,0,0,0,0,3136627.439549,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 478.72 <br> **132.72** | 478.76 <br> **132.73** | +42 B <br> **+8 B** |
| WebGPU Nodes | 478.18 <br> **132.6** | 478.23 <br> **132.61** | +42 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 546.88 <br> **148.18** | 546.92 <br> **148.18** | +42 B <br> **+8 B** |
| WebGPU Nodes | 502.76 <br> **137.89** | 502.8 <br> **137.9** | +42 B <br> **+10 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29922#issuecomment-2488128904

**Description**

The PR adds `hasInitialized()` to `Renderer` so developers can check if the renderer is ready for usage.",
29933,2024-11-20T10:44:35Z,2024-11-20T13:05:08Z,Mugen87,0,0,1,8,1,1,1,[],,0,8438.0,0,0,0,0,3150424.831504,,0,1,1,False,[],,,"Related issue: -

**Description**

Since there is already a fallback in place for `GPUShaderStage` in `WGSLNodeBuilder`, it seems the fallback from `WebGPU.js` can be removed.

https://github.com/mrdoob/three.js/blob/d6c03fcec870f6c702a8b13e6d51a90b9f6d7384/src/renderers/webgpu/nodes/WGSLNodeBuilder.js#L21-L34",
29935,2024-11-20T11:58:59Z,2024-11-20T12:26:05Z,AlaricBaraou,1,0,1,11,1,1,1,[],1455.0,0,1627.0,0,0,0,0,3152771.907906,,0,1,1,False,['RenaudRohlinger'],Thanks!,,"**Description**

While playing with the sceneOptimizer I noticed that it didn't check for the map property when generating the mapHash, which would cause some incompatible mesh to be batched together.

Regarding the material, they were all converted to physicalMaterial, now they use the same constructor as the original material.

And lastly, regarding the color, it was both on the initial material and per instance resulting in different color than the originals. 

*This contribution is funded by [Alaric Baraou](https://alaricbaraou.com/)💶*",
29936,2024-11-20T12:14:02Z,2024-11-20T12:15:40Z,Mugen87,0,0,1,4,1,0,0,[],,0,98.0,0,0,0,0,3153398.139791,,0,1,1,False,[],,,"Related issue: #29897

**Description**

Fixed a deprecation warning in `webgpu_animation_retargeting`.
",
29934,2024-11-20T11:31:32Z,2024-11-20T12:04:08Z,Mugen87,0,0,2,61,3,0,0,[],,0,2611.0,0,0,0,0,3153436.625966,,0,2,1,False,[],,,"Related issue: -

**Description**

Switching to a more interesting model (which already exists in the repo) and improving scene and renderer setup.",
29929,2024-11-20T05:42:02Z,2024-11-20T06:38:15Z,mrdoob,3,0,2,118,4,0,0,[],176.0,0,4680.0,0,0,0,0,3172337.920442,,0,2,1,False,"['github-actions[bot]', 'linbingquan', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 478.72 <br> **132.72** | 478.72 <br> **132.72** | +0 B <br> **+0 B** |
| WebGPU Nodes | 478.18 <br> **132.6** | 478.18 <br> **132.6** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 546.88 <br> **148.18** | 546.88 <br> **148.18** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.76 <br> **137.89** | 502.76 <br> **137.89** | +0 B <br> **+0 B** | I have previously tested that using the `MathUtils.*` namespace in the `three.js` project has no effect on the tree shake.

Consistent with the robot report. Kind of counter-intuitive.

But referencing `three.js` in other projects, the `MathUtils.*` namespace has an effect on tree shaking.
 Minifiers seem to be smart these days.",,Related issue: #29812,
29932,2024-11-20T08:42:19Z,2024-11-20T09:01:17Z,linbingquan,0,0,1,4,1,0,0,[],,0,1139.0,0,0,0,0,3165061.933143,,0,1,1,False,[],,,"Related PR: https://github.com/mrdoob/three.js/pull/29929

**Description**

As the title says.

![image](https://github.com/user-attachments/assets/a921e2a6-937b-465b-969c-036707efa8c1)
",
29681,2024-10-17T12:06:49Z,2024-11-19T10:05:19Z,felixwri,1,0,2,31,2,1,1,[],2844077.0,0,2844079.0,0,0,0,0,3247453.560339,,0,2,1,False,['Mugen87'],Nice! `setFromPoints()` now works as expected with `LineGeometry`.,,"**Description**

This overrides the `setFromPoints` method inherited by `BufferGeometry` so that it can be used to set the vertex positions on a `LineGeometry`. 

```js
const points = curve.getPoints(100);

const geometry = new LineGeometry();
geometry.setFromPoints(points); // Takes Vector3[] or Vector2[]
```

I think this could be more intuitive since previously, `setFromPoints` would be suggested by intellisense but would not work.


",
29920,2024-11-19T03:14:24Z,2024-11-19T09:04:27Z,puxiao,0,0,2,10,2,1,1,[],,0,21003.0,0,0,0,0,3251274.738879,,0,2,1,False,[],,,,
29921,2024-11-19T05:32:27Z,2024-11-19T05:40:23Z,sunag,1,0,1,36,1,0,0,[],184.0,0,479.0,0,0,0,0,3263515.749744,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 478.67 <br> **132.72** | 478.72 <br> **132.72** | +50 B <br> **+1 B** |
| WebGPU Nodes | 478.13 <br> **132.6** | 478.18 <br> **132.6** | +50 B <br> **+2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 546.83 <br> **148.16** | 546.88 <br> **148.18** | +50 B <br> **+14 B** |
| WebGPU Nodes | 502.71 <br> **137.88** | 502.76 <br> **137.89** | +50 B <br> **+7 B** |",,"**Description**

`material.shadowPositionNode` was losing the custom position reference after the first shadow structure was created, due to caching.

| Before | Now |
| ------------- | ------------- |
| ![image](https://github.com/user-attachments/assets/0e0550ec-5436-4312-bedd-2690e43a195c) | ![image](https://github.com/user-attachments/assets/4c12a66a-339b-4ea6-a39f-3002f43b3a14) |

```js
// to reproduce this problem put this code in `webgpu_shadowmap` example
const mesh = new THREE.Mesh( new THREE.BoxGeometry( 7, 4, 7 ), new THREE.MeshStandardMaterial( { color: 0x00ff00 } ) );
mesh.receiveShadow = true;
mesh.castShadow = true;
mesh.position.set( 0, 2, 0 );
scene.add( mesh );
```",
29871,2024-11-13T09:04:56Z,2024-11-18T09:58:08Z,kxxhan,0,0,10,62,5,1,1,[],,0,435213.0,0,0,0,0,3334434.613357,,0,10,1,False,[],,,"**Description**
I’m developing a 3D Point Cloud editor using Three.js, and I’m using ArcballControls because it’s the best fit for this project. While editing (especially when removing noise points at specific click locations), unwanted focus events often get triggered by double-tap actions, which hurts the user experience.

To improve this, I’ve modified ArcballControls to prevent double-tap (or double-click) actions from triggering focus when it’s not wanted. I’ve added a new enableFocus property that allows users to disable the focus action, helping to avoid interruptions during editing.

Here's a GIF showing how it works:
![ArcballControls](https://github.com/user-attachments/assets/6f3d7435-c5a8-4f58-9991-6cfeebe22562)


",
29857,2024-11-11T04:25:35Z,2024-11-11T06:22:33Z,RenaudRohlinger,2,0,4,36,1,0,0,[],177.0,0,645052.0,0,0,0,0,3314156.715297,,0,4,1,False,"['github-actions[bot]', 'RenaudRohlinger']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.22 <br> **79.04** | 339.22 <br> **79.04** | +0 B <br> **+0 B** |
| WebGPU | 476.9 <br> **132.19** | 477.43 <br> **132.37** | +532 B <br> **+182 B** |
| WebGPU Nodes | 476.2 <br> **132.01** | 476.73 <br> **132.2** | +532 B <br> **+189 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.67 <br> **111.99** | 464.67 <br> **111.99** | +0 B <br> **+0 B** |
| WebGPU | 545.93 <br> **147.86** | 546.47 <br> **148.04** | +532 B <br> **+181 B** |
| WebGPU Nodes | 501.81 <br> **137.56** | 502.35 <br> **137.74** | +532 B <br> **+182 B** | Reminder to remove the patch when https://github.com/gpuweb/gpuweb/pull/4941 gets propagated.",,"**Description**

Add fallback for GPUOutOfMemoryError via `device.pushErrorScope( 'out-of-memory' )` when creating timestamp query set. This prevents renderer breakage caused by failed sample buffer allocation.
Also added an error message suggesting users close other GPU-intensive tabs to enable timestamp measurements as it's in most case the issue triggering the error.

Before (crashing the renderer):
<img width=""507"" alt=""image"" src=""https://github.com/user-attachments/assets/27d4088f-a137-40b4-9eca-2f632bd74d55"">

After (handle error, nothing breaks):
<img width=""540"" alt=""image"" src=""https://github.com/user-attachments/assets/d3ce6e87-3f8a-4b67-8594-41cdae97ef5f"">


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29897,2024-11-15T03:40:30Z,2024-11-19T02:55:59Z,sunag,12,1,6,180,6,1,0,[],198.0,0,342944.0,0,0,0,0,3273369.933815,,0,6,1,False,"['sunag', 'WestLangley', 'github-actions[bot]', 'Makio64', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.13 <br> **79** | 339.13 <br> **79** | +0 B <br> **+0 B** |
| WebGPU | 478.14 <br> **132.62** | 478.67 <br> **132.72** | +528 B <br> **+99 B** |
| WebGPU Nodes | 477.61 <br> **132.5** | 478.13 <br> **132.6** | +528 B <br> **+96 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **111.96** | 464.59 <br> **111.96** | +0 B <br> **+0 B** |
| WebGPU | 546.83 <br> **148.16** | 546.83 <br> **148.16** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.71 <br> **137.88** | 502.71 <br> **137.88** | +0 B <br> **+0 B** | Would it be better to rename `blendNormal` to `blendColor`? 
`blendNormals` should be intended for blend geometry normals. > Would it be better to rename `blendNormal` to `blendColor`? `blendNormals` should be intended for blend geometry normals.

Sorry for my lack of knowlegdes but you mean there is a way to blend the geometries normals without blending the color (output) ? Do you have a usecase in mind you can share to me to understand why peoples will do it ? > Sorry for my lack of knowlegdes but you mean there is a way to blend the geometries normals without blending the color (output) ? Do you have a usecase in mind you can share to me to understand why peoples will do it ?

A common case is mixing two normal maps. >Would it be better to rename blendNormal to blendColor?

Yes, rename it. The question remains as to what the name should be...

The formula looks similar to the Porter Duff _over_ operator, but not exactly.

@Mugen87 Is it an SSR hack of some sort, and therefore specific to that particular algorithm?

//

Be aware that the output of a beauty pass has alpha premultiplied by default. Be careful when using these formulas.

These blend modes only make sense if you know the context. I think the file should have specific references for the formulas.
 > @Mugen87 Is it an SSR hack of some sort, and therefore specific to that particular algorithm?

The previous `SSRPass` used a separate render pass via copy shader to blend the SSR over the beauty via normal blending.  Via `blendColor()` we achieve the same result as before but without a separate pass.

Right now, the blend function is not specific for `SSRNode`. It should work for similar use cases which relied on normal blending as well.

The premultiply alpha topic might be relevant in the future. If a use case comes up, we probably need a third parameter `premultipliedAlpha` with an additional code path. @Mugen87

`BlendModes.js` contains some blending functions -- from somewhere -- maybe @sunag knows where they are from. I am curious to know...

>It should work for similar use cases which relied on normal blending as well.

The function you added to the file in #29879 does not match the three.js normal blending formula. Also, the proposed name `blendColor()` does not have a well-defined meaning.

So, currently, I would be inclined to revert #29879, and inline the function in the SSR shader.

 > The function you added to the file in https://github.com/mrdoob/three.js/pull/29879 does not match the three.js normal blending formula.

Do you mind elaborating the differences and why we still get the same visual result? I don't remember exactly all links, because I was looking for blend modes that used `mix` instead of conditionals like this:
https://github.com/Experience-Monks/glsl-blend-overlay/blob/master/index.glsl

then validated them in the image editor and got the expected result.

It looks the ""same"" comparing to the reference below, except that our version returns a vec4() with the base opacity and has a opacity as parameter, I don't think the order of addition should change the result here.

https://github.com/jamieowen/glsl-blend/blob/master/normal.glsl >Do you mind elaborating the differences and why we still get the same visual result?

Please refer to the Porter Duff __over__ blending operator explained in [this Wikipedia article](https://en.wikipedia.org/wiki/Alpha_compositing).

1. The original blending formula assumes the source, destination, and output colors are _non-premultiplied_. Here is how those formulas are written in the case where the source is the shader output and the destination is the drawing buffer -- both non-premultiplied.

```
dst.rgb = src.rgb * src.a + dst.rgb * dst.a * ( 1 - src.a )
dst.a   = src.a   * 1     + dst.a           * ( 1 - src.a )
dst.rgb = dst.rgb / dst.a
```

2. Later in that article, you will find the formula to use when the source, destination, and output colors are premultiplied. This formula is akin to the three.js `NormalBlending` formula when `material.premultipliedAlpha` is `true`.

```
dst.rgb = src.rgb * 1 + dst.rgb * ( 1 - src.a )
dst.a   = src.a   * 1 + dst.a   * ( 1 - src.a )
```

3. Not mentioned in the article is the formula used in three.js for `NormalBlending` when the source (output of the shader) has non-premultiplied alpha and the destination has premultiplied alpha.

```
dst.rgb = src.rgb * src.a + dst.rgb * ( 1 - src.a )
dst.a   = src.a   * 1     + dst.a   * ( 1 - src.a )
```

So, the proper formula to use depends on the context.

You got the ""same answer"" because `ssr()` ignores the alpha channel of the beauty pass, and assumes alpha is 1. Plus, your test case was likely an opaque one.

//

You have promoted a shader-specific blending formula to a more general status, but the formula is only correct in certain cases. The context is important. Also, the proposed name `blendColor()` does not have a well-defined meaning. This is why I suggested in-lining the formula in the shader, and not promoting it.



 In the renderer's constructor, we set `premultipliedAlpha` to `true`. This is a flag to the compositor that the contents of the drawing buffer have premultiplied alpha.

When working with `WebGPURederer` and TSL, it is important to remember that the input to postprocessing (the output of the beauty pass) will have premultiplied alpha by default. And so should the final output of postprocessing, because that is what the compositor is expecting.
 I think the problem is in how these formulas are handling opacity, for general use it is better to use the formula that @WestLangley  mentioned (1.), because the SSR blending return a `vec4()` with `base.a` and it would be ignoring the intermediate opacity that `blend.a` could add (It looks like this is a small optimization of instructions for specific SSR usage). All other blending modes are ignoring `opacity` at the moment, but it is very likely that we will need an opacity setting option in the future that works in all blending modes.",,"Related issue: https://github.com/mrdoob/three.js/pull/29879#issuecomment-2476499445

**Description**

- [x] [Rename BlendMode -> BlendModes](https://github.com/mrdoob/three.js/commit/12ead7fc8e1b3a2104c79aa314734531b979257f)
- [x] [Added blend prefix](https://github.com/mrdoob/three.js/commit/9ee033cddf5556a6aab30dc2c8eaed44803c420a)
- [x] [Update examples](https://github.com/mrdoob/three.js/commit/9678baa5e18e6830061de417ab353a46d473aea9)","How about
```
""burn"" has been renamed. Use ""blendBurn"" instead.
```"
29918,2024-11-18T02:10:32Z,2024-11-18T09:47:51Z,mmjinglin163,2,0,1,268,2,0,0,[],20640.0,0,27473.0,0,0,0,0,3335040.404815,,0,1,1,False,"['kxxhan', 'Mugen87']","Translating documentation is a time-consuming and valuable task, and your effort to make this accessible for Korean speakers is much appreciated. As a native Korean speaker, I wanted to provide some suggestions to make the translation even more fluent and natural.

I noticed a few parts that might sound unnatural to native Korean speakers. For example, in this sentence, '모양 흰색이나 회색과 같은 소색 차이의 변화는 인간의 지각에 달려 있고 인간의 지각은 어느 정도 관찰자의 배경에 달려 있다.', the translation could be rephrased as '무채색 값의 외형은 인간의 지각에 따라 달라지며, 이는 관찰자의 맥락에 크게 의존합니다.' to make it more fluent and natural.

Ensuring that the translation is both accurate and natural is essential for Korean readers to fully benefit from the documentation. Your current work is a great foundation, and with a few adjustments, it could become even more polished and effective.

Let me know if you’d like further input or collaboration to refine the translation further. 😊 @kxxhan Feel free to improve the Korean translation with additional PRs 👍 .",,"Docs:Color-management translation
",
29913,2024-11-17T16:23:55Z,2024-11-17T22:23:50Z,renovate[bot],0,0,1,6,1,0,0,[],,0,21653.0,0,0,0,0,3376057.669363,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `4f3212b` -> `ea9e4e3` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS4xOS4wIiwidXBkYXRlZEluVmVyIjoiMzkuMTkuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29915,2024-11-17T17:17:21Z,2024-11-18T09:47:07Z,mrxz,1,0,1,28,1,1,1,[],190.0,0,59395.0,0,0,0,0,3335109.697875,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.14 <br> **78.99** | -228 B <br> **-69 B** |
| WebGPU | 478.24 <br> **132.66** | 478.24 <br> **132.66** | +0 B <br> **+0 B** |
| WebGPU Nodes | 477.71 <br> **132.54** | 477.71 <br> **132.54** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.59 <br> **111.96** | -228 B <br> **-57 B** |
| WebGPU | 546.92 <br> **148.19** | 546.92 <br> **148.19** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.8 <br> **137.91** | 502.8 <br> **137.91** | +0 B <br> **+0 B** |",,"**Description**
Morph target attributes were being uploaded as `DataTexture` _and_ as buffers. The latter seems to be left over from the WebGL1 fallback path. Since WebGL1 is no longer supported, it should be safe to remove this logic. With this change the morph targets now also consume less memory on the GPU.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Fern Solutions](https://fern.solutions/)*
",
29914,2024-11-17T16:24:18Z,2024-11-17T18:08:46Z,renovate[bot],0,0,1,150,1,0,0,[],,0,6301.0,0,0,0,0,3391388.17439,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.25.0` -> `4.27.2`](https://renovatebot.com/diffs/npm/rollup/4.25.0/4.27.2) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.27.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.27.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.25.0/4.27.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.25.0/4.27.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.27.2`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4272)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.27.1...v4.27.2)

*2024-11-15*

##### Bug Fixes

-   Ensure unused variables in patterns are always deconflicted if rendered ([#&#8203;5728](https://redirect.github.com/rollup/rollup/issues/5728))

##### Pull Requests

-   [#&#8203;5728](https://redirect.github.com/rollup/rollup/pull/5728): Fix more variable deconflicting issues ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

### [`v4.27.1`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4271)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.27.0...v4.27.1)

*2024-11-15*

##### Bug Fixes

-   Fix some situations where parameter declarations could put Rollup into an infinite loop ([#&#8203;5727](https://redirect.github.com/rollup/rollup/issues/5727))

##### Pull Requests

-   [#&#8203;5727](https://redirect.github.com/rollup/rollup/pull/5727): Debug out-of-memory issues with Rollup v4.27.0 ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

### [`v4.27.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4270)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.26.0...v4.27.0)

*2024-11-15*

##### Features

-   Tree-shake unused properties in object literals ([#&#8203;5420](https://redirect.github.com/rollup/rollup/issues/5420))

##### Bug Fixes

-   Change hash length limit to 21 to avoid inconsistent hash length ([#&#8203;5423](https://redirect.github.com/rollup/rollup/issues/5423))

##### Pull Requests

-   [#&#8203;5420](https://redirect.github.com/rollup/rollup/pull/5420): feat: implement object tree-shaking ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi), [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5723](https://redirect.github.com/rollup/rollup/pull/5723): Reduce max hash size to 21 ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5724](https://redirect.github.com/rollup/rollup/pull/5724): fix(deps): update swc monorepo (major) ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5725](https://redirect.github.com/rollup/rollup/pull/5725): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])

### [`v4.26.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4260)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.25.0...v4.26.0)

*2024-11-13*

##### Features

-   Allow to avoid `await bundle.close()` via explicit resource management in TypeScript ([#&#8203;5721](https://redirect.github.com/rollup/rollup/issues/5721))

##### Pull Requests

-   [#&#8203;5721](https://redirect.github.com/rollup/rollup/pull/5721): feat: support `using` for `RollupBuild` ([@&#8203;shulaoda](https://redirect.github.com/shulaoda))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS4xOS4wIiwidXBkYXRlZEluVmVyIjoiMzkuMTkuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29904,2024-11-15T19:16:08Z,2024-11-15T23:18:28Z,donmccurdy,2,0,1,3,1,1,1,[],57462.0,0,168036.0,0,0,0,0,3392143.545655,,0,1,1,False,"['donmccurdy', 'Mugen87']","> Uncompressed DataTexture (F16, F32, Uint8, ...)

`WebGLRenderer` makes sure the use case of #29884 works by having two separate code paths (compressed vs uncompressed) for uploading data of `CompressedTextures`s, see: https://github.com/mrdoob/three.js/blob/5b51d6f1e076184f1de771319cff708ac0aa59b0/src/renderers/webgl/WebGLTextures.js#L957-L997

TBH, I was never happy with the exception handling of `RGBAFormat` since I think it's more clear when instances of `CompressedTextures` actually hold compressed data (and thus use a compressed `format`).

I wish we could avoid `CompressedTexture` with `RGBAFormat` since that would allow us a more clean implementation on the renderer side. In `WebGPURenderer` there is currently no separate `RGBAFormat` handling so the use case of #29884 does not work yet (neither in the WebGPU and WebGL backend, see https://jsfiddle.net/20j6an3x/). We could fix this on the renderer side but imo it would be more clear if compressed texture loaders return uncompressed data as instances of `DataTexture`. I think we could change KTX2Loader to return `THREE.DataTexture` instead of `THREE.CompressedTexture` conditionally, depending on the selected transcoding format. The only obstacle I see is that we'd need a new `THREE.DataCubeTexture` class, to handle all three cases here:

https://github.com/mrdoob/three.js/blob/19123ffb3a243f5a14599775f1803042c8bae86b/examples/jsm/loaders/KTX2Loader.js#L299-L311",,"KTX2Loader implements three 'paths' for textures:

1. Uncompressed DataTexture (F16, F32, Uint8, ...)
2. Raw CompressedTexture (ETC1/2, ASTC, BCn, ...)
3. Universal/transcoded CompressedTexture (BasisLZ/ETC1S, UASTC)

Basis UASTC HDR textures may take path (2) or (3) depending on device support for ASTC HDR formats, since the pre-transcode data is also valid ASTC data. In case (2), we weren't correctly setting `.minFilter` defaults for textures without mipmaps.

- Fixes #29884 
",
29791,2024-11-02T15:15:24Z,2024-11-02T15:27:51Z,linbingquan,0,0,1,10,1,1,1,[],,0,1276350.0,0,0,0,0,3421473.685186,,0,1,1,False,[],,,"Related issue: #XXXX

**Description**

As the title says.

Link: https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment
",
29789,2024-11-02T01:48:47Z,2024-11-02T09:10:15Z,RenaudRohlinger,1,0,5,229,24,1,1,[],199.0,0,1324551.0,0,0,0,0,3421671.302016,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.66 <br> **171.56** | 692.35 <br> **171.47** | -305 B <br> **-88 B** |
| WebGPU | 822.12 <br> **221.9** | 822.05 <br> **221.87** | -67 B <br> **-28 B** |
| WebGPU Nodes | 821.63 <br> **221.78** | 821.34 <br> **221.72** | -289 B <br> **-54 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.01 <br> **112.35** | 464.89 <br> **112.3** | -123 B <br> **-46 B** |
| WebGPU | 542.65 <br> **146.78** | 542.63 <br> **146.81** | -25 B <br> **+24 B** |
| WebGPU Nodes | 498.65 <br> **136.58** | 498.57 <br> **136.54** | -79 B <br> **-36 B** |",,"Related issue:  #29501 https://github.com/mrdoob/three.js/commit/ac963e25c6ddf9ea1f5f070e90e78529db96f701#r148635345

Description:
Found a solution for NodeLibrary that avoids breaking changes from static types by referencing the built-in material type as a string. This approach maintains existing functionality and ensures backward compatibility.

Tested the build in a production setup with Vite, confirming everything works smoothly.
This PR even reduces a bit the bundle size. 😄 

/cc @Mugen87 @FarazzShaikh @sunag 

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29910,2024-11-16T19:23:14Z,2024-11-16T20:37:28Z,sunag,1,0,1,72,1,0,0,[],179.0,0,12382.0,0,0,0,0,3460973.34092,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 478.22 <br> **132.63** | 478.09 <br> **132.59** | -126 B <br> **-41 B** |
| WebGPU Nodes | 477.68 <br> **132.51** | 477.56 <br> **132.47** | -126 B <br> **-43 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.95 <br> **148.2** | 546.82 <br> **148.15** | -128 B <br> **-45 B** |
| WebGPU Nodes | 502.83 <br> **137.91** | 502.7 <br> **137.86** | -128 B <br> **-44 B** |",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29852

**Description**

This uses `textureLoad` when both `wrap*` use `NearestFilter`, as is the case with `DepthTexture`.

It should fix the WebGPU warnings: https://github.com/mrdoob/three.js/issues/29852#issuecomment-2466706593",
29137,2024-08-14T15:46:42Z,2024-08-14T17:01:30Z,sunag,1,3,10,146,17,3,0,[],149.0,0,8117264.0,0,0,0,0,3490683.780155,,0,10,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/28939, https://github.com/mrdoob/three.js/pull/29121

**Description**

Thanks to the once deferred function we can use constants as functions that will be executed at compile time. This approach is superior to the current ones that use `transformedNormalView.assign()` and I think we can use it not so soon in `positionLocal` and `positionPrevious` as well.","Glad to see `normals` is gone! 🎉  I've noticed that a lot of code relies on normalView for lighting calculations and PBR purposes. However, we can't depend on it as-is because, as far as I understand, normalView is only assigned once using once() and is never reassigned.

This creates a limitation where the node-based approach doesn't seem to fully support normalNode. For example, in the current PR, roughness calculations would only work if there's a roughnessMap. Otherwise, it defaults to using normalView, which is derived from normalLocal rather than normalNode.

If my understanding is correct, normalNode effectively resolves to normalView, making normalNode incompatible with the current node system. Or am I missing something here, @sunag? I think you're looking for `transformedNormalView`. `normalView` is supposed to keep the geometry normals, so it was used in `getGeometryRoughness`, while `transformedNormalView` is affected by `normalNode`. 

I was already thinking about renaming it because the term `transformed` is uncommon, moving `normalView` to `geometryNormalView` and `transformedNormalView` to `normalView`, this should be a standard across all nodes."
29902,2024-11-15T12:40:13Z,2024-11-15T16:08:25Z,satelllte,0,0,1,2,1,1,1,[],,0,12492.0,0,0,0,0,3571446.180011,,0,1,1,False,[],,,"Related issue: #29901

**Description**

Translation is missing for this sentence:

```
`OutputPass` is usually the last pass in the chain which performs sRGB color space conversion and optional tone mapping.
```
",
29870,2024-11-13T06:10:44Z,2024-11-13T10:28:16Z,PoseidonEnergy,3,4,5,61,4,3,1,[],183.0,0,211345.0,0,0,0,0,3568762.488085,,0,5,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.82 <br> **132.5** | 477.92 <br> **132.53** | +90 B <br> **+27 B** |
| WebGPU Nodes | 477.29 <br> **132.39** | 477.38 <br> **132.41** | +90 B <br> **+23 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.86 <br> **148.18** | 546.85 <br> **148.16** | -12 B <br> **-12 B** |
| WebGPU Nodes | 502.74 <br> **137.88** | 502.73 <br> **137.87** | -12 B <br> **-11 B** | @PoseidonEnergy Tested the change locally and it works as expected! Awesome PR 👍 ! @PoseidonEnergy Your fiddle for testing the TSL functions is super interesting!

Somewhat related: The project is actually looking for a way to unit test TSL functions (see #28708). It would be great to establish a basic procedure in our current unit tests (see https://github.com/mrdoob/three.js/tree/dev/test/unit) for testing TSL modules in isolated routines.",,"Fixed #29797.

1. Renamed the function `perspectiveDepthToLogarithmicDepth` to `viewZToLogarithmicDepth` and modified it to expect a negative `viewZ` value in order maintain consistency with `viewZToOrthographicDepth` and `viewZToPerspectiveDepth`
2. Revised the logarithmic depth curve once more to ensure it maintains a full 0-to-1 range no matter the camera near/far values.
See new curves here on Desmos: https://www.desmos.com/calculator/uyqk0vex1u
4. Added function `logarithmicDepthToViewZ` for use in **GTAONode.js**
5. Fixed AO not working when `logarithmicDepthBuffer` is `true`

Related issue: #29797 

**Description**

The name of the function `perspectiveDepthToLogarithmicDepth` is misleading because it actually expects a `viewZ` value (i.e. `positionView.z`), and NOT a depth value (i.e. a number between 0 and 1). In addition, the `viewZ` value that it previously expected had to be a positive number, which differed from its sister functions `viewZToOrthographicDepth` and `viewZToPerspectiveDepth`, which both expect a negative `viewZ`. In this pull request, the function in question is now named `viewZToLogarithmicDepth`, and expects a negative `viewZ` like the rest in its family.

AO was not working properly in the **webgpu_postprocessing_ao** example when `logarithmicDepthBuffer` was `true`. The function `logarithmicDepthToViewZ` was added to **ViewportDepthNode.js**, so it can now be used in **GTAONode.js** to obtain the proper depth values required for AO.

Here is a JSFiddle I made to demonstrate how `viewZToLogarithmicDepth` relates to the rest of the depth functions:

https://jsfiddle.net/go6f2y4u

And here is an animation of the JSFiddle:

![depthfamily](https://github.com/user-attachments/assets/6d658af4-d714-40bd-b31d-5a4bcbe48e60)

![image](https://github.com/user-attachments/assets/ac29ac44-f7b2-469f-ac56-d5c3bc2f974b)

![image](https://github.com/user-attachments/assets/5f02bd92-308f-40b1-bd73-99f880c3d846)

","I think this should import from 'three/tsl' @PoseidonEnergy `reference()` is a bit cleaner than defining a uniform with a `onRenderUpdate()` callback. Just one question, did the previous approach using `uniform` present any problems? Was there any specific reason for changing to `reference`? I did only switch to `reference()` for consistency reasons since this API is used in the rest of the file."
29901,2024-11-15T12:38:59Z,2024-11-15T16:07:59Z,satelllte,0,0,1,3,1,1,1,[],,0,12541.0,0,0,0,0,3571471.708856,,0,1,1,False,[],,,"**Description**

Translation is missing for this sentence:

```
In our example, the instance of `RenderPass` is executed first, then the instance of `GlitchPass` and finally `OutputPass`
```",
28578,2024-06-07T11:14:41Z,2024-11-06T17:50:58Z,aardgoose,2,0,2,213,9,1,1,[],13077791.0,0,13912942.0,0,0,0,0,3586530.113791,,0,2,1,False,"['github-actions[bot]', 'aardgoose']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.21 <br> **171.45** | 692.21 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 821.89 <br> **221.91** | 823.65 <br> **222.43** | +1.76 kB <br> **+520 B** |
| WebGPU Nodes | 821 <br> **221.7** | 822.77 <br> **222.23** | +1.76 kB <br> **+531 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.56 <br> **112.27** | 464.56 <br> **112.27** | +0 B <br> **+0 B** |
| WebGPU | 542.09 <br> **146.75** | 543.86 <br> **147.32** | +1.76 kB <br> **+561 B** |
| WebGPU Nodes | 498.03 <br> **136.5** | 499.8 <br> **137.03** | +1.76 kB <br> **+528 B** | @sunag  @Mugen87 

This now supports clip distances with WebGL and WebGPU, tested with Chrome 131 Beta which supports the clip-distance extension.  

The addition of the declaration of gl_ClippingDistance[ n ] is crude, but I don't see other uses of builtins in WebGL. ",,"Use WebGL 'WEBGL_clip_cull_distance' and WebGPU 'clip-distances' extensions if available for clipping where possible (not using intersections or alphaToCoverage and max 8 clipping planes).

Tested with WebGL, (WebGPU support not available to test).

 ",
29833,2024-11-07T12:06:55Z,2024-11-12T09:27:54Z,aardgoose,2,0,3,70,5,1,1,[],221.0,0,690600.0,0,0,0,0,3586538.595696,,0,3,1,False,"['github-actions[bot]', 'Mugen87']","> Should ClippingGroup (and BundleGroup) be moved to src/objects with other Object3D subclasses?

Yes, that sounds good to me.

> Can some markup/labelling be applied to indicate that a feature is WebGPURenderer only.?

Until we find a solution, you can use a simple note under the description. We've used this approach for WebGL 2 only features as well. Maybe:

> Note: ClippingGroup is only supported with `WebGPURenderer`. ### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.43 <br> **132.37** | 477.43 <br> **132.37** | +0 B <br> **-4 B** |
| WebGPU Nodes | 476.73 <br> **132.2** | 476.9 <br> **132.25** | +171 B <br> **+46 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.47 <br> **148.04** | 546.47 <br> **148.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.35 <br> **137.74** | 502.35 <br> **137.74** | +0 B <br> **+0 B** |",,"Add a first draft documentation page for ClippingGroup.

Should  ClippingGroup (and BundleGroup) be moved to src/objects with other Object3D subclasses?

Can some markup/labelling be applied to indicate that a feature is WebGPURenderer only.?
",
29845,2024-11-08T13:54:54Z,2024-11-13T10:12:43Z,aardgoose,5,3,3,78,4,3,1,[],186.0,0,597725.0,0,0,0,0,3586534.74209,,0,3,1,False,"['github-actions[bot]', 'aardgoose', 'RenaudRohlinger', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.22 <br> **79.04** | 339.22 <br> **79.04** | +0 B <br> **+0 B** |
| WebGPU | 476.9 <br> **132.19** | 477.18 <br> **132.3** | +282 B <br> **+107 B** |
| WebGPU Nodes | 476.2 <br> **132.01** | 476.48 <br> **132.12** | +282 B <br> **+108 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.67 <br> **111.99** | 464.67 <br> **111.99** | +0 B <br> **+0 B** |
| WebGPU | 545.93 <br> **147.86** | 546.22 <br> **147.96** | +282 B <br> **+107 B** |
| WebGPU Nodes | 501.81 <br> **137.56** | 502.1 <br> **137.67** | +282 B <br> **+114 B** | Nice! I thought about something similar but the issue with this it that it's stacking`bindGroup`, `Texture Views` and `Samplers`.
Every resize event of a RenderTarget will dispose the RenderTarget and destroy all the FBO samplers associated resulting with this new logic that creates a new `bindGroup`, `Texture Views` and `Samplers` that never gets cleanup. On dev the issue is not there as the `bindGroups` never gets recreated since their textures aren't associated to them.

To complete your approach, a cleanup strategy for unused `bindGroups` which dispose of the associated texture views and samplers would likely resolve this. ` textureView = null` and ` sampler = null` should be enough to allow garbage collection in WebGPU as it doesn't provides an explicit `.destroy()` method for cleanup. Re garbage collection on resize. yes, it is an obvious issue. I just wanted to get a basic working approach to start with. After a bind group has been created, the only way to destroy it is to drop references to it AFAICS, so maybe we need a two part cacheId so that the version changes would cause a cached bindGroup to be overwritten? It is something I considered earlier. This new two part cacheId is an awesome solution and fixes the issue. Great PR! @aardgoose Is this PR ready for review?",,"Related issue: #29198, #27447

Alternative mechanism to avoid excessive bindGroup creation. Use a cache keyed by a value derived from the texture(s) used in a bindGroup to handle the situation where a material alternates between two or more textures. This caching only takes place for bindGroups that would be updated after the first pass.

BindGroups referencing defaultTextures or external textures are not cached.","What is the purpose of `* 10`? Maybe some hash test that could use the NodeUtils `hashArray()` or `hash()`? ?10 just to stop obvious collisions as a proof of concept. I am trying to avoid more string creation on a fairly hot path. A cheap hash would be better.

"
29885,2024-11-15T03:09:30Z,2024-11-15T11:24:58Z,mmjinglin163,0,0,3,118,2,1,1,[],,0,29728.0,0,0,0,0,3588457.032829,,0,3,1,False,[],,,"Docs: add the translation of Libraries-and-Plugins in Korean
",
29879,2024-11-14T12:31:09Z,2024-11-14T15:26:21Z,Mugen87,4,0,2,19,2,0,0,[],191.0,0,10512.0,0,0,0,0,3660374.453245,,0,2,0,False,"['github-actions[bot]', 'Mugen87', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.94 <br> **132.55** | 478.14 <br> **132.61** | +196 B <br> **+59 B** |
| WebGPU Nodes | 477.41 <br> **132.42** | 477.61 <br> **132.49** | +196 B <br> **+61 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.87 <br> **148.17** | 546.87 <br> **148.17** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.75 <br> **137.88** | 502.75 <br> **137.88** | +0 B <br> **+0 B** | > BTW: Is BlendMode a typo? Should it be BlendNode?

Maybe `BlendModes`? We are using the `Node` suffix only when there is an extended class of `Node`. Do you think `blendNormal` is better? Especially in auto-complete, I was thinking about renaming the others too. > Maybe BlendModes? We are using the Node suffix only when there is an extended class of Node.

Got it. 👍 

`BlendModes` sounds better since the module is a collection of blend functions.

> Do you think blendNormal is better? Especially in auto-complete, I was thinking about renaming the others too.

Sounds good! I'll update the PR.
",,"Related issue:  https://github.com/mrdoob/three.js/pull/29597#discussion_r1793395359

**Description**

This PR adds a `blendNormal()` helper which simplifies the SSR blend on app level.

BTW: Is `BlendMode` a typo? Should it be `BlendNode`?",
29880,2024-11-14T14:40:40Z,2024-11-14T14:47:41Z,sunag,1,0,1,15,1,0,0,[],177.0,0,426.0,0,0,0,0,3662689.613105,,0,1,0,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.94 <br> **132.55** | 478.02 <br> **132.57** | +77 B <br> **+28 B** |
| WebGPU Nodes | 477.41 <br> **132.42** | 477.49 <br> **132.45** | +77 B <br> **+30 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.87 <br> **148.17** | 546.95 <br> **148.2** | +77 B <br> **+25 B** |
| WebGPU Nodes | 502.75 <br> **137.88** | 502.83 <br> **137.91** | +77 B <br> **+27 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29795#issuecomment-2476003877

**Description**

Fix geometry change using `WebGLBackend`.
",
29877,2024-11-14T09:28:51Z,2024-11-14T09:28:59Z,Mugen87,0,0,1,7,2,0,0,[],,0,71.0,0,0,0,0,3681754.836745,,0,1,1,False,[],,,"Fixed #29876.

**Description**

Updates the imports of the tiled lighting modules according to #29644.
",
29875,2024-11-13T23:14:35Z,2024-11-14T03:21:20Z,Mugen87,0,0,1,9,1,0,0,[],,0,14805.0,0,0,0,0,3703877.238638,,0,1,1,False,[],,,"Related issue: #29597

**Description**

As mentioned at the Chromium bug tracker, the PR implements a temporary fix until the `discard()` works as expected.

https://issues.chromium.org/issues/372714384#comment14
",
29874,2024-11-13T19:19:02Z,2024-11-13T19:42:39Z,sunag,0,0,1,6,1,0,0,[],,0,1420.0,0,0,0,0,3731395.47922,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29642#issuecomment-2472847711

**Description**

Fix `reflectedLight` declaration sequence.",
29873,2024-11-13T17:30:50Z,2024-11-13T18:01:29Z,sunag,1,0,1,14,1,0,0,[],204.0,0,1842.0,0,0,0,0,3737466.60677,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.96 <br> **132.56** | 477.94 <br> **132.55** | -19 B <br> **-10 B** |
| WebGPU Nodes | 477.43 <br> **132.44** | 477.41 <br> **132.42** | -19 B <br> **-12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.89 <br> **148.19** | 546.87 <br> **148.17** | -19 B <br> **-14 B** |
| WebGPU Nodes | 502.77 <br> **137.89** | 502.75 <br> **137.88** | -19 B <br> **-15 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29836

**Description**

Force `material.needsUpdate=true` to update the material if geometry is changed.",
29866,2024-11-12T13:19:50Z,2024-11-13T15:33:49Z,RenaudRohlinger,5,0,2,2,1,0,0,[],177.0,0,94439.0,0,0,0,0,3746330.165907,,0,2,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.54 <br> **132.4** | 477.59 <br> **132.42** | +48 B <br> **+26 B** |
| WebGPU Nodes | 477.01 <br> **132.28** | 477.06 <br> **132.31** | +48 B <br> **+26 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.58 <br> **148.07** | 546.62 <br> **148.09** | +48 B <br> **+19 B** |
| WebGPU Nodes | 502.46 <br> **137.76** | 502.5 <br> **137.79** | +48 B <br> **+24 B** | Seems like the issue doesn't happen with ImageBitmaps loaded with the GLTFLoader, this PR breaking a bunch of examples, is there any extra step being done to align BitmapImage between WebGPU and WebGL @sunag?
 This area is destined to flip-y frame-buffers, for external textures I recommend check here:
https://github.com/mrdoob/three.js/blob/ed9f5a1977d356e4f6c01ccbe89521e310273db3/src/renderers/webgpu/utils/WebGPUTextureUtils.js#L556 My previous answer is a bit out of context. Could you test again? Can confirm that now both backends are aligned with flipY true and false!
![image](https://github.com/user-attachments/assets/04e13b1e-4790-416a-8dec-fe26261f8de2)
",,"
**Description**

There is an inconsistency between WebGL and WebGPU, where ImageBitmap textures are unflipped by default. 
In WebGL 2.0, `gl.UNPACK_FLIP_Y_WEBGL` has no effect on ImageBitmap uploads, so we cannot flip the texture during upload.
To resolve this, I added a condition in TextureNode to flip the UV for ImageBitmap, similar to how we handle sampler textures.

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29447,2024-09-19T21:43:21Z,2024-09-28T00:37:30Z,PoseidonEnergy,8,14,6,83,4,3,0,[],184.0,0,4723371.0,0,0,0,0,3752787.679825,,0,6,1,False,"['github-actions[bot]', 'PoseidonEnergy', 'Spiri0', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.15 <br> **170.18** | 687.15 <br> **170.18** | +0 B <br> **+0 B** |
| WebGPU | 805.48 <br> **216.82** | 805.7 <br> **216.91** | +225 B <br> **+85 B** |
| WebGPU Nodes | 804.99 <br> **216.68** | 805.21 <br> **216.77** | +225 B <br> **+85 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.29 <br> **144.41** | 535.49 <br> **144.49** | +205 B <br> **+85 B** |
| WebGPU Nodes | 491.46 <br> **134.24** | 491.67 <br> **134.26** | +205 B <br> **+29 B** | I would not expect orthographic shadow cameras to be using a logarithmic depth buffer.

I'd suggest having a look at this line:

https://github.com/mrdoob/three.js/blob/d4164b8804c56f716935ce4af63ad4ddbf56e0a3/src/materials/nodes/NodeMaterial.js#L236

Compare with the WebGLRenderer implementation:

https://github.com/mrdoob/three.js/blob/d4164b8804c56f716935ce4af63ad4ddbf56e0a3/src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl.js#L6

/ping @sunag


 @WestLangley 

> I would not expect orthographic shadow cameras to be using a logarithmic depth buffer.
> 
> I'd suggest having a look at this line:
> 
> `depthNode = fragDepth.log2().mul( cameraLogDepth ).mul( 0.5 ); `
> 
> Compare with the WebGLRenderer implementation:
> 
> `gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;`

I looked into that as well. However while researching I saw this statement by @gkjohnson when that particular line was put into the shader:

from https://github.com/mrdoob/three.js/pull/17442#issue-490581179:
> This disables the logarithmic depth buffer when using an orthographic projection matrix so there are no benefits to using a logarithmic depth buffer with an ortho camera. It just changes the shader code to produce sensible results.

At the time I interpreted that as: ""theoretically there are benefits to using a logarithmic depth with an orthographic camera, but I had to disable them to fix this bug"".

Or was my interpretation wrong, and there are never benefits to using a logarithmic depth with an orthographic camera? I guess this is something easy to test...create a simple scene with an orthographic camera, and place some meshes in the far distance to see if there is any z-fighting. If there is no z-fighting then there is no benefit to logarithmic depth with an orthographic camera. I will test this tomorrow. @sunag @WestLangley I committed some updates that resolved the issues:

1. The depth calculation uses `builder.camera.isPerspectiveCamera` now instead of `cameraIsPerspective`, and I removed the `cameraIsPerspective` and `cameraIsOrthographic` nodes.
2. I ensured the `coordZ` node is getting updated when using non-WebGPU coordinate system (this resolved the E2E tests).
3. I modified the logarithmic depth calculation to incorporate both the near plane and far plane (previously it only incorporated the far plane).

For completeness, here is the final logarithmic depth calculation that is being used:

```js
export const perspectiveDepthToLogarithmicDepth = ( perspectiveW, near, far ) => {

	// The final logarithmic depth formula used here is adapted from one described in an article
	// by Thatcher Ulrich (see http://tulrich.com/geekstuff/log_depth_buffer.txt), which was an
	// improvement upon an earlier formula one described in an
	// Outerra article (https://outerra.blogspot.com/2009/08/logarithmic-z-buffer.html).
	// The Outerra article ignored the camera near plane (it always assumed it was 0) and instead
	// opted for a ""C-constant"" for resolution adjustment of objects near the camera.
	// Outerra states this about their own formula: ""Notice that the 'C' variant doesn’t use a near
	// plane distance, it has it set at 0."" (quote from https://outerra.blogspot.com/2012/11/maximizing-depth-buffer-range-and.html)
	// It was debated here whether Outerra's ""C-constant"" version or Ulrich's ""near plane"" version should
	// be used, and ultimately Ulrich's ""near plane"" version was chosen for simplicity, since no ""C-constant""
	// needs to be worried about.
	// Outerra eventually made another improvement to their original ""C-constant"" formula, but it still
	// does not incorporate the camera near plane (for this version,
	// see https://outerra.blogspot.com/2013/07/logarithmic-depth-buffer-optimizations.html).
	near = near.max( 1e-6 ); // <-- clamp so we don't divide by 0
	const numerator = log2( perspectiveW.div( near ) );
	const denominator = log2( far.div( near ) );
	// The only modification we make to Ulrich's formula is
	// adding 1 to the final depth value and dividing by 2.
	return numerator.div( denominator ).add( 1 ).div( 2 );

};
``` @PoseidonEnergy Thank you for all your efforts so far.

@Mugen87 Can you please provide feedback to the OP? 🙏 I am concerned the OP is working without the benefit of guidance. **Update 2024-11-13 | This post and info on the logarithmic depth buffer calculation is outdated. Please see the new revisions to the logarithmic depth functions in the pull request here: https://github.com/mrdoob/three.js/pull/29870**

####################################################################
####################################################################
####################################################################

> I noticed that the logarithmicDepthBuffer calculation has changed and now it no longer works for me. I have a small codePen that I use in the forum to demonstrate logarithmicDepth with wgsl code. @PoseidonEnergy If there were any errors, I'm happy that they were fixed. Fortunately, I never faced the errors. Can you help me adapt the codePen so that it works correctly again with r170? https://codepen.io/Spiri0/pen/vYqpRga?editors=0010

@Spiri0 Sure, happy to help--for reference, the latest logarithmic-depth-related pull request can be found here: https://github.com/mrdoob/three.js/pull/29561

In that latest pull request, the logarithmic depth formula was refined to following:

```
cameraNear = max( 1e-6, cameraNear ); // clamp cameraNear so we don't divide by 0
var logDepth = log2( ( w / cameraNear ) + 1 ) / log2( ( camerafar / cameraNear ) + 1 );
```

Regarding your code, the property `outPosition.w` can directly be used for `w` in the formula above (do not add `1` to it).
Additionally, the old uniform `logDepthBufFC` was completely removed. Lastly, the calculation now uses `camera.near` to fix small visual artifacts on objects extemely close to the camera (rare but definitely visible).

Here is a Desmos link if you want to visualize the new logarithmic depth curve: https://www.desmos.com/calculator/mtj2rdv9nm

And finally, here is your code updated to use the new formula:

```import * as THREE from ""https://cdn.jsdelivr.net/npm/three@0.170/build/three.webgpu.js/+esm"";
import { OrbitControls } from ""https://cdn.jsdelivr.net/npm/three@0.170/examples/jsm/controls/OrbitControls.js/+esm"";
import { wgslFn, varyingProperty, vec4, cameraProjectionMatrix, cameraViewMatrix, modelWorldMatrix, attribute, uniform } from ""https://esm.sh/three/tsl"";

const renderer = new THREE.WebGPURenderer({ antialias: true, logarithmicDepthBuffer: true });
renderer.outputColorSpace = THREE.SRGBColorSpace;
renderer.setPixelRatio( window.devicePixelRatio );
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.setClearColor( 0x000000 );
renderer.setClearAlpha( 0 );
document.body.appendChild( renderer.domElement );

const aspect = window.innerWidth / window.innerHeight;

const camera = new THREE.PerspectiveCamera( 50.0, aspect, 1e-6, 1e12 );
const scene = new THREE.Scene();

scene.background = new THREE.Color( 0x00001f );
camera.position.set( 30, 40, 140 );
const controls = new OrbitControls( camera, renderer.domElement );

window.addEventListener( ""resize"", onWindowResize, false );
//--------------------------------------------------------------------------

await init();
await render();

async function init() {

  await renderer.init();
  
  // clamp cameraNear so we don't divide by 0 in the log depth calculation
  const cameraNear = uniform( Math.max(1e-6, camera.near) );
  const cameraFar = uniform( camera.far );  
  
  const perspectiveW = varyingProperty(""float"", ""perspectiveW"");  //varying
  
  //params contain uniforms and attributes
  const vertexShaderParams = {
    projectionMatrix: cameraProjectionMatrix,
    cameraViewMatrix: cameraViewMatrix,
    modelWorldMatrix: modelWorldMatrix,  
    position: attribute(""position"")   
  }
  
  const vertexShader = wgslFn(`
    fn main_vertex(
      projectionMatrix: mat4x4<f32>,
      cameraViewMatrix: mat4x4<f32>,
      modelWorldMatrix: mat4x4<f32>,
      position: vec3<f32>
    ) -> vec4<f32> {
    
      var outPosition = projectionMatrix * cameraViewMatrix * modelWorldMatrix * vec4<f32>(position, 1);
      
      varyings.perspectiveW = outPosition.w;
      
      return outPosition;
    }
  `, [perspectiveW]); //add the varying
  
  //varying and uniform
  const depthShaderParams = {
    perspectiveW: perspectiveW,
    cameraNear: cameraNear,
    cameraFar: cameraFar
  }
  
  const depthShader = wgslFn(`
    fn main_depth(
      perspectiveW: f32,
      cameraNear: f32,
      cameraFar: f32
    ) -> vec4<f32> {
    
      var depth = log2( ( perspectiveW / cameraNear ) + 1 ) / log2( ( cameraFar / cameraNear ) + 1 );
      return vec4<f32>(depth);
    }
  `);
  
  const geometry = new THREE.BoxGeometry( 20, 60, 60 );
  const material = new THREE.MeshBasicNodeMaterial();
  material.vertexNode = vertexShader( vertexShaderParams );
  material.depthNode = depthShader( depthShaderParams );
  material.colorNode = vec4( 1, 0.25, 1, 1 ); //a fragment shader would also be possible
 
  const box = new THREE.Mesh( geometry, material );
  box.position.set( 0, 0, 0 );
  box.rotation.y = Math.PI / 2;
  const box2 = box.clone();
  box2.position.set( 0, 0, 100 );
  
  scene.add( box ); 
  scene.add( box2 );
  
  
  const selectableGeometry = new THREE.BoxGeometry(100, 100, 100);
  const selectableMaterial = new THREE.MeshBasicNodeMaterial({
    color: 0x12ffff,
    transparent: true,
    opacity: 0.4,
    side: THREE.DoubleSide
  });

  const lineMaterial = new THREE.LineBasicMaterial({
    color: 0xffffff,
    linewidth: 2,
  });

  const selectableMesh = new THREE.Mesh(selectableGeometry, selectableMaterial);
  selectableMesh.name = `Building_${1}_SelectableBox_Z${1}_Y${1}`;
  selectableMesh.position.set(0, 0, -20);

  const edges = new THREE.EdgesGeometry(selectableGeometry);
  const line = new THREE.LineSegments(edges, lineMaterial);

  selectableMesh.add(line);
  
  scene.add(selectableMesh);

 
  const selectableMesh2 = new THREE.Mesh(selectableGeometry, selectableMaterial);
  selectableMesh2.position.set(0, 0, -200);

  const edges2 = new THREE.EdgesGeometry(selectableGeometry);
  const line2 = new THREE.LineSegments(edges2, lineMaterial);
  selectableMesh2.add(line2);

  scene.add(selectableMesh2);  
}

//---------------------------------------------------------------
function render() {
  requestAnimationFrame( render );
  renderer.render(scene, camera);
}

 
function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize( window.innerWidth, window.innerHeight );
}
``` I was already looking at your change in detail. Thanks for the explanation. That helps me understand. Very interesting that logDepthBufFC is no longer neccessary. But I always found it strange that only the far value appeared in it. Your formula seems more complete to me.

The logarithmicDepthBuffer has been a topic in the forum a few times. I only recently created the codePen based on a user request in the forum.
I will keep the node variant and the shader variant in there, so users can see both.

Thank you for your effort. I work a lot with the logarithmicDepthBuffer. > I was already looking at your change in detail. Thanks for the explanation. That helps me understand. Very interesting that logDepthBufFC is no longer neccessary. But I always found it strange that only the far value appeared in it. Your formula seems more complete to me.
> 
> The logarithmicDepthBuffer has been a topic in the forum a few times. I only recently created the codePen based on a user request in the forum. I will keep the node variant and the shader variant in there, so users can see both.
> 
> Thank you for your effort. I work a lot with the logarithmicDepthBuffer.

@Spiri0 Hey there, just letting you know that the logarithmic depth buffer formula and related functions have undergone another revision which most definitely will affect your code in the near future. This revision is in PR #29870. Namely, the function `perspectiveDepthToLogarithmicDepth` has been renamed to `viewZToLogarithmicDepth`, and it expects a _negative_ `viewZ` value, and NOT a `w` component. In addition, the formula itself has been changed very slightly.

Here is the old calculation:

![image](https://github.com/user-attachments/assets/51e75f5b-ad64-4533-8aa9-5e8673385720)

And here is the new calculation:

![image](https://github.com/user-attachments/assets/658918e6-3862-424d-8a72-aac1cd22dbf1)

As mentioned before, this revision can be found in PR #29870.",,"**Update 2024-11-13 | This post and info on the logarithmic depth buffer calculation is outdated. Please see the new revisions to the logarithmic depth functions in the pull request here: https://github.com/mrdoob/three.js/pull/29870**

####################################################################
####################################################################
####################################################################

Related issue: Closes #29200 

This pull request corrects the calculations for the logarithmic depth buffer, and ensures proper depth value adjustment for shadowmaps when logarithmicDepthBuffer = true and shadows are enabled.
I found 4 bugs that are causing the issues with the logarithmic depth buffer; I was able to fix 3 of them and write a workaround for 1 of them:

### Bug 1
**Location** | `NodeMaterial.setupDepth()` in **src/materials/nodes/NodeMaterial.js**
**Details** | In the following line, the variable `fragDepth` always equals ""2"" when a shadow is being rendered, no matter what the actual depth of the frag is (i.e. the `w` component of `modelViewProjection()` always equals ""1""):

`const fragDepth = modelViewProjection().w.add(1);`

**Fix** | The line was replaced with the following:

`const fragDepth = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar)`

**Screenshot** | (see bug no. 2)

### Bug 2
**Location** | `NodeMaterial.setupDepth()` in **src/materials/nodes/NodeMaterial.js**
**Details** | In the following line, the logarithmic depth calculation is not correct:

`depthNode = fragDepth.log2().mul(cameraLogDepth).mul(0.5);`

**Fix** | The following lines were added to **src/nodes/display/ViewportDepthNode.js** (note the change to the logarithmic depth calculation):

```js
export const perspectiveDepthToOrthographicDepth = ( depth, near, far ) => viewZToOrthographicDepth( perspectiveDepthToViewZ( depth, near, far ), near, far );`
export const orthographicDepthToLogarithmicDepth = ( depth, logDepthBufFC ) => depth.log2().mul( logDepthBufFC ).mul( 0.25 ).add( 1 );
```
And the former `depthNode` calculation line was replaced by a call to the new `orthographicDepthToLogarithmicDepth` function:

`depthNode = orthographicDepthToLogarithmicDepth( fragDepth, cameraLogDepth );`

**Screenshot** | *webgpu_camera_logarithmicdepthbuffer.html* results before and after change:

![image](https://github.com/user-attachments/assets/98140564-e952-414d-a75a-321dafa91357)

### Bugs 3a & 3b
**Location** | `AnalyticLightNode.setupShadow()` in **src/nodes/lighting/AnalyticLightNode.js**
**Details** | **3a)** The necessary adjustment to `coordZ` is not made when `logarithmicDepthBuffer` is `true`. **3b)** The aforementioned adjustment of `coordZ` requires use of the `cameraNear`, `cameraFar`, and `cameraLogDepth` uniforms, but these uniforms do not appear to be using the `shadow.camera` object for their calculations.
**Fix** | The following lines were added so that the shadow `coordZ` is adjusted for the logarithmic depth buffer, with the necessary uniforms correctly using the shadow camera object:

```js
if ( renderer.logarithmicDepthBuffer === true ) {

    // the normally available cameraNear, cameraFar, and cameraLogDepth nodes cannot be used here because they do
    // not get updated to use the shadow camera, so we have to declare our own ""local"" nodes here.
    // TODO: can we fix the cameraNear/cameraFar/cameraLogDepth nodes in src/nodes/accessors/Camera.js so we don't have to declare local ones here?
    if ( shadow.camera.isPerspective ) {

        const cameraNearLocal = uniform( 'float' ).onRenderUpdate( () => shadow.camera.near );
        const cameraFarLocal = uniform( 'float' ).onRenderUpdate( () => shadow.camera.far );
        coordZ = perspectiveDepthToOrthographicDepth( coordZ, cameraNearLocal, cameraFarLocal );

    }

    const cameraLogDepthLocal = uniform( 'float' ).onRenderUpdate( () => 2.0 / ( Math.log( shadow.camera.far + 1.0 ) / Math.LN2 ) );
    coordZ = orthographicDepthToLogarithmicDepth( cameraLogDepthLocal );

}
```

**Screenshot** | image is from a JSFiddle found at https://github.com/mrdoob/three.js/issues/29200

Note: the ""shadow acne"" in the ""After"" image is a GOOD thing to see, since it means the logarithmic depth shadowmap comparison is working as intended. The shadow acne is easily removed by setting `shadow.bias` to -0.0005 or some number close to that.

![image](https://github.com/user-attachments/assets/bb68ad2f-0e4d-4c20-9c95-c7d48c8d7373)

","Try using `builder.camera.isPerspectiveCamera` instead of `cameraIsPerspective`. I think we can remove `cameraIs*` nodes. We need a version for coordZ for WebGLBackend as well, this is crashing in E2E tests. In post processing we have to compute the view position of a fragment in various effects. We do that with `getViewPosition()`:

https://github.com/mrdoob/three.js/blob/9e5528d2890de5432c6472bde6702abecc8e1cf7/src/nodes/utils/PostProcessingUtils.js#L15

This method does currently not work if a logarithmic depth buffer is used. How would the reverse operation of `perspectiveDepthToLogarithmicDepth()` look like that computes a ""normal"" depth value based on the logarithmic depth? **Update 2024-11-13 | This post and info on the logarithmic depth buffer calculation is outdated. Please see the new revisions to the logarithmic depth functions in the pull request here: https://github.com/mrdoob/three.js/pull/29870**

####################################################################
####################################################################
####################################################################

@Mugen87 Computing the perspective `w` value from a logarithmic depth value using the new formula would look like this. Note that this gives you the `w` value, as in `modelViewProjection.w`. To get `viewZ`, just divide `z` by `w` (I know you know that already but I'm just saying it for posterity).

![image](https://github.com/user-attachments/assets/78ae6f02-ea51-4a52-afcc-11320f74491e)

The TSL node function based on the math shown above would look like this. Like mentioned before, this returns the perspective `w` value, and not `viewZ`. To get `viewZ`, just do `z / w`:

```
// TODO: should this function be called ""logarithmicDepthToPerspectiveW"" instead?
const logarithmicDepthToPerspectiveDepth = (logDepth, near, far) => {
  // NOTE: this returns the ""w"" component, not ""z""
  const exponent = logDepth.mul(log(far.div(near).add(1)));
  return float(Math.E).pow(exponent).sub(1).mul(near);
};
```

**NOTE: I have not tested the above node function above...it looks correct though...needs another set of eyes.**

As an aside, should the functions `perspectiveDepthToLogarithmicDepth()` and `logarithmicDepthToPerspectiveDepth()` be renamed to `perspectiveWToLogarithmicDepth()` and `logarithmicDepthToPerspectiveW()` to make it more clear that the `w` component is being used?

Desmos graph: https://www.desmos.com/calculator/1e3ttyfe6q

![image](https://github.com/user-attachments/assets/506a12bf-bd99-430c-a2b2-48022418792f)

 I've tried to replace the `sampleDepth()` function in `GTAONode` for quick testing but it does not work yet. Here is the code:
```js
const sampleDepth = ( uv ) => {

	const depth = this.depthNode.uv( uv ).x;

	if ( builder.renderer.logarithmicDepthBuffer === true ) {

		const mvp = positionWorld.mul( this.cameraProjectionMatrix );

		return mvp.z.div( logarithmicDepthToPerspectiveDepth( depth, this.cameraNear, this.cameraFar ) );

	} else {

		return depth;

	}

};
```
Do you see an obvious issue with the above code?  I can say the following at the moment:

1. `depth` in `const depth = this.depthNode.uv( uv ).x;` should range between 0 and 1 before being passed to `logarithmicDepthToPerspectiveDepth( depth, this.cameraNear, this.cameraFar )`
2. Without looking at the rest of the code, `this.cameraNear` and `this.cameraFar` should be uniform nodes

In the meantime I will continue verifying that the `logarithmicDepthToPerspectiveDepth` function is correct. Both requirements were true when during my tests. I'll revisit the code tomorrow. Does the final `depth` value returned from `sampleDepth` need to be linear/orthographic? If so, there should be a conversion from the `viewZ` value you get after the division by `w` to orthographic:

```
const viewZ = mvp.z.div( logarithmicDepthToPerspectiveDepth( depth, this.cameraNear, this.cameraFar ) );

return viewZToOrthographicDepth( viewZ, this.cameraNear, this.cameraFar );
```

I am still confirming that the logarithmicDepthToPerspectiveDepth function is correct. > Does the final depth value returned from sampleDepth need to be linear/orthographic?

No, at least the AO uses the raw depth from the depth texture attachment. > As an aside, should the functions perspectiveDepthToLogarithmicDepth() and logarithmicDepthToPerspectiveDepth() be renamed to perspectiveWToLogarithmicDepth() and logarithmicDepthToPerspectiveW() to make it more clear that the w component is being used?

Yes, I think otherwise the names are confusing. Let's use `perspectiveWToLogarithmicDepth()`. I can't get it to work with the proposed formula. I've also tried a slightly different formula but with no success.
```js
export const logarithmicDepthToPerspectiveW = ( logarithmicDepth, near, far ) => {

	const logRatio = log2( far.div( near ).add( 1 ) );
	const perspectiveW = near.mul( pow( 2, logarithmicDepth.mul( logRatio ).sub( 1 ) ) );
	return perspectiveW;

};
``` **Update 2024-11-13 | This post and info on the logarithmic depth buffer calculation is outdated. Please see the new revisions to the logarithmic depth functions in the pull request here: https://github.com/mrdoob/three.js/pull/29870**

####################################################################
####################################################################
####################################################################

Perhaps your `mvp.z` equals (or is very close to) `mvp.w`? You may be returning `1` after dividing `z` by `w`.

Here is a fiddle where `mvp.z` is extremely close to `mvp.w` (even at a camera distance of 9,000): https://jsfiddle.net/h7sd13pj

If that is the case, then try returning just the inverse:

`return float( 1 ).div( logarithmicDepthToPerspectiveDepth( depth, this.cameraNear, this.cameraFar ) );` Can you tell me how I can use `GTAONode` on my own to help you work on this? Maybe some little example or screenshot of what works when `logarithmicDepthBuffer` is `false` compared to when it is `true`? There is an example for demonstrating the AO: https://threejs.org/examples/webgpu_postprocessing_ao

I suggest you test this locally by turning on logarithmic depth buffer in the demo. You will see the AO breaks. 

For testing I have added  `logarithmicDepthToPerspectiveW()` to `ViewportDepthNode` and then tried to use it in `GTAONode` (with no success so far)."
29642,2024-10-13T23:19:38Z,2024-10-14T23:38:32Z,sunag,10,1,11,848,23,1,0,[],186.0,0,2625678.0,0,0,0,0,3771104.630305,,0,11,1,False,"['RenaudRohlinger', 'Mugen87', 'mrdoob', 'github-actions[bot]', 'ligaofeng0901', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.81 <br> **219.39** | 815.27 <br> **219.76** | +465 B <br> **+372 B** |
| WebGPU Nodes | 814.32 <br> **219.25** | 814.78 <br> **219.63** | +465 B <br> **+373 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.62 <br> **145.06** | 538.01 <br> **145.26** | +392 B <br> **+198 B** |
| WebGPU Nodes | 493.74 <br> **134.79** | 494.13 <br> **135.13** | +392 B <br> **+338 B** | Am I the only one with 5fps on the `webgpu_lights_tiled` example when using 100 lights, and having both my Chrome and Chrome Canary completely crashing when using 1000?

Also the demo looks odd, maybe related to the recent changes on the transmission pass of the Renderer:
<img width=""1710"" alt=""Screenshot 2024-10-22 at 15 14 02"" src=""https://github.com/user-attachments/assets/36ac1152-8ade-494b-9640-3abd72a301d7"">


/cc @sunag  On `dev` I have a black screen and see the following warning in Chrome:

> Error creating pipeline state Fragment function exceeds available stack space
    at InitializeImpl (../../third_party/dawn/src/dawn/native/metal/RenderPipelineMTL.mm:449)

 It hangs Chrome here (M1 Pro) and eventually I get this in the console:

![Screenshot 2024-10-22 at 5 43 57 PM](https://github.com/user-attachments/assets/4ac53ee7-2e73-43dd-a098-f7c1c02c6232)
 I ended up turning it off after an unsuccessful cleanup, here it is again
https://github.com/mrdoob/three.js/pull/29722 This is how it looks like now on a Pixel 8:

https://raw.githack.com/mrdoob/three.js/dev/examples/index.html?q=tiled#webgpu_lights_tiled

![Screenshot_20241023-083019](https://github.com/user-attachments/assets/62f0ffe0-c5b8-4a41-a988-c5a9f63fa194)
 Looks good on ChromeOS!

![Screenshot 2024-10-23 08 57 46](https://github.com/user-attachments/assets/b8d2f9b2-0a15-408e-b881-5ad5f1cf4fe0)
 > This is how it looks like now on a Pixel 8:

Could it be cache?  > > This is how it looks like now on a Pixel 8:
> 
> Could it be cache?

I think it was yeah.
Just tried again and it works properly 🎉 If a directional light is added into scene, some area that point light not covered lose directional light. I add a  directional light with red color, it appear like this below:
<img width=""1081"" alt=""image"" src=""https://github.com/user-attachments/assets/e58ecf05-8c2a-4cb8-9fd7-eb815dc1089d"">
",,"### Description

The main idea of ​​having a lighting system is to open up the possibility for contributors to add their own lighting system like clustered lighting, which is why I added `TiledLighting` in addons.

About `TiledLighting`, there are still improvements to be made, such as sorting the lights according to the proximity of the camera to obtain better indexes, adding disposes, math optimizations and mainly added WebGLBackend support.

### API

The user does not need to manipulate anything special, such as shaders or uniforms, just define the class for light system.

```js
const lighting = new TiledLighting(); // ( maxLights = 1024, tileSize = 32 )

renderer = new THREE.WebGPURenderer();
renderer.lighting = lighting; // set lighting system
```

Or define per material.

```js
import { tiledLights } from 'three/addons/tsl/lighting/TiledLightsNode.js';

const lightsNode = tiledLights();
lightsNode.setLights( [ ...pointLights ] );

const materialA = new THREE.NodeMaterial();
materialA.lightsNode = lightsNode; 

const materialB = new THREE.NodeMaterial();
materialB.lightsNode = lightsNode; 
```

### Process summary

1. Store all the light data in a texture. It's position, color, distance...

2. Create a buffer that represents pieces of the image, the tiles. Each tile will have the indexes of the lights that are visible in that piece.

3. Instead of processing all the lights on the entire screen, we will only process the lights that are present in the indexes of each tile, I made each tile store 8 indexes. It is as if it had only 8 lights to calculate per pixel.

4. There is a pre-renderer stage where the compute-shader will project the position and radius of light to screen space where we can check for intersection with the tiles using AABB and thus bind the light, indexing it in the tile buffer.

_As I limited it to 8 indexes per tile and we do not have a sort lights, the system may fail if too many lights are added close to each other._

https://github.com/user-attachments/assets/2957adc7-bb5e-4bf3-adb3-3d21c1702051

### Commits

- [x] [introduce lighting system](https://github.com/mrdoob/three.js/commit/73b87746ae8f22683684376d642b8fc9e19693c7)
- [x] [introduce tiled lighting](https://github.com/mrdoob/three.js/commit/9b291ded2adb15359e35675695df54c296d0cab0)
- [x] [WGSLNodeBuilder: Remove incompatible types](https://github.com/mrdoob/three.js/commit/160db662d21244de9e70ca5c79934c282634d2d4)
- [x] [Renderer: move .nodes.library -> .library](https://github.com/mrdoob/three.js/commit/05c4cd22d4de1bd2d3fcf88d26b744f3e714eabd)
","Instead of `import *` how about this instead?
```js
import { Lighting } from 'three';
```"
29868,2024-11-12T18:26:32Z,2024-11-12T22:53:48Z,Mugen87,0,0,1,6,1,0,0,[],,0,16036.0,0,0,0,0,3806333.005508,,0,1,1,False,[],,,"Fixed #29859.

**Description**

This PR adds default parameters to `DecalGeometry` similar to other geometry generators. In this way, `BufferGeometry.clone()` works as expected with this sub-class.
",
29867,2024-11-12T13:47:18Z,2024-11-12T14:33:33Z,RenaudRohlinger,1,0,1,5,1,0,0,['WebGL Backend'],182.0,0,2776.0,0,0,0,0,3836347.488312,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.37 <br> **79.06** | 339.37 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 477.43 <br> **132.37** | 477.54 <br> **132.4** | +110 B <br> **+29 B** |
| WebGPU Nodes | 476.9 <br> **132.25** | 477.01 <br> **132.28** | +110 B <br> **+31 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.82 <br> **112.02** | 464.82 <br> **112.02** | +0 B <br> **+0 B** |
| WebGPU | 546.47 <br> **148.04** | 546.58 <br> **148.07** | +110 B <br> **+31 B** |
| WebGPU Nodes | 502.35 <br> **137.74** | 502.46 <br> **137.76** | +110 B <br> **+27 B** |",,"
**Description**
The OffscreenCanvas support was broken in the WebGLBackend with https://github.com/mrdoob/three.js/pull/27463. This PR fixes the issue.
<img width=""531"" alt=""image"" src=""https://github.com/user-attachments/assets/9ff8d77c-7fbe-47ba-b63d-785c609c9490"">

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29610,2024-10-10T10:39:48Z,2024-10-26T10:18:47Z,aardgoose,12,11,12,788,8,4,0,[],179.0,0,2858596.0,0,0,0,0,3842978.846311,,0,12,1,False,"['github-actions[bot]', 'aardgoose', 'ligaofeng0901', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.57 <br> **171.41** | 691.57 <br> **171.41** | +0 B <br> **+0 B** |
| WebGPU | 818.89 <br> **220.86** | 818.94 <br> **220.87** | +54 B <br> **+12 B** |
| WebGPU Nodes | 818.4 <br> **220.72** | 818.45 <br> **220.73** | +54 B <br> **+12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.72 <br> **112.16** | 463.72 <br> **112.16** | +0 B <br> **+0 B** |
| WebGPU | 539.75 <br> **145.78** | 539.8 <br> **145.81** | +54 B <br> **+21 B** |
| WebGPU Nodes | 495.74 <br> **135.6** | 495.8 <br> **135.63** | +54 B <br> **+23 B** | > This issue where switching between fade and non-fade modes requires triggering a rebuild by disabling and reenabling shadows remains.

It seems toggling the `fade` option in `webgl_shadowmap_csm` has a different effect than in `webgpu_shadowmap_csm` where I can barely see any change. Is the mentioned rebuild missing?  `webgpu_shadowmap_csm` does not run in Firefox/WebGL. I just see the blue/gray background. The following WebGL warnings are logged: 

> WebGL warning: drawElementsInstanced: Buffer for uniform block is smaller than UNIFORM_BLOCK_DATA_SIZE.
After reporting 32, no further warnings will be reported for this WebGL context.  I get the same errors on Chrome WebGL. Appears to be an issue with vec2[4] cascades array. Hardcoding a vec2() rather than cascades.element( n ) in the shader removes the error and is equivalent to how the original PR worked.

Looking at the issue at the moment.

 The WebGL version works now 🎉 .

During testing, I have noticed that when using a WebGL backend and an orthographic camera, the shadows start with an offset:

`WebGPURenderer`(WebGL):

<img width=""787"" alt=""image"" src=""https://github.com/user-attachments/assets/50fe7663-f629-462d-9d41-3f447ad4eb15"">

`WebGLRenderer`:

<img width=""825"" alt=""image"" src=""https://github.com/user-attachments/assets/0fceed48-0ba2-4608-bc75-383670fc8b64"">
 I have fixed the issue with the WebGL backend and orthographic cameras via https://github.com/mrdoob/three.js/pull/29610/commits/b441f99e1897937af2ca7d9c3cd0c7d07f401412. Fading is still broken though. Not sure where the root cause is yet...

The `far` shadow distances also do not match with the original.  What is the exact issue with fading? Apart from requiring toggling shadow on and off to get the material to rebuild. When you turn `fade` one, try to move the camera away. Below are two screenshot from `webgl_shadowmap_csm`.

Without fading:

<img width=""789"" alt=""image"" src=""https://github.com/user-attachments/assets/60273c81-0a02-41cc-9ec3-994011b4adcd"">

With fading:

<img width=""546"" alt=""image"" src=""https://github.com/user-attachments/assets/22d980a0-54b0-4f44-9a1d-624435c95752"">

In the `webgpu_shadowmap_csm`, the fading is missing. Even toggling `shadows` does not seem to have an effect. Fixed up the fading now I've revisited the implementation several days now but I can't explain the difference of the shadow frustums so far. I have the feeling the frustums are not correctly transformed for some reasons. I think the parameters of shadow camera (I mean `csm.lights[i].shadow.camera.xxx`) should not copy from the main light directly, especially `.far`, it has a siginificant affection to precision, we should keep a narrowest box of each frustum. But unfortunatelly, I don't know the formula about it.
 In my scene, I can't get a proper value for '.far', If it's too small, I can get better effect near the camera, but the shadow disappears at the farthest edge of each frustum. If it's too large, the shadow is gone.",,"Related issue: #29295

CSM implemented using shadowNode.

This uses dummy light objects to use the existing mechanism for updating the cascades shadow cameras, without injecting additional lights into the scene.

The original csm.lightDirection is replaced by the `DirectionalLight`s direction and shadow parameters are inherited from the lights shadow object.

This issue where switching between fade and non-fade modes requires triggering a rebuild by disabling and reenabling shadows remains. 
","I guess this log can be removed? I think you must create `CSMFrustum` depending on the backend. Otherwise the result is incorrect for WebGL since the internal vertices are not correctly configured. `CSMFrustum` creates internal instances of `CSMFrustum` but without honoring the `data` parameter (see line 87).

It seems `data` must be a property so you can pass it later to the ctor. Why did you pick this extreme `far` value? I would expect using `1000` (`params.far`). the webGL parameter is only used in setFromProjectionMatrix() which is only ever called for the mainFrustum().  The temporary  _lightSpaceFrustum and the frustums generated by mainFrustum.split() never have this method called and inherit their vertices from the mainFrustum AFAICS (in CSMShadowNode and the original implementation).

Also the CSMFrustum is never created with a data.projectionMatrix value, so 
https://github.com/mrdoob/three.js/blob/37d6f280a5cd642e801469bb048f52300d31258e/examples/jsm/csm/CSMFrustum.js#L26-L30
seems redundant. Nit: I think a `.normalize()` is missing here otherwise `_lightDirection` is not a direction vector. Maybe:
```js
const linearDepth = viewZToOrthographicDepth( positionView.z, cameraNear, shadowFar ).toVar( 'lDepth' );
``` ## Unused variable, import, function or class

Unused import int.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2476) Where does the `shadowNode` property get used? I'm trying to figure out if I'm missing something in the TypeScript types for this. It is used:

https://github.com/mrdoob/three.js/blob/ed9f5a1977d356e4f6c01ccbe89521e310273db3/src/nodes/lighting/AnalyticLightNode.js#L60

As the name suggests it is type Node() but the typescript annotations probably need updating by whoever maintains them. Thanks! That would be me. :)"
29834,2024-11-07T15:23:31Z,2024-11-12T09:10:38Z,i3ene,2,0,4,50,1,0,0,[],409201.0,0,409929.0,0,0,0,0,3855422.909863,,0,4,1,False,['Mugen87'],"I've slightly refactored the PR to handle `enablePan` in `_handleKeyDown()` more correctly. Unfortunately, the PR targeted `master` so I had to revert the PR. Added the changes to `dev` via https://github.com/mrdoob/three.js/commit/e08c3e74700c2aad11d15c72ed86f0f3bdf5be1f.

@i3ene Please always target `dev` when filing PRs.",,"Implemented the toggle via `enableRotate` also on `_handleKeyDown`. The previous behaviour seemed unexpected, allowing rotation via keys, even when rotating should be disabled if `enableRotate` was set to `false`.


**Description**

The previous implementation of `_handleKeyDown` did not take the `enableRotate` state into account. This seemed unexpected when `enableRotate` was set to `false`, but rotation was still possible with key events.
This commit guards the rotation of the `keydown` event additionally with the already available `enableRotate` variable and makes it more intuitive in its behavior again.
",
29590,2024-10-08T14:19:04Z,2024-10-08T14:19:10Z,Mugen87,2,0,1,90,5,0,0,[],30.0,0,3005649.0,0,0,0,0,3855570.304144,,0,1,0,False,"['github-actions[bot]', 'Mugen87']","Reverting for now. I still don't get the expected results. ### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 809.73 <br> **218.11** | 809.73 <br> **218.11** | +0 B <br> **+0 B** |
| WebGPU Nodes | 809.24 <br> **217.98** | 809.24 <br> **217.98** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.76 <br> **144.59** | 535.76 <br> **144.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.87 <br> **134.33** | 491.87 <br> **134.33** | +0 B <br> **+0 B** |",,Reverts mrdoob/three.js#29588,
29836,2024-11-07T19:09:46Z,2024-11-07T19:30:24Z,sunag,2,0,1,26,2,0,0,[],187.0,0,375458.0,0,0,0,0,3876320.667832,,0,1,1,False,"['github-actions[bot]', 'Lafeu-p']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.22 <br> **171.45** | 692.22 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 825.32 <br> **222.86** | 825.46 <br> **222.91** | +141 B <br> **+41 B** |
| WebGPU Nodes | 824.44 <br> **222.66** | 824.58 <br> **222.7** | +141 B <br> **+39 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.58 <br> **112.26** | 464.58 <br> **112.26** | +0 B <br> **+0 B** |
| WebGPU | 545.49 <br> **147.75** | 545.63 <br> **147.78** | +141 B <br> **+35 B** |
| WebGPU Nodes | 501.37 <br> **137.44** | 501.51 <br> **137.48** | +141 B <br> **+37 B** | I retested and the material still updates.
[#29795 (comment)](https://github.com/mrdoob/three.js/issues/29795#issuecomment-2464423538)",,"Related issue: https://github.com/mrdoob/three.js/issues/29795#issuecomment-2461686721

**Description**

An improvement from the [previous PR](https://github.com/mrdoob/three.js/pull/29807), the cachekey comparison will check if it is necessary to recreate the `RenderObject` otherwise just update the geometry.",
29858,2024-11-11T12:33:54Z,2024-11-11T13:02:35Z,Mugen87,1,0,1,22,2,0,0,[],179.0,0,1721.0,0,0,0,0,3928209.779759,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.22 <br> **79.04** | 339.37 <br> **79.06** | +145 B <br> **+25 B** |
| WebGPU | 477.43 <br> **132.37** | 477.43 <br> **132.37** | +0 B <br> **+0 B** |
| WebGPU Nodes | 476.73 <br> **132.2** | 476.73 <br> **132.2** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.67 <br> **111.99** | 464.82 <br> **112.02** | +145 B <br> **+26 B** |
| WebGPU | 546.47 <br> **148.04** | 546.47 <br> **148.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 502.35 <br> **137.74** | 502.35 <br> **137.74** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/26897#issuecomment-2467941278

**Description**

The PR makes sure the internal plane and box mesh of `WebGLBackground` are honored during a `dispose()` call of the renderer.
",
29686,2024-10-18T04:51:58Z,2024-10-20T07:24:07Z,RenaudRohlinger,9,5,4,17,3,4,1,[],172.0,0,2067697.0,0,0,0,0,3963550.377044,,0,4,1,False,"['Spiri0', 'RenaudRohlinger', 'github-actions[bot]', 'Makio64', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.42 <br> **171.34** | 692.42 <br> **171.34** | +0 B <br> **+0 B** |
| WebGPU | 816.92 <br> **220.02** | 817.09 <br> **220.08** | +171 B <br> **+58 B** |
| WebGPU Nodes | 816.43 <br> **219.89** | 816.6 <br> **219.95** | +171 B <br> **+59 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.65 <br> **112.12** | 464.65 <br> **112.12** | +0 B <br> **+0 B** |
| WebGPU | 538.68 <br> **145.4** | 538.85 <br> **145.46** | +171 B <br> **+60 B** |
| WebGPU Nodes | 494.71 <br> **135.27** | 494.88 <br> **135.33** | +171 B <br> **+58 B** | Oh I though : 
`await renderer.computeAsync(veryHeavyComputeProgram) // is waiting gpu task to finish`
`renderer.computeAsync(veryHeavyComputeProgram) // is not waiting gpu task to finish`

I suggest a more direct name : `waitGPUCompleted` > Oh I though :
> await renderer.computeAsync(veryHeavyComputeProgram) // is waiting gpu task to finish
> renderer.computeAsync(veryHeavyComputeProgram) // is not waiting gpu task to finish

I think in the end developers will always go for the async option, and calling the backend methods such as `await this.device.queue.onSubmittedWorkDone();` in WebGPU and `gl.fenceSync`, `gl.flush()` in WebGL2 will impact the performances even if we don't specify that it's an await operation.

If we consider that computeAsync and renderAsync are more expensive operation that are really async and will potentially freeze the render/CPU I'm fine with this solution.

Also I agree with the name. Or maybe `waitForGPUCompletion`. @RenaudRohlinger waitForGPUCompletion is cool ! 
reading your message I also thought about waitForGPUWorkDone to be closer from webgpu api ```js
await renderer.computeAsync(veryHeavyComputeProgram)
await renderer.syncWithGPU() // wait for the GPU to resolve its operations
```
Just for my understanding: Why do we need to call `syncWithGPU()` at all? The above line uses `await` so shouldn't be the compute task already be completed when `syncWithGPU()` is executed? For example, here is the code of `computeAsync` inside our renderer:
```js
async computeAsync( computeNodes ) {

if ( this._initialized === false ) await this.init();

this.compute( computeNodes );

await this.backend.resolveTimestampAsync( computeNodes, 'compute' );

}
```

In the code of `renderer.compute()`, nothing is `await`, which is why we don't even use an await in `computeAsync`. We would need a logic such as `await renderer. waitForGPUWorkDone()` to make the method properly waiting for the GPU to resolve the submitted task.

Something like this would probably solve the await behavior in WebGPU, but would stall the CPU in WebGL (fenceSync):
```js
async computeAsync( computeNodes ) {

if ( this._initialized === false ) await this.init();

this.compute( computeNodes );

               await this.waitForGPUWorkDone() // <-- Now the CPU really waits the GPU to go Idle before continuing
await this.backend.resolveTimestampAsync( computeNodes, 'compute' );

}
```

I think this makes sense overall, though the usage of [onSubmittedWorkDone() still feels a bit unclear for everyone](https://github.com/gpuweb/gpuweb/issues/3762). From my understanding, it should achieve what I'm suggesting here.

However, in the case of the WebGL fallback, our `_clientWaitAsync` polyfill would theoretically work, but it will likely end up stalling the main thread due to the `fenceSync` logic, which would not achieve the desired outcome in most cases.

This is why I'm hesitant to add this kind of waitForGPUWorkDone in the pipeline. In theory, you would only need this behavior in a few specific cases, and most likely not within a rendering loop. Edit - Updated the description of the PR to feed the AIs for developers. 😄  @RenaudRohlinger  I think this could be an elegant solution to wait for a lot of compute processes in total, which is important in my ocean repo. I've noticed that since a few releases with r168 hardly, with r170 clearly a visible stop motion effect appears.

This already leads to a better result but not yet perfect. But is that kind of use the right way if one wants to wait for a lot of compute shader processes?

```
	async Update(dt){

		this.computeTimeSpectrum.computeNode.parameters.time.value = performance.now() / 1000;

		await this.params_.renderer.waitForGPU();
		
		this.params_.renderer.compute(this.computeTimeSpectrum);

		this.IFFT({direction: ""x""});
		this.IFFT({direction: ""y""});
		this.IFFT({direction: ""z""});
		this.IFFT({direction: ""w""});

		this.computeMergeTextures.computeNode.parameters.deltaTime.value = dt;
		this.params_.renderer.compute(this.computeMergeTextures, this.defaultWorkgroup);
		this.params_.renderer.compute(this.computeTurbulenceTexture, this.defaultWorkgroup);

		await this.params_.renderer.backend.resolveTimestampAsync( this.computeTurbulenceTexture, 'compute' );
	}
```
This is in any case better than working with await and computeAsync on every single compute. There are 10 render.compute calls in IFFT. So I'm running a fairly computationally intensive compute chain.
 Adding waitForGPU out-of-the-box in computeAsync and renderAsync seems logical, but I'm uncertain about the potential performance impact, which is why I've hesitated to include it in the renderer's async operations, especially on the WebGL backend.

With more performance tests and feedback, if the overhead proves minimal, we could consider implementing it.",,"**Description**

This pull request introduces a new `waitForGPU` helper to the codebase, offering a unified method for synchronizing CPU operations with GPU tasks across both WebGPU and WebGL contexts.


Example usage:

```js
const compute = async (veryHeavyComputeProgram) => {

    renderer.compute(veryHeavyComputeProgram)
    await renderer.waitForGPU() // Ensures the CPU waits for the GPU to complete its operations
    await renderer.backend.resolveTimestampAsync( veryHeavyComputeProgram, 'compute' );
}
```

Note: 
- `waitForGPU` is not included in `computeAsync` and `renderAsync` by default due to potential performance implications. This method forces the CPU to wait for the GPU to fully resolve its operations, which can cause stalls, particularly in WebGL where fenceSync is used.
- The helper is designed for specific edge cases where precise synchronization is required between CPU and GPU, and not for typical rendering or compute loops. By leaving it out of core methods, we allow users to control synchronization manually and apply it only when absolutely necessary.
- This approach is particularly useful in WebGPU, where `onSubmittedWorkDone()` can achieve the desired behavior without stalling the CPU. However, in the case of WebGL it might cause main thread stalls due to the fenceSync logic.


*This contribution is funded by [Utsubo](https://utsubo.com)*
","Is it possible to shorten the name a bit? E.g. `waitForGPU()`? I don't mind but then I feel like we miss the concept of completion of task, such as `waitForGPUCompletion`, or `waitForGPUIdle`. Yes, `waitForGPUWorkDone()` is similar to the WebGPU api.

FWIW, other options are `waitForGPUResolve()`, `waitForGPUToResolve()`, or `waitForGPUToFullyResolve()`. My first thought was whether we could shorten the name too... I just think it's understanding that we're waiting for the GPU to finish tasks or be available?

```js
renderer.compute(veryHeavyComputeProgram)
await renderer.waitForGPU() // Ensures the CPU waits for the GPU to complete its operations
await renderer.backend.resolveTimestampAsync( veryHeavyComputeProgram, 'compute' );
``` Let's go for `waitForGPU()` then!"
29853,2024-11-10T16:50:58Z,2024-11-10T18:25:54Z,renovate[bot],0,0,1,6,1,0,0,[],,0,5757.0,0,0,0,0,3995151.593855,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `6624720` -> `4f3212b` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS43LjEiLCJ1cGRhdGVkSW5WZXIiOiIzOS43LjEiLCJ0YXJnZXRCcmFuY2giOiJkZXYiLCJsYWJlbHMiOltdfQ==-->
",
29854,2024-11-10T16:51:19Z,2024-11-10T18:26:05Z,renovate[bot],0,0,1,179,1,0,0,[],,0,5686.0,0,0,0,0,3995201.603813,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [concurrently](https://redirect.github.com/open-cli-tools/concurrently) | [`9.0.1` -> `9.1.0`](https://renovatebot.com/diffs/npm/concurrently/9.0.1/9.1.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/concurrently/9.1.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/concurrently/9.1.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/concurrently/9.0.1/9.1.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/concurrently/9.0.1/9.1.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.24.3` -> `4.25.0`](https://renovatebot.com/diffs/npm/rollup/4.24.3/4.25.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.25.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.25.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.24.3/4.25.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.24.3/4.25.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>open-cli-tools/concurrently (concurrently)</summary>

### [`v9.1.0`](https://redirect.github.com/open-cli-tools/concurrently/releases/tag/v9.1.0)

[Compare Source](https://redirect.github.com/open-cli-tools/concurrently/compare/v9.0.1...v9.1.0)

#### What's Changed

-   Remove signal event listeners on finish by [@&#8203;gustavohenke](https://redirect.github.com/gustavohenke) in [https://github.com/open-cli-tools/concurrently/pull/512](https://redirect.github.com/open-cli-tools/concurrently/pull/512)
-   Add support for Deno shortcuts and wildcards  by [@&#8203;mahtaran](https://redirect.github.com/mahtaran) in [https://github.com/open-cli-tools/concurrently/pull/508](https://redirect.github.com/open-cli-tools/concurrently/pull/508)
-   bin: show help when no args are passed by [@&#8203;gustavohenke](https://redirect.github.com/gustavohenke) in [https://github.com/open-cli-tools/concurrently/pull/513](https://redirect.github.com/open-cli-tools/concurrently/pull/513)

#### New Contributors

-   [@&#8203;mahtaran](https://redirect.github.com/mahtaran) made their first contribution in [https://github.com/open-cli-tools/concurrently/pull/508](https://redirect.github.com/open-cli-tools/concurrently/pull/508)

**Full Changelog**: https://github.com/open-cli-tools/concurrently/compare/v9.0.1...v9.1.0

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.25.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4250)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.24.4...v4.25.0)

*2024-11-09*

##### Features

-   Add `output.sourcemapDebugIds` option to add matching debug ids to sourcemaps and code for tools like Sentry or Rollbar ([#&#8203;5712](https://redirect.github.com/rollup/rollup/issues/5712))

##### Bug Fixes

-   Make it easier to manually reproduce base16 hashes by using a more standard base16 conversion algorithm ([#&#8203;5719](https://redirect.github.com/rollup/rollup/issues/5719))

##### Pull Requests

-   [#&#8203;5712](https://redirect.github.com/rollup/rollup/pull/5712): feat: Add support for injecting Debug IDs ([@&#8203;timfish](https://redirect.github.com/timfish))
-   [#&#8203;5717](https://redirect.github.com/rollup/rollup/pull/5717): fix(deps): update swc monorepo (major) ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5718](https://redirect.github.com/rollup/rollup/pull/5718): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5719](https://redirect.github.com/rollup/rollup/pull/5719): Use a less surprising base-16 encoding ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

### [`v4.24.4`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4244)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.24.3...v4.24.4)

*2024-11-04*

##### Bug Fixes

-   Ensure mutations by handlers in Proxy definitions are always respected when tree-shaking ([#&#8203;5713](https://redirect.github.com/rollup/rollup/issues/5713))

##### Pull Requests

-   [#&#8203;5708](https://redirect.github.com/rollup/rollup/pull/5708): Update configuration-options document ([@&#8203;sacru2red](https://redirect.github.com/sacru2red), [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5711](https://redirect.github.com/rollup/rollup/pull/5711): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5713](https://redirect.github.com/rollup/rollup/pull/5713): fix: Deoptimize the proxied object if its property is reassigned in the handler functions ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOS43LjEiLCJ1cGRhdGVkSW5WZXIiOiIzOS43LjEiLCJ0YXJnZXRCcmFuY2giOiJkZXYiLCJsYWJlbHMiOltdfQ==-->
",
29848,2024-11-08T19:13:48Z,2024-11-08T22:32:04Z,satelllte,0,0,2,24,12,1,1,[],,0,60866.0,0,0,0,0,4104273.366041,,0,2,1,False,[],,,"**Description**

Fixing small typo met in the docs:

```diff
- loading is in progresses
+ loading is in progress
```",
29846,2024-11-08T15:54:10Z,2024-11-08T16:00:53Z,sunag,1,0,1,10,1,0,0,[],188.0,0,406.0,0,0,0,0,4176712.411198,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.22 <br> **79.04** | 339.22 <br> **79.04** | +0 B <br> **+0 B** |
| WebGPU | 476.91 <br> **132.18** | 476.9 <br> **132.19** | -5 B <br> **+6 B** |
| WebGPU Nodes | 476.2 <br> **132.01** | 476.2 <br> **132.01** | -5 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.67 <br> **111.99** | 464.67 <br> **111.99** | +0 B <br> **+0 B** |
| WebGPU | 545.94 <br> **147.85** | 545.93 <br> **147.86** | -5 B <br> **+4 B** |
| WebGPU Nodes | 501.82 <br> **137.55** | 501.81 <br> **137.56** | -5 B <br> **+6 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29828

**Description**

Fix `generateWrapFunction()` cache includes.",
29840,2024-11-08T04:12:35Z,2024-11-08T10:18:30Z,sunag,1,0,2,33,6,0,0,[],190.0,0,38600.0,0,0,0,0,4180613.511302,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.22 <br> **171.45** | 692.22 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 825.57 <br> **222.93** | 825.78 <br> **222.98** | +208 B <br> **+57 B** |
| WebGPU Nodes | 824.68 <br> **222.72** | 824.89 <br> **222.78** | +208 B <br> **+51 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.58 <br> **112.26** | 464.58 <br> **112.26** | +0 B <br> **+0 B** |
| WebGPU | 545.69 <br> **147.79** | 545.94 <br> **147.85** | +250 B <br> **+56 B** |
| WebGPU Nodes | 501.57 <br> **137.49** | 501.82 <br> **137.55** | +250 B <br> **+53 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29838#issuecomment-2463662700

**Description**

Renaming `.shadowNode` to `.castShadowNode` seems like a better name and more in line with the Three.js API regarding shadow casting.

`.receivedShadowNode` is the new input, and should use TSL `Fn` as input, where the manipulation of the received shadow can be performed. Using `Fn` we can also create the `shadows` mask manually, so I removed the node `shadows` to avoid redundancy.

- Added `material.castShadowNode` and `material.receivedShadowNode`
- Removed `shadows`

Manual way to add `shadows`
```js
const totalShadows = float( 1 ).toVar();

ground.material.receivedShadowNode = Fn( ( [ shadow ] ) => {

	totalShadows.mulAssign( shadow );

	//return float( 1 ); // bypass received shadows
	return shadow.mix( color( 0xff0000 ), 1 ); // modify shadow color

} );

// ground.material.outputNode = output.add( totalShadows.oneMinus() ); // shadow mask output
```",
29605,2024-10-09T21:28:07Z,2024-10-09T21:34:20Z,Mugen87,2,0,1,71,3,0,0,[],2549984.0,0,2552766.0,0,0,0,0,4196316.088673,,0,1,1,False,"['ligaofeng0901', 'Mugen87']","Why is only the metalness factor taken into account? Does it mean there is no SSR effect on the fragment that metalness is zero? In `ssr( colorNode, depthNode, normalNode, metalnessNode, camera ) `, `metalnessNode` must be a texture node, what about make it be any type of node? so we can pass the param like `max(metalness, roughness.oneMinus())`. As mentioned in #28752, honoring more material properties is wanted but I guess there are some uncertainties in doing it in a PBR conform way. I suggest we continue the discussion in #28752 and try to find a solution to include `roughness` in the SSR code. 

Ideally, we have some sort of reference/documented resource that we implement (I have not checked so far if the formula proposed in https://github.com/mrdoob/three.js/issues/28752#issue-2377442230 is correct).",,"Related issue: #29597, #21487

**Description**

This makes sure `metalness` is not just an on/off switch for SSR but actually influences the intensity. The lighting of the example is a bit updated so it better fits to PBR materials.

We might want to honor even more parameters (see #28752) but for now it's a good start.",
29843,2024-11-08T09:13:50Z,2024-11-08T09:23:40Z,Mugen87,0,0,1,159,4,0,0,[],,0,624.0,0,0,0,0,4200516.248073,,0,1,1,False,[],,,"Related issue: -

**Description**

The PR makes `webgpu_postprocessing_ao` a bit more interesting by moving to an indoor scene. Besides, the beauty pass is now rendered at the full resolution (it honors pixel ratio now) but the AO uses half-resolution which is totally sufficient for this use case (and potentially many others). Denoise is disabled but can be added to further refine the result. Denoise is a costly step and not required for all scenes.

Since `DenoiseNode` is now an addon again, I have moved the default noise texture generation back to the module to simplify the app code.",
29636,2024-10-13T13:19:57Z,2024-10-15T19:22:19Z,Mugen87,5,1,17,535,8,1,0,[],179.0,0,2233263.0,0,0,0,0,4199510.461887,,0,17,1,False,"['github-actions[bot]', 'Mugen87', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.29 <br> **171.01** | 690.29 <br> **171.01** | +0 B <br> **+0 B** |
| WebGPU | 815.35 <br> **219.78** | 816.05 <br> **219.94** | +703 B <br> **+164 B** |
| WebGPU Nodes | 814.86 <br> **219.65** | 815.56 <br> **219.81** | +703 B <br> **+165 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 463.31 <br> **111.89** | +0 B <br> **+0 B** |
| WebGPU | 538.09 <br> **145.28** | 538.61 <br> **145.41** | +524 B <br> **+127 B** |
| WebGPU Nodes | 494.2 <br> **135.15** | 494.73 <br> **135.28** | +524 B <br> **+128 B** | > MRT support is not complete. TRAAPassNode uses MRT to produce the beauty and velocity pass but it does not honor any existing MRT settings from the app. So it's not possible e.g. to render normal or metalness data yet.

Hmm.. could you give me an example? I have refactored the MRT handling a bit so `TRAAPassNode` is now more similar to `SSAAPassNode`. Meaning it has no internal MRT setting anymore but uses the one from the app. 

However, because of the intermediate sample render target that gets a jitter applied, the result isn't correct. We can't use the same approach like in `SSAAPassNode` where we resolve all targets via blending. I guess we need two passes like mentioned above:

- Use an overwrite material to render the original MRT setup without jitter (prepass).
- Render beauty and depth with jitter (this depth is only needed in the next step).
- Resolve and copy the result into `output`.

I've implemented this via https://github.com/mrdoob/three.js/pull/29636/commits/172c2eeabc446facc53fb3f7f6dd134ba18e7009 but unfortunately, I get a `Uncaught RangeError: Maximum call stack size exceeded` runtime error in `updateBefore()` 😟 . Reverting the prepass approach for now. I have the feeling we need a different approach like configuring what MRT outputs should be affected jitter and which not. In this way, we would not need any updates to `VelocityNode`. I'll go ahead and merge since adding full MRT support might take a while until we figure out a solution. In the meanwhile, `TRAAPassNode` works in WebGPU and WebGL so it can already be included in certain FX setups. ",,"Fixed #14050.
Related issue: #29295.

**Description**

This PR rewrites `TAARenderPass` as `TRAAPassNode` for `WebGPURenderer`.

It is now a full TRAA approach meaning it uses reprojection based on a velocity pass. `TRAAPassNode` also implements color clamping based on neighborhood sampling as well as flicker reduction based on luminance weighing. The implementation could be further enhanced e.g. by variance clipping, subpixel sampling or post sharpening but for now it's a good start.
 
There are some open issues:

- ~~WebGL is not supported yet since the pass needs the ability to copy between render targets. A few days ago @gkjohnson coincidentally filed the respective issue: #29612.~~
- Like any other TRAA implementation, `TRAAPassNode` uses jitter to produce a frame with a slight offset which is used for accumulation. However, the jitter should _only_ affect the beauty pass. Right now, the pass injects a non-modified projection matrix into `VelocityNode` to get accurate results. However, depth and any other additional MRT output should not receive jitter as well.

To solve 2, one solution would be an unjittered pre-pass for velocity, depth, normals etc.. The beauty is then produced with a separate pass that incorporates the jitter. That means however only beauty will receive the AA, depth and normals not. I'm not sure how other engines handle this aspect but I think it would be one way to go.
","## Expression has no effect

This expression has no effect.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2470)"
29838,2024-11-07T23:41:00Z,2024-11-08T02:07:23Z,sunag,6,0,1,18,1,0,0,[],189.0,0,17017.0,0,0,0,0,4218493.901859,,0,1,1,False,"['github-actions[bot]', 'Makio64', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.22 <br> **171.45** | 692.22 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 825.46 <br> **222.91** | 825.57 <br> **222.93** | +104 B <br> **+20 B** |
| WebGPU Nodes | 824.58 <br> **222.7** | 824.68 <br> **222.72** | +104 B <br> **+27 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.58 <br> **112.26** | 464.58 <br> **112.26** | +0 B <br> **+0 B** |
| WebGPU | 545.63 <br> **147.78** | 545.69 <br> **147.79** | +62 B <br> **+11 B** |
| WebGPU Nodes | 501.51 <br> **137.48** | 501.57 <br> **137.49** | +62 B <br> **+15 B** | @sunag Asking for my personal understanding :
1 : this allow us to get the shadow casted on the mesh and use it in the material for example for adding a dithering or modifying the color of the shadow on the material ( in the fragment shader level ) ?
2 : this allow us to modifying the shadow texture before its send to the material ( for example to add blur on it ) We have some API features aimed at different purposes.

- `material.shadowNode` -> Allows you to change the `opacity` and `color` of the `shadow`, or procedural effect in TSL. 
https://threejs.org/examples/?q=shadow%20opacity#webgpu_shadowmap_opacity

- `material.outputNode = output.add( shadows )` -> Allows you to obtain the shadow at the output level, useful for creating special effects based on the shadow, such as using the shadow as a mask to project another node in the shadow area in the target material. Note that `add()` can be replaced by another mathematical operation here.

- `light.shadow.filterNode` -> Here customizing the shadow filter, such as using `PCFSoftShadowMap` or creating your own, is the appropriate place to soften the shadow. Thanks for clarifying!  Just to be sure : 

Shadows render pass : 
`material.shadowNode` : how the material project his shadow into the shadowmap during the rendering of lights
`light.shadow.filterNode` : filter apply during the rendering of the lights ( blur etc.. )

Scene render pass : 
`shadows` : the value of the compile shadows at the pixel level ( in the fragment shaders ).

So when you do : 
`material.outputNode = output.add( shadows )` it add the shadow value over the output which already have shadows ?
If I want to rewrite how the shadow is rendered on my mesh for example with a very low opacity for a 'GhostMaterial' how to do so ( I originaly thought it was the purpose of the shadowNode. ) ?

Maybe shadowNode is little bit confusing and a `castShadowNode` and a `receivedShadowNode`would be easier or maybe its just me ?  > Maybe shadowNode is little bit confusing and a castShadowNode and a receivedShadowNodewould be easier or maybe its just me ?

`castShadowNode` seems like a good name 👍

 @Makio64 I think this will be possible now, the suggestion was great and I updated the API. 
https://github.com/mrdoob/three.js/pull/29840",,"**Description**

The `shadows` node allows shadows to be used as masks for effects.

```js
import { output, shadows } from 'three/tsl';

material.outputNode = output.add( shadows );
```

![image](https://github.com/user-attachments/assets/ce818cc9-4b44-4351-a537-0623a893af06)
",
29835,2024-11-07T16:24:24Z,2024-11-07T16:34:04Z,Mugen87,1,0,1,35,2,0,0,[],185.0,0,580.0,0,0,0,0,4261128.043434,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.22 <br> **171.45** | 692.22 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 825.22 <br> **222.85** | 825.32 <br> **222.86** | +106 B <br> **+16 B** |
| WebGPU Nodes | 824.33 <br> **222.64** | 824.44 <br> **222.66** | +106 B <br> **+16 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.58 <br> **112.26** | 464.58 <br> **112.26** | +0 B <br> **+0 B** |
| WebGPU | 545.43 <br> **147.71** | 545.49 <br> **147.75** | +61 B <br> **+36 B** |
| WebGPU Nodes | 501.37 <br> **137.44** | 501.37 <br> **137.44** | +0 B <br> **+0 B** |",,"Fixed #28884.

**Description**

This PR fixes the broken dash by moving some of the computations to the vertex shader where they actually belong to. Besides, it makes sure `dashOffset` can be configured for `LineDashedNodeMaterial`.",
29832,2024-11-07T11:09:33Z,2024-11-07T11:15:34Z,Mugen87,1,0,1,5,1,0,0,[],182.0,0,362.0,0,0,0,0,4280237.203575,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.22 <br> **171.45** | 692.22 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 825.17 <br> **222.84** | 825.22 <br> **222.85** | +46 B <br> **+10 B** |
| WebGPU Nodes | 824.29 <br> **222.63** | 824.33 <br> **222.64** | +46 B <br> **+10 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.58 <br> **112.26** | 464.58 <br> **112.26** | +0 B <br> **+0 B** |
| WebGPU | 545.38 <br> **147.7** | 545.43 <br> **147.71** | +46 B <br> **+10 B** |
| WebGPU Nodes | 501.32 <br> **137.43** | 501.37 <br> **137.44** | +46 B <br> **+10 B** |",,"Related issue: -

**Description**

Fixes the currently broken `getShaderAsync()`.
",
29703,2024-10-20T09:14:04Z,2024-10-20T09:38:41Z,Mugen87,1,1,3,80,3,1,0,[],179.0,0,1561104.0,0,0,0,0,4281624.877179,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.71 <br> **171.44** | +0 B <br> **+0 B** |
| WebGPU | 817.37 <br> **220.29** | 818.16 <br> **220.56** | +791 B <br> **+262 B** |
| WebGPU Nodes | 816.88 <br> **220.17** | 817.67 <br> **220.43** | +791 B <br> **+262 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 464.93 <br> **112.2** | +0 B <br> **+0 B** |
| WebGPU | 539.13 <br> **145.56** | 539.13 <br> **145.56** | +0 B <br> **+0 B** |
| WebGPU Nodes | 495.16 <br> **135.43** | 495.16 <br> **135.43** | +0 B <br> **+0 B** |",,"Related issue: -

**Description**

This PR introduces `PostProcessingUtils.getNormalFromDepth()` which can be used to compute normals from depth. This can be useful if MRT is too costly for some reason (e.g. bandwidth restrictions).

I've updated the AO modules to use this new code path if no normal render target is available.

I want to make clear that reconstructed normals are slightly different compared to our current normal render target since it represents the actual _flat_ surface of the geometry. This technique is inadequate for stuff like SSR since you end up with a flat-shaded, facetted look. However, it is actually the better pick for AO which is explained in https://wickedengine.net/2019/09/improved-normal-reconstruction-from-depth/comment-page-1/. 

@sunag The quality difference is barely visible in `webgpu_postprocessing_ao` but we should keep in mind this issue when using `transformedNormalView` for normal texture input.
","@sunag It seems there is an issue when using depth textures with `textureLoad()` and the WebGL backend. There are no issues in WebGPU. The following shader errors occur:

> ERROR: 0:149: '=' : dimension mismatch
ERROR: 0:149: 'assign' : cannot convert from 'highp 4-component vector of float' to 'highp float'

Live example: https://jsfiddle.net/1tkpy5ja/

I think this is related to the fact that `texelFetch` always returns a four-component vector. `textureLoad` is more flexibel and can also return `f32` values. When I read the code correctly, this difference between GLSL and WGSL isn't honored yet.
"
29828,2024-11-07T05:56:35Z,2024-11-07T06:51:20Z,sunag,1,0,4,109,1,0,0,[],189.0,0,3288.0,0,0,0,0,4296090.829481,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.22 <br> **171.45** | 692.22 <br> **171.45** | +0 B <br> **+0 B** |
| WebGPU | 823.66 <br> **222.44** | 825.17 <br> **222.84** | +1.51 kB <br> **+400 B** |
| WebGPU Nodes | 822.78 <br> **222.25** | 824.29 <br> **222.63** | +1.51 kB <br> **+387 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.58 <br> **112.26** | 464.58 <br> **112.26** | +0 B <br> **+0 B** |
| WebGPU | 543.88 <br> **147.3** | 545.38 <br> **147.7** | +1.5 kB <br> **+400 B** |
| WebGPU Nodes | 499.82 <br> **137.03** | 501.32 <br> **137.43** | +1.5 kB <br> **+397 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/28673

**Description**

Added support for `texture.wrap*` using `biquadraticTexture`, or TSL `texture()` used in `vertex stage`.
`RepeatWrapping`, `ClampToEdgeWrapping` and `MirroredRepeatWrapping`.

/cc @brunosimon ",
29812,2024-11-05T14:03:15Z,2024-11-06T09:30:08Z,satelllte,1,0,3,44,3,1,1,[],188.0,0,114493.0,0,0,0,0,4328487.017368,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.55 <br> **171.49** | 692.21 <br> **171.45** | -336 B <br> **-38 B** |
| WebGPU | 822.23 <br> **221.94** | 821.89 <br> **221.91** | -336 B <br> **-35 B** |
| WebGPU Nodes | 821.34 <br> **221.74** | 821 <br> **221.7** | -336 B <br> **-37 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.89 <br> **112.3** | 464.56 <br> **112.27** | -336 B <br> **-33 B** |
| WebGPU | 542.43 <br> **146.79** | 542.09 <br> **146.75** | -336 B <br> **-33 B** |
| WebGPU Nodes | 498.37 <br> **136.53** | 498.03 <br> **136.5** | -336 B <br> **-36 B** |",,"**Description**

Consume `MathUtils.clamp` everywhere inside `VectorN` implementations for better readability",
16316,2019-04-23T12:35:19Z,2019-09-11T19:37:02Z,fernandojsg,30,30,94,658,8,5,0,['WebGL2'],9563.0,0,174929009.0,0,0,0,0,4306447.325962,,0,94,1,False,"['fernandojsg', 'takahirox', 'mrdoob']","Please add ShadowMap support to the TODO list. Currently this implementation doesn't work with Shadow. > Please add ShadowMap support to the TODO list. Currently this implementation doesn't work with Shadow.

Added Looking good! DEPRECATED 
Regarding the **shadows** issue: `ShadowMap` will use a custom render target and a `MeshDepthMaterial`. If multiview is enabled all the materials will get injected the multiview specific directives and uniforms in the shaders: https://github.com/mrdoob/three.js/pull/16316/files#diff-58e8247d21441c70f4f66e068eac5bfaR578 but as the shadowmap won't use the multiview fbo it will throw a warning because of the incompatible number of views on the shader vs the render target used.

To fix (https://github.com/mrdoob/three.js/pull/16316/commits/1cd69c9df880f01019be42b6fb091f30795f6b5b) this I've introduced a new material attribute `supportsMultiview` (open to suggestions) that will be set to `true` by default for all the materials and currently just `false` for the `MeshDepthMaterial` used on the `ShadowMap` class.

What do you think @takahirox @mrdoob ?

PS: I have added temporarily a copy of the `dragging` demo using multiview too to check the shadows working.
~~
 [I added support](https://github.com/mrdoob/three.js/pull/16316/commits/08ded2c0b55919b02d691dd0fa3b8806123bc5f3) for `modelViewMatrix` and `normalMatrix`. I created a method `WebGLMultiview::computeObjectMatrices()` that will create the array of matrices to avoid allocating them on every call, and update them as needed.  I removed the array allocation and `map` calls for camera's `viewMatrices` and `projectionMatrices` by introducing a similar method to the object's `WebGLMultiview::computeObjectMatrices()` -> `WebGLMultiview::computeCameraMatrices` Use `multiview.getNumViews()` everywhere so if we define a different (default = 2) number of views on the `WebGLMultiview` the number of matrices, shaders and so will get the correct value. Moved the creation of the rendertarget out from `WebGLMultiview` into `WebGLMultiviewRenderTarget`, and changed the `update*Matrices` to use aux matrices instead of creating one on each object and camera.
Kudos to @takahirox for the help refactoring it Currently the only item that I haven't addressed from the list is:
```
Enable by default just when extension is available and vr.enabled = true ?
```
As the `WebGLMultiview` object will be created on the `WebGLRenderer` constructor, so currently we will just do that when the attribute `multiview` is set true on the constructor's options.

I have noticed that there are a huge impact in performance when updating uniforms that consist on array of matrices, but I'll like to move the discussion to https://github.com/mrdoob/three.js/issues/16355.
In the meantime I'll be working on a alternative solution by setting the multiview uniforms directly from `WebGLMultiview` without using any cache.

Another performance impact is that currently once you request multiview, you ""should"" use, as requesting it for rendering just 1 view doesn't make much sense, as you will still be rendering to a N-dimensional FBO (depending on the number of views) even if you just copy one of these layers to the final canvas. I created an issue to discuss it here https://github.com/mrdoob/three.js/issues/16356

Still I believe neither of these issues should be a blocking for this as the performance improvement that we will get specially on WebXR is going to be really good (Benchmarks soon)

Feedback? :)
 Added a new example using multiple views + multiview using just array cameras, currently using `bounds` to define the viewports, although I've opened an issue regarding it https://github.com/mrdoob/three.js/issues/16361

Introducing some proposals by @takahirox adding `setNumViews()` on the `WebGLMultiview` and automatically detect the array camera size.

Currently the user doesn't need to do anything else than just request `multiview` on the renderer and use `WebVR` or render with a `ArrayCamera` and it should just work. I have created a different branch to try to fix the performance issue introduced because of the cache of uniforms (Described in https://github.com/mrdoob/three.js/issues/16355)
https://github.com/fernandojsg/three.js/commit/d35d296ee2cf2b49f3f36515d1c6be5c0c9d020f

The performance difference between setting the uniforms ""manually"" and doing the flatten versus the standard version of calling `uniforms.setValue` results in the `webgl_multiple_views_multiview` example goes from `55ms` measuring `renderer.render()` to `22ms`...

Removing the cache on `WebGLUniforms` for array of Matrix4 and Matrix3 will improve, around `~30ms` @mrdoob @takahirox friendly ping :) Looking good to me now. (I reviewed only core code. I didn't example code tho.)

Update: More precisely, this PR is looking a good start as multiview support. Maybe we may want to more optimize later. We can keep up applying small PRs. It'd be easier to improve and review rather than doing a lot of things in a single PR. > Fixed, although I don't expect this example to be merged but just to test the PR, and then we could add multiview enabled by default if available on the WebXR demos

Yes, could this PR be simplified? As far as I understand this is something that could just be enabled by default when available and we do not need additional examples. Right? I'll remove the specific dragging and ballshooter _multiview examples and leave just the multiple_views_multiview as I believe that's different from what we have already unless you feel we should remove it too That'd definitely help me see the changes better 🙏 @mrdoob done!
also TL;DR how to use the extension is basically request `multiview: true` when creating the renderer, if it's not available it will just not use it but it won't break anything. The only requirement is that the WebGL context should be WebGL2 as the `OVR_multiview2` extension is Webgl2 only

```javascript
var context = canvas.getContext( 'webgl2', { antialias: false } );
renderer = new THREE.WebGLRenderer( { context: context, canvas: canvas, antialias: true, multiview: true } );
``` But, wouldn't it be better to use the extension by default when available instead of requiring the user to pass `multiview: true`? Is there a side effect when enabling the extension? I agree, that would be the expected usage of the extension. But currently with multiview enabled we need to compile the shader with a specific number of views. It means that even if you don't enter VR and are just rendering to the screen you will be doing both passes, although just one of the two layers will get copied to the render target. Although the CPU won't get impacted that much as with multiview we will be doing the same number of drawcalls anyway independently of the number of views, the GPU overhead will be bigger.
One of the solutions will be to have something like shader group profiles or so, that will let you compile both version of the same shader, with `views=1` and `views=2` and use it depending on your state application. @takahirox has been working on a solution for that, but to avoid adding more complexity to this PR we decided to flag the requirement for multiview and move that feature to another PR once this will get reviewed.
 Yes, currently this PR has GPU overhead in non-immersive mode. And I've locally confirmed that compiling multiple programs and switching program associated with num views can solve (#16356). 

But if this PR includes it the PR can be very big and hard to review. It may take further time to merge.

So I'd like to suggest we go with this PR as is, and later think removing `multiview: true` flag when we optimize. I'll make following up optimization PR soon once this PR is merged. How much is the GPU overhead? Also, the overhead is only while in the headset, right? 2x GPU slower in non-immersive mode because it unnecessarily renders 2x rendering size (two views).

In immersive mode, no overhead. More precisely, copying two views framebuffers to screen at last can be said overhead but it's small. I think the benefit from half drawcall number is bigger.

And by optimizing as we mentioned, we can remove the overhead in non-immersive mode.

(I assumed ""in the headset"" meant ""in immersive mode"", correct?) @takahirox can you elaborate the 2x GPU slower?
I have been testing the ballshooter example removing the physics to avoid impacting the draw calls performance, and painting 15.000 balls. The results are:
* No multiview enabled:
  * Non immersive mode: 48fps
  * Immersive mode: 33fps
* Multiview enabled:
  * Non immersive mode: 41fps
  * Immersive mode: 47fps

So on that specific example we have that for non-immersive mode using multiview rely on a worse performance by around **-15%**, while on immersive mode the benefits are **>40%** as we have been expecting in all our previous tests.

I believe we all agree that this is a feature that it's better to enable by default so users just get the benefits of it. Still we could just try to enable multiview if an array camera is used or if `vr.enabled = true`.
So if we do so and enable multiivew by default on these situations we will end up with the following:
- Most of the browsers won't have this feature in the short term or at least not enabled by default -> Users won't have any overhead or benefit on any mode.
- Some browsers could start enabling it by default (Firefox Reality) -> It will impact negatively to the users that are browsing immersive experiences without entering VR, but it won't affect the non-VR content made with three.

My bet is to enable it by default at least when `vr.enabled = true` and address the issues on non-immersive mode with multiview in other issues/PRs > 2x GPU overhead

More precisely, rendering itself cost. Rendering double size (two views) so that rendering cost can be double.

What I tried was just rendering a few complex (many polygon) objects in a scene to focus on rendering cost. A few objects, so that a few uniform update, a few drawcall, and less CPU processing (for example matrices update). And I saw half fps number.

So, what I mentioned was just double rendering cost. The overall performance regression of course very depends on application. For example, CPU cost of painting 15,000 balls may be big. So not 50% drop but 15% fps drop on that example isn't strange to me. It's okay that it's 15% slower in non immersive mode. We can try to optimise that afterwards.

What I'm trying to avoid is making users having to learn more APIs. It would be great if this was something transparent that users didn't have to know about.  Moving to next cycle as it looks like the implementation is still not solved plus we'll need time for testing. Likely when will r105 release be? Wednesday > It would be great if this was something transparent that users didn't have to know about.

Right now, `OVR_multiview2` works only with WebGL2 and doesn't work with antialias. And we request to users to create WebGL context in user side to use WebGL2.

```javascript
var canvas = document.createElement('canvas');
var context = canvas.getContext('webgl2', {antialias: boolean});
var renderer = new WebGLRenderer({canvas: canvas, context: context});
``` 

I think we can automatically enable multiview if WebGL context is WebGL2, antialias is false, and the browser supports `OVR_multiview2`. With this change, users don't need to learn any new Multiview API.

```javascript
// in WebGLRenderer
var enableMultiview = ('WebGL2RenderingContext' in window) &&
    (_gl instanceof WebGL2RenderingContext) &&
    (_gl.getContextAttributes().antialias === false) &&
    (_gl.getExtension('OVR_multiview2') !== null);
```

If multiview is turned off, no any performance/functional effect. Currently `OVR_multiview2` extension isn't enabled by default on browsers. So the case where `enableMultiview` will be `true` may be very rare. That means I can say users don't see non-immersive performance regression on existing application in general.

I know a lot of developers are interested in multiview performance. So I hope we can put this PR for them in r105 by removing `multiview: true` flag and adding automatic multiview enabling instead of wait for r106. I have the bad habit of merging things last minute, but the fact that [WebVR support was broken for a month](https://github.com/mrdoob/three.js/pull/16561) during this cycle makes me extremely hesitant.",,"## Intro
This PR introduces multiview support using the current `OVR_multiview2` API (spec https://www.khronos.org/registry/webgl/extensions/OVR_multiview2) as all the previous ones (`WebVR multiview`, `WEBGL_multiview`, `OVR_multiview`) are deprecated and should not be implemented even if they are still supported by some browsers.

The first implementations of multiview were attached to the WebVR API but this is not the case anymore and we could use this API to paint several views using a drawcall on the screen without need to have a VR device, eg for different views for a CAD editor. 
With that in mind I tried to detach the implementation from VR details and rely on `ArrayCamera` instead to determine when to render multiple views.

The key point for me here is that the expected benefit for this feature when using 2 views (as currently in VR) is around **40%** without any modification on the user's codebase.

![Capture](https://user-images.githubusercontent.com/782511/56581275-db67dd00-65d4-11e9-8321-922cc69968fc.PNG)

## Test
Currently this extension is just implement on [Chrome Canary](https://www.google.com/chrome/canary/) and must be run with the following command line arguments:

```
--use-cmd-decoder=passthrough --enable-webgl-draft-extensions
```

## Implementation
- Added `multiview: boolean` attribute to the `WebGLRenderer` to detect if you want to enable it if available. It's used by default if it's available and `multiview !== false`. But probably we could just enable it by default if `vr.enabled = true`
- Introduced `WebGLMultiview.js` that should take care of all the binding/unbinding of the textures and framebuffers
- Introduced `WebGLMultiviewRenderTarget` that will include the  `numViews` that render target has.
- Modify preffix on the shaders to inject an array of matrices that will be used based on the `gl_ViewID_OVR` attribute.
- On `setProgram` switch from setting single matrices to array of matrices when using multiview and `ArrayCamera`

## TO-DO / Open questions
This is still a WIP implementation, there are some issues and decisions that need to be addressed before merging it:

- [x] Enable by default just when extension is available and `vr.enabled = true` ?
- [x] Currently the code is open enough to support more than 2 views, but when creating the shader we should know the number of views that will be used to define the size of the matrices arrays. Currently I have set 2 by default, but not sure if it could be nice to try setting it to `MAX_VIEWS_OVR` even if we use less views in our app.
- [x] Split the `renderObjects` function into two, to call multiview vs single. >> *It's been simplified enough like to keep both together on the same function*
- [x] Remove the code to bind fbo, set viewport and clear it from the multiview block on `renderObjects` and inject it on `setRenderTarget` instead.
- [x] Create a temporary structure to hold the array of matrices instead of allocating them on every call to `setProgram` when using multiview.
- [x] Currently just `viewMatrix` and `projectionMatrix` are injected as an array, I'll include the rest of matrices affected by them per view.
- [x] Support for shadows, currently broken
- [x] Move creation of multiview fbo to `WebGLTextures::setupRenderTarget()` ?","If I'm right, here L64-L82 should be out of `if ( ! camera.projectionMatrices ) {...}`. Otherwise, `camera.projectionMatrices/viewMatrices` won't be updated. @takahirox yeah! good catch, thanks! :) Updated! Wrong indentations. Fixed https://github.com/mrdoob/three.js/issues/16361#issuecomment-488054088 How about merging this PR as is so far (if looking good) and then considering to switch from `ArrayCamera` bounds to `ArrayCamera` viewport (if needed) in another PR? That'd be easier to discuss and review maybe. Addressed on https://github.com/mrdoob/three.js/pull/16367 once that will get merged I'll push the changed to fix this PR Updated it https://github.com/mrdoob/three.js/pull/16316/commits/3c58278708626269ef64c2db549e12ad4ca2a606 /cc @mrdoob @takahirox  It seems this variable is unused. Minor formatting issue. Minor code style issues. There are missing some spaces in the for loop and the upcoming two lines. No need to return false here. fixed Fixed, although I don't expect this example to be merged but just to test the PR, and then we could add multiview enabled by default if available on the WebXR demos Fixed, thanks! Fixed thanks It should be:

```js
""webgl_multiple_views_multiview.html"",
``` fixed Ops! Should this be `isAvailable`? It throws for me. Yeah, although after speaking with @mrdoob I'm going to remove this example as using array camera for multiple viewports is not recommended, at least in this use case because of the frustum culling issues. @mrdoob ops, fixed I think adding comment here about why these two lines are necessary would be helpful to users. Yep, what about something like:
```js
// Currently OVR_multiview2 is supported just on WebGL2 non-multisampled contexts
// so we must create the context manually ensuring `antialias` is set to false
//
// There is an ongoing discussion on how to add multisampled multiview support
// on the Khronos Group's WebGL repo: https://github.com/KhronosGroup/WebGL/issues/2912
// as soon as that will get solved we will update the code so it will be
// transparent for the user and you could use this extension with or without multisampled
// contexts
var context = canvas.getContext( 'webgl2', { antialias: false } );
``` I think message in info like ""OVR_multiview2 extension doesn't seem to be supported on your browser"" is more straightforward to users rather than grid color. What do you think? Looking good! I have added a text indicating if it's available or not:
![image](https://user-images.githubusercontent.com/782511/61714271-be20e700-ad5a-11e9-8726-f6853012fbc0.png)

But I'd like to keep the background color because if you auto enter VR on quest or go and you don't see HTML you won't be able to detect if it's available or not without exiting thanks I think better to change the title. This example doesn't shoot ball. I don't think we should expose this."
29824,2024-11-06T13:30:36Z,2024-11-06T21:17:33Z,linbingquan,1,0,1,2,1,1,1,[],194.0,0,28017.0,0,0,0,0,4330522.842814,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.21 <br> **171.45** | 692.2 <br> **171.45** | -16 B <br> **-6 B** |
| WebGPU | 821.89 <br> **221.91** | 821.87 <br> **221.9** | -16 B <br> **-6 B** |
| WebGPU Nodes | 821 <br> **221.7** | 820.99 <br> **221.7** | -16 B <br> **-6 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.56 <br> **112.27** | 464.56 <br> **112.27** | +0 B <br> **+0 B** |
| WebGPU | 542.09 <br> **146.75** | 542.09 <br> **146.75** | +0 B <br> **+0 B** |
| WebGPU Nodes | 498.03 <br> **136.5** | 498.03 <br> **136.5** | +0 B <br> **+0 B** |",,"Related issue: #29812

**Description**

As the title says.",
29826,2024-11-06T20:27:25Z,2024-11-06T20:34:03Z,Mugen87,0,0,1,70,2,0,0,[],,0,398.0,0,0,0,0,4333133.774977,,0,1,1,False,[],,,"Related issue: -

**Description**

There are scenes where you can achieve good results when the AO runs at half-resolution. Similar to `SSRNode`, the PR adds `resolutionScale`. Default is `1` though so this change does not affect existing scenes.

The PR also contains a bit of clean up to make some uniforms private in `DenoiseNode` and `GTAONode` which are not meant to be set by users.",
29816,2024-11-06T04:22:09Z,2024-11-06T17:14:13Z,linbingquan,1,2,2,252,1,2,1,[],186.0,0,46332.0,0,0,0,0,4345116.36468,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.21 <br> **171.45** | 692.24 <br> **171.45** | +26 B <br> **+0 B** |
| WebGPU | 821.89 <br> **221.91** | 821.91 <br> **221.92** | +26 B <br> **+15 B** |
| WebGPU Nodes | 821 <br> **221.7** | 821.03 <br> **221.72** | +26 B <br> **+20 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.56 <br> **112.27** | 464.58 <br> **112.26** | +26 B <br> **-7 B** |
| WebGPU | 542.09 <br> **146.75** | 542.12 <br> **146.75** | +26 B <br> **-5 B** |
| WebGPU Nodes | 498.03 <br> **136.5** | 498.06 <br> **136.5** | +26 B <br> **+5 B** |Thank you!",Thank you!,"Related issue: https://github.com/mrdoob/three.js/issues/29815

**Description**

As the title says.

If the PR has any problem, please tell me.
","Does `/*@__PURE__*/` do anything here, inside of a function body? Perhaps these constants could remain outside the function, in module scope? > Does `/*@__PURE__*/` do anything here, inside of a function body? Perhaps these constants could remain outside the function, in module scope?

Done."
29823,2024-11-06T13:18:37Z,2024-11-06T13:26:43Z,Mugen87,0,0,1,34,14,0,0,[],,0,486.0,0,0,0,0,4358774.713463,,0,1,1,False,[],,,"Related issue: -

**Description**

This PR makes sure all node FX classes derived of `TempNode` define the correct node type when calling `super()`.
",
29492,2024-09-25T17:46:31Z,2024-09-25T20:55:30Z,aardgoose,1,3,5,9,7,2,0,[],187.0,0,3605296.0,0,0,0,0,4366691.790544,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 687.46 <br> **170.22** | +0 B <br> **+0 B** |
| WebGPU | 840.64 <br> **225.46** | 839.97 <br> **225.27** | -666 B <br> **-181 B** |
| WebGPU Nodes | 840.15 <br> **225.33** | 839.48 <br> **225.15** | -666 B <br> **-177 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 534.79 <br> **144.27** | 534.03 <br> **144.05** | -756 B <br> **-225 B** |
| WebGPU Nodes | 491.13 <br> **134.03** | 490.38 <br> **133.8** | -756 B <br> **-228 B** |",,"
The renderer.shadowMap.enabled property is ignored in updating shadowing. Add this to the lighting cache key and check when setting up lighting nodes.
","I just changed it to integer to follow the pattern of the others hashes, but we can consider adding booleans to the `hashArray` in the future. Now ， I changed renderer.shadowMap.enabled and  renderer.shadowMap.type property， The scene not refresh scene shadow, I need changed light castShadow then scene can refresh shadow,  I think it is  not  good, and it is a bug,  I think the previous one was better。 I use is webglRender"
29622,2024-10-11T09:13:55Z,2024-10-12T09:06:18Z,aardgoose,1,2,4,48,1,2,1,[],178.0,0,2253641.0,0,0,0,0,4366703.454915,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.71 <br> **219.35** | 814.82 <br> **219.39** | +108 B <br> **+39 B** |
| WebGPU Nodes | 814.22 <br> **219.22** | 814.33 <br> **219.26** | +108 B <br> **+40 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.56 <br> **145.04** | 537.67 <br> **145.07** | +108 B <br> **+38 B** |
| WebGPU Nodes | 493.67 <br> **134.77** | 493.78 <br> **134.81** | +108 B <br> **+40 B** |",,"Related issue: #29610

CSMshaderNode exposes a faulty assumption in allocation of uniform buffer indices. 
Correct Index allocation to take account of uniform buffers of arrays.
","Nit: When the `return` is executed, is `bindGroup` then `undefined` or `null`? I would favor a more explicit check like:
```js
if ( bindGroup === undefined ) return;
``` I'll check, I remember some examples triggered this path."
29631,2024-10-12T10:13:03Z,2024-10-12T11:39:43Z,aardgoose,1,0,1,4,1,0,0,[],179.0,0,2163656.0,0,0,0,0,4366740.550514,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.86 <br> **219.4** | 814.81 <br> **219.39** | -47 B <br> **-17 B** |
| WebGPU Nodes | 814.36 <br> **219.27** | 814.32 <br> **219.25** | -47 B <br> **-17 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.67 <br> **145.07** | 537.62 <br> **145.06** | -47 B <br> **-17 B** |
| WebGPU Nodes | 493.78 <br> **134.81** | 493.74 <br> **134.79** | -47 B <br> **-17 B** |",,"Related issue: #29622

The call to createBindings() call doesn't do anything, bindings are already created at this point.
Remove call and also the now pointless check for this null.
",
28237,2024-04-29T10:59:54Z,2024-11-04T22:29:38Z,aardgoose,9,1,15,491,13,1,1,[],6214331.0,0,16503239.0,0,0,0,0,4366747.795764,,0,15,1,False,"['github-actions[bot]', 'aardgoose', 'sunag', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.35 <br> **171.47** | 692.35 <br> **171.47** | +0 B <br> **+0 B** |
| WebGPU | 822.19 <br> **221.91** | 821.87 <br> **221.85** | -324 B <br> **-60 B** |
| WebGPU Nodes | 821.48 <br> **221.76** | 820.99 <br> **221.64** | -495 B <br> **-116 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.89 <br> **112.3** | 464.89 <br> **112.3** | +0 B <br> **+0 B** |
| WebGPU | 542.77 <br> **146.84** | 542.27 <br> **146.74** | -505 B <br> **-107 B** |
| WebGPU Nodes | 498.71 <br> **136.59** | 498.21 <br> **136.47** | -505 B <br> **-117 B** | When I read the code correctly, this PR removes `Renderer.clippingPlanes`.

Is it also possible to remove the support for `Material.clippingPlanes`? When I understand the implementation correctly, `ClippingGroup` can handle both local and global clipping. @Mugen87 I have already removed material clipping planes in my copy.  I'll push it here soon. It gets simplifies the Renderer somewhat. @Mugen87 @sunag 

ClippingGroup() can now replicate the functionality of the existing API without the problems encountered with postprocessing passes etc #28838, the existing example has been updated to use this. The only clipping property now on the material object is 'alphaToCoverage' which is common to other materials.

the planes used for union testing and intersection testing are accumulated separately when inherited.


@sunag To retain the current behaviour where changing 'alphaToCoverage' results in a material rebuild, I have added boolean properties to the RenderObject.getMaterialCacheKey(), I don't know if this is the correct solution here?

 > To retain the current behaviour where changing 'alphaToCoverage' results in a material rebuild, I have added boolean properties to the RenderObject.getMaterialCacheKey(), I don't know if this is the correct solution here?

I'll check this weekend, sorry for the delay. > > To retain the current behaviour where changing 'alphaToCoverage' results in a material rebuild, I have added boolean properties to the RenderObject.getMaterialCacheKey(), I don't know if this is the correct solution here?
> 
> I'll check this weekend, sorry for the delay.

The question is redundant now, fixed by a upstream PR from @Mugen87  @aardgoose Do you have the resources to rebase the PR? If not, I'm going to give it a try in the upcoming days.

We really should merge the PR asap to eventually fix global clipping planes. The implementation can still be refactored after the merge if required. Yes, I'll take a look, then I can revisit hardware clipping which is apparently coming in WebGPU in the next chrome version. Great! Can't wait to have access to `ClippingGroup`. It makes things so much nicer.",,"Fixed #28838.

As suggested in original renderer https://github.com/mrdoob/three.js/blob/aedb9c75bedff3a5f8476dbb8b41dd40c4b09603/src/renderers/WebGLRenderer.js#L1777

Adds support for ClippingGroup objects. Clipping planes are additive with nested groups as demonstrated in example.


","`LensflareMesh` directly calls `renderObject()` and can't access `clippingContext` meaning it can't pass it to `renderObject()`. I've fixed the resulting runtime error by defining a default parameter.

If we add `clippingContext` to `onBeforeRender()`, we could ensure lensflares support clipping as well. Alternatively, we could also use the ""current clipping context"" for nested renderings if it isn't overwritten with a parameter when calling `renderObject()`."
29821,2024-11-06T11:06:11Z,2024-11-06T11:06:17Z,Mugen87,0,0,1,4,1,0,0,[],,0,41.0,0,0,0,0,4367169.397597,,0,1,1,False,[],,,"Reverts mrdoob/three.js#29819

Since the root cause is fixed thanks to #29820, we can revert to the previous code style.",
29819,2024-11-06T08:34:20Z,2024-11-06T09:13:09Z,Nokic233,1,0,1,4,1,1,1,[],8834.0,0,9066.0,0,0,0,0,4367255.473489,,0,1,1,False,['mrxz'],"Curiosity got the better of me, and the cause is actually quite simple. The embedded examples are loaded into an editor which rewrites the URLs in the source using regexes. The regex responsible for detecting `loader.load([ ... ])` did not match against any space after the opening bracket.

Created a PR that changes the regex to allow this: #29820 I can confirm the issue is resolved with this PR. It would be good to know why these spaces cause troubles though.",I can confirm the issue is resolved with this PR. It would be good to know why these spaces cause troubles though.,"**Description**
When I clicked on the button called 'click here to open in a separate window', the image loaded normally, so I suspected it was a formatting issue causing the parsing error. Finally, I deleted the spaces and it worked fine.

Before:
![chrome_gIac3wcBG0](https://github.com/user-attachments/assets/a3bf7a86-f1dd-443d-891c-edbc5b8ae23e)

Now:
![chrome_MP2XtbSClX](https://github.com/user-attachments/assets/d978cccb-c4d7-43f5-a3a4-f2469bd93530)

",
29820,2024-11-06T10:58:52Z,2024-11-06T11:05:00Z,mrxz,0,0,1,2,1,1,1,[],,0,385.0,0,0,0,0,4367265.724746,,0,1,1,False,[],,,"Related issue: #29819

**Description**

The regex used to detect and re-write URLs in the manual when loading an array did not account for any spaces between the opening bracket and the opening square bracket. As a result these would not be rewritten and failed to load when viewing the example on the manual page it's embedded.

This PR simply expands the regex to match against zero or more spaces, resolving the issue.",
29811,2024-11-05T12:12:00Z,2024-11-05T12:18:19Z,Mugen87,4,0,1,4,1,0,0,[],420.0,0,52069.0,0,0,0,0,4397594.312621,,0,1,1,False,"['ligaofeng0901', 'Mugen87']","> I consider this PR as a quick fix. Ideally, the node system can detect such collisions and fix them automatically (e.g. by using a number suffix like `cameraNear_1`).

I really hope this feature will be implemented. @ligaofeng0901 Do you mind opening a new issue for this specific feature request? Something like:

> TSL: Avoid naming collision when using `label()` or `toVar()`.

The example with `cameraNear` is a good use case. Never mind, I've already filed #29813. > Never mind, I've already filed #29813.

You're incredibly efficient, thank you!",,"Fixed #29810.

**Description**

The PR fixes a naming collision which occurs in `CSMShadowNode` when using logarithmic depth buffer. The name `cameraNear` is a reserved uniform name in `nodes/accessors/Camera.js`.

I consider this PR as a quick fix. Ideally, the node system can detect such collisions and fix them automatically (e.g. by using a number suffix like `cameraNear_1`).",
29756,2024-10-28T07:43:19Z,2024-10-29T08:46:24Z,Nokic233,0,2,3,66,7,2,0,[],,0,779567.0,0,0,0,0,4377417.451966,,0,3,1,False,[],,,"**Description**

Keep the code consistent with the example.

Before:
![chrome_XcC5Xb2jKR](https://github.com/user-attachments/assets/026dd508-b725-4c3d-824a-e1fef598895c)

Now:
![chrome_MhuOXS8VOR](https://github.com/user-attachments/assets/0b76a799-7f4c-4a4c-a00e-9821765c391b)

","A max intensity value of `2` is too low. I would leave it at `5` for these demos and rather update the code snippet in the text. Yes! I didn't consider this point, the code has been updated."
29809,2024-11-05T09:06:29Z,2024-11-05T09:06:36Z,Mugen87,0,0,1,4,2,0,0,[],,0,8.0,0,0,0,0,4460787.617809,,0,1,1,False,[],,,"Fixed #29778.

**Description**

Adds missing extensions to the `GLTFExporter` documentation page.
",
29783,2024-11-01T11:48:47Z,2024-11-05T09:00:28Z,Mugen87,1,0,1,35,2,0,0,[],180.0,0,335501.0,0,0,0,0,4461157.298991,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.66 <br> **171.56** | 692.66 <br> **171.56** | +0 B <br> **+0 B** |
| WebGPU | 822.12 <br> **221.9** | 822.22 <br> **221.93** | +105 B <br> **+32 B** |
| WebGPU Nodes | 821.63 <br> **221.78** | 821.73 <br> **221.81** | +105 B <br> **+30 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.01 <br> **112.35** | 465.01 <br> **112.35** | +0 B <br> **+0 B** |
| WebGPU | 542.65 <br> **146.78** | 542.76 <br> **146.81** | +105 B <br> **+26 B** |
| WebGPU Nodes | 498.65 <br> **136.58** | 498.76 <br> **136.61** | +105 B <br> **+32 B** |",,"Related issue: #28968

**Description**

This is a first gentle step towards WebXR support in `WebGPURenderer`. The internal `Animation` module must be refactored a bit so it can be used in an upcoming `XRManager` module. 

A native `XRSession` object offers similar to `window` a `requestAnimationFrame()` function. When presenting, it must be used instead of the `window` version. `WebXRManager` also overwrites the animation loop which is set on app level (via `renderer.setAnimationLoop()`) which is why the module currently uses an own instance of `Animation`.

To make this work, `Animation` requires `start()` and `stop()` methods as well as `setContext()`. `setContext()` is later used in `XRManager` with the current XR session object. `_init()` is replaced with `start()`.
",
29790,2024-11-02T14:04:45Z,2024-11-05T08:59:31Z,Makio64,1,0,2,149,1,1,1,[],173.0,0,240886.0,0,0,0,0,4461214.354711,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.35 <br> **171.47** | 692.55 <br> **171.49** | +196 B <br> **+20 B** |
| WebGPU | 822.19 <br> **221.91** | 822.39 <br> **221.95** | +196 B <br> **+45 B** |
| WebGPU Nodes | 821.48 <br> **221.76** | 821.68 <br> **221.8** | +196 B <br> **+42 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.89 <br> **112.3** | 464.89 <br> **112.3** | +0 B <br> **+0 B** |
| WebGPU | 542.77 <br> **146.84** | 542.77 <br> **146.84** | +0 B <br> **+0 B** |
| WebGPU Nodes | 498.71 <br> **136.59** | 498.71 <br> **136.59** | +0 B <br> **+0 B** |",,"Related issue: #29379

Rebase my previous PR to handle better the errors in BatchedMesh and throwing error to avoid ""silent error"" and let it know the devs something wrong in their code.

It's also a first step to refractor the code of BatchedMesh to make it more simple.",
29807,2024-11-05T02:40:18Z,2024-11-05T04:51:38Z,sunag,1,0,2,9,2,0,0,[],175.0,0,7883.0,0,0,0,0,4476085.45334,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.35 <br> **171.47** | 692.35 <br> **171.47** | +0 B <br> **+0 B** |
| WebGPU | 821.87 <br> **221.85** | 821.92 <br> **221.87** | +55 B <br> **+19 B** |
| WebGPU Nodes | 820.99 <br> **221.64** | 821.04 <br> **221.66** | +55 B <br> **+20 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.89 <br> **112.3** | 464.89 <br> **112.3** | +0 B <br> **+0 B** |
| WebGPU | 542.27 <br> **146.74** | 542.32 <br> **146.76** | +55 B <br> **+22 B** |
| WebGPU Nodes | 498.21 <br> **136.47** | 498.26 <br> **136.49** | +55 B <br> **+23 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/29795#issuecomment-2454400185

**Description**

Force update if geometry has changed.",
29806,2024-11-04T22:21:14Z,2024-11-04T22:27:15Z,Mugen87,0,0,1,4,1,0,0,[],,0,361.0,0,0,0,0,4499152.015864,,0,1,1,False,[],,,"Related issue: -

**Description**

While testing the new clipping logic from #28237, I have noticed `StereoCompositePassNode` is broken since `PostProcessingUtils` isn't used consistently. It's sufficient to just save the renderer state.",
29802,2024-11-04T14:00:15Z,2024-11-04T19:47:46Z,satelllte,0,0,1,7,1,1,1,[],,0,22915.0,0,0,0,0,4506657.251999,,0,1,1,False,[],,,"**Description**

The browser support for these properties is stabilized for years (since 2015).

https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX
https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY
",
29799,2024-11-04T10:35:54Z,2024-11-04T14:52:37Z,Mugen87,1,0,4,23,1,0,0,[],188.0,0,15403.0,0,0,0,0,4526431.374515,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.35 <br> **171.47** | 692.35 <br> **171.47** | +0 B <br> **+0 B** |
| WebGPU | 822.12 <br> **221.89** | 822.19 <br> **221.91** | +69 B <br> **+20 B** |
| WebGPU Nodes | 821.41 <br> **221.74** | 821.48 <br> **221.76** | +69 B <br> **+22 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.89 <br> **112.3** | 464.89 <br> **112.3** | +0 B <br> **+0 B** |
| WebGPU | 542.7 <br> **146.82** | 542.77 <br> **146.84** | +69 B <br> **+24 B** |
| WebGPU Nodes | 498.64 <br> **136.56** | 498.71 <br> **136.59** | +69 B <br> **+26 B** |",,"Related issue: #29797.

**Description**

This makes sure `setupDepth()` only configures a depth node if the current framebuffer (custom or default) has a configured depth buffer.",
29801,2024-11-04T13:35:13Z,2024-11-04T13:42:08Z,Mugen87,0,0,1,48,12,0,0,[],,0,415.0,0,0,0,0,4530660.760353,,0,1,1,False,[],,,"Related issue: https://discourse.threejs.org/t/postprocessingutils-is-not-exported/73609

**Description**

The module `PostProcessingUtils` should not be imported from `three` (similar to `NodeMaterial`).
",
28533,2024-06-01T00:28:54Z,2024-06-04T10:01:34Z,CodyJasonBennett,9,3,5,49,2,2,1,[],136.0,0,13518029.0,0,0,0,0,4538626.491847,,0,5,1,False,"['soadzoor', 'Mugen87', 'CodyJasonBennett', 'github-actions[bot]', 'mistic100']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 678.5 kB (168.2 kB) | 678.5 kB (168.2 kB) | -48 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 456.7 kB (110.3 kB) | 456.6 kB (110.3 kB) | -48 B | Do you mind rebasing the PR and https://github.com/mrdoob/three.js/pull/28534? Unfortunately, they are based on a state with broken CI. If you grab the latest commits from dev, we should easier see if something breaks. @CodyJasonBennett Thanks for filing this PR! `updateMatrixWorld()` now works as intended when using `matrixWorldAutoUpdate=false`! Now let's fix `updateWorldMatrix()` as well. Sorry to interfer in a closed PR but I have a hard time understanding the new behaviour.  
Previously I set `matrixWorldAutoUpdate = false` on my camera and call `updateMatrixWorld()` at specific times.

Now with the new condition on line 592 the matrixWorld is never updated whereas I use `force = true`  or not, and my camera does not move anymore. Basically manual calls to `updateMatrixWorld()`  now seem useless, the `force` flag being ignored.

This is done because I need the camera matrix to be updated before rendering, I cannot wait for the WebGLRenderer to kick in. And I wanted to avoid updating the matrix twice on each frame.

Alternative I considered : do it entirely manually

```js
this.camera.updateMatrix();
this.camera.matrixWorld.copy(this.camera.matrix);
```

Thanks `matrixWorldAutoUpdate` does what it is stated in the [documentation](https://threejs.org/docs/index.html#api/en/core/Object3D.matrixWorldAutoUpdate).

> If set, then the renderer checks every frame if the object and its children need matrix updates. When it isn't, then you have to maintain all matrices in the object and its children yourself. 

Yes, there is a difference between `matrixWorldAutoUpdate` and `matrixAutoUpdate`. If `matrixAutoUpdate` is set to `false`, you can still update the model matrix by calling `Object3D.updateMatrix()`. This is not possible with the world matrix though and is indeed an inconsistency.

TBH, I'm not super happy with how `matrixWorldAutoUpdate` works. Sometimes I think it would be best to completely remove it since it made the code only more contradictory. On the other hand, there are devs which use it for performance improvements and without `matrixWorldAutoUpdate` there is no way to optimize the world matrix computations.

So until there is a new world matrix update routine, you indeed have to manage the world matrix manually if you set `matrixWorldAutoUpdate` to `false`.



 Thanks for those informations.

Still I think the ""force"" flag should be removed entirely has it does nothing but clear the ""needsMatrixWorldUpdate"" property without actually upadting the matrix. > Sorry to interfer in a closed PR but I have a hard time understanding the new behaviour. Previously I set `matrixWorldAutoUpdate = false` on my camera and call `updateMatrixWorld()` at specific times.
> 
> Now with the new condition on line 592 the matrixWorld is never updated whereas I use `force = true` or not, and my camera does not move anymore. Basically manual calls to `updateMatrixWorld()` now seem useless, the `force` flag being ignored.
> 
> This is done because I need the camera matrix to be updated before rendering, I cannot wait for the WebGLRenderer to kick in. And I wanted to avoid updating the matrix twice on each frame.
> 
> Alternative I considered : do it entirely manually
> 
> ```js
> this.camera.updateMatrix();
> this.camera.matrixWorld.copy(this.camera.matrix);
> ```
> 
> Thanks

I also had a hard time figuring out why all my objects are messed up after a three.js upgrade. I narrowed it down to this PR, which came with r166.

I also figured out that the world matrix cannot be updated manually anymore if the ""matrixWorldAutoUpdate"" is set to false. However, for performance reasons, that's how I did it in the past 2 years, I updated the local-, and worldmatrices manually whenever it was necessary.

Now, with r166, I'm using this hack as a workaround:
```
const prevMatrixWorldAutoUpdate = element.matrixWorldAutoUpdate;
element.matrixWorldAutoUpdate = true;
element.updateMatrix();
element.updateMatrixWorld();
element.matrixWorldAutoUpdate = prevMatrixWorldAutoUpdate;
``` Just to give another update: The above workaround doesn't work all the time, for example if the `element` has some children.

It would be nice to have a way to manually update the worldmatrix of an object3d (respecting the ancestors', and descendants' matrices as well). Currently it seems there's basically no easy way of doing it > Still I think the ""force"" flag should be removed entirely has it does nothing but clear the ""needsMatrixWorldUpdate"" property without actually upadting the matrix.

Maybe the solution is to have `force` update the subtree despite configured flags but not use it in three.js where possible (nor override it internally like before). This was my intuition for how the API should behave, but I'm a little out of the loop now. The primary use case is changing the rate at which a subtree updates and not caring about specific nodes within—that would be fully manual anyway with a bespoke system for tracking updates. The most simple is skipping a fully static subtree.",,"Related issue: #21387

**Description**

Since #24028, whenever a parent object had its world matrices updated by three, it would update child matrices unconditionally by the local override of `force` (#27245, #27261). Additionally, if three reaches a child with `matrixWorldAutoUpdate = false`, its descendant children aren't processed despite their configuration (https://github.com/mrdoob/three.js/pull/27261#discussion_r1421726260).

I've since fixed both issues by moving the check for `matrixWorldAutoUpdate` when managing the parent world matrix and preserving the original functionality prior to #24028. Unit tests aren't properly isolated, which hid this bug prior, so I also reset hidden states in-between cases, which now catch these regressions.

cc @DolphinIQ, @Krispya","How about adding the same check of `matrixWorldAutoUpdate` to `updateWorldMatrix()` as well?

Ideally, both methods should behave the same meaning when `matrixWorldAutoUpdate` is set to `false`, no world matrix computation happens.

Besides,  `updateWorldMatrix()` has the same bug like `updateMatrixWorld()` that should be fixed with the PR as well. When calling `updateWorldMatrix()` on the parent or child reference, `matrixWorldAutoUpdate` should _not_ be checked. Otherwise it prevents the update of ancestor or descendants that do set `matrixWorldAutoUpdate` to `true`.

Ultimately, the method should look like so:

```
updateWorldMatrix( updateParents, updateChildren ) {

	const parent = this.parent;

	if ( updateParents === true && parent !== null ) {

		parent.updateWorldMatrix( true, false );

	}

	if ( this.matrixAutoUpdate ) this.updateMatrix();

	if ( this.matrixWorldAutoUpdate === true ) {

		if ( this.parent === null ) {

			this.matrixWorld.copy( this.matrix );

		} else {

			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

		}

	}

	// update children

	if ( updateChildren === true ) {

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			const child = children[ i ];

			child.updateWorldMatrix( false, true );

		}

	}

}
```
 Let's add a test for this. Interesting we don't check for `matrixWorldNeedsUpdate` here so that `updateParents` will work.

I wonder if starting from the root down will better serve #28534. For a future PR if any. `object` isn't used in this case. Would have otherwise caught the bug."
29796,2024-11-03T16:13:45Z,2024-11-03T16:45:47Z,renovate[bot],0,0,1,6,1,0,0,[],,0,1960.0,0,0,0,0,4606005.232215,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `f779452` -> `6624720` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xNDIuNCIsInVwZGF0ZWRJblZlciI6IjM4LjE0Mi40IiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29794,2024-11-03T09:25:52Z,2024-11-03T09:58:01Z,linbingquan,0,0,1,2,1,1,1,[],,0,3188.0,0,0,0,0,4629250.777904,,0,1,1,False,[],,,"Related issue: #XXXX

**Description**

As the title says.
",
29792,2024-11-02T15:40:27Z,2024-11-02T16:12:28Z,linbingquan,0,0,1,2,1,1,1,[],,0,44798.0,0,0,0,0,4651566.312611,,0,1,1,False,[],,,"Related issue: #XXXX

**Description**

Remove unnecessary `async`.
",
29782,2024-11-01T07:04:42Z,2024-11-02T20:25:22Z,RenaudRohlinger,3,2,8,401,1,2,0,[],11276.0,0,134441.0,0,0,0,0,4679269.179655,,1,8,0,False,"['sunag', 'RenaudRohlinger', 'Mugen87']","I think it's a good idea to implement such a utility since it helps us exploring the topic of ""auto-batching"" and ""auto-instancing"". Wouldn't it be better to turn this into a class so we can easily extend it when we add instancing support?

```js
const optimizer = new SceneOptimizer( scene );
optimizer.toBatchedMesh();
// optimizer.toInstancingMesh(); // soon
```` @sunag Love the idea! Refactored my work accordingly to your comment.",,"**Description**
Adds a new utility helper that automatically optimizes a scene by converting compatible meshes into BatchedMeshes.

Example usage:
```js
import { optimizeSceneToBatchedMesh } from 'three/addons/utils/BatchedMeshUtils.js';

loader.load( 'dungeon_warkarma.glb', async function ( gltf ) {

	model = gltf.scene;

        // optimizes the scene by converting compatible meshes into BatchedMeshes.
	const optimizer = new SceneOptimizer( model, { debug: true } );
	optimizer.toBatchedMesh();

	scene.add( model );

} );
```

<img width=""1726"" alt=""image"" src=""https://github.com/user-attachments/assets/d8ff58bc-fae6-4476-92c2-006dee8c0b55"">

*This contribution is funded by [Utsubo](https://utsubo.com)*","What if the scene contains instances of `*NodeMaterial` classes (e.g. `MeshStandardNodeMaterial`). 

It looks like properties like `normalNode` or `roughnessNode` are not honored yet. I originally envisioned this utility as a preprocessing step, primarily for 3D assets like GLB files. For MeshStandardNodeMaterial, the material would ideally be applied afterward or the BatchedMesh handled manually, without relying on this utility.

Attempting to integrate the Node system here could lead to maintenance issues and may not be compatible with the WebGLRenderer."
29788,2024-11-01T21:41:38Z,2024-11-02T20:17:33Z,Mugen87,1,0,1,18,2,0,0,[],189.0,0,81355.0,0,0,0,0,4679739.723203,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.66 <br> **171.56** | 692.66 <br> **171.56** | +0 B <br> **+0 B** |
| WebGPU | 822.12 <br> **221.9** | 822.19 <br> **221.92** | +73 B <br> **+15 B** |
| WebGPU Nodes | 821.63 <br> **221.78** | 821.7 <br> **221.79** | +73 B <br> **+13 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.01 <br> **112.35** | 465.01 <br> **112.35** | +0 B <br> **+0 B** |
| WebGPU | 542.65 <br> **146.78** | 542.73 <br> **146.8** | +72 B <br> **+15 B** |
| WebGPU Nodes | 498.65 <br> **136.58** | 498.72 <br> **136.59** | +72 B <br> **+15 B** |",,"Fixed #29785.

**Description**

The PR makes sure a default instance of `CompressedTexture` does not throw any runtime errors in `WebGPURenderer`.
",
29773,2024-10-30T10:25:44Z,2024-10-30T15:12:10Z,Mugen87,3,3,3,251,6,2,0,[],183.0,0,282232.0,0,0,0,0,4692217.333473,,0,3,1,False,"['github-actions[bot]', 'mrdoob', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.67 <br> **171.43** | 691.67 <br> **171.43** | +0 B <br> **+0 B** |
| WebGPU | 820.87 <br> **221.46** | 821.32 <br> **221.61** | +444 B <br> **+144 B** |
| WebGPU Nodes | 820.38 <br> **221.33** | 820.83 <br> **221.48** | +444 B <br> **+150 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.82 <br> **112.17** | 463.82 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 541.7 <br> **146.38** | 541.7 <br> **146.38** | +0 B <br> **+0 B** |
| WebGPU Nodes | 497.7 <br> **136.21** | 497.7 <br> **136.21** | +0 B <br> **+0 B** | Wow! It's so easy to use now. /fyi @spite @sneha-belkhale",,"Related issue: #15897

**Description**

This PR introduces a helper function for using  box projected cube environment mapping (BPCEM) for cube textures and PMREMs. This is a nice feature when using environment maps in indoor scenes.

See https://devlog-martinsh.blogspot.com/2011/09/box-projected-cube-environment-mapping.html.

We had this feature in the repository in earlier days as an example but eventually removed it since the shader patching approach was error-prone and broke the demo more than once. Now with TSL we can implement this feature in a much more elegant fashion. There is now the TSL function`getParallaxCorrectNormal()` which can be used to compute custom uvs when using `cubeTexture()` or `pmremTexture()`.","How about a different name, for clarity?

```js
webgpu_materials_envmaps_box_projected
```
Similar to
```js
webgl_materials_envmaps_ground_projected
```
(The latter is currently missing an underscore.)
 > webgl_materials_envmaps_ground_projected

I think this should be `webgl_skybox_ground_projected`. This example is not related to the `envMap` material property.

Regarding the new example, I don't feel strong about the name. BPCEM is a similar term like PMREM which is why I like and picked it. Whatever you prefer is OK with me... I thought the acronym may be unfamiliar."
29317,2024-09-04T08:35:29Z,2024-09-05T14:15:54Z,Mugen87,7,0,2,131,4,0,0,[],13943.0,0,5079649.0,0,0,0,0,4739816.024669,,0,2,1,False,"['RenaudRohlinger', 'gkjohnson', 'mrdoob', 'Mugen87']","Does it make sense to remove this before stats-gl properly replaces stats.js? I still use this plugin and have used it to benchmark changes to some of the examples that it's removed from in this PR. Can you switch instead to `stats-gl` on your side? If you put the following into an example's import map, you can import via `import Stats from 'stats-gl';` and use it as a replacement of stats.js.
```js
""stats-gl"": ""https://cdn.jsdelivr.net/npm/stats-gl@2.2.8/dist/main.js""
```

I have the feeling this is better than retaining `GPUStatsPanel` which is simply rendundant.  I'm just suggesting to not remove stats.js related components until stats.js is removed from the project. But I see that stats-gl is basically the same thing. How about replacing `GPUStatsPanel` with `stats-gl` in those examples instead? Done! Regarding stats-gl, I’m considering disabling the GPU metrics by default.
Since this is the only metric currently causing issues and is quite advanced, its default state might be better set to off, especially given that it’s not entirely accurate. The CPU metric, on the other hand, is both stable and highly useful, which could be sufficient to drive adoption and facilitate the transition from stats to stats-gl. /cc @Mugen87  Released `stats-gl@2.3.1 `which doesn't have the GPU metrics by default.",,"Related issue: #29295

**Description**

This PR removes the addon `GPUStatsPanel`. For more detailed performance monitoring, it's best to use https://github.com/RenaudRohlinger/stats-gl since it works for both WebGL and WebGPU.

As mentioned earlier, ideally `stats-gl` replaces the original `stats.js` in the examples at some point. Since there seems to be some issues in context of Safari and M processors (see #28978), it's probably best to wait a bit until these problems have been resolved.
",
29501,2024-09-26T03:49:29Z,2024-09-27T16:06:37Z,RenaudRohlinger,3,1,5,184,23,2,1,[],180.0,0,3177054.0,0,0,0,0,4758771.743518,,0,5,1,False,"['github-actions[bot]', 'donmccurdy', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 687.77 <br> **170.3** | +305 B <br> **+77 B** |
| WebGPU | 840.72 <br> **225.49** | 841.02 <br> **225.55** | +305 B <br> **+65 B** |
| WebGPU Nodes | 840.23 <br> **225.36** | 840.53 <br> **225.43** | +305 B <br> **+66 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.36 <br> **111.91** | +123 B <br> **+47 B** |
| WebGPU | 534.87 <br> **144.3** | 535.13 <br> **144.32** | +263 B <br> **+23 B** |
| WebGPU Nodes | 491.21 <br> **134.05** | 491.31 <br> **134.1** | +95 B <br> **+43 B** | Let's merge this and get it into r170, if there are no objections — It would be really nice to support bundlers with WebGPU, blocked by this and #29156. @RenaudRohlinger Just a heads up since I've almost overlooked the post of @FarazzShaikh in the commit: https://github.com/mrdoob/three.js/commit/ac963e25c6ddf9ea1f5f070e90e78529db96f701#r148635345

We might want to partly revert this PR by keeping the `type` member so it can be easier updated on app level. Does that sound good to you?

Granted, it is supposed to be a read-only property and there is an easy workaround (https://github.com/mrdoob/three.js/commit/ac963e25c6ddf9ea1f5f070e90e78529db96f701#r148640959) but I wonder if it's better to not confront users with a migration task by restoring the previous code.",,"Related issue: #29187

**Description**

Issue:

Minifiers mangle class names like MeshStandardMaterial.name to shorter identifiers (e.g., a2), causing errors such as:

NodeMaterial: Material ""MeshStandardMaterial"" is not compatible.

Solution:

This PR fixes the issue by introducing a static type property on material classes. By using materialClass.type instead of materialClass.name, we prevent minification from breaking material compatibility checks.

PS:
Note: I strongly recommend merging this or a similar fix before releasing r169, as this issue currently breaks all Vite applications using the WebGPURenderer.


*This contribution is funded by [Utsubo](https://utsubo.com)*
","Not a big fan of this but since we're using es2018 we can't do:

```js
class Material extends EventDispatcher {
    static type = 'MeshBasicMaterial';
    ...
}
```

and:
```js
class Material extends EventDispatcher {
    ...
}
Material.type = 'Material';
```
 would break treeshaking I believe.
"
29471,2024-09-23T08:55:50Z,2024-09-26T09:42:46Z,Mugen87,3,0,1,612,6,0,0,[],260753.0,0,3318410.0,0,0,0,0,4858235.149107,,0,1,1,False,"['Mugen87', 'mikeskydev', 'mrdoob']","I think we can just remove this loader actually. Updated the PR! Missed this in the last revision, but we (Icosa Gallery) plan to support and host this elsewhere. Will update here when public.",,"Related issue: https://github.com/mrdoob/three.js/pull/29438#issuecomment-2358046344, #29295

**Description**

~~As suggested in https://github.com/mrdoob/three.js/pull/29438#issuecomment-2358046344, this PR simplifies `TiltLoader` by removing the dependency to `RawShaderMaterial`. The loader always uses `MeshBasicMaterial` now.~~

This PR removes `TiltLoader`.",
29755,2024-10-27T19:08:18Z,2024-10-27T19:41:53Z,renovate[bot],0,0,1,14,3,0,0,[],,0,334604.0,0,0,0,0,4867693.933149,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/setup-node](https://redirect.github.com/actions/setup-node) | action | digest | `0a44ba7` -> `39370e3` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMjAuMSIsInVwZGF0ZWRJblZlciI6IjM4LjEyMC4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29769,2024-10-30T04:53:26Z,2024-10-31T12:22:25Z,gkjohnson,1,2,7,118,2,2,1,[],176.0,0,113342.0,0,0,0,0,4881048.964379,,0,7,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.65 <br> **171.38** | 692.66 <br> **171.56** | +1.01 kB <br> **+174 B** |
| WebGPU | 822.12 <br> **221.9** | 822.12 <br> **221.9** | +0 B <br> **+0 B** |
| WebGPU Nodes | 821.63 <br> **221.78** | 821.63 <br> **221.78** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464 <br> **112.17** | 465.01 <br> **112.35** | +1.01 kB <br> **+181 B** |
| WebGPU | 542.65 <br> **146.78** | 542.65 <br> **146.78** | +0 B <br> **+0 B** |
| WebGPU Nodes | 498.65 <br> **136.58** | 498.65 <br> **136.58** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29710#issuecomment-2431480831

**Description**

Adds support for copying data to and from mipmap levels using the `copyTextureToTexture` function.

- Adds a new `srcLevel` argument to the function
- Attempts to retain backwards compatibility with old signature
- Update docs
- Default to copying the appropriate mip map size
- Creates ""scratch"" frame buffers to reuse to avoid cases where other attachments are already bound but of different scales.

cc @CodyJasonBennett ","TBH, I don't understand the purpose of the new `_srcFramebuffer` and `_dstFramebuffer`^^. Why don't you bind the existing framebuffers of the render targets? Normal, non-rendertarget textures do not have a frame buffer associated with them but need to be bound to one to copy. And when copying between render target mipmaps you can get the following error:

> GL_INVALID_FRAMEBUFFER_OPERATION: Framebuffer is incomplete: Attachments are not all the same size.

Ie the attached mip map buffer is smaller but the other MRT color or depth attachments are the original size. Using a new framebuffer avoids the issue."
29780,2024-10-31T10:06:49Z,2024-10-31T10:14:15Z,Mugen87,3,0,1,889,3,0,0,[],246.0,0,1105.0,0,0,0,0,4888082.992347,,0,1,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.65 <br> **171.38** | 691.65 <br> **171.38** | +0 B <br> **+0 B** |
| WebGPU | 822.12 <br> **221.9** | 822.12 <br> **221.9** | +0 B <br> **+0 B** |
| WebGPU Nodes | 821.62 <br> **221.77** | 821.62 <br> **221.77** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464 <br> **112.17** | 464 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 542.64 <br> **146.79** | 542.64 <br> **146.79** | +0 B <br> **+0 B** |
| WebGPU Nodes | 498.63 <br> **136.6** | 498.63 <br> **136.6** | +0 B <br> **+0 B** | Looking good. Let's give it a try! It seems this upgrade also fixed all vulnerabilities of the `three` npm package 🎉 .

<img width=""169"" alt=""image"" src=""https://github.com/user-attachments/assets/f27451ab-4256-4bc9-a388-9ac0bbb96444"">

",,"Related issue: #29287

**Description**

First attempt to upgrade `jimp` to the latest version. 
",
29774,2024-10-30T11:51:07Z,2024-10-30T15:37:38Z,Mugen87,0,0,1,364,4,0,0,[],,0,13591.0,0,0,0,0,4955739.737823,,0,1,1,False,[],,,"Related issue: -

**Description**

A better place for the code from `webgl_raymarching_reflect` would be probably Shadertoy or something similar.",
29771,2024-10-30T09:15:45Z,2024-10-30T10:19:23Z,Mugen87,1,0,1,3,1,0,0,[],214.0,0,3978.0,0,0,0,0,4974675.741943,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.67 <br> **171.43** | 691.67 <br> **171.43** | +0 B <br> **+0 B** |
| WebGPU | 820.87 <br> **221.46** | 820.87 <br> **221.46** | +0 B <br> **+0 B** |
| WebGPU Nodes | 820.38 <br> **221.33** | 820.38 <br> **221.33** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.82 <br> **112.17** | 463.82 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 541.7 <br> **146.38** | 541.7 <br> **146.38** | +0 B <br> **+0 B** |
| WebGPU Nodes | 497.7 <br> **136.21** | 497.7 <br> **136.21** | +0 B <br> **+0 B** |",,"Related issue: -

**Description**

The PR fixes a bug in `RectAreaLightNode` that appears when you produce a frame with more than one `render()` call and different cameras. My use case was updating a `CubeCamera` per frame and using its cube render target as a texture for objects.

The default update type of analytical light nodes in `FRAME`. This is fine for most modules but `RectAreaLightNode` depends on the view matrix in its `update()` method. If there is only a single update per frame, `RectAreaLightNode` uses wrong uniform values when rendering the scene with subsequent cameras.",
29579,2024-10-07T16:28:39Z,2024-10-21T16:09:32Z,eXponenta,13,3,3,61,4,4,0,[],184.0,0,1948072.0,0,0,0,0,4991808.159468,,0,3,1,False,"['eXponenta', 'CodyJasonBennett', 'WestLangley', 'github-actions[bot]', 'mrdoob', 'prideout', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.88 <br> **171.51** | +171 B <br> **+75 B** |
| WebGPU | 817.93 <br> **220.59** | 817.93 <br> **220.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 817.44 <br> **220.46** | 817.44 <br> **220.46** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 465.09 <br> **112.28** | +161 B <br> **+76 B** |
| WebGPU | 538.86 <br> **145.56** | 538.86 <br> **145.56** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.86 <br> **135.37** | 494.86 <br> **135.37** | +0 B <br> **+0 B** | @CodyJasonBennett can you explain how `logarithmicDepth` should work with reversedZ?
Looks like it works no fully stable ( maybe for me only ).
I got flipped depth when logarithmic is enabled. 

Looks like needs to change math for it also:
https://github.com/mrdoob/three.js/blob/36bac08e87b0a016ce920b59b3375ed682a03997/src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl.js#L6

https://github.com/mrdoob/three.js/blob/36bac08e87b0a016ce920b59b3375ed682a03997/src/renderers/WebGLRenderer.js#L2008 You should not use those together. Reverse depth is a strict upgrade and doesn't disable early-z optimizations like logarithmic depth does. I'd expect something is not cleaning up if you see any change to logarithmic depth. > You should not use those together. Reverse depth is a strict upgrade and doesn't disable early-z optimizations like logarithmic depth does. I'd expect something is not cleaning up if you see any change to logarithmic depth.

But by default we can create it together, because capabilities not disable logDepth if we can use reversedZ >You should not use those together.

@Mugen87 Perhaps an API change is warranted...
 ```js
THREE.StandardDepthBuffer
THREE.ReversedZDepthBuffer
THREE.LogarithmicDepthBuffer
```
```js
const renderer = new THREE.WebGPURenderer( { depthBuffer: THREE.LogarithmicDepthBuffer } );
``` This is a great suggestion! 👍  Indeed! 👍 If `EXT_clip_control` was widely available, I would suggest removing logarithmic depth entirely. Is it really worth an API change which will not be future proof when exactly reverse-z is opt-in? It is a strict improvement over logarithmic depth where `EXT_clip_control` is available. I'd wager it will be GA and diffuse before WebGPU, as I implemented this after sitting in the meeting for the announcement of this extension's shipping in Safari. FWIW, logarithmic depth already doesn't play nicely with some features (e.g. `polygonOffset`) so I think Cody's proposal (API simplification rather than API enhancement) is worth considering , especially since `EXT_clip_control` is now supported in Safari and Chrome. I agree it's better to just have two types of depth buffer implementation and deprecate logarithmic depth buffer in the future.

It might still be a good idea to switch to enums instead of using flags since it feels more readable. However, I'm not feeling strong about that. Given the recent comments, I am OK with leaving the API as-is. Hi @eXponenta, before this PR, reversed Z worked in my simple sandbox app without any changes other than passing the new param to the renderer constructor.  However after this PR, my app does not render anything unless I add `renderer.getContext().clearDepth(0)` to my app as a workaround.

Could that be due to the removed line that called `_gl.clearDepth`?LGTM! Would be great if @CodyJasonBennett could also have a look 👍 .",LGTM! Would be great if @CodyJasonBennett could also have a look 👍 .,"Fixed #29578 
Related PR: #29445 

**Description**
Fix: reset clip state when reset is called
Fix: valid depth clear value when reversed is enabled

Feat:  non-persistent reversedZ state ( can be controlled via renderer.state.buffers.depth.setReversed(  )))
","I would keep this line as-is to mirror user configuration. @eXponenta  Additionally, maybe we should also do:

```js
const oldFunc = currentDepthFunc;
currentDepthFunc = null;
this.setFunc( oldFunc );
``` Oops. Yep, this one. 
Because we also should upgrade depth func to inverter version.
"
29729,2024-10-23T02:55:13Z,2024-10-30T01:22:22Z,sunag,5,0,5,118,6,0,0,[],184.0,0,600007.0,0,0,0,0,5006279.65597,,0,5,1,False,"['github-actions[bot]', 'sunag', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.67 <br> **171.43** | 691.67 <br> **171.43** | +0 B <br> **+0 B** |
| WebGPU | 820.19 <br> **221.32** | 820.85 <br> **221.46** | +653 B <br> **+140 B** |
| WebGPU Nodes | 819.7 <br> **221.19** | 820.36 <br> **221.32** | +653 B <br> **+137 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.82 <br> **112.17** | 463.82 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 541.03 <br> **146.24** | 541.68 <br> **146.38** | +654 B <br> **+143 B** |
| WebGPU Nodes | 497.03 <br> **136.06** | 497.68 <br> **136.21** | +654 B <br> **+145 B** | I'm testing with a WebGPU port of `webgl_framebuffer_texture`: https://jsfiddle.net/g0ahteof/1/

With this PR, I get the following runtime error with WebGPU:
```
Uncaught TypeError: Failed to execute 'copyTextureToTexture' on 'GPUCommandEncoder': Value is not of type 'unsigned long'.
    at WebGPUBackend.copyFramebufferToTexture (WebGPUBackend.js:1524:1)
    at WebGPURenderer.copyFramebufferToTexture (Renderer.js:1316:1)
    at Animation.animate [as animationLoop] (webgl_framebuffer_texture:186:14)
    at update (Animation.js:27:1)
```
The WebGL backend produces no error but the top left view is empty (so the copy does not work yet). The last commit fix the WebGPUBackend but seems that y-axis is fliped. When I flip the uv coordinates of the sprite which displays the `FramebufferTexture`, the result is as expected. I'm using:
```js
sprite.geometry = flipY( sprite.geometry );

function flipY( geometry ) {

	const uv = geometry.attributes.uv;

	for ( let i = 0; i < uv.count; i ++ ) {

		uv.setY( i, 1 - uv.getY( i ) );

	}

	return geometry;

}
``` I would like to revisit this function of the API soon, there are still some revisions related to color outputs that need to be done. ",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/29713

**Description**

Added support for post-rendering usage.",
29762,2024-10-29T12:04:40Z,2024-10-29T14:43:49Z,Mugen87,1,1,1,70,4,1,0,[],189.0,0,16411.0,0,0,0,0,5038509.872965,,1,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.67 <br> **171.43** | 691.67 <br> **171.43** | +0 B <br> **+0 B** |
| WebGPU | 819.79 <br> **221.18** | 820.19 <br> **221.32** | +403 B <br> **+140 B** |
| WebGPU Nodes | 819.3 <br> **221.05** | 819.7 <br> **221.19** | +403 B <br> **+135 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.82 <br> **112.17** | 463.82 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 540.65 <br> **146.12** | 541.03 <br> **146.24** | +385 B <br> **+121 B** |
| WebGPU Nodes | 496.64 <br> **135.92** | 497.03 <br> **136.06** | +385 B <br> **+145 B** |",,"Related issue: -

**Description**

The PR makes sure `WebGPURenderer` supports `Scene.backgroundRotation`.
","Passing `normalWorld` should be obsolete since `Background.js` defines `getUV()`. So `PMREMNode` should fetch the correct uvs via:

https://github.com/mrdoob/three.js/blob/b7ae58056b4fa2450fbfdb1ab462fa51ecfadd64/src/nodes/pmrem/PMREMNode.js#L178-L182"
29759,2024-10-28T21:40:53Z,2024-10-29T08:52:02Z,kristiker,1,0,1,27,3,1,1,[],183.0,0,41761.0,0,0,0,0,5064987.116275,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.6 <br> **171.42** | 691.67 <br> **171.43** | +70 B <br> **+9 B** |
| WebGPU | 818.94 <br> **220.87** | 819.01 <br> **220.88** | +70 B <br> **+16 B** |
| WebGPU Nodes | 818.45 <br> **220.73** | 818.52 <br> **220.73** | +70 B <br> **-5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.75 <br> **112.17** | 463.82 <br> **112.17** | +70 B <br> **+6 B** |
| WebGPU | 539.8 <br> **145.81** | 539.87 <br> **145.81** | +70 B <br> **+7 B** |
| WebGPU Nodes | 495.8 <br> **135.63** | 495.87 <br> **135.63** | +70 B <br> **+6 B** |",,"Fixed #29751

**Description**

Adds the `divide` method to Vector4 class.
",
29757,2024-10-28T10:01:37Z,2024-10-29T08:59:35Z,Mugen87,1,0,5,247,6,0,0,[],188.0,0,82678.0,0,0,0,0,5066026.560638,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.6 <br> **171.42** | 691.6 <br> **171.42** | +0 B <br> **+0 B** |
| WebGPU | 818.94 <br> **220.87** | 819.73 <br> **221.21** | +781 B <br> **+344 B** |
| WebGPU Nodes | 818.45 <br> **220.73** | 819.23 <br> **221.08** | +781 B <br> **+346 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.75 <br> **112.17** | 463.75 <br> **112.17** | +0 B <br> **+0 B** |
| WebGPU | 539.8 <br> **145.81** | 540.58 <br> **146.11** | +781 B <br> **+304 B** |
| WebGPU Nodes | 495.8 <br> **135.63** | 496.58 <br> **135.91** | +781 B <br> **+283 B** |",,"Related issue: -

**Description**

This make sure `NodeMaterial` supports `Material.alphaHash`. 

The demo uses SSAA since there are stability issues with TRAA that I want to investigate separately.",
29752,2024-10-27T09:59:57Z,2024-10-28T08:44:58Z,Mugen87,1,0,4,425,5,0,0,[],163087.0,0,163087.0,0,0,0,0,5072118.725248,,0,4,1,False,['mrdoob'],FYI @gkjohnson @yomboprime ,,"Related issue: #29295

**Description**

The PR adds `WebGPURenderer` support to `LDrawLoader` by moving the internal custom shader material to an external file `LDrawConditionalLineMaterial` so there is no dependency to `ShaderMaterial` anymore. The line type is now configurable with a new method (same pattern like with other addons e.g. `GLTFExporter`).

The PR also adds the node material version of the custom material so the loader can be used with `WebGPURenderer`.

",
29750,2024-10-26T13:29:35Z,2024-10-28T08:44:29Z,Mugen87,0,0,2,453,5,0,0,[],,0,155694.0,0,0,0,0,5153333.999536,,0,2,1,False,[],,,"Related issue: -

**Description**

The PR removes `CinematicCamera` and the related example `webgl_camera_cinematic`.

`CinematicCamera` was essentially a wrapper around a bokeh shader. I think it's cleaner if we don't put a post processing setup inside a camera class but configure a DOF effect like all other effects on app level (like with `DepthOfFieldNode`).",
29742,2024-10-24T14:36:28Z,2024-10-28T08:41:10Z,mrxz,3,0,1,8,1,1,1,[],194.0,0,324282.0,0,0,0,0,5153533.504886,,0,1,1,False,"['github-actions[bot]', 'jrjdavidson', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.57 <br> **171.41** | 691.6 <br> **171.42** | +26 B <br> **+9 B** |
| WebGPU | 818.87 <br> **220.85** | 818.87 <br> **220.85** | +0 B <br> **+0 B** |
| WebGPU Nodes | 818.38 <br> **220.72** | 818.38 <br> **220.72** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.72 <br> **112.16** | 463.75 <br> **112.17** | +26 B <br> **+8 B** |
| WebGPU | 539.75 <br> **145.78** | 539.75 <br> **145.78** | +0 B <br> **+0 B** |
| WebGPU Nodes | 495.74 <br> **135.6** | 495.74 <br> **135.6** | +0 B <br> **+0 B** | /cc @cabanier  Just in case it's useful, see #26340",,"Fixed #24354

**Description**

This PR updates the `WebXRManager` to copy over the layers mask to the XR cameras. The respective eye layer (1 for left, 2 for right) is always enabled in addition.

- A default scene setup behaves identical to before
- Calling `renderer.render(scene, camera)` now always respects `camera.layers` whether XR is active or not
- Users that manually enabled layers on the XR cameras will now have to enable them on the main camera instead.
- Users will have to be careful with layers 1 and 2 as these are used for the eyes (even before this PR)

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Fern Solutions](https://fern.solutions)*
",
29540,2024-10-02T00:42:42Z,2024-10-02T20:32:25Z,donmccurdy,2,0,2,3,1,1,1,[],182.0,0,2230811.0,0,0,0,0,5197831.666805,,1,2,1,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.26 <br> **217.48** | 807.25 <br> **217.46** | -9 B <br> **-18 B** |
| WebGPU Nodes | 806.77 <br> **217.34** | 806.76 <br> **217.32** | -9 B <br> **-19 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.06 <br> **144.73** | 536.06 <br> **144.73** | +0 B <br> **+0 B** |
| WebGPU Nodes | 492.14 <br> **134.46** | 492.14 <br> **134.46** | +0 B <br> **+0 B** | Yes, sounds correct to me too. I think we can remove the `spread syntax` (...) too.",,"Since the luminance() function could be called multiple times with different coefficients, and I'm not sure whether the vector is stored internally by `vec3(vector)`, perhaps it's better not to reuse a local variable here.

/cc @sunag does this sound correct?",
29754,2024-10-27T19:08:13Z,2024-10-27T19:41:43Z,renovate[bot],0,0,1,16,4,0,0,[],,0,2054.0,0,0,0,0,5200257.79169,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/checkout](https://redirect.github.com/actions/checkout) | action | digest | `eef6144` -> `11bd719` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMjAuMSIsInVwZGF0ZWRJblZlciI6IjM4LjEyMC4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
12244,2017-09-21T05:30:50Z,2017-09-21T22:42:29Z,donmccurdy,5,0,6,233,3,0,0,[],46.0,0,224078361.0,0,0,0,0,5208194.36533,,0,6,0,False,"['donmccurdy', 'takahirox', 'mrdoob']","/cc @takahirox  Sorry I haven't followed the thread but what extra `Object3D` wrappers were for? With this change, shadow disappears in glTF example.

![image](https://user-images.githubusercontent.com/7637832/30695737-3c9352dc-9f14-11e7-985f-30997b85a90b.png)
 > Sorry I haven't followed the thread but what extra Object3D wrappers were for?

I don't think they were for anything, just a side effect of the loader implementation.

> With this change, shadow disappears in glTF example.

Oh, that was intentional but I should have mentioned it in my PR comment. None of the other loaders (except SEA3D) enable shadows, so I don't think glTF should either. Let's just add shadows in `webgl_loader_gltf.html` instead. Thanks!",,"Partial solution for #11944, and fixes some animation regressions. Using AnimatedMorphCube.gltf:

| Before | After |
|--------|------|
| ![screen shot 2017-09-20 at 10 08 55 pm](https://user-images.githubusercontent.com/1848368/30679738-633bddba-9e50-11e7-803b-550a9ac45023.png) | ![screen shot 2017-09-20 at 10 25 49 pm](https://user-images.githubusercontent.com/1848368/30680113-b73f7aaa-9e52-11e7-939e-10c86e95c5fb.png) |

We were previously cloning meshes manually, without calling `mesh.clone()`, and I have no idea why. The only difference I can spot between the [loader's code](https://github.com/mrdoob/three.js/blob/r87/examples/js/loaders/GLTFLoader.js#L2196-L2236) and a normal `clone()` is that morph target properties were included, so I've added those to `Mesh.prototype.copy`.

It may be possible to replace the `THREE.Group`with a grouped BufferGeometry, as well, but that's another PR. :)

Here's a version of my viewer running the code from this change: https://three-gltf-viewer-afsyhsshii.now.sh/",
29522,2024-09-28T16:41:30Z,2024-09-30T09:26:49Z,Mutefish0,3,0,3,2,1,1,1,[],181.0,0,2349064.0,0,0,0,0,5367652.575924,,0,3,1,False,"['github-actions[bot]', 'ErichDonGubler', 'crowlKats']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.15 <br> **170.18** | 687.15 <br> **170.18** | +0 B <br> **+0 B** |
| WebGPU | 805.82 <br> **216.97** | 805.82 <br> **216.97** | +5 B <br> **+6 B** |
| WebGPU Nodes | 805.33 <br> **216.83** | 805.33 <br> **216.83** | +5 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.59 <br> **144.55** | 535.6 <br> **144.56** | +5 B <br> **+5 B** |
| WebGPU Nodes | 491.75 <br> **134.31** | 491.75 <br> **134.31** | +5 B <br> **+4 B** | Heads up: Once <https://github.com/gfx-rs/wgpu/pull/6148> lands, and it's consumed in Deno, you should be able to revert this.

CC @crowlKats, who maintains Deno's WebGPU implementation. I'm not sure if or how Deno is tracking this functionality. nope, we are not tracking this functionality, but i'll be keeping an eye on it now and make sure we update deno once its available",,"I've ported a [game](https://github.com/Mutefish0/rega/tree/main/celeste) to Deno using Three.js. However, diagnostic filters aren’t supported in wgpu, which Deno's WebGPU is based on.

Tracking issue:
https://github.com/gfx-rs/wgpu/issues/5320
",
29306,2024-09-03T16:29:17Z,2024-09-03T16:37:51Z,sunag,2,0,1,14,1,0,0,[],210.0,0,4500722.0,0,0,0,0,5376727.741314,,0,1,1,False,"['github-actions[bot]', 'ErichDonGubler']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 822.6 kB <br> **220.8 kB** | 822.6 kB <br> **220.8 kB** | +78 B <br> **+28 B** |
| WebGPU Nodes | 822.1 kB <br> **220.7 kB** | 822.2 kB <br> **220.7 kB** | +497 B <br> **+126 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 521.7 kB <br> **140.6 kB** | 521.7 kB <br> **140.7 kB** | +78 B <br> **+30 B** |
| WebGPU Nodes | 478.3 kB <br> **130.5 kB** | 478.4 kB <br> **130.5 kB** | -43.27 kB <br> **+32 B** | Heads up as a maintainer of Firefox's WGSL shader compiler: Once <https://github.com/gfx-rs/wgpu/pull/6148> lands, and it's consumed in Firefox, you should be able to revert this. You can also follow along at [bug 1882800](https://bugzilla.mozilla.org/show_bug.cgi?id=1882800).",,"Related issue: https://github.com/mrdoob/three.js/issues/29258

Not all examples need it, so we can disable it for Firefox for as needed.",
29749,2024-10-25T17:51:55Z,2024-10-25T17:57:43Z,Mugen87,0,0,5,543,5,0,0,[],,0,348.0,0,0,0,0,5379344.179206,,0,5,1,False,[],,,"Related issue: #29295

**Description**

This PR introduces a port of `ProgressiveLightMap` for `WebGPURenderer`.
",
29748,2024-10-25T09:38:58Z,2024-10-25T09:46:07Z,linbingquan,0,0,1,72,3,1,1,[],,0,1401.0,0,0,0,0,5407869.656145,,0,1,1,False,[],,,"Related comment: https://github.com/mrdoob/three.js/pull/29747#issuecomment-2437260037

**Description**

As the title say.",
29746,2024-10-25T01:54:24Z,2024-10-25T13:44:03Z,puxiao,0,0,1,1,1,1,1,[],,0,50185.0,0,0,0,0,5386959.703925,,0,1,1,False,[],Thank you!,Thank you!,"I just recently started using .ktx2 and it's awesome!

A small fix.",
29747,2024-10-25T08:43:42Z,2024-10-25T08:56:36Z,Mugen87,3,0,2,26,1,0,0,[],897.0,0,2747.0,0,0,0,0,5409840.226315,,0,2,1,False,"['linbingquan', 'Mugen87']","These files also have `import * as THREE from 'three'`.

examples\jsm\offscreen\scene.js
examples\jsm\transpiler\TSLEncoder.js
examples\jsm\tsl\lighting\TiledLightsNode.js
examples\jsm\webxr\OculusHandPointerModel.js
examples\jsm\webxr\Text2D.js @linbingquan Would you like to file a PR and remove the remaining `*` imports (except for `examples\jsm\offscreen\scene.js`)? `examples\jsm\transpiler\TSLEncoder.js` should be not remove, because of `TSLEncoder.addImport`.",,"Related issue: -

**Description**

The PR remove usage of `THREE` namespace in `ProgressiveLightMap`.",
29736,2024-10-23T21:32:25Z,2024-10-25T03:27:39Z,scottmas,1,0,3,32,4,1,1,[],180.0,0,107714.0,0,0,0,0,5431551.507409,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.57 <br> **171.41** | 691.57 <br> **171.41** | +0 B <br> **+0 B** |
| WebGPU | 818.87 <br> **220.85** | 818.89 <br> **220.86** | +17 B <br> **+5 B** |
| WebGPU Nodes | 818.38 <br> **220.72** | 818.4 <br> **220.72** | +17 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.72 <br> **112.16** | 463.72 <br> **112.16** | +0 B <br> **+0 B** |
| WebGPU | 539.75 <br> **145.78** | 539.75 <br> **145.78** | +0 B <br> **+0 B** |
| WebGPU Nodes | 495.74 <br> **135.6** | 495.74 <br> **135.6** | +0 B <br> **+0 B** |",,"Related issue: NA

**Description**

When running a multiplatform React Native app on the web, the bundler declares a local variable `global` which exists to increase compatibility with different ecosystems such as react-native ios/android or node. I have renamed the `global` variable inside ScriptableNode.js so that locally it is simply `localGlobal`. The export remains the same however, so it should have no downstream implications.  ",
29730,2024-10-23T03:58:02Z,2024-10-24T21:27:32Z,donmccurdy,13,0,5,191,4,0,0,[],2455.0,0,150175.0,0,0,0,0,5452353.585809,,0,5,1,False,"['donmccurdy', 'zeux']","So on Linux with Firefox & AMD GPU (radeonsi), WebGL 2 exposes both  EXT_texture_compression_bptc and WEBGL_compressed_texture_astc. However, ASTC isn't actually supported in hardware; radv exposes ASTC for... some reason (?).. and does a software decompress on upload from what I saw. Maybe this will change if Firefox switches to ANGLE, unsure if they have plans.

As a consequence, on Linux this PR actually prints ""format: RGBA_ASTC_4x4"" when selecting the HDR format; additionally, the texture doesn't render correctly:

![image](https://github.com/user-attachments/assets/4f7019ba-e105-4019-8178-37f25c19b9e8)

If I force disable ASTC by patching KTX2Loader.js to pretend it isn't supported, then I get proper result with ""RGB_BPTC_UNSIGNED"" printed in the log:

![image](https://github.com/user-attachments/assets/b4e732b2-6ab4-45ad-99ac-9df3e36fa8e4)
 > found a bug while working on the PR, which caused KTX2Loader to often select a non-optimal transcoding format, e.g. selecting BCn while ETC1/2 was also available

Is this part of the PR? I thought it's a separate commit but neither commits nor changes make it obvious as to where it is. Oh, re: radeonsi, correction: the underlying GL driver only exposes GL_KHR_texture_compression_astc_ldr and doesn't expose GL_KHR_texture_compression_astc_hdr. This is common on mobile hardware as well from I recall: some devices opt out of HDR support to conserve die area for decoding. Looks like WebGL exposes both via the same extension but requires to use `getSupportedProfiles()` to check for support which three.js does not do. @zeux thanks so much, this is really helpful!

I'll update the PR to use `getSupportedProfiles()` in WebGL. The WebGPU spec doesn't mention ldr/hdr profiles, and as all [listed formats are `unorm`](https://www.w3.org/TR/webgpu/#texture-compression-astc), it probably doesn't support the HDR format, so I'll test that and disable it in WebGPU if needed. 

> > found a bug while working on the PR, which caused KTX2Loader to often select a non-optimal transcoding format, e.g. selecting BCn while ETC1/2 was also available
> 
> Is this part of the PR? I thought it's a separate commit but neither commits nor changes make it obvious...

These lines were the problem...

```javascript
const ETC1S_OPTIONS = FORMAT_OPTIONS.sort( ( a, b ) => a.priorityETC1S - b.priorityETC1S );
const UASTC_OPTIONS = FORMAT_OPTIONS.sort( ( a, b ) => a.priorityUASTC - b.priorityUASTC );
```

... because .sort() modifies the array in-place, the ETC1S options were sorted by UASTC priority. I've added a .filter() call in this PR, creating a new array for each format. > These lines were the problem...

Got it, thanks. After looking at this again, the behavior before this PR in the sample was: ETC1S selects BPTC, UASTC selects ASTC; the behavior after this PR is: ETC1S selects ETC2, UASTC selects ASTC.

I feel like it might make sense to revisit the priorities separately given the hybrid behavior noted above; even before this change, I'm not sure that ETC1S selecting BPTC was the correct course of action (this results in 1 byte per pixel and uses BC7 which can reach a very high quality; I'd think that the quality of ETC1S encoding is sufficiently representable via DXT1/5 based on presence of alpha, which would save memory when textures don't have alpha, but I haven't checked this); after this change though, on Linux effectively I'm getting driver-uncompressed formats everywhere. WebGPU doesn't support ASTC HDR yet; there's a pending proposal for this via a separate feature string: https://github.com/gpuweb/gpuweb/issues/3856 The target format priorities for ETC1S are based on this decision tree:

https://github.com/KhronosGroup/3D-Formats-Guidelines/blob/main/KTXDeveloperGuide.md#transcode-target-selection-rgb-and-rgba

Preferring BPTC over ETC2 was an accident, but I see your point that preferring BC1/3 over BC7 could be a better choice.

> ... after this change though, on Linux effectively I'm getting driver-uncompressed formats everywhere.

Ouch, do you mean that the ETC1S→ETC2 transcode path is being decompressed by drivers on Linux too? From your earlier comment I assumed this software decompress was only a concern when using ASTC HDR without checking the supported profiles, and wouldn't affect the non-HDR ETC1S and UASTC formats. Let's ignore the LDR behavior for the purpose of this PR, I need to look at the implications of what the driver is doing here wrt speed and quality... but Mesa actually has transcode paths internally now, so the texture should be recompressed into the relevant format. So ETC1S would go to the driver as ETC2 (and UASTC as ASTC) with minimal amount of transcoding via Basis, but the driver will then transcode from ETC2 to DXT1/5 (based on presence of alpha) or from ASTC to DXT5. (in the previous comments I was assuming the driver simply decompresses, but that's no longer the case as of a few years ago, as it now implements transcoding)

The transcoding for ETC2 is basically a block recompression: it decompresses each block into 4x4 RGBA8 and then compresses it back using a custom compression code that's probably not super high quality but since the starting point is ETC1S which is much weaker than ETC2 it might be enough. 

The transcoding for ASTC likely loses a fair bit of quality, as it chooses DXT5 as the target format; that format is weaker than UASTC, and since transcoder is also doing a decompress-recompress with custom code it might have weaknesses of its own.

From this perspective, your change would actually be beneficial for memory size on Linux... (as before the driver was just handed a BPTC texture, and now it's handed a ETC2 texture which it transcodes to DXT1) -- but I'd need to understand the quality implications here to see if we actually need priority tuning, aside from the BPTC-DXT1 question that I'd also need to test. > Let's ignore the LDR behavior for the purpose of this PR

As I mentioned, before this PR, ETC1S textures would select BPTC on Linux/AMD configuration, and now they select ETC2 and they trigger the ETC2->DXT transcode in the driver.

This is actually very problematic: the driver transcode is *very* slow, and synchronous as it happens during WebGL texture upload on the CPU. It takes 8 seconds (!!) and during this the web page is completely unresponsive, using webgl_loader_gltf_compressed.html as is on this PR. On master, the transcode happens in Basis background worker and takes at most ~160ms on one of four workers. Obviously on master the sorting issue merely masks the problem by favoring BPTC over ETC2 (and excluding ASTC as the source is ETC1S).

The ""green"" area on the timeline is the driver work to transcode the textures.
![image](https://github.com/user-attachments/assets/fadb0412-1fd3-4e23-8007-0852c48c5930)

The behavior with ASTC is a little better: transcode is still synchronous, but faster and takes ~2 seconds; transcode is asynchronous and reasonably faster. Note that this PR does *not* change the effective ASTC LDR behavior, so this problem exists on master for ASTC, but not for ETC1S:

![image](https://github.com/user-attachments/assets/58ac7728-3ed7-4aa1-8c9c-90c3920cd8a2)

(the test above is the same asset, coffeemat.glb, but converted from ETC1S to UASTC)

If I force-disable ASTC (which makes the transcoder choose BPTC for UASTC inputs), the stall disappears; Wasm transcoding takes a little longer (~300ms per worker instead of ~200ms - note that UASTC -> ASTC transcoding is still decidedly not free).

![image](https://github.com/user-attachments/assets/650d5c83-cf03-4aaf-bb55-eff1145134e5)

None of these problems affect Chrome on Linux: it uses ANGLE, and it restricts ASTC and ETC support with vendor checks by only exposing them on specific Intel GPUs:

```
    // Although ""Sandy Bridge"", ""Ivy Bridge"", and ""Haswell"" may support GL_ARB_ES3_compatibility
    // extension, ETC2/EAC formats are emulated there. Newer Intel GPUs support them natively.
    ANGLE_FEATURE_CONDITION(
        features, allowETCFormats,
        isIntel && !IsSandyBridge(device) && !IsIvyBridge(device) && !IsHaswell(device));

    // Mesa always exposes ASTC extension but only Intel Gen9, Gen11, and Gen12 have hardware
    // support for it. Newer Intel GPUs (Gen12.5+) do not support ASTC.
    ANGLE_FEATURE_CONDITION(features, allowAstcFormats,
                            !isMesa || isIntel && (Is9thGenIntel(device) || IsGeminiLake(device) ||
                                                   IsCoffeeLake(device) || Is11thGenIntel(device) ||
                                                   Is12thGenIntel(device)));
```

So, conclusion:

- The fix to sorting behavior is unfortunately creating a very significant problem wrt upload behavior for ETC1S on Linux/AMD/Firefox
- The same problem existed for UASTC LDR inputs, this PR doesn't change that, the problem is less severe vs ETC as the transcode is multiple times faster, but it's still not great and should probably be addressed.
- Neither of these exist on Chromium as it uses ANGLE which disables the emulated extensions.

I'm not sure if this should be classified as a Firefox issue that should be fixed on their end, or something that KTX2Loader should work around by adjusting the priorities; I would probably argue for the latter as the performance impact is severe, but this can probably still be done separately from this PR? Thanks again @zeux! Could I ask how you're producing the graphs above? Do you know whether that's possible on macOS? I've reverted the would-be fix for ETC1S, so the selected transcoding target should be the same before and after this PR. I also added an inline comment about the situation. Finally, I added the required check for `getSupportedProfiles()`. 

As followups after this PR, we could:

1. Consider detecting the Firefox user agent and adjusting sort-order as a special case
2. Apply a similar fix for UASTC in Firefox
3. File an issue with Firefox explaining the situation

Note that in WebGPU we don't currently have access to BPTC, so if similar emulation occurs there may be more issues to work through at some point.
 The graphs are captured from Firefox’s builtin profiler. I assume this is Linux specific: on macOS 
I wouldn’t think the GL driver is exposing any extensions the HW doesn’t support natively, but not sure. Apple Silicon based Macs do support the full gamut of formats (so I wouldn’t be surprised to see all of ETC/ASTC/BPTC/DXT exposed) but that’s all not emulated so there shouldn’t be a penalty for choosing “incorrectly”.

re: WebGPU, unless I’m mistaken, BPTC should be exposed under -bc feature along with other BCn formats? bc7-rgba-unorm format in this case (LDR) and bc6h-rgb-ufloat for HDR > re: WebGPU, unless I’m mistaken, BPTC should be exposed under -bc feature along with other BCn formats?

Oops I see – there is no `'texture-compression-bptc'`, just `'texture-compression-bc'`. I'm not sure what happened here, we'll need to make some corrections in our WebGPU feature detection. I'll follow up on that in a separate PR. Opened a new issue to track the remaining tasks:

- https://github.com/mrdoob/three.js/issues/29745",,"Related:

- https://github.com/mrdoob/three.js/pull/29441
- https://github.com/mrdoob/three.js/pull/29418

Adds support for transcoding UASTC HDR (unsigned half float), in the following order of preference:

1. ASTC (requires WEBGL_compressed_texture_astc)
2. BC6H (requires EXT_texture_compression_bptc, requires transcoder)
3. RGBA16 (requires transcoder)

I don't have a Windows desktop device available for testing. If someone would be able to check the `webgl_loader_texture_ktx2.html` example, select the ""RGBA16 Linear (UASTC HDR)"" sample in the dropdown, and then report the output to the JS Console, that would be much appreciated! On my macOS laptop, the output is...

```
format: RGBA_ASTC_4x4
type: HalfFloatType
colorSpace: srgb-linear
```

... but I'd expect a Windows device to select BC6H, instead.

~~Unrelated — I found a bug while working on the PR, which caused KTX2Loader to often select a non-optimal transcoding format, e.g. selecting BCn while ETC1/2 was also available. That issue is fixed in this PR as well, and should improve transcoding time and quality.~~ Reverted for now; this caused other issues.

To create Basis HDR textures you'll need the latest release of the `basisu` CLI, and a .exr input file:

```
basisu sample.exr
```",
29743,2024-10-24T15:01:12Z,2024-10-24T15:10:41Z,Mugen87,0,0,2,74,2,0,0,[],,0,570.0,0,0,0,0,5475769.07596,,0,2,1,False,[],,,"Related issue: -

**Description**

Some clean up in the `ProgressiveLightMap` class and the related example. 
",
29665,2024-10-15T15:39:08Z,2024-10-15T17:49:37Z,sawa-zen,0,0,1,8,1,0,0,[],,0,754540.0,0,0,0,0,5497124.501256,,0,1,1,False,[],,,"**Description**
I translated the remaining English text in How-to-use-post-processing.html into Japanese.
",
29677,2024-10-17T06:18:38Z,2024-10-19T09:50:21Z,gkjohnson,2,2,8,30,18,2,1,[],183.0,0,616263.0,0,0,0,0,5496231.645767,,0,8,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.8 <br> **171.12** | 690.77 <br> **171.12** | -36 B <br> **-3 B** |
| WebGPU | 816.43 <br> **220.08** | 816.39 <br> **220.05** | -44 B <br> **-22 B** |
| WebGPU Nodes | 815.94 <br> **219.95** | 815.9 <br> **219.92** | -44 B <br> **-22 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.45 <br> **111.9** | 463.41 <br> **111.89** | -34 B <br> **-3 B** |
| WebGPU | 538.61 <br> **145.41** | 538.57 <br> **145.38** | -42 B <br> **-25 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.69 <br> **135.26** | -42 B <br> **-17 B** | To better reflect the change, we should update example code that uses nearest or linear filtering without requiring mipmaps. E.g.: `webgl_materials_texture_filters`.

Looking at this specific example, the textures `texturePainting`, `texturePainting2` and `textureCanvas2` should now set `generateMipmaps` to `false`. 

`WebGPURenderer` must also be updated in this PR. The relevant line is:

https://github.com/mrdoob/three.js/blob/1360b249b6fab26c92c2e467f57368faa69fd01b/src/renderers/common/Textures.js#L340",,"Fixed #18861

**Description**

Change the behavior of Texture mipmap generation to always respect the `generateMipmaps` flag. Previously mipmaps would only be generated when ""minFilter"" and ""magFilter"" required mip maps, as well, but with default support for [textureLod](https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureLod.xhtml) in WebGL2 and [textureSampleLevel](https://www.w3.org/TR/WGSL/#texturesamplelevel) in WebGPU, filtering is no longer the only way to use mipmaps.

This change will mean that mipmaps will be generated for all non-data textures by default; even when users set filtering to use `NEAREST`. This will potentially result in higher memory usage and a (small?) performance cost even if they're not used.","Including `texture.generateMipmaps` here allows us to simplify the following line:

https://github.com/mrdoob/three.js/blob/20ce0ce14f2138d7b5c9825b8f4a4ad6e9fbfe31/src/renderers/common/Bindings.js#L180

`texture.generateMipmaps === true && ` can be removed. Done!"
29724,2024-10-22T15:22:53Z,2024-10-22T15:48:46Z,sunag,2,0,1,16,1,0,0,[],190.0,0,131156.0,0,0,0,0,5516683.937697,,0,1,1,False,"['github-actions[bot]', 'Spiri0']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.88 <br> **171.51** | 692.88 <br> **171.51** | +0 B <br> **+0 B** |
| WebGPU | 818.62 <br> **220.76** | 818.62 <br> **220.76** | -1 B <br> **+0 B** |
| WebGPU Nodes | 818.13 <br> **220.62** | 818.13 <br> **220.62** | -1 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.09 <br> **112.28** | 465.09 <br> **112.28** | +0 B <br> **+0 B** |
| WebGPU | 539.55 <br> **145.72** | 539.55 <br> **145.72** | -1 B <br> **+0 B** |
| WebGPU Nodes | 495.55 <br> **135.53** | 495.55 <br> **135.53** | -1 B <br> **+0 B** | I tried to install an extension for vec4 but I have to look at it again because something is wrong: https://github.com/mrdoob/three.js/pull/29739",,"Related issue: https://github.com/mrdoob/three.js/issues/29720

**Description**

 Ignore convertion of unknown types.",
29738,2024-10-23T23:39:08Z,2024-10-24T00:53:29Z,linbingquan,0,0,1,2,1,0,0,[],,0,8296.0,0,0,0,0,5523370.313149,,0,1,1,False,[],,,"Related PR: https://github.com/mrdoob/three.js/pull/29710

**Description**

use `copyTextureToTexture`.",
29733,2024-10-23T14:41:03Z,2024-10-23T16:48:07Z,linbingquan,1,0,1,10,1,0,0,[],185.0,0,40573.0,0,0,0,0,5523378.353342,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.57 <br> **171.41** | 691.57 <br> **171.41** | +0 B <br> **+0 B** |
| WebGPU | 818.68 <br> **220.78** | 818.64 <br> **220.78** | -44 B <br> **-1 B** |
| WebGPU Nodes | 818.19 <br> **220.64** | 818.15 <br> **220.64** | -44 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.72 <br> **112.16** | 463.72 <br> **112.16** | +0 B <br> **+0 B** |
| WebGPU | 539.55 <br> **145.72** | 539.51 <br> **145.72** | -44 B <br> **-5 B** |
| WebGPU Nodes | 495.55 <br> **135.53** | 495.51 <br> **135.53** | -44 B <br> **-3 B** |",,"Related issue: #XXXX

Reduce the compression packing volume.

**Description**

```js
{
  // before
  getPreviousTextureNode(e=""output""){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),this._previousTextureNodes[e]=t=vp(new LN(this,e,!0)),this._previousTextureNodes[e].updateTexture()),t}

  // after
  getPreviousTextureNode(e=""output""){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=vp(new VN(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}
}
```
",
29737,2024-10-23T22:41:59Z,2024-10-23T22:48:00Z,sunag,1,0,1,37,1,0,0,[],177.0,0,363.0,0,0,0,0,5534732.699244,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.57 <br> **171.41** | 691.57 <br> **171.41** | +0 B <br> **+0 B** |
| WebGPU | 819.03 <br> **220.97** | 818.87 <br> **220.85** | -154 B <br> **-123 B** |
| WebGPU Nodes | 818.54 <br> **220.8** | 818.38 <br> **220.72** | -154 B <br> **-83 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.72 <br> **112.16** | 463.72 <br> **112.16** | +0 B <br> **+0 B** |
| WebGPU | 539.9 <br> **145.85** | 539.75 <br> **145.78** | -154 B <br> **-66 B** |
| WebGPU Nodes | 495.9 <br> **135.65** | 495.74 <br> **135.6** | -154 B <br> **-47 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29735

**Description**

Use `RenderContext` width and height.",
29735,2024-10-23T16:44:59Z,2024-10-23T17:10:46Z,sunag,1,0,1,47,1,0,0,[],189.0,0,1550.0,0,0,0,0,5554967.107379,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 691.57 <br> **171.41** | 691.57 <br> **171.41** | +0 B <br> **+0 B** |
| WebGPU | 818.68 <br> **220.78** | 819.07 <br> **220.99** | +390 B <br> **+216 B** |
| WebGPU Nodes | 818.19 <br> **220.64** | 818.58 <br> **220.8** | +390 B <br> **+158 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.72 <br> **112.16** | 463.72 <br> **112.16** | +0 B <br> **+0 B** |
| WebGPU | 539.55 <br> **145.72** | 539.94 <br> **145.85** | +390 B <br> **+134 B** |
| WebGPU Nodes | 495.55 <br> **135.53** | 495.94 <br> **135.65** | +390 B <br> **+119 B** |",,"**Description**

It's possible notice when we resize the window in `webgpu_loader_gltf_dispersion` example.",
29728,2024-10-23T02:16:05Z,2024-10-23T08:36:27Z,gkjohnson,3,0,1,4,1,1,1,[],174.0,0,30381.0,0,0,0,0,5578270.25031,,0,1,1,False,"['github-actions[bot]', 'linbingquan', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.88 <br> **171.51** | 692.9 <br> **171.53** | +20 B <br> **+10 B** |
| WebGPU | 818.62 <br> **220.76** | 818.64 <br> **220.77** | +20 B <br> **+12 B** |
| WebGPU Nodes | 818.13 <br> **220.62** | 818.15 <br> **220.64** | +20 B <br> **+12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.09 <br> **112.28** | 465.09 <br> **112.28** | +0 B <br> **+0 B** |
| WebGPU | 539.55 <br> **145.72** | 539.55 <br> **145.72** | +0 B <br> **+0 B** |
| WebGPU Nodes | 495.55 <br> **135.53** | 495.55 <br> **135.53** | +0 B <br> **+0 B** | Do we need to release `0.169.1` IMO, this is no critical issue so this can wait until next week.",,"Fixed #29721

**Description**

Check for whether the triangles connect to the converging point before merging triangles.

**Top Pinch**

| Before | After |
|---|---|
| <img width=""250"" alt=""image"" src=""https://github.com/user-attachments/assets/998416aa-6b84-463a-9831-f77e0fb03bba""> | <img width=""250"" alt=""image"" src=""https://github.com/user-attachments/assets/c24bfb19-4b84-4a78-9c04-30b5e6ab55ed""> |

**Bottom Pinch**

| Before | After |
|---|---|
| <img width=""250"" alt=""image"" src=""https://github.com/user-attachments/assets/58b5bece-df71-4e2c-9a84-c11e403a21dc""> | <img width=""250"" alt=""image"" src=""https://github.com/user-attachments/assets/c43de20e-b8f6-4f98-82b9-1a11f84b67ca""> |
",
29698,2024-10-19T10:58:15Z,2024-10-23T10:10:22Z,Mugen87,8,0,2,12,4,0,0,[],70164.0,0,343028.0,0,0,0,0,5579893.539935,,0,2,1,False,"['Makio64', 'takahirox', 'Mugen87']","That's sad, but I can understand the decision. Due to untransparent MMD specification that only rare people would know, a lot of custom code, and the need of external library, it would be hard to maintain to manage MMD stuffs in the official Three.js repo especially in the phase of developing new core modules, WebGPURenderer and related ones. Third-party repo would be more appropriate place to manage them.

I'm thinking of opening an repo for Three.js MMD stuffs (financial support is welcome, Three.js MMD users!). 

> When done, the examples can be added back as external ones (meaning they include MMD modules from a different repository via jsdelivr).

That sounds awesome. I will let you know when ready.

One request, if MMD stuffs are not immediate blockers, would you mind displaying deprecating messages with the link to the new repo for existing Three.js MMD users in a next few releases and then removing MMD modules? That sounds good. If you share the link to the new repository, I'll rewrite the PR and implement deprecating warnings first. 

The usual deprecating cycle of 10 releases is too long, imo. Removing the modules at the end of the year should be sufficient so developers have two releases to detect the deprecation warning and move to the new repository. Would that be okay for you? Would be nice to add a section in the doc with addons list and the external links 🔗  > The usual deprecating cycle of 10 releases is too long, imo

I feel the same, too. 2 or 3 cycles would be long enough. I will let you know when I create a repo soon. Likely when will r170 be? I hope I can create a repo hopefully that is ready to use by then. October 30. @takahirox Actually the external repository hasn't been fully ready until October 30. A simple link is sufficient for the beginning so developers know where to look for the alternative. Still brand new, but this is the repo I would add Three.js MMD stuffs. https://github.com/takahirox/three-mmd-loader",,"Related issue: -

**Description**

The development of `WebGPURenderer` adds a lot of new code to the repository. It was previously mentioned in #29171 that we should revisit what we currently support as addons and example code. Certain addons like `SDFGeometryGenerator`, `TiltLoader` or `PackedPhongMaterial` have already been removed during this process.

The PR deprecates all modules which are related to the MMD (MikuMikuDance) format. This includes `MMDLoader`, `MMDExporter`, `MMDAnimationHelper` and `MMDPhysics`.

@takahirox put a lot of effort in developing these modules but unfortunately no collaborator is even remotely familiar with MMD. Given the huge and complex code base, the requirement for a custom toon material, the need for a separate parser (`libs/mmdparser.module.js`) and MMD's very specific character, I think the MMD suite should be moved to a third-party repository. 

When done, the examples can be added back as external ones (meaning they include MMD modules from a different repository via `jsdelivr`).

Edit: New third-party repository: https://github.com/takahirox/three-mmd-loader
",
29731,2024-10-23T04:19:57Z,2024-10-23T08:35:09Z,seopyoon,0,0,1,2,1,0,0,[],,0,15324.0,0,0,0,0,5585896.997129,,0,1,1,False,[],,,"**Description**

The translation of `uuid` in Korean says that it **cannot** be edited. 
This may be misleading that even when you assign a value it gets ignored, when it actually can be set.
The fix changes the translation so it reads you **should not** edit the field.
",
29723,2024-10-22T14:23:16Z,2024-10-22T14:41:02Z,sunag,0,0,2,8,3,0,0,[],,0,1069.0,0,0,0,0,5650353.40523,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29642#issuecomment-2428651367

**Description**

Adding light intensity
",
29710,2024-10-21T05:20:23Z,2024-10-23T09:30:58Z,gkjohnson,3,5,11,237,3,2,1,[],180.0,0,190422.0,0,0,0,0,5579973.441875,,0,11,1,False,"['github-actions[bot]', 'gkjohnson', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.88 <br> **171.51** | 691.55 <br> **171.4** | -1.32 kB <br> **-115 B** |
| WebGPU | 818.62 <br> **220.76** | 818.66 <br> **220.77** | +43 B <br> **+8 B** |
| WebGPU Nodes | 818.13 <br> **220.62** | 818.17 <br> **220.63** | +43 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.09 <br> **112.28** | 463.72 <br> **112.16** | -1.37 kB <br> **-118 B** |
| WebGPU | 539.55 <br> **145.72** | 539.55 <br> **145.72** | +0 B <br> **+0 B** |
| WebGPU Nodes | 495.55 <br> **135.53** | 495.55 <br> **135.53** | +0 B <br> **+0 B** | 🎉 

And I'll ask here just in case - but are you aware of any way to copy texture mip map data from a src texture to a dst texture mip map? A la the [Stack overflow question](https://stackoverflow.com/questions/79109103/how-to-copy-specific-mip-map-level-from-a-source-texture-to-a-specific-mip-map-l)? It's not clear that it's possible from the WebGL APIs... No, sorry :(.",,"Related issue: #29688

**Description**

This PR addresses allows for passing in 2d _or_ 3d textures into the src or destination arguments of `copyTextureToTexture3D`. In the case of a 2d it is treated effectively as a single-layer 3d texture so individual layers can be copied in and out of 3d textures.

Ultimately this means that you can pass two 2d textures into the function to copy data between them, rendering the `copyTextureToTexture` function for 2d targets redundant.

--

I'm still working out some question I have about copying mipmaps but I think that's separate.

_edit_ I've created a stack overflow question [here](https://stackoverflow.com/questions/79109103/how-to-copy-specific-mip-map-level-from-a-source-texture-to-a-specific-mip-map-l) asking about how to copy a mip map from a source texture.","If both methods essentially share the same implementation, why not having just a single one by renaming `copyTextureToTexture3D()` to `copyTextureToTexture()`? Sounds good - I've updated the docs and deprecated `copyTextureToTexture3D`.

I also added a line to BatchedMesh that I noticed got lost when splitting #29687 into multiple PRs. This function can technically take Box2 and Vector2 as arguments, as well. Is there a typical way to signify that here? I think we separated multiple types with a `|` so far.

E.g. https://threejs.org/docs/index.html#examples/en/exporters/DRACOExporter.parse Hm it's a bit verbose looking and not super easy to read but I supposed it can be addressed later -

<img width=""912"" alt=""image"" src=""https://github.com/user-attachments/assets/0d13cc1c-93d2-458c-8ccc-8499cd5100e9"">"
29718,2024-10-21T15:45:57Z,2024-10-21T17:36:40Z,sunag,5,0,2,96,2,0,0,[],191.0,0,81838.0,0,0,0,0,5651024.802481,,0,2,1,False,"['github-actions[bot]', 'hybridherbst', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.71 <br> **171.44** | +0 B <br> **+0 B** |
| WebGPU | 817.93 <br> **220.59** | 818.62 <br> **220.76** | +692 B <br> **+171 B** |
| WebGPU Nodes | 817.44 <br> **220.46** | 818.13 <br> **220.62** | +692 B <br> **+167 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 464.93 <br> **112.2** | +0 B <br> **+0 B** |
| WebGPU | 538.86 <br> **145.56** | 539.55 <br> **145.72** | +692 B <br> **+166 B** |
| WebGPU Nodes | 494.86 <br> **135.37** | 495.55 <br> **135.53** | +692 B <br> **+163 B** | @sunag a bit of a tangent here, but while you're in this part of the codebase: would it be possible to render transmissive objects that have transmission=1 and ior=1 with a regular transparent pass? This would improve performance on weaker devices (e.g. Quest 2/3) for the most typical case of ""clear glass"", which currently often needs to be emulated with opacity, since transmission always introduces a fullscreen pass at a big performance penalty. I think we can have barriers with normalmaps and other settings that influence the color in transmission and other validations that will have to be tested each frame, and animation, I would recommend creating a routine to replace the material if possible?

The new architecture does not do a full-screen pass, but a copy of the current buffer to a texture, which is much faster regardless of the backend used.

One possible next step for performance would be to use hashed blur and avoid generating mipmaps. Thanks!

> a copy of the current buffer to a texture, which is much faster regardless of the backend used

I'm not sure this holds in practice on tiled GPUs – At least in my understanding, ""no copy"" will always be faster than ""screen-space copy"".

> replace the material if possible

With what? I'm not aware of a good way to emulate how transmission is supposed to look without using transmission... Transmission without the framebuffer texture is not transmission anymore, I think your idea was to emulate it with opacity?",,"Related issue: https://github.com/mrdoob/three.js/pull/29705

**Description**

Renders all back-side first in case of materials with transmission and double-side. This would only be noticeable with many objects with this setup in the scene.

WebGPURenderer's approach, unlike WebGLRenderer, does not render opaque objects twice, and keeps the sequence of transparent materials with transmission in the same sort, which is also an improvement.

1. Render opaques
2. Render back-side transmission materials
3. Render all transparents materials, for transmission only the front-side
",
29722,2024-10-22T14:01:44Z,2024-10-22T14:08:34Z,sunag,0,0,1,4,1,0,0,[],,0,586.0,0,0,0,0,5652130.132581,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29701

**Description**

I forgot to upload some commits.
",
29700,2024-10-20T02:56:20Z,2024-10-22T12:12:56Z,snowiewdev,1,1,2,76,4,1,1,[],136452.0,0,206196.0,0,0,0,0,5659244.408217,,0,2,1,False,['snowiewdev'],"@Mugen87 Thanks for the quick review, just pushed the fix on the image paths",,"Related issue: N/A

**Description**
--
- Added `copy button` to non-inline code snippets in the `Docs` pages, so that viewers can copy snippets easier as they go through the documentation
- This update involved adding 2 `svg` icons (`copy` and `tick` icons) that are from Iconify, in which both are allowed for commercial use and no attribution required, so it should be good to use
  - copy icon link: https://icon-sets.iconify.design/uil/copy/
  - tick icon link: https://icon-sets.iconify.design/charm/tick/
- Used `tick` icon to alert users on copy successful state so no localization is required 

**Feature Screenshots**
--
Light Mode:

![image](https://github.com/user-attachments/assets/3a0fee99-12b4-49ef-a70e-f0f939661a0c)

Dark Mode:

![image](https://github.com/user-attachments/assets/ac8c7548-6f1e-4681-af16-bdf7dd0d22a9)

Video Demo:
https://drive.google.com/file/d/1fMJ6SR6oGHHYmZ0OdtRYgRsNG2M0k9lu/view?usp=sharing
","Can you write these URLs like so:
```
background-image: url('../files/ic_copy_grey_24dp.svg');
```
That makes them more compatible with different hosting setups like githack."
21558,2021-04-01T08:52:04Z,2022-07-07T04:53:36Z,Mugen87,18,7,8,880,11,2,0,['WebGL2'],16418977.0,0,112322330.0,0,0,0,0,5668967.96757,,0,8,1,False,"['MajorSquirrelTVS', 'unphased', 'RenaudRohlinger', 'marcofugaro', 'CodyJasonBennett', 'mrdoob', 'snagy', 'erichlof', 'robertlong', 'Mugen87']","@Mugen87 Any chance this awesome feature will be added in a future release ? @Mugen87 Should we give it a go this month? @mrdoob Yes, I would give this a try so devs can start using UBOs with their custom materials. The PR should be a safe change since the additions should no affect existing apps.

We should just keep in mind that `UniformsGroup` will be a WebGL thing. With `WebGPURenderer` and node material, we don't need it since UBOs are used internally by default. BTW: I'm adding documentation if the PR is going to be merged. Hello @Mugen87  ,
Thank you for adding this! Is this feature available to the current WebGL2 renderer as of yet? 

I am needing this feature because I want to send to my fragment shader 64 4x4 invMatrices as well as a top level dynamic BVH that is packed into 256 vec4's. The 64 3D game objects that these sets of uniforms belong to are constantly moving every frame, so writing to and reading from data textures (like I did for static path traced scenes) is too slow. 

Also, writing 64 4x4 matrices and 256 vec4's as normal old-style  individual uniforms works on my laptop, but fails on mobile because there is a lower limit of how many uniforms you can send. So I end up blowing out my uniform slots on my phone for instance.

This new UBO feature sounds like the perfect solution for my uniforms requirements! Thanks again for working on this. > Thank you for adding this! Is this feature available to the current WebGL2 renderer as of yet?

No sorry. Since the PR is not merged it's not yet possible to use UBOs with custom materials. @Mugen87 
Ok thank you for the quick reply. I'll keep an eye on this PR. Do you think it will be in the next revision number of three.js? Ha, more conflicts UBO is a great feature. It would be awesome to see this one merged! 😊  Is this mainly blocked on documentation at this point? How do you feel about this implementation? What needs to get done before this gets merged?  Is there anything we can help with? Yup. Been waiting a while for this. Pretty sure we have the interest to get this done. We need details on what's holding it up. Is the design alright @mrdoob ? Anything you would like changed? Sorry for the delay. Was waiting for things to get a bit under control 😅 Thanks! Nit: on the topic of documentation, grammatically I believe this would be `uniformGroups` rather than `uniformsGroups`.

Edit: I see this is more consistent with other utils (https://github.com/mrdoob/three.js/pull/15562#issuecomment-487616228). Hi, it seems like this feature exists, but is totally undocumented. Is that expected?

I had a question about usage. I'm working on something that may benefit from UBOs, but I don't really have more than around 384 8 bit components I need my shader to be able to reference. This would appear to still fit in the 1024~4096 or so components that I could expect WebGL2 to give me on most devices, so I most likely do not need to transition to using UBOs for such a need until I have 10x or more of this kind of data. Since I do not update this data except periodically there should be no performance benefit in switching to uniform buffers from uniform arrays. Please use one of the links below for help / support:

- [questions](https://stackoverflow.com/questions/tagged/three.js)
- [discord](https://discord.gg/56GBJwAnUS)
- [forum](https://discourse.threejs.org)  > Hi, it seems like this feature exists, but is totally undocumented. Is that expected?

@unphased The UBO support in `WebGLRenderer` is considered as experimental. That's why the built-in materials don't use UBOs and there is no documentation. This will be different in `WebGPURenderer` where UBOs are a more integral part of the renderer.",,"Related issue: Fixed #13700

**Description**

Successor of #15562.","@Mugen87 I had an exception on this line using a package which had an old [TypeScript types of three.js (134)
](https://www.npmjs.com/package/@types/three/v/0.134.0) I'm not sure how it works but seems like something along the way stripped this member from the RawSahderMaterial instance (internally in package this member was initialized correctly to an `[]`)
`uniformsGroups` didn't exist on the instance at all, so the `groups.length` was the actual exception
So I feel like there's a backwards compatibility issue here but I can't create a JSFiddle with an example That is strange since UBO support was added with `r143` and all related classes and properties were added with this release.  I'll clarify, I use threejs 143 (no typescript in the project)
I import a package that's using 134+ts
The package somehow creates ShaderMaterials without this property
So the package is not ahead of my project - which I think should be supported
I'll try to work tomorrow on a jsfiddle, but I'm really not sure how I'll import 2 versions of threejs :) > but I'm really not sure how I'll import 2 versions of threejs :)

That would be an invalid workflow anyway. Try using the types from https://github.com/three-types/three-ts-types. They have a `r143` release. I patched the package on our private copy, so I don't have the issue anymore (doing what you mentioned)
But I believe that given 2 packages **A** and **B** where:
- **A** uses typescript and is using three.js r134 (or anything below 143), and if creating objects to be rendered by **B**.
- **B** uses three.js r143 or up (and is not using typescript? not sure it matters), **B** is running the main rendering loop and is responsible to create the canvas and renderer etc.
**A** will produce objects which are illegal in **B** (since this field doesn't exist in r134).
I have very little knowledge on how A and B are interacting with one another, might be a misconfiguration on that particular package and how it's imported. Seems like I'm wrong, this example shows the same scenario:
https://codesandbox.io/s/pix4d-three-potree-loader-example-forked-s6i6i1?file=/package.json

[The imported package uses r139](https://github.com/pnext/three-loader/blob/master/package.json#L30)
But the example uses r143 without a problem It _might_ work to combine `three.js` from different releases but officially it is not supported. If library A creates an instance of `THREE.Mesh` from `r100` there is absolutely no guarantee that application B using `r143` can process it. Let's be honest, it's quite unrealistic to support such a scenario."
23165,2022-01-07T01:04:52Z,2022-01-19T00:03:18Z,sunag,11,0,14,2823,39,0,0,[],505.0,0,88071688.0,0,0,0,0,5669242.176495,,0,14,1,False,"['looeee', 'jo-chemla', 'mrdoob', 'sunag']","It is too an step to we can be a `JSNodeBuilder` to create CPU codes in JS using `NodeEditor`. I'm having trouble adding any nodes - when I type a node then click on the node name nothing happens.  Hmm.. I will fix this, you can press enter too Great, seems to be working again now. This is a lot of fun to play with :) 

Is there a reason why Color doesn't accept inputs? I wanted to try hooking: timer -> sin -> color.r, for example. 
 @looeee Still I need to add `JoinNode` and `SplitNode` for `NodeEditor`. I must add this next week I guess we should rename this from `webgl_materials_nodes_playground` to `webgl_nodes_playground` at this point? 😅 @looeee I add `SplitNode` and `JoinNode` to `Editor`.

![image](https://user-images.githubusercontent.com/502810/149828036-c724c150-6440-4236-8d1b-17c6f18e2b5f.png)
 Thanks! Quick note: I often stumble on this issue and then spend some time trying to find the url of threejs node-material editor, which isn't really advertised. It is called playground and is available here, hope it is useful to anyone including my future self!

https://threejs.org/playground/  The link is back 👋 https://github.com/mrdoob/three.js/commit/d3646a4678109befe8a9b22e55a82eeb788363f9 Thanks, did not know it was there in the first place!",,"### Introduction

After many attempts to create an API to define a `NodeMaterial` from editor to some specific `Mesh` I created a system so that any Three.js object could be used as `Node/*Editor` and  that `NodeEditor` could recognize and handle conflicts through the API.

This way we can bring all the native elements of Three.js: `Geometry`, `Camera`, `Animations`, etc

https://raw.githack.com/sunag/three.js/dev-scene-apply/examples/?q=playground#webgl_materials_nodes_playground

![image](https://user-images.githubusercontent.com/502810/148471627-3ca60aa8-3565-42fb-83e1-65a367a402a3.png)

### Errors viewer

![image](https://user-images.githubusercontent.com/502810/148473065-f2373619-8d36-48d0-b2d8-fcb6a3d068d5.png)

### Cable color by Node type

![image](https://user-images.githubusercontent.com/502810/148473195-cc3a9097-5bdf-4332-8b8c-657cb1e4d940.png)

### ContextMenu opens on Top or Right

If it detects that it has reached the edge of the screen.

![image](https://user-images.githubusercontent.com/502810/148473336-dc1b037a-2c80-4f6d-b7f7-0225fc00998e.png)

### Node creator input / Search

Use this tool to create a new `Node` or to bring a `Mesh` from `Three.js` `Scene` to `NodeEditor`

![image](https://user-images.githubusercontent.com/502810/148473518-d3501a88-9c72-4465-8850-98bbeb7f13fc.png)

<!-- Remove the line below if is not relevant -->

This contribution is funded by [Google via Igalia](https://igalia.com).
",
29709,2024-10-21T05:19:41Z,2024-10-21T13:59:14Z,linbingquan,1,0,1,4,1,1,1,[],184.0,0,74137.0,0,0,0,0,5696304.269982,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.71 <br> **171.44** | +0 B <br> **+0 B** |
| WebGPU | 817.93 <br> **220.59** | 817.93 <br> **220.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 817.44 <br> **220.46** | 817.44 <br> **220.46** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 464.93 <br> **112.2** | +0 B <br> **+0 B** |
| WebGPU | 538.86 <br> **145.56** | 538.86 <br> **145.56** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.86 <br> **135.37** | 494.86 <br> **135.37** | +0 B <br> **+0 B** |",,"Related issue: #XXXX

**Description**

Syntax highlight for `wgsl` template.

![image](https://github.com/user-attachments/assets/fad2f687-b0b0-4f0f-8560-fc1ecb3c1b0b)

",
29715,2024-10-21T12:36:45Z,2024-10-21T15:53:29Z,Mugen87,0,4,6,345,6,2,0,[],,0,31130.0,0,0,0,0,5713088.916184,,0,6,1,False,[],,,"Related issue: -

**Description**

This PR adds an alternative way to add lens flares to a scene. 

The existing `Lensflare` and `LensflareMesh` modules use chained sprites to implement a basic flare effect. This is great but a more advanced approach can be achieved by using post processing. This particular implementation uses the output of bloom to generate flares in the scene. The coupling of bloom and lens flare produces a more natural and plausible look.

There are various implementations on the web for implementing FX lens flares. This one uses a vary basic approach based on Chapman's work (linked in the code). The result is already nice but hopefully `LensflareNode` can be improved/enhanced over time. 
","I would like to know if we can adopt a standard in the properties of post-processing classes. I think that adding `uniforms` and then modifying them using `flarePass.threshold.value` can be confusing for a node approach.

I think the approach used in `OutlineNode` should be used as a template.

This way we won't have any confusion if a user wants to replace the uniform node with a procedural value and we won't use uniform as default values ​​any more, just constants, which will help performance. Updated to the new approach! I think we can use `ghostTint` externally?

```js
const flare = flarePass.mul( color( 0xffffff ) )
```

 It would be good to keep it internally for potential upcoming features. The tint is then processed in a way that produces different results than modulating the entire pass."
29719,2024-10-21T15:59:57Z,2024-10-21T16:12:18Z,sunag,0,0,1,26,2,1,1,[],,0,744.0,0,0,0,0,5731283.08629,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29715#discussion_r1808995825

**Description**

Added `*Node` suffix. Following the pattern of other nodes.
Added `nodeObject()` in case of use primitive values instead of node.

/cc @Mugen87 ",
29383,2024-09-10T12:34:53Z,2024-09-11T02:57:30Z,s-rigaud,3,4,1,18,1,2,0,[],211.0,0,3549883.0,0,0,0,0,5736848.422179,,0,1,1,False,"['github-actions[bot]', 's-rigaud', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.41 <br> **221.63** | 826.4 <br> **221.63** | -6 B <br> **+8 B** |
| WebGPU Nodes | 825.99 <br> **221.54** | 825.98 <br> **221.54** | -6 B <br> **+7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.5 <br> **141.64** | 525.49 <br> **141.66** | -6 B <br> **+11 B** |
| WebGPU Nodes | 482.15 <br> **131.46** | 482.15 <br> **131.47** | -6 B <br> **+11 B** | In general the PR is okay but I hope it is not taken as an occasion to migrate all code to this style. The previous syntax is totally fine and there is no reason to move everything to destructuring. I had to debug a Three project and I ended up to this file. My IDE highlited some minor changes that can be made via the [sourcery](https://sourcery.ai/) plugin so I figured out I might just do a quick PR just to slightly improve the code quality, I don't expect to do more PRs like this in the future.",,Small syntax improvements,We use canonical for loops for performance reasons so there is no need to migrate such a loop to `for of`. Good to know 👍 Should `_renderBundles` use canonical then ? I think you can also add `opaqueObjects` and `transparentObjects`.
29716,2024-10-21T13:14:13Z,2024-10-21T13:19:16Z,s-rigaud,0,0,1,264,46,1,1,[],,0,5122.0,0,0,0,0,5736850.757736,,0,1,1,False,[],,,"I used VSCode `Code Spell Checker` extension and some reading to:

* Fix some typos in `en` doc
* Fix some typos in `fr` doc
* Fix link for https://threejs.org/docs/#api/en/core/Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE",
29717,2024-10-21T14:28:21Z,2024-10-21T14:35:44Z,s-rigaud,1,0,1,2,1,1,1,[],440.0,0,643.0,0,0,0,0,5736881.921645,,0,1,1,False,['Mugen87'],The half float data texture is only required for (older) devices which do not support linear filtering with floating point textures. ,,"It seems to be a simple copy paste error to me.

 I tried the change locally on `webgpu_lights_rectarealight` but I couldn't identify a significal change. Maybe a new screenshot for the example should be generated but I'm not sure.
",
29694,2024-10-19T02:30:15Z,2024-10-20T23:40:33Z,donmccurdy,2,3,4,106,6,3,0,[],189.0,0,211980.0,0,0,0,0,5741431.362471,,0,4,1,False,"['github-actions[bot]', 'donmccurdy']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.71 <br> **171.44** | +0 B <br> **+0 B** |
| WebGPU | 818.16 <br> **220.56** | 817.89 <br> **220.55** | -273 B <br> **-5 B** |
| WebGPU Nodes | 817.67 <br> **220.43** | 817.4 <br> **220.42** | -273 B <br> **-6 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 464.93 <br> **112.2** | +0 B <br> **+0 B** |
| WebGPU | 539.13 <br> **145.56** | 538.83 <br> **145.53** | -305 B <br> **-35 B** |
| WebGPU Nodes | 495.16 <br> **135.43** | 494.86 <br> **135.37** | -305 B <br> **-59 B** | ~~Hm, I'm not sure what to do with this circular dependency:~~

- src/nodes/tsl/TSLBase.js
    - src/nodes/display/ColorSpaceNode.js
        - src/nodes/display/ColorSpaceFunctions.js
            - src/nodes/tsl/TSLBase.js

~~I'm tempted to move the EOTF and OETF implementations into ColorSpaceNode.js. @sunag do you have a preference?~~

Resolved, thanks @sunag!",,"Adds support to 'ColorSpaceNode' (and related chaining helpers) for any color space registered on THREE.ColorManagement. Adds a generic X-to-Y ~~chaining~~ TSL node:

```javascript
import {
  DisplayP3ColorSpace,
  DisplayP3ColorSpaceImpl,
  LinearDisplayP3ColorSpace,
  LinearDisplayP3ColorSpaceImpl
} from 'three/addons/math/ColorSpaces.js';
import { convertColorSpace } from 'three/tsl';

THREE.ColorManagement.define( {
  [ DisplayP3ColorSpace ]: DisplayP3ColorSpaceImpl,
  [ LinearDisplayP3ColorSpace ]: LinearDisplayP3ColorSpaceImpl,
} );

const color1 = convertColorSpace( color2, LinearDisplayP3ColorSpace, DisplayP3ColorSpace );
```

Related:

- #29450
- #29573
- #26479

/cc @WestLangley @sunag ","I have plans to have the color space information present in the flow of code, that way we will always know what the color space source of the current value. I was thinking about adding a `node.toColorSpace( targetColorSpace )` function in the method chaining.

Maybe we could reverse the order to:

```js
addMethodChaining( 'toColorSpace', ( node, targetColorSpace, sourceColorSpace = null  ) => convertColorSpace( node, sourceColorSpace, targetColorSpace ) );
```

Thinking about the future... Or maybe just remove this method from chaning for now? >I have plans to have the color space information present in the flow of code ... adding a `node.toColorSpace( targetColorSpace `

That sounds like a good idea to me.

And in addition, consider adding `.colorSpace` as a property of the `Color` class.
 Both really interesting ideas! I'm not sure of the implications, but this would be good to explore. For now, I've just removed `convertColorSpace` from chaining since it would be a bit confusing to change that chaining API later."
29695,2024-10-19T03:27:37Z,2024-10-19T08:51:37Z,gkjohnson,4,0,4,181,1,1,1,[],190.0,0,185683.0,0,0,0,0,5764288.083508,,0,4,1,False,"['github-actions[bot]', 'gkjohnson', 'Makio64']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.9 <br> **171.07** | 691.23 <br> **171.12** | +331 B <br> **+53 B** |
| WebGPU | 816.55 <br> **220.03** | 816.88 <br> **220.05** | +331 B <br> **+21 B** |
| WebGPU Nodes | 816.06 <br> **219.9** | 816.39 <br> **219.92** | +331 B <br> **+21 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.45 <br> **111.9** | 463.45 <br> **111.9** | +0 B <br> **+0 B** |
| WebGPU | 538.64 <br> **145.42** | 538.64 <br> **145.42** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.75 <br> **135.28** | 494.75 <br> **135.28** | +0 B <br> **+0 B** | Thanks for cleaning ! 

Just there is something I don’t really understand in the tiles logic you re describing. In the games and editor I’m using batchmesh I have a pool of instance and I checkout/checkin instance, update the visibility/ set the correct geometryID and done. 
If the pool is empty I extend the pool and the batchedmesh.

This approach keep the code minimalist and easy and I though tiles system architecture would be the same?

I was wondering if this approach could make this class much more simple than dealing with range unused etc manually as you’re describing ? 3D Tiles streams geometry data in and out of memory as the camera moves since the whole set of data cannot be loaded at once. Inserting the newly loaded geometry and textures must be as fast as possible to keep the frame rate up. You also can't really know ahead of time how large all the tiles are in a general case, though we try to allocate a minimum amount of space ahead of time per tile assuming it will be easier to fit another tile there later, which is faster. Every tile geometry is also considered unique and no geometry is being rendered with multiple instances.

So when a new tile geometry is loaded we try to add it to the BatchedMesh with the quickest method possible. So that results in the fallback approach listed above - trying to find space if it exists, and then trying some more expensive approaches to make space (optimizing, expanding geometry in-place).

> I have a pool of instance and I checkout/checkin instance, update the visibility/ set the correct geometryID and done.
>
> If the pool is empty I extend the pool and the batchedmesh.

It's not clear from your description whether your delete geometry data from the batched mesh. If you're not then you're avoiding the hard part of the problem I'm describing. If you delete geometries (or are left with unused, undeleted geometry) there will be dead space left in the middle of the geometry buffers that BatchedMesh won't try to automatically use. If you don't optimize / repack those buffers or at least manually try to fit other geometry in that space then it's memory. Thanks for taking the time to explain your problematic ! Now your use case is much more clear and this PR totally makes sense!

Also you re right in my use case I just load all geometries once and then just play with the instances as the games have finite number of geometries ",,"Related issue: #29687

**Description**

Re-adds the remaining changes from #29687:

- Rename `drawInfo` to `instanceInfo` for clarity
- Rename local `count` variable to `multiDrawCount` in `onBeforeRender` for clarity
- Remove unneeded global variables
- Add `unusedVertexCount`, `unusedIndexCount`, and `instanceCount` variables so applications can have insight into whether a geometry can be added without errors being thrown.
- Fix copy-paste error.
- If a geometry has not been initialized then don't mark it as initialized in `setGeometrySize`.

With this PR the class publicly exposes everything needed in order to accommodate rendering 3d tiles with BatchedMesh, which requires quickly adding and removing tiles from the batched mesh. Specifically the approach requires:
- Checking if there are any unused ids that have enough space to fit the new tile (uses `getGeometryRangeAt`).
- If one does not exist then we just add the tile geometry if there's enough space (checking the `unused*Count` members).
- If there's not enough space then optimize the geometry.
- If there's still not enough space then expand the geometry.

Overall it works pretty well aside from some ArrayTexture hiccups which are in-progress.",
29699,2024-10-19T10:58:50Z,2024-10-20T00:36:33Z,gkjohnson,1,8,3,28,1,2,1,[],181.0,0,158378.0,0,0,0,0,5764520.227436,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.37 <br> **171.33** | 692.42 <br> **171.34** | +52 B <br> **+14 B** |
| WebGPU | 816.84 <br> **220.03** | 816.84 <br> **220.03** | +0 B <br> **+0 B** |
| WebGPU Nodes | 816.35 <br> **219.9** | 816.35 <br> **219.9** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **112.1** | 464.65 <br> **112.12** | +52 B <br> **+19 B** |
| WebGPU | 538.6 <br> **145.39** | 538.6 <br> **145.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.71 <br> **135.27** | 494.71 <br> **135.27** | +0 B <br> **+0 B** |",,"Related issue: #29612

**Description**

Adjust `copyTextureToTexture3D` to copy each layer between the two 3d textures individually since there is no WebGL method for copying a block of 3d data between textures for render targets.

Tested in my 3d tiles use case and the code is much simpler, now, and it works great. (see #29688)

--

The last piece of the puzzle is copying 2d textures into 3d texture layers along with their mipmaps.","If you completely remove the usage of `blitFramebuffer()`, the method does not support depth attachments anymore. That means the `srcTexture.isDepthTexture` should be removed and the documentation should be updated. Is it possible to have a depth buffer attachment for a 3d texture? I believe so. How would depth testing work otherwise? I guess I hadn't really considered the case where you'd be rendering to volume textures that way. I can add it back as an option.

To be clear it doesn't look like the previous code path can ever copy the depth buffer for a color render target in the 2d or 3d case:

```js
let mask = _gl.COLOR_BUFFER_BIT;

if ( srcTexture.isDepthTexture ) mask = _gl.DEPTH_BUFFER_BIT;
```

The depth component is only copied when `isDepthTexture` is on the src texture which will never be the case with normal render render targets. We also have no method for creating 3d depth textures. Is this the kind of logic we want instead?

```js
let mask = _gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT | _gl.STENCIL_BUFFER_BIT;

if ( srcTexture.isDepthTexture ) mask = _gl.DEPTH_BUFFER_BIT;
```

ie just copy all the attached buffers unless it's a depth texture? I feel we might as well just set all the bits anyway regardless of target type when using the blit path. > The depth component is only copied when isDepthTexture is on the src texture which will never be the case with normal render render targets.

We already use the following pattern and it works as expected:
```js
renderer.copyTextureToTexture( this.sampleRenderTarget.depthTexture, this.renderTarget.depthTexture );
```

I'm okay with keeping the PR as it is and revisit the issue when a developer requests it. For the normal `copyTextureToTexture()`, the support is critical though. I think I was confusing myself regarding the depth texture. I've added the same branching logic to choose blit vs copy in both 2d and 3d functions for consistency:

```js
if ( srcTexture.isDepthTexture ) {

	_gl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, _gl.DEPTH_BUFFER_BIT, _gl.NEAREST );

} else {

	_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, dstX, dstY, minX, minY, width, height );

}
```

Is the use of `copyTextureToTexture` for your use case tested in the E2E testing? Or is there an easy way I can test that this code path works for you? As long as the original blit is retained for the depth texture, I don't think something should break. Okay! In that case this should be ready if it looks good to you."
29692,2024-10-18T21:40:57Z,2024-10-19T12:40:32Z,Mugen87,0,5,3,3,1,3,1,[],,0,197943.0,0,0,0,0,5772828.46558,,0,3,1,False,[],,,"Fixed #29664.

**Description**

If `GLTFExporter` encounters a material which is no PBR material, it uses the same defaults for `metallicFactor` and `roughnessFactor` like `metalness` and `roughness` of `MeshStandardMaterial`.
","Minor, but the [default is `1`](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#_material_pbrmetallicroughness_metallicfactor), so we could omit `roughnessFactor` if we wanted more concise output. I've changed the value of `metallicFactor` to `1` so it matches the glTF spec.

What do you mean with ""omit roughnessFactor""?  Oops sorry, I don't mean to say that glTF's defaults are better than those you'd chosen. I agree metal=0,rough=1 is likely to be a better representation of phong and lambert materials for example. These glTF defaults were mainly chosen, AFAIK, so that exporters writing metal/rough textures would not be forced to also override the default factors, which isn't relevant to us here.

My only concern was that specifying default values explicitly is redundant, we could just write...

```javascript
materialDef.pbrMetallicRoughness.metallicFactor = 0; // default roughness is 1
```

... and nothing else. Understood! Sorry, [I reverted this](https://github.com/mrdoob/three.js/commit/48e6e2ee4e769013b911a079a433aecc2686d5b2). I feel like the redundant code is more clear.

"
29706,2024-10-20T18:32:32Z,2024-10-20T18:47:25Z,renovate[bot],0,0,1,6,1,0,0,[],,0,1225.0,0,0,0,0,5808052.955649,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `c36620d` -> `f779452` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMjAuMSIsInVwZGF0ZWRJblZlciI6IjM4LjEyMC4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29705,2024-10-20T18:10:14Z,2024-10-20T23:41:01Z,sunag,1,0,2,10,2,0,0,[],175.0,0,19851.0,0,0,0,0,5790764.982507,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.71 <br> **171.44** | +0 B <br> **+0 B** |
| WebGPU | 818.16 <br> **220.56** | 818.2 <br> **220.58** | +36 B <br> **+21 B** |
| WebGPU Nodes | 817.67 <br> **220.43** | 817.71 <br> **220.45** | +36 B <br> **+18 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 464.93 <br> **112.2** | +0 B <br> **+0 B** |
| WebGPU | 539.13 <br> **145.56** | 539.17 <br> **145.6** | +36 B <br> **+32 B** |
| WebGPU Nodes | 495.16 <br> **135.43** | 495.16 <br> **135.43** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/27880

**Description**

Adds an individual viewport texture to the back side of the objects. For many refraction objects in the scene with `DoubleSide` with `transmission` will need to modify the `RenderList` this may impact the performance a bit, which is why I am leaving it for another PR.

`webgpu_materials_transmission`
| old | now |
| ------------- | ------------- | 
| ![image](https://github.com/user-attachments/assets/3a8a4ae8-cc6d-4bef-9b62-a5b47cae8ed1) |  ![image](https://github.com/user-attachments/assets/1563c2c9-b6d5-4926-a9a8-27396a1753e5) |  ",
29704,2024-10-20T10:29:05Z,2024-10-20T11:17:21Z,Mugen87,0,0,1,3,1,0,0,[],,0,2896.0,0,0,0,0,5835389.426537,,0,1,1,False,[],,,"Related issue: -

**Description**

Since auto-clear is enabled, there is not need for explicit `clear()` calls.
",
29696,2024-10-19T09:18:59Z,2024-10-20T08:01:49Z,Mugen87,1,0,4,42,2,0,0,[],449.0,0,81950.0,0,0,0,0,5846942.801438,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.71 <br> **171.44** | 692.71 <br> **171.44** | +0 B <br> **+0 B** |
| WebGPU | 817.37 <br> **220.29** | 817.37 <br> **220.29** | +0 B <br> **+0 B** |
| WebGPU Nodes | 816.88 <br> **220.17** | 816.88 <br> **220.17** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.93 <br> **112.2** | 464.93 <br> **112.2** | +0 B <br> **+0 B** |
| WebGPU | 539.13 <br> **145.56** | 539.13 <br> **145.56** | +0 B <br> **+0 B** |
| WebGPU Nodes | 495.16 <br> **135.43** | 495.16 <br> **135.43** | +0 B <br> **+0 B** |",,"Related issue: #29452

**Description**

The curve modifier examples show that `BufferGeometry.setFromPoints()` might be used on existing data. In this case, the method should not overwrite an existing buffer attribute but update the existing one.",
29615,2024-10-10T19:28:25Z,2024-10-10T21:20:20Z,sunag,2,0,4,95,8,0,0,[],181.0,0,817551.0,0,0,0,0,5852376.106728,,0,4,1,False,"['github-actions[bot]', 'Spiri0']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.92 <br> **170.93** | +97 B <br> **+33 B** |
| WebGPU | 812.95 <br> **218.95** | 813.52 <br> **219.09** | +572 B <br> **+140 B** |
| WebGPU Nodes | 812.46 <br> **218.82** | 813.03 <br> **218.94** | +572 B <br> **+123 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.94 <br> **111.81** | +97 B <br> **+27 B** |
| WebGPU | 536.92 <br> **144.9** | 537.35 <br> **145** | +433 B <br> **+98 B** |
| WebGPU Nodes | 493.03 <br> **134.63** | 493.46 <br> **134.72** | +433 B <br> **+96 B** | I thought I would use another interesting example to test this and it works really well

https://codepen.io/Spiri0/pen/zYgzgJR?editors=0111

When I wanted to test this in my app, it kept giving me this error message over and over again

![image](https://github.com/user-attachments/assets/d6b1fcfa-f4a2-475c-a816-e525cedafb91)

The console messages drawIndexedIndirect and draw come from my analysis. After hours of troubleshooting, I found the cause and it can easily be reproduced using this example. The cause is ""material.wireframe = true"" which I always had on in my app and that forces the indexed path in the backend. Everything is fine without material.wireframe = true;
So this is not an error in the drawIndirect logic.

![image](https://github.com/user-attachments/assets/ad4beaa8-876a-4e6b-b7fe-6d5d132f0dd7)

Now I need a break, it was a Sisyphean task to find that. I could look into this over the next week as to why wireframe = true forces the indexed path even if you don't set any indexes in InstancedBufferGeometry",,"Related issue: https://github.com/mrdoob/three.js/pull/29594

**Description**

This PR introduces indirect drawing support and a simple example in `webgpu_particles`. 
Part of the work and also related to this result in https://github.com/mrdoob/three.js/pull/29594 PR

```js
const uint32 = new Uint32Array( 5 );
uint32[ 0 ] = indexCount;	// indexCount
uint32[ 1 ] = fireCount; 	// instanceCount
uint32[ 2 ] = 0;		// firstIndex
uint32[ 3 ] = 0;		// baseVertex
uint32[ 4 ] = 0;		// firstInstance

const indirectAttribute = new THREE.IndirectStorageBufferAttribute( uint32, 5 );

geometry.setIndirect( indirectAttribute );
```",
29702,2024-10-20T04:10:53Z,2024-10-20T04:17:53Z,sunag,1,0,1,26,1,0,0,[],176.0,0,424.0,0,0,0,0,5860555.236515,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.42 <br> **171.34** | 692.42 <br> **171.34** | +0 B <br> **+0 B** |
| WebGPU | 816.84 <br> **220.03** | 816.92 <br> **220.02** | +83 B <br> **-9 B** |
| WebGPU Nodes | 816.35 <br> **219.9** | 816.43 <br> **219.89** | +83 B <br> **-7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.65 <br> **112.12** | 464.65 <br> **112.12** | +0 B <br> **+0 B** |
| WebGPU | 538.6 <br> **145.39** | 538.68 <br> **145.4** | +83 B <br> **+8 B** |
| WebGPU Nodes | 494.71 <br> **135.27** | 494.71 <br> **135.27** | +0 B <br> **+0 B** |",,"**Description**

Using `Loop()` should simplify code generation.
",
29701,2024-10-20T03:34:12Z,2024-10-20T04:11:19Z,sunag,0,0,1,1,1,0,0,[],,0,2230.0,0,0,0,0,5860951.600704,,0,1,1,False,[],,,Related issue: https://github.com/mrdoob/three.js/pull/29642,
29697,2024-10-19T10:00:55Z,2024-10-19T10:01:32Z,Mugen87,1,0,1,2,1,0,0,[],173.0,0,174.0,0,0,0,0,5926204.915055,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 692.37 <br> **171.33** | 692.37 <br> **171.33** | +0 B <br> **+0 B** |
| WebGPU | 816.84 <br> **220.03** | 816.84 <br> **220.03** | +0 B <br> **+0 B** |
| WebGPU Nodes | 816.35 <br> **219.9** | 816.35 <br> **219.9** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 464.59 <br> **112.1** | 464.59 <br> **112.1** | +0 B <br> **+0 B** |
| WebGPU | 538.6 <br> **145.39** | 538.6 <br> **145.39** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.71 <br> **135.27** | 494.71 <br> **135.27** | +0 B <br> **+0 B** |",,"Related issue: -

**Description**

The PR makes sure the texture properties of a depth texture are correctly deleted when `dispose()` is called on the render target.",
29662,2024-10-15T11:39:42Z,2024-10-19T09:54:55Z,Mugen87,15,0,3,99,3,1,1,[],77.0,0,339313.0,0,0,0,0,5926739.225902,,0,3,1,False,"['github-actions[bot]', 'gkjohnson', 'Makio64', 'Mugen87']","I have implemented a similar change for the WebGL backend of `WebGPURenderer` here: https://github.com/mrdoob/three.js/pull/29636/commits/b19b10c83c773d07368cf2c015edb1d099b94ec9. It's part of #29636 so I can verify the code via the TRAA implementation. ### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.67 <br> **171.1** | 691.82 <br> **171.3** | +1.15 kB <br> **+199 B** |
| WebGPU | 816.43 <br> **220.08** | 816.43 <br> **220.08** | +0 B <br> **+0 B** |
| WebGPU Nodes | 815.94 <br> **219.95** | 815.94 <br> **219.95** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 464.46 <br> **112.09** | +1.15 kB <br> **+205 B** |
| WebGPU | 538.61 <br> **145.41** | 538.61 <br> **145.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.73 <br> **135.28** | +0 B <br> **+0 B** | Thanks! We should update the docs to indicate that `srcTexture` can be a DepthTexture of RenderTarget. And we should update the 3D texture version of the function, as well. Then I can test it with my use case (copying a block of array texture data between render targets when expanding the size). It seems the code for 3D render targets is the same since there is no difference on framebuffer level.   I've copied the WebGLRenderer to my imported copy of three and I'm seeing errors when running the following cases - perhaps I'm not using it correctly?

```js
// For 3d textures
const rt3d0 = new WebGLArrayRenderTarget( 10, 10, 10 );
const rt3d1 = new WebGLArrayRenderTarget( 10, 10, 10 );
renderer.initRenderTarget( rt3d0 );
renderer.initRenderTarget( rt3d1 );
renderer.copyTextureToTexture3D( rt3d0, rt3d1.texture );

// For 2d textures
const rt0 = new WebGLRenderTarget( 10, 10 );
const rt1 = new WebGLRenderTarget( 10, 10 );
renderer.initRenderTarget( rt0 );
renderer.initRenderTarget( rt1 );
renderer.copyTextureToTexture( rt0, rt1.texture );
```

It seems there's still some handling that needs to be worked out when dealing with render targets vs textures for the source. The original `srcTexture.isTexture !== true` check will fail when passing a render target in, for example, causing the argument order to be rearranged. You have to pass in the texture reference, not the render target itself.
```js
renderer.copyTextureToTexture3D( rt3d0.texture, rt3d1.texture );
```
Just do it like in your initial post: https://github.com/mrdoob/three.js/issues/29612#issue-2578845839 😉 . Got it - I was tripped up by the `isRenderTargetTexture` and though that meant passing the render target in. I also wasn't able to get it working with 3d render targets even with either syntax.

Here's a repro script for array render targets failing to copy - though perhaps I've missed something here, too. You can paste this in to any example page script to see:

<details>
  <summary>Repro snippet</summary>
  
```js
			import * as THREE from 'three';
			import { FullScreenQuad } from 'three/addons/postprocessing/Pass.js';
			
			const width = window.innerWidth;
			const height = window.innerHeight;

			// init
			const camera = new THREE.PerspectiveCamera( 70, width / height, 0.01, 10 );
			camera.position.z = 1;

			// renderer
			const renderer = new THREE.WebGLRenderer();
			renderer.setSize( width, height );
			renderer.setClearColor( 0xffffff );
			renderer.setPixelRatio( window.devicePixelRatio );
			document.body.appendChild( renderer.domElement );

			// targets
			const quad = new FullScreenQuad( new THREE.MeshBasicMaterial( { color: 'red' } ) );
			const target1 = new THREE.WebGLArrayRenderTarget( 100, 100, 10 );
			const target2 = new THREE.WebGLArrayRenderTarget( 200, 200, 20 );

			// scene
			const scene = new THREE.Scene();
			const geometry = new THREE.PlaneGeometry();
			const material = new THREE.ShaderMaterial( {
				uniforms: {
					map: { value: null },
				},
				vertexShader: /* glsl */`
					varying vec2 vUv;
					void main() {
						vUv = uv;
						gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
					}
				`,
				fragmentShader: /* glsl */`
					precision highp sampler2DArray;
					uniform sampler2DArray map;
					varying vec2 vUv;
					void main() {
						gl_FragColor = texture( map, vec3( vUv, 0 ) );
					}
				`,
			} );
			const mesh = new THREE.Mesh( geometry, material );
			scene.add( mesh );

			// populate layer 0 of the initial target with red 
			renderer.setRenderTarget( target1, 0 );
			quad.render( renderer );

			// copy the data of texture 1 into texture 2
			renderer.initRenderTarget( target2 );
			renderer.copyTextureToTexture3D( target1.texture, target2.texture );

			// final render render to the screen
			// NOTE: Setting ""map"" to texture1.texture displays red, as expected
			renderer.setRenderTarget( null );
			material.uniforms.map.value = target2.texture;
			renderer.render( scene, camera );
```
</details>

The above script:
- Renders a red color into layer 0 of array target 1
- Use `copyTextureToTexture3D` to copy all data from target 1 into target 2
- Render a quad with the target 2 contents.

When rendering target 2 the contents are displayed as black. Rendering target 1 displays red as expected. The function works when using 2d render targets. The 3D version requires calls of `framebufferTextureLayer()` for some reasons. The snippet seems to be fixed now. Hmm. It seems to only copy the _first_ layer of the array target, now. Other layers are left uncopied. You can test this by rendering layer 0 and 1 as red, copying, and then rendering layers 0 and 1 of the new target separately. Layer 1 will render as black, 0 as red.

It looks like the signature of `blitFramebuffer` only supports arguments for 2d targets. I wonder if there's another way to copy all the 3d data at once? Is there someone who might know better we can ping? Maybe greggman?

An alternative would be to continue using this per-layer 2D blit copy but iterate over all layers inside the function so the full set of requested texture data is copied. It's still an improvement over the full screen quad render method. I was wondering if we could use ‘copyTexSubImage3D’	to copy on gpu level instead of copying on cpu to gpu (from what I understand by having a quicklook)

```
•	gl.copyTexSubImage3D copies data directly from the framebuffer to the texture.
•	gl.texSubImage3D uploads data from client memory (e.g., arrays) to the texture.

Use gl.copyTexSubImage3D when you’re copying from the framebuffer, and gl.texSubImage3D when you’re updating the texture from data in memory.
``` > I was wondering if we could use ‘copyTexSubImage3D’ to copy on gpu level instead of copying on cpu to gpu (from what I understand by having a quicklook)

From what I can tell this function _also_ only copies a 2d sub window of data between the targets, not a 3d one. It _sounds_ like what you'd want, though. You can see a more detailed description of the function in the [opengl docs](https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glCopyTexSubImage3D.xhtml). Notice that it only allows for specifying a 2d space in the destination texture (ie x, y, width, height) rather than a 3d one. Confusingly the [texSubImage3D](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage3D) allows for specifying a 3d volume in the destination texture (eg x, y, z, width, height, depth).

However it may still be worth using the `copyTexSubImage*` functions rather than `blitFrameBuffer` since it affords scaling and filtering which may or may not incur some overhead. The problem is `copyTexSubImage*()` do not support copying depth which is a red flag for post processing use cases. So we potentially need to use both methods to cover all use cases. Oh gotcha - didn't realize that blit included the other buffers, too.

In terms of recommendations or comments on using one over the other - here are a few threads I found:
- Ken Russell says that blit is not used for copying data between buffers internally ([link](https://groups.google.com/g/webgl-dev-list/c/qq2BDeiVDTg?pli=1))
- And this stackoverflow post shows ~10% improvement using copyTexSubImage2d over blit ([link](https://stackoverflow.com/questions/23981016/best-method-to-copy-texture-to-texture))

Of course it will vary from hardware to hardware but it seems like the copy* functions are the better choice when we can use them. TBH, I have a hard time to test the specific 3D/array render target setups which are uncommon for the post processing point of view. I was primarily interested in getting the basic operations right (base texture + depth).

@gkjohnson If you want to support more use cases, I would favor to merge the PR so you can start from this baseline with a different PR. I'd like to focus on a other topics. I understand! We can merge this and I'll make the remaining adjustments in another PR - #29612 shouldn't be closed yet, though, since it's not complete.",,"Related #29612

**Description**

This PR makes sure `texture` and `depthTexture` can be copied between render targets via `copyTextureToTexture()`. The idea is to use `blitFramebuffer()` since it offers a wider range of supported formats compared to `copyTexSubImage2D()`.

To make this change possible, it was necessary to save the reference of a render target texture to its render target in `textureProperties`.
",
29691,2024-10-18T21:17:10Z,2024-10-18T21:34:53Z,Mugen87,0,0,1,17,1,0,0,[],,0,1063.0,0,0,0,0,5971142.364265,,0,1,1,False,[],,,"Fixed #29521.

**Description**

Like other FX passes, `AfterimagePass` should use `CopyShader` for internal copies and not  `MeshBasicMaterial`. Transparent backgrounds are supported if the app defines a clear alpha value of `0` (e.g. via `renderer.setClearColor( 0x000000, 0 );`).
",
29687,2024-10-18T09:41:27Z,2024-10-18T12:38:46Z,gkjohnson,1,0,14,312,1,1,1,[],185.0,0,10642.0,0,0,0,0,6003306.812327,,0,14,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.8 <br> **171.12** | 690.9 <br> **171.07** | +93 B <br> **-51 B** |
| WebGPU | 816.46 <br> **220.09** | 816.55 <br> **220.03** | +93 B <br> **-55 B** |
| WebGPU Nodes | 815.97 <br> **219.96** | 816.06 <br> **219.9** | +93 B <br> **-56 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.45 <br> **111.9** | 463.45 <br> **111.9** | +0 B <br> **+0 B** |
| WebGPU | 538.64 <br> **145.42** | 538.64 <br> **145.42** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.75 <br> **135.28** | 494.75 <br> **135.28** | +0 B <br> **+0 B** |",,"Related issue: #29624, #29603

**Description**

Clean up for the BatchedMesh class to make things a little bit more clear and easier to manage:
- Consolidate the geometry data stored in `_bounds`, `_reservedRanges`, and `_drawRanges` into a common `_geometryInfo` member.
- Remove unnecessary comments
- Fixes #29603

(removed the following changes to reduce noise in the change set, will re-add them in a followup)
- ~Remove some unnecessary global fields~
- ~Rename ""drawInfo"" to ""instanceInfo"" for clarity~
- ~- Expose information about instance count, unused vertex & index count so applications can make decisions about whether geometries can be added.~

Once the class is finished and cleaned up I'll make an issue to discuss how we should move forward with the BatchedMesh implementation.",
29445,2024-09-19T16:37:15Z,2024-09-21T09:23:24Z,CodyJasonBennett,8,9,2,93,4,2,1,[],211.0,0,2454691.0,0,0,0,0,6039910.493956,,0,2,1,False,"['github-actions[bot]', 'N8python', 'CodyJasonBennett', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 686.03 <br> **169.81** | 686.77 <br> **170.07** | +739 B <br> **+259 B** |
| WebGPU | 835 <br> **223.93** | 835 <br> **223.93** | +0 B <br> **+0 B** |
| WebGPU Nodes | 834.5 <br> **223.81** | 834.5 <br> **223.81** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.34 <br> **111.55** | 463.05 <br> **111.83** | +713 B <br> **+277 B** |
| WebGPU | 531.77 <br> **143.36** | 531.77 <br> **143.36** | +0 B <br> **+0 B** |
| WebGPU Nodes | 488.43 <br> **133.22** | 488.43 <br> **133.22** | +0 B <br> **+0 B** | Noticing moving the reverse projection matrix to conversions over an existing [-1, 1] projection matrix loses quite a bit of near-field precision versus converting from a [0, 1] matrix. I tried composing the depth components of the matrix from scratch, but I'm not noticing an effect. Any idea why? It should match the WebGPU example in either case.

Porting https://webgpu.github.io/webgpu-samples/?sample=reversedZ as an example.

https://jsfiddle.net/bwupxeaj

[-1, 1] -> [0, 1] -> [1, 0]

```js
if ( capabilities.reverseDepthBuffer ) {

	_currentProjectionMatrix.copy( camera.projectionMatrix );
	
	// toNormalizedProjectionMatrix( _currentProjectionMatrix );
	// toReversedProjectionMatrix( _currentProjectionMatrix );

        // Same thing, but directly composes c and d values for perspective projection
	const m = _currentProjectionMatrix.elements;
	m[ 10 ] = camera.near / ( camera.far - camera.near );
	m[ 14 ] = ( camera.far * camera.near ) / ( camera.far - camera.near );

	p_uniforms.setValue( _gl, 'projectionMatrix', _currentProjectionMatrix );

}
```

<img width=""1280"" alt=""{C138E3F3-E540-475A-95FB-84878469AB91}"" src=""https://github.com/user-attachments/assets/209370af-4865-4c1e-90a1-c5a7f927844c"">

[0, 1] -> [1, 0]

```js
camera.coordinateSystem = THREE.WebGPUCoordinateSystem // hack to use [0, 1]

if ( capabilities.reverseDepthBuffer ) {

	_currentProjectionMatrix.copy( camera.projectionMatrix );
	
	toReversedProjectionMatrix( _currentProjectionMatrix );

	p_uniforms.setValue( _gl, 'projectionMatrix', _currentProjectionMatrix );

}
```

<img width=""1280"" alt=""{4D17B6D8-9EDD-47CD-8B34-C2735551D6DC}"" src=""https://github.com/user-attachments/assets/bc46fb0e-1e87-4ae0-8b30-472696266c6b"">

 Right, they're using `depth32float` for depth, and the upper bits are used for near-field precision.

https://jsfiddle.net/n69rqj8u

<img width=""863"" alt=""{508745D8-6C64-4AA8-9D7A-8CEE2CFF0728}"" src=""https://github.com/user-attachments/assets/ae84f129-334c-4a42-8615-e02f3e62cc92"">
 This would only work with floating point depth buffers though - what about 24-bit depth buffers often used w/ stencil? No. See https://github.com/mrdoob/three.js/pull/29445#issuecomment-2362538965 for instance, which uses the default canvas framebuffer. You lose near-field precision this way, but that's okay for mobile, where you want to keep this low(er) precision and avoid the blit. WebGPU gives more control here.

We could enable a workaround where you set `camera.coordinateSystem = THREE.WebGPUCoordinateSystem` like in the second screenshot to skip the [-1, 1] -> [0, 1] conversion. I think it's more okay for us to recompose the projection matrix's depth components in that case, but the difference shown there is unexpected, and I suspect a false negative. It seems the range wasn't reversed in the matrix there, which favors near-field over far-field precision. I'm not sure this is useful in practice. What I more mean is w/ 24-bit depth buffers is the precision uniform over [0, 1] - or am I wrong here? Precision is not uniform due to how perspective projection works and the useful range of floating point representation. We reverse this range to preserve far-field precision over near-field.

In other words, the distribution does not change whether you use 32/24/16 bits for depth, but the possible range you represent in floating point. @Mugen87
@CodyJasonBennett

I think this feature is deserving of a three.js example.

Also, (self) shadows do not appear to render correctly in my testing.",,"Related issue: https://github.com/mrdoob/three.js/issues/22017#issuecomment-2005297835

**Description**

Implements a reversed depth buffer with a [0, 1] projection matrix via `EXT_clip_control`, which is a strict improvement over logarithmic depth where supported. A reverse depth buffer exploits the high precision range of [0, ~0.8] and inverts depth to better the distribution at distance. This is not only significantly faster than logarithmic depth (where use of `gl_FragDepth` disables early-z optimizations and MSAA coverage) but more accurate. See the below articles, which visualize this effect.

https://tomhultonharrop.com/mathematics/graphics/2023/08/06/reverse-z.html
https://developer.nvidia.com/blog/visualizing-depth-precision

<hr />

As both a [0, 1] and reversed projection matrix would require drastic changes to sensitive code like frustum planes or raycasting, I've hidden both conversions when setting the `projectionMatrix` uniform in `WebGLRenderer`. It's possible this can be moved to a shader chunk, but any inline clip-space math must account for this mode, and we'll need to add a shader define accordingly.

The same is true for logarithmic depth, e.g., https://github.com/pmndrs/drei/pull/1737. I've debated adding methods to packing chunks for these.

<hr />

This example was ported from https://webgpu.github.io/webgpu-samples/?sample=reversedZ and uses a 32 bit depth-buffer.

https://jsfiddle.net/n69rqj8u

https://github.com/user-attachments/assets/e21ced89-a1ae-4012-8ce9-ccd561d41a3e


","Can I call `uniformMatrix4f` here somehow? Should be fast and clean. Can we put these functions into `src/utils.js`? Instead of recomputing the projection matrix, couldn't you store the previous projection matrix in a temporary variable and then copy it back? Something like:
```js
camera.projectionMatrix.copy( currentProjectionMatrix );
``` Do you mind explaining in more detail what you want to do? Sure. The purpose of this is to perform the [-1, 1] -> [0, 1] and reverse depth buffer conversion without affecting the user camera, so anything on the CPU continues to work as usual.

Here, I want to avoid a copy of the matrix or touching the user camera at all. If I can update the uniform without passing an array, but a sequence of elements, I can avoid needing to cache or copy here and only do a one-way conversion.

```js
const m = projectionMatrix.elements;
const isPerspectiveMatrix = m[ 11 ] === - 1;

let n11 = m[ 0 ], n12 = m[ 1 ], n13 = m[ 2 ], n14 = m[ 3 ];
let n21 = m[ 4 ], n22 = m[ 5 ], n23 = m[ 6 ], n24 = m[ 7 ];
let n31 = m[ 8 ], n32 = m[ 9 ], n33 = m[ 10 ], n34 = m[ 11 ];
let n41 = m[ 12 ], n42 = m[ 13 ], n43 = m[ 14 ], n44 = m[ 15 ];

// Convert [-1, 1] to [0, 1] projection matrix
n13 = 0.5 * n13 + 0.5 * n14;
n23 = 0.5 * n23 + 0.5 * n24;
n33 = 0.5 * n33 + 0.5 * n34;
n43 = 0.5 * n43 + 0.5 * n44;

// Reverse [0, 1] projection matrix
if ( isPerspectiveMatrix ) {

	n33 = - n33 - 1;
	n43 = - n43;

} else {

	n33 = - n33;
	n43 = - n43 + 1;

}

_gl.uniformMatrix4f( location, transpose, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );
```

The alternative was doing this on the GPU in a shader chunk, but I'm not sure how to make that ergonomic for users since we're rewriting a uniform, and certainly don't want to deopt their shaders. I can split the [-1, 1] -> [0, 1] and [0, 1] -> [1, 0] conversions into their own methods depending on https://github.com/mrdoob/three.js/pull/29445#discussion_r1767708597.

Is that a good place if we want to use this for WebGPU code later? Sure, c67c4af631cffc9bf6cf27f941f1f40385afff28. There might be a slightly faster way with https://github.com/mrdoob/three.js/pull/29445#discussion_r1767708597, but this is going to be as good as it's going to get for re-usability. The uniform update routines from `WebGLUniforms` are not public so it would be good to keep the usage of `setValue()`. In this way, the approach is more consistent and I doubt there a measurable difference in performance. Yes, `utils.js` is already used in `WebGPURenderer`."
29685,2024-10-18T00:34:02Z,2024-10-18T02:16:46Z,sunag,1,0,1,1,1,0,0,[],180.0,0,6168.0,0,0,0,0,6040627.359643,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.8 <br> **171.12** | 690.8 <br> **171.12** | +0 B <br> **+0 B** |
| WebGPU | 816.43 <br> **220.08** | 816.46 <br> **220.09** | +24 B <br> **+10 B** |
| WebGPU Nodes | 815.94 <br> **219.95** | 815.97 <br> **219.96** | +24 B <br> **+10 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.45 <br> **111.9** | 463.45 <br> **111.9** | +0 B <br> **+0 B** |
| WebGPU | 538.61 <br> **145.41** | 538.64 <br> **145.42** | +24 B <br> **+9 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.75 <br> **135.28** | +24 B <br> **+9 B** |",,"Related issue: Fixes https://github.com/mrdoob/three.js/issues/29683

**Description**

Fixed shared pipeline across different geometry setup.
",
29667,2024-10-15T21:01:17Z,2024-10-16T08:11:00Z,zalo,5,1,7,98,4,2,1,[],55970.0,0,161797.0,0,0,0,0,6070563.853496,,0,7,1,False,"['linbingquan', 'zalo', 'Mugen87']","![图片](https://github.com/user-attachments/assets/23658c63-9e20-4e0b-91b3-a84bf0496bdf)

It reported an error on my computer... The asset should trigger the warning for testing. It can't be rendered right now.

@zalo I wonder if it's better to remove the asset to avoid further confusion when users checking out the example. I can switch it for one that has a mesh-component (which should load even without implicits), though, they tend to require a special node operation which gives the signed distance to the mesh (which might need something like `three-mesh-BVH` to sample on the GPU). In this case I would simply revert the changes to the example to keep things simple. https://github.com/mrdoob/three.js/commit/8104618a31e9fa37cbe7a483fa3b38318bf63220",,"Related issue: [#29548](https://github.com/mrdoob/three.js/issues/29548)

tl;dr: This PR adds basic `implicitfunction` (parsing only!) functionality to three.js's 3MFLoader.

**Context**

3MF files can now contain volumetric implicits defined as operation execution graphs.

The 3MF consortium has released a 3D Modeller for generating .3mf’s with them, similar to nTopology:
https://github.com/3MFConsortium/gladius

![](https://raw.githubusercontent.com/3MFConsortium/gladius/refs/heads/main/gladius/documentation/img/gladius_animation.gif)


This presents an opportunity to make SDF Implicits a first-class feature of 3D on the web!

**Description:**

This PR advances this goal by adding a parser that exposes this new information to three.js.

Eventually, when TSL and WebGPU are mature, this information can be used to construct a TSL nodegraph, which can be used to import and visualize these 3MF implicit functions.


You can test this PR easily by going [here](https://raw.githack.com/zalo/three.js/feat-3mf-volumetric/examples/webgl_loader_3mf.html), selecting `volumetric` from the drop-down, and observing the implicit tree that was output to the console.","## Identical operands

Operands [modelDa ... unction](1) and [modelDa ... unction](2) are identical.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2473)"
29684,2024-10-17T17:49:43Z,2024-10-17T17:49:52Z,Mugen87,0,0,1,13,1,0,0,[],,0,9.0,0,0,0,0,6071046.217629,,0,1,1,False,[],,,"Related issue: #29680

**Description**

Refactors the code in `WebGPUTextureUtils` based on https://github.com/mrdoob/three.js/pull/29680#discussion_r1805151171.
",
29680,2024-10-17T09:45:10Z,2024-10-17T09:52:00Z,Mugen87,0,2,1,12,1,2,0,[],,0,29039.0,0,0,0,0,6071090.264854,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29509#issuecomment-2418373853

**Description**

When decompressing textures it's important to ignore the current uv transform of the texture since custom texture coordinates are used for the copy.
","If we use `uv` in the `texture()`, the `texture.matrix` should be ignored, `matrix` is only used by default.

```js
material.fragmentNode = texture( blitTexture, uv().flipY() ); // without matrix
material.fragmentNode = texture( blitTexture ); // with matrix
``` Nice! This greatly simplifies the code. I'll make a new PR."
29509,2024-09-26T23:15:17Z,2024-10-17T09:31:58Z,donmccurdy,7,4,7,208,2,3,1,[],1644886.0,0,1778747.0,0,0,0,0,6087175.891347,,0,7,1,False,"['donmccurdy', 'Mugen87']","@Mugen87 @sunag I think the remaining issues in this PR have been fixed – ready for review! When using `WebGPURenderer` in `misc_exporter_gltf` I have encountered one issue. 

(First of all it was necessary to remove the `LineLoop` object from the scene since this type of 3D object is not supported by `WebGPURenderer` in general.)

The real issue is that the coffeemat asset is not correctly imported in `glTF Viewer`. The following validation errors appear:

Error | Message | Pointer
-- | -- | --
MESH_PRIMITIVE_ATTRIBUTES_ACCESSOR_INVALID_FORMAT | Invalid accessor format '{VEC3, UNSIGNED_INT}' for this attribute semantic. Must be one of ('{VEC3, FLOAT}', '{VEC3, BYTE}', '{VEC3, BYTE normalized}', ..., '{VEC3, UNSIGNED_SHORT}', '{VEC3, UNSIGNED_SHORT normalized}'). | /meshes/0/primitives/0/attributes/POSITION
MESH_PRIMITIVE_ATTRIBUTES_ACCESSOR_INVALID_FORMAT | Invalid accessor format '{VEC2, UNSIGNED_INT}' for this attribute semantic. Must be one of ('{VEC2, FLOAT}', '{VEC2, UNSIGNED_BYTE normalized}', '{VEC2, UNSIGNED_SHORT normalized}', ..., '{VEC2, SHORT normalized}', '{VEC2, UNSIGNED_SHORT}'). | /meshes/0/primitives/0/attributes/TEXCOORD_0
MESH_PRIMITIVE_ATTRIBUTES_ACCESSOR_INVALID_FORMAT | Invalid accessor format '{VEC3, UNSIGNED_INT}' for this attribute semantic. Must be one of ('{VEC3, FLOAT}', '{VEC3, BYTE}', '{VEC3, BYTE normalized}', ..., '{VEC3, UNSIGNED_SHORT}', '{VEC3, UNSIGNED_SHORT normalized}'). | /meshes/1/primitives/0/attributes/POSITION
MESH_PRIMITIVE_ATTRIBUTES_ACCESSOR_INVALID_FORMAT | Invalid accessor format '{VEC2, UNSIGNED_INT}' for this attribute semantic. Must be one of ('{VEC2, FLOAT}', '{VEC2, UNSIGNED_BYTE normalized}', '{VEC2, UNSIGNED_SHORT normalized}', ..., '{VEC2, SHORT normalized}', '{VEC2, UNSIGNED_SHORT}'). | /meshes/1/primitives/0/attributes/TEXCOORD_0 @Mugen87 the issue is caused by these vertex attribute conversions:

https://github.com/mrdoob/three.js/blob/1360b249b6fab26c92c2e467f57368faa69fd01b/src/renderers/webgpu/utils/WebGPUAttributeUtils.js#L50-L62

glTF does not permit the use of uint32 or int32 for vertex positions, and WebGPU does not permit 8-bit and 16-bit integer formats AFAIK, so the conversion for WebGPU is not compatible with glTF.

Related:

- https://github.com/mrdoob/three.js/pull/28008

I guess GLTFExporter could convert the attributes to float32, or we could change the WebGPU patch to use float32, or we could wait on https://github.com/gpuweb/gpuweb/issues/4549. But I think that probably doesn't need to block the current changes. Aside - when running this demo with WebGPURenderer there is a rendering issue on my device (macOS, M1, Arc/Chromium), before starting the export. Looks possibly related to integer geometry, too, maybe _normalized_ uint8 and uint16 are not handled? Sort of off topic but just noting in case I forget. :)  Then I vote for an attribute conversion in the exporter.  @Mugen87 I've pushed a fix for the int32/uint32 problem, the `coffeemat.glb` export renders without validation errors. However, texture decompression in WebGPUTextureUtils doesn't seem to be working quite correctly yet. Comparing before and after in https://gltf.report —

| before | after |
|----|----|
| ![before](https://github.com/user-attachments/assets/893e4631-2b76-4960-9893-788bfaff610d) | ![after](https://github.com/user-attachments/assets/3bb5e5b6-7e36-4e38-99d9-a3e92faf455d) |

The model includes `KHR_texture_transform`, perhaps `WebGPUTextureUtils` needs to temporarily disable UV transforms? I'd prefer that this be considered an unrelated issue and not part of the current PR, though. With https://github.com/mrdoob/three.js/pull/29680, the `coffeemat.glb` export is imported correctly in `gltf-viewer` now. 

The issue with `ShaderBall.glb` is more interesting. It uses normalized attributes and renders distorted in the example. However, removing all other objects from the scene and the error is gone. Depending on what objects you remove, `ShaderBall.glb` might be scaled up so the entire scene gets gray. 

This seems to be more an issue of a broken world matrix. But I don't know yet where the root cause is. It might make sense to file a separate issue for that. ",,"Related:

- #29295
- #29156
- #29507

Remaining:

- [x] ""Export Scene 1 and Object"" test is failing, with invalid output","It would be interesting to standardize the `async` functions with the sufix `Async` like, `renderer.hasFeatureAsync()`, `renderer.computeAsync`, ... I wonder if we need this if there is only one version of the method. Another point to think about: If the API gets a more async nature over time and we want to promote this style, maybe a default name like `hasFeature()` should be async and the sync version `hasFeatureSync()`. It's an interesting point. I think asynchronous calls will still be the exception, I think that most of the code are related to objects manipulation and TSL, in this sense the code would always be synchronous preferably. Asynchronous functions are linked to processes that derive a working time or initialization. Not a strong preference, but I do tend to like the `*Async` suffix for async methods, at least when they are the exception not the norm."
29678,2024-10-17T07:33:38Z,2024-10-17T09:18:14Z,gkjohnson,1,0,3,15,1,1,1,[],183.0,0,8076.0,0,0,0,0,6099946.091682,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.67 <br> **171.1** | 690.8 <br> **171.12** | +137 B <br> **+20 B** |
| WebGPU | 816.43 <br> **220.08** | 816.43 <br> **220.08** | +0 B <br> **+0 B** |
| WebGPU Nodes | 815.94 <br> **219.95** | 815.94 <br> **219.95** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 463.45 <br> **111.9** | +143 B <br> **+12 B** |
| WebGPU | 538.61 <br> **145.41** | 538.61 <br> **145.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.73 <br> **135.28** | +0 B <br> **+0 B** |",,"Fixed #29628

**Description**

This PR ensures that the correct target type is passed into ""bindTexture"" for array and 3d render targets.

I've tested this with my 3d tiles use case and it works but the downside is that it's _extremely_ slow and causes noticeable stalls (sometimes for what feels like almost a second or more) since `gl.generateMipmap` will regenerate the mipmaps for the _whole_ volume target when just a single layer has been rendered to. This is especially problematic when rendering multiple layers per frame since that means the mip chain for the whole 3d texture will be generated every render (in this case ~256x256x900px). So for my use case I'll need something a bit different. Jotting a few potential thoughts down - maybe others have some better ideas:

- Only regenerate the mipmap after all layers have been rendered for a single frame (probably still too expensive for this particular case but probably useful for other 3d render target use cases).
- Copy texture data to a 2d render target to generate mipmaps and then copy the whole mip change to the target layer (only works for array texture targets).",
29675,2024-10-16T14:11:20Z,2024-10-16T14:11:29Z,Mugen87,1,0,1,6,1,0,0,[],180.0,0,30014.0,0,0,0,0,6140547.094701,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.67 <br> **171.1** | 690.67 <br> **171.1** | +0 B <br> **+0 B** |
| WebGPU | 816.43 <br> **220.08** | 816.43 <br> **220.08** | +0 B <br> **+0 B** |
| WebGPU Nodes | 815.94 <br> **219.95** | 815.94 <br> **219.95** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 463.31 <br> **111.89** | +0 B <br> **+0 B** |
| WebGPU | 538.61 <br> **145.41** | 538.61 <br> **145.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.73 <br> **135.28** | +0 B <br> **+0 B** |",,Reverts mrdoob/three.js#29670,
29670,2024-10-16T08:14:11Z,2024-10-16T09:57:13Z,jclaessens97,6,0,3,6,1,1,1,[],449.0,0,23658.0,0,0,0,0,6168333.131322,,0,3,1,False,"['github-actions[bot]', 'jclaessens97', 'linbingquan', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.67 <br> **171.1** | 690.67 <br> **171.1** | +0 B <br> **+0 B** |
| WebGPU | 816.43 <br> **220.08** | 816.5 <br> **220.08** | +66 B <br> **+8 B** |
| WebGPU Nodes | 815.94 <br> **219.95** | 816.01 <br> **219.96** | +66 B <br> **+9 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 463.31 <br> **111.89** | +0 B <br> **+0 B** |
| WebGPU | 538.61 <br> **145.41** | 538.68 <br> **145.42** | +66 B <br> **+9 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.79 <br> **135.28** | +66 B <br> **+9 B** | > There is an data-engine attribute, but it's always set to webgpu.

How about we about the data-engine attribute so it provides more information? In this way, we don't have update `Info`. The following in `Backend` should do the trick:

```js
getDomElement() {

    let domElement = this.domElement;

    if ( domElement === null ) {

        domElement = ( this.parameters.canvas !== undefined ) ? this.parameters.canvas : createCanvasElement();

        const backend = ( this.coordinateSystem === WebGPUCoordinateSystem ) ? 'WebGPU backend' : 'WebGL backend';

        // OffscreenCanvas does not have setAttribute, see #22811
        if ( 'setAttribute' in domElement ) domElement.setAttribute( 'data-engine', `three.js r${REVISION} WebGPURenderer, ${backend}` );

        this.domElement = domElement;

    }

    return domElement;

}
``` ![图片](https://github.com/user-attachments/assets/f5dd10eb-fb9f-4675-9d4c-0031440cfec0)

I think this display is incorrect.

`Renderer.domElement = backend.getDomElement();` code was runing before `await Renderer.init()`.

Test browser: Firefox 131 Good catch! I'll revert the PR for now. Let's think about a new solution. @jclaessens97 If you are interested in the current used backend, can't you just evaluate `renderer.backend.coordinateSystem`?  Probably yes. Thought it would be useful to have directly in three, but now that I know what to look for, I succesfully implemented it that way without a need of having it in threejs!",,"**Description**

Currently there is no easy way to debug if you're running on webgpu or webgl fallback. There is an `data-engine` attribute, but it's always set to `webgpu`. This should make it easier to debug that.

*This contribution is funded by [Segments.ai](https://segments.ai/)*
",
28789,2024-07-03T00:57:21Z,2024-07-03T17:39:13Z,WestLangley,8,0,1,100,4,1,1,[],132.0,0,9117478.0,0,0,0,0,6172723.220599,,0,1,1,False,"['lmicola', 'WestLangley', 'mrdoob', 'github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 682.2 kB (169 kB) | 683.4 kB (169.2 kB) | +1.26 kB |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 459.4 kB (110.9 kB) | 460.6 kB (111.1 kB) | +1.2 kB | Any reason why this wasnt included in 167 milestone? It took me by suprise that my implementation of depth picking stoped working properly. Not sure what you mean since the changes are part of the engine since `r167`. @lmicola Do you mean in the change log? It should be there:

<img width=""423"" alt=""image"" src=""https://github.com/user-attachments/assets/23f6ba1e-75db-4766-b1d1-9f5680662f1f"">
 Perhaps he is referring to r167 in the [migration guide](https://github.com/mrdoob/three.js/wiki/Migration-Guide#166--r167). I apologize. I thought that this PR was not included in change log. I think mention about RGBADepthPacking color output change in migration guide would be helpfull. I wonder if it is possible to make depthBuffer and reverseDepthBuffer color output uniform.
![depth](https://github.com/user-attachments/assets/b1d1f6e1-d07d-4183-b816-e71c4ff98623)
![reverseDepth](https://github.com/user-attachments/assets/80b10bbd-c434-423a-bcd0-c8ed4e8a1bb9)
 The `RGBADepthPacking` API has not changed, only the implementation. I am inclined to think it is not appropriate to include it in the r167 migration guide.

/ping @Mugen87LGTM! Do you mind reverting the changes to `three.module.js` for merging?",LGTM! Do you mind reverting the changes to `three.module.js` for merging?,"Fixed #28692.

This PR implements the improvements to packing suggested by @leonbloy in #28692.

",
29672,2024-10-16T11:58:10Z,2024-10-16T11:58:27Z,Mugen87,0,0,1,14,1,0,0,[],,0,18.0,0,0,0,0,6178534.972007,,0,1,1,False,[],,,"Related issue: -

**Description**

The PR updates the hidden edge color value in `webgpu_postprocessing_outline` so the hidden part of the outline is more visible. Besides, it ensures `lil-gui` actually shows sRGB values (they were in `linear-srgb` color space before).",
29671,2024-10-16T11:28:29Z,2024-10-16T11:28:46Z,Mugen87,0,0,1,20,1,0,0,[],,0,18.0,0,0,0,0,6180316.91626,,0,1,1,False,[],,,"Related issue: #29636

**Description**

Minor clean up.",
29669,2024-10-16T00:40:00Z,2024-10-16T10:00:02Z,donmccurdy,0,0,1,7,1,1,1,[],,0,37761.0,0,0,0,0,6181483.133928,,0,1,1,False,[],,,"Minor cleanup, setting recommended color management by default.",
29624,2024-10-11T13:12:12Z,2024-10-16T08:05:07Z,gkjohnson,9,0,8,120,1,1,1,[],183.0,0,413924.0,0,0,0,0,6192189.071254,,0,8,1,False,"['gkjohnson', 'mrdoob', 'github-actions[bot]', 'Makio64', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 690.29 <br> **171.01** | 690.67 <br> **171.1** | +379 B <br> **+92 B** |
| WebGPU | 816.05 <br> **219.94** | 816.43 <br> **220.08** | +379 B <br> **+132 B** |
| WebGPU Nodes | 815.56 <br> **219.81** | 815.94 <br> **219.95** | +379 B <br> **+132 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.31 <br> **111.89** | 463.31 <br> **111.89** | +0 B <br> **+0 B** |
| WebGPU | 538.61 <br> **145.41** | 538.61 <br> **145.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 494.73 <br> **135.28** | 494.73 <br> **135.28** | +0 B <br> **+0 B** | What do you think about moving `BatchedMesh` to `addons/objects/`? 🤔 > What do you think about moving BatchedMesh to addons/objects/? 🤔

Is there a reason? It was requested to be moved to core, previously 😅 

I think it's nice to have something that exposes this capability built into the project but if there's something that needs to change in order to accommodate that I'm happy to discuss what that looks like. > What do you think about moving `BatchedMesh` to `addons/objects/`? 🤔

I would say it belongs to core cause it might be the most powerful class since InstanceMesh to reduce drawcall and improve performance.

I used it extensively this last 2 months in game production and therefore I might have report many bugs about it. 
This said, it was mostly edge cases custom vertexNode, edge devices/browser (ios beta safari webpu flag enabled) or api improvement request but issues are getting resolve fast everytime.

Overall me and my teams are more than happy with BatchedMesh for the performance and versatility it offers and I can't visualize new medium/large threejs project without it.

There is room for improvement and stabilization but its going in the right direction + as @RenaudRohlinger [mention here](https://github.com/mrdoob/three.js/issues/29580#issuecomment-2398614685) its gonna gain even more performance on WebGPU soon. I just feel it's getting kind of big and it's for pretty advanced users that wouldn't mind adding an extra import on their projects 🤔 @Makio64 You make it sound as if I'm suggesting removing it from the project completely 😅

I'm just suggesting moving that file to addons. The renderers would remain intact.  > @Makio64 You make it sound as if I'm suggesting removing it from the project completely 😅
> 
> I'm just suggesting moving that file to addons. The renderers would remain intact.

@mrdoob woops, sorry! I understand the point of the size, I think BatchedMesh can be simplified / factorized as I suggested here : https://github.com/mrdoob/three.js/pull/29591#issuecomment-2403202857 . I'll PR it this weekend I was also wondering if we could implement a simpler basic version of `BatchedMesh` in the core (like the one from the initial PRs) and then maybe a more optimized version with a larger API in addons that derives from `BatchedMesh`. Ideally, they share the same core functionality. > I just feel it's getting kind of big and it's for pretty advanced users

I'm mostly trying to understand the line you're feeling for when something belongs in core and when something belongs in the examples folder and what the concerns are more exactly so I can suggest other options for mitigating them. Regarding size - this class will be treeshaken when building. I'd also like to avoid thrash with dependent projects. Moving the class (again) is a breaking change and means a major release for any dependent libraries.

From my perspective this is where I'd wanted BatchedMesh to be in terms of features when I started working on it around almost a year ago (!!). In any other engine this would be considered a core feature and, in fact, is as simple as a toggle. But I understand there are concerns about complexity.

In the past I've suggested adding `BatchedGeometry`, which would be responsible for managing sub geometries and geometry ids, while `BatchedMesh` would be responsible for managing instance ids which would allow for cleaning up and simplifying the main class a bit but I haven't heard other thoughts on this.

> I was also wondering if we could implement a simpler basic version of BatchedMesh in the core ... then maybe a more optimized version with a larger API in addons that derives from BatchedMesh.

This is something I could support.

But I'd prefer not to block this PR consider it's bug fixes on this discussion. Can we make a separate issue to discuss, instead?",,"Related issue: #29527

**Description**

I found some issues while working on a batched mesh implementation for 3d tiles (https://github.com/NASA-AMMOS/3DTilesRendererJS/pull/800) that takes advantage of the new functions from #29527, #29577 and saw that calling optimize could result in geometry displaying incorrectly.

- Store the next insertion points for geometry as dedicated variables rather than using `reservedRanges` since there is now no guarantee of the ranges being presorted.
- Handle the case in expanding the geometry size in which the index buffer array can change array type (ie Uint16 before expanding to Uint32 afterward).
- Presort the order of the geometry ranges in the optimize function before shifting data since there's no guarantee of order.
- Update some comments and spelling.

Once I've gotten the 3d tiles BatchedMesh plugin completely working and merged I'll plan to submit a PR with some cleanup for BatchedMesh, as well.",
29663,2024-10-15T13:03:29Z,2024-10-15T17:51:23Z,yomotsu,0,0,2,20,2,1,1,[],,0,17322.0,0,0,0,0,6243714.762234,,0,2,1,False,[],,,"Fixed #29660

**Description**

`scene.remove(CSS2DObjectInstance)` may not work correctly if the CSS2DRenderer is inside an iframe.
Here is the demo of the problem:
https://jsfiddle.net/87f9azgn/

This PR is to fix it.

As I mentioned https://github.com/mrdoob/three.js/issues/29660#issuecomment-2413786154 ,
The constructor of DOM element depends on its window.
Therefore `object.element instanceof Element` may not work in an iframe.
`Element` is actually `window.Element` and not a `iframeWindow.Element`.",
29657,2024-10-14T23:04:52Z,2024-10-15T08:31:44Z,donmccurdy,1,0,1,22,5,1,1,[],179.0,0,45371.0,0,0,0,0,6265982.99356,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 690.29 <br> **171.01** | +368 B <br> **+78 B** |
| WebGPU | 814.88 <br> **219.41** | 814.88 <br> **219.41** | +0 B <br> **+0 B** |
| WebGPU Nodes | 814.39 <br> **219.28** | 814.39 <br> **219.28** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 463.31 <br> **111.89** | +368 B <br> **+76 B** |
| WebGPU | 537.7 <br> **145.08** | 537.7 <br> **145.08** | +0 B <br> **+0 B** |
| WebGPU Nodes | 493.81 <br> **134.81** | 493.81 <br> **134.81** | +0 B <br> **+0 B** |",,"Implements inline sRGB decoding when a VideoTexture is used as the `.emissiveMap` for built-in materials.

Related:

- Fixes #29625
- Related #26521


Workaround for browser issues:


- https://issues.chromium.org/issues/40915685
- https://bugs.webkit.org/show_bug.cgi?id=222822",
20119,2020-08-18T23:43:03Z,2020-08-19T07:24:22Z,WestLangley,4,0,1,144,1,0,0,[],27670.0,0,131169569.0,0,0,0,0,6294695.17377,,0,1,1,False,"['XmmmmmmY', 'WestLangley', 'mrdoob']","Yeah, @elalish is looking into it. Thanks!  import { RoughnessMipmapper } from 'three/examples/jsm/utils/RoughnessMipmapper.js';
Does the file exist? @XmmmmmmY `RoughnessMipmapper` has been [removed](https://github.com/mrdoob/three.js/pull/23143).",,"`RoughnessMipmapper` may not be working correctly, but it is not a result of this PR, which is clean up only.",
29654,2024-10-14T20:34:37Z,2024-10-14T21:58:57Z,Mugen87,1,0,1,10,1,0,0,[],175.0,0,5060.0,0,0,0,0,6315310.571437,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.81 <br> **219.39** | 814.88 <br> **219.41** | +77 B <br> **+22 B** |
| WebGPU Nodes | 814.32 <br> **219.25** | 814.39 <br> **219.28** | +77 B <br> **+22 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.62 <br> **145.06** | 537.7 <br> **145.08** | +77 B <br> **+20 B** |
| WebGPU Nodes | 493.74 <br> **134.79** | 493.81 <br> **134.81** | +77 B <br> **+18 B** |",,"Fixed #29653.

**Description**

`GPUSamplerDescriptor.maxAnisotropy` can only be set to a value greater than `1` if all filter modes are set to `linear`.",
29652,2024-10-14T14:33:44Z,2024-10-14T18:05:05Z,hybridherbst,0,0,1,15,1,0,0,[],,0,14160.0,0,0,0,0,6327863.76077,,0,1,1,False,[],,,"Fixed #29650.

**Description**

Adds the so-far missing Normal Map node to convert from a 0..1 normal texture to -1..1 range.

This makes it far easier to use normal mapping in the playground, previously to the best of my knowledge one had to split the Texture output into three floats and remap them individually:
<img width=""1494"" alt=""image"" src=""https://github.com/user-attachments/assets/a5376ac7-bb77-4e7a-98b4-6d8035b8393c"">

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Needle](https://needle.tools)*
",
29649,2024-10-14T12:40:43Z,2024-10-14T13:16:05Z,sungpaks,0,0,2,6,1,0,0,[],,0,2133.0,0,0,0,0,6346672.919048,,0,2,1,False,[],,,"[How to dispose of objects](https://threejs.org/docs/index.html#manual/ko/introduction/How-to-dispose-of-objects)
- fix typo
- untranslated part (about `ImageBitmap.close()`)",
29647,2024-10-14T09:40:16Z,2024-10-14T09:46:05Z,Mugen87,0,0,1,1,1,0,0,[],,0,349.0,0,0,0,0,6359284.376557,,0,1,1,False,[],,,"Related issue: -

**Description**

`NodeMaterial.normals` does not exist anymore.",
29640,2024-10-13T18:29:36Z,2024-10-14T09:34:46Z,renovate[bot],0,0,1,6,1,0,0,[],,0,54344.0,0,0,0,0,6359929.546932,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `6db8d63` -> `c36620d` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMTUuMSIsInVwZGF0ZWRJblZlciI6IjM4LjExNS4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29643,2024-10-14T07:24:58Z,2024-10-14T08:09:08Z,puxiao,0,0,1,202,17,0,0,[],,0,2650.0,0,0,0,0,6365102.719013,,0,1,1,False,[],,,,
29641,2024-10-13T18:30:03Z,2024-10-13T22:01:29Z,renovate[bot],0,0,1,6,1,0,0,[],,0,12713.0,0,0,0,0,6401535.276074,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [magic-string](https://redirect.github.com/rich-harris/magic-string) | [`0.30.11` -> `0.30.12`](https://renovatebot.com/diffs/npm/magic-string/0.30.11/0.30.12) | [![age](https://developer.mend.io/api/mc/badges/age/npm/magic-string/0.30.12?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/magic-string/0.30.12?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/magic-string/0.30.11/0.30.12?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/magic-string/0.30.11/0.30.12?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rich-harris/magic-string (magic-string)</summary>

### [`v0.30.12`](https://redirect.github.com/rich-harris/magic-string/blob/HEAD/CHANGELOG.md#03012-2024-10-11)

[Compare Source](https://redirect.github.com/rich-harris/magic-string/compare/v0.30.11...v0.30.12)

##### Performance Improvements

-   skip line break mappings ([#&#8203;284](https://redirect.github.com/rich-harris/magic-string/issues/284)) ([5b1ecf7](https://redirect.github.com/rich-harris/magic-string/commit/5b1ecf701f663d29891c8d24b3f5869147757a99))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMTUuMSIsInVwZGF0ZWRJblZlciI6IjM4LjExNS4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29597,2024-10-09T11:45:51Z,2024-10-09T15:54:21Z,Mugen87,13,1,4,582,4,1,0,[],936.0,0,373983.0,0,0,0,0,6410117.62593,,0,4,1,False,"['sunag', 'mrdoob', 'gonnavis', 'Mugen87']","Regarding the blur: I think it's better to keep it out of `SSRNode` and use e.g. `GaussianBlurNode` and connect it to the output of `SSRNode`. E.g.
```js
const blurPass = gaussianBlur( ssr.getTextureNode() );
```

I've tried that in the demo but the blurred SSR gets darken edges. Not sure why that happens yet.

Blur:

<img width=""260"" alt=""image"" src=""https://github.com/user-attachments/assets/ca52dc6f-3b28-4a61-a76b-1e2b6f2407f5"">


No Blur:

<img width=""287"" alt=""image"" src=""https://github.com/user-attachments/assets/476dd079-8aae-4747-85fe-a348bc215f92"">
 > I've tried that in the demo but the blurred SSR gets darken edges. Not sure why that happens yet.

I think we need to add opacity support in `gaussianBlur()`. I had a similar problem a few weeks ago, I think it's the same thing. > The bad thing is that the fragment shader (to be more precise the raymarching portion) runs poorly in WGSL. On a mac Mini with M2 Pro and a 5K resolution I get just 38 FPS. With WebGL, I get the expected 60 FPS. So that needs a closer investigation. Especially since the SSR already runs at half resolution (you can tweak this via a resolutionScale property).

Sharing my results with FPS limiter turned off.

- WebGPURenderer - ~3500 FPS ( WebGL Backend  )
- WebGPURenderer - ~3150 FPS ( WebGPU Backend  )
- WebGLRenderer - ~1300FPS

The new approach is much more performant. 🎉🎉🎉

 FYI @gonnavis  > I've tried that in the demo but the blurred SSR gets darken edges. Not sure why that happens yet.

Just want to confirm that the new `premultipliedGaussianBlur()` solves this issue :tada:. So everyone who wants to soften the SSR reflections can use this:
```js
const blurPass = premultipliedGaussianBlur( ssr.getTextureNode(), 0.5 );
```
The second parameter controls the intensity of the blur. IMO, a subtle blur should be sufficient for most use cases.
 > The bad thing is that the fragment shader (to be more precise the raymarching portion) runs poorly in WGSL. On a mac Mini with M2 Pro and a 5K resolution I get just 42 FPS. With WebGL, I get the expected 60 FPS. So that needs a closer investigation. 

Did some more testing and on Safari with enabled WebGPU the demo runs flawless with 60 FPS on the same device. But latest Chrome and even Chrome Canary have performance issues with the SSR demo. I suspect this is related to loop-heavy WGSL code.

Before I report a bug at the Chromium bug tracker, I would appreciate if someone with a Mac (M processor) can test the SSR demo with Chrome and Safari. If the frame rate is slower in Chrome, it's probably the same issue.

https://rawcdn.githack.com/mrdoob/three.js/dev/examples/webgpu_postprocessing_ssr.html Hello @Mugen87 , tried on my mac that, can run at 120 fps (Full fps?) on both Chrome and Firefox.
And for Chrome, it's interesting that will increase fps after rotate.

Chrome (Just open and wait, do nothing): 85 fps
<img width=""1511"" alt=""image"" src=""https://github.com/user-attachments/assets/80d904a7-eed2-42a1-b2ff-58f5de39e04c"">

Chrome (Do some rotate): 120 fps
<img width=""1511"" alt=""image"" src=""https://github.com/user-attachments/assets/d24af699-af33-4d56-bef9-b15fc037a0dd"">

Firefox: 120 fps
<img width=""1512"" alt=""image"" src=""https://github.com/user-attachments/assets/a0937535-2532-4aed-89ec-4db99ec55758"">

<img width=""232"" alt=""image"" src=""https://github.com/user-attachments/assets/410ad17b-e365-4e60-9bed-a577116fa272"">

<img width=""455"" alt=""image"" src=""https://github.com/user-attachments/assets/c4ad48ed-d4a3-4cf0-96a9-18acee668975"">

<img width=""371"" alt=""image"" src=""https://github.com/user-attachments/assets/55854e11-ce70-4236-a35e-2bcdc14fc849"">

 Umm, no, not stable, tried again that only showing about 80 fps.
And the real feeling very laggy, like below 10 fps.
I don't think changed many opening softwares.

<img width=""1511"" alt=""image"" src=""https://github.com/user-attachments/assets/1f1f01c9-cdc3-4a44-a9cb-a32109817835"">
 Oh, the low fps caused by opening the page on Chrome and Firefox simultaneously.
Back to 120 fps and very fluent again after close one, only opening one. Low fps when viewing from bottom to top (Even only opening one page) on Chrome.
Fine for Firefox.

Chrome: around 30 fps
<img width=""1511"" alt=""image"" src=""https://github.com/user-attachments/assets/d1783a98-029b-4e02-914e-4b822d174062"">

Firefox: 120 fps
<img width=""1511"" alt=""image"" src=""https://github.com/user-attachments/assets/f3e49cd0-d5eb-44e7-9bb5-688b3eacd440"">

 Thanks for your feedback!

The viewing angle influences the runtime behavior/complexity of the ray marching. However, if the FPS reacts so sensitive in Chrome, it suspect the same performance issue on your device. > the FPS reacts so sensitive in Chrome, it suspect the same performance issue on your device.

Yea I think so.
Fine on Firefox, still full 120 fps when viewing from bottom to top. Bug report: https://issues.chromium.org/issues/372714384",,"Related issue: #29295

**Description**

This PR ports `SSRPass` to `WebGPURenderer` as `SSRNode`. I have not ported all features yet (bouncing) since I'd like to focus on the existing open issues first. 

Good things first: Instead of 3 passes (beauty/depth + normals + metalness), `SSRNode` now gets its (shared) inputs with just one pass thanks to MRT (🎉 ). Besides, #21487 should be partly solved since the implementation use the `metalness()` TSL function to render the actual metalness values of the materials. What's missing is some sort of attenuation during the SSR blending that depends on the metalness/roughness values. 
Finally, `SSRNode` performs no hierarchy traversal like `SSRPass` does for its metalness rendering which is also a plus in performance.

The bad thing is that the fragment shader (to be more precise the raymarching portion) runs poorly in WGSL. On a mac Mini with M2 Pro and a 5K resolution I get just 42 FPS. With WebGL, I get the expected 60 FPS. So that needs a closer investigation. Especially since the SSR already runs at half resolution (you can tweak this via a `resolutionScale` property).

I took the time to document the `ssr()` TSL function since I bet there is some room for refactoring and performance improvements. We might want to study different SSR implementations to further improve this one. Inputs from the community are welcome!
",@sunag This imitates the previous normal blending but I hope we can find an easier way to blend the reflective colors onto the beauty pass.
29638,2024-10-13T16:32:25Z,2024-10-13T18:28:24Z,renovate[bot],0,0,1,4,2,0,0,[],,0,7062.0,0,0,0,0,6414245.521533,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/upload-artifact](https://redirect.github.com/actions/upload-artifact) | action | digest | `5076954` -> `b4b15b8` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMTUuMSIsInVwZGF0ZWRJblZlciI6IjM4LjExNS4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29637,2024-10-13T16:32:21Z,2024-10-13T18:28:33Z,renovate[bot],0,0,1,16,4,0,0,[],,0,7065.0,0,0,0,0,6414247.064056,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/checkout](https://redirect.github.com/actions/checkout) | action | digest | `692973e` -> `eef6144` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4xMTUuMSIsInVwZGF0ZWRJblZlciI6IjM4LjExNS4xIiwidGFyZ2V0QnJhbmNoIjoiZGV2IiwibGFiZWxzIjpbXX0=-->
",
29633,2024-10-12T19:07:09Z,2024-10-13T12:27:15Z,Mugen87,0,0,1,94,2,0,0,[],,0,62587.0,0,0,0,0,6435837.461096,,0,1,1,False,[],,,"Fixed #29569

**Description**

The PR upgrades `prettify` to the latest version `2013-03-04` which fixes the code formatting in Firefox.",
29621,2024-10-11T09:05:37Z,2024-10-11T15:11:16Z,Mugen87,5,0,2,49,1,0,0,[],179.0,0,177999.0,0,0,0,0,6442918.484142,,0,2,1,False,"['github-actions[bot]', 'mrdoob', 'Mugen87', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.17 <br> **219.22** | 814.71 <br> **219.35** | +537 B <br> **+132 B** |
| WebGPU Nodes | 813.68 <br> **219.06** | 814.22 <br> **219.22** | +537 B <br> **+163 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.52 <br> **145.03** | 537.56 <br> **145.04** | +37 B <br> **+3 B** |
| WebGPU Nodes | 493.64 <br> **134.76** | 493.67 <br> **134.77** | +37 B <br> **+7 B** | Coincidentally I was thinking of something like this, but without the `reflector`. I made a change so that we don't need the camera as a parameter.

![image](https://github.com/user-attachments/assets/a93936a4-b464-46c7-b56c-440b05b05021)
 @Mugen87 Should a example use this? May go unnoticed otherwise. Definitely. Just wanted to go ahead and add `getDepthNode()` for devs who want a replacement for `ReflectorForSSRPass`. This module is like reflector but with distance attenuation support. When developers can at least request the depth from `ReflectorNode`, they can built a custom solution until we provide a bit more API. Maybe adding `getLinearDepthNode()` would also be a good idea since otherwise the camera handling on app level is a bit tricky (you would need the internal virtual camera for this).

I'm still unsure about the API and the kind of internal solution. E.g. `ReflectorNode` could have a `fade` and `maxDistance` property but this is maybe too specific. wip tiled lighting.

![image](https://github.com/user-attachments/assets/e8978556-5f2b-41a9-9620-f945b15617d4)
",,"Related issue: -

**Description**

A common use case with mirrors is to create faded reflections via some sort of distance attenuation, see https://discourse.threejs.org/t/creating-a-fading-reflection/3831.

This PR introduces a new constructor parameter  `depth`. When set to `true`, the depth information of the reflection pass is saved into a depth texture.

It's then possible to query a depth texture node via `getDepthNode()`. Since `ReflectorNode` supports multiple virtual cameras, it's required to pass the current camera used for rendering to select the correct depth node.

@sunag Do you think this API goes in the right direction?",
29626,2024-10-11T15:34:49Z,2024-10-11T15:46:59Z,sunag,4,0,1,2,2,0,0,[],30999.0,0,154239.0,0,0,0,0,6443326.889582,,0,1,1,False,"['sunag', 'Mugen87', 'Makio64', 'mrdoob']","Hmm... Is this a bug in Chrome Android? 🤔

https://raw.githack.com/mrdoob/three.js/dev/examples/index.html?q=webgpu#webgpu_ocean

https://github.com/user-attachments/assets/2b16e1a5-0c54-449a-9025-29199428a9bc


 Bug on chrome iOS (webgl backend )

https://github.com/user-attachments/assets/57c776ee-d526-45fe-9bb4-de919880659c

Bug on safari iOS (webgpu enabled flag)
https://github.com/user-attachments/assets/16a7f7ad-904f-4a6b-893a-8bf2a6b9887e

 @mrdoob I'm seeing this on a Pixel 8a and Chrome as well. But not on other devices.

@Makio64 I can reproduce this with Firefox and macOS, too. It works with Safari+WebGPU but not Safari+WebGL. Here work properly!
- Samsung Galaxy Z Flip 4
- Chrome 129.0.6668.
- Android 14",,"Related issue: https://github.com/mrdoob/three.js/pull/29606#issuecomment-2406481113

**Description**

Now is possible better notice the normals maps too.
",
29599,2024-10-09T18:22:50Z,2024-10-09T19:14:59Z,Mugen87,1,0,2,83,3,0,0,[],193.0,0,262285.0,0,0,0,0,6498000.267782,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 811.49 <br> **218.59** | 811.63 <br> **218.63** | +137 B <br> **+39 B** |
| WebGPU Nodes | 811 <br> **218.46** | 811.13 <br> **218.5** | +137 B <br> **+38 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.71 <br> **144.58** | 535.71 <br> **144.58** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.83 <br> **134.32** | 491.83 <br> **134.32** | +0 B <br> **+0 B** |",,"Related issue: -

**Description**

This PR adds `getScreenPosition()` as a helper to `PostProcessingUtils`. It also documents the function as well as `getViewPosition()` so it's more clear what these functions do.",
29630,2024-10-12T09:17:50Z,2024-10-12T09:38:46Z,Mugen87,1,0,1,4,1,0,0,[],180.0,0,1256.0,0,0,0,0,6532530.41154,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.82 <br> **219.39** | 814.86 <br> **219.4** | +33 B <br> **+15 B** |
| WebGPU Nodes | 814.33 <br> **219.26** | 814.36 <br> **219.27** | +33 B <br> **+15 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.67 <br> **145.07** | 537.67 <br> **145.07** | +0 B <br> **+0 B** |
| WebGPU Nodes | 493.78 <br> **134.81** | 493.78 <br> **134.81** | +0 B <br> **+0 B** |",,"Fixed https://github.com/mrdoob/three.js/pull/29626#issuecomment-2408400479.

**Description**

`ReflectorNode` updates the projection matrix of its virtual camera such that objects behind the reflector are clipped. The existing computation only works for WebGPU. WebGL needs different code.",
29606,2024-10-10T03:18:12Z,2024-10-10T03:42:39Z,sunag,7,1,4,81,4,1,0,[],1173.0,0,193121.0,0,0,0,0,6535043.803404,,0,4,1,False,"['github-actions[bot]', 'sunag', 'Mugen87', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 812.47 <br> **218.85** | 812.49 <br> **218.86** | +16 B <br> **+5 B** |
| WebGPU Nodes | 811.98 <br> **218.72** | 812 <br> **218.73** | +16 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.55 <br> **144.82** | 536.56 <br> **144.82** | +16 B <br> **+6 B** |
| WebGPU Nodes | 492.66 <br> **134.54** | 492.68 <br> **134.55** | +16 B <br> **+6 B** | Very nice!

Should transmission use it too? > Should transmission use it too?

That's the goal, although I still didn't get the same approximate result. I've tried to blur the result of a reflector but encountered an issue with both hash and gaussian blur: https://jsfiddle.net/c79ak854/1/

- When orbiting the camera around the scene, the blurred reflections of `hashBlur` get an offset. 

<img width=""768"" alt=""image"" src=""https://github.com/user-attachments/assets/a0af7aa1-60e3-49b4-a173-8a7a582c1942"">

- When using `gaussianBlur()`, the reflections are completely missing:

<img width=""554"" alt=""image"" src=""https://github.com/user-attachments/assets/e13455cf-1ff8-41ee-b513-0535ee8ed59b"">
 https://github.com/mrdoob/three.js/pull/29619

It was necessary 3 fixes, but now it's working.

hashBlur
![image](https://github.com/user-attachments/assets/3c75c355-1d9d-4fb8-89a5-8c70e26ae884)

gaussian blur
![image](https://github.com/user-attachments/assets/65646305-a965-402b-b73b-a3d6a5dbc1bf)
 I noticed `webgpu_ocean` has a similar issue:

https://threejs.org/examples/webgpu_ocean.html

https://github.com/user-attachments/assets/7f4ff67f-5829-4099-be07-76c7d9b99104 Fixed too :) https://github.com/mrdoob/three.js/pull/29626",,"**Description**

`hashBlur` is more performant in tests, the main reason is because it doesn't need mipmaps, and it seems to have satisfactory quality, although with noise it has a better smoother blur transition amount.

- [x] [added hashBlur](https://github.com/mrdoob/three.js/commit/d849f33395491bdac83119472d2cf035d5992c5d)
- [x] [improve webgpu_backdrop_area example](https://github.com/mrdoob/three.js/commit/1d31f7e8140378d3f260c96e1d72c770ab7db1f2)

![image](https://github.com/user-attachments/assets/1d5ada8e-adf7-45c9-9595-5605c9b4626e)
","There might be texture nodes without `uvNode` so maybe:
```js
const targetUV = textureNode.uvNode || uv();
```
Without this fix, I can't use the blur with `ssrPass.getTextureNode()`."
29627,2024-10-11T22:42:18Z,2024-10-11T22:42:40Z,sunag,1,0,1,4,1,0,0,[],217.0,0,218.0,0,0,0,0,6571701.072347,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 814.71 <br> **219.35** | 814.71 <br> **219.35** | +0 B <br> **+0 B** |
| WebGPU Nodes | 814.22 <br> **219.22** | 814.22 <br> **219.22** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.56 <br> **145.04** | 537.56 <br> **145.04** | +0 B <br> **+0 B** |
| WebGPU Nodes | 493.67 <br> **134.77** | 493.67 <br> **134.77** | +0 B <br> **+0 B** |",,Related issue: https://github.com/mrdoob/three.js/pull/29621,
29616,2024-10-10T23:38:00Z,2024-10-11T01:33:11Z,DevinCLane,0,0,1,2,1,0,0,[],,0,79165.0,0,0,0,0,6575813.308661,,0,1,1,False,[],,,"Small typo in prerequisites page.

> if you follow this rule **you** code will match...

switched to 

> if you follow this rule **your** code will match...

Related issue: none
",
29619,2024-10-11T02:47:35Z,2024-10-11T14:41:33Z,sunag,1,0,3,81,4,0,0,[],185.0,0,42841.0,0,0,0,0,6600762.680706,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.92 <br> **170.93** | 689.92 <br> **170.93** | +0 B <br> **+0 B** |
| WebGPU | 813.52 <br> **219.09** | 814.17 <br> **219.22** | +652 B <br> **+125 B** |
| WebGPU Nodes | 813.03 <br> **218.94** | 813.68 <br> **219.06** | +652 B <br> **+116 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.94 <br> **111.81** | 462.94 <br> **111.81** | +0 B <br> **+0 B** |
| WebGPU | 537.35 <br> **145** | 537.52 <br> **145.03** | +172 B <br> **+36 B** |
| WebGPU Nodes | 493.46 <br> **134.72** | 493.64 <br> **134.76** | +172 B <br> **+39 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29606#issuecomment-2405894047

**Description**

Maybe the sequential fix show others issue that I don't detected yet.

- [x] [GaussianBlurNode: preserves input UV](https://github.com/mrdoob/three.js/commit/1f50f863620e1802a7cb0a8a1a5516874e3c4b83)
- [x] [ReflectorNode: add multi-sampler support](https://github.com/mrdoob/three.js/commit/b48197cef0bfe3fea331601194c42bbb98416d31)
- [x] [Nodes: Fix sequential events of update before](https://github.com/mrdoob/three.js/commit/5c932e2418969eb965a8201e382c2e79f7fc7bec)",
29620,2024-10-11T07:35:08Z,2024-10-11T07:57:11Z,ShanHaiSiLu,0,0,1,6,1,0,0,[],,0,1448.0,0,0,0,0,6624903.143474,,0,1,1,False,[],,,"**Description**

Modified some inaccurate and ambiguous expressions in the Chinese document.",
29618,2024-10-11T02:37:02Z,2024-10-11T02:54:09Z,mrdoob,0,0,1,23,28,0,0,[],,0,1263.0,0,0,0,0,6642975.45244,,0,1,1,False,[],,,,
29594,2024-10-08T21:22:40Z,2024-10-10T17:24:27Z,Spiri0,6,11,17,46,7,3,0,[],191.0,0,193679.0,0,0,0,0,6642221.84738,,0,17,1,False,"['github-actions[bot]', 'Spiri0', 'RenaudRohlinger', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 812.45 <br> **218.85** | 812.95 <br> **218.95** | +503 B <br> **+101 B** |
| WebGPU Nodes | 811.96 <br> **218.72** | 812.46 <br> **218.82** | +503 B <br> **+94 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.56 <br> **144.82** | 536.92 <br> **144.9** | +354 B <br> **+78 B** |
| WebGPU Nodes | 492.68 <br> **134.55** | 493.03 <br> **134.63** | +354 B <br> **+78 B** | I think should included `encoder.drawIndirect()` and `drawIndexedIndirect()` in case of the user use a `IndirectStorageBuffer...`

https://github.com/mrdoob/three.js/blob/7bad5a603ab630d8369c50976ed564c40354a251/src/renderers/webgpu/WebGPUBackend.js#L975 @sunag for the passEncoderGPU we will need drawIndirect and drawIndexedIndirect but I think we can keep it analogous to draw and drawIndexed as I suspect you imagine.
draw and drawIndexed are CPU -> GPU
drawIndirect and drawIndexedIndirect are GPU -> GPU with our indirect storage buffer.
I haven't dealt with the passEncoder the least so far because I've concentrated a lot on what will be necessary in the compute shader to do frustum, culling and backface culling. But yes, the passEncoder is of course just as important. Since I have never done such extensive PR and having too much at once makes the review difficult, in this PR I am only concerned with indirect storage. The topic with the custom structs and the passEncoder are the next important steps. This is a pretty exciting topic I think we just need to detect if the buffer is indirect and directional to a new function `draw*Indirect`, we will have to keep both.

Would you have a minimal example for us to test? It would be very valuable. A solid use case could be object-culling in our `webgpu_performance_renderbundle` example. (https://toji.dev/webgpu-best-practices/render-bundles.html#indirect-draws)

 Excellent progress has already been made by @aardgoose on this topic in https://github.com/mrdoob/three.js/pull/29372. I won't find time again until this evening (European time). But I'm looking forward to being able to devote myself to the topic again after work.",,"Related issue: #29568

This PR introduces the indirectStorageBuffer class. This uses the WebGPU buffer flag INDIRECT to create DrawBuffers. These DrawBuffers can then be filled in compute shaders and later read by drawIndirect. In this way, the visibility check is moved from the CPU to the GPU.

```
//usage
this.drawBuffer = storage( new THREE.IndirectStorageBufferAttribute( new Uint32Array( 4 ).fill( 0 ) ), 'uvec4' );
```

currently produces the following wgsl scheme ( Numbers and names are relative, the example here is from my test app)

```
struct NodeBuffer_562Struct {
	nodeUniform0 : array< vec4<u32> >

};
@binding( 1 ) @group( 0 )
var<storage, read_write> NodeBuffer_562 : NodeBuffer_562Struct;
```

The aim is this scheme here (names are again relative, the node system does this and connects them with the clear names that you choose as a user, I'm concerned with the struct):

```
struct DrawBuffer {
   vertexCount: u32,
   instanceCount: atomic<u32>,
   firstVertex: u32,
   firstInstance: u32,
};
@group(x) @binding(y) 
var<storage, read_write> drawBuffer: DrawBuffer;
```

The reason why I didn't implement this right away is because a lot more is necessary for the visibility check in the compute shader like camera and frustum elements: ( cameraProjectionMatrix, inverseCameraProjectionMatrix, cameraViewMatrix, cameraNear, cameraFar, cameraPosition, frustum, screenWidth, screenHeight ) and handing these all over individually to a shader seems not the best way to me. It is more elegant to store the matrix elements, vectors, scalars in an f32 storageBuffer and pass them to the compute shader and then have all these elements together with a struct in the shader:

```
struct FrustumCulling {
   cameraProjectionMatrix: mat4x4<f32>,
   cameraProjectionMatrixInverse: mat4x4<f32>,
   cameraViewMatrix: mat4x4<f32>,
   cameraNear: f32,
   cameraFar: f32,
   cameraPosition: vec3<f32>,
   screenWidth: f32,
   screenHeight: f32,
   frustum: array<vec4<f32>, 6>,
};
```

For this I imagine a custom struct builder. Because in addition to the camera and frustum, the ModelWorldMatrices and some mesh informations are also important. Since this requires some changes in the wgsl node builder, this is step two. With these steps and furthers it will be possible to keep the visibility check completely universal in the GPU side and to use the full potential of drawIndirect and drawIndexedIndirect.






","This should not be extended from `StorageBufferAttribute`? I think that way we wouldn't need so many checks. We could write indirect = false as standard in the constructor of StorageBufferAttribute and if we pass true, isIndirectStorageBufferAttribute would be triggered. This would allow us to forgo IndirectStorageBufferAttribute.
 I think extending the class is better for now. I take care of it tomorrow. Now I urgently need to go to bed. Thank you for taking the time to look at this No rush, take your time, thanks for your work :) Hmm.. I  thought extends `IndirectStorageBufferAttribute` from `StorageBufferAttribute`. https://github.com/mrdoob/three.js/pull/29594#discussion_r1792587593

Changing the constructor signature can be confusing, and having a class to handle indirect buffering can even help with reading the code among some other minor optimizations. Agreed. should remove the changes in StorageBufferAttribute and simply create a new file `IndirectStorageBufferAttribute`:
```js
import { StorageBufferAttribute } from '../../core/StorageBufferAttribute.js';

class IndirectStorageBufferAttribute extends StorageBufferAttribute {

	constructor( array, itemSize, typeClass = Float32Array ) {

		super( array, itemSize, typeClass );

		this.isIndirectStorageBufferAttribute = true;

	}

}

export default IndirectStorageBufferAttribute;
``` ah ok, on this occasion I recommend as a distinguishing criterion to use

""this.isIndirect = false;"" in StorageBufferAttribute.js
""this.isIndirect = true;"" in IndirectStorageBufferAttribute.js

The reason I did this is because I didn't like the duplication of StorageBuffer.js and NodeStorageBuffer.js. I first doubled this because StorageBuffer.js had no distinguishing criterion which is important for later queries. 
This means that with isStorageBufferAttribute in both classes ( StorageBufferAttribute / IndirectStorageBufferAttribute ) we have the opportunity to query anywhere in the code whether it is a storageBufferAttribute and with isIndirect whether it is an indirect storageBuffer. This makes things a lot easier because unnecessary duplication is not necessary in all places where it is only necessary to check whether there is a storageBuffer and / or indirect.

@sunag I don't have a simple example at the moment because I'm testing in my virtual geometry environment. But I have something in mind. The simplest possible example would be an instancedGeometry in which individual instances are randomly made invisible or visible over time with a sin function and a threshold value of 0.5 in the compute shader.
I looked at your reference to the draw function. I'll have to take a closer look at this because so far I've focused on the part with the visibility test. I think it makes sense if the geometries as renderObjects carry the drawBuffer as an attribute if you want to use drawIndirect. This makes it easy to distinguish between a mixture of many geometries that use draw and others that use drawIndirect.

@RenaudRohlinger Thanks for your link, it helped me understand renderBundles. I think if we get both combined in the end we can pop the corks

Suggestions for improvement are welcome





 > ah ok, on this occasion I recommend as a distinguishing criterion to use
""this.isIndirect = false;"" in StorageBufferAttribute.js
""this.isIndirect = true;"" in IndirectStorageBufferAttribute.js

The @RenaudRohlinger example already does this just once it has the `isIndirectStorageBufferAttribute=true` variable in `IndirectStorageBufferAttribute`, this will always be missing (undefined) in `StorageBufferAttribute`. @Spiri0 I made some revisions and I'm going to merge it up, I'll see if I implement these encoders separately, I want to see if I make a simple example too so we can have them in the official examples. I like it, it became pretty beauty in the end. As a user, I was in awe of tackle so many critical parts of the node system. The topic helped me to understand it much better. It is a very impressive construction.

I will now take a closer look at the custom structs that I have in mind. The big advantage of this will be instead of e.g. 30 individual bindings only need 4 or 5. This reduces overhead, pools cache and makes the shader more compact.

As for the encoder topic. I had looked at the geometries class in the node system because I had in mind to pass the drawBuffers as an attribute with the geometries as a renderObject, but it seams you have a better solution in mind 👍"
29617,2024-10-11T02:03:26Z,2024-10-11T02:35:55Z,dependabot[bot],0,0,1,76,1,0,0,['Dependencies'],,0,1957.0,0,0,0,0,6644298.060854,,0,1,1,False,[],,,"Bumps [cookie](https://github.com/jshttp/cookie) and [express](https://github.com/expressjs/express). These dependencies needed to be updated together.
Updates `cookie` from 0.6.0 to 0.7.1
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/jshttp/cookie/releases"">cookie's releases</a>.</em></p>
<blockquote>
<h2>0.7.1</h2>
<p><strong>Fixed</strong></p>
<ul>
<li>Allow leading dot for domain (<a href=""https://redirect.github.com/jshttp/cookie/issues/174"">#174</a>)
<ul>
<li>Although not permitted in the spec, some users expect this to work and user agents ignore the leading dot according to spec</li>
</ul>
</li>
<li>Add fast path for <code>serialize</code> without options, use <code>obj.hasOwnProperty</code> when parsing (<a href=""https://redirect.github.com/jshttp/cookie/issues/172"">#172</a>)</li>
</ul>
<p><a href=""https://github.com/jshttp/cookie/compare/v0.7.0...v0.7.1"">https://github.com/jshttp/cookie/compare/v0.7.0...v0.7.1</a></p>
<h2>0.7.0</h2>
<ul>
<li>perf: parse cookies ~10% faster (<a href=""https://redirect.github.com/jshttp/cookie/issues/144"">#144</a> by <a href=""https://github.com/kurtextrem""><code>@​kurtextrem</code></a> and <a href=""https://redirect.github.com/jshttp/cookie/issues/170"">#170</a>)</li>
<li>fix: narrow the validation of cookies to match RFC6265 (<a href=""https://redirect.github.com/jshttp/cookie/issues/167"">#167</a> by <a href=""https://github.com/bewinsnw""><code>@​bewinsnw</code></a>)</li>
<li>fix: add <code>main</code> to <code>package.json</code> for rspack (<a href=""https://redirect.github.com/jshttp/cookie/issues/166"">#166</a> by <a href=""https://github.com/proudparrot2""><code>@​proudparrot2</code></a>)</li>
</ul>
<p><a href=""https://github.com/jshttp/cookie/compare/v0.6.0...v0.7.0"">https://github.com/jshttp/cookie/compare/v0.6.0...v0.7.0</a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/jshttp/cookie/commit/cf4658f492c5bd96aeaf5693c3500f8495031014""><code>cf4658f</code></a> 0.7.1</li>
<li><a href=""https://github.com/jshttp/cookie/commit/6a8b8f5a49af7897b98ebfb29a1c4955afa3d33e""><code>6a8b8f5</code></a> Allow leading dot for domain (<a href=""https://redirect.github.com/jshttp/cookie/issues/174"">#174</a>)</li>
<li><a href=""https://github.com/jshttp/cookie/commit/58015c0b93de0b63db245cfdc5a108e511a81ad0""><code>58015c0</code></a> Remove more code and perf wins (<a href=""https://redirect.github.com/jshttp/cookie/issues/172"">#172</a>)</li>
<li><a href=""https://github.com/jshttp/cookie/commit/ab057d6c06b94a7b1e3358e69a685ae49c97b627""><code>ab057d6</code></a> 0.7.0</li>
<li><a href=""https://github.com/jshttp/cookie/commit/5f02ca87688481dbcf155e49ca8b61732f30e542""><code>5f02ca8</code></a> Migrate history to GitHub releases</li>
<li><a href=""https://github.com/jshttp/cookie/commit/a5d591ce8447dd63821779724f96ad3c774c8579""><code>a5d591c</code></a> Migrate history to GitHub releases</li>
<li><a href=""https://github.com/jshttp/cookie/commit/51968f94b5e820adeceef505539fa193ffe2d105""><code>51968f9</code></a> Skip isNaN</li>
<li><a href=""https://github.com/jshttp/cookie/commit/9e7ca51ade4b325307eedd6b4dec190983e9e2cc""><code>9e7ca51</code></a> perf(parse): cache length, return early (<a href=""https://redirect.github.com/jshttp/cookie/issues/144"">#144</a>)</li>
<li><a href=""https://github.com/jshttp/cookie/commit/d6f39b0aab5521a8b118b466a515fd6eb0b9f65e""><code>d6f39b0</code></a> Fix tests for old node</li>
<li><a href=""https://github.com/jshttp/cookie/commit/6bb701f14e59c5e768933bfae9b578db4ed26c6e""><code>6bb701f</code></a> Remove failing scorecard</li>
<li>Additional commits viewable in <a href=""https://github.com/jshttp/cookie/compare/v0.6.0...v0.7.1"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~blakeembrey"">blakeembrey</a>, a new releaser for cookie since your current version.</p>
</details>
<br />

Updates `express` from 4.21.0 to 4.21.1
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/expressjs/express/releases"">express's releases</a>.</em></p>
<blockquote>
<h2>4.21.1</h2>
<h2>What's Changed</h2>
<ul>
<li>Backport a fix for CVE-2024-47764 to the 4.x branch by <a href=""https://github.com/joshbuker""><code>@​joshbuker</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/6029"">expressjs/express#6029</a></li>
<li>Release: 4.21.1 by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/6031"">expressjs/express#6031</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a href=""https://github.com/expressjs/express/compare/4.21.0...4.21.1"">https://github.com/expressjs/express/compare/4.21.0...4.21.1</a></p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/expressjs/express/blob/4.21.1/History.md"">express's changelog</a>.</em></p>
<blockquote>
<h1>4.21.1 / 2024-10-08</h1>
<ul>
<li>Backported a fix for <a href=""https://nvd.nist.gov/vuln/detail/CVE-2024-47764"">CVE-2024-47764</a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/expressjs/express/commit/8e229f92752ad51462c868b99f6e6c2e559801b0""><code>8e229f9</code></a> 4.21.1</li>
<li><a href=""https://github.com/expressjs/express/commit/a024c8a7b658a178cbdb9bde33030b7500172815""><code>a024c8a</code></a> fix(deps): cookie@0.7.1</li>
<li>See full diff in <a href=""https://github.com/expressjs/express/compare/4.21.0...4.21.1"">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mrdoob/three.js/network/alerts).

</details>",
29614,2024-10-10T15:48:42Z,2024-10-10T16:18:52Z,sunag,0,0,2,8,3,0,0,[],,0,1814.0,0,0,0,0,6681326.437734,,0,2,1,False,[],,,Related issue: https://github.com/mrdoob/three.js/pull/29606#discussion_r1794955825,
29609,2024-10-10T09:25:59Z,2024-10-10T15:47:27Z,Mugen87,1,0,1,6,1,0,0,[],185.0,0,22888.0,0,0,0,0,6683215.785765,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 812.49 <br> **218.86** | 812.45 <br> **218.85** | -41 B <br> **-4 B** |
| WebGPU Nodes | 812 <br> **218.73** | 811.96 <br> **218.72** | -41 B <br> **-4 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.56 <br> **144.82** | 536.56 <br> **144.82** | +0 B <br> **+0 B** |
| WebGPU Nodes | 492.68 <br> **134.55** | 492.68 <br> **134.55** | +0 B <br> **+0 B** |",,"Related issue: -

**Description**

This PR removes the method `getTextureNode()` from `ReflectorNode` since the class has no property `textureNode`.

`ReflectorNode` is extended from `TextureNode` so instances of `ReflectorNode` can directly be used without calling `getTextureNode()`.
",
29513,2024-09-27T15:07:21Z,2024-09-27T15:40:21Z,linbingquan,0,0,1,2,1,0,0,[],,0,1116276.0,0,0,0,0,6692545.886157,,0,1,1,False,[],,,"Related issue: #XXXX

**Description**

As the title says.

![图片](https://github.com/user-attachments/assets/473a5302-cfbc-49f5-b3d7-348cf67a6d8b)
",
29600,2024-10-09T18:27:20Z,2024-10-09T18:35:36Z,linbingquan,3,0,1,10,1,0,0,[],43968.0,0,67454.0,0,0,0,0,6692570.381431,,0,1,1,False,"['linbingquan', 'Mugen87', 'mrdoob']","Can we update the eslint config to avoid these? > Can we update the eslint config to avoid these?

I think add this code, it can be resolve.

```json5
// .eslintrc.json
  ""rules"": {
    ""no-irregular-whitespace"": [
      ""error""
    ]
  }
```

Screenshots:

![图片](https://github.com/user-attachments/assets/cab9ec12-c313-4604-85c4-3ad1234065ed)
 Sounds good! Would you like to file a PR with this update?",,"Related issue: #XXXX

**Description**

As the title says.

![图片](https://github.com/user-attachments/assets/9020f0f1-a7fd-42dc-a31a-56522888388e)
",
29608,2024-10-10T08:53:32Z,2024-10-10T11:31:05Z,linbingquan,1,0,2,5,2,0,0,[],896.0,0,15474.0,0,0,0,0,6692578.644414,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 812.49 <br> **218.86** | 812.49 <br> **218.86** | +0 B <br> **+0 B** |
| WebGPU Nodes | 812 <br> **218.73** | 812 <br> **218.73** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.56 <br> **144.82** | 536.56 <br> **144.82** | +0 B <br> **+0 B** |
| WebGPU Nodes | 492.68 <br> **134.55** | 492.68 <br> **134.55** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29600#issuecomment-2404385319

**Description**

Add `no-irregular-whitespace` rule for `.eslintrc.json`.

`no-irregular-whitespace` has options, I think we not need it for now.

https://eslint.org/docs/latest/rules/no-irregular-whitespace
",
29611,2024-10-10T11:20:36Z,2024-10-10T12:20:14Z,Mugen87,0,0,1,8,1,0,0,[],,0,3579.0,0,0,0,0,6695649.674128,,0,1,1,False,[],,,"Related issue: -

**Description**

The PR removes a check in `GaussianBlurNode` that made sense when the node was originally developed. In the meanwhile though, `convertToTexture()` is in place which makes sure the input node ends up as a texture node.
",
29437,2024-09-18T08:07:37Z,2024-09-19T14:47:06Z,aardgoose,3,4,3,34,1,2,0,[],29217.0,0,1909267.0,0,0,0,0,6702342.456919,,1,3,1,False,"['beersandrew', 'aardgoose']","> Related issue: #29426
> 
> Implement separate(2|3|4) nodes, this is the first multi output node as far as I know so possibly incorrect. Appears to work with provided test sample.
> 
> @beersandrew can you test?

Hey, thanks for the quick response on this one, really appreciated!

I'm seeing some issues, I've added separate3.mtlx & separate4.mtlx samples in my MaterialX fork and I expect to see the following.

2,3,4 from left to right.

![image](https://github.com/user-attachments/assets/cbed3a1c-d7b6-4713-81ab-a829d5af70b0)

but I currently see this on the current branch:

![image](https://github.com/user-attachments/assets/42c4258b-3502-4925-ab92-8cde5a0318d1)

not sure if this is helpful but it seems that when I step down into the nodes produced underneath the `colorNode` each `SplitNode` instance has `components` of `x`. 


Let me know if you're able to reproduce this with

```
const SAMPLE_PATH = 'https://raw.githubusercontent.com/beersandrew/MaterialX/separateNodeExample/resources/Materials/Examples/StandardSurface/';

const samples = [
  'separate2.mtlx',
  'separate3.mtlx',
  'separate4.mtlx'
];
``` @beersandrew 
I think I have fixed those cases, the initial input was being cached so that the outx was used repeatedly, and output elements weren't handled.  Both those fixed now. @aardgoose looks good to me as well, thank you so much!",,"Fixed #29426 

Implement separate(2|3|4) nodes, this is the first multi output node as far as I know so possibly incorrect.
Appears to work with provided test sample.

@beersandrew can you test?","## Implicit operand conversion

This expression will be implicitly converted from regular expression to number.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2456) ## Implicit operand conversion

This expression will be implicitly converted from string to number.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2457) fixed fixed"
29453,2024-09-20T09:28:32Z,2024-09-23T08:49:00Z,aardgoose,1,3,5,454,4,2,1,[],171850.0,0,1731600.0,0,0,0,0,6702354.76794,,0,5,1,False,['Mugen87'],"> I have a version with instancing support which requires a method to override NodeMaterial() standard instance handling and provide access to instanceMatrix and instanceColor independently.

I think I would leave out instancing support in the modifier until it is requested by a user.",,"Related issue: #29295

Port of non instanced curve modifier.

This example exposes a problem with BufferGeometry.setFromPoints() method. #29452
I have a version with instancing support which requires a method to override NodeMaterial() standard instance handling and provide access to instanceMatrix and instanceColor independently.
","Please do not use `textureLoad()` in this module otherwise there is no texture filtering. The filtering is needed to remove the blocky appearance which is quite visible right now:

<img width=""604"" alt=""image"" src=""https://github.com/user-attachments/assets/a63cbc5b-50c4-4352-aeb9-01fb6b93a8ab"">
 Ah, the problem is that WGSL uses the home grown filtering `tsl_biquadraticTexture()` and produces artifacts (below).
Possibly need something that interpolates along the x axis only? This doesn't appear using WebGL.

![curvemod](https://github.com/user-attachments/assets/8e288505-12ba-4e73-bf73-5be77bcd5b7c)
 on experimentation, the textureLoad coords needs clamping/wrapping to within the texture size, to avoid the above pictured issue.

I think it is hitting https://www.w3.org/TR/WGSL/#textureload 

> If the logical texel addresss is invalid, the built-in function returns one of:
> The data for some texel within bounds of the texture
> **A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures**
> 0.0 for depth textures

"
29451,2024-09-20T09:12:11Z,2024-09-21T08:47:20Z,aardgoose,3,8,7,509,4,2,0,[],3558.0,0,1732588.0,0,0,0,0,6702348.040784,,0,7,1,False,['Mugen87'],"I have tested the change locally and yeah there are differences in the final lensflare color:

LensflareGPU:

<img width=""441"" alt=""image"" src=""https://github.com/user-attachments/assets/8c5f7ba1-cdca-492d-92c0-19ba94457c84"">

Lensflare:

<img width=""669"" alt=""image"" src=""https://github.com/user-attachments/assets/1cfb1037-789e-4a23-861a-9c16a0f97c18"">

I wonder why the blending looks different? 🤔  Um, the new version handles color spaces more correctly. Maybe we should apply the same changes to `Lensflare` as well? Something like:

```js
import {
	AdditiveBlending,
	Box2,
	BufferGeometry,
	Color,
	FramebufferTexture,
	InterleavedBuffer,
	InterleavedBufferAttribute,
	Mesh,
	MeshBasicMaterial,
	RawShaderMaterial,
	ShaderMaterial,
	UnsignedByteType,
	Vector2,
	Vector3,
	Vector4
} from 'three';

class Lensflare extends Mesh {

	constructor() {

		super( Lensflare.Geometry, new MeshBasicMaterial( { opacity: 0, transparent: true } ) );

		this.isLensflare = true;

		this.type = 'Lensflare';
		this.frustumCulled = false;
		this.renderOrder = Infinity;

		//

		const positionScreen = new Vector3();
		const positionView = new Vector3();

		// textures

		const tempMap = new FramebufferTexture( 16, 16 );
		const occlusionMap = new FramebufferTexture( 16, 16 );

		let currentType = UnsignedByteType;

		// material

		const geometry = Lensflare.Geometry;

		const material1a = new RawShaderMaterial( {
			uniforms: {
				'scale': { value: null },
				'screenPosition': { value: null }
			},
			vertexShader: /* glsl */`

				precision highp float;

				uniform vec3 screenPosition;
				uniform vec2 scale;

				attribute vec3 position;

				void main() {

					gl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );

				}`,

			fragmentShader: /* glsl */`

				precision highp float;

				void main() {

					gl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );

				}`,
			depthTest: true,
			depthWrite: false,
			transparent: false
		} );

		const material1b = new RawShaderMaterial( {
			uniforms: {
				'map': { value: tempMap },
				'scale': { value: null },
				'screenPosition': { value: null }
			},
			vertexShader: /* glsl */`

				precision highp float;

				uniform vec3 screenPosition;
				uniform vec2 scale;

				attribute vec3 position;
				attribute vec2 uv;

				varying vec2 vUV;

				void main() {

					vUV = uv;

					gl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );

				}`,

			fragmentShader: /* glsl */`

				precision highp float;

				uniform sampler2D map;

				varying vec2 vUV;

				void main() {

					gl_FragColor = texture2D( map, vUV );

				}`,
			depthTest: false,
			depthWrite: false,
			transparent: false
		} );

		// the following object is used for occlusionMap generation

		const mesh1 = new Mesh( geometry, material1a );

		//

		const elements = [];

		const shader = LensflareElement.Shader;

		const material2 = new ShaderMaterial( {
			name: shader.name,
			uniforms: {
				'map': { value: null },
				'occlusionMap': { value: occlusionMap },
				'color': { value: new Color( 0xffffff ) },
				'scale': { value: new Vector2() },
				'screenPosition': { value: new Vector3() }
			},
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			blending: AdditiveBlending,
			transparent: true,
			depthWrite: false
		} );

		const mesh2 = new Mesh( geometry, material2 );

		this.addElement = function ( element ) {

			elements.push( element );

		};

		//

		const scale = new Vector2();
		const screenPositionPixels = new Vector2();
		const validArea = new Box2();
		const viewport = new Vector4();

		this.onBeforeRender = function ( renderer, scene, camera ) {

			renderer.getCurrentViewport( viewport );

			const renderTarget = renderer.getRenderTarget();
			const type = ( renderTarget !== null ) ? renderTarget.texture.type : UnsignedByteType;

			if ( currentType !== type ) {

				tempMap.dispose();
				occlusionMap.dispose();

				tempMap.type = occlusionMap.type = type;

				currentType = type;

			}

			const invAspect = viewport.w / viewport.z;
			const halfViewportWidth = viewport.z / 2.0;
			const halfViewportHeight = viewport.w / 2.0;

			let size = 16 / viewport.w;
			scale.set( size * invAspect, size );

			validArea.min.set( viewport.x, viewport.y );
			validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

			// calculate position in screen space

			positionView.setFromMatrixPosition( this.matrixWorld );
			positionView.applyMatrix4( camera.matrixWorldInverse );

			if ( positionView.z > 0 ) return; // lensflare is behind the camera

			positionScreen.copy( positionView ).applyMatrix4( camera.projectionMatrix );

			// horizontal and vertical coordinate of the lower left corner of the pixels to copy

			screenPositionPixels.x = viewport.x + ( positionScreen.x * halfViewportWidth ) + halfViewportWidth - 8;
			screenPositionPixels.y = viewport.y + ( positionScreen.y * halfViewportHeight ) + halfViewportHeight - 8;

			// screen cull

			if ( validArea.containsPoint( screenPositionPixels ) ) {

				// save current RGB to temp texture

				renderer.copyFramebufferToTexture( tempMap, screenPositionPixels );

				// render pink quad

				let uniforms = material1a.uniforms;
				uniforms[ 'scale' ].value = scale;
				uniforms[ 'screenPosition' ].value = positionScreen;

				renderer.renderBufferDirect( camera, null, geometry, material1a, mesh1, null );

				// copy result to occlusionMap

				renderer.copyFramebufferToTexture( occlusionMap, screenPositionPixels );

				// restore graphics

				uniforms = material1b.uniforms;
				uniforms[ 'scale' ].value = scale;
				uniforms[ 'screenPosition' ].value = positionScreen;

				renderer.renderBufferDirect( camera, null, geometry, material1b, mesh1, null );

				// render elements

				const vecX = - positionScreen.x * 2;
				const vecY = - positionScreen.y * 2;

				for ( let i = 0, l = elements.length; i < l; i ++ ) {

					const element = elements[ i ];

					const uniforms = material2.uniforms;

					uniforms[ 'color' ].value.copy( element.color ).convertSRGBToLinear();
					uniforms[ 'map' ].value = element.texture;
					uniforms[ 'screenPosition' ].value.x = positionScreen.x + vecX * element.distance;
					uniforms[ 'screenPosition' ].value.y = positionScreen.y + vecY * element.distance;

					size = element.size / viewport.w;
					const invAspect = viewport.w / viewport.z;

					uniforms[ 'scale' ].value.set( size * invAspect, size );

					material2.uniformsNeedUpdate = true;

					renderer.renderBufferDirect( camera, null, geometry, material2, mesh2, null );

				}

			}

		};

		this.dispose = function () {

			material1a.dispose();
			material1b.dispose();
			material2.dispose();

			tempMap.dispose();
			occlusionMap.dispose();

			for ( let i = 0, l = elements.length; i < l; i ++ ) {

				elements[ i ].texture.dispose();

			}

		};

	}

}

//

class LensflareElement {

	constructor( texture, size = 1, distance = 0, color = new Color( 0xffffff ) ) {

		this.texture = texture;
		this.size = size;
		this.distance = distance;
		this.color = color;

	}

}

LensflareElement.Shader = {

	name: 'LensflareElementShader',

	uniforms: {

		'map': { value: null },
		'occlusionMap': { value: null },
		'color': { value: null },
		'scale': { value: null },
		'screenPosition': { value: null }

	},

	vertexShader: /* glsl */`

		uniform vec3 screenPosition;
		uniform vec2 scale;

		uniform sampler2D occlusionMap;

		varying vec2 vUV;
		varying float vVisibility;

		void main() {

			vUV = uv;

			vec2 pos = position.xy;

			vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );
			visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );
			visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );
			visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );
			visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );
			visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );
			visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );
			visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );
			visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );

			vVisibility =        visibility.r / 9.0;
			vVisibility *= 1.0 - visibility.g / 9.0;
			vVisibility *=       visibility.b / 9.0;

			gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );

		}`,

	fragmentShader: /* glsl */`

		uniform sampler2D map;
		uniform vec3 color;

		varying vec2 vUV;
		varying float vVisibility;

		void main() {

			vec4 texture = texture2D( map, vUV );
			texture.a *= vVisibility;
			gl_FragColor = texture;
			gl_FragColor.rgb *= color;

			#include <tonemapping_fragment>
			#include <colorspace_fragment>

		}`

};

Lensflare.Geometry = ( function () {

	const geometry = new BufferGeometry();

	const float32Array = new Float32Array( [
		- 1, - 1, 0, 0, 0,
		1, - 1, 0, 1, 0,
		1, 1, 0, 1, 1,
		- 1, 1, 0, 0, 1
	] );

	const interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

	geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
	geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
	geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

	return geometry;

} )();

export { Lensflare, LensflareElement };
```
This would assume the lens flare texture are marked as sRGB in the examples. Let's merge this! Color spaces are handled more correctly in `LensflareMesh` but I think it's better for backwards-compatibility to not change the old `Lensflare` implementation at the moment.",,"Related issue: #29295

Conversion of lenflare object to TSL, some differences in color handling but the basic mechanics work","The renderer parameters should be removed in the final version. According to https://github.com/mrdoob/three.js/pull/29019#issuecomment-2259786334, we might want to rename the module to `LensflareMesh`. Why did you change the `z` coordinate to `0`? So far the module has been using `screenPosition.z`. junk change from debugging. i'll fix will do sounds reasonable.  Ive returned it to the original, but screenPosition.z is never set, so is 0 anyway.  Maybe make it a Vector2().? It is set here:

https://github.com/mrdoob/three.js/blob/70ed81ad46aa52d718fdedc8bb9b129e708f20d5/examples/jsm/objects/Lensflare.js#L231

`positionScreen` is a 3D vector with a valid z value. 

This needs to be corrected in `LensflareMesh`."
29470,2024-09-23T08:03:05Z,2024-09-23T18:33:58Z,aardgoose,1,0,1,11,1,1,1,[],179.0,0,1477524.0,0,0,0,0,6702359.368439,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.32 <br> **170.19** | +0 B <br> **+0 B** |
| WebGPU | 835.97 <br> **224.07** | 836.03 <br> **224.09** | +57 B <br> **+15 B** |
| WebGPU Nodes | 835.48 <br> **223.95** | 835.54 <br> **223.96** | +57 B <br> **+13 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 532.38 <br> **143.56** | 532.44 <br> **143.57** | +57 B <br> **+17 B** |
| WebGPU Nodes | 489.04 <br> **133.42** | 489.1 <br> **133.44** | +57 B <br> **+19 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29453#discussion_r1770582998

Access to out of bounds texel coordinates in WGSL has unpredictable results.

https://www.w3.org/TR/WGSL/#textureload

Wrap in tsl_biquadraticTexture() function to avoid this problem.",
29567,2024-10-06T11:48:46Z,2024-10-06T20:01:45Z,aardgoose,1,0,4,936,4,0,0,[],174.0,0,340774.0,0,0,0,0,6702368.686484,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.12 <br> **170.5** | 688.12 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.64 <br> **217.51** | 807.93 <br> **217.62** | +292 B <br> **+107 B** |
| WebGPU Nodes | 807.15 <br> **217.38** | 807.44 <br> **217.48** | +292 B <br> **+105 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.43 <br> **144.5** | 535.68 <br> **144.56** | +252 B <br> **+61 B** |
| WebGPU Nodes | 491.54 <br> **134.24** | 491.79 <br> **134.31** | +252 B <br> **+72 B** |",,"Related issue: #29515 

Separate the shadow map creation and use from AnalyticLightNode to create a point where a shadow partitioning node can be inserted to allow implementation for cascading shadow maps and other techniques.",
29596,2024-10-09T11:20:52Z,2024-10-09T11:41:00Z,aardgoose,1,0,1,6,1,1,1,[],189.0,0,83245.0,0,0,0,0,6702371.98827,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 811.56 <br> **218.6** | 811.49 <br> **218.59** | -68 B <br> **-14 B** |
| WebGPU Nodes | 811.07 <br> **218.47** | 811 <br> **218.46** | -68 B <br> **-14 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.78 <br> **144.59** | 535.71 <br> **144.58** | -68 B <br> **-17 B** |
| WebGPU Nodes | 491.89 <br> **134.34** | 491.83 <br> **134.32** | -68 B <br> **-18 B** |",,"RenderList.getLightsNode() has no callers and calls a LightsNode method that has been removed.
Remove obsolete method.",
29551,2024-10-04T17:35:18Z,2024-10-05T00:37:22Z,sunag,3,0,5,193,4,0,0,[],187.0,0,482772.0,0,0,0,0,6712380.599491,,0,5,1,False,"['github-actions[bot]', 'boytchev', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.88 <br> **217.63** | 808.1 <br> **217.67** | +213 B <br> **+38 B** |
| WebGPU Nodes | 807.39 <br> **217.49** | 807.61 <br> **217.53** | +213 B <br> **+38 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.32 <br> **144.76** | 536.53 <br> **144.8** | +213 B <br> **+40 B** |
| WebGPU Nodes | 492.4 <br> **134.49** | 492.61 <br> **134.53** | +213 B <br> **+42 B** | FYI @boytchev Thanks for the head-up. This looks very promising for the type of things that I use TSL for. I still had to fully understand the jelly example in webgpu_compute_geometry.html. I have some why-questions, but I will first try to answer them by myself. And ... I feel sorry for Lee Perry Smith - his head appears to be the most tortured model in the world.",,"Related issue: https://github.com/mrdoob/three.js/pull/29547

**Description**

The goal is to have a dedicated API for dealing with geometry, whether during a single frame or the every frame that the object is rendered. This also simplifies the integration of modifications with new objects since all the user needs to define is typically `material.geometryNode = myGeometryNode()` like the example bellow.

```js
// With the 'material.geometryNode' there is no need to worry about the 'renderer.compute( node )'.

const material = new THREE.MeshNormalNodeMaterial();
material.geometryNode = jelly();
```
",
29604,2024-10-09T20:32:44Z,2024-10-09T21:48:24Z,sunag,0,0,1,67,1,1,1,[],,0,4544.0,0,0,0,0,6747962.95339,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29597#issuecomment-2402561665

**Description**

Gaussian blurs commonly used in shaders is different from other gaussian blurs used in image editing software, where the alpha is premultiplied. This is very useful for blurring transparent textures when you don't want to consider the non-transparent part of the image as you would with the traditional method.

| image | premultipliedGaussianBlur | gaussianBlur |
| ------------- | ------------- | ------------- | 
| ![image](https://github.com/user-attachments/assets/c496de1d-33ce-4939-ad5b-20037cb2b205) | ![image](https://github.com/user-attachments/assets/0f37cc7a-e280-4565-9f90-792b283c0067) | ![image](https://github.com/user-attachments/assets/ceaa60e1-8145-49a1-8fe6-480ce7b47ac7) |
",
29602,2024-10-09T19:28:23Z,2024-10-10T08:11:58Z,Makio64,2,0,2,40,2,1,1,[],3214.0,0,45815.0,0,0,0,0,6710553.570083,,0,2,1,False,"['Makio64', 'Mugen87']",One thing: It would be good to document these new properties here: https://threejs.org/docs/index.html#examples/en/controls/TransformControls @Mugen87 Documentation added 👍 ,,"**Description**

Add min / max constraints to TransformControls, usefull for editor with limited area.

Example : 
```
control = new TransformControls(camera, domElement)

control.minX = -10
control.maxX = 10
control.minY = 0
control.maxY = 0 // blocked in Y 
control.minZ = -90
control.maxZ = 0
```
",
25652,2023-03-11T04:25:20Z,2023-03-11T09:31:02Z,WestLangley,3,0,4,56,3,0,0,[],110.0,0,49994093.0,0,0,0,0,6755659.393018,,0,4,1,False,"['Benjythebee', 'WestLangley']","I will do necessary clean-up of warnings in a follow-on PR.
 When this PR was merged, it should have been followed up with a `@deprecated use '...' ` flag on the previous name functions;
Without the flag, a dev can end up super confused why his/her IDE is screaming ""function does not exists"" when updating Three @Benjythebee 

The deprecation warnings were included in this PR, and in the [migration guide](https://github.com/mrdoob/three.js/wiki/Migration-Guide#150--151).

Deprecation warnings are removed after 10 releases, as per the policy [stated](https://github.com/mrdoob/three.js/wiki/Migration-Guide) at the top of the migration guide.

",,"`BufferGeometryUtils.interleaveAttributes()` exists, so the following changes are consistent with current nomenclature:

```js
mergeBufferGeometries() -> mergeGeometries()
mergeBufferAttributes() -> mergeAttributes()
```
",
29589,2024-10-08T13:52:35Z,2024-10-09T19:18:58Z,RenaudRohlinger,1,2,7,105,3,2,0,[],191.0,0,105984.0,0,0,0,0,6756933.920087,,0,7,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 811.56 <br> **218.6** | 812.39 <br> **218.82** | +835 B <br> **+217 B** |
| WebGPU Nodes | 811.07 <br> **218.47** | 811.9 <br> **218.69** | +835 B <br> **+216 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.78 <br> **144.59** | 536.62 <br> **144.83** | +835 B <br> **+239 B** |
| WebGPU Nodes | 491.89 <br> **134.34** | 492.73 <br> **134.56** | +835 B <br> **+223 B** |",,"Fixed: #29582
Related: #29386

**Description**
This PR fixes an issue in `NodeMaterialObserver` where changes to geometry attributes or properties were not consistently reflected in the material, ensuring proper updates and synchronization between geometry and shaders.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
","Could we compare geometry data without get a new data every frame? Good point, done!"
29598,2024-10-09T15:21:43Z,2024-10-09T18:53:03Z,sunag,2,0,3,46,12,1,1,[],194.0,0,12683.0,0,0,0,0,6758487.519042,,0,3,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 811.49 <br> **218.59** | 811.5 <br> **218.59** | +10 B <br> **+5 B** |
| WebGPU Nodes | 811 <br> **218.46** | 811.01 <br> **218.47** | +10 B <br> **+5 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.71 <br> **144.58** | 535.71 <br> **144.58** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.83 <br> **134.32** | 491.83 <br> **134.32** | +0 B <br> **+0 B** | We now might want to honor `SSRNode` in this PR^^.",,"Related issue: https://github.com/mrdoob/three.js/pull/29595#discussion_r1793047974

**Description**

Improve names, replaced some `save` to `reset`",
29545,2024-10-03T02:20:39Z,2024-10-03T21:45:42Z,donmccurdy,7,2,3,72,2,2,1,['Documentation'],51169.0,0,540838.0,0,0,0,0,6795597.434461,,0,3,1,False,"['donmccurdy', 'WestLangley']",">Currently the THREE.Color docs suggest that RGB values cannot extend beyond the range [0, 1].

And that is correct. `material.color` represents a reflectance, which is unit-less, and between 0 and 1.

This is why we have `.intensity` properties.

The intensity is where the units come from, such as radiance (luminance), irradiance (illuminance), or radiant intensity (luminous intensity).

In the case of lights, `light.color` serves as an attenuating mask, which is also unit-less, and between 0 and 1.

//

In the case of `MeshBasicMaterial`, the inline comments are not correct. The `.color` property is not emissive.

The `.color` property attenuates the environment map and light map, if present. Since the reflected light cannot exceed the incident light, `.color` cannot exceed 1.

`MeshBasicMaterial` should include an `emissive` property and an `emissiveIntensity` property. The emissive color does not have to match the material color.
 Hm, admittedly I much prefer to use MeshBasicMaterial as a stand-in for an unlit material, which of course we do not actually have... but as it is, yes, perhaps it's better not to use MeshBasicMaterial as my example. A custom ShaderMaterial could be a better example. I would strongly rather not continue adding new shading features to MeshBasicMaterial, I would (if anything) remove them and make it unlit, but I know that's also impossible as a large breaking change.

But I do still think we need to avoid saying `THREE.Color RGB values cannot extend beyond the range [0, 1]`, this isn't true except in particular contexts where THREE.Color might be used. For example, using a THREE.Color instance with out-of-gamut sRGB components as input to THREE.ColorManagement for the purpose of converting it to in-gamut P3 would be valid. If I remove the paragraph beginning “Minimum and maximum values...”, do you feel the rest is OK? I see that part will need some care. @WestLangley said

>MeshBasicMaterial should include an emissive property and an emissiveIntensity property. The emissive color does not have to match the material color.

I really think that is the proper thing to do, if we are to be intellectually honest. We could alternatively use `MeshStandardMaterial#emissive` for cases like this:

https://github.com/mrdoob/three.js/blob/1e352b62a57f78a032019c37c8c33e3bf7839c04/examples/jsm/environments/RoomEnvironment.js#L136-L142

I think a core problem is that MeshBasicMaterial's support for any type of lighting is a surprise to most users when/if they discover it, we are trying to align the material intellectually to a concept that almost no one expects it to represent. Or that is my impression; perhaps I misjudge users' perceptions of the material!

In any case, I think I have removed the messier parts of this PR now, please let me know if you see other issues, thanks again! >I think a core problem is that MeshBasicMaterial's support for any type of lighting is a surprise to most users when/if they discover it

The features such as light map support, and env map support, were included so `MeshBasicMaterial` could be a stand-in on mobile in the early days of three.js. I agree that `MeshBasicMaterial` is a mash-up of sorts.

If you want to think about a new `MeshUnlitMaterial`, I think that could be illustrative. Even that I suppose is challenging, what would it mean for an ""unlit"" material to have RGB values >1... questions for another time. 😅 Thank you for improving this PR!",,"Currently the THREE.Color docs suggest that RGB values cannot extend beyond the range [0, 1], leading to some confusion as in [this thread](https://discourse.threejs.org/t/how-to-add-a-shooting-star-to-the-scene/43767/11). I've added a more detailed introduction to the class, along with some information about handling of color spaces, as a lighter/easier alternative to the full color management guide.","I do not like the use of ""typically"". That just raises more questions than it answers. For now, I'd leave it as [0, 1].

We can figure out how to address out-of-gamut values later.

I don't think users set out-of-gamut values; they are computed only internally as an intermediary step. Removed the ""typically"" usage, thanks!

I don't think out-of-gamut values are the only relevant case here, another would be sampling from a drawing buffer using WebGPU's newly-available HDR support. But both cases are admittedly speculative, and I'm happy to keep this as-is unless we have clearer goals for changing it."
29595,2024-10-08T22:33:10Z,2024-10-08T22:46:42Z,sunag,1,1,1,291,14,1,0,[],179.0,0,33693.0,0,0,0,0,6797991.971073,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 809.96 <br> **218.19** | 811.56 <br> **218.6** | +1.6 kB <br> **+416 B** |
| WebGPU Nodes | 809.47 <br> **218.05** | 811.07 <br> **218.47** | +1.6 kB <br> **+424 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.76 <br> **144.59** | 535.78 <br> **144.59** | +24 B <br> **+7 B** |
| WebGPU Nodes | 491.87 <br> **134.33** | 491.89 <br> **134.34** | +24 B <br> **+7 B** |",,"**Description**

It is common when we create some rendering passes to change the renderer settings, this is a common approach and currently we are doing it value by value instead of a function to handle it.

1. `PostProcessingUtils` has `resetRendererState()` that will reset the renderer to default values. This is important not only to store and restore but also to reset so that some pre-rendering or post-processing layers are not affected by specific settings.

2. Using `getRendererState()` and `setRendererState()` simplifies the process to modify the rendering settings that need to be restored later, and makes the system more controlled if we add new features to the renderer.

```js
// store current settings
const rendererState = PostProcessingUtils.resetRendererState( renderer );

renderer.setClearColor( 0xffffff, 1 );
renderer.setRenderTarget( renderTarget );
renderer.setMRT( myMRT );

renderer.renderer( scene, camera );

// restore previous settings
PostProcessingUtils.setRendererState( renderer, rendererState );
```","Regarding the name: I would expect something like `saveRendererState()` since what we doing here is essentially saving a snapshot of the current render state which is later restored. So how about:
```js
const rendererState = PostProcessingUtils.saveRendererState( renderer );
PostProcessingUtils.restoreRendererState( renderer, rendererState );
```"
29583,2024-10-08T03:18:30Z,2024-10-08T15:25:30Z,sunag,0,0,2,202,2,1,1,[],,0,43624.0,0,0,0,0,6857341.401591,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29575

**Description**

Pretty much all we need from `outline()` is the `visibleEdge`and the `hiddenEdge`, and to control the `thickness` and `glow`, all other nodes parameters should be derived from external node so that the user can expand the customization possibilities without affecting performance and complexity.

```js
const { visibleEdge, hiddenEdge } = outline( scene, camera );
```
",
29593,2024-10-08T14:52:02Z,2024-10-08T15:05:57Z,Mugen87,1,0,4,60,5,0,0,[],188.0,0,835.0,0,0,0,0,6858519.18191,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 809.73 <br> **218.11** | 809.96 <br> **218.19** | +232 B <br> **+74 B** |
| WebGPU Nodes | 809.24 <br> **217.98** | 809.47 <br> **218.05** | +232 B <br> **+73 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.76 <br> **144.59** | 535.76 <br> **144.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.87 <br> **134.33** | 491.87 <br> **134.33** | +0 B <br> **+0 B** |",,"Related issue: #29588

**Description**

Second attempt to fix the AO in `webgpu_postprocessing_ao` when using a WebGL backend.

The issue is indeed different NDC Z conventions in WebGL and WebGPU. There is now a core function `getViewPosition()` that takes care of that. The previous PR failed because `getSceneUvAndDepth()` is actually compatible for both WebGL and WebGPU.",
29588,2024-10-08T13:28:11Z,2024-10-08T13:59:39Z,Mugen87,1,0,2,90,5,0,0,[],198.0,0,3090.0,0,0,0,0,6861295.822575,,0,2,0,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 689.82 <br> **170.9** | 689.82 <br> **170.9** | +0 B <br> **+0 B** |
| WebGPU | 809.73 <br> **218.11** | 810.12 <br> **218.24** | +395 B <br> **+128 B** |
| WebGPU Nodes | 809.24 <br> **217.98** | 809.63 <br> **218.1** | +395 B <br> **+126 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.76 <br> **144.59** | 535.76 <br> **144.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.87 <br> **134.33** | 491.87 <br> **134.33** | +0 B <br> **+0 B** |",,"Related issue:  https://github.com/mrdoob/three.js/pull/29587#issuecomment-2399748628

**Description**

The PR fixes `GTAONode` for the WebGL backend by creating two helper functions `getViewPosition()` and `getSceneUv()` which handle WebGPU/WebGL specific uv convention issues.

This logic is also required for the upcoming `SSRNode` and potentially third-party and app related code.   
",
29585,2024-10-08T09:28:07Z,2024-10-08T09:35:55Z,Mugen87,2,0,1,6,1,0,0,[],5989.0,0,6597.0,0,0,0,0,6872193.230868,,0,1,1,False,['Mugen87'],"@sunag This is also an issue with `WebGPURenderer`. When I configure a background color and use this MRT setup:
```js
scene.background = new THREE.Color( 0x443333 );
scene.fog = new THREE.Fog( 0x443333, 1, 4 );

const scenePass = pass( scene, camera );
scenePass.setMRT( mrt( {
	output: output,
	normal: transformedNormalView,
	metalness: metalness
} ) );
```
The background of the normal and metalness output is affected as well which is not correct. 

The following screenshot shows the metalness output of the SSR example (without ground).

<img width=""1232"" alt=""image"" src=""https://github.com/user-attachments/assets/58bdcded-da87-4d76-a070-a8136960e506"">

The background should be black though.

I guess we need the ability in `PassNode` to define different clear colors per MRT target. The scene's background should only apply for the beauty pass by default, imo. I'm currently develop `SSRNode` in https://github.com/Mugen87/three.js/commits/dev3/.

There is already `webgpu_postprocessing_ssr` for testing. Just replace the WIP `SSRNode` instance in `postProcessing.outputNode = ssrPass;` with the output node you want to debug.",,"Related issue: -

**Description**

The metalness pass of `SSRPass` should save the metalness of the scene's objects so it's possible to decide what objects are affected by SSR. However, the pass is not correctly configured since the scene's background and fog currently affects the metalness data which is wrong.",
29577,2024-10-07T13:38:45Z,2024-10-08T06:26:47Z,gkjohnson,1,2,8,149,2,2,1,[],191.0,0,60486.0,0,0,0,0,6889667.327484,,1,8,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.12 <br> **170.5** | 689.82 <br> **170.9** | +1.71 kB <br> **+403 B** |
| WebGPU | 808.01 <br> **217.65** | 809.73 <br> **218.11** | +1.72 kB <br> **+462 B** |
| WebGPU Nodes | 807.52 <br> **217.52** | 809.24 <br> **217.98** | +1.72 kB <br> **+462 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.76 <br> **144.59** | 535.76 <br> **144.59** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.87 <br> **134.33** | 491.87 <br> **134.33** | +0 B <br> **+0 B** |",,"Related issue: #29464 

**Description**

Adds support for Batched `setGeometrySize` and `setInstanceCount`. If adequate extents of the necessary geometry and instance buffers remain unused then the buffers can be shrunk, as well. However due to buffer fragmentation after adding / removing geometry and instances to and from the BatchedMesh it may not be possible to shrink the buffer - eg if 1000 instances are added and then the first 999 are removed. We could handle this case if we were to re-map ids so the data in this buffers could be rearranged without breaking references but we've decided not to do that for complexity reasons, which I think is okay.

To help with that issue the add geometry and instance functions have been adjusted to use earlier ids.

Tested by resizing geometry and instance buffers in the batched mesh demo and ensuring that there were no visual changes.",Do you mind adding documentation for both new methods? done!
29575,2024-10-07T07:54:16Z,2024-10-07T08:04:48Z,Mugen87,1,0,3,747,4,0,0,[],75609.0,0,75622.0,0,0,0,0,6895200.585735,,0,3,1,False,['sunag'],"There's a curious accuracy problem. The WebGL version appears to have more refined blur.

WebGL
![image](https://github.com/user-attachments/assets/d7ade3ec-bee7-49b8-81c3-a8a33858d5e9)

WebGPU
![image](https://github.com/user-attachments/assets/3ca150f5-dd31-4ccf-89e0-97feba9fe7c1)

",,"Related issue: #29295

**Description**

This ports `OutlinePass` to `WebGPURenderer` as `OutlineNode`.

The great thing about this port is that `setRenderObjectFunction()` allows a cleaner implementation since no visibility toggling via hierarchy traversal is required anymore. That was by far the most messy part of the previous code and also a performance issue for scenes with many 3D objects.
",
29576,2024-10-07T07:58:11Z,2024-10-07T13:05:21Z,RenaudRohlinger,1,2,3,13,1,2,1,[],196.0,0,18431.0,0,0,0,0,6952157.434836,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.12 <br> **170.5** | 688.12 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.99 <br> **217.64** | 808.01 <br> **217.65** | +22 B <br> **+16 B** |
| WebGPU Nodes | 807.5 <br> **217.5** | 807.52 <br> **217.52** | +22 B <br> **+17 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.73 <br> **144.57** | 535.76 <br> **144.59** | +22 B <br> **+14 B** |
| WebGPU Nodes | 491.85 <br> **134.32** | 491.87 <br> **134.33** | +22 B <br> **+14 B** |",,"
**Description**
This PR adds support for rendering geometries without a position attribute in the WebGPURenderer, similar to how it is handled in the WebGLRenderer. 

*This contribution is funded by [Utsubo](https://utsubo.com)*
","Could this be written like so?
```js
const position = geometry.attributes.position;
let itemCount = Infinity;

if ( hasIndex ) {

	itemCount = index.count;

} else if ( position !== undefined && position !== null ) {

	itemCount = position.count;

}

firstVertex = Math.max( firstVertex, 0 );
lastVertex = Math.min( lastVertex, itemCount );
``` Even better! Done."
29574,2024-10-07T05:33:35Z,2024-10-07T05:49:14Z,sunag,1,0,3,14,3,0,0,[],181.0,0,942.0,0,0,0,0,6978323.157445,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.12 <br> **170.5** | 688.12 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.93 <br> **217.62** | 807.99 <br> **217.64** | +54 B <br> **+19 B** |
| WebGPU Nodes | 807.44 <br> **217.48** | 807.5 <br> **217.5** | +54 B <br> **+19 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.84 <br> **111.78** | 462.84 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.68 <br> **144.56** | 535.73 <br> **144.57** | +54 B <br> **+16 B** |
| WebGPU Nodes | 491.79 <br> **134.31** | 491.85 <br> **134.32** | +61 B <br> **+7 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29137

**Description**

Some additional revisions of the use of normals.

- [x] [`ShadowNode`: Use `transformedNormalWorld`](https://github.com/mrdoob/three.js/commit/e17e6a19380f0a5422eb417bbd074a9811083989)
- [x] [`getGeometryRoughness`: Return `0.` if there is no normal buffer](https://github.com/mrdoob/three.js/commit/2a23391bc89214114c56f321fe57925cec029a6b)
",
29564,2024-10-06T08:55:13Z,2024-10-06T19:50:11Z,Mugen87,0,0,1,18,9,0,0,[],,0,39298.0,0,0,0,0,7014269.457279,,0,1,1,False,[],,,"Related issue: -

**Description**

Similar to `Pass`, `BloomPass` and `GTAOPass`, the PR ensures all other FX passes use `NodeUpdateType.FRAME` instead of `NodeUpdateType.RENDER`.",
29570,2024-10-06T16:39:16Z,2024-10-06T19:21:36Z,renovate[bot],0,0,1,6,1,0,0,[],,0,9794.0,0,0,0,0,7015931.167562,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `461ef6c` -> `6db8d63` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC45Ny4wIiwidXBkYXRlZEluVmVyIjoiMzguOTcuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29571,2024-10-06T16:39:51Z,2024-10-06T18:34:11Z,renovate[bot],0,0,1,151,1,0,0,[],,0,6889.0,0,0,0,0,7018801.971319,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [eslint-plugin-import](https://redirect.github.com/import-js/eslint-plugin-import) | [`2.30.0` -> `2.31.0`](https://renovatebot.com/diffs/npm/eslint-plugin-import/2.30.0/2.31.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/eslint-plugin-import/2.31.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/eslint-plugin-import/2.31.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/eslint-plugin-import/2.30.0/2.31.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/eslint-plugin-import/2.30.0/2.31.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.22.5` -> `4.24.0`](https://renovatebot.com/diffs/npm/rollup/4.22.5/4.24.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.24.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.24.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.22.5/4.24.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.22.5/4.24.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>import-js/eslint-plugin-import (eslint-plugin-import)</summary>

### [`v2.31.0`](https://redirect.github.com/import-js/eslint-plugin-import/blob/HEAD/CHANGELOG.md#2310---2024-10-03)

[Compare Source](https://redirect.github.com/import-js/eslint-plugin-import/compare/v2.30.0...v2.31.0)

##### Added

-   support eslint v9 (\[[#&#8203;2996](https://redirect.github.com/import-js/eslint-plugin-import/issues/2996)], thanks \[[@&#8203;G-Rath](https://redirect.github.com/G-Rath)] \[[@&#8203;michaelfaith](https://redirect.github.com/michaelfaith)])
-   \[`order`]: allow validating named imports (\[[#&#8203;3043](https://redirect.github.com/import-js/eslint-plugin-import/issues/3043)], thanks \[[@&#8203;manuth](https://redirect.github.com/manuth)])
-   \[`extensions`]: add the `checkTypeImports` option (\[[#&#8203;2817](https://redirect.github.com/import-js/eslint-plugin-import/issues/2817)], thanks \[[@&#8203;phryneas](https://redirect.github.com/phryneas)])

##### Fixed

-   `ExportMap` / flat config: include `languageOptions` in context (\[[#&#8203;3052](https://redirect.github.com/import-js/eslint-plugin-import/issues/3052)], thanks \[[@&#8203;michaelfaith](https://redirect.github.com/michaelfaith)])
-   \[`no-named-as-default`]: Allow using an identifier if the export is both a named and a default export (\[[#&#8203;3032](https://redirect.github.com/import-js/eslint-plugin-import/issues/3032)], thanks \[[@&#8203;akwodkiewicz](https://redirect.github.com/akwodkiewicz)])
-   \[`export`]: False positive for exported overloaded functions in TS (\[[#&#8203;3065](https://redirect.github.com/import-js/eslint-plugin-import/issues/3065)], thanks \[[@&#8203;liuxingbaoyu](https://redirect.github.com/liuxingbaoyu)])
-   `exportMap`: export map cache is tainted by unreliable parse results (\[[#&#8203;3062](https://redirect.github.com/import-js/eslint-plugin-import/issues/3062)], thanks \[[@&#8203;michaelfaith](https://redirect.github.com/michaelfaith)])
-   `exportMap`: improve cacheKey when using flat config (\[[#&#8203;3072](https://redirect.github.com/import-js/eslint-plugin-import/issues/3072)], thanks \[[@&#8203;michaelfaith](https://redirect.github.com/michaelfaith)])
-   adjust ""is source type module"" checks for flat config (\[[#&#8203;2996](https://redirect.github.com/import-js/eslint-plugin-import/issues/2996)], thanks \[[@&#8203;G-Rath](https://redirect.github.com/G-Rath)])

##### Changed

-   \[Docs] \[`no-relative-packages`]: fix typo (\[[#&#8203;3066](https://redirect.github.com/import-js/eslint-plugin-import/issues/3066)], thanks \[[@&#8203;joshuaobrien](https://redirect.github.com/joshuaobrien)])
-   \[Performance] \[`no-cycle`]: dont scc for each linted file (\[[#&#8203;3068](https://redirect.github.com/import-js/eslint-plugin-import/issues/3068)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[Docs] \[`no-cycle`]: add `disableScc` to docs (\[[#&#8203;3070](https://redirect.github.com/import-js/eslint-plugin-import/issues/3070)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[Tests] use re-exported `RuleTester` (\[[#&#8203;3071](https://redirect.github.com/import-js/eslint-plugin-import/issues/3071)], thanks \[[@&#8203;G-Rath](https://redirect.github.com/G-Rath)])
-   \[Docs] \[`no-restricted-paths`]: fix grammar (\[[#&#8203;3073](https://redirect.github.com/import-js/eslint-plugin-import/issues/3073)], thanks \[[@&#8203;unbeauvoyage](https://redirect.github.com/unbeauvoyage)])
-   \[Tests] \[`no-default-export`], \[`no-named-export`]:  add test case (thanks \[[@&#8203;G-Rath](https://redirect.github.com/G-Rath)])

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.24.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4240)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.23.0...v4.24.0)

*2024-10-02*

##### Features

-   Support preserving and transpiling JSX syntax ([#&#8203;5668](https://redirect.github.com/rollup/rollup/issues/5668))

##### Pull Requests

-   [#&#8203;5668](https://redirect.github.com/rollup/rollup/pull/5668): Introduce JSX support ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert), [@&#8203;Martin-Idel](https://redirect.github.com/Martin-Idel), [@&#8203;felixhuttmann](https://redirect.github.com/felixhuttmann), [@&#8203;AlexDroll](https://redirect.github.com/AlexDroll), [@&#8203;tiptr](https://redirect.github.com/tiptr))

### [`v4.23.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4230)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.22.5...v4.23.0)

*2024-10-01*

##### Features

-   Collect all emitted names and originalFileNames for assets ([#&#8203;5686](https://redirect.github.com/rollup/rollup/issues/5686))

##### Pull Requests

-   [#&#8203;5686](https://redirect.github.com/rollup/rollup/pull/5686): Add names and originalFileNames to assets ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC45Ny4wIiwidXBkYXRlZEluVmVyIjoiMzguOTcuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29566,2024-10-06T10:58:36Z,2024-10-06T12:31:26Z,RenaudRohlinger,4,0,1,7,2,1,1,[],173.0,0,5571.0,0,0,0,0,7040595.376128,,0,1,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.12 <br> **170.5** | -8 B <br> **-1 B** |
| WebGPU | 807.64 <br> **217.52** | 807.64 <br> **217.51** | -4 B <br> **-6 B** |
| WebGPU Nodes | 807.15 <br> **217.38** | 807.15 <br> **217.38** | -4 B <br> **-6 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.84 <br> **111.78** | -8 B <br> **-1 B** |
| WebGPU | 535.43 <br> **144.5** | 535.43 <br> **144.5** | -4 B <br> **-5 B** |
| WebGPU Nodes | 491.54 <br> **134.24** | 491.54 <br> **134.24** | -4 B <br> **-5 B** | Does this PR fixes the issue on your device @Mugen87? 👀  I can easier test with updated builds on `dev` after the merge. Or you update the builds once in this PR so we can use the following URL for testing:

https://rawcdn.githack.com/RenaudRohlinger/three.js/utsubo/fix/webgl-compressed-texture-3d/examples/webgl_texture2darray_compressed.html Well, pretty safe to merge anyway, let's try! 😁",,"Fixed #29539

**Description**
On Android and Oculus devices, calling gl.compressedTexSubImage3D with the extra srcOffset and srcLengthOverride parameters to default (0,0) results in the following error:
`[.WebGL-0x2032d0d00]GL ERROR :GL_INVALID_VALUE : glCompressedTexSubImage3D: size is not correct for dimensions`

The function `gl.compressedTexSubImage3D` was being called with two extra parameters (0, 0) at the end:
```js
gl.compressedTexSubImage3D(
  gl.TEXTURE_2D_ARRAY,
  i,
  0,
  0,
  0,
  mipmap.width,
  mipmap.height,
  image.depth,
  glFormat,
  mipmap.data,
  0, // Optional parameter (srcOffset)
  0  // Optional parameter (srcLengthOverride)
);
```

When supplying image data directly via an ArrayBufferView (e.g., mipmap.data), the function's signature does not require srcOffset and srcLengthOverride parameters. These extra parameters are only valid when specifying a sub-range of the source data. Including them with default values (0, 0) can cause issues on platforms that strictly adhere to the OpenGL ES specification, which does not support these parameters in the same way based on my understanding of the code: https://chromium.googlesource.com/chromium/src/+/6682b1c4aac00aee61b09ba8f6084f1790429315/gpu/command_buffer/service/gles2_cmd_decoder.cc

While some platforms may read these extra parameters as offset and length override, Android and Oculus implementations probably strictly follow the OpenGL ES standards, leading to a GL_INVALID_VALUE error.

The gl.compressedTexSubImage3D API can be confusing due to the multiple ways to call it between WebGL and OpenGL ES, which might have caused this issue. More here:
https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D
https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glCompressedTexSubImage3D.xhtml

Since both optional parameters were not currently being used I believe it should be safe for the moment to simply remove them in order to fix #29539.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29565,2024-10-06T09:25:14Z,2024-10-06T09:31:36Z,Mugen87,0,0,1,4,2,0,0,[],,0,386.0,0,0,0,0,7051382.959189,,0,1,1,False,[],,,"Related issue: -

**Description**

The shadow camera in `webgl_postprocessing_outline` is way too close to the scene which means certain objects lie outside the shadow camera frustum and thus do not correctly cast shadow.",
29561,2024-10-05T17:47:20Z,2024-10-06T02:55:29Z,PoseidonEnergy,1,0,4,49,3,0,0,[],186.0,0,32889.0,0,0,0,0,7075154.87395,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.6 <br> **217.49** | 807.6 <br> **217.49** | +8 B <br> **+0 B** |
| WebGPU Nodes | 807.11 <br> **217.36** | 807.11 <br> **217.35** | +8 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.38 <br> **144.47** | 535.39 <br> **144.48** | +8 B <br> **+3 B** |
| WebGPU Nodes | 491.49 <br> **134.28** | 491.5 <br> **134.29** | +8 B <br> **+5 B** |",,"Small refinement to PR https://github.com/mrdoob/three.js/pull/29447:

1. Improved wording in a TODO comment in AnalyticLightNode.js.

3. Removed unnecessary comments in NodeMaterial.js. First, the cameraNear/cameraFar nodes **should** be used, so the comment stating that they shouldn't be used is inaccurate. Second, the comment describing the `float(1e27)` bug now has its own issue report https://github.com/mrdoob/three.js/issues/29560

5. Removed unnecessary "".add( 1 ).div( 2 )"" operations from the log depth calculation and added more detail to the log depth comments in ViewportDepthNode.js.",
29563,2024-10-05T21:55:41Z,2024-10-06T02:52:43Z,Mugen87,0,0,1,24,6,0,0,[],,0,17822.0,0,0,0,0,7075321.144319,,0,1,1,False,[],,,"Related issue: -

**Description**

This PR introduces a small memory optimization for new node based post processing modules.

Certain intermediate render targets used with `QuadMesh` do not require a depth render buffer since every fragment location is only rendered once. In this case, the render targets can be created with `depthBuffer: false`.
",
29562,2024-10-05T20:55:44Z,2024-10-05T21:01:56Z,sunag,1,0,1,12,1,0,0,[],178.0,0,646.0,0,0,0,0,7096094.734745,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.6 <br> **217.49** | 807.64 <br> **217.52** | +41 B <br> **+25 B** |
| WebGPU Nodes | 807.11 <br> **217.36** | 807.15 <br> **217.38** | +41 B <br> **+25 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.38 <br> **144.47** | 535.42 <br> **144.5** | +41 B <br> **+24 B** |
| WebGPU Nodes | 491.49 <br> **134.28** | 491.53 <br> **134.24** | +41 B <br> **-42 B** |",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29560

**Description**

Fix exponentional JS to shader language conversion. For example: `float(1e21)`
",
29557,2024-10-05T05:00:33Z,2024-10-05T16:52:22Z,sunag,1,0,5,400,35,0,0,[],185.0,0,56285.0,0,0,0,0,7097767.911216,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 808.38 <br> **217.75** | 807.6 <br> **217.49** | -786 B <br> **-263 B** |
| WebGPU Nodes | 807.89 <br> **217.62** | 807.11 <br> **217.36** | -786 B <br> **-262 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.6 <br> **144.85** | 535.38 <br> **144.47** | -1.22 kB <br> **-371 B** |
| WebGPU Nodes | 492.71 <br> **134.59** | 491.49 <br> **134.28** | -1.22 kB <br> **-300 B** |",,"**Description**

`timerLocal()`, `timerGlobal()` and `timerDelta()` the differences are often confusing to the user and not everyone ends up using the scale argument present in the function. This was replaced by `time` and `deltaTime`, which are the most common variable present in various projects. The class name was changed to `Timer`. In addition to the better design, the `uniform` is updated once per frame, which should result in better performance.

The oscillators were also simplified.",
29559,2024-10-05T08:55:18Z,2024-10-05T09:01:17Z,Mugen87,0,0,4,777,4,0,0,[],,0,359.0,0,0,0,0,7139609.565114,,0,4,1,False,[],,,"Related issue: #29295

**Description**

This PR adds the existing SMAA shader to TSL as `SMAANode`. 

SMAA is an alternative to FXAA. It produces a better quality but also requires three instead of one pass.

FYI: The uv conventions of `WebGPURenderer` matches the one from the original SMAA reference implementation which is nice since we need no `WebGLRenderer` specific sign flips anymore.",
29524,2024-09-28T21:12:20Z,2024-10-05T16:51:07Z,swift502,24,10,14,802,2,3,1,[],64025.0,0,589128.0,0,0,0,0,7111418.602239,,0,14,1,False,"['swift502', 'mrdoob', 'Mugen87']","Got it on WebGPU. Needs code review but it works.
Let me know if you think this PR is a good idea or no.

![cmp5](https://github.com/user-attachments/assets/bbc03724-9684-452f-9024-c25c714704af)
 This needs a very close review since the original developer of the latest version is very experienced in this area and we had no complains about the anti-aliasing quality so far. It might take a while unit I can provide feedback for this PR. @Mugen87 Sure thing. I'm open to being wrong. I just noticed a change in quality immediately. Sorry, last piece of evidence, just to cover my base. Here's a scene from the infamously aliased game Kentucky Route Zero, with the two shaders applied. You can check out the results yourself.

[Original image](https://github.com/user-attachments/assets/7b764d3c-ca36-4802-99ec-1c33ed155435)
[2022 shader](https://github.com/user-attachments/assets/427de401-fb25-4fc6-9339-d58440c93fa9)
[Proposed shader](https://github.com/user-attachments/assets/8f37a817-a496-47c0-bee0-8a3ab214c0ec)

Current shader completely fails to recognize these areas. Keep in mind that that's supposed to be the primary function of this shader.
![image](https://github.com/user-attachments/assets/0b87611d-5eba-40e4-9548-e78c66cdba69)

While areas it does recognize exhibit dithering artifacts.
![image](https://github.com/user-attachments/assets/e8c77af9-596e-4c95-ae93-55663845171b)

Same here, current completely fails in the background, while overblurring the car windows.
![cmp6](https://github.com/user-attachments/assets/eef24237-a90e-4e36-9fa7-2a1fb29c2db6)

When the contrast threshold is brought down, a lot more edges are rocognized, but the quality is just not the same as the previous algorithm.
![cmp7](https://github.com/user-attachments/assets/7045af24-6d43-4eaa-ba22-9c4232ddc6e1)

I rest my case. I'll show myself out, I'm too invested in this. 😄
Again, if someone knows how to just fix the current shader, by all means let's do that. But I hope I've shown compelling evidence that it's not working as well as the previous implementation has. The proposed version sure looks much better! I also wouldn't mind reverting to the 2018 version. I don't think alpha support is that important? @Mugen87 
> the original developer of the latest version is very experienced in this area

More context from the original developer:
https://github.com/mrdoob/three.js/pull/23768#issuecomment-2383872521

@mrdoob I think we could easily introduce alpha support to the 2018 version.
But how important is WebGPU? The 2018 version is incredibly long, and would be very tedious to port. (Unless you guys have an automated way of doing it) On top of being very long, 2018 also contains a lot of unused code. All of these were motivations to choose an implementation which has the same fidelity, but is clean and maintainable, like the one I'm proposing. > I don't think alpha support is that important?

The community frequently asked for alpha support in context of FX. Since MSAA as well as our manual SSAA support alpha, I think's good to support it with FXAA as well. I'm familiar with the current FXAA shader but I currently don't have the time to study the new code. However, I'm okay with supporting the proposed solution now if @swift502 is willing to support the new FXAA implementation. @Mugen87 As much as I'm able to. 👍

The code is from a tutorial where every line is explained. So I should be able to fix potential shader issues. I've quickly checked the example at https://rawcdn.githack.com/swift502/three.js/fxaa/examples/index.html?q=fxaa#webgpu_postprocessing_fxaa and they look good so far.

Just one hint: Be aware that `WebGPURenderer` uses different NDC and uv conventions than `WebGLRenderer` so you might have to update the shader code accordingly to produce a 100% match. This details are sometimes easy to overlook and not implementing it right might not be visible in a demo scene.

- NDC Z-range in WebGPU is `[ 0, 1 ]` and in WebGL it's `[ -1, 1 ]`
- UV y is `y.oneMinus()` in WebGPU. That is relevant if you sample pixels ""above"" and ""below"" the current pixel which is typical for FXAA. That means you might have to switch the sign to sample the correct north and south pixel. Check how these uv offsets in TSL differ to the GLSL/WebGLRenderer version:

https://github.com/mrdoob/three.js/blob/668c88e1f66505cf89654e4004956d8e8ee93665/examples/jsm/tsl/display/FXAANode.js#L94-L102

https://github.com/mrdoob/three.js/blob/668c88e1f66505cf89654e4004956d8e8ee93665/examples/jsm/shaders/FXAAShader.js#L119-L126 > That means you might have to switch the sign to sample the correct north and south pixel

I'll get onto fixing that.

Could you help me with how to pass objects (glsl structs) as parameters, and as return values?
https://github.com/mrdoob/three.js/blob/3146aa49b3d971e300620914c35d212bd74f6d99/examples/jsm/tsl/display/FXAANode.js#L259-L262
https://github.com/mrdoob/three.js/blob/3146aa49b3d971e300620914c35d212bd74f6d99/examples/jsm/tsl/display/FXAANode.js#L124-L126 > you might have to update the shader code accordingly to produce a 100% match.

I'm getting like 99.5% close to WebGL, like in the comparison I posted earlier. https://github.com/mrdoob/three.js/pull/29524#issuecomment-2381389180

Is that normal? The result also looks the same whether I flip the vertical coordinates or not.

I double checked by flipping the image (to check if the algorithm behaves differently upside down), and the results are always the same. So it seems to be correct? ## Performance

I did some benchmarks where I put a 1000x for loop in the shader's main function call. No idea how accurate that is, but I got some data.
The test scene looks like this:

![image](https://github.com/user-attachments/assets/ccc9cf57-a63d-4a87-a9c8-f487295c668f)

Initially, this new shader was significantly slower (by 25%), so I've lowered the samples from 10 to 6, and now the shader is 10% faster than the 2022 implementation. (according to my test)

For reference 2018 used 4 samples, and 2022 is using 5.

## Alpha
I double checked that alpha works, here it is rendering over html text

![image](https://github.com/user-attachments/assets/8faa1fa9-4149-423b-b852-75589391c6f1)

## Other

- cleaned up the TSL node. I's still not 1:1 port, but I can't figure out how to do glsl structs in TSL. If it can be done, I'd love to know. 🙏 @Mugen87 
- double checked the threshold constants, and raising them showed no performance benefits, suggesting they solely influence edge recognition accuracy. So I kept them where they are.

I'm personally happy with the code now. I'll be happy to do further changes based on feedback.
 > I'm getting like 99.5% close to WebGL, like in the comparison I posted earlier. https://github.com/mrdoob/three.js/pull/29524#issuecomment-2381389180 Is that normal? The result also looks the same whether I flip the vertical coordinates or not.

We need a 100% match since there should be no difference. What I did when porting FXAA to TSL and encountered a similar issue, I literally compared line by line the TSL and GLSL version by assigning the current result values of a line to frag color. In that way I eventually found the difference which I believe was a missing one-minus computation in TSL. 

Sorry but there should be no pixel differences like in https://github.com/mrdoob/three.js/pull/29524#issuecomment-2381389180. You can easily see them at the bottom of the triangle.  @Mugen87 Have you ever encountered problems with number precision? Everything is the same until it hits a greater than comparison.

```glsl
e.isHorizontal = horizontal >= vertical;
```
vs
```js
const isHorizontal = horizontal.greaterThanEqual( vertical );
```

where suddenly some pixels flip on/off differently, when horizontal and vertical have similar values. /cc @sunag  @Mugen87 I unflipped the shader because now it produces 100% match even upside down. And this way it doesn't need the uv flipping hacks, and is a 1:1 port with glsl.

Is that fine? It means ""north"" refers to the down direction now. But basically that's a naming issue. TBH, I find that confusing. The logic/naming should be correct even if the implementation differs from GLSL.

Keep in mind that at some point `WebGLRenderer` will be deprecated as well as `EffectComposer` and `FXAAShader`. So the TSL implementation should be the leading one and coherent in any event. Alright I'll fix it. Corrected. I got nothing else to add. 👌

These new shaders should be marginally faster, should be much more faithful to the FXAA white paper specification, and provide results much closer to Nvidia's reference implementations of FXAA.
I think Daniel Sturk's implementation could still be presented under a different name as an alternative to FXAA, since some people may prefer it, and it was already ported to TSL.

And thanks a lot for the help @sunag. 🙏 I think we should just have one version.
If someone complains that it looks different we can think about what to do then.",,"## Issue

I believe the current FXAA implementation is broken, and this PR attempts to fix it.

In 2022, a new version of FXAA was merged, which exhibits inferior quality compared to the previous version. https://github.com/mrdoob/three.js/pull/23768

It's more blurry.
![cmp1](https://github.com/user-attachments/assets/9605652f-34c2-4172-baf4-e436e9f3f8c3)

And has worse edge recognition.
![cmp2](https://github.com/user-attachments/assets/308accbe-8da2-4228-b180-412bf168332f)

## Solution

The MIT-0 FXAA implementation by Jasper Flick.
https://catlikecoding.com/unity/tutorials/advanced-rendering/fxaa/
https://catlikecoding.com/unity/tutorials/license/

- correct FXAA implementation
- clean code, unlike 2018
- based on the higher quality 28th quality preset, compared to previous 12th. This mainly means it will pick up on more details in low contrast areas.
- supports transparent backgrounds, just like the 2022 version

2022 downgrade visible on the official example.
![cmp3](https://github.com/user-attachments/assets/0e1eedaf-ccf8-4e9b-b65a-ce9841be946d)

Proposed shader matches 2018 in visual fidelity.
![cmp4](https://github.com/user-attachments/assets/11a81a25-1abf-4257-a9c7-15ec17ebe3a3)

## Performance considerations

Higher quality means more computation. We're jumping from 5 samples to 10 and have lower contrast thresholds. If this is a concern, let me know. I haven't done any tests so can't confirm how much more expensive this implementation is.

We could even edit the shader to match the 2018 performance and quality, if desirable.

**Edit:** See https://github.com/mrdoob/three.js/pull/29524#issuecomment-2386681979 for performance testing.","`!pAtEnd` it's not a currently TSL syntax. Try `pAtEnd.not()`. You can use just a simple JS function without `Fn()`, Thus you can return an JS object, with any TSL object, preserving the booleans variables. It can replace GLSL structs in this sense. That did it! I got 100% match 🙏🙏

Thanks a lot Amazing! Thank you! Ok, I can't get it to work across two functions.

```js

const Struct = ( color ) => ( { color } );

const TestFn = Fn( () => {

	return Struct( vec4( 1.0, 0.0, 0.0, 1.0 ) );

} );

const ApplyFXAA = Fn( ( [ uv, texSize ] ) => {

	return TestFn().color.mul( 0.5 );
	...
```

`TestFn().color.mul( 0.5 );` gives `TypeError: Cannot read properties of undefined (reading 'mul')`.

Any ideas how to make it work? I guess it makes sense? The JS object will get lost in translation to WGSL/GLSL right? I think you can use a simple JS function like the example below, without `Fn`. This way we can return a structure.

```js
const TestFn = () => {

	return { color: vec4( 1.0, 0.0, 0.0, 1.0 ) };

};

const ApplyFXAA = Fn( ( [ uv, texSize ] ) => {

	return TestFn().color.mul( 0.5 );
	...
``` I can't get it to work. I wanted to pass the object between different complex Fn functions, but I can't find a way to do that. I'll just move on. But thanks still. 🙏 Could you test again with this approach? https://github.com/mrdoob/three.js/pull/29524/commits/c63942bcd533b5622ac42fc9cf1f96a4a870361e Yees. 🙂 "
29552,2024-10-05T01:45:47Z,2024-10-05T03:11:24Z,sunag,2,0,1,27,3,0,0,[],196.0,0,15905.0,0,0,0,0,7149835.677349,,0,1,1,False,"['github-actions[bot]', 'Spiri0']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 808.1 <br> **217.67** | 808.2 <br> **217.71** | +99 B <br> **+47 B** |
| WebGPU Nodes | 807.61 <br> **217.53** | 807.71 <br> **217.58** | +99 B <br> **+47 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.53 <br> **144.8** | 536.63 <br> **144.86** | +99 B <br> **+53 B** |
| WebGPU Nodes | 492.61 <br> **134.53** | 492.71 <br> **134.59** | +99 B <br> **+53 B** | As usual, your solution is much more elegant. More efficient and shorter.
I tested it straight away and it worked as expected",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29401

**Description**

Introduces `pointer` support, below is an example of how to use it for storage buffers, although it has many other applications.

```js
// buffer

const particleBuffer = new THREE.StorageInstancedBufferAttribute( particleNum, 2 );

// function

const getElement = wgslFn( `
fn main_vertex( vertexBuffer: ptr<storage, array<vec2<f32>>, read_write>, index: u32 ) -> vec2f {

	return vertexBuffer[ index ];

}
` );

// function call

const particle = getElement( particleBufferNode, instanceIndex );

```",
29556,2024-10-05T04:31:13Z,2024-10-05T04:37:30Z,sunag,0,0,1,9,3,0,0,[],,0,387.0,0,0,0,0,7155428.404075,,0,1,1,False,[],,,Related issue: https://github.com/mrdoob/three.js/pull/29511,
29555,2024-10-05T04:10:08Z,2024-10-05T04:55:20Z,sunag,1,0,3,5,2,0,0,[],183.0,0,2716.0,0,0,0,0,7154364.448555,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 808.41 <br> **217.77** | 808.38 <br> **217.75** | -26 B <br> **-12 B** |
| WebGPU Nodes | 807.92 <br> **217.63** | 807.89 <br> **217.62** | -26 B <br> **-12 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.63 <br> **144.86** | 536.6 <br> **144.85** | -26 B <br> **-10 B** |
| WebGPU Nodes | 492.71 <br> **134.59** | 492.71 <br> **134.59** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29503

**Description**

Maybe we can think of an approach closer to what we did with normals.",
29508,2024-09-26T15:20:19Z,2024-09-26T15:31:43Z,sunag,0,0,1,124,1,0,0,[],,0,734128.0,0,0,0,0,7160342.476527,,0,1,1,False,[],,,"**Description**

This fixed the zoom in chrome, probably due to some browser change.",
29553,2024-10-05T02:02:56Z,2024-10-05T02:09:17Z,sunag,0,0,1,1,1,0,0,[],,0,385.0,0,0,0,0,7164329.17679,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29520
",
29554,2024-10-05T02:59:19Z,2024-10-05T03:09:49Z,sunag,1,0,1,59,2,0,0,[],191.0,0,633.0,0,0,0,0,7160698.419478,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 808.1 <br> **217.67** | 808.31 <br> **217.72** | +211 B <br> **+53 B** |
| WebGPU Nodes | 807.61 <br> **217.53** | 807.82 <br> **217.58** | +211 B <br> **+54 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.53 <br> **144.8** | 536.53 <br> **144.8** | +0 B <br> **+0 B** |
| WebGPU Nodes | 492.61 <br> **134.53** | 492.61 <br> **134.53** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29551

**Description**

The `varying` declaration was being formatted instead of the source value causing errors in some cases when using WebGLBackend.",
29541,2024-10-02T01:52:25Z,2024-10-03T21:43:38Z,donmccurdy,3,2,5,251,4,2,1,[],43067.0,0,157876.0,0,0,0,0,7266670.487819,,0,5,1,False,"['donmccurdy', 'Mugen87']","I believe the changes to KTX2Exporter here are correct and necessary, but I'm unsure about adding an example nearly identical to the current EXRExporter example. I do want to have an example, though... should I just use a different scene/texture?  > should I just use a different scene/texture?

That sounds good! Ok, done!",,"Fixes some mistakes in KTX2Exporter-generated metadata, and adds an example closely based on the EXRExporter example. Tested by exporter PMREM textures and data textures, with output validated by https://github.com/KhronosGroup/KTX-Software.

```bash
# print info
ktx info texture.ktx2

# validate
ktx validate texture.ktx2

# extract to OpenEXR
ktx extract texture.ktx2 texture.exr
```

The raw float16 or float32 files exported from a PMREM texture tend to be large. They can be losslessly compressed with ZSTD to reduce the size somewhat...

```bash
ktxsc --zcmp 19 texture.ktx2
```

... but smaller file sizes would require more specialized compression, like BC6H or ASTC. The [Basis Universal HDR UASTC](https://github.com/BinomialLLC/basis_universal/wiki/UASTC-HDR-Texture-Specification-v1.0) spec, from Binomial, is a promising newer option available with KTX2 as well.","## Unused variable, import, function or class

Unused variable exportType.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2465) ## Unused variable, import, function or class

Unused variable exportCompression.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2466)"
29547,2024-10-03T18:19:59Z,2024-10-03T21:07:43Z,sunag,1,0,4,74,10,0,0,[],186.0,0,10067.0,0,0,0,0,7268826.225024,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.25 <br> **217.46** | 807.5 <br> **217.49** | +256 B <br> **+35 B** |
| WebGPU Nodes | 806.76 <br> **217.32** | 807.01 <br> **217.36** | +256 B <br> **+35 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.06 <br> **144.73** | 536.32 <br> **144.76** | +256 B <br> **+30 B** |
| WebGPU Nodes | 492.14 <br> **134.46** | 492.4 <br> **134.49** | +256 B <br> **+30 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29503#issuecomment-2380630063

**Description**

I'm thinking about improving the computational geometry example with `material.geometryNode` to handle computation only when the object is rendered. Among some other benefits we can get like https://github.com/mrdoob/three.js/pull/29503#issuecomment-2380630063 we will need synchronous computation to avoid race condition problem.

- [x] [Renderer: Added sync `compute()`](https://github.com/mrdoob/three.js/pull/29547/commits/a0d0da86da8ebdf212bc551aaaf8e491d297882e)
- [x] [ComputeNode: Use `.onInit( fn )` instead of `.onInit=fn`](https://github.com/mrdoob/three.js/pull/29547/commits/fcd243c54c903303e3d9762fb79df3d9ba9bdfd0)
- [x] [Update examples](https://github.com/mrdoob/three.js/pull/29547/commits/20c47381dc22437dff355a062bddb759a50d9ebf)
",
29510,2024-09-27T02:24:32Z,2024-10-03T21:07:04Z,donmccurdy,8,17,7,54,1,3,0,[],187.0,0,586522.0,0,0,0,0,7268098.51612,,0,7,1,False,"['github-actions[bot]', 'donmccurdy', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.25 <br> **217.46** | 807.63 <br> **217.59** | +380 B <br> **+135 B** |
| WebGPU Nodes | 806.76 <br> **217.32** | 807.14 <br> **217.46** | +380 B <br> **+136 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 536.06 <br> **144.73** | 536.06 <br> **144.73** | +0 B <br> **+0 B** |
| WebGPU Nodes | 492.14 <br> **134.46** | 492.14 <br> **134.46** | +0 B <br> **+0 B** | @sunag I notice the nodes defined in https://github.com/mrdoob/three.js/blob/dev/src/nodes/display/ColorAdjustment.js are simpler, just a `Fn` declaration and not a class. Are there particular pros/cons to defining a node one way or another? I'm tempted to switch this over to a `Fn` declaration and to move it to `ColorAdjustment.js`. Sounds like a good idea, if you use `Fn` this will simplify it, it will automatically apply `nodeObject()` to the parameters and reduce the initial structure. I think we can move this node for addons too? https://github.com/mrdoob/three.js/pull/29511 I think my preference would be to move it into `ColorAdjustment.js` — especially once it's simplified, it's not so different from the other functions there. But moving the color adjustment functions all into addons could make sense, perhaps excluding luminance, which I think we depend on elsewhere. Reimplemented as a simpler function and moved to `ColorAdjustment.js`. I've also changed the clamp closer to the approach taken by Filament, though I'm unsure whether we need the final `max(output, 0.0)` step.  > I'm unsure whether we need the final max(output, 0.0) step.

I think it would be better to use `max` externally if necessary since the limits can be applied easily.

It would be better remove the names from `.toVar()`, this may conflict with other variables depending on the flow there may be other names that are the same, it is certainly something we will improve soon. @sunag done and done! I did find `.toVar( 'name' )` very useful while debugging an error in my shaders, so if that's something we can make easier in the future that would be awesome. :) ",,"Implements ASC Color Decision List (CDL) v1.2.

I'm not ready to do an integration with the TSL tone mapping nodes quite yet, but here's an early comparison, configuring the CDL to emulate the AgX “Punchy” look, with higher saturation and contrast:

| ACES Filmic | Reinhard | AgX Base | AgX Punchy |
|-------------|----------|----------|------------|
|  ![coffeemat_aces](https://github.com/user-attachments/assets/876b60b4-8fc3-4c7c-baa4-a99b0b668371) | ![coffeemat_reinhard](https://github.com/user-attachments/assets/231f6a7e-9180-4fef-98f5-39770c6e433f) | ![coffeemat_base](https://github.com/user-attachments/assets/66538624-c6c5-4db5-99cf-af040e64f3b5) | ![coffeemat_punchy](https://github.com/user-attachments/assets/0e167b76-4c85-4711-93a9-e757a48764b3) |

The goal is to provide configurability for our current hard-coded tone mappers.

Related:

- #28544

/cc @WestLangley @sunag ","Is it overkill for the parameters to be Nodes? Can't they just be float (or ultimately vec3) As we discussed offline, this should be implemented in log space, and then converted back to linear.

See https://www.mdpi.com/2313-433X/3/4/40 where is says:

>This conversion (to log space) is necessary because the CDL Equations (1) and (2) encode meaningful color-correction metadata only if operating on CVs (code values) of a “log” color-space.

This can be corrected later if you want.

EDITED for clarity. Probably right – I'll make the change to just constant `float | vec3` inputs unless @sunag has other preferences for node best practices? 

We should give each a default value, as well. I'd really like to see them as vec3 so we can experiment. I have some doubts about this rule (see introduction to https://blender.stackexchange.com/a/55239/43930), but, all usage I have in mind for future PRs would indeed be within a log space. That said — I don't think we can put the conversion inside of CDLNode, as the particular choice of log space may vary, and further color correction operations may follow in the same log space. If we're implementing looks for AgX we'd likely use AgX Log (Kraken), and for ACES Filmic we'd perhaps use ACEScc. #29450 may eventually need to be extended to handle the common log spaces. I don't think it would be a problem, as you are using `nodeObject()` in the `cdl()` function parameters, it can support any primitive value like a JS number, constant, uniform or procedural, float or vec3. We can let the user choose what is best for him. I think can add the default values ​​here, this helps with `typing` and since the process is before of `nodeObject()` we can use JS numbers, nodes or three.js `Vector*` values. I was basing my comment on Filament's [implementation](https://github.com/google/filament/blob/main/filament/src/details/ColorGrading.cpp) and the assumption that log space was the correct space. I am not sure if the particular choice of log space is important for our purposes.

Since we have a node-based system -- and not a fixed pipeline -- I would convert to log and back inside the CDLNode so the calculation is correct.  @donmccurdy Maybe you can use node args and write the code it works with either float or vec3. @WestLangley it does work with either float or vec3. :) 

With vec3 input we can, for example, do the ""AgX Golden"" look:

![chair_agx_golden](https://github.com/user-attachments/assets/ff3f8a25-1d44-41c6-b142-1bb3eea7d0c3)
 Great! That is exactly why I was pushing for vec3 support!  The CDL spec and the ACES document above disagree about this; the former is very clear that application in linear spaces is allowed, so long as you're consistent in communicating the color space expected for any particular set of CDL coefficients.

The ACES pipeline can of course be more opinionated about what to allow, as can we... But I don't think we can embed a particular color space transform into the operation and still call it a CDL, it will be impossible to compare results with other software, and that's the real point of using a CDL. 

If we are offering an artist-friendly color grading API like Filament’s ColorGrading.cpp (perhaps we should!), then embedding the log conversion would be entirely appropriate. The CDL would be a single step, in log space, within that process. But the CDL is a mathematical operation, low-level and not particularly artist-friendly, and it must be possible to compose different pipelines around it... which I feel that an internal log conversion will block.
 >linear spaces is allowed, so long as you're consistent in communicating the color space expected for any particular set of CDL coefficients.

In that case, I would argue the color space should be added as a parameter, and the algorithm modified to honor it.

That parameter would include the current working color space, in which case no color space transform is applied. Sorry, I'm afraid I don't see how this can work. Other common color operators (like contrast) may receive comparable benefit from using a log space, and I think it will be impractical (for performance, numerical precision, and creative intent) to enforce a color space conversion within low-level operators.

Note that the CDL is not itself a ""Look"" (or LMT as in the ACES literature), a CDL might be just a component of a look. Or one CDL might be applied before tone mapping, and another after. For that reason, we also cannot require that the input to a CDL must be in the global working color space.

To your points — if we wanted to say that a _Look_ should always be done in a log space, I'm aware of no issues with that statement, and I have no plans to do otherwise! >The CDL spec ...  is very clear that application in linear spaces is allowed

You are correct. Both linear and log space are allowed.

Just so I understand your point, are you planning to add a log-conversion Node of some sort, so users who prefer to apply the CDL in log space can do so? > are you planning to add a log-conversion Node of some sort ...

Yes, certainly! Or maybe log conversion could be supported by THREE.ColorManagement and the existing ColorSpaceNode directly... but I'm nervous about getting that right, and inclined to start with 1-2 dedicated log space nodes instead.

I am also hoping to find a simpler higher-level abstraction so that most users do not need to interact with the CDL node directly, but I am not sure, yet, what that will mean. OK. I see we are not quite sure where this is headed... So I think this is OK, and we'll see what happens!  :-)

An example would be awesome. 🙏 "
29511,2024-09-27T09:15:46Z,2024-09-27T09:42:56Z,Mugen87,2,1,5,355,48,1,0,[],190.0,0,512511.0,0,0,0,0,7317436.480634,,0,5,1,False,"['github-actions[bot]', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 687.46 <br> **170.22** | -3 B <br> **-1 B** |
| WebGPU | 805.13 <br> **216.73** | 805.13 <br> **216.74** | -3 B <br> **+3 B** |
| WebGPU Nodes | 804.64 <br> **216.6** | 804.63 <br> **216.59** | -3 B <br> **-3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | -3 B <br> **-1 B** |
| WebGPU | 534.87 <br> **144.3** | 534.85 <br> **144.34** | -17 B <br> **+35 B** |
| WebGPU Nodes | 491.21 <br> **134.05** | 491.2 <br> **134.09** | -17 B <br> **+31 B** | > ### 📦 Bundle size
> 
> _Full ESM build, minified and gzipped._
> 
> || Before | After | Diff |
> |:-:|:-:|:-:|:-:|
> | WebGL | 687.46 <br> **170.22** | 687.46 <br> **170.22** | -3 B <br> **-1 B** |
> | WebGPU | 805.13 <br> **216.73** | 805.13 <br> **216.74** | -3 B <br> **+3 B** |
> | WebGPU Nodes | 804.64 <br> **216.6** | 804.63 <br> **216.59** | -3 B <br> **-3 B** |
> 
> ### 🌳 Bundle size after tree-shaking
> 
> _Minimal build including a renderer, camera, empty scene, and dependencies._
> 
> || Before | After | Diff |
> |:-:|:-:|:-:|:-:|
> | WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | -3 B <br> **-1 B** |
> | WebGPU | 534.87 <br> **144.3** | 534.85 <br> **144.34** | -17 B <br> **+35 B** |
> | WebGPU Nodes | 491.21 <br> **134.05** | 491.2 <br> **134.09** | -17 B <br> **+31 B** |

I wonder why file sizes didn't get smaller... 🤔",,"Fixed #29505.

**Description**

As suggested in #29505 this PR moves some WebGPU modules from core to addons.
","`webgpu_backdrop_water` seems to have some timing issues. When updating related code, the example tends to fail although nothing changes at the visuals. Adding it to the exception list for now."
29544,2024-10-02T19:36:20Z,2024-10-02T19:43:37Z,Mugen87,1,0,1,14,1,0,0,[],3291.0,0,3292.0,0,0,0,0,7357422.300623,,0,1,1,False,['Mugen87'],Added missing commit directly on `dev`: https://github.com/mrdoob/three.js/commit/48f5603b19432157a7aa053d603f26018b31f7f5,,"Fixed #29439.

**Description**

The PR changes the transparency handling and implements the approach from Blender:

https://github.com/sobotka/blender-addons/blob/7d80f2f97161fc8e353a657b179b9aa1f8e5280b/io_scene_fbx/import_fbx.py#L1444-L1459
",
29543,2024-10-02T02:50:53Z,2024-10-02T08:17:15Z,donmccurdy,1,0,2,6,2,0,0,[],184.0,0,29591.0,0,0,0,0,7391450.369769,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.08 <br> **170.59** | 688.13 <br> **170.5** | +52 B <br> **-89 B** |
| WebGPU | 807.1 <br> **217.42** | 807.15 <br> **217.43** | +52 B <br> **+4 B** |
| WebGPU Nodes | 806.61 <br> **217.29** | 806.66 <br> **217.29** | +52 B <br> **+4 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.8 <br> **111.78** | 462.85 <br> **111.78** | +52 B <br> **+3 B** |
| WebGPU | 535.9 <br> **144.69** | 535.95 <br> **144.69** | +52 B <br> **+3 B** |
| WebGPU Nodes | 491.98 <br> **134.42** | 492.03 <br> **134.42** | +52 B <br> **+3 B** |",,"- fixes #29542
- regression from #29450",
29538,2024-10-01T21:03:01Z,2024-10-02T10:22:00Z,Mugen87,4,0,2,44,2,0,0,[],189.0,0,47939.0,0,0,0,0,7393975.392844,,0,2,1,False,"['github-actions[bot]', 'Mugen87', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.13 <br> **170.5** | +0 B <br> **+0 B** |
| WebGPU | 807.15 <br> **217.43** | 807.26 <br> **217.48** | +109 B <br> **+49 B** |
| WebGPU Nodes | 806.66 <br> **217.29** | 806.77 <br> **217.34** | +109 B <br> **+50 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.78** | 462.85 <br> **111.78** | +0 B <br> **+0 B** |
| WebGPU | 535.95 <br> **144.69** | 536.06 <br> **144.73** | +109 B <br> **+39 B** |
| WebGPU Nodes | 492.03 <br> **134.42** | 492.14 <br> **134.46** | +109 B <br> **+37 B** | In my testing, it seems that both backends render the same with this PR, but the WebGL backend no longer matches `WebGLRenderer`. Tone mapping disabled for comparison.

#29542 is limiting my ability to fully test this. Proper compositor blending is most easily verified in linear color space. There is definitely a difference when comparing `WebGLRenderer` with `WebGPURenderer` since the example uses blending and that is only fully correct in `WebGPURenderer`. When using sRGB output, `WebGLRenderer` performs blending in the wrong color space due to the inline encode. I'm going ahead and merge since the WebGL fallback code path is definitely wrong right now.",,"Fixed #29337

**Description**

This should fix the clear color differences mentioned in #29337.

There was a bug that premultiplied alpha twice for the WebGL backend. The policy should be:

- When the clear color from the render context is used, it already has premultiplied alpha added (`Background` takes care of that).
- When the original clear color is queried via `getClearColor()`, alpha has not been premultiplied so far. That must be done if it is used for the actual clear operation. 
- Premultiplied alpha clear colors must always be used with the WebGL backend since it always uses `alpha: true` for the WebGL rendering context. With WebGPU, premultiplied alpha clear colors are only required when setting `alpha: true` when creating the renderer.",
23768,2022-03-22T20:16:26Z,2022-03-23T01:24:17Z,bhouston,9,0,3,2492,3,0,0,[],18486.0,0,79829670.0,0,0,0,0,7448640.229099,,0,3,1,False,"['swift502', 'DanielSturk', 'bhouston', 'mrdoob']","Thanks! @bhouston I must say this change significantly reduced the quality of FXAA.

The new version is much blurrier.
![cmp1](https://github.com/user-attachments/assets/594c3827-fd7e-4f23-baab-340c14742c8c)

And edge detection much worse. (increased contrast for visibility)
![cmp2](https://github.com/user-attachments/assets/e5eac3da-8232-4104-b39b-ac23cb0b1fb7)

I had to revert to the old version.

While edge detection can still be tweaked in this new version, I find the overall quality much inferior.

I know the original shader is huge and could be slimmed down, but surely we'd want to retain the original quality? Namely, I can't find these constant tables anywhere in the new version.

```glsl
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 4.0
    #define FXAA_QUALITY_P4 12.0
```

Maybe if we just brought these values back it would fix the blurring issue?
This would be an easy fix, I'll take a look at it.

**Edit:**

Nah didn't help. There's some other issues with the new version. @DanielSturk Pinging you as you're allegedly a co-author.

- If performance is important, I'd be in favor of reverting the old version.
- If readability is important, I'd be in favor of find a working clean implementation with compatible licensing. Believe I already found a good one.
- Fixing this version is another option, but I have no clue how it works. @swift502 
I'm afraid I don't have much to contribute to this discussion. I wrote this code back in 2019 and have little time nowadays to maintain / investigate this. There's of course others who are far more invested than I am in perfecting FXAA and I'll happily leave it to them to do so.
What I can provide is context on the changes I had made to the Nvidia shader. There were a few major issues that were relevant to us when we tried the Nvidia shader in production and thus the goal of my changes was specifically to fix the following:
- It did not support transparency
- It compared pixels based on Luminance, thus some edges were entirely missed by the shader
- It didn't handle edges well unless they were near 45 degrees. ~45deg edges are easy to handle because you only need to tap a few adjacent pixels and take the average of their color. I implemented a pixel-march that walked along a horizontal/vertical edge until it no longer detected the edge (due to it shifting 1 pixel perpendicularly), then used that distance to determine the % by which the pixels on each side of the edge should be mixed. @DanielSturk Thanks a lot for the response. I guess my other concern is if it's still fair to call your algorithm FXAA?

1. You mention Luminance was not doing a good job, but it is mentioned frequently in the FXAA white paper, does your new algorithm completely replace that?

![image](https://github.com/user-attachments/assets/12886219-905d-45a2-a1e3-20ab65979d0c)

2. Every other implementation I've seen seems to be using these lookup tables, but you also seemed to have abandoned that?

```glsl
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 4.0
    #define FXAA_QUALITY_P4 12.0
```

If your algorithm has significant changes from ""traditional"" FXAA implementations, wouldn't it be more fitting to offer it as another AA method, alongside FXAA and it's flaws? @swift502
1. I replaced the luminance comparison with the simple `contrast()` function I wrote
2. I replaced that quality parameter with `NUM_SAMPLES`, an `int` representing the # of steps to take

I have no opinion on the naming. To clarify, this wasn't an in-depth research project but rather a 2-3 day effort to fix the limitations with the shader that were blocking our company at the time. Afterwards, BenHouston contributed these changes back to mainline in this PR IF there is indeed a regression in quality which this approach, I suggest we either undo it, or rename this version and add a new one.

It is a major issue that FXAA doesn't handle transparent backgrounds as currently implemented.  It would be amazing if we could keep the traditional FXAA quality with support for transparency. @bhouston
>  if we could keep the traditional FXAA quality with support for transparency

That's my goal, to match the appearance of the Nvidia reference implementation. I just double checked that transparent backgrounds work with my proposed shader, and it seems to. https://github.com/mrdoob/three.js/pull/29524#issuecomment-2386681979

If y'all have some use cases to test out, I'd be happy to make sure it's gonna be a worthy upgrade.",,"**Description**

This replaces the FXAA code to just the code that is required, rather than hundreds of lines cut and pasted from an NVIDIA example.  It also contains an improvement to enable FXAA to work properly with transparent backgrounds (which was noticed here in 2018: https://github.com/mrdoob/three.js/pull/12046#issuecomment-386365515) and a slight improvement to edge handling.  Credit for the improvements go to @DanielSturk.

In order to show that FXAA now works on a transparent background, I modified the main FXAA demo to use a transparent background.  Prior to this it was solid white.

This contribution is funded by [Threekit](https://threekit.com).

**Before** change when rendering on a transparent background (look at the right):
![three js WebGL - postprocessing - FXAA - Google Chrome 3_22_2022 4_14_31 PM](https://user-images.githubusercontent.com/588541/159568023-718f1c56-7ec3-45a4-bd04-8fdc5846f79f.png)

**After** change when rendering on a transparent background (look at the right):
![three js WebGL - postprocessing - FXAA - Google Chrome 3_22_2022 4_14_17 PM](https://user-images.githubusercontent.com/588541/159568013-73c0f939-47b7-43f9-9e90-77c8de8b975d.png)",
27735,2024-02-12T07:49:37Z,2024-02-12T21:24:20Z,hamzakubba,0,13,3,15,1,3,0,[],,0,20078505.0,0,0,0,0,7455814.521143,,0,3,1,False,[],,,"Related issue: #27733

**Description**

The current docs for InstancedMesh can be clearer about the bounding box being used for automatic camera frustum culling, and how the developer is responsible for updating it after any transformations that may move instances outside the bounding box. These changes hopefully add more clarity.
","> By default, this bounding box is used for the purposes of frustum culling.

I would leave this sentence out. Bounding volumes are used for different purposes and it's not the task of the API documentation to explain or mentioned them. >  You have to manually update the bounding box if you transform any instances outside of the current bounds.

The bounding volumes should be updated whenever instances are transformed. Depending on how you transform instances, the bounds can be smaller than before and the bounding volumes should reflect that. This behavior was a surprise to me and to at least 3 others who have asked for help with this exact issue (on r3f discord) in the last 2 months. Visibility is a core functionality of threejs and objects unexpectedly disappearing when using instanced meshes with default settings is not a great experience. Can you explain the harm in sharing this information to prevent bugs and unexpected behavior? Do you have a better place for this important information to go so that people who use instanced meshes find it? IMO, it's sufficient to highlight that bounding volumes should be recomputed whenever you transform instances. I would not like to see a list of use cases bounding volumes are intended for. The purpose of the docs is to document the API and not explain everything. There are books and guides for that.

That said, the manual might be a good place for more in-depth explanation of `InstancedMesh` (or instancing in general): https://threejs.org/manual/#en/fundamentals I don't really understand your perspective on this. You're saying that the API reference for this field should not explain what it is used for? Even though it is important information about this specific field?

I'm not looking for a listing of all possible use-cases for bounding volumes. I am talking about default visibility culling behavior of a graphics library, and there have already been issues with the lack of this information. When devs updating their geometry data without thinking about bounding volumes, they run into all sorts of issues. Failing view frustum culling is only one issue of many. Ray casting won't work as expected as well. Next collision detection tests. You have stumbled across one issue of series of issues but that does not mean view frustum culling is the most important thing of use case of bounding volumes.

We have the policy that guides in the manual are the best place for explaining such things. I think something that causes objects to disappear is worth mentioning in a graphics library API reference. I don't think we have to list everything, I'm just suggesting we list this one important thing that happens by default that affects the core functionality (rendering) in a significant way. I understand your concerns. Let me think about where to document this topic. We have similar issue in other areas, see #27713. > The bounding volumes should be updated whenever instances are transformed.

This is not clear. What are the ""bounding volumes""? And what do they have to do with the method being documented?

> Depending on how you transform instances, the bounds can be larger or smaller than before and the bounding volumes should reflect that.

That statement is not helpful, and it provides no useful information.

@Mugen87 is correct. It is best not to head down this slippery slope. The API docs are not intended to be a tutorial.

 It's understandable that devs who struggle with an issue for hours demand a more detailed documentation. 

Given that `BufferGeometry`, `InstanedMesh` and `SkinnedMesh` do not update their bounding volumes automatically, I think we should somewhere explain that it's the task of the app to recompute the bounding sphere and box when the underlying data (vertices, instance transformations or bones) change.

If we note add a note in the documentation pages for `BufferGeometry`, `InstanedMesh` and `SkinnedMesh`, where should we mention this detail? Maybe in the [Update resources](https://threejs.org/docs/index.html#manual/en/introduction/How-to-update-things) guide? 

AFAICS, there is already a note for the bounding volumes of `BufferGeometry`. >It's understandable that devs who struggle with an issue for hours demand a more detailed documentation.

Yes, that seems reasonable.

If you want to add a comment about the responsibility of ""your app"", I think it is appropriate to add it in the documentation of the `computeBoundingBox/Sphere()` method _iteslf_.

You can link to ""How to update things"", instead -- or in addition --  if you want.

 I would revert this PR. I think you can do better, and I hope the OP would find it equally-acceptable. Okay, I have reverted the PR. I'll give it a new go tomorrow 👍 .  > If you want to add a comment about the responsibility of ""your app"", I think it is appropriate to add it in the documentation of the `computeBoundingBox/Sphere()` method _iteslf_.
> 
> You can link to ""How to update things"", instead -- or in addition -- if you want.
> 
> I would revert this PR. I think you can do better, and I hope the OP would find it equally-acceptable.

I disagree with you, and I think this is the wrong direction. For me as a library user, there is no reason to go read the documentation for `computeBoundingBox` unless I already know that I need that method. I don't think most people read the API reference from top to bottom on every class they use. As a library user I come to find the things I need. If I need to transform an instance, I look at the setMatrixAt method, and hopefully at its documentation. So to me it makes the most sense to have this critical information about transforming instancing here. If my instanced mesh suddenly vanishes I _might_ look at the documentation of the methods and classes I have used, but it might not even be clear at that point what the problem is (e.g. could be camera, or a shader, or a lot of other things). So having this information readily available on the methods it impacts makes sense to me.

I disagree that the previous version ""is not helpful, and it provides no useful information"". I think it was helpful to someone who doesn't understand concepts like bounding boxes and frustum culling as well as the library maintainers. Ironically, I think your statement was not helpful nor did it provide any useful information; there was no attempt to understand the reason behind my suggested changes or any suggestions to improve my attempt."
29532,2024-09-29T22:04:11Z,2024-10-01T11:51:03Z,agargaro,8,0,2,25,3,1,1,[],182.0,0,136172.0,0,0,0,0,7474874.393212,,0,2,1,False,"['RenaudRohlinger', 'gkjohnson', 'github-actions[bot]', 'agargaro', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 688.13 <br> **170.5** | 688.08 <br> **170.59** | -50 B <br> **+89 B** |
| WebGPU | 806.87 <br> **217.32** | 806.84 <br> **217.32** | -25 B <br> **-2 B** |
| WebGPU Nodes | 806.37 <br> **217.19** | 806.35 <br> **217.18** | -25 B <br> **-1 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.8 <br> **111.78** | -50 B <br> **-6 B** |
| WebGPU | 535.67 <br> **144.58** | 535.64 <br> **144.58** | -25 B <br> **-1 B** |
| WebGPU Nodes | 491.75 <br> **134.31** | 491.73 <br> **134.31** | -25 B <br> **-1 B** | @CodyJasonBennett @Mugen87 
Is the fix okay? It looks good to me. This should also be checked by @gkjohnson 🙌 . The `WebGLBufferRenderer` implementation should be updated to match `WebGLIndexedBufferRenderer` (the current PR modifies the WebGPURenderer WebGL fallback version only):

https://github.com/mrdoob/three.js/blob/1841e388302219ae05aa23852211d052bca58b52/src/renderers/webgl/WebGLBufferRenderer.js#L72-L76

And I'm less familiar with the WebGPURenderer but it looks like the primitives aren't correctly counted in that case, either:

https://github.com/mrdoob/three.js/blob/1841e388302219ae05aa23852211d052bca58b52/src/renderers/webgpu/WebGPUBackend.js#L952-L959 > And I'm less familiar with the WebGPURenderer but it looks like the primitives aren't correctly counted in that case, either:

Looking at this a bit more it looks like WebGPURenderer has a fairly limited implementation of BatchedMesh (it's issuing new draw calls for each sub geometry and doesn't support non-indexed geometry) so this may just be an artifact of the still in-progress WebGPU implementation. It looks like InstancedMesh is also not supported, yet. Though I may be misunderstanding something. > The `WebGLBufferRenderer` implementation should be updated to match `WebGLIndexedBufferRenderer` (the current PR modifies the WebGPURenderer WebGL fallback version only):
> 
> https://github.com/mrdoob/three.js/blob/1841e388302219ae05aa23852211d052bca58b52/src/renderers/webgl/WebGLBufferRenderer.js#L72-L76

fixed, thanks

> 
> And I'm less familiar with the WebGPURenderer but it looks like the primitives aren't correctly counted in that case, either:
> 
> https://github.com/mrdoob/three.js/blob/1841e388302219ae05aa23852211d052bca58b52/src/renderers/webgpu/WebGPUBackend.js#L952-L959

is this relative to #29488? `info.update()` is not called at all > is this relative to https://github.com/mrdoob/three.js/issues/29488? info.update() is not called at all

Seems likely - but again support for BatchedMesh in the WebGPU backend seems incomplete at the moment. If you can test it then it seems worth adding either way. Support for BatchedMesh in the WebGPU backend will be finalized with the completion of the indirect draw API (WIP: [#29372](https://github.com/mrdoob/three.js/pull/29372)). We'll also need to determine how to handle the statistics for indirect draw calls in renderer.info. Once we identify an appropriate way to represent these stats, we can make decisions on how to calculate the infos of the BatchedMesh in WebGPU I guess.

Also related discussion: https://github.com/mrdoob/three.js/pull/29197#issuecomment-2324472275",,"Related issue: #29531 

**Description**

`info.update()` increases the draw calls by 1 for each call, and here it is called more than once. 
In addition, the number of triangles is not calculated correctly.

Edit: moved to draft to do more checking

",
29307,2024-09-03T17:29:45Z,2024-09-05T05:11:18Z,mwhirls,4,0,1,25,1,0,0,[],140784.0,0,2388255.0,0,0,0,0,7485658.046417,,0,1,1,False,"['mwhirls', 'pikilipita', 'Mugen87']","@mwhirls Since you linked #14903 I have tested the PR with the related Zombie asset ( `WhiteClownSambaDancing.fbx`). Unfortunately, it is still broken. So is #14903 a different issue or do I miss something? > @mwhirls Since you linked #14903 I have tested the PR with the related Zombie asset ( `WhiteClownSambaDancing.fbx`). Unfortunately, it is still broken. So is #14903 a different issue or do I miss something?

Ah, that must be a different issue then.  I linked it because I thought it could possibly be related, but my team was testing with different models.  I will remove the link here to avoid confusion. Does this also fix the blender exports issue?
[https://github.com/mrdoob/three.js/issues/27907](https://github.com/mrdoob/three.js/issues/27907) The specific runtime error of #27907 does not appear anymore since `r163` thanks to #27956. However, the animation is still incorrect. When you start it in the editor the cube simply disappears.",,"**Description**

This PR fixes a bug where the rotation for joints on some FBX models from Maya were not being read correctly by `FBXLoader`.  These models have both a non-default Euler order and have the ""Joint Orient"" option set on their joints.  The rotation matrix for ""Joint Orient"" is stored in ""PreRotation"" in the FBX file and `FBXLoader` was erroneously using the Euler order for the regular joint rotation to read it.

Example model: [WonkyWalk.fbx.zip](https://github.com/user-attachments/files/16852505/WonkyWalk.fbx.zip)

Before the fix:

https://github.com/user-attachments/assets/3f7848bc-5dff-4850-aac4-6eabff37318c


After the fix:

https://github.com/user-attachments/assets/f9869353-40f9-4bbe-972c-cec54e6b87bd



",
29534,2024-09-30T10:19:32Z,2024-10-01T08:04:43Z,Mugen87,0,5,2,343,7,2,0,[],,0,78312.0,0,0,0,0,7488614.552784,,0,2,1,False,[],,,"Related issue: #29295

**Description**

Adds the WebGPU version of `Wireframe` (wide lines).",This seems to be a copy/paste error since the implementation of `onBeforeRender()` is related to `ShaderMaterial`. `Infinity` is not a valid value for `instanceCount` in context of WebGPU. It seems reasonable to define `instanceCount` at this place in `setPositions()`. We should not ask the user to compute this value (see https://github.com/mrdoob/three.js/pull/29534#discussion_r1780820690). I think we need to update this approach too. Fixed! Although we still need to solve #28884.
29533,2024-09-30T03:42:03Z,2024-09-30T22:44:01Z,RenaudRohlinger,1,0,2,101,3,0,0,[],190.0,0,68518.0,0,0,0,0,7522258.244478,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.47 <br> **170.27** | 687.47 <br> **170.27** | +0 B <br> **+0 B** |
| WebGPU | 806.21 <br> **217.08** | 806.46 <br> **217.18** | +257 B <br> **+103 B** |
| WebGPU Nodes | 805.71 <br> **216.94** | 805.97 <br> **217.05** | +257 B <br> **+104 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.66 <br> **144.58** | 535.92 <br> **144.69** | +257 B <br> **+109 B** |
| WebGPU Nodes | 491.75 <br> **134.31** | 492 <br> **134.42** | +257 B <br> **+108 B** |",,"**Description**

Fixes the issue where initializing WebGPURenderer with depth: false was not functioning. This PR enables support for renderers without a depth-stencil buffer in both the WebGPU and WebGL backends.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29483,2024-09-24T16:29:39Z,2024-09-25T14:57:27Z,Mugen87,6,5,6,125,5,2,0,[],186.0,0,531657.0,0,0,0,0,7531464.08695,,0,6,1,False,"['github-actions[bot]', 'sunag', 'mrdoob', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 687.46 <br> **170.22** | +0 B <br> **+0 B** |
| WebGPU | 838.62 <br> **224.9** | 839.72 <br> **225.2** | +1.1 kB <br> **+295 B** |
| WebGPU Nodes | 838.13 <br> **224.78** | 839.23 <br> **225.08** | +1.1 kB <br> **+295 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 533.78 <br> **143.98** | 533.78 <br> **143.98** | +0 B <br> **+0 B** |
| WebGPU Nodes | 490.12 <br> **133.72** | 490.12 <br> **133.72** | +0 B <br> **+0 B** | Note: This isn't a full port yet since `ToonOutlinePassNode` does not yet honor all material specific configurations. E.g. only a single global opacity value for outlines is supported not opacity values per toon material. 

However, it's a good start and should support most use cases. Besides, the performance of the new approach is better compared to `OutlineEffect`/`WebGLRenderer`. Any plans of moving all these out of core to `addons/tsl/display/*`?
The WebGPU build is getting big... We probably need a list to distinct between addon and core modules since stuff like `PassNode` and `ToneMappingNode` must be part of the core.  Besides, it is not only the `nodes/display` directory that needs a review. Certain modules from `nodes/utils` or even `nodes/gpgpu` could also be placed in addons.

Should we make a separate issue for that maybe with a table that assigns modules to core or addons? Something like:

| Module   | Location 
|----------|:-------------:|
| src/node/display/AfterImageNode.js | Addon
| src/node/display/AnaglyphPassNode.js | Addon
| src/node/display/PassNode.js | Core

However, we should keep in mind that moving things to addons will make the import of modules more complicated again. Right now you can easily import modules from `three/tsl`. With more modules in `examples/jsm`, developers have to search for import paths again which is especially painful since most addons are not documented yet.

Is the file size of builds still that import these days now that most developers use bundlers/build tools? > Should we make a separate issue for that maybe with a table that assigns modules to core or addons? 

That sounds good to me 👍

> Is the file size of builds still that import these days now that most developers use bundlers/build tools?

I personally do not use bundlers.

For example, I just did a quick test to see if WebGPURenderer supports `transmission` + `DoubleSide`...

https://threejs-gltf-mosquito.glitch.me/index.html (WebGL)
https://threejs-gltf-mosquito.glitch.me/index-webgpu.html (WebGPU)

It doesn't.

Being able to do quick tests and prototypes like this from anywhere without having to setup workspaces and bundlers is still very valuable.

/cc @sunag  > Being able to do quick tests and prototypes like this from anywhere without having to setup workspaces and bundlers is still very valuable.

I did something like this where the program replaced the imports and code in real time and applied using `iframe.srcdoc`, but I don't know where I put the code.",,"Related issue: #29295

**Description**

This PR ports `OutlineEffect` as `ToonOutlinePassNode` to `WebGPURenderer`. 

`ToonOutlinePassNode` is a pass node which automatically adds outlines to supported toon materials (`MeshToonMaterial` and `MeshToonNodeMaterial`).","Instead of rendering, I've tried a `renderer.clear()` to delete the contents of `scenePassNode.renderTarget` for testing. But unfortunately this operation has no effect. I wonder if the render target is correctly bound or a different reference error causes issues. Could we use `renderer.setRenderObjectFunction()` to render the outline and then render the target object?

```js
renderer.setRenderObjectFunction( ( object, scene, camera, geometry, material, group, lightsNode ) => {

	// outline
	const outlineMaterial = ...
	renderer.renderObject( object, scene, camera, geometry, outlineMaterial, group, lightsNode );

	// target
	renderer.renderObject( object, scene, camera, geometry, material, group, lightsNode );

} );
``` If `ToonOutlineNode` would make use of `renderer.setRenderObjectFunction()` like above, it seems the target objects are rendered more than once because they are already rendered in the normal scene pass.

So `ToonOutlineNode` should just render the outlines. If `ToonOutlineNode` shares the same render target (and thus depth buffer), this should normally work as expected like with `WebGLRenderer`. I think in this case the `ToonOutlineNode` class should be extended from `PassNode` (so that it can be used as a normal scene pass). The problem with `traverse()` is that it ignores the frustrum and makes the code more complex. Deriving from `PassNode` and using `setRenderObjectFunction()` greatly simplifies the code! I love the new approach 😊 ."
29536,2024-09-30T19:55:25Z,2024-09-30T20:07:16Z,Mugen87,0,0,1,85,1,0,0,[],,0,711.0,0,0,0,0,7531664.304437,,0,1,1,False,[],,,"Related issue: #29462

**Description**

This PR makes sure `DecalGeometry` can process input geometries without normals. It implements the missing points mentioned in https://github.com/mrdoob/three.js/pull/29462#issuecomment-2366209553.
",
29514,2024-09-27T19:54:53Z,2024-09-30T13:28:40Z,canxerian,0,4,5,108,3,2,1,[],,0,236027.0,0,0,0,0,7555581.423521,,0,5,1,False,[],,,"Fixed #29478 

**Description**

Implement `NURBSCurve.toJSON` and `NURBSCurve.fromJSON` methods

Note: `test/unit/src/extras/curves/NURBSCurve.tests.js` added but can be removed (as the corresponding NURBSCurve.js resides in the examples folder).","Do you mind moving this unit test into the `test/unit/addons` folder? The `src` directory is intended for core modules only. Add an entry to `test/unit/three.addons.unit.js` instead. Done Good suggestion, have done so"
29527,2024-09-29T11:27:57Z,2024-09-30T09:19:43Z,gkjohnson,1,0,9,80,2,1,1,[],177.0,0,78708.0,0,0,0,0,7570517.033586,,1,9,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.47 <br> **170.27** | 688.13 <br> **170.5** | +655 B <br> **+230 B** |
| WebGPU | 806.14 <br> **217.06** | 806.79 <br> **217.29** | +655 B <br> **+236 B** |
| WebGPU Nodes | 805.64 <br> **216.92** | 806.3 <br> **217.16** | +655 B <br> **+235 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.59 <br> **144.55** | 535.59 <br> **144.55** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.75 <br> **134.31** | 491.75 <br> **134.31** | +0 B <br> **+0 B** |",,"Related issue: #29463, #28638

**Description**

~Based on #29523 (must merge first)~

Adds an ""optimize"" function to BatchedMesh that shifts geometry internally to overwrite the memory of unused / deleted geometry data. The method used here does not require any id mapping or indirection and just adds a new function.

cc @agargaro @Makio64 @Shakhriddin",
29523,2024-09-28T19:50:42Z,2024-09-29T19:10:39Z,gkjohnson,1,0,2,82,2,1,1,[],177.0,0,133494.0,0,0,0,0,7571966.26653,,1,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.15 <br> **170.18** | 687.47 <br> **170.27** | +319 B <br> **+84 B** |
| WebGPU | 805.82 <br> **216.97** | 806.14 <br> **217.06** | +319 B <br> **+92 B** |
| WebGPU Nodes | 805.33 <br> **216.83** | 805.64 <br> **216.92** | +319 B <br> **+91 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.59 <br> **144.55** | 535.59 <br> **144.55** | +0 B <br> **+0 B** |
| WebGPU Nodes | 491.75 <br> **134.31** | 491.75 <br> **134.31** | +0 B <br> **+0 B** |",,"Related issue: #29463

**Description**

Adds a ""deleteGeometry"" function to BatchedMesh that follows the same patterns as #29449 - so if a geometry is removed it's id is reused, simplifying the implementation of future ""optimize"" function since ids won't have to be remapped.

cc @JordanLane-Veerum ",
29517,2024-09-28T08:51:49Z,2024-09-30T02:42:29Z,RenaudRohlinger,1,0,1,13,1,1,1,[],184.0,0,150640.0,0,0,0,0,7594354.28624,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.15 <br> **170.18** | 687.15 <br> **170.18** | +0 B <br> **+0 B** |
| WebGPU | 805.82 <br> **216.97** | 805.89 <br> **216.99** | +69 B <br> **+24 B** |
| WebGPU Nodes | 805.33 <br> **216.83** | 805.39 <br> **216.85** | +69 B <br> **+24 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.59 <br> **144.55** | 535.66 <br> **144.58** | +69 B <br> **+26 B** |
| WebGPU Nodes | 491.75 <br> **134.31** | 491.75 <br> **134.31** | +0 B <br> **+0 B** |",,"**Description**

Adjusted sprite scaling for orthographic cameras when sizeAttenuation is false by adding:
```js
const orthoScale = float(2.0).div(cameraProjectionMatrix.element(1).element(1));
scale = scale.mul(orthoScale.mul(2));
```

We calculate orthoScale as 2.0 / cameraProjectionMatrix[1][1] to obtain the camera's vertical size, and then multiply by 2 to adjust for the normalized device coordinate (NDC) space ranging from -1 to 1. This ensures sprites scale correctly in orthographic projections, maintaining consistent sizes on the screen regardless of the camera's zoom level.


*This contribution is funded by [Segments.AI](https://segments.ai) & [Utsubo](https://utsubo.com)*",
29529,2024-09-29T18:41:25Z,2024-09-29T18:49:01Z,renovate[bot],0,0,1,6,1,0,0,[],,0,520.0,0,0,0,0,7622698.782561,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `294a9d9` -> `461ef6c` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC45Ny4wIiwidXBkYXRlZEluVmVyIjoiMzguOTcuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29530,2024-09-29T18:41:40Z,2024-09-29T18:49:14Z,renovate[bot],0,0,1,182,1,0,0,[],,0,503.0,0,0,0,0,7622701.226294,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [@rollup/plugin-node-resolve](https://redirect.github.com/rollup/plugins/tree/master/packages/node-resolve/#readme) ([source](https://redirect.github.com/rollup/plugins/tree/HEAD/packages/node-resolve)) | [`15.2.3` -> `15.3.0`](https://renovatebot.com/diffs/npm/@rollup%2fplugin-node-resolve/15.2.3/15.3.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/@rollup%2fplugin-node-resolve/15.3.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/@rollup%2fplugin-node-resolve/15.3.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/@rollup%2fplugin-node-resolve/15.2.3/15.3.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/@rollup%2fplugin-node-resolve/15.2.3/15.3.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.22.4` -> `4.22.5`](https://renovatebot.com/diffs/npm/rollup/4.22.4/4.22.5) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.22.5?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.22.5?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.22.4/4.22.5?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.22.4/4.22.5?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rollup/plugins (@&#8203;rollup/plugin-node-resolve)</summary>

### [`v15.3.0`](https://redirect.github.com/rollup/plugins/blob/HEAD/packages/node-resolve/CHANGELOG.md#v1530)

*2024-09-23*

##### Features

-   feat: allow preferBuiltins to be a function ([#&#8203;1694](https://redirect.github.com/rollup/plugins/issues/1694))

### [`v15.2.4`](https://redirect.github.com/rollup/plugins/blob/HEAD/packages/node-resolve/CHANGELOG.md#v1524)

*2024-09-22*

##### Updates

-   chore: remove is-builtin-module ([#&#8203;1735](https://redirect.github.com/rollup/plugins/issues/1735))

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.22.5`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4225)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.22.4...v4.22.5)

*2024-09-27*

##### Bug Fixes

-   Allow parsing of certain unicode characters again ([#&#8203;5674](https://redirect.github.com/rollup/rollup/issues/5674))

##### Pull Requests

-   [#&#8203;5674](https://redirect.github.com/rollup/rollup/pull/5674): Fix panic with unicode characters ([@&#8203;sapphi-red](https://redirect.github.com/sapphi-red), [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5675](https://redirect.github.com/rollup/rollup/pull/5675): chore(deps): update dependency rollup to v4.22.4 \[security] ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5680](https://redirect.github.com/rollup/rollup/pull/5680): chore(deps): update dependency [@&#8203;rollup/plugin-commonjs](https://redirect.github.com/rollup/plugin-commonjs) to v28 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot], [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5681](https://redirect.github.com/rollup/rollup/pull/5681): chore(deps): update dependency [@&#8203;rollup/plugin-replace](https://redirect.github.com/rollup/plugin-replace) to v6 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5682](https://redirect.github.com/rollup/rollup/pull/5682): chore(deps): update dependency [@&#8203;rollup/plugin-typescript](https://redirect.github.com/rollup/plugin-typescript) to v12 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5684](https://redirect.github.com/rollup/rollup/pull/5684): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC45Ny4wIiwidXBkYXRlZEluVmVyIjoiMzguOTcuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29525,2024-09-29T02:21:37Z,2024-09-29T18:40:37Z,linbingquan,2,0,3,15,2,0,0,[],23528.0,0,58740.0,0,0,0,0,7623268.222627,,0,3,1,False,"['linbingquan', 'Mugen87']","You have to regenerate to E2E screenshot for `webgl_postprocessing_fxaa` since the animation is different now. > You have to regenerate to E2E screenshot for `webgl_postprocessing_fxaa` since the animation is different now.

Done, and I removed useless code `clock`.",,"Related issue: #XXXX

**Description**

Use `OrbitControls` instand of `group.rotation.y`.

Users can operate and watch by `OrbitControls`.
",
29520,2024-09-28T14:04:46Z,2024-09-28T14:13:53Z,sunag,1,0,1,1,1,0,0,[],665.0,0,666.0,0,0,0,0,7725553.5982,,0,1,1,False,['sunag'],I cherry-pick the PR to gh-pages,,Related issue: https://github.com/mrdoob/three.js/pull/29492,
29503,2024-09-26T08:40:17Z,2024-09-28T00:51:05Z,RenaudRohlinger,12,0,5,180,5,0,0,[],189.0,0,187760.0,0,0,0,0,7730729.116767,,0,5,1,False,"['github-actions[bot]', 'sunag', 'RenaudRohlinger', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.15 <br> **170.18** | 687.15 <br> **170.18** | +0 B <br> **+0 B** |
| WebGPU | 805.7 <br> **216.91** | 805.73 <br> **216.91** | +26 B <br> **+10 B** |
| WebGPU Nodes | 805.21 <br> **216.77** | 805.24 <br> **216.78** | +26 B <br> **+11 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.49 <br> **144.49** | 535.52 <br> **144.5** | +26 B <br> **+9 B** |
| WebGPU Nodes | 491.67 <br> **134.26** | 491.67 <br> **134.26** | +0 B <br> **+0 B** | This is a thing of beauty. ❤️ 

I have hacked your example to test some scaling issues...

A Plane and a Sprite of _unit size_ render the same size by design. So should a single instanced Sprite.

Currently the instanced Sprite is too big by a factor of two. This is because the geometry is twice as big. I temporarily fix it by scaling the uniform, but you will have to scale the geometry instead.

![Sprites](https://github.com/user-attachments/assets/c50a5ff1-96a3-49a7-9a90-b1827c7801cc)
 Thanks! 😊 I’ve scaled the geometry accordingly, so it should be now fixed. Do you think `InstancedSprites` should have a `.center` property, like `Sprite` does.

Granted, you can add the property and it works.
```js
const sprites = new InstancedSprites( geometry, material );
sprites.center = new THREE.Vector2( 0.5, 0 );
``` We can already make instanced sprites, this would be an additional redundancy in the library, more code, documentation and maintenance, `object.count` should be intended to instantiate any object

```js
const material = new THREE.SpriteNodeMaterial( { sizeAttenuation: true, map: sprite, alphaMap: sprite, alphaTest: 0.1, transparent: true } );
material.positionNode = instancedBufferAttribute( new THREE.InstancedBufferAttribute( new Float32Array( positions ), 3 ) );

const particles = new THREE.Sprite( material );
particles.count = 10000;
scene.add( particles );
```

 Could we use the `object.count` approach instead of creating new objects and materials? This example would be very useful. Ahh, we all forgot about this obvious one. That's why you're the boss 😄.

Updated the PR consequently. The nodes allow so many combinations. It also took me a while to process this possibility, luckily the implementation has evolved this far 🙏. The original purpose of this PR was to add `InstanceSprite` -- just as we have `InstanceMesh`. Both are convenience classes.

But `InstanceSprite` was removed from this PR, and the PR was merged.

What is the plan for:

1. computing the correct bounding volumes necessary for frustum culling,

2. handling raycasting,

3. updating the position of one of the instances. My initial idea was just rendering multiples sprites but I understand these elements are importants.

I can still cherry pick my previous commit if we want to add a new Class in the future with all these functions included just like InstancedMesh. @RenaudRohlinger I do think your original PR was excellent.

 @WestLangley These possibilities also came to my mind, but I think we should upgrade these apporachs based on GPU-Compute and abandon approchs using CPU. We could handle some internal rules using `object.count > 1` as well, working with GPU on this should give us more performance and compatibility with procedural stuff, and the unification will reduce maintenance, documentation. ",,"Related comment: https://github.com/mrdoob/three.js/pull/29491#issuecomment-2375456672

**Description**

Third attempt to provide a fallback for THREE.Points with sizeAttenuation support. This PR demonstrates how to combine Sprite Meshes with `instanceBufferAttribute`. /cc @WestLangley

<img width=""1718"" alt=""image"" src=""https://github.com/user-attachments/assets/556b2cf0-379a-414c-9b01-08b56e9c81a2"">

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Segments.AI](https://segments.ai) & [Utsubo](https://utsubo.com)*",
29518,2024-09-28T09:46:07Z,2024-09-28T09:53:57Z,Mugen87,0,0,1,175,1,0,0,[],,0,470.0,0,0,0,0,7741270.105814,,0,1,1,False,[],,,"Related issue: #29295

**Description**

Adds a WebGPU version of `TextureHelper`. Tested with 2D and cube textures.
",
29516,2024-09-28T01:00:06Z,2024-09-28T01:35:07Z,sunag,1,0,5,22,3,0,0,[],188.0,0,2104.0,0,0,0,0,7771197.434978,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.15 <br> **170.18** | 687.15 <br> **170.18** | +0 B <br> **+0 B** |
| WebGPU | 805.73 <br> **216.91** | 805.82 <br> **216.97** | +87 B <br> **+50 B** |
| WebGPU Nodes | 805.24 <br> **216.78** | 805.33 <br> **216.83** | +87 B <br> **+51 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.85 <br> **111.79** | 462.85 <br> **111.79** | +0 B <br> **+0 B** |
| WebGPU | 535.52 <br> **144.5** | 535.59 <br> **144.55** | +77 B <br> **+49 B** |
| WebGPU Nodes | 491.67 <br> **134.26** | 491.75 <br> **134.31** | +77 B <br> **+44 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29495#issuecomment-2376228825

**Description**

Deprecated `.temp()`",
29495,2024-09-25T20:08:09Z,2024-09-25T20:48:56Z,sunag,3,0,3,128,20,0,0,[],204.0,0,190432.0,0,0,0,0,7773187.034232,,0,3,1,False,"['github-actions[bot]', 'sunag', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 687.46 <br> **170.22** | +0 B <br> **+0 B** |
| WebGPU | 839.72 <br> **225.2** | 840.46 <br> **225.41** | +745 B <br> **+212 B** |
| WebGPU Nodes | 839.23 <br> **225.08** | 839.97 <br> **225.29** | +745 B <br> **+210 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 533.78 <br> **143.98** | 534.61 <br> **144.23** | +835 B <br> **+251 B** |
| WebGPU Nodes | 490.12 <br> **133.72** | 490.96 <br> **133.98** | +835 B <br> **+255 B** | Do we still need `temp()`? > Do we still need temp()?

Certainly not!",,"Related issue: https://github.com/mrdoob/three.js/issues/29489

**Description**

Improves support for `code block` and fixes issues related to conditionals.",
29507,2024-09-26T11:02:11Z,2024-09-27T17:46:54Z,Mugen87,4,0,2,28,5,0,0,[],44091.0,0,110684.0,0,0,0,0,7799294.064462,,0,2,1,False,"['donmccurdy', 'Mugen87', 'mrdoob']","@Mugen87 I think so; opened https://github.com/mrdoob/three.js/pull/29509. Note that the renderer is an argument to TextureUtils.decompress, so we may need to refactor that a bit as well... maybe separate WebGLTextureUtils and WebGPUTextureUtils?  > maybe separate WebGLTextureUtils and WebGPUTextureUtils?

That sounds nicer 👍 Okay, I have renamed both modules in this PR. 

> Note that the renderer is an argument to TextureUtils.decompress, so we may need to refactor that a bit as well

We could transform the utils to real classes and then apply the renderer in the ctor:
```js
const utils = new WebGPUTextureUtils( renderer );
exporter.setTextureUtils( utils );
```
If we decide to do that, I would completely remove the internal renderer creation in the utils. Right now, if no renderer is provided to `decompress()`, the methods create renderers for each invocation which isn't ideal, tbh (even if they got properly disposed of). The above design would force the app to share the renderer which seems more appropriate to me. I'll go ahead and merge since refactoring `WebGLTextureUtils`/`WebGPUTextureUtils` like suggested in https://github.com/mrdoob/three.js/pull/29507#issuecomment-2378911590 would require to migrate `GLTFExporter`. So let's complete https://github.com/mrdoob/three.js/pull/29509 first so `GLTFExporter` can handle the `decompress()` call async.",,"Related issue: #29295, https://github.com/mrdoob/three.js/issues/29156#issuecomment-2327068048

**Description**

The PR makes sure `USDZExporter` can be used without a dependency to `WebGLRenderer` by supporting the WebGPU version of `TextureUtils`. For that, the utils must be configurable.

@donmccurdy Do you think we can apply the same approach to `GLTFExporter` as well? And is the approach in general acceptable?

The exporters must call `decompress()` in an async fashion which unfortunately requires quite some refactoring in `GLTFExporter`. 
",
29450,2024-09-20T05:03:07Z,2024-09-27T13:43:13Z,donmccurdy,4,7,12,498,12,3,1,[],187.0,0,636009.0,0,0,0,0,7813913.843154,,0,12,1,False,"['github-actions[bot]', 'donmccurdy', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 686.84 <br> **170.1** | -615 B <br> **-121 B** |
| WebGPU | 840.72 <br> **225.48** | 840.76 <br> **225.5** | +45 B <br> **+19 B** |
| WebGPU Nodes | 840.22 <br> **225.36** | 840.27 <br> **225.38** | +45 B <br> **+22 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 462.72 <br> **111.74** | -517 B <br> **-124 B** |
| WebGPU | 534.85 <br> **144.34** | 535.01 <br> **144.4** | +155 B <br> **+63 B** |
| WebGPU Nodes | 491.2 <br> **134.09** | 491.35 <br> **134.19** | +155 B <br> **+103 B** | With the exception of SRGB, wide gamut can we perform color space conversions just using matrix multiplication? 
The implementation looks amazing. Thanks @sunag! Yes, we can convert from any supported RGB color space ""A"" to ""B"" with the same structure:

```
<decode transfer function A>
<matrix multiplication>
<encode transfer function B>
```

If either A or B is a ”linear” space, its transfer function is a no-op, and that step can be skipped. So conversion between two linear spaces would just be a matrix multiplication. 

For now the only transfer functions we need to care about today are the “sRGB” transfer functions, (our LinearToSRGB and SRGBToLinear functions), shared by sRGB and Display P3 color spaces. Perhaps we'll need a few more transfer functions someday, but probably not soon.
 @WestLangley @Mugen87 with r169 out now, I'd love to merge this early in the month for r170 if possible – do you see any concerns? I don't feel strongly that Display P3 _needs_ to be moved to `three/addons`, I think that's the only ""breaking change"" here, but it was nice to use as a test case for future color spaces in `three/addons`.

/cc @gkjohnson FYI",,"Related issue: https://github.com/mrdoob/three.js/pull/29259#discussion_r1760212771

Adds support for loading color space definitions from `three/addons/...`, and for user-supplied color space definitions. As the web platform adds support for wide gamut and “HDR” color spaces, this change is intended to allow more experimentation and flexible color workflows. Transfer functions are predefined at this time, and cannot be added dynamically.

Example:

```javascript
import { ColorManagement } from 'three';
import { 
  DisplayP3ColorSpace,
  DisplayP3ColorSpaceImpl,
  LinearDisplayP3ColorSpace,
  LinearDisplayP3ColorSpaceImpl
} from 'three/addons/math/ColorSpaces.js';

// register Display P3
ColorManagement.define( {
  [ DisplayP3ColorSpace ]: DisplayP3ColorSpaceImpl,
  [ LinearDisplayP3ColorSpace ]: LinearDisplayP3ColorSpaceImpl
} );

// use Display P3
ColorManagement.workingColorSpace = LinearDisplayP3ColorSpace;
renderer.outputColorSpace = DisplayP3ColorSpace;
color.setRGB( r, g, b, DisplayP3ColorSpace );
...
```

Notable changes:

- SRGBColorSpace and LinearSRGBColorspace (working color space) are included by default
- DisplayP3ColorSpace and LinearDisplayP3ColorSpace are moved to `three/addons`
- LinearRec2020ColorSpace ~~and LinearRec2100DisplayColorSpace~~ are added to `three/addons`
- Restrictions on `ColorManagement.workingColorSpace` are removed; support for anything other than LinearSRGBColorSpace should be considered 'experimental'
- ColorManagement is refactored to allow use of external color space definitions
","## Unused variable, import, function or class

Unused imports P3Primaries, Rec709Primaries.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2461) TODO: Maybe we don't need constants for the primaries?

Color space implementations could supply chromaticities if needed. Can we remove any addons-related unit tests from `test/unit/src`?

You might want to add tests in the `test/unit/addons` directory instead. To do — I don't understand where the ""display"" term comes from, as found in the WebGPU HDR spec. It's mentioned in the [explainer](https://github.com/ccameron-chromium/webgpu-hdr) and so far I've found it nowhere else. I would've expected this to just be ""Linear Rec. 2100"" in contrast to Rec. 2100 combined with HLG or PQ transfer functions. - https://github.com/ccameron-chromium/webgpu-hdr/issues/5 Done! ✅  On closer read, the part referring to Rec. 2100 is just notes about possible future work, and doesn't seem to be what Chrome has shipped yet. I'll skip adding LinearRec2100DisplayColorSpace for now, in that case, since there are other questions about it and not much as reference."
29512,2024-09-27T09:48:24Z,2024-09-27T09:48:30Z,Mugen87,0,0,1,18,1,0,0,[],,0,7.0,0,0,0,0,7827998.95689,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29146#issuecomment-2378858450

**Description**

The PR fixes the broken `dispose()` method in `TransformControls`.
",
29179,2024-08-19T23:17:57Z,2024-09-16T18:38:22Z,jorodi,1,0,1,2,1,1,1,[],2386618.0,0,3245931.0,0,0,0,0,7903103.013092,,0,1,1,False,['jorodi'],"Is there anything else required for this PR? 

This is my first time contributing here.  ",,"**Description**

This fixes the `Could not find xr_standard_trigger_pressed_min in the model` warning seen in three.js examples that use hand inputs: e.g. [webxr_vr_handinput.html](https://github.com/mrdoob/three.js/blob/master/examples/webxr_vr_handinput.html).

It also prevents unnecessary processing by the device, since `XRControllerModelFactory` is meant for non-hand input sources: i.e. controller models. 

When hand tracking is enabled for a WebXR capable device and `new XRControllerModelFactory()` is used, its `connected` event listener does not currently prevent a hand input source from also calling `fetchProfile()`.  

This adds a check to prevent a hand input source from also calling `fetchProfile()`.

",
29506,2024-09-26T10:44:59Z,2024-09-26T10:56:00Z,fengT-T,0,0,1,50,1,0,0,[],,0,662.0,0,0,0,0,7910350.670439,,0,1,1,False,[],,,Synchronizing the content of English documents.,
29502,2024-09-26T07:50:24Z,2024-09-26T07:50:34Z,Mugen87,0,0,1,10,1,0,0,[],,0,10.0,0,0,0,0,7921477.773854,,0,1,1,False,[],,,"Related issue: #21271

**Description**

`GLTFLoader.setDDSLoader()` has been deprecated long time ago (`r126`) and according to our deprecation policy the code can safely be removed now.",
29499,2024-09-25T20:41:58Z,2024-09-25T20:49:14Z,sunag,0,0,1,2,2,0,0,[],,0,439.0,0,0,0,0,7961155.84517,,0,1,1,False,[],,,,
29493,2024-09-25T18:50:34Z,2024-09-25T19:54:42Z,eugenehp,0,0,1,1,1,0,0,[],,0,3859.0,0,0,0,0,7964420.569446,,0,1,1,False,[],,,"leftovers after removing `PackedPhongMaterial ` 

Related issue: [#29382](https://github.com/mrdoob/three.js/pull/29382)",
29498,2024-09-25T20:39:10Z,2024-09-25T20:46:36Z,sunag,1,0,2,23,3,0,0,[],192.0,0,449.0,0,0,0,0,7961315.00155,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.46 <br> **170.22** | 687.46 <br> **170.22** | +0 B <br> **+0 B** |
| WebGPU | 839.72 <br> **225.2** | 839.89 <br> **225.24** | +176 B <br> **+46 B** |
| WebGPU Nodes | 839.23 <br> **225.08** | 839.4 <br> **225.12** | +176 B <br> **+46 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 533.78 <br> **143.98** | 533.95 <br> **144.02** | +176 B <br> **+41 B** |
| WebGPU Nodes | 490.12 <br> **133.72** | 490.3 <br> **133.77** | +176 B <br> **+51 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29394

**Description**

- [x] [Fix null reference using getNodeType()](https://github.com/mrdoob/three.js/commit/62ec3114fb757489d528b05c4af551f25708d6c5)
- [x] [NodeMaterialObserver: Add `sprite.center` check](https://github.com/mrdoob/three.js/commit/6c32aa24b9c1f7de03d696e94d41e115f49109a3)",
29486,2024-09-24T17:47:02Z,2024-09-25T08:25:27Z,WestLangley,0,0,1,7,1,1,1,[],,0,76929.0,0,0,0,0,7981563.679438,,0,1,1,False,[],,,"As suggested in https://github.com/mrdoob/three.js/pull/29476#issuecomment-2371860789.
",
29469,2024-09-22T20:49:07Z,2024-09-25T03:11:44Z,cmhhelgeson,1,0,2,147,5,0,0,[],187.0,0,200193.0,0,0,0,0,8020175.488968,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.32 <br> **170.19** | +0 B <br> **+0 B** |
| WebGPU | 835.97 <br> **224.07** | 837.63 <br> **224.53** | +1.66 kB <br> **+454 B** |
| WebGPU Nodes | 835.48 <br> **223.95** | 837.14 <br> **224.41** | +1.66 kB <br> **+457 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 532.38 <br> **143.56** | 532.97 <br> **143.68** | +585 B <br> **+123 B** |
| WebGPU Nodes | 489.04 <br> **133.42** | 489.63 <br> **133.53** | +585 B <br> **+109 B** |",,"**Description**

Adds the ability to access compute built-ins that are already defined by default directly within TSL. There are a few changes I made that I think might deserve further consideration.

1. **Enabling subgroups by default if the feature is accessible**: I largely did this to obviate the need for further logic within ComputeBuiltin that enables subgroups and activates the built-in should it be requested, or creating a separate node specifically for subgroup_size. However, we might not want to enable subgroups by default in every shader.

2. **Creating ComputeBuiltinNode**: A lot of the logic is similar to AttributeNode, however, I figured it would be better to separate accessing these builtins from accessing vertex attributes, as they serve different purposes, even if they are both considered 'attributes' within the context of the NodeBuilder.
",
29479,2024-09-24T01:15:47Z,2024-09-25T02:15:02Z,sunag,1,2,8,147,9,1,0,[],194.0,0,89967.0,0,0,0,0,8028001.948996,,0,8,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.32 <br> **170.19** | +0 B <br> **+0 B** |
| WebGPU | 836.4 <br> **224.22** | 836.83 <br> **224.44** | +422 B <br> **+224 B** |
| WebGPU Nodes | 835.91 <br> **224.09** | 836.34 <br> **224.32** | +422 B <br> **+224 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 532.82 <br> **143.71** | 533.19 <br> **143.85** | +377 B <br> **+142 B** |
| WebGPU Nodes | 489.16 <br> **133.47** | 489.54 <br> **133.61** | +377 B <br> **+139 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29386, https://github.com/mrdoob/three.js/pull/29212#issuecomment-2307272523

**Description**

A numeric cache key brings a performance gain in the rendering cycle ( https://github.com/mrdoob/three.js/pull/29386 ) in addition to saving memory because it is just an integer instead of sometimes big strings.

As `RenderObjects` hashes inherited the individuality of `RenderContext`, the possibility of collision decreases, among other detail that can be improved in case of we encounter any collision issues.

I was thinking about using the `getHash` terminology but I had some conflicts with some existing functions.","## Unused variable, import, function or class

Unused import cyrb53.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2463) ## Superfluous trailing arguments

Superfluous arguments passed to [function hashArray](1).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2464)"
29409,2024-09-15T14:06:16Z,2024-09-24T19:42:49Z,agargaro,3,5,4,36,2,3,2,[],183.0,0,797957.0,0,0,0,0,8051383.76636,,0,4,1,False,"['github-actions[bot]', 'agargaro', 'Makio64']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.46 <br> **170.22** | +139 B <br> **+33 B** |
| WebGPU | 836.4 <br> **224.22** | 836.54 <br> **224.24** | +139 B <br> **+28 B** |
| WebGPU Nodes | 835.91 <br> **224.09** | 836.05 <br> **224.12** | +139 B <br> **+30 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 532.82 <br> **143.71** | 532.82 <br> **143.71** | +0 B <br> **+0 B** |
| WebGPU Nodes | 489.16 <br> **133.47** | 489.16 <br> **133.47** | +0 B <br> **+0 B** | @agargaro For my own curiosity what's the case were we need to access to this information ? > @agargaro For my own curiosity what's the case were we need to access to this information ?

Can be used to override raycast or create helpers, like in this three-mesh-bvh PR

https://github.com/gkjohnson/three-mesh-bvh/pull/703

",,"**Description**

By adding `getGeometryRangeAt` method, the user will not have to access the internal `_drawRanges` object.

To prevent the user from modifying the returned object, do you think it is okay to clone it?

**cc** @gkjohnson 
","We should describe in a bit more detail what ""geometry range"" means. I don't think it would be clear to a less-advanced user that the returned value is a subrange of triangles of the attached BufferGeometry. Is it planned to use this method per animation step?

If so, the policy is to provide a `target` object and not to clone/create objects. I'm happy with either. I don't expect this to be the kind of thing that will be called every frame but I suppose it could be. As mentioned our use case is for [generating BVH structures](https://github.com/mrdoob/three.js/pull/29409#issuecomment-2352753013) for the underlying geometry - which is an inherently expensive operation already (in terms of memory and time). In this case, a target object that holds the copied draw range data sounds more appropriate to me. I corrected it and updated the doc :)"
29485,2024-09-24T17:36:30Z,2024-09-24T18:34:25Z,sunag,0,0,1,6,2,0,0,[],,0,3479.0,0,0,0,0,8055648.298279,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29428

**Description**

Create a floor reflection mask to avoid show clipping plane in far distance.

![image](https://github.com/user-attachments/assets/f2dce315-3329-43c4-8f7c-86d612447556)

The mask in grey

![image](https://github.com/user-attachments/assets/8f3cb10e-df2b-4232-96ff-8c120503e39d)
",
29480,2024-09-24T02:16:54Z,2024-09-24T02:36:22Z,RenaudRohlinger,2,0,2,17,1,0,0,[],185.0,0,1168.0,0,0,0,0,8113136.640381,,0,2,1,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.32 <br> **170.19** | +0 B <br> **+0 B** |
| WebGPU | 836.34 <br> **224.18** | 836.4 <br> **224.22** | +62 B <br> **+34 B** |
| WebGPU Nodes | 835.85 <br> **224.06** | 835.91 <br> **224.09** | +62 B <br> **+35 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 532.75 <br> **143.69** | 532.82 <br> **143.71** | +62 B <br> **+22 B** |
| WebGPU Nodes | 489.1 <br> **133.44** | 489.16 <br> **133.47** | +62 B <br> **+30 B** | It seems like a good solution, doing a quick analysis I don't see problem in having a sub-layer to take care of the light classes.",,"Related issue: https://github.com/mrdoob/three.js/pull/29187

**Description**

As mentioned in [#29187](https://github.com/mrdoob/three.js/pull/29187), LightsNode are duplicated for each AnalyticLightNode per RenderList.

For example, adding an environment map to a scene that has a light casting a shadow will create a duplicated instance of that LightNode. I have created a reproduction here: https://jsfiddle.net/v6cbhu5f/5/
[<img width=""1717"" alt=""image"" src=""https://github.com/user-attachments/assets/80ab6c93-958d-45f6-8bb3-f2e9e4366303"">](https://jsfiddle.net/v6cbhu5f/5/)


Using a high-quality environment map that generates many LODs (and thus multiple RenderLists, since each LOD is a scene by itself) will amplify the issue:
![image](https://github.com/user-attachments/assets/6cd4b49c-8623-438f-9baa-202134e1f5c3)

This PR fixes the issue by using a global reference of lights nodes via WeakMap outside of LightsNode. I'm not 100% satisfied with this solution, but at least it resolves the problem. Do you have any suggestions on the matter, @sunag?

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29476,2024-09-23T19:31:21Z,2024-09-24T07:41:13Z,WestLangley,5,0,2,9,2,1,1,[],367.0,0,79125.0,0,0,0,0,8059512.684911,,0,2,1,False,"['Mugen87', 'WestLangley']","Related: Is there a reason decals are added to the scene in `webgl_decals.html`, instead of to the mesh to which they are applied?

Currently, if the mesh is rotated, the decals do not. In `webgl_decals`, `transformDirection()` is also used in `checkIntersection()` to transform normals. Does it make sense to update this code as well?

https://github.com/mrdoob/three.js/blob/19e79dcbcd115a6e0452cfa31543806fe9a1dc79/examples/webgl_decals.html#L191 > Is there a reason decals are added to the scene in webgl_decals.html, instead of to the mesh to which they are applied?

Not that I am aware of. It would seem more natural to add the decals to the logical parent object. @Mugen87 Doing `mesh.attach( decal )` instead of `scene.add( decal )` works well, although `.attach()` only supports a uniformly-scaled parent mesh (the case here). Do you think such a change to the example is worth it? Yes, using `attach()` looks like a nicer workflow.",,"`transformDirection()` should not be applied to normal vectors, unless under certain conditions. The normal map should be applied, instead.
",
29477,2024-09-23T21:28:54Z,2024-09-23T22:08:15Z,donmccurdy,0,0,1,9,3,1,1,[],,0,2364.0,0,0,0,0,8129221.179064,,0,1,1,False,[],,,"Related issue: https://discourse.threejs.org/t/r168-error-after-install-no-matching-export-in-three-module-js-for-import-nodematerial/71078
",
29472,2024-09-23T11:51:43Z,2024-09-23T20:08:34Z,donmccurdy,0,0,1,28,3,1,1,[],,0,29814.0,0,0,0,0,8136403.507023,,0,1,1,False,[],,,"Similar to:

- #29448

When loading and then exporting models, colors should be written correctly even if the working color space has been changed, assuming the working color space can represent those colors.",
29473,2024-09-23T17:24:09Z,2024-09-23T18:07:41Z,Mugen87,0,0,2,5,2,0,0,[],,0,2612.0,0,0,0,0,8143659.902168,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29278#discussion_r1770545518

**Description**

The PR ensures the correct renderer is used in `webgpu_materials_arrays`.
",
29394,2024-09-12T10:52:56Z,2024-09-23T18:31:06Z,RenaudRohlinger,4,8,22,35,1,4,0,[],189.0,0,980132.0,0,0,0,0,8140012.924001,,0,22,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.32 <br> **170.19** | +0 B <br> **+0 B** |
| WebGPU | 835.97 <br> **224.07** | 836.28 <br> **224.17** | +312 B <br> **+96 B** |
| WebGPU Nodes | 835.48 <br> **223.95** | 835.79 <br> **224.04** | +312 B <br> **+95 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 532.38 <br> **143.56** | 532.7 <br> **143.67** | +312 B <br> **+111 B** |
| WebGPU Nodes | 489.04 <br> **133.42** | 489.04 <br> **133.42** | +0 B <br> **+0 B** | Could someone test the example `webgpu_tsl_galaxy` with this PR on a windows? I have no clue what could be wrong there I'm out of ideas, tests runs fine on my macos. Can you please test with a single sprite and confirm disabling size attenuation works as you expect it to?

I tried to help, but the PR is not working for me in its current form. The issue seems to be fixed and was related to using `const scale` with `assign` instead of `let scale`.

`webgpu_sprites.html` example with `sprite.scale.set( .001 * imageWidth, .001 * imageHeight, 1.0 );` and `sizeAttenuation: false`:
<img width=""824"" alt=""Screenshot 2024-09-14 at 18 36 35"" src=""https://github.com/user-attachments/assets/0ce832d3-28f4-4bfd-a87d-c8ead68cb306"">
",,"Related issue: #29269 #29374

**Description**

Following #29374, I will spread the features and fixes among multiple PRs instead. This fixes #29269.


*This contribution is funded by [Segments.AI](https://segments.ai) & [Utsubo](https://utsubo.com)*","I think we should make this private -- or use an underscore.

@Mugen87 What coding pattern do you prefer?
 Can we use an existing method to identify a perspective camera?

@sunag may have a preference. uniform values ​​should not generate cache key. We can get the current camera in the `NodeBuilder`, `setupPosition( { ..., camera } )`, it would be better to do it in JS, no TSL conditional. Unfortunately center is not a uniform value.

In that case we probably want to deprecate that property and move it to the SpriteNodeMaterial as SpriteNodeMaterial.centerNode? It seems to be uniform in both renderers, but I think you may have a problem related to the uniform reference. Maybe if you replace `uniform()` with `reference( 'center', 'vec2' )` can it work in your tests?

https://github.com/mrdoob/three.js/blob/e2c5af3d7b14f5a92b1ece2bc972ebd853d79c6c/src/materials/nodes/SpriteNodeMaterial.js#L72 ```js
const sizeAttenuation = this.sizeAttenuation;
```
 Properties that are marked as private should use an underscore. They will migrated to private fields in the future."
29373,2024-09-09T09:57:07Z,2024-09-09T09:57:15Z,Mugen87,6,0,1,5,1,0,0,[],245040.0,0,1203958.0,0,0,0,0,8178737.367633,,0,1,1,False,"['Mugen87', 'wangjiangrong', 'mrdoob']","Does this deserve a `0.168.1`? Probably yes. There was only one developer that complained so far. But with a patch release we avoid potential troubles for others.

 I'm from #29367, when will the new version be released?
![image](https://github.com/user-attachments/assets/1b79e16d-2911-4868-b3ef-40d88abd987a)
 `r169` is released next week so you eventually get a fix soon (even without `0.168.1`). ![image](https://github.com/user-attachments/assets/4321af5e-24cc-4402-8c4f-26981ef6d194)
There seems to be no WebGPU module in my Addon file
 That is the correct result actually.",,"Fixed #29367.

**Description**

The addition of WebGPU modules into `Addons.js` leads to unwanted side effects with bundlers since the bare module specifier `three` is ambiguous.
",
29468,2024-09-22T18:20:00Z,2024-09-22T18:27:41Z,renovate[bot],0,0,1,186,1,0,0,[],,0,505.0,0,0,0,0,8228817.662931,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [eslint](https://eslint.org) ([source](https://redirect.github.com/eslint/eslint)) | [`8.57.0` -> `8.57.1`](https://renovatebot.com/diffs/npm/eslint/8.57.0/8.57.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/eslint/8.57.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/eslint/8.57.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/eslint/8.57.0/8.57.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/eslint/8.57.0/8.57.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [eslint-plugin-html](https://redirect.github.com/BenoitZugmeyer/eslint-plugin-html) | [`8.1.1` -> `8.1.2`](https://renovatebot.com/diffs/npm/eslint-plugin-html/8.1.1/8.1.2) | [![age](https://developer.mend.io/api/mc/badges/age/npm/eslint-plugin-html/8.1.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/eslint-plugin-html/8.1.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/eslint-plugin-html/8.1.1/8.1.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/eslint-plugin-html/8.1.1/8.1.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.21.3` -> `4.22.4`](https://renovatebot.com/diffs/npm/rollup/4.21.3/4.22.4) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.22.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.22.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.21.3/4.22.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.21.3/4.22.4?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>eslint/eslint (eslint)</summary>

### [`v8.57.1`](https://redirect.github.com/eslint/eslint/compare/v8.57.0...5b9414c501c58bfa85f41f96f821973c41e8ae74)

[Compare Source](https://redirect.github.com/eslint/eslint/compare/v8.57.0...v8.57.1)

</details>

<details>
<summary>BenoitZugmeyer/eslint-plugin-html (eslint-plugin-html)</summary>

### [`v8.1.2`](https://redirect.github.com/BenoitZugmeyer/eslint-plugin-html/compare/v8.1.1...v8.1.2)

[Compare Source](https://redirect.github.com/BenoitZugmeyer/eslint-plugin-html/compare/v8.1.1...v8.1.2)

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.22.4`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4224)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.22.3...v4.22.4)

*2024-09-21*

##### Bug Fixes

-   Fix a vulnerability in generated code that affects IIFE, UMD and CJS bundles when run in a browser context ([#&#8203;5671](https://redirect.github.com/rollup/rollup/issues/5671))

##### Pull Requests

-   [#&#8203;5670](https://redirect.github.com/rollup/rollup/pull/5670): refactor: Use object.prototype to check for reserved properties ([@&#8203;YuHyeonWook](https://redirect.github.com/YuHyeonWook))
-   [#&#8203;5671](https://redirect.github.com/rollup/rollup/pull/5671): Fix DOM Clobbering CVE ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

### [`v4.22.3`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4223)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.22.2...v4.22.3)

*2024-09-21*

##### Bug Fixes

-   Ensure that mutations in modules without side effects are observed while properly handling transitive dependencies ([#&#8203;5669](https://redirect.github.com/rollup/rollup/issues/5669))

##### Pull Requests

-   [#&#8203;5669](https://redirect.github.com/rollup/rollup/pull/5669): Ensure impure dependencies of pure modules are added ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

### [`v4.22.2`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4222)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.22.1...v4.22.2)

*2024-09-20*

##### Bug Fixes

-   Revert fix for side effect free modules until other issues are investigated ([#&#8203;5667](https://redirect.github.com/rollup/rollup/issues/5667))

##### Pull Requests

-   [#&#8203;5667](https://redirect.github.com/rollup/rollup/pull/5667): Partially revert [#&#8203;5658](https://redirect.github.com/rollup/rollup/issues/5658) and re-apply [#&#8203;5644](https://redirect.github.com/rollup/rollup/issues/5644) ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

### [`v4.22.1`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4221)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.22.0...v4.22.1)

*2024-09-20*

##### Bug Fixes

-   Revert [#&#8203;5644](https://redirect.github.com/rollup/rollup/issues/5644) ""stable chunk hashes"" while issues are being investigated

##### Pull Requests

-   [#&#8203;5663](https://redirect.github.com/rollup/rollup/pull/5663): chore(deps): update dependency inquirer to v11 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot], [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5664](https://redirect.github.com/rollup/rollup/pull/5664): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5665](https://redirect.github.com/rollup/rollup/pull/5665): fix: type in CI file ([@&#8203;YuHyeonWook](https://redirect.github.com/YuHyeonWook))
-   [#&#8203;5666](https://redirect.github.com/rollup/rollup/pull/5666): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])

### [`v4.22.0`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4220)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.21.3...v4.22.0)

*2024-09-19*

##### Features

-   Add additional known global values to avoid access side effects ([#&#8203;5651](https://redirect.github.com/rollup/rollup/issues/5651))

##### Bug Fixes

-   Ensure deterministic chunk hash generation despite async renderChunk hook ([#&#8203;5644](https://redirect.github.com/rollup/rollup/issues/5644))
-   Improve side effect detection when using ""smallest"" treeshaking preset when imports are optimized away ([#&#8203;5658](https://redirect.github.com/rollup/rollup/issues/5658))

##### Pull Requests

-   [#&#8203;5644](https://redirect.github.com/rollup/rollup/pull/5644): fix: apply final hashes deterministically with stable placeholders set ([@&#8203;mattkubej](https://redirect.github.com/mattkubej), [@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5646](https://redirect.github.com/rollup/rollup/pull/5646): chore(deps): update dependency [@&#8203;mermaid-js/mermaid-cli](https://redirect.github.com/mermaid-js/mermaid-cli) to v11 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5647](https://redirect.github.com/rollup/rollup/pull/5647): chore(deps): update dependency concurrently to v9 ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5648](https://redirect.github.com/rollup/rollup/pull/5648): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5651](https://redirect.github.com/rollup/rollup/pull/5651): feat: add `AggregateError`, `FinalizationRegistry`, `WeakRef` to knownGlobals ([@&#8203;re-taro](https://redirect.github.com/re-taro))
-   [#&#8203;5653](https://redirect.github.com/rollup/rollup/pull/5653): Fix example selection in REPL ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))
-   [#&#8203;5657](https://redirect.github.com/rollup/rollup/pull/5657): chore(deps): update dependency vite to v5.4.6 \[security] ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5658](https://redirect.github.com/rollup/rollup/pull/5658): Detect variable reassignments in modules without side effects ([@&#8203;lukastaegert](https://redirect.github.com/lukastaegert))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC44MC4wIiwidXBkYXRlZEluVmVyIjoiMzguODAuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29467,2024-09-22T17:08:38Z,2024-09-22T18:19:29Z,renovate[bot],0,0,1,6,1,0,0,[],,0,4343.0,0,0,0,0,8229261.765088,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `8214744` -> `294a9d9` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC44MC4wIiwidXBkYXRlZEluVmVyIjoiMzguODAuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29466,2024-09-22T17:08:34Z,2024-09-22T18:19:00Z,renovate[bot],0,0,1,14,3,0,0,[],,0,4288.0,0,0,0,0,8229322.190366,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/setup-node](https://redirect.github.com/actions/setup-node) | action | digest | `1e60f62` -> `0a44ba7` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC44MC4wIiwidXBkYXRlZEluVmVyIjoiMzguODAuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29465,2024-09-22T15:58:49Z,2024-09-22T17:07:38Z,sunag,1,0,3,68,3,0,0,[],186.0,0,4133.0,0,0,0,0,8233662.525682,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.32 <br> **170.19** | 687.32 <br> **170.19** | +0 B <br> **+0 B** |
| WebGPU | 835.36 <br> **224.03** | 835.97 <br> **224.07** | +614 B <br> **+46 B** |
| WebGPU Nodes | 834.87 <br> **223.9** | 835.48 <br> **223.95** | +614 B <br> **+49 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.24 <br> **111.86** | 463.24 <br> **111.86** | +0 B <br> **+0 B** |
| WebGPU | 531.77 <br> **143.36** | 532.38 <br> **143.56** | +614 B <br> **+198 B** |
| WebGPU Nodes | 488.43 <br> **133.22** | 489.04 <br> **133.42** | +614 B <br> **+202 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29427#issuecomment-2360999831

**Description**

This PR maintains the material/pipeline creation fix related to PR https://github.com/mrdoob/three.js/pull/29427 and also preserves previous performance by reusing a geometry signature.

- [x] [RenderObject: Added getGeometryCacheKey()](https://github.com/mrdoob/three.js/commit/5b778d0b28de43b667c5ec5dfc9c13f76bd96797)
- [x] [NodeMaterialObserver: Improve SkinnedMesh and morph supports](https://github.com/mrdoob/three.js/commit/84e632f0c340c581887988fc10eca536b8b476ff)",
29278,2024-08-31T06:38:47Z,2024-08-31T14:44:30Z,RenaudRohlinger,1,3,3,260,7,3,0,[],186.0,0,1922442.0,0,0,0,0,8249755.935484,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 818.7 kB <br> **221.3 kB** | 819.2 kB <br> **221.5 kB** | +520 B <br> **+168 B** |
| WebGPU Nodes | 818.3 kB <br> **221.2 kB** | 818.8 kB <br> **221.4 kB** | +939 B <br> **+273 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 564.8 kB <br> **153.4 kB** | 565.4 kB <br> **153.5 kB** | +520 B <br> **+183 B** |
| WebGPU Nodes | 524.2 kB <br> **143.8 kB** | 524.7 kB <br> **143.9 kB** | -40.14 kB <br> **+128 B** |",,"Fixed #29268

**Description**
- Draw Range on Wireframe Materials: Corrected the drawRange handling for meshes with material.wireframe enabled, ensuring proper rendering.
- Material Arrays and Geometry Groups: Fixed inconsistencies with material arrays and geometry groups in both WebGPU and WebGL backends. Now, both backends correctly align with expected WebGLRenderer behaviors.
- New Example added to showcases material arrays, geometry groups, and wireframe rendering for both WebGL and WebGPU backends. The behavior has been validated against WebGLRenderer, ensuring consistency across renderers.

<img width=""1722"" alt=""Screenshot 2024-08-31 at 15 36 38"" src=""https://github.com/user-attachments/assets/2a3d3ae8-2735-4f48-a584-ad3a55b085a0"">

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Segments.AI](https://segments.ai) & [Utsubo](https://utsubo.com)*
",Do you mind renaming the example to `webgpu_materials_arrays` and place it below `webgpu_materials` in the list? Done! Should this be using `WebGPURenderer`?
29461,2024-09-21T10:33:46Z,2024-09-21T11:32:18Z,CodyJasonBennett,1,0,1,38,2,1,1,[],183.0,0,13117.0,0,0,0,0,8330583.02411,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.11 <br> **170.15** | 687.3 <br> **170.18** | +190 B <br> **+34 B** |
| WebGPU | 835.34 <br> **224.02** | 835.34 <br> **224.02** | +0 B <br> **+0 B** |
| WebGPU Nodes | 834.85 <br> **223.89** | 834.85 <br> **223.89** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.05 <br> **111.83** | 463.24 <br> **111.86** | +191 B <br> **+36 B** |
| WebGPU | 531.77 <br> **143.36** | 531.77 <br> **143.36** | +0 B <br> **+0 B** |
| WebGPU Nodes | 488.43 <br> **133.22** | 488.43 <br> **133.22** | +0 B <br> **+0 B** |",,"Related issue: #29445

**Description**

Adds a `USE_REVERSEDEPTHBUF` define when `reverseDepthBuffer` is in use for shaders that perform NDC math and are sensitive to the output clip space range.",
29460,2024-09-21T10:13:42Z,2024-09-21T11:33:04Z,gkjohnson,1,0,2,15,1,1,1,[],174.0,0,4765.0,0,0,0,0,8340139.545566,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 687.11 <br> **170.15** | 687.13 <br> **170.16** | +19 B <br> **+11 B** |
| WebGPU | 835.34 <br> **224.02** | 835.36 <br> **224.03** | +19 B <br> **+11 B** |
| WebGPU Nodes | 834.85 <br> **223.89** | 834.87 <br> **223.9** | +19 B <br> **+11 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 463.05 <br> **111.83** | 463.05 <br> **111.83** | +0 B <br> **+0 B** |
| WebGPU | 531.77 <br> **143.36** | 531.77 <br> **143.36** | +0 B <br> **+0 B** |
| WebGPU Nodes | 488.43 <br> **133.22** | 488.43 <br> **133.22** | +0 B <br> **+0 B** |",,"Fixed #29454

**Description**

Don't add degenerate triangles when generating a cylinder.",
29459,2024-09-21T09:32:26Z,2024-09-21T09:32:34Z,Mugen87,0,0,1,10,1,0,0,[],,0,9.0,0,0,0,0,8347371.690655,,0,1,1,False,[],,,"Related issue: #29445

**Description**

 Improves the `WebGLRenderer` page regarding logarithmic and reverse depth buffer.",
29458,2024-09-21T08:52:22Z,2024-09-21T08:59:06Z,Mugen87,0,0,1,6,2,0,0,[],,0,404.0,0,0,0,0,8349381.82684,,0,1,1,False,[],,,"Related issue: #29451

**Description**

Slightly make the light/lensflare colors a bit brighter to emphasize the effect. ",
29385,2024-09-10T23:22:23Z,2024-09-17T14:28:04Z,cmhhelgeson,3,2,3,128,5,2,0,[],182.0,0,847945.0,0,0,0,0,8400040.768522,,0,3,1,False,"['github-actions[bot]', 'cmhhelgeson']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.94 <br> **169.78** | 685.94 <br> **169.78** | +0 B <br> **+0 B** |
| WebGPU | 833.38 <br> **223.44** | 834.9 <br> **223.91** | +1.52 kB <br> **+464 B** |
| WebGPU Nodes | 832.89 <br> **223.32** | 834.41 <br> **223.78** | +1.52 kB <br> **+463 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.29 <br> **111.52** | 462.29 <br> **111.52** | +0 B <br> **+0 B** |
| WebGPU | 530.84 <br> **143.04** | 531.72 <br> **143.33** | +885 B <br> **+290 B** |
| WebGPU Nodes | 487.5 <br> **132.9** | 488.38 <br> **133.2** | +885 B <br> **+298 B** | Converting to draft since atomic operations actually need to be able to be assigned to variables. The solution I arrived at was just adding a storeNode to each of the atomic functions similar to how storageTexture works, which isn't ideal but at least seems cleaner to me.",,"**Description**

Adds the ability to execute atomic functions from within compute shaders. A total swaps indicator has been added to the UI of Compute Bitonic Sort.

<img width=""565"" alt=""image"" src=""https://github.com/user-attachments/assets/bdab0574-1929-4f8c-8e94-d94a52411ce7"">
","Are you still editing? Or should we remove console.log() in order to merge. Hi, apologies that can be removed"
29449,2024-09-19T22:35:40Z,2024-09-21T04:03:25Z,Jordan-Lane,3,4,2,42,2,2,0,[],190.0,0,106066.0,0,0,0,0,8367122.926949,,0,2,1,False,"['github-actions[bot]', 'Jordan-Lane', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 686.03 <br> **169.81** | 686.37 <br> **169.89** | +345 B <br> **+78 B** |
| WebGPU | 835 <br> **223.93** | 835.34 <br> **224.02** | +345 B <br> **+82 B** |
| WebGPU Nodes | 834.5 <br> **223.81** | 834.85 <br> **223.89** | +345 B <br> **+82 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.34 <br> **111.55** | 462.34 <br> **111.55** | +0 B <br> **+0 B** |
| WebGPU | 531.77 <br> **143.36** | 531.77 <br> **143.36** | +0 B <br> **+0 B** |
| WebGPU Nodes | 488.43 <br> **133.22** | 488.43 <br> **133.22** | +0 B <br> **+0 B** | > cc @Mugen87 unless you have objections I'm happy with this approach for instance deletion and is a lot less complex than the other implementation. Supporting deletion / repacking of geometry is still an open question but we can address that in the future.

Sounds good! @gkjohnson Updated the PR with your suggestions

1. _fragInfo has now been renamed to _ availableInstanceIds
2. When adding a new instance we prioritize using any available Ids before expanding the drawInfo Thank you! #28638 also implemented deleteInstance but I quite like the approach of reusing instance Ids which will generally be more performant than having to re-pack the matrix & color buffers when trying to shrink and remap the list of instances.

The only potential point of confusion is that a user will have ""deleted"" an id only for it to be re-used again, which isn't necessarily severe. It just means that users will need to be diligent about tracking their ids.

cc @Mugen87 unless you have objections I'm happy with this approach for instance deletion and is a lot less complex than the other implementation. Supporting deletion / repacking of geometry is still an open question but we can address that in the future.","Thank you! #28638 also implemented deleteInstance but I quite like the approach of reusing instance Ids which will generally be more performant than having to re-pack the matrix & color buffers when trying to shrink and remap the list of instances.

The only potential point of confusion is that a user will have ""deleted"" an id only for it to be re-used again, which isn't necessarily severe. It just means that users will need to be diligent about tracking their ids.

cc @Mugen87 unless you have objections I'm happy with this approach for instance deletion and is a lot less complex than the other implementation. Supporting deletion / repacking of geometry is still an open question but we can address that in the future.","**Description**

The `BatchedMesh` currently has no way to remove an instance. 

**Solution** 

Adding the `deleteInstance()` method to the `BatchedMesh` class will allow users to remove instances easily from the `BatchedMesh`. 

The previous commented out code stated that we would need to implement an `optimize` function to be able to repack the data. Instead, I added a `_fragInfo` array to keep track of 'fragmented' or open blocks. The BatchedMesh will still fill the DataTexture the same way it did before, but once it is at capacity, then it will begin adding instances to open spots in the Texture. 

**Additional context**

The BatchedMesh has been a pleasure to work with, I just need the ability to remove existing instances. This is my first time opening a PR to three.js, so please let me know if I am missing anything. I am open to any additional changes or suggestions!
","What does the name ""_fragInfo"" refer to? It would be better to call this something like ""availableInstanceIds"" I think we should check if there are any available deleted Ids and reuse those ids first rather than waiting until the full capacity has been used. Sounds good, I like the name ""availableInstanceIds"". Will make that change I like this idea. It would be best to keep both the drawInfo and the available deleted ids as small as possible. I will make that change"
25147,2022-12-15T13:08:28Z,2022-12-15T13:32:00Z,linbingquan,5,0,1,4,1,0,0,[],488.0,0,55742955.0,0,0,0,0,8405866.70014,,0,1,1,False,"['georgealways', 'Gregory-Han', 'Mugen87']","/ping @georgealways 🎉 ! @georgealways Are there any potential migration tasks when upgrading from 16 to 17? It should just be a drop-in, but of course let me know if you run into any trouble. When I drag and drop from the div that wraps the GUI to the .title, the entire window always closes or opens.
 Is there a way to fix this?",,"Related issue: #XXXX

**Description**

As the title.
",
29456,2024-09-20T15:15:22Z,2024-09-20T15:15:31Z,Mugen87,0,0,1,80,8,0,0,[],,0,12.0,0,0,0,0,8413196.519182,,0,1,1,False,[],,,"Fixed #29455.

**Description**

Fixed broken links in the VR guide.
",
29259,2024-08-29T11:37:05Z,2024-08-29T11:50:41Z,sunag,2,19,1,22,6,3,1,[],156.0,0,1878163.0,0,0,0,0,8448943.248123,,0,1,1,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |
| WebGPURenderer | 818.6 kB (221.2 kB) | 818.6 kB (221.2 kB) | -27 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |
| WebGPURenderer | 564.8 kB (153.4 kB) | 564.8 kB (153.4 kB) | -20 B | Thank you too :)LGTM, thank you! 🫶 ","LGTM, thank you! 🫶 ","Related issue: https://github.com/mrdoob/three.js/pull/29248#issuecomment-2316792798

**Description**

Description updated [in this PR](https://github.com/mrdoob/three.js/pull/29248#issue-2492963298)","These methods should not be conflated with `outputColorSpace`. 

 @donmccurdy We need to be able to covert to log space in a shader, and then convert back.

```js
export const workingToColorSpace = ( node, colorSpace = null ) => nodeObject( new ColorSpaceNode( nodeObject( node ), colorSpace, workingColorSpace ) );

export const colorSpaceToWorking = ( node, colorSpace = null ) => nodeObject( new ColorSpaceNode( nodeObject( node ), workingColorSpace, colorSpace ) );
``` `toOutputColorSpace` could be renamed to `toColorSpace`, but that begs the question: ""from where?"" > These methods should not be conflated with `outputColorSpace`. 

`toOutputColorSpace()` will use `renderer.outputColorSpace` as default value, so I think there should be some representation. We have two base nomenclatures, which would be `Output Color Space` and `Working Color Space` in general terms. Another thing we could take advantage of from TSL is to inform(analyzing the input node) through a context which `color space` that node is inserted in the code flow, this would avoid redundant conversions. Similar to what we used in `node.toTexture()` recently. That is fine. But you removed methods we need, which you can't do, unless you replace it with something equivalent. You can restore what was there before, or replace them with the two methods I [posted](https://github.com/mrdoob/three.js/pull/29259#discussion_r1736832008) above. Doing that later requires knowledge of the working color space. I think if you use `toOutputColorSpace()` it is already understood that the source color space is `working color space`. The same would happen in reverse, if you use `toWorkingColorSpace()` the source must be the `output color space`. I think for more specific cases this should be handled with another code and functions.

We are working with the color space relative to the one defined in `renderer.outputColorSpace`. Shader code prior to this PR:

```js
let c = colorNode.linearSRGBToColorSpace( SRGBColorSpace ).mul( _matrix ).colorSpaceToLinearSRGB( SRGBColorSpace );
```

You have removed those methods. With this PR, the following is required:

```js
let c = colorNode.toOutputColorSpace( SRGBColorSpace ).mul( _matrix ).toWorkingColorSpace( SRGBColorSpace );
```

1. `toOutputColorSpace` is misnamed. It has nothing to do with `outputColorSpace`. Rename to `toColorSpace` or `workingToColorSpace`.

2. `toOutputColorSpace` hard-wires the source color space to linear-sRGB. The source should be the working color space.

3. `toWorkingColorSpace` hard-wires the destination color space to linear-sRGB. The destination should be the working color space.

4. Please restore `linearSRGBToColorSpace` and `colorSpaceToLinearSRGB` -- at least for now.

 `OutputColorSpace` and `WorkerColorSpace` are for applications based on renderer settings, like `renderer.outputColorSpace` and do not need mandatory parameters:

```js
const c = colorNode.toOutputColorSpace().mul( _matrix ).toWorkingColorSpace();
```

Did you imagine that when the user needed to use another `renderer.outputColorSpace` like `DisplayP3ColorSpace` instead `SRGBColorSpace` he would have to readjust the code with conditionals if he were using `linearSRGBToColorSpace`?

The current abstraction should solves this issue.

I don't see a problem in exporting the most direct functions related to color space conversions compatible with tree-shaking, in fact this is good, `linearSRGBTosRGB()` and other functions are fine, but this would not cancel out the benefit of the current one. I do not object to any additional convenience methods you want to add.

The color space I need to covert to (and from) is a _specific_ color space -- _not related_ to the current render's output color space.

That is why, when we spoke offline, I suggested `linearSRGBToColorSpace( targetColorSpace )` -- or preferably, `workingToColorSpace( targetColorSpace )`.

 I'm happy with either of these parallel naming choices:

- workingToColorSpace / colorSpaceToWorking
- toWorkingColorSpace( sourceColorSpace ) / fromWorkingColorSpace( targetColorSpace )
- etc

Additional helper functions (e.g. related to the output color space) are certainly OK with me too. @sunag Can you please add the convenience functions we need
```js
export const toColorSpace ( targetColorSpace, sourceColorSpace ) // a general function

export const workingToColorSpace ( targetColorSpace )

export const colorSpaceToWorking ( sourceColorSpace )

export const linearSRGBToColorSpace ( targetColorSpace ) // if you want some specific ones

export const colorSpaceToLinearSRGB ( sourceColorSpace ) // if you want some specific ones
```

also, you seem to have hardwired the working color space to`LinearSRGBColorSpace`. Why did you do that?

```js
export const toOutputColorSpace = ( node, colorSpace = null ) => nodeObject( new ColorSpaceNode( nodeObject( node ), colorSpace, LinearSRGBColorSpace ) );
export const toWorkingColorSpace = ( node, colorSpace = null ) => nodeObject( new ColorSpaceNode( nodeObject( node ), LinearSRGBColorSpace, colorSpace ) );
``` I'll look into adding `workingToColorSpace` and `colorSpaceToWorking`.

For `toColorSpace ( targetColorSpace, sourceColorSpace )` we should use direct functions like [these](https://github.com/mrdoob/three.js/blob/dev/src/nodes/display/ColorSpaceFunctions.js) `sRGBToLinearSRGB`, `linearSRGBTosRGB`, ...

Just for us to think about, we shouldn't get used to string as a parameter, because that requires us to create a library to support it and that breaks tree-shaking.

If we have 4 different types of color-space between working/output, we will have to have 16 conversion functions and this growth is exponential for each additional color-space that we add here.

The future of `renderer.outputColorSpace` type could be a Node instead of string, this is one of the valid reasons for the current abstraction output/working names.

That's not a concern right now, I just wanted to clarify those points. @sunag I share your concern about the growing number of color space pairs, and their effect on tree-shaking. But I don't think I agree about using direct 1-to-1 functions or nodes for the conversions. For one thing, we have to import those functions, and call them conditionally, and if we have 4x4=16 functions it's going to be hard to ensure they're tree-shakeable for internal renderer usage.

A solution I'd prefer would be to continue using the predefined color space strings from WebGPU and CSS Color Module 4, but to allow users to define their own, and to import color spaces from three/addons. For example:

```javascript
import { ColorManagement } from 'three';
import { Rec2100HLGColorSpace, Rec2100HLGImplementation } from 'three/addons/math/colorspaces/Rec2100HLG.js';

ColorManagement.addColorSpace( Rec2100HLGColorSpace, Rec2100HLGImplementation );
```

Each definition would be similar to what you see in [`ColorManagement.js`](https://github.com/mrdoob/three.js/blob/c85a4374c15aa6aeff6768fd3678eead19ebd68f/src/math/ColorManagement.js#L28-L61), but represented as data properties, not JavaScript, so it's easy to do conversions in JS, GLSL, or WGSL. There's a similar approach in nanocolor that I believe is well done: https://github.com/meshula/Nanocolor/blob/main/nanocolor.c#L150

Once registered, a color space could be used for any compatible purpose. Any color space conversions to/from a color space not registered with `THREE.ColorManagement` may be considered an error. We could probably drop Display P3 and Linear Display P3 from the core library.
 The conversion solution for direct functions is just the suggested function `toColorSpace()`, where it would be cleaner to do `sRGBToLinearSRGB( a )` instead of `a.toColorSpace( THREE.SRGBColorSpace, THREE.LinearSRGBColorSpace )` apart from the benefit of tree-shaking.

I don't think there was an appropriate solution in this sense for working/output so I created the PRs `workingToColorSpace` and `colorSpaceToWorking` following the suggestions.

I created a system based on this principle, it should already be functional. I think we can encourage users to add functions like a library to their projects instead of adding them all to the core, it would be a solution.

- StandardNodeLibrary
https://github.com/mrdoob/three.js/blob/f509e7bf0ae31a83cd30f6cd8cf269f3708dc6f2/src/renderers/webgpu/nodes/StandardNodeLibrary.js#L98-L99

This could be added externally with:
```js
const nodeLibrary = renderer.nodes.library;

nodeLibrary.addColorSpace( linearSRGBTosRGB, getColorSpaceMethod( LinearSRGBColorSpace, SRGBColorSpace ) ); 
nodeLibrary.addColorSpace( sRGBToLinearSRGB, getColorSpaceMethod( SRGBColorSpace, LinearSRGBColorSpace ) );
```
Looking at the code again, I would just make it simpler, e.g:

```js
const nodeLibrary = renderer.nodes.library;

nodeLibrary.addColorSpace( linearSRGBTosRGB, THREE.LinearSRGBColorSpace, THREE.SRGBColorSpace ); 
nodeLibrary.addColorSpace( sRGBToLinearSRGB, THREE.SRGBColorSpace, THREE.LinearSRGBColorSpace );
``` I don't think we can ask users to foresee all possible source/target color space pairs, though. And with only a function/node defining a color space, it won't be possible to:

1. Apply CPU-side calculations, like converting `new Color( 0x808080 )` from sRGB to a user-defined working color space
2. Determine whether a texture in a user-defined color space requires unpacking with gl.unpackColorSpace or not. For this we need to be able to query, for a particular texture's color space, what are the associated transfer functions?

I think the `workingToColorSpace` and `colorSpaceToWorking` functions will fit into either solution well. But I would like to refactor THREE.ColorManagement a little, so that the node system can infer how to convert between two previously unknown color spaces based on their definitions (primaries, white point, transfer functions), without needing to have a conversion function/node registered in advance. > I don't think we can ask users to foresee all possible source/target color space pairs, though. And with only a function/node defining a color space, it won't be possible to:

The idea of ​​the user adding other ColorSpaces would be related to the colorspaces currently in effect in the project or in your library, not in a global sense.
 
 It would be great to have your collaboration in this regard :) Continued in https://github.com/mrdoob/three.js/pull/29450."
29448,2024-09-19T22:31:40Z,2024-09-20T03:07:22Z,donmccurdy,0,3,2,123,13,1,0,[],,0,19138.0,0,0,0,0,8454293.74301,,0,2,1,False,[],,,"Several loaders were converting model input colors to explicitly Linear-sRGB, with methods like `convertSRGBToLinear`. For future compatibility with wide gamut and HDR workflows, it would be better to target the working color space (Linear-sRGB by default, but may be changed by the user) instead. With this PR, I change the remaining affected loaders to these patterns:

```javascript
// tells Color.js that the source color was sRGB, causing
// implicit conversion to working color space
color.setRGB( r, g, b, SRGBColorSpace );

// explicitly converts from the given source color space to
// the working color space
ColorManagement.toWorkingColorSpace( color, SRGBColorSpace );
```","## Semicolon insertion

Avoid automated semicolon insertion (92% of all statements in [the enclosing function](1) have an explicit semicolon).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2458) ## Semicolon insertion

Avoid automated semicolon insertion (92% of all statements in [the enclosing function](1) have an explicit semicolon).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2459) ## Semicolon insertion

Avoid automated semicolon insertion (92% of all statements in [the enclosing function](1) have an explicit semicolon).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2460)"
29443,2024-09-19T16:19:56Z,2024-09-19T16:59:41Z,beersandrew,0,0,1,3,1,0,0,[],,0,2414.0,0,0,0,0,8493322.377445,,0,1,1,False,[],,,"Related issue: #29440

**Description**

Added an implementation for the extract node for the MaterialXLoader

Thanks to @sunag (https://github.com/mrdoob/three.js/pull/29433#issuecomment-2361232090)

*This contribution is funded by [Needle](https://needle.tools)*
",
29433,2024-09-17T20:48:59Z,2024-09-19T16:53:03Z,beersandrew,3,2,2,2,1,2,0,[],146633.0,0,159061.0,0,0,0,0,8493333.269373,,0,2,1,False,"['beersandrew', 'sunag']","The implementation of https://github.com/mrdoob/three.js/issues/29440 should be simple, in case you want to implement this PR? 

```js
const extract_x = ( in1 ) => in1.x;
```

The index parameter seems redundant here based on the function name... > The implementation of #29440 should be simple, in case you want to implement this PR?
> 
> ```js
> const extract_x = ( in1 ) => in1.x;
> ```
> 
> The index parameter seems redundant here based on the function name...

I think it's needed, here the `name` is only an identifier with `extract` being the node name(https://github.com/beersandrew/MaterialX/blob/separateNodeExample/resources/Materials/Examples/StandardSurface/extract.mtlx#L8)

not sure if this works? but this is the route i'll try (should work for colorN & vectorN)
```js
const extract = ( in1, index ) => in1[index];
``` I think it's better to use element in this case, with `[ index ]` the input values ​​should be just integer js numbers not nodes.
```js
const extract = ( in1, index ) => in1.element( index );
```",,"- allow invert to be a number, vec 2|3|4, or color, subtracting the value from an optionally inputted amount field (which is defaulted to all parts 1 of the input type)

Related issue: #29432

**Description**

Implemented the invert node for the MaterialXLoader

*This contribution is funded by [Needle](https://needle.tools)*
","Could you use the approach below instead of checking node values? Type conversions are done automatically prioritizing large vectors, if the input of `in1` is `vec3` it will return a `vec3`, and so we'll assume that `amount` can be classified as a node abstraction not just for constants.

```js
const mx_invert = ( in1, amount = float( 1 ) ) => sub( amount, in1 );
``` Thanks, that's much better! Updated."
29441,2024-09-19T03:18:34Z,2024-09-19T14:51:19Z,donmccurdy,0,0,1,17,1,0,0,[],,0,41568.0,0,0,0,0,8501051.590773,,0,1,1,False,[],,,"Partial Basis Universal HDR UASTC (half float) support. On devices with ASTC support, no transcoding is required, and we can upload the texture data directly. Continued from #29418.

Next PR will be for devices without ASTC support, where we'll need to transcode to BC6H or decode to F16.",
29427,2024-09-16T22:09:22Z,2024-09-16T22:22:31Z,sunag,2,0,1,10,1,0,0,[],178.0,0,228161.0,0,0,0,0,8505811.177482,,0,1,1,False,"['github-actions[bot]', 'aardgoose']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 686.07 <br> **169.79** | 686.07 <br> **169.79** | +0 B <br> **+0 B** |
| WebGPU | 832.67 <br> **223.1** | 832.7 <br> **223.11** | +23 B <br> **+8 B** |
| WebGPU Nodes | 832.18 <br> **222.98** | 832.21 <br> **222.99** | +23 B <br> **+8 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 530.14 <br> **142.82** | 530.17 <br> **142.83** | +23 B <br> **+8 B** |
| WebGPU Nodes | 486.8 <br> **132.68** | 486.82 <br> **132.69** | +23 B <br> **+6 B** | @sunag On my laptop this takes the webgpu_performance example from < 2s to display to around 13s.  ",,"**Description**

This fixes some occasions where geometry is shared with different indexes.",
29442,2024-09-19T08:48:15Z,2024-09-19T09:17:59Z,Mugen87,0,0,1,44,1,0,0,[],,0,1784.0,0,0,0,0,8521056.418604,,0,1,1,False,[],,,"Fixed #26366.

**Description**

Similar to `OrbitControls`, `TrackballControls` now derives the internal state after a mouse down event in two steps. First, the mouse action is determined, then based on the action the state. Previously, it was assumed the value of the mouse action enum matches the `event.button` value which isn't right.",
27837,2024-02-28T12:47:10Z,2024-09-19T09:41:48Z,Therobo77,2,0,2,4,1,0,0,[],58659.0,0,17614510.0,0,0,0,0,8519596.200238,,0,2,1,False,"['Mugen87', 'mrdoob']","Do you mind sharing a screen recording of what this PR does? This is actually a nice improvement. There are collapse UI elements in the `Installation` guide based on the `summary` tag like:

<img width=""283"" alt=""image"" src=""https://github.com/user-attachments/assets/5a4860d4-50ac-4318-ba20-157e0e35ace0"">

Currently, there is the normal text cursor symbol when hovering. With this PR, you get a pointer icon which makes it more clear the UI element is clickable.
",,"… a details element. Enhances user experience for interaction with details disclosure.

Added a CSS, pointer cursor when hovering over the summary tag within a details element. Enhances user experience for interaction with details disclosure.

It is more apealing.

Related issue: #XXXX

**Description**

A clear and concise description of what the problem was and how this pull request solves it.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Example](https://example.com)*
",
29340,2024-09-06T09:13:00Z,2024-09-18T21:23:32Z,gkjohnson,1,6,7,71,5,3,1,[],318.0,0,1118986.0,0,0,0,0,8525570.260942,,1,7,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.94 <br> **169.78** | 686.03 <br> **169.81** | +93 B <br> **+30 B** |
| WebGPU | 834.9 <br> **223.91** | 835 <br> **223.93** | +93 B <br> **+25 B** |
| WebGPU Nodes | 834.41 <br> **223.78** | 834.5 <br> **223.81** | +93 B <br> **+25 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.29 <br> **111.52** | 462.34 <br> **111.55** | +48 B <br> **+35 B** |
| WebGPU | 531.72 <br> **143.33** | 531.77 <br> **143.36** | +48 B <br> **+26 B** |
| WebGPU Nodes | 488.38 <br> **133.2** | 488.43 <br> **133.22** | +48 B <br> **+20 B** |",,"Related issue: --

**Description**

Currently raycasting only returns a few pre-interpolated results but not all, which can be useful in cases where other attributes need to be interpolated abitrarily, such as when sampling the recently-added Cesium metadata plugins for [3D Tiles Renderer](https://github.com/NASA-AMMOS/3DTilesRendererJS). This PR outputs the barcoord of the hit point relative to the surface to mesh raycast intersections and adds a `getAttributeInterpolationFromBarycoord` function to Triangle to make interpolating attributes more convenient.

Currently this is the code that needs to be run to interpolate a uv3 attribute after raycast:

```js
const triangle = new Triangle();
const vec20 = new Vector2();
const vec21 = new Vector2();
const vec22 = new Vector2();
const barycoord = new Vector3();

// ...

const { object, face, point } = hit;

// get barycoord value
triangle.setFromAttributeAndIndices( object.geometry.attributes.position, face.a, face.b, face.c );
triangle.a.applyMatrix4( object.matrixWorld );
triangle.b.applyMatrix4( object.matrixWorld );
triangle.c.applyMatrix4( object.matrixWorld );
triangle.getBarycoord( point, barycoord );

// get attribute values per vertex
const uv3 = object.geometry.attributes.uv3;
vec20.fromBufferAttribute( uv3, face.a );
vec21.fromBufferAttribute( uv3, face.b );
vec22.fromBufferAttribute( uv3, face.c );

// calculate the interpolated value
const result = new Vector2();
result
  .addScaledVector( vec20, barycoord.x )
  .addScaledVector( vec21, barycoord.y )
  .addScaledVector( vec22, barycoord.z );
```

And this is what it is after:

```js
const { object, face, barycoord } = hit;
const uv3 = object.geometry.attributes.uv3;
const result = new Vector2();
Triangle.getAttributeInterpolationFromBarycoord( uv3, face.a, face.b, face.c, barycoord, result );
```

_This contribution is funded by [Cesium GIS Ecosystem Grant](https://cesium.com/cesium-ecosystem-grants/)_","It seems there are a few linter warnings since variables like `_uvA` are not used anymore. Thanks! I've removed those variables. I figured these would trigger some CI errors. The change is okay for me 👍 .

Would you still add a documentation for `getAttributeInterpolationFromBarycoord()`? Done! How about simply `getInterpolatedAttribute()`.

It is more than just `barycoord` that you are passing in. Just renamed it! I think the simpler name is better, as well."
29438,2024-09-18T09:15:59Z,2024-09-18T10:00:56Z,Mugen87,1,0,1,7,2,0,0,[],3087.0,0,16897.0,0,0,0,0,8590681.463719,,0,1,1,False,['Mugen87'],"@mrdoob `TiltLoader` has a dependency to `RawShaderMaterial` since one stroke type (`Light`) is implemented as a custom material. The color space handling of this particular material does not look right to me though. It converts a sRGB color to linear in the fragment shader:

https://github.com/mrdoob/three.js/blob/01359e00034058c3c1ab037daae97c670f8228ac/examples/jsm/loaders/TiltLoader.js#L472-L480

The working color space should be linear and the output color space (usually) sRGB. The color space of the vertex colors is definitely `linear-srgb` right now so the current color space conversion does not make sense to me.

Would it be an option to simplify the loader a bit and always represent the strokes with `MeshBasicMaterial`? In this way, we don't need a separate WebGPU version of the loader.",,"Related issue: -

**Description**

`TiltLoader` internally loads a texture for stroke rendering which isn't ready at the first frame. `webgl_loader_tilt` now uses an animation loop so the strokes using the texture actually appear in the example without waiting for a user interaction.
",
29402,2024-09-13T10:59:16Z,2024-09-13T12:44:44Z,aardgoose,3,0,1,7,1,0,0,[],183.0,0,424271.0,0,0,0,0,8609111.017963,,0,1,1,False,"['github-actions[bot]', 'aardgoose', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 832.14 <br> **222.98** | 832.13 <br> **222.98** | -5 B <br> **+1 B** |
| WebGPU Nodes | 831.65 <br> **222.86** | 831.64 <br> **222.86** | -5 B <br> **+2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 529.9 <br> **142.75** | 529.89 <br> **142.75** | -5 B <br> **+4 B** |
| WebGPU Nodes | 486.56 <br> **132.61** | 486.55 <br> **132.62** | -5 B <br> **+4 B** | > presumably from the lack of shared UBOs.

I also suspect it's the same thing. Confirmed, got a prototype working now.",,"Related issue: #29386

Minor breakage from change in needsUpdate logic.

Note: the performance examples are now broken with the fallback renderer, presumably from the lack of shared UBOs.  I'll take a look at that. (only one object in the renderBundle rotates, and only some of the game model objects rotate)


",
29335,2024-09-05T19:55:04Z,2024-09-09T14:30:39Z,aardgoose,1,8,5,167,6,3,0,[],319957.0,0,1083270.0,0,0,0,0,8609164.351909,,0,5,1,False,['Mugen87'],"Do you mind adding an exception for the `webgpu_lightprobe_cubecamera` screenshot here?

https://github.com/mrdoob/three.js/blob/dev/test/e2e/puppeteer.js#L43

I'll revisit this after the merge.",,"Related issue: #29295

The cubeRenderTarget method has been made async which requires the original example to be modified to account for this.

The cube faces from WebGPU have the 'X' faces swapped, and all mirrored vertically.

As an aside: the WebGPU copyTexturetoBuffer() command can return all 6 faces of a cube texture in a single call in a single buffer.
","How about we make this call async as well? I'd forgotten there was an async version for WebGLRenderer. However, I have just tested it, and it seems rather slow, something that isn't replicated using the WebGL fallback oddly.

And while it is not async is there any reason for repeatedly creating the data buffer for each face? Nit. Perhaps the algorithm can be modified so `flip` can be 1 for WebGPU backend. That way we won't have to be flipping for eternity when WebGL is no longer supported. In other words, let WebGL be the odd case. Also found out that the slowness with WebGLRenderer can be fixed by moving the gl.flush() to after the gl.fenceSync(). will do tomorrow Since both readbacks are now async, `useAsync` can be removed and replaced with `renderer.isWebGPURenderer`. > And while it is not async is there any reason for repeatedly creating the data buffer for each face?

No, I guess this is just an oversight. Moving this bit out of the for loop is the better approach. I think what @WestLangley suggested is to use `1` as the default value for `flip` and then check for WebGL and set the value to `-1`. 
```js
let flip = 1;

if ( renderer.isWebGLRenderer || ( renderer.isWebGPURenderer && renderer.coordinateSystem === WebGGLCoordinateSystem ) ) {

	flip = - 1;

}
```"
29400,2024-09-12T20:03:35Z,2024-09-17T14:07:14Z,aardgoose,1,4,4,18,3,3,1,[],179.0,0,477956.0,0,0,0,0,8609168.620023,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 832.14 <br> **222.98** | 832.24 <br> **223.02** | +97 B <br> **+39 B** |
| WebGPU Nodes | 831.65 <br> **222.86** | 831.75 <br> **222.9** | +97 B <br> **+37 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 529.9 <br> **142.75** | 530 <br> **142.79** | +97 B <br> **+36 B** |
| WebGPU Nodes | 486.56 <br> **132.61** | 486.65 <br> **132.64** | +97 B <br> **+31 B** |",,"GLSL texelFetch requires integer texel coordinates corrected for coordinate direction using the texture dimensions.

setNode() incorrectly casts the result of  uv.setY( ... ) to 'float', attempt to fix that. 
","I think we can use `uvNode = uvNode.flipY()` now? done If you compute the `y` component based on the texture size, isn't that also necessary for `x`? It assumes you are using texel coords to start with, so x is fine as it is. "
29384,2024-09-10T17:45:29Z,2024-09-17T13:58:54Z,aardgoose,5,0,2,64,4,1,1,[],188.0,0,659038.0,0,0,0,0,8609173.001085,,0,2,1,False,"['github-actions[bot]', 'aardgoose', 'Mugen87', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 832.14 <br> **222.98** | 832.68 <br> **223.13** | +539 B <br> **+146 B** |
| WebGPU Nodes | 831.65 <br> **222.86** | 832.19 <br> **223** | +539 B <br> **+144 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 529.9 <br> **142.75** | 530.44 <br> **142.9** | +539 B <br> **+153 B** |
| WebGPU Nodes | 486.56 <br> **132.61** | 487.1 <br> **132.77** | +539 B <br> **+154 B** | 1. WebGPU top-left.
2. console warnings is good

I think it should be a rectangle instead of just position.
 By rectangle do you expect (x,y width, height) or (x1 y1, x2, y2)? I vote for `(x,y width, height)`. > I vote for `(x,y width, height)`.

That is what I guessed, that is what is in place at the moment.",,"WebGPURenderer.copyFramebufferToTexture() lacks the position parameter.
(used in LensFlare and the webgl_framebuffer_texture example.

Questions:

1. Which coordinate system should be used (0,0) as top left (WebGPU) or bottom left (WebGL)?

2. Should attempts to copy from areas outside the framebuffer cause errors? WebGPU fails with console warnings, WebGL ignores and returns 0 for those areas. 
",
29420,2024-09-16T09:38:53Z,2024-09-16T14:58:17Z,aardgoose,2,0,2,79,7,0,0,[],183.0,0,169825.0,0,0,0,0,8609182.236021,,0,2,1,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 686.07 <br> **169.79** | 686.07 <br> **169.79** | +0 B <br> **+0 B** |
| WebGPU | 832.49 <br> **223.05** | 832.51 <br> **223.04** | +16 B <br> **-4 B** |
| WebGPU Nodes | 832 <br> **222.92** | 832.02 <br> **222.92** | +16 B <br> **-4 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 529.96 <br> **142.77** | 529.98 <br> **142.77** | +16 B <br> **-4 B** |
| WebGPU Nodes | 486.62 <br> **132.63** | 486.64 <br> **132.63** | +16 B <br> **-2 B** | Great revision, thanks! This should also have a positive impact on performance.

/cc @RenaudRohlinger https://github.com/mrdoob/three.js/pull/29386#issuecomment-2348183810",,"Related issue: #29386 

WebGL examples broken by lack of shared buffers now work.",
29421,2024-09-16T09:56:37Z,2024-09-16T19:17:37Z,aardgoose,1,6,4,23,1,3,0,[],179.0,0,168758.0,0,0,0,0,8609186.592587,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 686.07 <br> **169.79** | 686.07 <br> **169.79** | +0 B <br> **+0 B** |
| WebGPU | 832.51 <br> **223.04** | 832.67 <br> **223.1** | +164 B <br> **+57 B** |
| WebGPU Nodes | 832.02 <br> **222.92** | 832.18 <br> **222.98** | +164 B <br> **+58 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 529.98 <br> **142.77** | 530.14 <br> **142.82** | +164 B <br> **+58 B** |
| WebGPU Nodes | 486.64 <br> **132.63** | 486.8 <br> **132.68** | +164 B <br> **+54 B** |",,"Related issue: #29386

A race exists where a `NodeMaterialObserver` captures a texture's state and the texture image is loaded/changed.
This was exposed in the webgpu_postprocessing_pixel example using WebGL.

Add an equals() method to Texture() and use this, with compensation for version changes from Texture.needsUpdate(). 
","Can we avoid having an `equals()` method in `Texture`?

I would expect an implementation that compares all properties, not just version and uuid. Ok Could we add a object `{ uuid, version }` instead of cloning the texture? Will do, a bit lighter weight now we are special casing textures anyway.
 actually can use id rather than uuid now we are no longer cloning. fine with me 👍 "
29430,2024-09-17T08:42:17Z,2024-09-17T14:09:40Z,aardgoose,1,0,1,23,3,0,0,[],183.0,0,86792.0,0,0,0,0,8609212.991335,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.94 <br> **169.78** | 685.94 <br> **169.78** | +0 B <br> **+0 B** |
| WebGPU | 832.7 <br> **223.11** | 832.75 <br> **223.12** | +50 B <br> **+13 B** |
| WebGPU Nodes | 832.21 <br> **222.99** | 832.25 <br> **223** | +50 B <br> **+13 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.29 <br> **111.52** | 462.29 <br> **111.52** | +0 B <br> **+0 B** |
| WebGPU | 530.17 <br> **142.83** | 530.2 <br> **142.85** | +35 B <br> **+19 B** |
| WebGPU Nodes | 486.82 <br> **132.69** | 486.86 <br> **132.71** | +35 B <br> **+21 B** |",,"
Added `updateReference()` method to `userDataNode` to enable use off array uniforms.
Add `label()` method to references() to aid debugging shaders.

Also remove redundant method from `UniformArrayNode`.",
23908,2022-04-16T20:46:55Z,2022-04-20T08:02:04Z,mrpink17,1,0,2,3,1,1,1,[],299715.0,0,76459424.0,0,0,0,0,8657103.129589,,0,2,1,False,['mrdoob'],Thanks!,,"**Description**

This pull request removes an unnecessary line in `CubeCamera` where `WebGLRenderer.outputEncoding` is set.
See [discussion on forum](https://discourse.threejs.org/t/is-this-line-really-setting-cubecamera-render-target-encoding/37118)

",
29209,2024-08-22T15:19:49Z,2024-09-17T16:29:12Z,WestLangley,5,0,2,4,2,0,0,[],107.0,0,2250767.0,0,0,0,0,8667787.488233,,0,2,1,False,"['Mugen87', 'WestLangley']","@Mugen87 I am unable to successfully create a screenshot for some reason. Can you please give it a try? I wasn't able to push to your branch but here is the updated screenshot. I hope GitHub does not further compress the image.

![webgl_postprocessing_advanced](https://github.com/user-attachments/assets/81a124af-2c08-409d-b8bd-00122b628768)
 Thanks, @Mugen87, but e2e is failing... Trying to figure out what is going on. :/  @Mugen87 You screenshot may be compressed. It is not passing e2e. And my screenshots are black.

>I wasn't able to push to your branch

Not sure why that is, either. It says ""Maintainers are allowed to edit this pull request."" Now it works! I guess I was on the wrong branch, not `dev-clean_up`.",,"The arguments were swapped.

`darkness` is in [0, 1].",
29431,2024-09-17T16:09:20Z,2024-09-17T16:16:33Z,WestLangley,0,0,1,4,1,0,0,[],,0,671.0,0,0,0,0,8668512.83084,,0,1,1,False,[],,,"Make the description more precise.
",
29397,2024-09-12T14:17:57Z,2024-09-17T08:00:01Z,WestLangley,1,0,1,6,1,1,1,[],196.0,0,430886.0,0,0,0,0,8676981.144131,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.69 <br> **169.74** | -133 B <br> **-12 B** |
| WebGPU | 828.45 <br> **222.25** | 828.45 <br> **222.25** | +0 B <br> **+0 B** |
| WebGPU Nodes | 828.03 <br> **222.16** | 828.03 <br> **222.16** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.29 <br> **111.52** | -133 B <br> **-14 B** |
| WebGPU | 526.43 <br> **141.9** | 526.43 <br> **141.9** | +0 B <br> **+0 B** |
| WebGPU Nodes | 483.08 <br> **131.72** | 483.08 <br> **131.72** | +0 B <br> **+0 B** |",,As the title says.,
29425,2024-09-16T18:43:15Z,2024-09-17T07:58:10Z,Mugen87,0,0,2,10,1,0,0,[],,0,47695.0,0,0,0,0,8698655.280004,,0,2,1,False,[],,,"Related issue: #29024

**Description**

As suggested in https://github.com/mrdoob/three.js/issues/29024#issuecomment-2353009864, the PR removes support for importing orthographic cameras since the implementation uses pixel units instead of scene units and is likely not FBX spec conform.
",
29419,2024-09-16T05:02:15Z,2024-09-17T07:52:32Z,JeremyJaydan,1,4,5,10,1,2,1,[],4560.0,0,96617.0,0,0,0,0,8698993.889092,,0,5,1,False,['JeremyJaydan'],"Re: https://github.com/mrdoob/three.js/pull/29419/commits/6834f41f074359f9979e64979d88e95488984bbd

Before:
![Screenshot 2024-09-16 at 2 08 38 PM](https://github.com/user-attachments/assets/761e88e5-69a3-40d6-957e-160b012b6b8b)

After:
![Screenshot 2024-09-16 at 2 09 14 PM](https://github.com/user-attachments/assets/97c3ddae-bf9a-4d06-adbb-ed325df1ac05)

This was an oversight introduced by this PR which is fixed by the mentioned commit.

",,"**Description**
Navigating the documentation while using Safari the iframe responsible for loading page content flashes white as it's loading (see attached screen recoding).

https://github.com/user-attachments/assets/3a3570dd-9fef-43f1-89d2-77a418040f80

Safari Version 17.6 (19618.3.11.11.5)

**Solution**
Move the iframe ""display none"" out of the if condition so it's hidden before the src is set and ""display unset"" on iframe load/error regardless of the if condition. Not sure if the error listener is really needed but kept it there to be safe.

Edit (https://github.com/mrdoob/three.js/pull/29419/commits/6834f41f074359f9979e64979d88e95488984bbd):
Moved the load/error event listeners to inside the if condition, which keeps the iframe hidden when there's no page selected.

https://github.com/user-attachments/assets/50dd18e4-3b49-42fc-b992-c97bb97d7eee

I'm new to contributing, let me know if there's anything else to do!","I can confirm the white flash in Safari and that the PR fixes the issue!

Just one question: Why do we need an `onerror` event listener? What error situation triggers the callback? I was thinking with the `onerror` would cover cases such as 404 or network failure and show default browser pages for the iframe to show but I did test both those cases and they didn't seem to work.

Perhaps the `onerror` should be removed as there's no proven use case for it so far. > Perhaps the onerror should be removed as there's no proven use case for it so far.

Sounds good! done :smile:"
29428,2024-09-16T23:06:27Z,2024-09-16T23:47:46Z,sunag,0,0,2,209,5,0,0,[],,0,2480.0,0,0,0,0,8728078.984586,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29338

**Description**

Added mixamo to readyplayer.me retargeting animation example.

[Live example](https://raw.githack.com/sunag/three.js/dev-retarget-5/examples/webgpu_animation_retargeting_readyplayer.html)

![image](https://github.com/user-attachments/assets/425fdb11-4657-4a2a-b65c-b471f10ac2be)",
29424,2024-09-16T16:25:00Z,2024-09-16T16:38:15Z,sunag,0,0,1,47,2,0,0,[],,0,7790.0,0,0,0,0,8746857.064367,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29338

**Description**

- [x] Added `trim`.",
29423,2024-09-16T14:41:39Z,2024-09-16T14:50:25Z,sunag,0,0,1,20,2,0,0,[],,0,535.0,0,0,0,0,8760313.700213,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29338

**Description**

- [x] Remove `preserveHipPosition` option, use `hipInfluence` instead of.
- [x] Added `hipPosition`.",
29422,2024-09-16T10:18:59Z,2024-09-16T11:35:16Z,Mugen87,0,5,3,8,1,3,0,[],,0,5237.0,0,0,0,0,8771372.275019,,0,3,1,False,[],,,"Related issue: #29024

**Description**

The PR makes sure the orthographic camera in `misc_exporter_gltf` is configured according to the suggestions in #29024. 

Next to using scene units and more appropriate far and near values, it was necessary to transform the camera in a way so you have a proper view on the scene.

If you now export `scene1` and import it in `gltf-viewer`, you eventually get a usable result.","## Identical operands

Operands [window.innerWidth](1) and [window.innerWidth](2) are identical.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2455) That does not look like the correct pattern to me. Something like:
```js
const h = 1000; // frustum height
const aspect = window.innerWidth / window.innerHeight;
camera = new THREE.OrthographicCamera( - h * aspect, h * aspect, h, - h, 10, 2000 );
```
 Well, you get the idea. :-) For reference: I was using the pattern from `webgl_camera`:

https://github.com/mrdoob/three.js/blob/302240259d4ae8ae54557f7be6f0515a662f256d/examples/webgl_camera.html#L65 Well, I think the new version is better."
29418,2024-09-16T01:47:09Z,2024-09-16T08:31:07Z,donmccurdy,0,0,1,18,2,0,0,[],,0,32626.0,0,0,0,0,8774693.848068,,0,1,1,False,[],,,"Updates Basis Universal transcoders to v1.50.0, a prerequisite to adding support for the new HDR Basis Universal UASTC format, in .ktx2 files. Usage with previous formats (LDR UASTC and ETC1S) remains the same.",
29416,2024-09-15T18:51:13Z,2024-09-16T01:59:50Z,sunag,0,0,2,21,1,0,0,[],,0,25720.0,0,0,0,0,8806556.514413,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29338

**Description**

This simplifies appointments in some cases.

https://x.com/sea3dformat/status/1835382292690395480

https://github.com/user-attachments/assets/4735d434-bfe3-4d8d-ac7b-081920707d79

",
29060,2024-08-04T09:26:14Z,2024-09-15T16:34:47Z,yue4u,1,0,1,2,1,1,1,[],299178.0,0,3667742.0,0,0,0,0,8827234.218398,,0,1,1,False,['donmccurdy'],"The steps listed do sound correct, but I'm away from my computer for a couple weeks and unable to test in the meantime. If others have tested and this works, feel free to merge!

Alternatively the ESM build from npm can be used, after removing the sourcemap line. Published builds of ktx-parse are not minified.Thank you!",Thank you!,"Related issue: https://github.com/donmccurdy/KTX-Parse/issues/147

**Description**

Update ktx-parse dependency from v0.3.1 to v0.7.1 (https://github.com/donmccurdy/KTX-Parse/compare/v0.3.1...v0.7.1) to contain the fix in https://github.com/donmccurdy/KTX-Parse/pull/148.

I couldn't find some good instructions about how to update this compressed module so I did this PR by guessing. Please tell me if some of the processes are wrong.

The steps I took:
1. Clone  https://github.com/donmccurdy/KTX-Parse
2. Check out the release tag: `git fetch --all && git checkout v0.7.1`
3. Remove `--no-compress` in package.json
4. Run `yarn && yarn dist`
5. Copy and paste from `dist/ktx-parse.esm.js` to `examples/jsm/libs/ktx-parse.module.js`
6. Remove `//# sourceMappingURL=ktx-parse.esm.js.map`",
29410,2024-09-15T16:35:34Z,2024-09-15T20:13:21Z,renovate[bot],0,0,1,6,1,0,0,[],,0,13146.0,0,0,0,0,8827270.697687,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://redirect.github.com/github/codeql-action) | action | digest | `4dd1613` -> `8214744` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC43NC4xIiwidXBkYXRlZEluVmVyIjoiMzguNzQuMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29413,2024-09-15T18:14:40Z,2024-09-15T20:12:45Z,dependabot[bot],0,0,1,110,1,0,0,['Dependencies'],,0,7092.0,0,0,0,0,8827379.473805,,0,1,0,False,[],,,"Bumps [serve-static](https://github.com/expressjs/serve-static) and [express](https://github.com/expressjs/express). These dependencies needed to be updated together.
Updates `serve-static` from 1.15.0 to 1.16.2
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/expressjs/serve-static/releases"">serve-static's releases</a>.</em></p>
<blockquote>
<h2>1.16.0</h2>
<h2>What's Changed</h2>
<ul>
<li>Remove link renderization in html while redirecting (<a href=""https://redirect.github.com/expressjs/serve-static/pull/173"">expressjs/serve-static#173</a>)</li>
</ul>
<h2>New Contributors</h2>
<ul>
<li><a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> made their first contribution in <a href=""https://redirect.github.com/expressjs/serve-static/pull/173"">expressjs/serve-static#173</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a href=""https://github.com/expressjs/serve-static/compare/v1.15.0...1.16.0"">https://github.com/expressjs/serve-static/compare/v1.15.0...1.16.0</a></p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/expressjs/serve-static/blob/v1.16.2/HISTORY.md"">serve-static's changelog</a>.</em></p>
<blockquote>
<h1>1.16.2 / 2024-09-11</h1>
<ul>
<li>deps: encodeurl@~2.0.0</li>
</ul>
<h1>1.16.1 / 2024-09-11</h1>
<ul>
<li>deps: send@0.19.0</li>
</ul>
<h1>1.16.0 / 2024-09-10</h1>
<ul>
<li>Remove link renderization in html while redirecting</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/expressjs/serve-static/commit/ec9c5ecfb09368519e4698ffbbe1882de00d0ef2""><code>ec9c5ec</code></a> 1.16.2</li>
<li><a href=""https://github.com/expressjs/serve-static/commit/f454d37c68fdad04b582cb9ac0cd165ab6d19114""><code>f454d37</code></a> fix(deps): encodeurl@~2.0.0</li>
<li><a href=""https://github.com/expressjs/serve-static/commit/77a8255688cc4affc70e6dc9aa02e3ced4957e77""><code>77a8255</code></a> 1.16.1</li>
<li><a href=""https://github.com/expressjs/serve-static/commit/4263f496876980c165a3104d087c1ebaa046ad3d""><code>4263f49</code></a> fix(deps): send@0.19.0</li>
<li><a href=""https://github.com/expressjs/serve-static/commit/48c73970b129b96cba448e792576ad89b1f9fbed""><code>48c7397</code></a> 1.16.0</li>
<li><a href=""https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b""><code>0c11fad</code></a> Merge commit from fork</li>
<li>See full diff in <a href=""https://github.com/expressjs/serve-static/compare/v1.15.0...v1.16.2"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~wesleytodd"">wesleytodd</a>, a new releaser for serve-static since your current version.</p>
</details>
<br />

Updates `express` from 4.19.2 to 4.21.0
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/expressjs/express/releases"">express's releases</a>.</em></p>
<blockquote>
<h2>4.21.0</h2>
<h2>What's Changed</h2>
<ul>
<li>Deprecate <code>&quot;back&quot;</code> magic string in redirects by <a href=""https://github.com/blakeembrey""><code>@​blakeembrey</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5935"">expressjs/express#5935</a></li>
<li>finalhandler@1.3.1 by <a href=""https://github.com/wesleytodd""><code>@​wesleytodd</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5954"">expressjs/express#5954</a></li>
<li>fix(deps): serve-static@1.16.2 by <a href=""https://github.com/wesleytodd""><code>@​wesleytodd</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5951"">expressjs/express#5951</a></li>
<li>Upgraded dependency qs to 6.13.0 to match qs in body-parser by <a href=""https://github.com/agadzinski93""><code>@​agadzinski93</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5946"">expressjs/express#5946</a></li>
</ul>
<h2>New Contributors</h2>
<ul>
<li><a href=""https://github.com/agadzinski93""><code>@​agadzinski93</code></a> made their first contribution in <a href=""https://redirect.github.com/expressjs/express/pull/5946"">expressjs/express#5946</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a href=""https://github.com/expressjs/express/compare/4.20.0...4.21.0"">https://github.com/expressjs/express/compare/4.20.0...4.21.0</a></p>
<h2>4.20.0</h2>
<h2>What's Changed</h2>
<h3>Important</h3>
<ul>
<li>IMPORTANT: The default <code>depth</code> level for parsing URL-encoded data is now <code>32</code> (previously was <code>Infinity</code>)</li>
<li>Remove link renderization in html while using <code>res.redirect</code></li>
</ul>
<h3>Other Changes</h3>
<ul>
<li>4.19.2 Staging by <a href=""https://github.com/wesleytodd""><code>@​wesleytodd</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5561"">expressjs/express#5561</a></li>
<li>remove duplicate location test for data uri by <a href=""https://github.com/wesleytodd""><code>@​wesleytodd</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5562"">expressjs/express#5562</a></li>
<li>feat: document beta releases expectations by <a href=""https://github.com/marco-ippolito""><code>@​marco-ippolito</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5565"">expressjs/express#5565</a></li>
<li>Cut down on duplicated CI runs by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5564"">expressjs/express#5564</a></li>
<li>Add a Threat Model by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5526"">expressjs/express#5526</a></li>
<li>Assign captain of encodeurl by <a href=""https://github.com/blakeembrey""><code>@​blakeembrey</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5579"">expressjs/express#5579</a></li>
<li>Nominate jonchurch as repo captain for <code>http-errors</code>, <code>expressjs.com</code>, <code>morgan</code>, <code>cors</code>, <code>body-parser</code> by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5587"">expressjs/express#5587</a></li>
<li>docs: update Security.md by <a href=""https://github.com/inigomarquinez""><code>@​inigomarquinez</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5590"">expressjs/express#5590</a></li>
<li>docs: update triage nomination policy by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5600"">expressjs/express#5600</a></li>
<li>Add CodeQL (SAST) by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5433"">expressjs/express#5433</a></li>
<li>docs: add UlisesGascon as triage initiative captain by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5605"">expressjs/express#5605</a></li>
<li>deps: encodeurl@~2.0.0 by <a href=""https://github.com/blakeembrey""><code>@​blakeembrey</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5569"">expressjs/express#5569</a></li>
<li>skip QUERY method test by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5628"">expressjs/express#5628</a></li>
<li>ignore ETAG query test on 21 and 22, reuse skip util by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5639"">expressjs/express#5639</a></li>
<li>add support Node.js@22 in the CI by <a href=""https://github.com/mertcanaltin""><code>@​mertcanaltin</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5627"">expressjs/express#5627</a></li>
<li>doc: add table of contents, tc/triager lists to readme by <a href=""https://github.com/mertcanaltin""><code>@​mertcanaltin</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5619"">expressjs/express#5619</a></li>
<li>List and sort all projects, add captains by <a href=""https://github.com/blakeembrey""><code>@​blakeembrey</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5653"">expressjs/express#5653</a></li>
<li>docs: add <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> as captain for cookie-parser by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5666"">expressjs/express#5666</a></li>
<li>✨ bring back query tests for node 21 by <a href=""https://github.com/ctcpip""><code>@​ctcpip</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5690"">expressjs/express#5690</a></li>
<li>[v4] Deprecate <code>res.clearCookie</code> accepting <code>options.maxAge</code> and <code>options.expires</code> by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5672"">expressjs/express#5672</a></li>
<li>skip QUERY tests for Node 21 only, still not supported by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5695"">expressjs/express#5695</a></li>
<li>📝 update people, add ctcpip to TC by <a href=""https://github.com/ctcpip""><code>@​ctcpip</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5683"">expressjs/express#5683</a></li>
<li>remove minor version pinning from ci by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5722"">expressjs/express#5722</a></li>
<li>Fix link variable use in attribution section of CODE OF CONDUCT by <a href=""https://github.com/IamLizu""><code>@​IamLizu</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5762"">expressjs/express#5762</a></li>
<li>Replace Appveyor windows testing with GHA by <a href=""https://github.com/jonchurch""><code>@​jonchurch</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5599"">expressjs/express#5599</a></li>
<li>Add OSSF Scorecard badge by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5436"">expressjs/express#5436</a></li>
<li>update scorecard link by <a href=""https://github.com/bjohansebas""><code>@​bjohansebas</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5814"">expressjs/express#5814</a></li>
<li>Nominate <a href=""https://github.com/IamLizu""><code>@​IamLizu</code></a> to the triage team by <a href=""https://github.com/UlisesGascon""><code>@​UlisesGascon</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5836"">expressjs/express#5836</a></li>
<li>deps: path-to-regexp@0.1.8 by <a href=""https://github.com/blakeembrey""><code>@​blakeembrey</code></a> in <a href=""https://redirect.github.com/expressjs/express/pull/5603"">expressjs/express#5603</a></li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/expressjs/express/blob/4.21.0/History.md"">express's changelog</a>.</em></p>
<blockquote>
<h1>4.21.0 / 2024-09-11</h1>
<ul>
<li>Deprecate <code>res.location(&quot;back&quot;)</code> and <code>res.redirect(&quot;back&quot;)</code> magic string</li>
<li>deps: serve-static@1.16.2
<ul>
<li>includes send@0.19.0</li>
</ul>
</li>
<li>deps: finalhandler@1.3.1</li>
<li>deps: qs@6.13.0</li>
</ul>
<h1>4.20.0 / 2024-09-10</h1>
<ul>
<li>deps: serve-static@0.16.0
<ul>
<li>Remove link renderization in html while redirecting</li>
</ul>
</li>
<li>deps: send@0.19.0
<ul>
<li>Remove link renderization in html while redirecting</li>
</ul>
</li>
<li>deps: body-parser@0.6.0
<ul>
<li>add <code>depth</code> option to customize the depth level in the parser</li>
<li>IMPORTANT: The default <code>depth</code> level for parsing URL-encoded data is now <code>32</code> (previously was <code>Infinity</code>)</li>
</ul>
</li>
<li>Remove link renderization in html while using <code>res.redirect</code></li>
<li>deps: path-to-regexp@0.1.10
<ul>
<li>Adds support for named matching groups in the routes using a regex</li>
<li>Adds backtracking protection to parameters without regexes defined</li>
</ul>
</li>
<li>deps: encodeurl@~2.0.0
<ul>
<li>Removes encoding of <code>\</code>, <code>|</code>, and <code>^</code> to align better with URL spec</li>
</ul>
</li>
<li>Deprecate passing <code>options.maxAge</code> and <code>options.expires</code> to <code>res.clearCookie</code>
<ul>
<li>Will be ignored in v5, clearCookie will set a cookie with an expires in the past to instruct clients to delete the cookie</li>
</ul>
</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/expressjs/express/commit/7e562c6d8daddff4604f8efaaf9db2cf98c6dcff""><code>7e562c6</code></a> 4.21.0</li>
<li><a href=""https://github.com/expressjs/express/commit/1bcde96bc87c4704df9a704271d1167064ab56bb""><code>1bcde96</code></a> fix(deps): qs@6.13.0 (<a href=""https://redirect.github.com/expressjs/express/issues/5946"">#5946</a>)</li>
<li><a href=""https://github.com/expressjs/express/commit/7d364775688be98aaa973302e066d0da9f438997""><code>7d36477</code></a> fix(deps): serve-static@1.16.2 (<a href=""https://redirect.github.com/expressjs/express/issues/5951"">#5951</a>)</li>
<li><a href=""https://github.com/expressjs/express/commit/40d2d8f2c882712a0f2e4603c38d166c79676b2b""><code>40d2d8f</code></a> fix(deps): finalhandler@1.3.1</li>
<li><a href=""https://github.com/expressjs/express/commit/77ada906dba57fd6e308f0d750e01653dbeaddfc""><code>77ada90</code></a> Deprecate <code>&quot;back&quot;</code> magic string in redirects (<a href=""https://redirect.github.com/expressjs/express/issues/5935"">#5935</a>)</li>
<li><a href=""https://github.com/expressjs/express/commit/21df421ebc7a5249bb31101da666bbf22adc3f18""><code>21df421</code></a> 4.20.0</li>
<li><a href=""https://github.com/expressjs/express/commit/4c9ddc1c47bf579e55c2fe837d76a952e9fd8959""><code>4c9ddc1</code></a> feat: upgrade to serve-static@0.16.0</li>
<li><a href=""https://github.com/expressjs/express/commit/9ebe5d500d22cbb2b8aaa73446866b084c747971""><code>9ebe5d5</code></a> feat: upgrade to send@0.19.0 (<a href=""https://redirect.github.com/expressjs/express/issues/5928"">#5928</a>)</li>
<li><a href=""https://github.com/expressjs/express/commit/ec4a01b6b8814d7b007f36a3023f4dbafdbc3d09""><code>ec4a01b</code></a> feat: upgrade to body-parser@1.20.3 (<a href=""https://redirect.github.com/expressjs/express/issues/5926"">#5926</a>)</li>
<li><a href=""https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553""><code>54271f6</code></a> fix: don't render redirect values in anchor href</li>
<li>Additional commits viewable in <a href=""https://github.com/expressjs/express/compare/4.19.2...4.21.0"">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mrdoob/three.js/network/alerts).

</details>",
29411,2024-09-15T16:35:49Z,2024-09-15T18:13:48Z,renovate[bot],0,0,1,152,1,0,0,[],,0,5919.0,0,0,0,0,8834484.095985,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [concurrently](https://redirect.github.com/open-cli-tools/concurrently) | [`9.0.0` -> `9.0.1`](https://renovatebot.com/diffs/npm/concurrently/9.0.0/9.0.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/concurrently/9.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/concurrently/9.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/concurrently/9.0.0/9.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/concurrently/9.0.0/9.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [eslint-plugin-compat](https://redirect.github.com/amilajack/eslint-plugin-compat) | [`6.0.0` -> `6.0.1`](https://renovatebot.com/diffs/npm/eslint-plugin-compat/6.0.0/6.0.1) | [![age](https://developer.mend.io/api/mc/badges/age/npm/eslint-plugin-compat/6.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/eslint-plugin-compat/6.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/eslint-plugin-compat/6.0.0/6.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/eslint-plugin-compat/6.0.0/6.0.1?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://redirect.github.com/rollup/rollup)) | [`4.21.2` -> `4.21.3`](https://renovatebot.com/diffs/npm/rollup/4.21.2/4.21.3) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.21.3?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.21.3?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.21.2/4.21.3?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.21.2/4.21.3?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>open-cli-tools/concurrently (concurrently)</summary>

### [`v9.0.1`](https://redirect.github.com/open-cli-tools/concurrently/releases/tag/v9.0.1)

[Compare Source](https://redirect.github.com/open-cli-tools/concurrently/compare/v9.0.0...v9.0.1)

#### What's Changed

-   Don't set up more than 1 abort signal listener by [@&#8203;gustavohenke](https://redirect.github.com/gustavohenke) in [https://github.com/open-cli-tools/concurrently/pull/503](https://redirect.github.com/open-cli-tools/concurrently/pull/503)

**Full Changelog**: https://github.com/open-cli-tools/concurrently/compare/v9.0.0...v9.0.1

</details>

<details>
<summary>amilajack/eslint-plugin-compat (eslint-plugin-compat)</summary>

### [`v6.0.1`](https://redirect.github.com/amilajack/eslint-plugin-compat/releases/tag/v6.0.1)

[Compare Source](https://redirect.github.com/amilajack/eslint-plugin-compat/compare/v6.0.0...v6.0.1)

-   feat: add `name` (for tooling) ([#&#8203;629](https://redirect.github.com/amilajack/eslint-plugin-compat/issues/629))  [`18fc24c`](https://redirect.github.com/amilajack/eslint-plugin-compat/commit/18fc24c)

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.21.3`](https://redirect.github.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4213)

[Compare Source](https://redirect.github.com/rollup/rollup/compare/v4.21.2...v4.21.3)

*2024-09-12*

##### Bug Fixes

-   Always respect side effects in left-hand side of optional chain ([#&#8203;5642](https://redirect.github.com/rollup/rollup/issues/5642))
-   Update stack trace for augmented errors to not hide relevant information ([#&#8203;5640](https://redirect.github.com/rollup/rollup/issues/5640))

##### Pull Requests

-   [#&#8203;5636](https://redirect.github.com/rollup/rollup/pull/5636): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5637](https://redirect.github.com/rollup/rollup/pull/5637): chore(deps): lock file maintenance ([@&#8203;renovate](https://redirect.github.com/renovate)\[bot])
-   [#&#8203;5640](https://redirect.github.com/rollup/rollup/pull/5640): fix: keep the message of stack up-to-date ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi))
-   [#&#8203;5642](https://redirect.github.com/rollup/rollup/pull/5642): fix: include left-side effect of optional chaining in the end of hasEffectsAsChainElement ([@&#8203;TrickyPi](https://redirect.github.com/TrickyPi))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://redirect.github.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC43NC4xIiwidXBkYXRlZEluVmVyIjoiMzguNzQuMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29330,2024-09-05T08:54:00Z,2024-09-05T21:04:33Z,stephomi,0,2,1,5,1,2,1,[],,0,865191.0,0,0,0,0,8866921.84338,,0,1,1,False,[],Thank you! ,Thank you! ,"`bufferAttribute.setX` will apply the normalisation when it should not when we copy from the sparse array.

---

Simple file with morph target and color attributes (using sparse):
[sparse.glb.zip](https://github.com/user-attachments/files/16886602/sparse.glb.zip)
","nit: Probably not necessary to save `prevNormalize` here, the original `normalized` variable is still in scope. Indeed, updated the commit"
29395,2024-09-12T11:17:34Z,2024-09-14T19:13:08Z,RenaudRohlinger,3,0,2,24,5,0,0,[],182.0,0,201334.0,0,0,0,0,8917365.313779,,0,2,1,False,"['github-actions[bot]', 'aardgoose', 'RenaudRohlinger']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 832.14 <br> **222.98** | 832.25 <br> **223** | +115 B <br> **+18 B** |
| WebGPU Nodes | 831.65 <br> **222.86** | 831.76 <br> **222.88** | +115 B <br> **+18 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 529.9 <br> **142.75** | 529.97 <br> **142.77** | +70 B <br> **+16 B** |
| WebGPU Nodes | 486.56 <br> **132.61** | 486.63 <br> **132.63** | +70 B <br> **+15 B** | Line2NodeMaterial will also need this. Indeed! Updated the PR consequently.",,"Related issue: https://github.com/mrdoob/three.js/issues/29269


**Description**

Safeguarded the renderer from breaking when alphaToCoverage is used without multisampling. For example InstancedPointsNodeMaterial would break by default if the renderer didn't have antialias enabled.


<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29406,2024-09-14T06:28:52Z,2024-09-14T07:57:15Z,puxiao,1,0,1,162,5,0,0,[],8743.0,0,8744.0,0,0,0,0,8954477.859988,,0,1,1,False,['puxiao'],中秋快乐,,,
29396,2024-09-12T11:25:14Z,2024-09-12T23:14:47Z,RenaudRohlinger,4,0,1,4,2,0,0,[],178.0,0,103825.0,0,0,0,0,9014416.072369,,0,1,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 828.45 <br> **222.25** | 828.47 <br> **222.25** | +14 B <br> **+0 B** |
| WebGPU Nodes | 828.03 <br> **222.16** | 828.05 <br> **222.16** | +14 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 526.43 <br> **141.9** | 526.43 <br> **141.9** | +0 B <br> **+0 B** |
| WebGPU Nodes | 483.08 <br> **131.72** | 483.08 <br> **131.72** | +0 B <br> **+0 B** | >Fixes InstancedPoints wrong UVs.

Nothing was broken -- or wrong. It is producing the same answer.

The code is now unnecessarily less efficient for no compelling reason.

 I understand that adding a multiplication and a subtraction solely to handle the circular shape of the point is less optimal. However, this correction is intended to fix the UVs in the overall context of why we use UVs, not just for the shader-specific discard function.


For example:
```js
material = new THREE.InstancedPointsNodeMaterial( {
	color: 0xffffff,
	pointWidth: 100, // in pixel units
	vertexColors: true,
	alphaToCoverage: true,

} );
const textureNode = texture( map );
material.pointColorNode = textureNode.rgb;
```

Before:
<img width=""1362"" alt=""Screenshot 2024-09-13 at 14 19 50"" src=""https://github.com/user-attachments/assets/82cae8b7-3930-4c2d-8525-b34b973d242c"">

After:
<img width=""1362"" alt=""Screenshot 2024-09-13 at 14 20 23"" src=""https://github.com/user-attachments/assets/dd3536ef-b15e-4821-bfde-c1c0130d84c4"">
 OK. For node material that makes sense.

Your contributions have been excellent, BTW.   IMHO, of course.  :-)
",,"Related issue: #29374

**Description**

Fixes InstancedPoints wrong UVs.


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29343,2024-09-06T16:15:22Z,2024-09-13T13:59:08Z,Makio64,8,7,4,74,3,2,1,[],195.0,0,600649.0,0,0,0,0,9018584.424116,,1,4,1,False,"['github-actions[bot]', 'gkjohnson', 'Makio64', 'cmhhelgeson']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.49 <br> **169.68** | +244 B <br> **+43 B** |
| WebGPU | 826.41 <br> **221.63** | 826.65 <br> **221.67** | +244 B <br> **+44 B** |
| WebGPU Nodes | 825.99 <br> **221.54** | 826.23 <br> **221.58** | +244 B <br> **+43 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.5 <br> **141.64** | 525.5 <br> **141.64** | +0 B <br> **+0 B** |
| WebGPU Nodes | 482.15 <br> **131.46** | 482.15 <br> **131.46** | +0 B <br> **+0 B** | Think this could warrant an example, or perhaps an option for displaying this dynamic switching in one of the existing batch examples. @cmhhelgeson Example patched 👍  I'm testing the branch using this link: https://raw.githack.com/Makio64/three.js-BatchedMesh-geometryIdAt/dev/examples/webgpu_mesh_batch.html

I'm receiving the error below upon clicking Randomize Geometry:

<img width=""350"" alt=""image"" src=""https://github.com/user-attachments/assets/4783fe3e-fcc0-4766-8e7b-df8d3e7e37a4"">
 > I'm testing the branch using this link:

Testing these kinds of live links will not work without updated three.js build files. > > I'm testing the branch using this link:
> 
> Testing these kinds of live links will not work without updated three.js build files.

@cmhhelgeson @gkjohnson Its my first PR since long time on threejs, should I add the new build to my PR for testing purpose ? > should I add the new build to my PR for testing purpose?

No adding the build files will often result in merge conflicts. I just intended to say that if you want to test the PR then you need to pull and run the branch locally. @gkjohnson @cmhhelgeson It should be good to go now. Let me know if you feel it needs other changes.",,"This PR add the possibility to switch the geometryId of an instance with setGeometryIdAt and to get the geometryId of an instance with getGeometryIdAt.

This PR implement this feature in the same way than set/get of matrix/color/visibility.

**Before the PR**
`batchedMesh._drawInfo[instanceId].geometryIndex = geometryId`
`X`

**After the PR**
`batchedMesh.setGeometryIdAt(instanceId, geometryId)`
`batchedMesh.getGeometryIdAt(instanceId)`

**Why ?**
Currently we can replace a geometry by another but we cant change the geometry use by an instance.

For example in game, while the player explore the level sometimes I needs more instance with rocks geometry and less with trees geometry and sometimes the opposite. In this case with this feature we can re-use the instance in a clever way updating only their geometryId.

","We should block the user from setting an invalid geometryId, I think. We should check if the geometry is ""active"" here, as well, as we do in other functions. I just add it to the PR to keep this simple. 
But originally I removed it from this PR cause I'm sceptical about this concept of geometry being ""active"", currently its always active as it cant be deleted from BatchedMesh class Api. Also I'm not convince the concept of a geometry ""active"" is the right way of removing the geometry. I added test and a warning for the user, also currently setMatrixAt and other function can return null without warning and maybe it can be good to add warning as well for them in another PR ?

I'm not sure of the current warning policy in Threejs but it can avoid a lot of headaches for devs and issues opening  to avoid silent error. I'll leave whether we should add warnings to someone else. Typically I'd just recommend just being consistent with what's done in other functions rather than adding a new concept for the sake of keeping the PR easy to merge. Then something like warnings can be discussed in another PR. An error with a message indicating what went wrong may be best but that can left to another PR if it gets added.  Something like an ""active"" flag is needed so a geometry can be removed later when the user triggers the compression, though I understand there's no API for this at the moment. See https://github.com/mrdoob/three.js/pull/28638. If you'd like to recommend a different approach I'd suggest making a new issue to discuss it and keep this one focused on additions that are consistent with the current class implementation. I just removed the warning to keep consistency with the rest of the class and i'll open a discussion about it separately. thanks!"
29386,2024-09-11T03:06:20Z,2024-09-13T03:57:55Z,sunag,13,1,10,598,28,1,0,[],178.0,0,186975.0,0,0,0,0,9047600.813953,,0,10,1,False,"['RenaudRohlinger', 'mrdoob', 'github-actions[bot]', 'cmhhelgeson', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 828.45 <br> **222.25** | 832.11 <br> **222.98** | +3.66 kB <br> **+729 B** |
| WebGPU Nodes | 828.03 <br> **222.16** | 831.62 <br> **222.86** | +3.59 kB <br> **+699 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 526.43 <br> **141.9** | 529.89 <br> **142.75** | +3.46 kB <br> **+844 B** |
| WebGPU Nodes | 483.08 <br> **131.72** | 486.54 <br> **132.61** | +3.46 kB <br> **+890 B** | I'm still trying to familiarize myself with the deeper workings of the API rather than just adding onto it, but is the monitor meant to simply just analyze whether the node material's properties match the data returned by getXData calls, then setting the needsRefresh flag as needed based on the result of that query? Then, within the main render loop, the nodes and bindings are only ( according to my guess) only updated in 3 scenarios

1. In Renderer's createObject function
2. Within _renderbundle and _renderObject direct only when the node monitor set's the Nodes objects needsRefresh flag to true.
3. When a node is first initialized, which automatically will set the needsRefresh flag for it to be updated within the aforementioned _renderBundle and _renderObjectDirect functions. @cmhhelgeson Yes, your analysis is correct :) If setupMonitor let's us manipulate the monitor's properties, would it make sense to have one of setupMonitor's arguments be a list of properties that are either included or excluded in the needsRefresh call, essentially making those properties static even if the program itself is not? Or would that not really provide any meaningful performance benefits given the small list of properties?

Or maybe it would make sense to add to a monitor's refreshUniforms property as a program is being created so a monitor only deals with uniforms relevant to its sample?

Perhaps it doesn't matter either way, since the monitor already seems to ignore properties that aren't there.  The large list will be ignored in the frame cycle, leaving only the properties present in the material, so we wouldn't need to add many functions here.

I think interesting add refreshUniform as a property of the NodeMaterialMonitor, that way users could edit it.

The idea of ​​setupMonitor() is to encourage users to extend the NodeMaterialMonitor class and do their own specific optimization. This is the first time we have improved performance for many common objects without refraction, as we already had better performance in refraction, now without using special native WebGPU features. `Monitor` sounds strange to me... `NodeMaterialManager` or `NodeMaterialObserver` may be more fitting? /cc @0b5vr  Or even `NodeMaterialOptimizer`, whichever sounds better to you 👌 What do you think of `NodeMaterialWatcher`? I'm not sure if it's better than `NodeMaterialObserver`. 

In my head material optimizer would enter the compilation process, shaders, etc. The main objective of the class would be to check data changes and release the update of nodes and bindings. Some others options could be `NodeMaterialUpdater`, `NodeMaterialListener`... I think NodeMaterialObserver is good. Updater suggests a class that's performing more robust modifications on the materials. Awesome!!

By the way, @sunag this PR seems to break the WebGL version of `webgpu_performance_renderbundle`.",,"Related issue: https://github.com/mrdoob/three.js/pull/29077#issuecomment-2275630249, https://github.com/mrdoob/three.js/pull/29299

`NodeMaterialObserver` is responsible for checking if there are any changes in the materials, and if so, moving forward with the process of updating the nodes and bindings at the GPU level.

`NodeMaterialObserver` is an intermediate component between node updates that can be extended or manipulated using `NodeMaterial.setupObserver()`. 

## List

- [x] Added `NodeMaterialObserver`
- [x] Move lights to `renderGroup`
- [x] Move camera to `renderGroup`
- [x] Move fog to `renderGroup`
- [x] Remove Proxies in `updateBeforeNodes`  and `updateAfterNodes`
- [x] TSL Added `Lights.js` 
- [x] RenderObjects: Reuse `chainArray`
- [x] Move `tone mapping exposure` to `renderGroup`

## Performance

### `webgpu_performance_renderbundle`

| bundle = r168 | bundle += viewMatrices GPU | bundle += node observer |
| ------------- | ------------- | ------------- | 
| 5.67ms | 3.27ms | 0.96ms |
| ![image](https://github.com/user-attachments/assets/4e39ee58-f8d0-4d07-b3fc-70402ada23bf) | ![image](https://github.com/user-attachments/assets/1d0adf41-9d53-4035-8b1c-34da1597ce74) | ![image](https://github.com/user-attachments/assets/b9582f0e-b36e-4200-828f-51c1043ed693) |

| default = r168 | default += viewMatrices GPU | default += node observer |
| ------------- | ------------- | ------------- | 
| 12.10ms | 8.85ms | 6.59ms |
| ![image](https://github.com/user-attachments/assets/c13d5dfe-f887-4d8a-a056-ccfdf6cbcf3d) | ![image](https://github.com/user-attachments/assets/4f7f9758-dd5e-4ebe-92bd-2bfa107e2a88) | ![image](https://github.com/user-attachments/assets/06bc8905-1095-4515-ab11-a45f6ea9ab8e) |

### `webgpu_performance`
| Screenshot | Description |
| ------------- | ------------- |
| ![image](https://github.com/user-attachments/assets/4275b2db-5749-4580-9f3f-02055d71129b) | WebGPU ~1026fps - `mesh.static = true` + non-string initial cacheKey in RenderObject - maybe we can some hash algorithm like crc32/64 for comparison in the rendering cycle - not available in this PR |
| ![image](https://github.com/user-attachments/assets/3d85c69b-e2b6-4bfa-af62-cf749b4251c4) | WebGPU ~870fps - `mesh.static = true` |
| ![image](https://github.com/user-attachments/assets/05f9ba60-121b-499b-9f37-d117e8e9475d) | WebGPU ~717fps |
| ![image](https://github.com/user-attachments/assets/105e825d-7025-402e-8957-3dfae9771e7e) | * WebGL ~640fps - reference |
| ![image](https://github.com/user-attachments/assets/3c631ba2-79c5-43be-9b62-f5747d54b5a0) | WebGPU previous `r168` ~299fps |

","## Unused variable, import, function or class

Unused variable vec3.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2452)"
29345,2024-09-06T21:13:01Z,2024-09-08T08:00:42Z,vanruesc,3,0,1,6,1,1,1,[],194.0,0,499004.0,0,0,0,0,9102371.914489,,0,1,1,False,"['github-actions[bot]', 'vanruesc', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.18 <br> **169.62** | 685.24 <br> **169.64** | +56 B <br> **+14 B** |
| WebGPU | 825.96 <br> **221.44** | 825.96 <br> **221.44** | +0 B <br> **+0 B** |
| WebGPU Nodes | 825.54 <br> **221.34** | 825.54 <br> **221.34** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.96 <br> **111.46** | 462.02 <br> **111.48** | +56 B <br> **+15 B** |
| WebGPU | 525.27 <br> **141.52** | 525.27 <br> **141.52** | +0 B <br> **+0 B** |
| WebGPU Nodes | 481.93 <br> **131.34** | 481.93 <br> **131.34** | +0 B <br> **+0 B** | > The methods WebGLRenderer.compile() and WebGLRenderer.compileAsync() fail when trying to compile custom objects that define a material property. 

Shouldn't you be using `object.userData` for that? > Shouldn't you be using `object.userData` for that?

In an end product (i.e. when working with instances of builtin classes) yes, but my use case is a custom class in a library. The class is a custom 3D object that manages an internal `InstancedMesh` which changes based on certain parameters and `userData` isn't really suited for defining its public API.",,"**Description**

The methods `WebGLRenderer.compile()` and `WebGLRenderer.compileAsync()` fail when trying to compile custom objects that define a `material` property. My use case involves objects that manage child meshes. The composite objects provide access to an inner, shared material via a getter for convenience.

To reproduce the error, uncomment line 47 or 48 in the following example: https://jsfiddle.net/7nvcjwk8/

```
Uncaught (in promise) TypeError: geometry is undefined
    getParameters WebGLPrograms.js:77
    getProgram WebGLRenderer.js:1631
    prepareMaterial WebGLRenderer.js:921
    compile WebGLRenderer.js:999
    traverse Object3D.js:536
    traverse Object3D.js:542
    compile WebGLRenderer.js:980
    compileAsync WebGLRenderer.js:1019
    init webgl_geometry_cube.html:65
    <anonymous> webgl_geometry_cube.html:37
WebGLPrograms.js:77
```

This PR changes the `compile` method to only process renderable objects, similar to how it's done in `WebGLRenderer.projectObject()`.

Alternatively, `Object3D` could define `isRenderable` with a default value of `false` and the renderable sub classes could set this flag to `true`.",
29399,2024-09-12T15:07:44Z,2024-09-12T15:22:34Z,RenaudRohlinger,1,0,1,2,1,0,0,[],196.0,0,890.0,0,0,0,0,9104003.180449,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.83 <br> **169.75** | 685.83 <br> **169.75** | +0 B <br> **+0 B** |
| WebGPU | 828.45 <br> **222.25** | 828.46 <br> **222.25** | +12 B <br> **+3 B** |
| WebGPU Nodes | 828.03 <br> **222.16** | 828.04 <br> **222.16** | +12 B <br> **+3 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.42 <br> **111.53** | 462.42 <br> **111.53** | +0 B <br> **+0 B** |
| WebGPU | 526.43 <br> **141.9** | 526.44 <br> **141.91** | +12 B <br> **+2 B** |
| WebGPU Nodes | 483.08 <br> **131.72** | 483.1 <br> **131.72** | +12 B <br> **+2 B** |",,"**Description**
Initializing an `InstancedMesh` with `count = 0` breaks in both backends. This PR fixes the issue by creating a uniform buffer of a minimum of size 1.
<img width=""609"" alt=""image"" src=""https://github.com/user-attachments/assets/0499abdf-349a-40f2-9019-f48bc621db7b"">


*This contribution is funded by [Segments.AI](https://segments.ai) & [Utsubo](https://utsubo.com)*",
29398,2024-09-12T14:59:35Z,2024-09-12T14:59:42Z,Mugen87,0,0,1,26,11,0,0,[],,0,7.0,0,0,0,0,9105375.619956,,0,1,1,False,[],,,"Related issue: #29146

**Description**

As suggested in https://github.com/mrdoob/three.js/pull/29146#discussion_r1756583058, the PR renames  `TransformControls.getGizmo()` to `TransformControls.getHelper()`.
",
29392,2024-09-12T09:12:29Z,2024-09-12T09:38:14Z,Mugen87,1,0,1,22,1,0,0,[],203.0,0,1546.0,0,0,0,0,9124663.679869,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.42 <br> **169.7** | 685.83 <br> **169.75** | +405 B <br> **+54 B** |
| WebGPU | 828.45 <br> **222.25** | 828.45 <br> **222.25** | +0 B <br> **+0 B** |
| WebGPU Nodes | 828.03 <br> **222.16** | 828.03 <br> **222.16** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.42 <br> **111.53** | +405 B <br> **+52 B** |
| WebGPU | 526.43 <br> **141.9** | 526.43 <br> **141.9** | +0 B <br> **+0 B** |
| WebGPU Nodes | 483.08 <br> **131.72** | 483.08 <br> **131.72** | +0 B <br> **+0 B** |",,"Fixed #28829.

**Description**

Improves the support for integer texture formats in `WebGLRenderer`. The WebGL backend of `WebGPURenderer` already has these checks.
",
29067,2024-08-05T17:40:54Z,2024-08-05T17:59:37Z,sunag,4,0,1,8,2,0,0,[],3162665.0,0,3247547.0,0,0,0,0,9131358.101866,,0,1,1,False,"['wcandillon', 'sunag']","@sunag when using this new node, I am getting the following validation error:
```
Validation: Source [Texture (unlabeled 393x754 px, TextureFormat::Depth24Plus)] sample count (4) and destination [Texture (unlabeled 393x754 px, TextureFormat::Depth24Plus)] sample count (1) does not match.
```
Any chance you could help find the underlying API call and maybe root cause of the issue? I would love to debug this further. The issue might be on our side but I am wondering if you could set me in the right direction  WebGPU needs specific methods to deal with sampled textures and this has not been implemented yet, `WebGPURenderer( { antialias: false } )` will help solve these issues until we improve this support. thank you for providing this context, appreciate it :)",,"Related issue: https://github.com/mrdoob/three.js/pull/29025

**Description**

Improve the example and add good practices.
",
29378,2024-09-10T02:29:01Z,2024-09-12T05:33:55Z,sunag,1,3,6,65,3,2,0,[],187.0,0,183897.0,0,0,0,0,9139321.587998,,0,6,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.42 <br> **169.7** | 685.42 <br> **169.7** | +0 B <br> **+0 B** |
| WebGPU | 828.13 <br> **222.15** | 828.45 <br> **222.25** | +318 B <br> **+106 B** |
| WebGPU Nodes | 827.71 <br> **222.05** | 828.03 <br> **222.16** | +318 B <br> **+106 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 526.16 <br> **141.85** | 526.43 <br> **141.9** | +265 B <br> **+58 B** |
| WebGPU Nodes | 482.82 <br> **131.66** | 483.08 <br> **131.72** | +265 B <br> **+62 B** |",,Based on this conversation: https://github.com/mrdoob/three.js/pull/29259#discussion_r1751148902,"probably should be working color space If `outputColorSpace` is a valid color space and not equal to the working color space, then you must do the conversion. makes sense, I will implement support closer to `ColorManagement.workingColorSpace`, until now I was avoiding using it."
29359,2024-09-08T15:51:01Z,2024-09-11T20:22:39Z,JaimeTorrealba,1,14,5,30,2,3,0,[],193.0,0,275666.0,0,0,0,0,9172234.086158,,0,5,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.42 <br> **169.7** | 685.42 <br> **169.7** | +0 B <br> **+0 B** |
| WebGPU | 828.13 <br> **222.15** | 828.13 <br> **222.15** | +0 B <br> **+0 B** |
| WebGPU Nodes | 827.71 <br> **222.05** | 827.71 <br> **222.05** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 526.16 <br> **141.85** | 526.16 <br> **141.85** | +0 B <br> **+0 B** |
| WebGPU Nodes | 482.82 <br> **131.66** | 482.82 <br> **131.66** | +0 B <br> **+0 B** |",,"Related issue: #29074

closes #29074

**Description**

Add the method removeLevel to LOD class

","Shouldn't the parameter be `distance`? Yep, it should be `distance`, Fixed I'm not using `map()` that often so: Is it safe to remove an array entry inside the callback while processing the array? You couldn't do that with a normal for loop with ascending index. Yep there's no problem. I'm using the map just to loop over the levels.

Now if you prefer I can change that for a ""for loop"", depending on you, but in the end it is the same.

PS: I tested it in the current LOD example, but I didn't want to change it I think `const levels = this.levels.filter(_level => _level.distance !== distance)` maybe better compared to using `map()`. We mostly use `for` loop in the code base so for consistency reasons I vote for a reverse for loop. Done :) Can we do a reverse loop? In this case, it is no necessary to modify the index inside the loop.

Besides, would it be possible to early out when the level has been found? What is the use case for having more than on LOD for a  single distance value? Sorry friend, I don't understand, what do you mean for a ""reverse loop""? ```js
for ( let i = levels.length - 1; i >= 0; -- i ) {
``` But like I said before if there is no compelling use case for more than one LOD per distance, the loop direction does not matter. You would return after the removal and that's it. Do you mean adding a break when the level has been found?

```
		for ( let i = levels.length - 1; i >= 0; -- i ) {

			if ( distance === levels[ i ].distance ) {

				levels.splice( i, 1 );
				break; // like so?

			}

		}
```

Do you mean finding if the current level exists before enter the loop? With a `findIndex()` maybe? I think the method should look like so:
```js
removeLevel( distance ) {

	const levels = this.levels;

	for ( let i = 0; i < levels.length; i ++ ) {

		if ( levels[ i ].distance === distance ) {

			const removedElements = levels.splice( i, 1 );
			this.remove( removedElements[ 0 ].object );

			return true;

		}

	}

	return false;

}
```
Would that work for you? The change is done and tested"
29376,2024-09-09T17:40:51Z,2024-09-11T09:51:57Z,tatsmaki,1,7,4,8,2,2,0,[],186.0,0,144723.0,0,0,0,0,9210187.153308,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.27 <br> **169.65** | +29 B <br> **+8 B** |
| WebGPU | 827.95 <br> **222.1** | 827.98 <br> **222.11** | +29 B <br> **+7 B** |
| WebGPU Nodes | 827.53 <br> **222** | 827.56 <br> **222.01** | +29 B <br> **+7 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 526.16 <br> **141.85** | 526.16 <br> **141.85** | +0 B <br> **+0 B** |
| WebGPU Nodes | 482.82 <br> **131.66** | 482.82 <br> **131.66** | +0 B <br> **+0 B** |",,"Fixed #29375

**Description**

- Added delay parameter for Audio.stop() to catch up with AudioNode interface
https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop
- Updated docs
","Do you mind updating the documentation with the new parameter?

https://threejs.org/docs/index.html#api/en/audio/Audio.stop

Maybe: 

> delay (optional) - The delay, in seconds, at which the audio should stop playing. <br /> Sure Not sure what is the flow for other languages
`en` docs update https://github.com/mrdoob/three.js/pull/29376/commits/1c034e5bf937fc8f52b2a0c283aed7a2d65c5358 I wonder if it is correct to honor `offset` here. It is actually only intended for the start.

What was your motivation to add it in `stop()`? Let's ignore them for now and focus on `en`. I was confused because offset is a part of Audio object
In WebAudio it is a start method parameter, not a field of AudioNode
https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start

So if we want to follow WebAudio it makes sense to ignore offset
 offset was removed"
29025,2024-07-30T23:00:25Z,2024-07-30T23:11:57Z,sunag,4,2,2,25,4,1,0,[],141.0,0,3664540.0,0,0,0,0,9213596.758566,,0,2,1,False,"['github-actions[bot]', 'sunag', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 684 kB (169.4 kB) | 684 kB (169.4 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 460.9 kB (111.2 kB) | 460.9 kB (111.2 kB) | +0 B | Looking better!

I'm still seeing some artifacts though:

https://github.com/user-attachments/assets/9449f0a8-062f-4015-8b8c-2e727e2878b6

Notice the part that loses refraction behind the ball:

![Screenshot 2024-07-31 at 2 05 51 PM](https://github.com/user-attachments/assets/1d0a8b66-4be0-4527-8638-bc6d9f8fd2ba)
 I'm not sure if it will be easy to solve some of these details, maybe it will need a spatial and temporal approach. It is possible to see some of these flaws in some popular games too, since they use similar approaches. It could be less noticeable by reducing the strength of normal too.

We have to consider that the materials currently with `transmission` in `WebGLRenderer` should suffer from these same problems as I show in the example below.

Not that this should be good news, but maybe something our users aren't caring about as much, I think.

```js
// Using WebGLRenderer
const planeRefractor = new THREE.Mesh( planeGeo, new THREE.MeshPhysicalMaterial() );
planeRefractor.material.transparent = true;
planeRefractor.material.transmission = 1;
planeRefractor.material.roughness = .5;
```

https://github.com/user-attachments/assets/29d3edac-2d05-4146-a850-79f289b5be9a I see I see...

I guess we just need to update the example so it doesn't show the artifact.
Moving the camera a bit hides it already 😇",,"Related issue: https://github.com/mrdoob/three.js/pull/28761#issuecomment-2259154805

**Description**

`viewportSafeUV()` is a safe uv function for refraction purposes","@sunag I have to disable also antialias for the example to work as well. Can you provide me context on this? What I did is set the antiAlias to false like here and handle the pixel density manually in the ctx:
```tsx

    const context = ref.current!.getContext(""webgpu"")!;
    const canvas = context.canvas;
    canvas.width = canvas.clientWidth * PixelRatio.get();
    canvas.height = canvas.clientHeight * PixelRatio.get();
```

let me know if you have any thoughts on this."
29387,2024-09-11T03:51:44Z,2024-09-11T04:01:30Z,sunag,0,0,2,47,2,0,0,[],,0,589.0,0,0,0,0,9231269.914142,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29338

**Description**

Dancing in space.

![image](https://github.com/user-attachments/assets/db28790c-712b-4cb8-aa99-d63fe24a163b)
",
29381,2024-09-10T09:35:24Z,2024-09-10T15:51:01Z,tommie,0,0,2,429,7,0,0,[],,0,22537.0,0,0,0,0,9275102.568112,,0,2,1,False,[],,,"Related issue: #27034, #29353

**Description**

Make it easier to discover that Line2 exists, both by listing it in navigation, and linking from LineBasicMaterial.

*This contribution is funded by [Numsolar](https://numsolar.com)*
",
29192,2024-08-20T23:45:53Z,2024-09-10T18:29:48Z,cmhhelgeson,18,8,19,764,10,1,0,['WebGPU'],151.0,0,1795940.0,0,0,0,0,9265070.79077,,0,19,1,False,"['github-actions[bot]', 'cmhhelgeson', 'RenaudRohlinger', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.41 <br> **221.63** | 827.96 <br> **222.09** | +1.55 kB <br> **+466 B** |
| WebGPU Nodes | 825.99 <br> **221.54** | 827.54 <br> **222** | +1.55 kB <br> **+461 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.5 <br> **141.64** | 526.17 <br> **141.84** | +671 B <br> **+193 B** |
| WebGPU Nodes | 482.15 <br> **131.46** | 482.83 <br> **131.65** | +671 B <br> **+192 B** | I'm also not really a fan of the ScopedArrayNode name. Willing to take any suggestions on a name that would make more sense ( ComputeArrayNode, ComputeLocalArrayNode, ComputeAccess, etc) I’m not a big fan of using ""Scope"" in a node name either. How about `WorkgroupInfoNode`? It clearly indicates workgroup-level data and aligns with WebGPU and WGSL terminology. Or maybe DomainArrayNode?

For example:
```js

export const workgroupArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Workgroup', type, count ) );
export const privateArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Private', type, count ) );

```


By the way are you planning on trying your WebGPU SPH Simulation with TSL @cmhhelgeson? 😄 > I’m not a big fan of using ""Scope"" in a node name either. How about `WorkgroupInfoNode`? It clearly indicates workgroup-level data and aligns with WebGPU and WGSL terminology. Or maybe DomainArrayNode?
> 
> For example:
> 
> ```js
> export const workgroupArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Workgroup', type, count ) );
> export const privateArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Private', type, count ) );
> ```
> 
> By the way are you planning on trying your WebGPU SPH Simulation with TSL @cmhhelgeson? 😄

**Naming**: 

I'll change the name to WorkgroupInfoNode. I'll also remove privateArray for now. I don't really see it's utility when WGSLNodeBuilder already constructs all code within one function body. However, I'll leave the scope property just in case there are other potential workgroup local variable types ( var<subgroup>, etc ). Maybe down the line, we can decide whether we want to rename the class if we create a separate class for workgroup variables holding a single value.

**Future Plans**

My current plan is:

1. Get current pull requests merged in
2. Finish protoplanet port ( people seem to like ports of old samples and InstancedPointsNodeMaterial needs to be fixed)
3. Finish extant pull requests that can be finished (post-processing, arrayCamera, etc)
4. Do required reading on subgroups, physics, workgroup sync, maybe atomics for a week to get myself back up to speed.
5. Move onto new/more creative/more demanding uses of compute like SPH, Instanced Points FLIP, Spatial Hash Collisions with Workgroup or Subgroup Sync, etc. 

So TLDR: Yes 😊 Would it be complicated to have an example using these features in this PR? > Would it be complicated to have an example using these features in this PR?

Shouldn't be too complicated, I can write one using invocationLocalIndex. Moved to draft until samples are created.  @sunag The WebGPUBackend side of the Storage buffer sample is now fixed with the addition of a single workgroupBarrier() call. This call prevents data from being accessed and written to at the same time. This is separate from the addition of a new sample that will complete this pull request.

https://github.com/user-attachments/assets/1b567f93-40d6-41be-90fe-7835e4461abc Just wanted to give a brief update since this took longer than originally expected. Two things have happened:

1. Moving for a new job, so haven't had the time to give PRs proper attention.
2. Sort seems to work under certain conditions but there's some weirdness with the uniforms that I haven't been able to figure out yet. I'll add more detail below once I've figured out what the exact issue is. Sort is now working:

https://github.com/user-attachments/assets/dc1662a5-1b68-41c9-afd4-9bbcaf312c1b @cmhhelgeson Looks great! I will review and merge it soon, thanks Right now the example mixes local (workgroup) and global swaps, but it might be worth considering completing all the local sorting first before moving on to global sorting.

This could better reflect how bitonic sort is typically optimized for parallel processing:

Phase 1: Perform all local (workgroup) swaps (flip and disperse) within each group.
Phase 2: Once the local sorting is done, proceed to global sorting across workgroups to finalize the order.

This approach could make the example easier to understand by clearly separating the local and global phases, making the sorting process more educational. Just a thought! > Right now the example mixes local (workgroup) and global swaps, but it might be worth considering completing all the local sorting first before moving on to global sorting.
> 
> This could better reflect how bitonic sort is typically optimized for parallel processing:
> 
> Phase 1: Perform all local (workgroup) swaps (flip and disperse) within each group. Phase 2: Once the local sorting is done, proceed to global sorting across workgroups to finalize the order.
> 
> This approach could make the example easier to understand by clearly separating the local and global phases, making the sorting process more educational. Just a thought!

Maybe I'm misunderstanding your suggestion, but the example already does this. It will peform only local swaps until the span of a swap necessitates that the swap be performed globally. The purpose of the computeAlgo function is to ensure that the correct swap function is executed given the span length. It's not mixing global and local swaps at random. 

EDIT: For instance, in the debug panel of the reference implementation, whose code I've ported into TSL, Next Step will always be a Local step until the Next Swap Span exceeds workgroup_size * 2: https://webgpu.github.io/webgpu-samples/sample/bitonicSort Oh I see, the two panels were misleading me. Then all good! I guess having just the left example could be easier to understand? Since the local already swaps to global when needed, demonstrating both features. > Oh I see, the two panels were misleading me. Then all good! I guess having just the left example could be easier to understand? Since the local already swaps to global when needed, demonstrating both 

Maybe we could color code local amd global swaps somehow.

EDIT: There are probably further performance improvements that could come down the line with the implementation of switch statements, but for now, I'll try to determine a way to make to indicate the locality of a sort in an interesting visual manner before closing this out. @RenaudRohlinger The example has been updated to more clearly demonstrate when a local sort or when a global sort is occurring. Probably the best example of a sorting algorithm I've ever seen! 😄 Is there anything else that needs to be done here?",,"**Description**

Add ability to create workgroup and private arrays within compute shaders, which can be used to accelerate compute operations. Ideally could be used for providing pre-written compute operations that are fast and useful out of the box ( bitonic sort, prefix sum ). This would probably be less useful to the end user, though those only targeting WebGPU devices may find some benefit out of using this functionality.

If requested, I can try to provide samples for some of this functionality, like porting the existing WebGPU Bitonic sort sample or doing something with spatial hashing and prefix sums, though this will likely require the ability to query the value of local_invocation_id and workgroup_id within TSL. 

- [x] Node implementation
- [x] Storage Buffer Sample Fix
- [x] Bespoke Workgroup Array Sample","## Unused variable, import, function or class

Unused import addNodeElement.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2409) ## Unused variable, import, function or class

Unused import buffer.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2410) ## Syntax error

Error: Unexpected token

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2420) ## Unused variable, import, function or class

Unused variable setUniforms.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2423) ## Use of returnless function

the [function getDisperseIndices](1) does not return anything, yet the return value is used.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2422) ## Property access on null or undefined

The base expression of this property access is always undefined.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2424) ## Property access on null or undefined

The base expression of this property access is always undefined.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2425) ## Syntax error

Error: Unexpected token

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2427)"
29078,2024-08-07T16:04:43Z,2024-08-08T08:57:59Z,s-rigaud,1,0,1,24,1,1,1,[],2099902.0,0,2924852.0,0,0,0,0,9287030.004356,,0,1,1,False,['mrdoob'],How about `ReparentObjectCommand`?,,"Hello 🙂

I'm currently using the editor as a base source code for a personal project. I just noted that the `Editor.moveObject()` method is not used. 

The logic is already implemented in both `UIOutliner` and `MoveObjectCommand`. But I personally find the name `moveObject` (even for the command name) a bit misleading as I expect the Object3D to physically move in the scene as a first though, maybe renaming the `MoveObjectCommand` might be a good thing to do if you agree.",
27151,2023-11-08T16:29:16Z,2023-11-09T04:04:02Z,donmccurdy,2,0,1,238,2,0,0,[],1891136.0,0,26504753.0,0,0,0,0,9292856.562231,,0,1,1,False,"['donmccurdy', 'mrdoob']","Oh! Any chance we can also add the example in the screenshot? We'd need to merge https://github.com/mrdoob/three.js/pull/26642 to be able to show the array texture example -- it doesn't yet support everything I wanted (see: https://github.com/mrdoob/three.js/pull/26642#issuecomment-1708711493) but compressed array and cube textures are working. So if there's no regression in the PR, perhaps it's fine to clean that up and merge it without solving the remaining issues first.",,"Adds `examples/jsm/helpers/TextureHelper.js`, to allow easier debugging of compressed textures and data textures. Includes support for 2D, 3D, array, and cube textures.

Pulled from #26642.

**Preview:**

![screenshot](https://user-images.githubusercontent.com/1848368/266075426-b7f16ed3-c9db-48ab-adfe-907fd4b8ba92.png)
",
29380,2024-09-10T09:30:51Z,2024-09-10T09:55:43Z,mrdoob,1,0,6,71,1,0,0,[],1774.0,0,1776.0,0,0,0,0,9296138.617323,,0,6,1,False,['mrdoob'],"Oh, but I guess I haven't tested this on mobile...",,"Related issue: #29334

**Description**

Added `OrbitControls` and implemented ray-based intersection so we can influence the flock from any direction.

https://github.com/user-attachments/assets/b84d933a-e2ad-456e-a8a2-f9341648c63c

",
29382,2024-09-10T09:48:14Z,2024-09-10T09:56:56Z,Mugen87,1,0,1,611,5,0,0,[],263.0,0,522.0,0,0,0,0,9296350.795889,,0,1,1,False,['mrdoob'],SGTM 👍,,"Related issue: #29295

**Description**

This PR removes `PackedPhongMaterial` which was originally added as a part of `GeometryCompressionUtils`.

The utils module itself is retained but no material modification happens anymore so if developers decide to compress their geometry data with `GeometryCompressionUtils`, they have to implement the decompression in the shader by themselves.

As an alternative to `GeometryCompressionUtils`, developers should consider a glTF  based workflow with tools like `meshoptimizer` to optimized their assets (see https://threejs.org/examples/webgl_loader_gltf_compressed). If geometry data require a special decompression in the shader, things like ray casting or bounding volume computation won't work on the JS side (unless the engine is modified).

The decompression in the shader stage is something that we can achieve easier with TSL in the future so this is one more reasons to keep `GeometryCompressionUtils` around.",
29377,2024-09-10T00:07:19Z,2024-09-10T00:15:23Z,sunag,0,0,1,2,1,0,0,[],,0,10289.0,0,0,0,0,9321439.410111,,0,1,1,False,[],,,"**Description**

It is now possible to visualize the post-processing being applied underwater and above in the same frame.

![image](https://github.com/user-attachments/assets/fe060aa2-1c08-42d3-ae20-82ddb86827a8)

",
29366,2024-09-09T04:41:34Z,2024-09-10T00:23:35Z,mrdoob,1,1,4,40,2,1,0,[],33981.0,0,70921.0,0,0,0,0,9330752.543319,,0,4,1,False,['sunag'],"I think some redundancies are positive. In fact, we have redundancy in practically every type of language, such as in JS when creating conditionals, variables, functions, etc.

In my experience, chainable tends to be more readable for large lines of code and more efficient for drafting since it doesn't need to import new methods. I think both have their qualities and can be used by different user profiles. For example, I would use `positionLocal.y.oneMinus()`.

This will certainly get better when we have [Operator Overloading](https://docs.google.com/document/d/1wY5ezc0wTJ81gRGAPLUPUNLB73OXCFcxWGuKNbs02TU/edit)
",,"Related issue: #29334

**Description**

Instead of `MeshStandardMaterial` and `HemisphereLight` we can do the sky atmosphere with a simpler colors gradient with TSL.

@sunag My first real TSL experience 😇

Not sure how I feel about these chainable methods...

This ends up reading better to me:

```js
add( 1.5, positionLocal.y )
```

Compared to this:

```js
positionLocal.y.add( 1.5 )
```

Specially with `sub()`...

```js
positionLocal.y.sub( 1.0 )
```

If I write that, but I decide I want to do `1.0 - y` I feel limited...

This seems simpler and more flexible:

```js
sub( 1.0, positionLocal.y )
```

**Edit:**

Hmm... But then by reading the code in #29354 ...

```js
const pulse = pcurve(
	sin( hash( instanceIndex ).mul( PI2 ).add( timerGlobal( 0.5 ).mul( PI2 ) ) ).mul( 0.5 ).add( 0.5 ),
	0.25,
	0.25
).mul( 10.0 ).add( 1.0 );
```

I can see it ends up more compact.
But we end up with a language that has two reading directions...🤔","## Unused variable, import, function or class

Unused import varyingProperty.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2450)"
29323,2024-09-04T15:04:59Z,2024-09-04T21:33:15Z,aardgoose,4,0,1,23,5,1,1,[],204.0,0,417748.0,0,0,0,0,9378521.69486,,0,1,1,False,"['github-actions[bot]', 'aardgoose', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.2 kB <br> **169.6 kB** | 685.2 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 823 kB <br> **220.9 kB** | 823.1 kB <br> **220.9 kB** | +80 B <br> **+12 B** |
| WebGPU Nodes | 822.6 kB <br> **220.8 kB** | 822.7 kB <br> **220.8 kB** | +499 B <br> **+106 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.5 kB** | 462 kB <br> **111.5 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.8 kB** | 522.2 kB <br> **140.8 kB** | +80 B <br> **+14 B** |
| WebGPU Nodes | 478.8 kB <br> **130.6 kB** | 478.9 kB <br> **130.6 kB** | -43.26 kB <br> **+13 B** | This appears to work with a hacked LightProbeGenerator with the WebGL fallback but the differences in texture coordinates and appear to be causing issues for the WebGPU path. But that is a separate issue right? The changes to `readRenderTargetPixelsAsync()` look correct, imo. Yes, it works, how the data returned is handled just needs addressing.",,"Related issue: [comment](https://github.com/mrdoob/three.js/pull/29320#discussion_r1743736989)

Add support reading cube textures to `readRenderTargetPixelsAsync()`.

Not tested with cube textures.
",
29256,2024-08-29T08:32:22Z,2024-09-02T13:02:15Z,aardgoose,1,0,3,40,4,0,0,['WebGPU'],169.0,0,959684.0,0,0,0,0,9378543.29455,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.7 kB** | 822 kB <br> **220.8 kB** | +375 B <br> **+118 B** |
| WebGPU Nodes | 821.2 kB <br> **220.6 kB** | 821.6 kB <br> **220.7 kB** | +794 B <br> **+210 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.7 kB** | 522.5 kB <br> **140.8 kB** | +375 B <br> **+124 B** |
| WebGPU Nodes | 478.7 kB <br> **130.5 kB** | 479.1 kB <br> **130.6 kB** | -42.98 kB <br> **+121 B** |",,"As title.
",
29277,2024-08-30T18:51:11Z,2024-08-30T21:20:58Z,aardgoose,1,0,2,35,4,0,0,[],209.0,0,836102.0,0,0,0,0,9378596.526038,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 818.6 kB <br> **221.3 kB** | 818.7 kB <br> **221.3 kB** | +124 B <br> **+40 B** |
| WebGPU Nodes | 818.3 kB <br> **221.2 kB** | 818.3 kB <br> **221.2 kB** | +436 B <br> **+106 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 564.8 kB <br> **153.4 kB** | 564.8 kB <br> **153.4 kB** | +17 B <br> **+6 B** |
| WebGPU Nodes | 524.2 kB <br> **143.8 kB** | 524.2 kB <br> **143.8 kB** | -40.64 kB <br> **+10 B** |",,"Related issue: #28719

Add BundleGroup object as proposed https://github.com/mrdoob/three.js/pull/28719#issuecomment-2187368338

Also renamed object -> bundleGroup in Renderer._renderBundle to improve readability.",
29298,2024-09-02T12:55:56Z,2024-09-02T13:07:02Z,aardgoose,1,0,1,35,3,1,1,[],191.0,0,598213.0,0,0,0,0,9378601.551816,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.6 kB <br> **169.8 kB** | 685.1 kB <br> **169.6 kB** | -531 B <br> **-200 B** |
| WebGPU | 821.7 kB <br> **220.7 kB** | 821.3 kB <br> **220.4 kB** | -408 B <br> **-267 B** |
| WebGPU Nodes | 821.3 kB <br> **220.6 kB** | 820.9 kB <br> **220.3 kB** | +11 B <br> **-173 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.2 kB <br> **111.5 kB** | 461.9 kB <br> **111.4 kB** | -332 B <br> **-117 B** |
| WebGPU | 522.1 kB <br> **140.6 kB** | 521.7 kB <br> **140.6 kB** | -408 B <br> **-85 B** |
| WebGPU Nodes | 478.8 kB <br> **130.5 kB** | 478.4 kB <br> **130.4 kB** | -43.76 kB <br> **-97 B** |",,"Related issue: #27103 

Remove deprecated methods and support.
",
28873,2024-07-15T08:19:11Z,2024-07-15T09:10:12Z,aardgoose,2,0,2,4,1,1,1,[],136.0,0,4848326.0,0,0,0,0,9378694.257333,,0,2,0,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 683.5 kB (169.2 kB) | 683.5 kB (169.2 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 460.7 kB (111.1 kB) | 460.7 kB (111.1 kB) | +0 B | As suggested in https://github.com/mrdoob/three.js/issues/28868#issuecomment-2228131759 let's revert this change for now.",,"Related issue: #28868


as title.
",
29371,2024-09-09T09:16:17Z,2024-09-09T09:33:01Z,aardgoose,1,0,1,6,1,1,1,[],175.0,0,6472.0,0,0,0,0,9378722.410512,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.38 <br> **221.62** | 826.41 <br> **221.63** | +22 B <br> **+5 B** |
| WebGPU Nodes | 825.97 <br> **221.53** | 825.99 <br> **221.54** | +22 B <br> **+4 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.48 <br> **141.63** | 525.5 <br> **141.64** | +22 B <br> **+13 B** |
| WebGPU Nodes | 482.13 <br> **131.44** | 482.15 <br> **131.46** | +22 B <br> **+12 B** |",,"As title - matches WebGLRenderer behaviour
",
29358,2024-09-08T14:57:22Z,2024-09-08T21:56:06Z,aardgoose,1,2,2,163,3,2,0,[],204.0,0,72404.0,0,0,0,0,9378726.604535,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.2 <br> **221.55** | 826.35 <br> **221.59** | +147 B <br> **+41 B** |
| WebGPU Nodes | 825.78 <br> **221.46** | 825.93 <br> **221.5** | +147 B <br> **+41 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.3 <br> **141.56** | 525.44 <br> **141.6** | +147 B <br> **+49 B** |
| WebGPU Nodes | 481.95 <br> **131.37** | 482.1 <br> **131.42** | +147 B <br> **+49 B** |",,"Add a new method `renderObject.getDrawParameters()` to provide draw call parameters to the backend renderer.

Most of the logic is identical, apart from multidraw which has been left as-is. The separation of this from the current draw path will allow indirect drawing without duplicating this code again.

","## Expression has no effect

This expression has no effect.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2449) fixed"
29079,2024-08-07T17:44:28Z,2024-08-08T09:25:25Z,Mugen87,4,3,6,479,4,2,0,[],370217.0,0,2817474.0,0,0,0,0,9388431.451257,,0,6,1,False,"['mrdoob', 'puxiao', 'Mugen87']","Do you think it is appropriate to add saveState():xxx, setState(xxx), and reset() to Controls? Not all controls support these methods so I would revisit this after all classes has been updated. 

If we add these methods to the `Controls` interface, we should make sure all derived classes implement them. They are useful in any event. I think we should move `Controls.js` to `src`. Maybe `src/extras`? Sounds good!",,"Related issue: #29072, #20575

**Description**

This PR refactors the API of `DragControls`.

- `THREE.Controls` is introduced which defines a basic control interface. `DragControls` is now derived from this class.
- Side effects in the ctor are moved into a `connect()` method.
- `domElement` is now optional. If required, an instance of `DragControls` can now be created without a DOM element. When the element is set at a later point, a manual call of `connect()` configures the event listeners.
","@Mugen87 What do you think about being able to pass the dom element here?

That way the code could look like this:

```js
const controls = new OrbitControls( camera );
controls.connect( renderer.domElement );
```

I guess we'll need to do a bit of management though:

```js
connect( element ) {

    if ( this.domElement !== element ) {

        this.disconnect();

    }

    this.domElement = element;

}
``` @Mugen87 

`constructor( object, domElement = null )` maybe?

Right now it's `undefined` by default but subclasses set it to `null`...  As a convenient feature, I guess it's fine.

That said, `domElement` is public so devs can basically achieve the same without further changes to the control classes. However, the additional management code in `connect()` could prevent mistakes when devs want to exchange the DOM element (not sure how common this use case is though).

"
29348,2024-09-07T09:28:00Z,2024-09-09T09:18:53Z,Mugen87,0,5,3,64,2,1,0,[],,0,172253.0,0,0,0,0,9385040.464239,,0,3,1,False,[],,,"Related issue: #29295

**Description**


This PR adds a WebGPU version of. `TextureUtils`. 
",I think it's better for consistency if the color space property of the original texture is retained. The new `decompress()` function is now async since an internal `WebGPURenderer` has to call `init()` before performing the decompression. I'm not sure why but I had to retain the `flipY` flag otherwise the decompressed version of the texture would be flipped when using it for rendering. Converting to a draft PR. This bit needs more investigation... Fixed this by applying `flipY()` to the uv coordinates.
29369,2024-09-09T08:08:23Z,2024-09-09T08:16:34Z,Mugen87,1,0,1,2,1,0,0,[],196.0,0,491.0,0,0,0,0,9388780.415661,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.38 <br> **221.62** | 826.38 <br> **221.62** | +5 B <br> **+1 B** |
| WebGPU Nodes | 825.96 <br> **221.53** | 825.97 <br> **221.53** | +5 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.47 <br> **141.63** | 525.48 <br> **141.63** | +5 B <br> **+1 B** |
| WebGPU Nodes | 482.13 <br> **131.44** | 482.13 <br> **131.44** | +5 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/issues/28950#issuecomment-2336818578

**Description**

Ensure a correct `parent` reference in `CacheNode.build()`. ",
29368,2024-09-09T08:00:42Z,2024-09-09T08:05:44Z,Mugen87,1,0,1,2,1,0,0,[],185.0,0,302.0,0,0,0,0,9389431.256067,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +5 B <br> **+3 B** |
| WebGPU | 826.37 <br> **221.62** | 826.38 <br> **221.62** | +5 B <br> **+1 B** |
| WebGPU Nodes | 825.96 <br> **221.53** | 825.96 <br> **221.53** | +5 B <br> **+2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.47 <br> **141.63** | 525.47 <br> **141.63** | +0 B <br> **+0 B** |
| WebGPU Nodes | 482.13 <br> **131.44** | 482.13 <br> **131.44** | +0 B <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29079#discussion_r1749504152

**Description**

This makes the default value of `Controls` more consistent with the default value of sub classes.",
29362,2024-09-08T17:27:05Z,2024-09-09T07:58:11Z,renovate[bot],2,0,1,44,2,0,0,[],221.0,0,52359.0,0,0,0,0,9389791.289227,,0,1,0,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.2 <br> **221.55** | 826.2 <br> **221.55** | +0 B <br> **+0 B** |
| WebGPU Nodes | 825.78 <br> **221.46** | 825.78 <br> **221.46** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.3 <br> **141.56** | 525.3 <br> **141.56** | +0 B <br> **+0 B** |
| WebGPU Nodes | 481.95 <br> **131.37** | 481.95 <br> **131.37** | +0 B <br> **+0 B** | Tested the change on my computer and the new major version of `concurrently` seems to work without applying migration tasks.",,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [concurrently](https://redirect.github.com/open-cli-tools/concurrently) | [`^8.0.1` -> `^9.0.0`](https://renovatebot.com/diffs/npm/concurrently/8.2.2/9.0.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/concurrently/9.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/concurrently/9.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/concurrently/8.2.2/9.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/concurrently/8.2.2/9.0.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>open-cli-tools/concurrently (concurrently)</summary>

### [`v9.0.0`](https://redirect.github.com/open-cli-tools/concurrently/compare/v8.2.2...v9.0.0)

[Compare Source](https://redirect.github.com/open-cli-tools/concurrently/compare/v8.2.2...v9.0.0)

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC41OS4yIiwidXBkYXRlZEluVmVyIjoiMzguNTkuMiIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29354,2024-09-08T09:10:59Z,2024-09-08T21:54:22Z,ULuIQ12,1,2,2,457,4,1,0,[],74395.0,0,77601.0,0,0,0,0,9394316.554352,,0,2,1,False,['mrdoob'],Thanks!,,"Adds WebGPU/TSL VFX Linked particles example.

I was asked by mrdoob if I was up for porting one of my experiment with TSL to an actual three.js example.
Original project : 
https://github.com/ULuIQ12/webgpu-tsl-linkedparticles
Demo : https://ulucode.com/random/webgputests/linked/

I tried to trim it down to focus on the TSL parts, which include various things : 
- Particles
- Dynamic geometry in compute with storage buffer attributes
- Usage of various NodeMaterials

I tried to follow this request : https://github.com/mrdoob/three.js/pull/29020 , and I'm aware of the associated discussion.

Issue : 
The webgl fallback doesn't seem to work, and I'm not sure why (no errors), so for now it displays the standard error if webgpu is not detected.

","## Unused variable, import, function or class

Unused imports EPSILON, abs, acos, clamp, dot, floor, fract, length, mod, sign, smoothstep, step, vec4.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2447) ## Unused variable, import, function or class

Unused imports mul, oneMinus, positionWorld, sub.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2448)"
29363,2024-09-08T19:19:11Z,2024-09-08T22:14:08Z,WestLangley,0,0,4,191,4,0,0,[],,0,11097.0,0,0,0,0,9424329.255804,,0,4,1,False,[],,,"Custom tone mapping is implemented via a different workflow with WebGPURenderer, so I removed custom tone mapping from this example.",
29147,2024-08-15T19:01:34Z,2024-09-08T21:52:46Z,cmhhelgeson,5,16,21,507,4,3,0,[],28251.0,0,2085927.0,0,0,0,0,9424156.788569,,0,21,1,False,"['github-actions[bot]', 'cmhhelgeson', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | Kind of stumped by the WebGL Backend behavior here:

https://github.com/user-attachments/assets/afbc0a43-c864-4e08-8e14-d0bd40e9c115 Think I understand the issue with the WebGL backend, it seems like the conversion to GLSL does not yet account for accessing the same buffer multiple times. For instance, this TSL code

```typescript
const { viscosity, mousePos, mouseSize } = effectController;

const height = heightStorage.element( instanceIndex );
const prevHeight = prevHeightStorage.element( instanceIndex );

const { north, south, east, west } = getNeighborValuesTSL( instanceIndex, heightStorage );

const neighborHeight = north.add( south ).add( east ).add( west );
neighborHeight.mulAssign( 0.5 );
neighborHeight.subAssign( prevHeight );

const newHeight = neighborHeight.mul( viscosity );
```

Generates this GLSL output:

```glsl
float nodeVar0;
float nodeVar1;

// transforms
nodeVarying0 = nodeAttribute0;
nodeVarying1 = nodeAttribute1;
	
// flow code

nodeVar0 = ( ( ( nodeVarying0 + nodeVarying0 ) + nodeVarying0 ) + nodeVarying0 );
nodeVar0 = ( nodeVar0 * 0.5 );
nodeVar0 = ( nodeVar0 - nodeVarying1 );
nodeVar1 = ( nodeVar0 * c_viscosity );

```
The first line of code corresponds with the getNeighborValuesTSL call but only the same height value it already read in. Presumably there's a workaround with storageObjects....

Equivalent WGSL output for comparison
```wgsl

// system
instanceIndex = id.x + id.y * numWorkgroups.x * u32(64) + id.z * numWorkgroups.x * numWorkgroups.y * u32(64);

// vars
	
var nodeVar0 : u32;
var nodeVar1 : u32;
var nodeVar2 : f32;
var nodeVar3 : f32;


// flow code

nodeVar0 = ( instanceIndex / 128u );
nodeVar1 = ( instanceIndex % 128u );
nodeVar2 = ( ( ( NodeBuffer_476.Height[ ( ( min( ( nodeVar0 + u32( 1.0 ) ), ( 128u - u32( 1.0 ) ) ) * 128u ) + nodeVar1 ) ] + 
     NodeBuffer_476.Height[ ( ( max( u32( 0.0 ), ( nodeVar0 - u32( 1.0 ) ) ) * 128u ) + nodeVar1 ) ] ) + NodeBuffer_476.Height[ ( ( 
     nodeVar0 * 128u ) + min( ( nodeVar1 + u32( 1.0 ) ), ( 128u - u32( 1.0 ) ) ) ) ] ) + NodeBuffer_476.Height[ ( ( nodeVar0 * 128u ) 
     + max( u32( 0.0 ), ( nodeVar1 - u32( 1.0 ) ) ) ) ] );
nodeVar2 = ( nodeVar2 * 0.5 );
nodeVar2 = ( nodeVar2 - NodeBuffer_477.PrevHeight[ instanceIndex ] );
nodeVar3 = ( nodeVar2 * object.viscosity );
```



 @RenaudRohlinger @sunag  ~With storage objects, the GLSL Node Builder accesses the PBO, but not in the right place~ EDIT: Converting the height and prevHeight values to vars puts inital texture accesses in the proper place. However, the NodeBuilder is still seemingly unable of accessing multiple texture values, as it needs to do when it creates nodeVar6 ( aka neighborHeight in our TSL ). I'll push the current version of the code that generates this TSL when forceWebGL is enabled. 

```glsl
layout( std140 ) uniform compute_object {
	float c_viscosity;
	vec2 c_mousePos;
	float c_mouseSize;
};
uniform highp sampler2D Height;
uniform highp sampler2D PrevHeight;

// varyings
out float nodeVarying0;
out float nodeVarying1;

// attributes
layout( location = 0 ) in float nodeAttribute2;
layout( location = 1 ) in float nodeAttribute6;

void main() {
        // variable declarations omitted

	// transforms
	nodeVarying0 = nodeAttribute2;
	nodeVarying1 = nodeAttribute6;
	
	// flow

	nodeVar1Size = uint( textureSize( Height, 0 ).x );
	nodeVar1 = vec4(texelFetch( Height, ivec2(uint( gl_InstanceID ) % nodeVar1Size, uint( gl_InstanceID ) / nodeVar1Size), 0 )).x;
	nodeVar0 = nodeVar1;
	nodeVar4Size = uint( textureSize( PrevHeight, 0 ).x );
	nodeVar4 = vec4(texelFetch( PrevHeight, ivec2(uint( gl_InstanceID ) % nodeVar4Size, uint( gl_InstanceID ) / nodeVar4Size), 0 )).x;
	nodeVar3 = nodeVar4;
        // Worrisome neighborHeight code
	nodeVar6 = ( ( ( nodeVarying0 + nodeVarying0 ) + nodeVarying0 ) + nodeVarying0 );
	nodeVar6 = ( nodeVar6 * 0.5 );
```",,"Related issue: #XXXX

**Description**

Port of the WebGL GPGPU Water Sample. 

EDIT 1: Sphere dynamics have been modified to leverage to used the positionNode shader over the CPU. 

EDIT 2: Original WebGL sample slightly adjusted to demonstrate WebGL vs. WebGPU performance differential.

https://github.com/user-attachments/assets/d567f94b-52b0-40a2-add8-1f771f0a1b0f","## Unused variable, import, function or class

Unused variable BOUNDS_HALF.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2393) ## Unused variable, import, function or class

Unused variable smoothShader.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2394) ## Unused variable, import, function or class

Unused variable waterNormal.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2395) ## Unused variable, import, function or class

Unused variable spheres.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2396) ## Unused variable, import, function or class

Unused variable prevHeightRead.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2397) ## Unused variable, import, function or class

Unused variable waterNormal.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2398) ## Unused variable, import, function or class

Unused variable waterNormalRead.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2399) ## Unused variable, import, function or class

Unused variable x.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2400) ## Unused variable, import, function or class

Unused variable y.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2401) ## Unused variable, import, function or class

Unused variable normalX.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2402) ## Unused variable, import, function or class

Unused variable normalY.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2403) ## Unused variable, import, function or class

Unused import storage.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2406) `StorageInstancedBufferAttribute` TSL now have a function for this: `transformNormalToView( vec3( normalX, negate( normalY ), 1.0 ) )` ## Syntax error

Error: Unexpected token

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2435) This seems to break the lighting when I test it, but I'll check back in on it tomorrow ( I am in PST ). Aren't modelNormalMatrix and modelNormalViewMatrix distinct? And if they aren't, should the name of the node be updated to reflect that?"
29364,2024-09-08T20:31:54Z,2024-09-08T22:02:11Z,Spiri0,1,0,2,11,1,0,0,[],190.0,0,5418.0,0,0,0,0,9425646.691573,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.2 <br> **221.55** | 826.23 <br> **221.58** | +28 B <br> **+25 B** |
| WebGPU Nodes | 825.78 <br> **221.46** | 825.81 <br> **221.49** | +28 B <br> **+25 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.3 <br> **141.56** | 525.32 <br> **141.58** | +28 B <br> **+24 B** |
| WebGPU Nodes | 481.95 <br> **131.37** | 481.98 <br> **131.39** | +28 B <br> **+25 B** |",,"So far you can only use the copyTextureToTexture function to copy from one simple texture to another simple texture. But it is also desirable to be able to copy from a simple texture to an array texture and vice versa. That's why I expanded the function a little bit to make this possible. I tested that straight away too. In my app I had no impact on the existing code, but I can now copy textures into array textures. The 1 in line 1450 means that only one layer should be copied.
",
29360,2024-09-08T16:15:00Z,2024-09-08T17:26:21Z,renovate[bot],0,0,1,4,2,0,0,[],,0,4327.0,0,0,0,0,9442152.039718,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [actions/upload-artifact](https://redirect.github.com/actions/upload-artifact) | action | digest | `834a144` -> `5076954` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC41OS4yIiwidXBkYXRlZEluVmVyIjoiMzguNTkuMiIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29361,2024-09-08T16:15:15Z,2024-09-08T17:26:30Z,renovate[bot],0,0,1,707,1,0,0,[],,0,4305.0,0,0,0,0,9442159.653182,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [eslint-plugin-import](https://redirect.github.com/import-js/eslint-plugin-import) | [`2.29.1` -> `2.30.0`](https://renovatebot.com/diffs/npm/eslint-plugin-import/2.29.1/2.30.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/eslint-plugin-import/2.30.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/eslint-plugin-import/2.30.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/eslint-plugin-import/2.29.1/2.30.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/eslint-plugin-import/2.29.1/2.30.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>import-js/eslint-plugin-import (eslint-plugin-import)</summary>

### [`v2.30.0`](https://redirect.github.com/import-js/eslint-plugin-import/blob/HEAD/CHANGELOG.md#2300---2024-09-02)

[Compare Source](https://redirect.github.com/import-js/eslint-plugin-import/compare/v2.29.1...v2.30.0)

##### Added

-   \[`dynamic-import-chunkname`]: add `allowEmpty` option to allow empty leading comments (\[[#&#8203;2942](https://redirect.github.com/import-js/eslint-plugin-import/issues/2942)], thanks \[[@&#8203;JiangWeixian](https://redirect.github.com/JiangWeixian)])
-   \[`dynamic-import-chunkname`]: Allow empty chunk name when webpackMode: 'eager' is set; add suggestions to remove name in eager mode (\[[#&#8203;3004](https://redirect.github.com/import-js/eslint-plugin-import/issues/3004)], thanks \[[@&#8203;amsardesai](https://redirect.github.com/amsardesai)])
-   \[`no-unused-modules`]: Add `ignoreUnusedTypeExports` option (\[[#&#8203;3011](https://redirect.github.com/import-js/eslint-plugin-import/issues/3011)], thanks \[[@&#8203;silverwind](https://redirect.github.com/silverwind)])
-   add support for Flat Config (\[[#&#8203;3018](https://redirect.github.com/import-js/eslint-plugin-import/issues/3018)], thanks \[[@&#8203;michaelfaith](https://redirect.github.com/michaelfaith)])

##### Fixed

-   \[`no-extraneous-dependencies`]: allow wrong path (\[[#&#8203;3012](https://redirect.github.com/import-js/eslint-plugin-import/issues/3012)], thanks \[[@&#8203;chabb](https://redirect.github.com/chabb)])
-   \[`no-cycle`]: use scc algorithm to optimize (\[[#&#8203;2998](https://redirect.github.com/import-js/eslint-plugin-import/issues/2998)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[`no-duplicates`]: Removing duplicates breaks in TypeScript (\[[#&#8203;3033](https://redirect.github.com/import-js/eslint-plugin-import/issues/3033)], thanks \[[@&#8203;yesl-kim](https://redirect.github.com/yesl-kim)])
-   \[`newline-after-import`]: fix considerComments option when require (\[[#&#8203;2952](https://redirect.github.com/import-js/eslint-plugin-import/issues/2952)], thanks \[[@&#8203;developer-bandi](https://redirect.github.com/developer-bandi)])
-   \[`order`]: do not compare first path segment for relative paths (\[[#&#8203;2682](https://redirect.github.com/import-js/eslint-plugin-import/issues/2682)]) (\[[#&#8203;2885](https://redirect.github.com/import-js/eslint-plugin-import/issues/2885)], thanks \[[@&#8203;mihkeleidast](https://redirect.github.com/mihkeleidast)])

##### Changed

-   \[Docs] `no-extraneous-dependencies`: Make glob pattern description more explicit (\[[#&#8203;2944](https://redirect.github.com/import-js/eslint-plugin-import/issues/2944)], thanks \[[@&#8203;mulztob](https://redirect.github.com/mulztob)])
-   \[`no-unused-modules`]: add console message to help debug \[[#&#8203;2866](https://redirect.github.com/import-js/eslint-plugin-import/issues/2866)]
-   \[Refactor] `ExportMap`: make procedures static instead of monkeypatching exportmap (\[[#&#8203;2982](https://redirect.github.com/import-js/eslint-plugin-import/issues/2982)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[Refactor] `ExportMap`: separate ExportMap instance from its builder logic (\[[#&#8203;2985](https://redirect.github.com/import-js/eslint-plugin-import/issues/2985)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[Docs] `order`: Add a quick note on how unbound imports and --fix (\[[#&#8203;2640](https://redirect.github.com/import-js/eslint-plugin-import/issues/2640)], thanks \[[@&#8203;minervabot](https://redirect.github.com/minervabot)])
-   \[Tests] appveyor -> GHA (run tests on Windows in both pwsh and WSL + Ubuntu) (\[[#&#8203;2987](https://redirect.github.com/import-js/eslint-plugin-import/issues/2987)], thanks \[[@&#8203;joeyguerra](https://redirect.github.com/joeyguerra)])
-   \[actions] migrate OSX tests to GHA (\[[ljharb#37](https://redirect.github.com/ljharb/eslint-plugin-import/issues/37)], thanks \[[@&#8203;aks-](https://redirect.github.com/aks-)])
-   \[Refactor] `exportMapBuilder`: avoid hoisting (\[[#&#8203;2989](https://redirect.github.com/import-js/eslint-plugin-import/issues/2989)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[Refactor] `ExportMap`: extract ""builder"" logic to separate files (\[[#&#8203;2991](https://redirect.github.com/import-js/eslint-plugin-import/issues/2991)], thanks \[[@&#8203;soryy708](https://redirect.github.com/soryy708)])
-   \[Docs] \[`order`]: update the description of the `pathGroupsExcludedImportTypes` option (\[[#&#8203;3036](https://redirect.github.com/import-js/eslint-plugin-import/issues/3036)], thanks \[[@&#8203;liby](https://redirect.github.com/liby)])
-   \[readme] Clarify how to install the plugin (\[[#&#8203;2993](https://redirect.github.com/import-js/eslint-plugin-import/issues/2993)], thanks \[[@&#8203;jwbth](https://redirect.github.com/jwbth)])

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR is behind base branch, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC41OS4yIiwidXBkYXRlZEluVmVyIjoiMzguNTkuMiIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29355,2024-09-08T09:59:20Z,2024-09-08T15:28:20Z,linbingquan,1,0,1,6,1,0,0,[],194.0,0,19744.0,0,0,0,0,9449276.60904,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.24 <br> **169.64** | 685.24 <br> **169.64** | +0 B <br> **+0 B** |
| WebGPU | 826.2 <br> **221.55** | 826.2 <br> **221.55** | +0 B <br> **+0 B** |
| WebGPU Nodes | 825.78 <br> **221.46** | 825.78 <br> **221.46** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.02 <br> **111.48** | 462.02 <br> **111.48** | +0 B <br> **+0 B** |
| WebGPU | 525.3 <br> **141.56** | 525.3 <br> **141.56** | +0 B <br> **+0 B** |
| WebGPU Nodes | 481.95 <br> **131.37** | 481.95 <br> **131.37** | +0 B <br> **+0 B** |",,"Related issue: #XXXX

**Description**

As the title say.

![图片](https://github.com/user-attachments/assets/4069c47a-0bce-4bd1-a3e3-827e8d86791b)

",
29347,2024-09-06T21:54:18Z,2024-09-07T15:45:26Z,sunag,3,9,14,494,38,2,0,[],191.0,0,65015.0,0,0,0,0,9533908.290741,,0,14,1,False,"['github-actions[bot]', 'sunag', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.18 <br> **169.62** | 685.18 <br> **169.62** | +0 B <br> **+0 B** |
| WebGPU | 825.96 <br> **221.44** | 826.2 <br> **221.55** | +241 B <br> **+113 B** |
| WebGPU Nodes | 825.54 <br> **221.34** | 825.78 <br> **221.46** | +241 B <br> **+118 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.96 <br> **111.46** | 461.96 <br> **111.46** | +0 B <br> **+0 B** |
| WebGPU | 525.27 <br> **141.52** | 525.3 <br> **141.56** | +25 B <br> **+36 B** |
| WebGPU Nodes | 481.93 <br> **131.34** | 481.95 <br> **131.37** | +25 B <br> **+28 B** | >viewport | physical pixel units - viewport rectangle x, y, width, height
>viewportSize | physical pixel units - viewport width, height resolution.

`renderer.viewport` is in _logical_ pixel units. The viewport coordinates define the affine transformation from NDC coordinates to window coordinates.

I think it would be odd if `viewport` was in physical units and scaled by pixel ratio. A viewport knows nothing about pixel ratio. The `viewport` must represent the entire hierarchy that follows. It would be strange and confusing for the user if `viewport` was logical pixel units and the rest were not. Just as `renderer.getSize()` is logical pixel units and `viewportSize` and `screenSize` are physical pixel units, for shaders we must have physical pixel units as default.",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29162

**Description**

`viewportSize`, `viewportCoordinate`, `viewportUV`, followed the logic related to viewport, while `screenUV`, `screenSize` and `screenCoordinate` followed the logic used previously and `screen*` considering the framebuffer.

## Screen
| Node | Description |
| ------------- | ------------- |
| `screenUV` | unitless in [ 0, 1 ] - normalized screen coordinates |
| `screenSize` | physical pixel units - framebuffer width,height resolution.  |
| `screenCoordinate` | physical pixel units - framebuffer current x,y pixel position.  |

## Viewport
| Node | Description |
| ------------- | ------------- |
| `viewportUV` | unitless in [ 0, 1 ] - normalized viewport coordinates |
| `viewport` | physical pixel units - viewport rectangle x,y,width,height  |
| `viewportSize` | physical pixel units - viewport width,height resolution.  |
| `viewportCoordinate` | physical pixel units - viewport current x,y pixel position.  |


","Should be `viewportUV.x`. `resolution` is the wrong term. `size` would be correct. Resolution refers to pixel _density_, and has units of pixels per unit distance, or pixels per unit area. The term we should use, instead, is _size_, which has units of pixels. I tried it with a smaller viewport, and in works in the webgpu_mrt.html example. Why? That is not the intention of the example, it would be to consider the entire screen not an area of ​​the viewport. Plus, we accustom users to using `screen UV` which should perform better. Set a viewport to sub-area of the full screen and try it. See https://github.com/mrdoob/three.js/issues/29162#issue-2471781557. I'd remove references to ""resolution"" everywhere. It is not the correct term. `size` would be OK. > Set a viewport to sub-area of the full screen and try it. See https://github.com/mrdoob/three.js/issues/29162#issue-2471781557.

We can create an example for this soon, I would like to not use `viewportUV` when it is not necessary. Ok, just an exception for ShaderToy where it is a keyword."
29233,2024-08-26T14:18:31Z,2024-08-30T11:33:46Z,satelllte,3,0,3,4,2,0,0,[],145.0,0,1031917.0,0,0,0,0,9544753.466011,,0,3,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | -38 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | The newer `Timer` class in `addons/misc/` uses `Date.now()` as a fallback as well.

https://github.com/mrdoob/three.js/blob/d7f2d9ac3af4228f0940d3b2410b1ad6f0dda529/examples/jsm/misc/Timer.js#L118

While you are at it, please update this module, too.

In any event, give us some time to think about unexpected side effects with this removal. Let's this a try!",,"Related issue: #8112

**Description**

It's probably a time to drop `Date.now` fallback in `Clock` & `Timer` classes, because the support for high resolution timestamp has already been good for years.

Browser: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
Node: https://nodejs.org/docs/latest-v8.x/api/perf_hooks.html#perf_hooks_performance_now (supported since v8.5.0)
",
29338,2024-09-06T05:16:07Z,2024-09-06T20:47:15Z,sunag,0,5,12,343,4,1,0,[],,0,55872.0,0,0,0,0,9602943.584856,,0,12,1,False,[],,,"**Description**

Following some requests from the forum, I think I'll need a few more revisions, but it's already functional.

SkeletonUtils.retarget() -> changes
- [x] Rename `preservePositions` -> `preserveBonePositions`
- [x] Rename `preserveMatrix` -> `preserveBoneMatrix`
- [x] Removed global `offsets`  use `localOffsets`
- [x] Added `scale` option

![image](https://github.com/user-attachments/assets/1719266c-8427-4878-87ae-2382278aa71b)
","## Useless conditional

This use of variable 'boneTo' always evaluates to true.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2436) ## Unused variable, import, function or class

Unused import RoomEnvironment.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2437) ## Unused variable, import, function or class

Unused import DRACOLoader.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2438) ## Unused variable, import, function or class

Unused variable sourceSkin.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2439) ## Unused variable, import, function or class

Unused imports gaussianBlur, positionWorld.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2440)"
29339,2024-09-06T07:23:40Z,2024-09-06T08:28:36Z,aardgoose,1,0,1,4,1,1,1,[],190.0,0,12003.0,0,0,0,0,9639160.222002,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.18 <br> **169.62** | 685.18 <br> **169.62** | +0 B <br> **+0 B** |
| WebGPU | 825.96 <br> **221.44** | 825.96 <br> **221.44** | +0 B <br> **+0 B** |
| WebGPU Nodes | 825.54 <br> **221.34** | 825.54 <br> **221.34** | +0 B <br> **+0 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.96 <br> **111.46** | 461.96 <br> **111.46** | +0 B <br> **+0 B** |
| WebGPU | 525.27 <br> **141.52** | 525.27 <br> **141.52** | +0 B <br> **+0 B** |
| WebGPU Nodes | 481.93 <br> **131.34** | 481.93 <br> **131.34** | +0 B <br> **+0 B** |",,"Related issue: #29335

This method is noticeably slower than the WebGL-fallback equivalent.  Flushing after the `gl.fenceSync` resolves this.

",
29155,2024-08-16T19:45:34Z,2024-08-17T04:02:50Z,cmhhelgeson,0,0,1,38,1,0,0,[],,0,1759242.0,0,0,0,0,9661807.247515,,0,1,1,False,[],,,"**Description**

Add tags for the WebGPU samples. Four general changes made:

1. Ports of old samples have the same tags as the new ones when applicable.
2. Compute samples all have added gpgpu tags.
3. webgpu_materials_sss sample has 'subsurface scattering' tag.
4. Samples that use mrt functionality all have MRT tag.",
29194,2024-08-21T02:19:29Z,2024-08-21T23:26:37Z,cmhhelgeson,1,0,1,2,1,0,0,[],146.0,0,1389994.0,0,0,0,0,9661821.483226,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Maintains the types of variables used in a comparison operation unless they are different, in which case they are converted to floats.

This prevents TSL code where the user explicitly defines a non-float comparison between two values from resolving to a float comparison.

TSL Code: 
```typescript

const uTest = uniform( uint( 1 ) )
// etc
If( uTest.equal( uint( 1 ) ), () => {

```

WGSL Output: 
```typescript

// uTest variable
nodeUniform1: u32 

// Current Code
if ( ( f32( object.nodeUniform1 ) == f32( 1u ) )

// Changed Code
if ( ( object.nodeUniform1 == 1u ) )

```",
29202,2024-08-21T21:48:29Z,2024-08-24T01:31:04Z,cmhhelgeson,1,3,6,24,4,2,0,['TSL'],146.0,0,1319842.0,0,0,0,0,9661834.312048,,0,6,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Adds a new LOCAL scope to IndexNode. This scope allows the user to access the local_invocation_index builtin as a node within a TSL function. While this functionality is primarily intended for use in applications targeting WebGPU, I'm investigating whether parity with the WebGLBackend could potentially be maintained by taking the modulus of the gl_instanceID by a compute shader's workgroup size.

Reference definition here:
https://www.w3.org/TR/WGSL/#local-invocation-index-builtin-value","Can you rename to `instanceLocalIndex`? It looks closer to the TSL names like `normalLocal`, `positionLocal`, .... I can change it, but I was wondering if it might be better as something like invocationLocalIndex, to align it with WGSL syntax and make it more clear it's only for compute purposes. Yes, `invocationLocalIndex` seems better for this context."
29201,2024-08-21T19:32:32Z,2024-08-22T18:36:07Z,cmhhelgeson,2,4,6,311,5,2,1,[],148.0,0,1328005.0,0,0,0,0,9661828.327548,,0,6,1,False,"['github-actions[bot]', 'cmhhelgeson']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | Huh, webgpu_backdrop_water is still failing.",,"Related Issue: #29184

**Description**

Creates a class StereoCompositePassNode.js that implements functionality shared between AnaglyphPassNode and ParallaxBarrierPassNode.js. Anaglyph and ParallaxBarrier now implement this class.

Additionally, I modified the webgpu_stereo_camera.html example slightly. Now, the user can modify the eyeSep value, demonstrating how this value affects the final output of the image.","## Superfluous trailing arguments

Superfluous argument passed to [constructor of class AnaglyphPassNode](1).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2411) ## Superfluous trailing arguments

Superfluous argument passed to [constructor of class ParallaxBarrierPassNode](1).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2412) ## Unused variable, import, function or class

Unused import addNodeElement.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2413) I would favor to remove `eyeSep` from the signature. The instance of `StereoCamera` is public in all three stereo passes and developers can directly set the `eyeSep` via this reference.

In this way, we don't have to maintain a redundant default value of `eyeSep` in `StereoCompositePassNode`."
29236,2024-08-27T05:28:28Z,2024-08-29T04:19:41Z,cmhhelgeson,3,6,9,94,3,3,0,['WebGPU'],53226.0,0,860229.0,0,0,0,0,9661849.832131,,0,9,1,False,"['github-actions[bot]', 'cmhhelgeson', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | The screenshot appears to be passing in local tests. I've tried passing in a new one, but Git keeps indicating that the new image cannot be pushed in, as it is the same as the current one. 

EDIT: I think I will just add the example as an exception to puppeteer for now. Sometimes it is necessary to update the build to take the screenshot.",,"**Description**

Add the ability to apply a per instance size attribute to the InstancedPointsGeometry, and access that attribute within the InstancedPointsNodeMaterial. The existing approach is extended, specifying via parameters that the material should access the instanceSize attribute of the relevant geometry rather than the uniform width value passed directly to the material. However, we could modify the material down the line to use an approach more in line with existing node materials, where the output is modified by applying nodes to the material ( such as a positionNode or sizeNode ) rather than setting static parameters that determine the nodes the material creates internally.

https://github.com/user-attachments/assets/d722ea8d-294c-4c2d-aabb-35b2d7e1ed47

","## Unused variable, import, function or class

Unused imports cos, length, normalize, vec3.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2421) Instead of adding this buffer here using `setSizes()` could you move to example, and add the `material.pointSizeNode` property and let the user do their own setup? removing `useInstanceSize` too... Should I remove setSizes from InstancedPointsGeometry as well ( might be useful for WebGL cases?) I think it's better to remove it. ## Unused variable, import, function or class

Unused import vec3.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2428) I've addressed the issues mentioned above. If it's okay, I've also added a minor effect to pointColorNode to surface an additional node property to website viewers."
29336,2024-09-05T21:55:47Z,2024-09-05T21:57:22Z,sunag,0,0,1,6,1,0,0,[],,0,124.0,0,0,0,0,9685116.094683,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29319#issuecomment-2330614448

**Description**

I hope that's all.",
29276,2024-08-30T18:13:31Z,2024-09-05T22:20:28Z,cmhhelgeson,2,0,2,8,1,0,0,[],193.0,0,555113.0,0,0,0,0,9661863.202668,,1,2,1,False,"['github-actions[bot]', 'cmhhelgeson']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.18 <br> **169.62** | 685.18 <br> **169.62** | +0 B <br> **+0 B** |
| WebGPU | 826.02 <br> **221.46** | 825.96 <br> **221.44** | -66 B <br> **-19 B** |
| WebGPU Nodes | 825.61 <br> **221.36** | 825.54 <br> **221.34** | -66 B <br> **-19 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.96 <br> **111.46** | 461.96 <br> **111.46** | +0 B <br> **+0 B** |
| WebGPU | 525.27 <br> **141.52** | 525.27 <br> **141.52** | +0 B <br> **+0 B** |
| WebGPU Nodes | 481.93 <br> **131.34** | 481.93 <br> **131.34** | +0 B <br> **+0 B** | Should node.instanceIndex just be replaced with node.isIndexNode?",,"**Description**

StorageArrayElementNode will query its parent node for it's .instanceIndex property, which doesn't appear to be an existing property or get method.
",
29334,2024-09-05T11:04:08Z,2024-09-05T17:48:37Z,mrdoob,1,0,3,46,3,0,0,[],21034.0,0,24276.0,0,0,0,0,9700064.545857,,0,3,1,False,['sunag'],It's beautiful in this atmosphere.,,"Related issue: #29081

**Description**

Now that we have compute I think it we should increase the amount of birds 😎

https://github.com/user-attachments/assets/36989f0e-71cf-4602-ac6d-32d71043599d",
29329,2024-09-05T08:44:53Z,2024-09-05T09:00:20Z,lhapaipai,0,0,1,271,11,0,0,[],,0,940.0,0,0,0,0,9731756.062025,,0,1,1,False,[],,,"hello everyone,
Thank you for all these resources.

this pr proposes wording corrections on the french translation of the three.js fundamentals documentation.

The corrections concern the form but not the substance.",
29331,2024-09-05T09:12:19Z,2024-09-05T14:43:03Z,Mugen87,1,1,2,202,3,1,0,[],209.0,0,19845.0,0,0,0,0,9711205.112296,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.18 <br> **169.62** | 685.18 <br> **169.62** | +0 B <br> **+0 B** |
| WebGPU | 826 <br> **221.45** | 826.02 <br> **221.46** | +24 B <br> **+7 B** |
| WebGPU Nodes | 825.58 <br> **221.36** | 825.61 <br> **221.36** | +443 B <br> **+101 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.96 <br> **111.46** | 461.96 <br> **111.46** | +0 B <br> **+0 B** |
| WebGPU | 525.25 <br> **141.51** | 525.27 <br> **141.52** | +24 B <br> **+7 B** |
| WebGPU Nodes | 481.9 <br> **131.33** | 481.93 <br> **131.34** | -43.32 kB <br> **+9 B** |",,"Related issue: #29295

**Description**

This PR adds a version of `ShadowMapViewer` that is compatible with `WebGPURenderer`.
","Shadow maps are implemented differently in `WebGPURenderer` since they use depth textures and don't rely on `MeshDepthMaterial`. Hence, the debug texture looks a bit different since we use the shadow color for visualization purposes."
29225,2024-08-24T16:38:07Z,2024-09-05T09:00:07Z,Mugen87,8,0,8,450,5,0,0,[],136.0,0,1009320.0,0,0,0,0,9731783.400111,,0,8,1,False,"['github-actions[bot]', 'Mugen87', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.2 kB <br> **169.6 kB** | 685.2 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 823 kB <br> **220.9 kB** | 826 kB <br> **221.4 kB** | +2.96 kB <br> **+597 B** |
| WebGPU Nodes | 822.6 kB <br> **220.8 kB** | 825.6 kB <br> **221.4 kB** | +3.38 kB <br> **+691 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.5 kB** | 462 kB <br> **111.5 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.3 kB <br> **140.8 kB** | 525.2 kB <br> **141.5 kB** | +2.95 kB <br> **+732 B** |
| WebGPU Nodes | 478.9 kB <br> **130.7 kB** | 481.9 kB <br> **131.4 kB** | -40.39 kB <br> **+712 B** | The problem was in NodeFrame which was not restoring the scene from the previous render in the call tree, I still have to see the best solution, but I already feel relieved since it was kind of difficult to find the problem :)

![image](https://github.com/user-attachments/assets/77503869-b5bf-405a-9a04-98ae38a138c2)
 I have to improve `filterNode` to support VSM too, I think that after we merge this PR. It looks like we have another issue in `WebGLBackend`. The behavior in WebGL seems odd. You can see the directional light but not its shadows. The spot light is completely missing in the scene (light + shadow). I stall the PR for the moment since I could not figure out the root cause so far. Hopefully the issue will pop up in a different, more isolated context. This PR https://github.com/mrdoob/three.js/pull/29326 should fix it, sorry the delay, I had to deconstruct the code step by step to find the source of the problem. Awesome, it really works!",,"Related issue: -

**Description**

This PR adds support for Variance Shadow Maps (VSM) to `WebGPURenderer`.

This is WIP though since the current code only supports one shadow casting light. I'm not sure why the shadows of an additional shadow casting light are currently ignored. The new example illustrates this issue. You only see the shadow of the spot light but no the directional light.

Some help/support in this context would be welcome 😇 .

Side note: VSM works by preprocessing the actual shadow map with two blur passes. The render target of the second blur pass is then used as the new shadow map in the shader. The shadow information are not stored as floats in a depth texture but in special two-component `distribution` vectors. A smart calculation based on these data leads to the final occlusion value.",
29274,2024-08-30T17:31:52Z,2024-08-30T17:55:33Z,sunag,0,0,1,126,4,0,0,[],,0,475243.0,0,0,0,0,9744235.87251,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29251

**Description**

Start tracking the size of the `build/three.webgpu.nodes.js`.
I tried to follow the same pattern from https://github.com/mrdoob/three.js/pull/29251",
29319,2024-09-04T10:49:44Z,2024-09-05T00:04:58Z,aardgoose,4,0,2,65,2,0,0,[],201.0,0,66363.0,0,0,0,0,9745243.929553,,0,2,1,False,"['github-actions[bot]', 'aardgoose', 'mrdoob', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 823 kB <br> **220.9 kB** | 822.9 kB <br> **220.8 kB** | -162 B <br> **-59 B** |
| WebGPU Nodes | 822.6 kB <br> **220.8 kB** | 822.5 kB <br> **220.7 kB** | +257 B <br> **+35 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.8 kB** | 522.1 kB <br> **140.8 kB** | +0 B <br> **+0 B** |
| WebGPU Nodes | 478.8 kB <br> **130.6 kB** | 478.8 kB <br> **130.6 kB** | -43.34 kB <br> **+0 B** | So this PR fixes #28884? No, just a tidy up. just raising the profile of the problem @sunag

What's going on with these WebGPU Nodes results?

> ### 🌳 Bundle size after tree-shaking
>
> _Minimal build including a renderer, camera, empty scene, and dependencies._
>
> || Before | After | Diff |
> |:-:|:-:|:-:|:-:|
> | WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
> | WebGPU | 522.1 kB <br> **140.8 kB** | 522.1 kB <br> **140.8 kB** | +0 B <br> **+0 B** |
> | WebGPU Nodes | 478.8 kB <br> **130.6 kB** | 478.8 kB <br> **130.6 kB** | -43.34 kB <br> **+0 B** |",,"Update TSL to remove hacks using property() to force variable assignments into the correct locations.
Use lengthSq() in `InstancedPointsNodeMaterial`.
trimSegment() is now a real function, not inlined.
.

@sunag dashed mode for Line2 was broken since #28585",
29328,2024-09-05T04:08:53Z,2024-09-05T04:17:04Z,mrdoob,1,0,1,2,1,0,0,[],187.0,0,495.0,0,0,0,0,9748764.229153,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.18 <br> **169.62** | 685.18 <br> **169.62** | +3 B <br> **+1 B** |
| WebGPU | 823.04 <br> **220.85** | 823.04 <br> **220.85** | +3 B <br> **+1 B** |
| WebGPU Nodes | 822.62 <br> **220.76** | 822.63 <br> **220.76** | +422 B <br> **+95 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.96 <br> **111.46** | 461.96 <br> **111.46** | +3 B <br> **+3 B** |
| WebGPU | 522.28 <br> **140.79** | 522.29 <br> **140.78** | +17 B <br> **-9 B** |
| WebGPU Nodes | 478.94 <br> **130.65** | 478.95 <br> **130.62** | -43.33 kB <br> **-35 B** |",,,
29327,2024-09-05T04:02:07Z,2024-09-05T04:07:45Z,mrdoob,1,0,3,6,2,0,0,[],247.0,0,360.0,0,0,0,0,9749305.735876,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.2 kB <br> **169.6 kB** | 685.2 kB <br> **169.6 kB** | +1 B <br> **+0 B** |
| WebGPU | 823 kB <br> **220.9 kB** | 823 kB <br> **220.9 kB** | +1 B <br> **+0 B** |
| WebGPU Nodes | 822.6 kB <br> **220.8 kB** | 822.6 kB <br> **220.8 kB** | +420 B <br> **+94 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.5 kB** | 462 kB <br> **111.5 kB** | +1 B <br> **+1 B** |
| WebGPU | 522.3 kB <br> **140.8 kB** | 522.3 kB <br> **140.8 kB** | +15 B <br> **-10 B** |
| WebGPU Nodes | 478.9 kB <br> **130.7 kB** | 478.9 kB <br> **130.6 kB** | -43.33 kB <br> **-36 B** |",,,
29326,2024-09-05T01:27:01Z,2024-09-05T01:37:22Z,sunag,1,0,1,13,1,0,0,[],202.0,0,625.0,0,0,0,0,9758346.741387,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.2 kB <br> **169.6 kB** | 685.2 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 823 kB <br> **220.8 kB** | 823 kB <br> **220.9 kB** | +84 B <br> **+32 B** |
| WebGPU Nodes | 822.5 kB <br> **220.7 kB** | 822.6 kB <br> **220.8 kB** | +503 B <br> **+127 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.5 kB** | 462 kB <br> **111.5 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.2 kB <br> **140.8 kB** | 522.3 kB <br> **140.8 kB** | +84 B <br> **+30 B** |
| WebGPU Nodes | 478.9 kB <br> **130.6 kB** | 478.9 kB <br> **130.7 kB** | -43.26 kB <br> **+29 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29225

**Description**

Fix `viewportCoordinate` if used `RenderTaget` in `WebGLBackend`.
",
29309,2024-09-03T21:03:31Z,2024-09-04T18:02:01Z,WestLangley,6,0,2,18,3,0,0,[],2191.0,0,85730.0,0,0,0,0,9775453.186291,,0,2,1,False,"['Mugen87', 'WestLangley']","How did the screen shots pass without updating them?

Also, `webgl_lightprobe_cubecamera.html` seems to be redundant given `webgl_lightprobe.html`.
 > Also, webgl_lightprobe_cubecamera.html seems to be redundant given webgl_lightprobe.html.

`webgl_lightprobe_cubecamera` covers a different use case since it generates the light probe from a render target. This code path is not yet supported in `WebGPURenderer`. > How did the screen shots pass without updating them?

That is indeed strange. I suggest to still regenerate the screenshot to avoid fails in future CI runs. @Mugen87 webgpu screenshots render black for me. Is there a secret? Have you lately executed a `npm i`? Maybe the dev dependencies are outdated... I'm using homebrew... In the mean time, can you please update the webgpu screen shot?",,"Added the light probe helpers to the light probe examples.

It is important to verify that:

(1) the irradiance inferred from the environment map is correct,

(2) the computed SH3 coefficients are correct, and

(3) the helper renders correctly.

Also added a notation that the light probes position property, which is important in a light probe volume, is only honored when rendering the helper. The light probe position is currently not used in the lighting calculations.",
29324,2024-09-04T18:04:11Z,2024-09-04T18:22:02Z,Mugen87,0,0,1,0,1,0,0,[],,0,1071.0,0,0,0,0,9784472.536945,,0,1,0,False,[],,,"Related issue:  #29309

**Description**

Updates the screenshot of `webgpu_lightprobe`.
",
29322,2024-09-04T14:46:15Z,2024-09-04T17:16:46Z,Mugen87,0,0,1,11,1,0,0,[],,0,9031.0,0,0,0,0,9788388.560378,,0,1,1,False,[],,,"Related issue: -

**Description**

`ShadowMapViewer` can use `CanvasTexture` to simplify the code a bit.
",
29311,2024-09-03T22:22:49Z,2024-09-04T07:45:09Z,WestLangley,0,0,1,32,1,0,0,[],,0,64712.0,0,0,0,0,9791714.983524,,0,1,1,False,[],,,... and simplify the gui logic.,
29318,2024-09-04T09:35:58Z,2024-09-04T12:51:35Z,Red1C3,0,0,1,2,1,1,1,[],,0,15987.0,0,0,0,0,9800051.292415,,0,1,1,False,[],,,"Related issue: Misleading comment in ""Updating Resources"" section in the docs.

**Description**

The docs say that each point need 3 vertices per point, while allocating a floats array with the size of three times the vertices/points, it should say three float per point instead.
",
29320,2024-09-04T12:06:42Z,2024-09-04T12:46:00Z,gkjohnson,1,9,3,76,3,3,1,[],202.0,0,3433.0,0,0,0,0,9803561.832562,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.2 kB <br> **169.6 kB** | +82 B <br> **+56 B** |
| WebGPU | 823 kB <br> **220.9 kB** | 823 kB <br> **220.9 kB** | +0 B <br> **+0 B** |
| WebGPU Nodes | 822.6 kB <br> **220.8 kB** | 822.6 kB <br> **220.8 kB** | +419 B <br> **+94 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 462 kB <br> **111.5 kB** | +82 B <br> **+57 B** |
| WebGPU | 522.1 kB <br> **140.8 kB** | 522.1 kB <br> **140.8 kB** | +0 B <br> **+0 B** |
| WebGPU Nodes | 478.8 kB <br> **130.6 kB** | 478.8 kB <br> **130.6 kB** | -43.34 kB <br> **+0 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29302#discussion_r1741927074

**Description**

Fixes the feedback error reported by `readRenderTargetPixelsAsync` caused by modifying the active frame buffer and not resetting it to the actively set one before awaiting the sync fence. I also removed the try / catch statements since we're not so defensive anywhere else in the project and could result in the function silently exiting with no returned data so it may be easiest to look at the diff without whitespace changes. Also throw an error in the branch where we can't return any data.","I notice that the function signature for `readRenderTargetPixelsAsync` in WebGPURenderer doesn't take a `dataBuffer` argument which should probably be fixed to align with the WebGLRenderer implementation. Taking a databuffer was a deliberate decision to avoid memory allocation in cases where this is run ever frame or every few frames and is common pattern use throughout the library, as well, and I think it's worth keeping.

It looks like WebGPURenderer will now create a new typed array on every call. Do you mind updating `KTX2Exporter` as well? I've updated KTX2Exporter but haven't tested it since I don't see an example.

Also is it worth creating a new issue to track this function signature difference? The WebGPU allocates the buffer returned internally, we just pass the required size etc. We effectively cast it to the correct type on return, but can't provide a buffer to be used, I think to ensure that the buffer alignment and location within memory is suitable for efficient CPU <-> GPU transfers.

The buffer is created at https://github.com/mrdoob/three.js/blob/3b84981a3dfa81fc5462d0e61ad9a1e3848225be/src/renderers/webgpu/utils/WebGPUTextureUtils.js#L384

And made available to JS here:
 https://github.com/mrdoob/three.js/blob/3b84981a3dfa81fc5462d0e61ad9a1e3848225be/src/renderers/webgpu/utils/WebGPUTextureUtils.js#L415 

 > Also is it worth creating a new issue to track this function signature difference?

Sounds good. Then we have a dedicated place to discuss this topic. If there is a use case that requires constant readback the recommended method would be to create a pool of WebGPU buffer objects in a ring buffer arrangement to avoid repeated allocations, something that doesn't match the current renderer API. I have also realized that `WebGPURenderer.readRenderTargetPixelsAsync()` can not handle cube render targets so far since you can't assign an active cube face index. This is required for a bunch of use cases like e.g. in `LightProbeGenerator`. I'll take a look. Relevant line:

https://github.com/mrdoob/three.js/blob/ce180c97303bb0606f3e314bd0d803ae5eb358fe/examples/jsm/lights/LightProbeGenerator.js#L165"
29313,2024-09-04T04:51:52Z,2024-09-04T07:41:17Z,mym0404,0,0,1,4,1,0,0,[],,0,27059.0,0,0,0,0,9806026.9249,,0,1,1,False,[],,,"Related issue: None

**Description**

Fix typo in docs for Korean.
",
29308,2024-09-03T20:48:19Z,2024-09-04T07:49:51Z,Mugen87,0,0,1,34,1,0,0,[],,0,39693.0,0,0,0,0,9822406.083677,,0,1,1,False,[],,,"Related issue: #29295

**Description**

This PR makes `KTX2Exporter` compatible with `WebGPURenderer`. It was required to make the `parse()` method async similar to `EXRExporter`.",
29310,2024-09-03T21:49:50Z,2024-09-04T07:43:28Z,linbingquan,0,0,1,2,1,0,0,[],,0,35618.0,0,0,0,0,9822790.610373,,0,1,1,False,[],,,"Related issue: #XXXX

**Description**

As the title say.

![图片](https://github.com/user-attachments/assets/b99cc307-1dbe-4545-bdaa-8c9837622013)
",
29315,2024-09-04T06:53:49Z,2024-09-04T07:40:08Z,puxiao,0,0,1,4,2,1,1,[],,0,2779.0,0,0,0,0,9822991.804623,,0,1,1,False,[],,,"If you use webpack/rspack, you will receive a warning message like this:

```
Module parse warning:
  ╰─▶   ⚠ Critical dependency: the request of a dependency is an expression
          ╭─[41:30]
       39 │     if (RAPIER === null) {
       40 │
       41 │         RAPIER = await import(RAPIER_PATH);
          ·                               ────────────
       42 │         await RAPIER.init();
       43 │
          ╰────
```



> Critical dependency: the request of a dependency is an expression

**Therefore we cannot use a constant directly.**

This warning can be resolved by using template strings.

",
29314,2024-09-04T06:36:06Z,2024-09-04T07:38:36Z,puxiao,0,0,1,45,2,0,0,[],,0,3750.0,0,0,0,0,9823083.93242,,0,1,1,False,[],,,,
29316,2024-09-04T07:26:50Z,2024-09-04T07:38:01Z,appache163,0,0,1,122,2,0,0,[],,0,671.0,0,0,0,0,9823119.363211,,0,1,1,False,[],,,document translation into Korean,
29302,2024-09-03T09:20:48Z,2024-09-03T19:22:45Z,Mugen87,1,3,1,66,4,2,0,[],212.0,0,80189.0,0,0,0,0,9823164.704574,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.6 kB** | 822 kB <br> **220.6 kB** | +254 B <br> **+40 B** |
| WebGPU Nodes | 821.3 kB <br> **220.5 kB** | 821.5 kB <br> **220.5 kB** | +673 B <br> **+132 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.7 kB** | 522.4 kB <br> **140.8 kB** | +254 B <br> **+53 B** |
| WebGPU Nodes | 478.8 kB <br> **130.5 kB** | 479 kB <br> **130.6 kB** | -43.09 kB <br> **+52 B** |",,"Related issue: #29295

**Description**

To make `EXRExporter` work with `WebGPURenderer`, it is required to make the parse method async.

Besides, the readback did not initially work as expected for both backends. In `WebGPUTextureUtils` is was required to change the typed array type to `Uint16Array` for FP16 formats. `WebGLTextureUtils` required a fix in `_getBytesPerTexel()` since the method did not account for the data type so far.

","@gkjohnson My plan was to use `WebGLRenderer.readRenderTargetPixelsAsync()` here as well but using it produces a WebGL feedback loop warning when exporting the PMREM in [misc_exporter_exr](https://threejs.org/examples/misc_exporter_exr). The screen also gets black.

> misc_exporter_exr.html:1 [.WebGL-0x128005ba800] GL_INVALID_OPERATION: Feedback loop formed between Framebuffer and active Texture.

I did not find the root cause so far so the `WebGLRenderer` code path still uses the sync approach for now. It would be great if you could provide a second pair of eyes and have a look^^. Do you have a minimal repro for how to cause the issue? Does it just require setting or rendering to RenderTarget A and then calling ""readRenderTargetPixels""? Just switch to `readRenderTargetPixelsAsync()` in `EXRExporter` any try to export the PMREM in `misc_exporter_exr`. That should trigger the feedback loop."
29312,2024-09-04T01:03:00Z,2024-09-04T04:27:44Z,sunag,1,5,1,22,3,2,0,[],187.0,0,12289.0,0,0,0,0,9834533.085694,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 822.9 kB <br> **220.9 kB** | 823 kB <br> **220.9 kB** | +140 B <br> **-3 B** |
| WebGPU Nodes | 822.5 kB <br> **220.8 kB** | 822.6 kB <br> **220.8 kB** | +559 B <br> **+95 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522 kB <br> **140.7 kB** | 522.1 kB <br> **140.8 kB** | +112 B <br> **+26 B** |
| WebGPU Nodes | 478.7 kB <br> **130.6 kB** | 478.8 kB <br> **130.6 kB** | -43.23 kB <br> **+40 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29299#issuecomment-2327329035

**Description**

@WestLangley the approach here rendered as expected in your example and E2E testing, and maintains the performance related in the previous PR.
","What is the reason you are using `transformDirection()` here?

That method is designed to be applied to vectors such as the tangent or bi-tangent, not the normal. We use the `normalMatrix` when transforming normal vectors.

Using `transformDirection()` will be correct only if the camera has uniform scale (the typical use case), but what is the point of doing it this way?

What is it about this approach that is making the code faster? `mesh.normalMatrix` is a view space matrix, this should be called `normalViewMatrix` as I updated in TSL.

`modelNormalMatrix.mul( normal )` will convert the normals to world space, and `transformDirection()` to view space. I could use `mul().normalize()` instead of `transformDirection()` but I don't see much advantage in that.

> What is it about this approach that is making the code faster?

This doesn't use CPU-computed viewMatrices, so we don't need to update GPU buffers every frame since the global matrix doesn't always change. `modelNormalMatrix` is not the same as `mesh.normalMatrix`.

I used `matrix3.getNormalMatrix( object.matrixWorld )` instead of `matrix3.getNormalMatrix( object.modelViewMatrix )`, this is a normal world space matrix.

`mesh.normalMatrix` is a view space matrix and should be have the suffix `NormalViewMatrix` in TSL context, it is not used in this code, you can access it using `highPrecisionModelNormalViewMatrix`, with the approach mentioned in https://github.com/mrdoob/three.js/pull/29299#issue-2501183898 updated.

I believe the following explanation would be the same as the one mentioned above.
 The view matrix is assumed to be orthogonal and have uniform scale. Plus, we normalize the result after applying the matrix transform.

Consequently, normal vectors can be transformed with the same matrix as direction vectors.

Thus, it is OK to use `transformDirection()`, instead of the normal matrix, to transform the normal from world space to view space. tldr; This looks OK to me."
29299,2024-09-02T15:06:11Z,2024-09-03T15:19:57Z,sunag,18,0,13,230,12,0,0,[],200.0,0,121901.0,0,0,0,0,9847130.366878,,0,13,1,False,"['RenaudRohlinger', 'aardgoose', 'gkjohnson', 'WestLangley', 'github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.6 kB** | 822.6 kB <br> **220.8 kB** | +862 B <br> **+223 B** |
| WebGPU Nodes | 821.3 kB <br> **220.5 kB** | 822.1 kB <br> **220.7 kB** | +1.28 kB <br> **+315 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.7 kB** | 521.7 kB <br> **140.6 kB** | -441 B <br> **-61 B** |
| WebGPU Nodes | 478.8 kB <br> **130.5 kB** | 478.3 kB <br> **130.5 kB** | -43.78 kB <br> **-57 B** | We do something similar [here](https://github.com/mrdoob/three.js/blob/598db0df6aa349511eef16b67609012060fc1037/src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl.js#L29-L34) for instancing, but this only works if the columns of the matrix are orthogonal, which is not true in general.

See [this explanation](https://github.com/mrdoob/three.js/issues/18497#issuecomment-583771048) -- especially the last sentence.

 Thanks @WestLangley! 

Now I just need to check another approach to `webgpu_postprocessing_motion_blur` example :) I'm not as familiar with shader nodes so I may be misunderstanding what's happening here but I'll write my two cents from what I understand from the description:

This change could cause precision issues when using large coordinates since GPU calculations use 32 bit math which hasn't been an uncommon issue with instances and skinned meshes with large position values (bone and instance matrices are multiplied into the mv matrix on the gpu). See [here](https://discourse.threejs.org/t/the-projectionmatrix-seems-to-have-caused-a-loss-of-accuracy/58455) and [here](https://discourse.threejs.org/t/large-coordinates/50621/7). I suspect it will be even more common if this is done on the GPU for every mesh.

Assume the camera is far from the origin (camera orbiting a to-scale globe model with a radius of 6.3e6 meters) meaning the objects in frame have extremely large positional values, as well. If the MV matrix is calculated on the CPU then 64-bit precision is used meaning any error resulting from the calculations will be much smaller than it will be if these calculations are done with 32 bits on the GPU. This can cause _very_ noticeable jitter artifacts during rendering. In that case, similar to how `logarithmicDepthBuffer` improves depth precision at the cost of performance, we could introduce another option like `renderer.normalMatrix` (or somethingNormalCPU...) for 64-bit precision when jitter artifacts occur.
This would still allow for high-precision MV matrix calculations on the CPU, would align with the existing `logarithmicDepthBuffer` logic, and improve performances while giving developers an option to increase precision in demanding scenarios. I like the idea of ​​having a point of origin relative to the camera as presented in item `3.2.1` of this article https://www.diva-portal.org/smash/get/diva2:275843/FULLTEXT02. > we could introduce another option like `renderer.normalMatrix`

To be clear is this just for normal matrices? This PR involves moving both the model-view matrix multiplication (and implicitly the normal matrix generation) to the GPU, right? In this case we'd want to name it something indicating it's for more than just normal matrices.

> I like the idea of ​​having a point of origin relative to the camera as presented in item 3.2.1 of this article https://www.diva-portal.org/smash/get/diva2:275843/FULLTEXT02.

This is what multiplying the model and view matrices on the CPU is achieving - ie what WebGLRenderer is already doing. I think the idea is to have global matrices relative to the camera position.  It's not what we do today Restatement of my previous comment:

The technique proposed in this PR will only be correct when the columns of the model view matrix are orthogonal. The columns will typically not be orthogonal when, for example,

(a) a non-uniformly-scaled parent has a rotated child,

(b) a user-provided object matrix has non-orthogonal columns. Maybe revisit https://github.com/mrdoob/three.js/issues/5974, instead. > I think the idea is to have global matrices relative to the camera position. It's not what we do today

This is no different than calculating a model-view matrix, though, as far as I undrstand. The model-view matrix places the object relative to the camera. Perhaps you're imagining something different but in order to maintain these you have to multiply the existing world matrix by the inverse of the camera world matrix. You can either do that before rendering or maintain it on each object but I'm not sure of the value of the latter since it just makes things more difficult to maintain and removes the ability to render with multiple cameras without recalculating everything. Either way the same (if not more) matrix multiplication has to happen and everything will have to be recalculated when the camera moves.

I may need a more concrete explanation to understand the differences in what's being suggested. I have been experimenting with a similar ideas (obviously restricted to uniform scaling) but made an opt in to allow  object.static as proposed in #28719. Thus the existing known to be correct behavior is preserved but a lighter CPU varient is available for renderBundles - (to get lighting working, light uniforms need moving into a shared bindGroup etc).

https://github.com/aardgoose/three.js/tree/freeze2 This would not use matrix multiplication, it would be a simple subtraction of the objects' world matrix position with the camera's world position, in which case the camera world would always have zero position for the GPU. It is certainly something else to add for CPU how to calculate `viewMatrix` and `normalMatrix` is today, not ideal for Bundler, but since `three.js` currently does not have dedicated API for ""huge open world"", given the issues you presented in `WebGLRenderer`, the `viewMatrix` calculated on the CPU does not solve problems such as Attached `SkinnedMesh`, `InstacedMesh` and probably others that a world matrices relative to the camera position should resolve.

It is also possible to notice that most of the issues are related to the incorrect use of the scale, where `1 meter` should be `1.0`.

I don't think there is a perfect solution in this here, just since this PR is prioritizing performance and keeping it functional in situations where the camera needs to move `10 kilometers` of distance of center of scene, which seems reasonable to me. Since some specific cases are the scenario that moves.

We could have Nodes to deal with these situations since the function TSL Fn call are deferred we would not have problems in defining how the `viewMatrix` is constructed for a given object, these are other possibilities to be studied. > We could have Nodes to deal with these situations since the function TSL Fn call are deferred we would not have problems in defining how the viewMatrix is constructed for a given object, these are other possibilities to be studied.

It seems like the best way to close this issue:
You can use `highPrecisionModelViewMatrix` for global or specific cases for example:


Global usage:
```js
// global
import { highPrecisionModelViewMatrix } from 'three/tsl';

const renderer = new THREE.WebGPURenderer( { antialias: true } );
renderer.nodes.modelViewMatrix = highPrecisionModelViewMatrix; // it will replace all MVP with this modelView node
```

Single Material / Object
```js
import { cameraProjectionMatrix, highPrecisionModelViewMatrix, positionLocal } from 'three/tsl';

material = new THREE.NodeMaterial();
material.vertexNode = cameraProjectionMatrix.mul( highPrecisionModelViewMatrix).mul( positionLocal );
```

`highPrecisionModelViewMatrix` will use CPU and `modelViewMatrix` will use GPU.
`modelViewMatrix` will be the default. __Master branch (WebGLRenderer and WebGPURenderer)__

![master](https://github.com/user-attachments/assets/62d88bc2-7db2-4481-b4d5-7c1ca489ea3d)

__This PR (WebGPURenderer)__

![169dev](https://github.com/user-attachments/assets/985dedb5-57e7-4c1b-bbf3-b9e89b426eeb)

This is because this PR computes the incorrect normals in the GPU... not surprising, based on my comments above.

 @WestLangley Could you share the code of this test? WebGPU dev branch fiddle: https://jsfiddle.net/La1e5gmz/ I'm checking that out, thanks, maybe I'll try something like that, but I need to do some testing still. 

The code below is just an abstraction
```js
const modelNormalMatrix = ( object ) => ... new Matrix3().getNormalMatrix( object.matrixWorld )
const normalView = cameraViewMatrix.transformDirection( modelNormalMatrix.mul( normal ) );
```",,"Related issue: https://github.com/mrdoob/three.js/pull/28719
Related: https://lxjk.github.io/2017/10/01/Stop-Using-Normal-Matrix.html

## Performance

This change is part of the integration process of https://github.com/mrdoob/three.js/pull/28719 for less CPU usage. These changes brought a gain of around ~25% in performance for scenes with many objects.



| default - old | default - now |
| ------------- | ------------- | 
| 12.10ms | 8.85ms |
| ![image](https://github.com/user-attachments/assets/c13d5dfe-f887-4d8a-a056-ccfdf6cbcf3d) | ![image](https://github.com/user-attachments/assets/4f7f9758-dd5e-4ebe-92bd-2bfa107e2a88) |  

| bundle - old | bundle - now |
| ------------- | ------------- |
| 5.67ms | 3.27ms |
| ![image](https://github.com/user-attachments/assets/4e39ee58-f8d0-4d07-b3fc-70402ada23bf) | ![image](https://github.com/user-attachments/assets/1d0adf41-9d53-4035-8b1c-34da1597ce74) |

## Precision

You can use `highPrecisionModelViewMatrix` for all MVPs or for some selected Materials.

Global usage:
```js
// global
import { highPrecisionModelViewMatrix, highPrecisionModelNormalMatrix } from 'three/tsl';

const renderer = new THREE.WebGPURenderer( { antialias: true } );
renderer.nodes.modelViewMatrix = highPrecisionModelViewMatrix;
renderer.nodes.modelNormalViewMatrix = highPrecisionModelNormalViewMatrix;
```

Single Material / Object
```js
import { highPrecisionModelNormalMatrix, cameraProjectionMatrix, highPrecisionModelViewMatrix, positionLocal, normalLocal } from 'three/tsl';

material = new THREE.NodeMaterial();
material.vertexNode = cameraProjectionMatrix.mul( highPrecisionModelViewMatrix ).mul( positionLocal );
material.normalNode = highPrecisionModelNormalViewMatrix.transformDirection( normalLocal );
```

- `model*` will use GPU.
- `highPrecision*` will use CPU.

`modelViewMatrix` using GPU is the default. Since they are all nodes, you can customize your own.
",
29304,2024-09-03T11:09:06Z,2024-09-03T15:02:03Z,vpicavet,0,1,2,8,8,1,0,[],,0,26387.0,0,0,0,0,9870471.013852,,0,2,1,False,[],,,"**Description**

Mention Giro3D as a Geospatial framework based on Three ( giro3d.org ), in the libraries and plugins documentation page.



","Do you mind adding this link to all translated pages as well?

You don't have to actually translate the text, just adding the same markup like in the `en` version is fine."
29301,2024-09-02T19:19:31Z,2024-09-03T08:28:04Z,Mugen87,1,17,2,122,5,3,0,[],197.0,0,88042.0,0,0,0,0,9865791.109971,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.6 kB** | 821.7 kB <br> **220.6 kB** | -4 B <br> **+5 B** |
| WebGPU Nodes | 821.3 kB <br> **220.5 kB** | 821.3 kB <br> **220.5 kB** | +415 B <br> **+99 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.7 kB** | 522.1 kB <br> **140.7 kB** | -28 B <br> **-3 B** |
| WebGPU Nodes | 478.8 kB <br> **130.6 kB** | 478.8 kB <br> **130.5 kB** | -43.37 kB <br> **-4 B** |",,"Related issue: #29295

**Description**

This PR adds a version of `LightProbeHelper` that is compatible with `WebGPURenderer`. ","I believe I recall @sunag preferring this pattern now...
```js
result = result.add( ... )
```

requires `let`. Whatever he prefers is fine with me. Is this property doing anything? The uniform is updated in `onBeforeRender()`. `.addAssign()` relies on a global stack, while `result = result.add()` preserves the process tree. We may see many times when compiling everything inline using `let` instead of `assign`, this is because the compiler did not find it necessary to do apply `assigns` to builded code. `assign()` can also only be executed inside a `Fn` that has a controlled environment for stacks. Using `let` is a little better for the compiler to understand what it should and should not optimize in this sense, but it is not at all strict, if you need to use `addAssign()` that is fine. I do see that, but why is the same ""hack"" not needed for the probe coefficients, but is needed for the intensity? The line is indeed redundant. I'll remove it. I'll change the code to `result = result.add()`. >The line is indeed redundant. I'll remove it.

This PR was working. Now it is not.

If you figure it out, please do your best to answer my question above so we will both understand. 🙏  What do you mean with not working? Ah wait, I see the issue now. #29303 should fix the issue. It doesn't respond to changes in the light probe intensity -- but it did before you deleted the line. The sh coefficient _elements_ already update correctly with this PR. What is the reason for adding `_sh`? And how does it work? I think there is a difference because intensity is a primitive value and _sh an array of objects. It probably would not work if you exchange the vector objects in the array and not just update their values. I think we can rewrite the intensity uniform like so:
```js
const intensity = reference( 'intensity', 'float', lightProbe );
```
Then a manual uniform update isn't necessary. However, `reference()` would not work for uniform arrays ,afaik. You added `_sh` in #29303, and that was not necessary if you are updating just the contents of the array.

With all due respect, I think you merged PRs too fast, without allowing time for the reviewer to respond.

Can you please continue to investigate this so we can all understand? > You added _sh in https://github.com/mrdoob/three.js/pull/29303, and that was not necessary if you are updating just the contents of the array.

I suspect you have tested this by just updating the _existing_ vector objects, right? However, when the array is overwritten with new objects, the changes from https://github.com/mrdoob/three.js/pull/29303 are required. 

I just wanted to be on the safe side, that's why I have honored the coefficients in https://github.com/mrdoob/three.js/pull/29303. If you think this is not required since the coefficient vectors are usually not overwritten with new instances, https://github.com/mrdoob/three.js/pull/29303 can be partly reverted. 

> With all due respect, I think you merged PRs too fast, without allowing time for the reviewer to respond.

I understand but it is also imported to move forward with the migration. We can fix such minor issues in `dev` as well. >you have tested this by just updating the existing vector objects, right?

Right. Just the contents.

>If you think this is not required since the coefficient vectors are usually not overwritten with new instances, https://github.com/mrdoob/three.js/pull/29303 can be partly reverted.

I think it's not required. Granted, it is a judgment call.

"
29305,2024-09-03T15:04:01Z,2024-09-03T15:12:28Z,vpicavet,0,0,4,45,3,0,0,[],,0,508.0,0,0,0,0,9882255.171824,,0,4,1,False,[],,,"**Description**

Fix some missing translations in French manual.

Quick proof-read of other translations, and various minor translation fixes.
",
29303,2024-09-03T09:58:08Z,2024-09-03T10:04:41Z,Mugen87,0,0,3,4,1,0,0,[],,0,411.0,0,0,0,0,9900706.784547,,0,3,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29301#discussion_r1741764277

**Description**

Makes sure uniforms are properly updated in `onBeforeRender()`.
",
29281,2024-09-01T08:35:13Z,2024-09-02T08:31:43Z,Mugen87,1,0,2,503,7,0,0,[],170244.0,0,170245.0,0,0,0,0,9908647.903879,,0,2,1,False,['mrdoob'],SGTM 👍,,"Related issue: #29171

**Description**

Another example that I suggest to remove is `webgl_geometry_sdf`. When #26837 was merged, I have underestimated the dependency to GLSL and `WebGLRenderer`. Especially since with WebGPU you have compute shaders so something like `SDFGeometryGenerator` could be implemented in a different way.

Considering the complexity of `SDFGeometryGenerator` and that it is not common task to generate geometries from a SDF, it's best to maintain `SDFGeometryGenerator` in an external repository.",
29300,2024-09-02T18:09:02Z,2024-09-02T22:51:25Z,sunag,1,0,1,4,1,0,0,[],204.0,0,16946.0,0,0,0,0,9941118.02244,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.1 kB <br> **169.6 kB** | 685.1 kB <br> **169.6 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.6 kB** | 821.7 kB <br> **220.6 kB** | -24 B <br> **-2 B** |
| WebGPU Nodes | 821.3 kB <br> **220.5 kB** | 821.3 kB <br> **220.5 kB** | +395 B <br> **+90 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 461.9 kB <br> **111.4 kB** | 461.9 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.2 kB <br> **140.7 kB** | 522.1 kB <br> **140.7 kB** | -24 B <br> **-2 B** |
| WebGPU Nodes | 478.8 kB <br> **130.6 kB** | 478.8 kB <br> **130.6 kB** | -43.37 kB <br> **+1 B** |",,,
29197,2024-08-21T11:09:45Z,2024-08-22T18:47:55Z,aardgoose,4,0,4,67,1,0,0,['WebGPU'],138.0,0,1043825.0,0,0,0,0,9976197.728291,,0,4,0,False,"['github-actions[bot]', 'aardgoose', 'RenaudRohlinger']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | @aardgoose After I saw this PR I was wondering, since WebGPU doesn't have a multidraw API like WebGL as RenderBundles are basically the same thing, could we update the BatchedMesh part of the WebGPUBackend with renderBundle?

So that this part would be bundled OOTB:
```js
if ( object.isBatchedMesh === true ) {

	const starts = object._multiDrawStarts;
	const counts = object._multiDrawCounts;
	const drawCount = object._multiDrawCount;
	const drawInstances = object._multiDrawInstances;

	const bytesPerElement = hasIndex ? index.array.BYTES_PER_ELEMENT : 1;

	for ( let i = 0; i < drawCount; i ++ ) {

		const count = drawInstances ? drawInstances[ i ] : 1;
		const firstInstance = count > 1 ? 0 : i;

		passEncoderGPU.drawIndexed( counts[ i ], count, starts[ i ] / bytesPerElement, 0, firstInstance );

	}

}
``` I'm not sure it is worth it yet, I looked at the chromium/dawn issue log and it appears the multidraw has been implemented in Dawn for D3D12 and Vulkan backends, but not Metal yet. So it looks like it will appear in Chrome, although when is not know of course.  

Although could you take it one step further and use multiple drawIndirect() with the a single indirect buffer mapped at different offsets at for each call, so you could try gpu compute directed rendering? That way you could get more of the benefits of multidraw and make it more worthwhile? I like the idea a lot. I guess it's time to work on [[WebGPU] drawIndirect and drawIndexedIndirect](https://github.com/mrdoob/three.js/issues/28389) ^^.",,"The example webgpu_backdrop_area requires regeneration of a texture mipmap for each frame, using bundles allows the overhead to be reduced.

The renderBundles are only cached when a texture is mipmapped more than once. 

",
29296,2024-09-02T11:28:40Z,2024-09-02T11:28:45Z,Mugen87,0,0,1,9,3,0,0,[],,0,6.0,0,0,0,0,9982081.776776,,0,1,1,False,[],,,"Related issue:  https://github.com/mrdoob/three.js/pull/29229#issuecomment-2324342530

**Description**

Fixed some broken formatting.",
29297,2024-09-02T12:19:33Z,2024-09-02T13:04:23Z,Mugen87,1,7,2,22,2,2,0,[],203.0,0,31194.0,0,0,0,0,9947840.976858,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.6 kB <br> **169.8 kB** | 685.6 kB <br> **169.8 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.7 kB** | 821.8 kB <br> **220.7 kB** | +63 B <br> **+15 B** |
| WebGPU Nodes | 821.3 kB <br> **220.6 kB** | 821.3 kB <br> **220.6 kB** | +482 B <br> **+109 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462.2 kB <br> **111.5 kB** | 462.2 kB <br> **111.5 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.6 kB** | 522.2 kB <br> **140.7 kB** | +67 B <br> **+24 B** |
| WebGPU Nodes | 478.8 kB <br> **130.5 kB** | 478.8 kB <br> **130.5 kB** | -43.29 kB <br> **+22 B** |",,"Related issue: -

**Description**

App code might use this pattern to configure the background:

```js
const pmremGenerator = new THREE.PMREMGenerator( renderer );
pmremGenerator.compileEquirectangularShader();

const renderTarget = pmremGenerator.fromEquirectangular( texture );
scene.background = renderTarget.texture;
```

The PR fixes the `PMREMGenerator.compile*()` methods by making sure they are not using an `undefined` mesh for `WebGPURenderer.compile()`. Besides, it makes sure `Scene.background` accepts env maps with `CubeUVReflectionMapping`.","@sunag Compared to `WebGLRenderer`, `Renderer.compile()` is async. It's probably better to make the compile methods in `PMREMGenerator` async as well. Does that sound good to you? `this._lodMeshes[ 0 ]` is undefined because `_allocateTargets()` has not been executed yet. Does the compile still produce the expected result if a temporary mesh is used like below? Sounds good to me too 👍  It seems no since the render object will be different when a temporary mesh is used. It seems `_allocateTargets()` (or at least `_createPlanes()` ) must run before a compile happens. And ideally `compile()` is called with all LOD meshes. Maybe we can have a mesh/geometry just to compile this shader, ignoring `_allocateTargets()` for now, it's needs to be relative with the size of texture.

I think we will need to add `this._compileMaterial( this._blurMaterial )` too We should rename it to `PMREMGenerator.compileAsync()` too? or keep both maybe adding a warning in compile()? I'll merge the PR for the moment so the severe issues are fixed. The code in `_compileMaterial()` is now aligned to the old `PMREMGenerator` so we might want to improve both at the same time."
29229,2024-08-26T03:04:18Z,2024-08-26T08:10:17Z,appache163,1,0,1,72,2,0,0,[],630164.0,0,630165.0,0,0,0,0,9986986.472244,,0,1,1,False,['puxiao'],"src:

```diff
- [link:https://github.com/mrdoob/three.js/blob/master/examples/jsm/geometries/TeapotGeometry.js
- examples/jsm/geometries/TeapotGeometry.js]

+ [link:https://github.com/mrdoob/three.js/blob/master/examples/jsm/geometries/TeapotGeometry.js examples/jsm/geometries/TeapotGeometry.js]
```

",,translate teapot geometry document into Chinese,
29293,2024-09-02T06:58:40Z,2024-09-02T09:05:36Z,RenaudRohlinger,1,0,1,28,2,1,1,[],194.0,0,7616.0,0,0,0,0,9990673.689716,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.7 kB <br> **220.7 kB** | 821.7 kB <br> **220.7 kB** | +42 B <br> **-11 B** |
| WebGPU Nodes | 821.2 kB <br> **220.6 kB** | 821.3 kB <br> **220.6 kB** | +461 B <br> **+81 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.7 kB** | 522.1 kB <br> **140.6 kB** | +42 B <br> **-20 B** |
| WebGPU Nodes | 478.7 kB <br> **130.5 kB** | 478.8 kB <br> **130.5 kB** | -43.31 kB <br> **-22 B** |",,"Fixed #29270

WebGL Errors:
 - `performance warning: READ-usage buffer was read back without waiting on a fence. This caused a graphics pipeline stall.`
 - `GL_INVALID_OPERATION: A transform feedback buffer that would be written to is also bound to a non-transform-feedback target`


WebGPU Error:
- `Failed to execute 'mapAsync' on 'GPUBuffer': Buffer was unmapped before mapping was resolved.`

**Description**

Resolved #29270 by re-binding immediately after the fencing operation and correctly unbinding buffers post-operation in the WebGL backend.

Additionally, removed the readBufferGPU caching system in the WebGPU backend, which could cause race conditions during stress tests on subsequent calls.



*This contribution is funded by [Segments.AI](https://segments.ai) & [Utsubo](https://utsubo.com)*
",
29189,2024-08-20T18:13:00Z,2024-09-02T08:26:33Z,HunterLarco,2,0,2,44,1,2,2,[],138.0,0,1088034.0,0,0,0,0,9992995.998349,,0,2,1,False,"['github-actions[bot]', 'HunterLarco']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.6 kB (169.8 kB) | +192 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462.2 kB (111.5 kB) | +192 B | bump~ anything I can do to help with review?LGTM, but it would be great if @gkjohnson could have a look at this change as well.","LGTM, but it would be great if @gkjohnson could have a look at this change as well.","TLDR: this PR achieves up to 3 orders of magnitude performance improvement when updating a large number of adjacent ranges within `InstancedBufferAttribute` which is a common use case for projects heavily leveraging instancing.

**Description**

[BufferAttribute#addUpdateRange](https://threejs.org/docs/#api/en/core/BufferAttribute.addUpdateRange) can be used with `needsUpdate` so that three only transfers subsections of data to the GPU. This is a powerful feature which allows clients to better manage CPU<>GPU bandwidth. For example, in cases where a BufferAttribute may be several MB large and only a few bytes change per frame, clients can transfer only the changed bytes instead of the entire buffer.

In our product we've seen large improvement gains using update ranges, but frame drops in cases where many update ranges are present in a single frame. This can easily be observed with [InstancedBufferAttribute](https://threejs.org/docs/#api/en/core/InstancedBufferAttribute). In a project which heavily leverages `InstancedMesh` and therefore `InstancedBufferAttribute` to represent instance data, it's commonly required that individual instances are updated using `addUpdateRange`. In a frame where all instances need to be updated, this can create a large number of update ranges which are nearly all adjacent. As a result we observe a large number of avoidable `gl.bufferSubData` calls and frame drops (I imagine due to GPU command overhead).

This PR automatically merges overlapping / adjacent update ranges _before_ calling `gl.bufferSubData` and results in up to a 99.78% wall time reduction rendering our project (see below for details)

**Impact**

In a toy example within our company, I created a scene with 10k plane geometries (via `InstancedMesh`) which are positioned by vec3's interleaved via `InstancedBufferAttribute`. Updating all 10k positions in a single frame on a 2021 M1 Macbook Pro takes 112.21ms in three.js today, when run on this this PR it takes 0.25ms instead.

**Design Notes**

1. I added this logic in the renderers code as opposed to `addUpdateRange` where we could amortize the merging costs because clients are allowed to directly manipulate the `updateRanges` array. Adding this logic to the renderers ensures robustness regardless of how clients interact with update ranges.
2. I'd be happy to apply this change to WebGPU and WebGL-Fallback if there's interest.
3. I'd love to add unit tests, but there are currently no unit tests for `WebGLAttributes` making it challenging to envision how we'd mock `gl` when instantiating `WebGLAttributes`. If there's a suggestion here, I'd love to hear it.

*This contribution is funded by [SOOT](https://soot.com)*",
29290,2024-09-02T01:58:23Z,2024-09-02T08:18:47Z,appache163,0,0,1,124,2,0,0,[],,0,22825.0,0,0,0,0,9993483.377567,,0,1,1,False,[],,,MapControls translation into Korean,
29289,2024-09-02T01:01:04Z,2024-09-02T01:09:50Z,sunag,0,0,2,18,1,0,0,[],,0,26192.0,0,0,0,0,9993555.46183,,0,2,1,False,[],,,,
29291,2024-09-02T02:00:02Z,2024-09-02T02:15:22Z,sunag,0,0,2,4,2,0,0,[],,0,923.0,0,0,0,0,10015286.869097,,0,2,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29282

**Description**

Fix `webgpu_materials` after https://github.com/mrdoob/three.js/pull/29282",
29286,2024-09-01T16:57:32Z,2024-09-01T18:47:37Z,renovate[bot],0,0,1,138,1,0,0,[],,0,6710.0,0,0,0,0,10042051.157068,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [rollup](https://rollupjs.org/) ([source](https://togithub.com/rollup/rollup)) | [`4.21.0` -> `4.21.2`](https://renovatebot.com/diffs/npm/rollup/4.21.0/4.21.2) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.21.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.21.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.21.0/4.21.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.21.0/4.21.2?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.21.2`](https://togithub.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4212)

[Compare Source](https://togithub.com/rollup/rollup/compare/v4.21.1...v4.21.2)

*2024-08-30*

##### Bug Fixes

-   Handle IIFE/UMD namespace definitions conflicting with a builtin property ([#&#8203;5605](https://togithub.com/rollup/rollup/issues/5605))

##### Pull Requests

-   [#&#8203;5605](https://togithub.com/rollup/rollup/pull/5605): fix: Wrong namespace property definition ([@&#8203;thirumurugan-git](https://togithub.com/thirumurugan-git), [@&#8203;lukastaegert](https://togithub.com/lukastaegert))
-   [#&#8203;5630](https://togithub.com/rollup/rollup/pull/5630): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://togithub.com/renovate)\[bot])
-   [#&#8203;5631](https://togithub.com/rollup/rollup/pull/5631): chore(deps): lock file maintenance ([@&#8203;renovate](https://togithub.com/renovate)\[bot])
-   [#&#8203;5632](https://togithub.com/rollup/rollup/pull/5632): chore(deps): lock file maintenance ([@&#8203;renovate](https://togithub.com/renovate)\[bot])

### [`v4.21.1`](https://togithub.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4211)

[Compare Source](https://togithub.com/rollup/rollup/compare/v4.21.0...v4.21.1)

*2024-08-26*

##### Bug Fixes

-   Ensure `closeWatcher` hook is called when watch mode is aborted via Ctrl+C ([#&#8203;5618](https://togithub.com/rollup/rollup/issues/5618))
-   Do not produce invalid code for `import.meta.url` in compact mode ([#&#8203;5624](https://togithub.com/rollup/rollup/issues/5624))
-   Do not throw when generating chunk names when preserving modules in Windows ([#&#8203;5625](https://togithub.com/rollup/rollup/issues/5625))

##### Pull Requests

-   [#&#8203;5591](https://togithub.com/rollup/rollup/pull/5591): chore(deps): update dependency [@&#8203;types/eslint](https://togithub.com/types/eslint) to v9 ([@&#8203;renovate](https://togithub.com/renovate)\[bot], [@&#8203;lukastaegert](https://togithub.com/lukastaegert))
-   [#&#8203;5618](https://togithub.com/rollup/rollup/pull/5618): preload the WASM file even though the version is undefined. ([@&#8203;TrickyPi](https://togithub.com/TrickyPi))
-   [#&#8203;5619](https://togithub.com/rollup/rollup/pull/5619): Call and await closeWatcher hooks on exit signals ([@&#8203;lukastaegert](https://togithub.com/lukastaegert))
-   [#&#8203;5622](https://togithub.com/rollup/rollup/pull/5622): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://togithub.com/renovate)\[bot], [@&#8203;lukastaegert](https://togithub.com/lukastaegert))
-   [#&#8203;5624](https://togithub.com/rollup/rollup/pull/5624): fix: add space for DOCUMENT_CURRENT_SCRIPT template ([@&#8203;TrickyPi](https://togithub.com/TrickyPi))
-   [#&#8203;5625](https://togithub.com/rollup/rollup/pull/5625): fix: get the right chunk name for preserve modules in Windows ([@&#8203;TrickyPi](https://togithub.com/TrickyPi), [@&#8203;lukastaegert](https://togithub.com/lukastaegert))

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC41Ni4wIiwidXBkYXRlZEluVmVyIjoiMzguNTYuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29288,2024-09-02T00:51:31Z,2024-09-02T01:09:36Z,sunag,1,0,4,256,6,0,0,[],217.0,0,1112.0,0,0,0,0,10019210.29198,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 821.4 kB <br> **220.7 kB** | 821.7 kB <br> **220.7 kB** | +291 B <br> **+39 B** |
| WebGPU Nodes | 821 kB <br> **220.6 kB** | 821.2 kB <br> **220.6 kB** | +710 B <br> **+134 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 522.1 kB <br> **140.7 kB** | 522.1 kB <br> **140.7 kB** | -18 B <br> **-13 B** |
| WebGPU Nodes | 478.8 kB <br> **130.5 kB** | 478.7 kB <br> **130.5 kB** | -43.37 kB <br> **-13 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29259

**Description**

- [x] [export tone mapping methods](https://github.com/mrdoob/three.js/commit/8f70ed27ed672fdd5b3bcd90537a4ca3a2a982a1)
- [x] [export color space conversion methods](https://github.com/mrdoob/three.js/commit/ae8fbefc0bb6e6089e44f624ef3e816f87406f0b)
- [x] [Remove duplicated materialRefractionRatio](https://github.com/mrdoob/three.js/commit/77de719d965f2b176915ffd65129fd7831732c03)
- [x] [rev modules exports/imports](https://github.com/mrdoob/three.js/commit/e53e056033a1ff834f8b80e3a0b4bb36033c3dfc)
",
29285,2024-09-01T16:57:18Z,2024-09-01T18:47:21Z,renovate[bot],0,0,1,6,1,0,0,[],,0,6724.0,0,0,0,0,10042051.629729,,0,1,0,False,[],,,"This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://togithub.com/github/codeql-action) | action | digest | `2c779ab` -> `4dd1613` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://mend.io/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC41Ni4wIiwidXBkYXRlZEluVmVyIjoiMzguNTYuMCIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29282,2024-09-01T15:13:33Z,2024-09-01T15:51:12Z,sunag,1,0,4,1673,159,0,0,[],184.0,0,2263.0,0,0,0,0,10052738.981184,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +64 B <br> **+8 B** |
| WebGPU | 819.3 kB <br> **221.5 kB** | 821.4 kB <br> **220.7 kB** | +2.11 kB <br> **-800 B** |
| WebGPU Nodes | 818.8 kB <br> **221.4 kB** | 821 kB <br> **220.6 kB** | +2.53 kB <br> **-698 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 565.4 kB <br> **153.5 kB** | 522.1 kB <br> **140.7 kB** | -43.29 kB <br> **-12.87 kB** |
| WebGPU Nodes | 524.7 kB <br> **143.9 kB** | 478.8 kB <br> **130.5 kB** | -86.64 kB <br> **-13.41 kB** |",,"Related issue: https://github.com/mrdoob/three.js/pull/29187, https://github.com/mrdoob/three.js/pull/29250

**Description**

Introduce static type for Nodes. 

- [x] Added `static type` in `Node` and `NodeMaterial`
- [x] Removed `registerNode()` from `Node`
- [x] Removed `registerNodeMaterial()` from `NodeMaterial`
- [x] `NodeLoader`, `NodeObjectLoader` and `NodeMaterialLoader` -- added `.setNodes()`, `setNodeMaterials()`
- [x] Added instance method `createMaterialFromType()` in `MaterialLoader`


Making progress in tree shaking 🌳

![image](https://github.com/user-attachments/assets/f9cdab92-7f1b-4f88-b13a-a0dfbada8106)
",
29280,2024-08-31T21:29:42Z,2024-08-31T21:39:06Z,sunag,1,0,1,4,1,0,0,[],192.0,0,7616.0,0,0,0,0,10111217.228417,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 819.2 kB <br> **221.5 kB** | 819.3 kB <br> **221.5 kB** | +24 B <br> **+0 B** |
| WebGPU Nodes | 818.8 kB <br> **221.4 kB** | 818.8 kB <br> **221.4 kB** | +443 B <br> **+103 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 565.4 kB <br> **153.5 kB** | 565.4 kB <br> **153.5 kB** | +24 B <br> **+0 B** |
| WebGPU Nodes | 524.7 kB <br> **143.9 kB** | 524.7 kB <br> **143.9 kB** | -40.64 kB <br> **+1 B** |",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29272

**Description**

Fixed difference between `normalView` of `WebGLRenderer` and `WebGPURenderer`.",
29279,2024-08-31T20:34:31Z,2024-08-31T23:36:10Z,sunag,0,0,5,15,2,0,0,[],,0,10915.0,0,0,0,0,10111230.218707,,0,5,1,False,[],,,"**Description**

It had too many dots and the lighting was blown out.",
29265,2024-08-30T05:52:52Z,2024-08-30T06:21:07Z,mrdoob,1,0,1,18,2,0,0,[],94851.0,0,94851.0,0,0,0,0,10166593.750075,,0,1,1,False,['mrdoob'],Another one: https://github.com/mrdoob/three.js/commit/9a0ae535965dfabfff7f30eef5c3c16a7cc1ec5d,,"**Description**

Some examples were crashing in Chrome Beta because they fixed a bug with [`smoothstep`](https://www.w3.org/TR/WGSL/#smoothstep-builtin) validation.

<img width=""672"" alt=""Screenshot 2024-08-30 at 14 46 18"" src=""https://github.com/user-attachments/assets/0a7f9844-0eb4-4830-ab7c-21222a3b650f"">

More info: https://issues.chromium.org/issues/362640711

As per my fix... It's a dont-know-what-Im-doing fix 😇

Feel free to improve/fix it!

/cc @brunosimon @sunag ",
29257,2024-08-29T08:53:52Z,2024-08-29T22:34:15Z,aardgoose,2,2,4,41,1,2,0,['WebGPU'],267.0,0,131512.0,0,0,0,0,10205473.288412,,0,4,0,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |
| WebGPURenderer | 818.6 kB (221.2 kB) | 818.7 kB (221.3 kB) | +64 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |
| WebGPURenderer | 564.8 kB (153.4 kB) | 564.9 kB (153.4 kB) | +64 B | Hmm.. this broken `webgpu_compute_audio` example.",,"As title. 

Reduces duplicate textureView creation (webgpu_performance example from over 5000 textureViews to less than 200).

Also reordered to remove unrequired dimension selection from video texture path.


","`mipLevelCount` returns undefined here Interesting, textureData never has had a mipLevelCount property, so conveniently the default undefined value worked. Fixed to use the value from the WebGPU texture object."
29273,2024-08-30T15:08:15Z,2024-08-30T16:57:28Z,sunag,1,0,1,387,9,0,0,[],168.0,0,22251.0,0,0,0,0,10205872.147527,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 818.7 kB <br> **221.3 kB** | 818.6 kB <br> **221.3 kB** | -81 B <br> **+8 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 564.9 kB <br> **153.4 kB** | 564.8 kB <br> **153.4 kB** | -81 B <br> **-71 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/28650, https://github.com/mrdoob/three.js/pull/28328

**Description**

Added a new `three.webgpu.nodes.js` build and `BasicNodeLibrary` without default Materials from library. This is an early version, it is only compatible with `NodeMaterials` but will be compatible with standard materials after https://github.com/mrdoob/three.js/pull/28328.
",
29271,2024-08-30T11:16:28Z,2024-08-30T11:54:51Z,RenaudRohlinger,1,0,1,13,1,1,1,[],159.0,0,2303.0,0,0,0,0,10239727.655378,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 685.4 kB <br> **169.7 kB** | 685.4 kB <br> **169.7 kB** | +0 B <br> **+0 B** |
| WebGPU | 818.7 kB <br> **221.3 kB** | 818.7 kB <br> **221.3 kB** | +0 B <br> **-2 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 462 kB <br> **111.4 kB** | 462 kB <br> **111.4 kB** | +0 B <br> **+0 B** |
| WebGPU | 564.9 kB <br> **153.4 kB** | 564.9 kB <br> **153.4 kB** | +0 B <br> **+0 B** |",,"Related issue: #28571

**Description**
Aligns with WebGLRenderer sorting objects in clip space.


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29261,2024-08-29T23:00:13Z,2024-08-29T23:11:52Z,sunag,1,0,1,2,1,0,0,[],157.0,0,702.0,0,0,0,0,10285504.158072,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |
| WebGPURenderer | 818.7 kB (221.3 kB) | 818.7 kB (221.3 kB) | +39 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |
| WebGPURenderer | 564.9 kB (153.4 kB) | 564.9 kB (153.4 kB) | +39 B |",,"Related issue: https://github.com/mrdoob/three.js/pull/29257#issuecomment-2319181461

**Description**

Fix view dimension if shared the property.
",
29251,2024-08-29T06:09:36Z,2024-08-29T06:38:37Z,mrdoob,1,0,4,209,5,0,0,[],47054.0,0,47055.0,0,0,0,0,10299789.227355,,0,4,1,False,['sunag'],Amazing!! <3,,"**Description**

Start tracking the size of the `build/three.webgpu.js`.",
29252,2024-08-29T06:12:20Z,2024-08-29T11:52:25Z,RenaudRohlinger,1,0,1,4,1,0,0,['TSL'],141.0,0,20405.0,0,0,0,0,10326275.559423,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

`InstancedPointsNodeMaterial` doesn't support `opacity`. This PR fixes the issue.


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29248,2024-08-28T20:47:06Z,2024-08-28T22:58:28Z,sunag,3,0,5,67,8,0,0,"['WebGPU', 'TSL']",149.0,0,53472.0,0,0,0,0,10327122.961917,,0,5,1,False,"['github-actions[bot]', 'donmccurdy', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | @WestLangley I improve the names to `linearSRGB` instead of just `linear` as you suggest in X https://github.com/mrdoob/three.js/pull/29248/commits/d0f9425e236463a3a3732f5fd18175950e4a6ff9 Note that for wide-gamut rendering, Linear-sRGB will not necessarily hold the role of ""working color space"", we'd instead want to render in Linear P3, Linear Rec. 2020, or perhaps ACEScg. That's not an urgent concern right now... but I wonder if naming with that ""working color space"" term might be more future-proof?

```javascript
const outputNode = node.fromWorkingColorSpace( targetColorSpace = renderer.outputColorSpace );
const linearNode = node.toWorkingColorSpace( sourceColorSpace = renderer.outputColorSpace );
```",,"**Description**

Examples:

```js
// with parameter

node = node.toOutputColorSpace( THREE.SRGBColorSpace );
node = node.toWorkingColorSpace( THREE.SRGBColorSpace );

// without parameter -- it's will use `renderer.outputColorSpace`
// this turn more security the conversion of `sRGB` or `DisplayP3` to `linearSRGB` and vice versa.
// the user does not need to worry about the output display to work with color space conversions

node = node.toOutputColorSpace();
node = node.toWorkingColorSpace();
```

- [x] Improve TSL ColorSpace
- [x] Revision `currentColorSpace`
- [x] Added `currentToneMapping`",
29255,2024-08-29T08:18:31Z,2024-08-29T11:24:57Z,RenaudRohlinger,2,0,2,13,1,0,0,['WebGL Backend'],163.0,0,11186.0,0,0,0,0,10327925.06913,,0,2,1,False,"['github-actions[bot]', 'RenaudRohlinger']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |
| WebGPURenderer | 818.5 kB (221.2 kB) | 818.5 kB (221.2 kB) | +31 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |
| WebGPURenderer | 564.7 kB (153.3 kB) | 564.8 kB (153.3 kB) | +31 B | First live preview of #29251 /cc @mrdoob 👀 ",,"Related issue: #29213

**Description**

Ensure correct pixel storage parameters are set before updating texture data. Fixes videos being flipped on resize (#29213) and aligns behavior with the WebGLRenderer.


<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29254,2024-08-29T07:53:45Z,2024-08-29T11:22:43Z,RenaudRohlinger,3,0,1,8,1,0,0,['WebGL Backend'],149.0,0,12538.0,0,0,0,0,10328059.490954,,0,1,1,False,"['github-actions[bot]', 'RenaudRohlinger', 'mrdoob']","This PR along with #29255 fixes some issues on the official examples, should we include these in r168 or r169? /cc @mrdoob @Mugen87 @sunag ### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |
| WebGPURenderer | 818.5 kB (221.2 kB) | 818.6 kB (221.2 kB) | +79 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Filesize `dev` | Filesize PR | Diff |
|---|---|---|---|
| WebGLRenderer | 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |
| WebGPURenderer | 564.7 kB (153.3 kB) | 564.8 kB (153.4 kB) | +78 B | > This PR along with #29255 fixes some issues on the official examples, should we include these in r168 or r169? /cc @mrdoob @Mugen87 @sunag

They can go in r168. I'll do the release tomorrow (in ~12 hours).",,"Related issue: #26516 #29213

**Description**

Use sRGB decode until browsers properly support SRGB8_ALPHA8 with video textures (#26516)

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29187,2024-08-20T15:17:13Z,2024-08-27T02:12:24Z,sunag,11,1,29,4251,264,1,0,[],3811.0,0,738844.0,0,0,0,0,10352746.095884,,0,29,1,False,"['RenaudRohlinger', 'WestLangley', 'mrdoob', 'github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | Related: https://github.com/mrdoob/three.js/issues/29156 >some chaining methods have been removed in favor of tree-shaking

Some TSL operators can now be chained and others cannot. IMO, this results in a confusing API.

Users will be annoyed that they can't remember which ones can, and which ones cannot, be chained.

Can we solve this -- even if it hurts tree-shaking somewhat? > Some TSL operators can now be chained and others cannot. IMO, this results in a confusing API.

@WestLangley Can you list the TSL operators you are currently using that are no longer available? This might help me get a second understanding of the issue. @sunag I rewrote my code to accommodate this PR, but I believe this was the original set.

```
bloom
sepia
posterize
dof
saturation
vignette
``` There’s also more here: https://github.com/mrdoob/three.js/pull/29238.

Also I would say that all of these feel quite niche and case-specific, making them more suitable as third-party nodes.

And if a developer wants to use them as chainabable it is still possible in user-land through addMethodChaining. > @sunag I rewrote my code to accommodate this PR, but I believe this was the original set.
> 
> ```
> bloom
> sepia
> posterize
> dof
> saturation
> vignette
> ```

Maybe these nodes should be addons instead of being in core? Maybe that'll help to understand what's chainable and whats not. > Maybe these nodes should be addons instead of being in core?

Would we then have two imports? Or would it be something else?
Some nodes that are in the core are not chainable like `texture`, `uniform`, `vec*`, ...

```js
import { texture, uniform } from 'three/tsl';
import { saturation, posterize } from 'three/addons/nodes/TSLAddons.js';
``` Or something like this...

```js
import { texture, uniform } from 'three/tsl';
import { posterize } from 'three/addons/tsl/display/posterize.js';
import { saturation } from 'three/addons/tsl/display/saturation.js';
``` I think I need more one day to review some items in this PR 😇 > I think I need more one day to review some items in this PR 😇

@mrdoob [Done](https://github.com/mrdoob/three.js/pull/29250)! :)",,"Related issue: https://github.com/mrdoob/three.js/pull/28328

**Description**

This PR prepares the architecture for `three.webgpu.nodes.js` which will be done in another PR, some chaning methods have been removed in favor of tree-shaking and should be imported now.

We have `StandardNodeLibrary` all the Three.js shader inclusions from Materials to ToneMappings, this static part is only assigned to `three.webgpu.js` which will not have full support for `three-shaking`.

This is a big change and may impact some existing projects, but I think it will be the last big change until release.

- [x] Move `NodeMaterials` out of `Nodes`
- [x] Create `NodeLibrary` and `StandardNodeLibrary` support
- [x] Added support to `NodeLibrary`
- [x] Move `NodeLoader` out of `Nodes`
- [x] Create `TSLBase.js`
- [x] Revisions 1/2
- [x] Create `TSL.js`
- [x] Revision `Nodes`
- [x] Revision `Examples`
- [x] Revision `NodeLoader`
- [x] Revisions 2/2","## Unused variable, import, function or class

Unused import nodeProxy.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2419)"
29250,2024-08-29T03:53:17Z,2024-08-29T04:25:38Z,sunag,1,0,7,1568,193,0,0,"['WebGPU', 'TSL']",139.0,0,1944.0,0,0,0,0,10353082.891205,,0,7,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: https://github.com/mrdoob/three.js/pull/29187, https://github.com/mrdoob/three.js/pull/29187#issuecomment-2316458805

**Description**

- [x] Added a lot of `/*@__PURE__*/`
- [x] Rename `registerNodeClass` -> `registerNode`
- [x] Added `registerNodeMaterial`
- [x] `registerNode` & `registerNodeMaterial` -- Introduce support for tree-shaking
- [x] Fix `node.type` and `nodeMaterial.type`",
29249,2024-08-28T22:34:15Z,2024-08-28T22:42:27Z,sunag,1,0,3,32,5,0,0,['WebGPU'],146.0,0,504.0,0,0,0,0,10373665.322617,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: https://github.com/mrdoob/three.js/issues/29162#issuecomment-2307485084

**Description**

Update `viewport` and `scissor` to WebGPU convention, using top-left, instead of the bottom-left.",
29237,2024-08-27T07:56:27Z,2024-08-27T08:18:30Z,aardgoose,1,0,1,21,1,1,1,['WebGPU'],144.0,0,125495.0,0,0,0,0,10387742.987695,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"as title
",
29239,2024-08-27T13:21:26Z,2024-08-28T15:48:40Z,aardgoose,1,0,1,126,3,0,0,[],146.0,0,105992.0,0,0,0,0,10387747.711566,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"The existing code uses a renderBundle per object. Create a single renderBundle in preparation for bindGroup sorting and setBindGroup() minimisation,using a renderBundle currentSet{} object. 

This combined with PR #27388 (single buffer for uniform buffers), I get a Chrome GPU Process frame time reduced from 10ms to 1.5ms.  



",
29245,2024-08-28T10:01:58Z,2024-08-28T15:38:16Z,aardgoose,1,0,1,10,2,0,0,[],143.0,0,31558.0,0,0,0,0,10387750.345468,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Two small optimisations.

WebGPU - check if timestamps are available in init() only.  

De-proxy node objects in getCache() where TSL magic is not required for cache key generation (#29094) - visible in performance profiles.
",
29240,2024-08-27T19:16:01Z,2024-08-28T13:55:09Z,WestLangley,2,4,1,2,1,2,0,[],153.0,0,82766.0,0,0,0,0,10389700.154424,,0,1,1,False,"['github-actions[bot]', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | @aardgoose
@Mugen87

As discussed in the comments, this PR was modified, and no longer injects the material name into the shader.",,"Like so.

<img width=""667"" alt=""Screenshot 2024-08-26 at 9 31 58 PM"" src=""https://github.com/user-attachments/assets/ec6877af-7b9c-4bb5-9c61-008c775afb4c"">

It also applies the same injection to both vertex and fragment.

This PR only implements the change for the WebGL backend.
","Hmm.. I think this makes it difficult to share the `GPU Program` because it uses the entire code as a comparison for compilation. Oh well...
 Could you modify this PR just to add `this.getSignature()`? Done!"
29184,2024-08-20T11:24:01Z,2024-08-21T09:26:24Z,Mugen87,8,0,3,363,6,0,0,[],141.0,0,710099.0,0,0,0,0,10395487.721054,,0,3,1,False,"['Mugen87', 'mrdoob', 'github-actions[bot]', 'cmhhelgeson', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | I'm not sure why `webgpu_backdrop_water` fails with this PR. AFAICS, the PR does not touch related logic... Would it make sense to collapse these classes into a shared StereoPassNode or class? It seems like there's lots of shared functionality between anaglyph and parallax? There is already `StereoPassNode` but it works differently than `AnaglyphPassNode` and `ParallaxBarrierPassNode`. So it would also be required to name a shared module differently. 

This kind of optimization is something that I would consider in a subsequent PR though. I've updated the screenshot for `webgpu_backdrop_water` and it seems there is some sort of timing issue. In the new screenshot, the spheres are at different positions. Not sure why this happens. If this is somehow related to the latest performance improvements, I wonder why the CI did not fail earlier... > I've updated the screenshot for webgpu_backdrop_water and it seems there is some sort of timing issue. In the new screenshot, the spheres are at different positions. Not sure why this happens. If this is somehow related to the latest performance improvements, I wonder why the CI did not fail earlier...

Thanks @Mugen87, I also didn't understand exactly what happened, but it's good to see it working again. Hmm... How come we're adding so many thing to `src`? Shouldn't these nodes be addons? I think it was some sort of ""unspoken agreement"" to add node classes in the core. We should establish a policy like in https://github.com/mrdoob/three.js/pull/29187#issuecomment-2314174423 to address this issue.",,"Related issue: #29173

**Description**

Adds pass nodes for anaglyph and parallax barrier effects. Instead of creating an example per node class, the effects are selectable in `webgpu_display_stereo`.
",
29216,2024-08-23T10:16:55Z,2024-08-28T07:46:14Z,LynX39,0,0,1,37,1,0,0,[],,0,422959.0,0,0,0,0,10427454.186502,,0,1,1,False,[],,,"**Description**
Implemented various missing parameters in accordance with the [OpenUSD documentation](https://openusd.org/release/spec_usdpreviewsurface.html)., in order to improve the quality of the exported data.

In detail:

* Clearcoat and clearcoatRoughness maps have been added if the material is of type MeshPhysicalMaterial.

USDZ Model with clearcoat and clercoatRoughness params and without maps (preview from USDview Nvidia Omniverse)
![model_without_clearcoat_maps](https://github.com/user-attachments/assets/f31a40bc-0313-4b41-bf41-1992a97e0f7f)

USDZ Model with clearcoat and clercoatRoughness params and maps (preview from USDview Nvidia Omniverse)
![model_with_clearcoat_maps](https://github.com/user-attachments/assets/47d45cf9-cb71-41e7-9f7f-995229f0540c)

USDZ Model with clearcoat and clercoatRoughness params and maps (photo from iPad Pro AR)
![ar_from_ipad_pro](https://github.com/user-attachments/assets/a37c9bbd-3f5b-4e2d-a773-64ed06134868)


* Parameters have been added to allow scaling of associated maps, using `inputs:scale` and utilizing the formula criterion provided by USD.
![scale_formula](https://github.com/user-attachments/assets/3126fe3e-8703-4abe-8076-27c68ca457b5)


*This contribution is funded by [Simtech](https://smth.it)*
",
29243,2024-08-27T23:30:33Z,2024-08-28T00:13:10Z,gfodor,2,0,1,3,1,1,1,[],138.0,0,2557.0,0,0,0,0,10454639.044644,,0,1,1,False,"['github-actions[bot]', 'gfodor']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | -11 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | cc @gkjohnson ",,"Related issue: [#29242 ](https://github.com/mrdoob/three.js/issues/29242)

**Description**

Fixes issue with BatchedMesh bounding box computation when instancing geometries.",
29241,2024-08-27T19:18:19Z,2024-08-27T19:56:45Z,sunag,1,0,1,7,1,0,0,[],149.0,0,2309.0,0,0,0,0,10470021.455189,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,Related issue: https://github.com/mrdoob/three.js/pull/29211,
29144,2024-08-15T12:51:18Z,2024-08-27T11:00:42Z,mrdoob,6,2,2,721,6,2,0,[],345.0,0,1030168.0,0,0,0,0,10502184.211348,,0,2,1,False,"['mrdoob', 'WestLangley', 'Mugen87']","Are you planning to remove `RGBMLoader` as well?

If so, is it possible to convert RGBM or LogLuv HDR textures to UltraHDR somehow? The thing is if we remove those loaders, it's not possible to import such HDR textures into `three.js` anymore (unless apps maintain the loaders for themselves).

On the other hand RGBM or LogLuv are quite special and I'm not sure we need to maintain them in this repository. If there is a need for importers, they can be maintained by other community members in third-party repositories. >Are you planning to remove RGBMLoader as well?

Also, is the plan to rename `RGBELoader` to `HDRLoader` -- for loading Radiance .hdr files -- or to remove `RGBELoader`, too? IMO, we should not remove `RGBELoader`. 

If we follow that logic, we could apply it in context of 3D assets as well and basically remove almost every loader except for `GLTFLoader`. @WestLangley 

> Also, is the plan to rename `RGBELoader` to `HDRLoader` -- for loading Radiance .hdr files -- or to remove `RGBELoader`, too?

Renaming `RGBELoader` to `HDRLoader` sounds good to me. @Mugen87 

> Are you planning to remove `RGBMLoader` as well?

Probably too? Okay, I'm fine with the removal of both loaders. 

I suspect they are only sporadically used because of their exotic character so there should not be that much of complains. With UltraHDR, there is now a better alternative as well.",,"Related: #29143

@Mugen87 Now that we have UltraHDR, I think we can remove this loader?","The respective E2E screenshot also needs to be removed, otherwise the CI complains. Done!"
29232,2024-08-26T12:19:57Z,2024-08-27T01:24:29Z,aardgoose,1,1,3,27,3,1,0,['WebGPU'],138.0,0,70499.0,0,0,0,0,10513335.120938,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"The current version based cache key generation for clipping contexts has the side effect of creating redundant pipeline objects, eg 9 redundant pipelines for the PMREM generator pass.  Fix this with a state based key. 

Equivalent changes made to #28237 for ClippingGroups.
","## Semicolon insertion

Avoid automated semicolon insertion (94% of all statements in [the enclosing function](1) have an explicit semicolon).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2416)"
29231,2024-08-26T10:15:49Z,2024-08-27T01:27:33Z,RenaudRohlinger,1,0,3,196,8,0,0,"['WebGPU', 'TSL']",141.0,0,54704.0,0,0,0,0,10536578.299988,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related: https://github.com/mrdoob/three.js/pull/24745

**Description**

This PR introduces support for `CompressedTextureArray` across both the WebGL and WebGPU backends.  This PR also includes an example to demonstrate the feature.

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29221,2024-08-23T18:25:55Z,2024-08-26T02:36:57Z,wcandillon,6,5,5,22,3,2,0,[],136.0,0,275834.0,0,0,0,0,10545243.266336,,0,5,1,False,"['github-actions[bot]', 'sunag', 'wcandillon', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | We have tried that before but it was necessary to revert this change, see https://github.com/mrdoob/three.js/issues/28868#issuecomment-2228131759, #28876. @Mugen87 is the issue that the quest browser returns the wrong `getPreferredCanvasFormat()`? What would be an acceptable solution? I can think about the following:
* Let the user override the canvas format when creating the WebGPURenderer.
* Use `getPreferredCanvasFormat()` or `BGRA8Unorm` depending on userAgent?

Let me know what what you think.    Can you create a function `WebGPUUtils.getPreferredCanvasFormat()` e apply the `userAgent` tests there? I love this idea thks ☺️ this is really exciting

On Sat 24 Aug 2024 at 15:27, sunag ***@***.***> wrote:

> Can you create a function WebGPUUtils.getPreferredCanvasFormat() e apply
> the userAgent tests there?
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/mrdoob/three.js/pull/29221#issuecomment-2308395511>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AACKXVQGV6E4URBYNTIIFHLZTCC3NAVCNFSM6AAAAABNAVASE6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGMBYGM4TKNJRGE>
> .
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>
 @sunag I tested this build on our side and it works great, hope you like it too :)",,"@sunag for Three.js to run on Android, BGRA8Unorm is not supported on many adapters. As WebGPU gets deployed on more browsers and more platforms, I suspect that this will be an issues on some browser/platforms combinations as well.","FYI @cabanier  > FYI @cabanier

Thanks! lgtm
Is this because Quest is returning the wrong preferred format? Yes.

Will we be able to remove this check soon? > Yes.
> 
> Will we be able to remove this check soon?

I'll take a look > Yes.
> 
> Will we be able to remove this check soon?

Quest browser after 34.5 will have a fix for this."
29222,2024-08-23T18:49:20Z,2024-08-24T00:51:59Z,aardgoose,1,0,1,2,1,1,1,[],135.0,0,235501.0,0,0,0,0,10584172.16733,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,Rebuilding the shader code every frame isn't recommended.,
29220,2024-08-23T16:51:40Z,2024-08-26T14:17:43Z,Barokoli,0,8,9,77,1,3,0,[],,0,249964.0,0,0,0,0,10576769.331554,,0,9,1,False,[],,,"During performance profiling i found that having selections with 500+ meshes where resulting in ~7ms twice per frame in the changeVisibilityOfNonSelectedObjects function due to the for loop and array setup.
I replaced the array with a set and now the function takes <1ms.

![beforeafter](https://github.com/user-attachments/assets/874b1534-5db9-4078-995b-bd350cf5c51c)

Thanks for the great library!
","Instead of creating a set per invocation of `changeVisibilityOfNonSelectedObjects()` how about transforming it to a module scope variable and clear it after each function call? ## Semicolon insertion

Avoid automated semicolon insertion (98% of all statements in [the enclosing function](1) have an explicit semicolon).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2415) Thanks for the review!

In b073ff1 instead of turning it into module scope I converted it to an object scope variable. 
Since the meshes are calculated multiple times during the rendering I figured it would make sense to persist the result within a render call.
For that I added a `_selectedMeshesDirty` flag that is set at the start of each render call since we don't know whether the selectedObjects array has been mutated from the outside.
The selectedMeshes set could also be module scope as you suggested but i was worried that could interfere with other Outline passes if I try to persist the data between steps.
I am also happy to go for the module scope solution if its better though! Instead of introducing a new flag, it might be easier to have a new `updateSelectionSet()` method which is called once in `render()`. Then `changeVisibilityOfNonSelectedObjects()` can work with the set. After that, the set is cleared.

The set itself should be indeed a module scope variable, I doubt there will be any side effects. Besides, if we clear it after each render, the set won't hold any references to 3D objects (which might affect GC). ## Semicolon insertion

Avoid automated semicolon insertion (98% of all statements in [the enclosing function](1) have an explicit semicolon).

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2417) Sounds good. Added the changes to 7f73881. 
Thanks for the insights! I did some refactoring to make things more consistent. The set is now a member like `_visibilityCache` and called `_selectionCache` . Would these changes work for you? Yes, that makes sense."
29230,2024-08-26T09:28:49Z,2024-08-26T09:35:46Z,sunag,1,0,1,10,1,0,0,[],138.0,0,421.0,0,0,0,0,10593684.087552,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: https://github.com/mrdoob/three.js/pull/29225#issuecomment-2309186773

**Description**

Fix sync `NodeFrame` state if render call tree are used.",
29226,2024-08-25T16:46:53Z,2024-08-25T20:08:45Z,renovate[bot],0,0,1,6,1,0,0,[],,0,12184.0,0,0,0,0,10642037.952043,,0,1,0,False,[],,,"[![Mend Renovate](https://app.renovatebot.com/images/banner.svg)](https://renovatebot.com)

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://togithub.com/github/codeql-action) | action | digest | `429e197` -> `2c779ab` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://www.mend.io/free-developer-tools/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4yNi4xIiwidXBkYXRlZEluVmVyIjoiMzguMjYuMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29223,2024-08-24T04:53:54Z,2024-08-24T13:28:00Z,RenaudRohlinger,1,0,1,18,4,0,0,['TSL'],137.0,0,30846.0,0,0,0,0,10752555.224856,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: https://github.com/mrdoob/three.js/pull/29211

**Description**

Prevent breaking change by re-introducing `viewportBottomLeft` via a fallback and included a deprecated warning.

Also updated some examples that were not up to date with the latest API.

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29218,2024-08-23T12:23:08Z,2024-08-23T14:51:31Z,sunag,4,0,1,43,2,0,0,[],145.0,0,16305.0,0,0,0,0,10826542.887707,,0,1,1,False,"['github-actions[bot]', 'wcandillon', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | Let's try :crossed_fingers: ❤️

https://github.com/user-attachments/assets/8b97746e-d69f-4a40-b9d8-946f6939a398

 Amazing!! Thank you for sharing 🎉",,"Related issue: Closes https://github.com/mrdoob/three.js/pull/29206#issuecomment-2306915925

**Description**

Improve fallback approach.  No need for `top-level await` and duplicate `adapter`.",
29217,2024-08-23T10:52:48Z,2024-08-23T12:46:54Z,aardgoose,1,0,4,25,13,1,1,[],146.0,0,19468.0,0,0,0,0,10828800.901589,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"As title, aids debugging.",
29186,2024-08-20T12:43:11Z,2024-08-20T13:06:15Z,aardgoose,1,0,1,5,1,1,1,['WebGL Backend'],142.0,0,250809.0,0,0,0,0,10850037.192006,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"The currentAnisotropy property is overwritten in createTexture -> backend.set( texture, {} ) after setTextureParameters() is called, so is never useful. 

",
29183,2024-08-20T10:52:53Z,2024-08-22T18:48:48Z,aardgoose,1,0,1,56,5,0,0,['WebGPU'],141.0,0,257397.0,0,0,0,0,10850067.766441,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"
The example webgpu_instancing_morph creates a new bindingGroup and textureView each frame when the DataArrayTexture contents are updated, which is redundant.

Rework the conditions for recreating a binding group, such that texture content only changes are ignored.

Also the backend updateBindings() and createBindings() methods do not take a pipeline object, update the base backend class and  calling functions.",
29215,2024-08-23T08:15:50Z,2024-08-23T08:22:02Z,Mugen87,0,0,1,3,1,0,0,[],,0,372.0,0,0,0,0,10857316.750085,,0,1,1,False,[],,,"Related issue: https://github.com/mrdoob/three.js/pull/29207#issuecomment-2306541631

**Description**

The post processing setup can be simplified.
",
29214,2024-08-23T08:05:32Z,2024-08-23T08:13:30Z,Mugen87,0,0,1,15,2,0,0,[],,0,486.0,0,0,0,0,10857820.942656,,0,1,1,False,[],,,"Reverts mrdoob/three.js#29127

see discussion in #29207.",
29204,2024-08-22T11:43:28Z,2024-08-22T11:44:22Z,WestLangley,2,0,1,3,1,0,0,[],142.0,0,69345.0,0,0,0,0,10862286.554447,,0,1,1,False,"['github-actions[bot]', 'WestLangley']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | It must match the size of the renderer's viewport.

Sorry, @sunag, I had to revert this to prevent more problems...",,"Reverts mrdoob/three.js#29193
",
29211,2024-08-22T18:18:07Z,2024-08-22T18:43:26Z,sunag,1,0,2,138,25,0,0,[],139.0,0,1523.0,0,0,0,0,10906430.827005,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: https://github.com/mrdoob/three.js/issues/29162#issuecomment-2300181905, https://github.com/mrdoob/three.js/issues/29162#issuecomment-2302569317

**Description**

- [x] Renaming `viewportTopLeft` to `viewportUV`.
- [x] Drop z-coordinate of `viewportCoordinate`
- [x] Remove `viewport + top/bottom-left/right`
",
29188,2024-08-20T17:45:09Z,2024-08-22T23:48:16Z,sunag,1,3,10,156,10,2,0,[],151.0,0,194590.0,0,0,0,0,10888141.922287,,0,10,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Update to TSL approach.","If the file does a `Fn` instead of a `Node`, should the file be renamed to `HashFn.js`? What do you think just `Hash.js` like [TriNoise3D.js](https://github.com/mrdoob/three.js/blob/dev/src/nodes/math/TriNoise3D.js)? That works too I think 👌"
29205,2024-08-22T13:09:50Z,2024-08-22T18:42:00Z,wcandillon,3,0,3,37,2,0,0,[],144.0,0,19935.0,0,0,0,0,10906516.674238,,0,3,1,False,"['github-actions[bot]', 'wcandillon', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | @sunag thank you for looking into it ☺️ This is my first PR in three.js Thanks @wcandillon, this approach is much better. I hope this PR is the first of many PRs :)",,"Related issue: #27426

**Description**

We are running three.js on a JS engine (Hermes) where`fn.toString()` does not return the source code of the function.
You can see a demo here: https://x.com/wcandillon/status/1825862686300672124
This is an alternative implementation of inputs that would fit.

I do have some question:
* I suspect that somewhere else in the code, inputs is checked with `Array.isArray` which will always return false (but it will not break the code). So there is probably more cleaning up that could be done here (I'm just not sure where).
* Running the build step adds formatting changes that seem unrelated to this change.
* The build files seem to contain unrelated changes as well.

Let me know what you think ☺️

",
29208,2024-08-22T14:59:12Z,2024-08-22T17:16:50Z,sunag,1,0,1,78,2,0,0,[],140.0,0,8262.0,0,0,0,0,10911628.756714,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Introducing the `flip*()` syntax: This feature allows you to easily flip texture coordinates. You can apply it either individually component or in combination. For example, use `node.flipY()` to flip along the Y-axis or `node.flipXY()` to flip along both the X and Y axes.
",
29203,2024-08-22T11:33:28Z,2024-08-22T12:06:17Z,RenaudRohlinger,1,1,1,89,5,2,1,['TSL'],140.0,0,1969.0,0,0,0,0,10930265.862363,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Adds color support to `BatchedMesh` in the `WebGPURenderer` and includes some code cleanup.

*This contribution is funded by [Utsubo](https://utsubo.com)*
","Nice, puppeteer is now happy with this example."
29193,2024-08-21T02:02:44Z,2024-08-22T00:10:18Z,sunag,1,1,1,3,1,1,0,[],145.0,0,89491.0,0,0,0,0,10963388.712229,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: https://github.com/mrdoob/three.js/issues/29162

**Description**

Honor the renderer pixel ratio when using `viewport`.

/cc @WestLangley ",This was correct to begin with. I would revert this PR.
29120,2024-08-12T14:04:23Z,2024-08-21T21:07:07Z,mrxz,5,0,1,57,1,0,0,[],266.0,0,802964.0,0,0,0,0,10984217.511666,,0,1,1,False,"['github-actions[bot]', 'mrxz', 'cabanier', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.2 kB (169.6 kB) | +43 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +43 B | @cabanier Looking good? > @cabanier Looking good?

Does this update the cameras for the left and right eye? It seems like only the main camera is updated and I seem to remember that one is only used to do culling. > Does this update the cameras for the left and right eye?

Yes, their `near/far` are updated [here](https://github.com/mrdoob/three.js/pull/29120/files#diff-a27b9d3ba68457069cc8ff521208ae9d0cc6d9256f6f48ada6316fc2d732ba7eR558-R559) (like before) and their projection matrices are taken from the `XRView` each frame. There should be no reason to manually (re)construct the projection matrices. > > Does this update the cameras for the left and right eye?
> 
> Yes, their `near/far` are updated [here](https://github.com/mrdoob/three.js/pull/29120/files#diff-a27b9d3ba68457069cc8ff521208ae9d0cc6d9256f6f48ada6316fc2d732ba7eR558-R559) (like before) and their projection matrices are taken from the `XRView` each frame. There should be no reason to manually (re)construct the projection matrices.

Great! lgtm!",,"Related issue: #29098

**Description**

The `depthFar` and `depthNear` values coming from the depth-sensing module could result in invalid projection matrices (`NaN` values). These errors would propagate (left, right, XR and user camera) resulting in a broken state after exiting the XR session.

This PR includes three changes:

- Only recompute a union projection matrix when far plane is finite. In case of an infinite far plane, reuse the projection matrix of the left view. Offsetting the camera is sufficient to fully include both view volumes, assuming the projections are symmetric (see https://computergraphics.stackexchange.com/a/1737)
- Don't update the `far` and `near` properties of the user camera, instead always treat these as input to _set_ the `far`/`near` of the renderState. When depth-sensing is active, the relevant `depthNear`/`depthFar` values are used for rendering, but not written back to the user-camera.
- Remove calls to `updateProjectionMatrix` added in [6e3137](https://github.com/mrdoob/three.js/commit/6e3137aca34c292dccd137d4c775ae15e2a79ed7). These calls aren't needed, as the projection matrices for the left and right view come directly from the WebXR API and are computed in `setProjectionFromUnion` for `cameraXR`. In fact, as the comment above it indicates, the new far/near values only take effect next frame, so immediately computing them is incorrect for that frame.

<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Fern Solutions](https://fern.solutions)*
",
29199,2024-08-21T14:18:27Z,2024-08-21T15:59:54Z,Methuselah96,0,0,1,8,1,1,1,[],,0,6207.0,0,0,0,0,11002530.888158,,0,1,1,False,[],,,"Related issue: #29013

**Description**

`Object3D` already defines an `up` property that is a normal `Vector3`, so overriding it with a `UniformNode` could be problematic. This PR renames the `up` property to `upUniform` to avoid overriding the base property with a value of a different type.
",
29136,2024-08-14T15:17:42Z,2024-08-14T15:33:50Z,Mugen87,5,0,1,24,12,0,0,[],145.0,0,603867.0,0,0,0,0,11006116.507021,,0,1,1,False,"['github-actions[bot]', 'arodic', 'mrdoob']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.4 kB (169.7 kB) | +268 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | Wow!!! I’ve programmed my hibernation chamber to wake me up when this PR finally merges. I did not expect to wake up as soon as 2024!!!

Please forgive my snark but I do wonder what has changed?

I’ve made multiple efforts over the years to refactor controls that had a lot of duplicated logic and same bugs reappearing across multiple controls. The argument against it was that controls are just “examples” and don’t belong to threejs core. Has this stance finally changed??? Only `Controls.js` has been added to core. The actual controls files remain in ""examples"" 😇 Same thing I’ve proposed years ago. Anyway, super stoked this is finally happening! Slowly but surely!™ 😁",,"Related issue: https://github.com/mrdoob/three.js/pull/29079#issuecomment-2288145594

**Description**

As suggested in https://github.com/mrdoob/three.js/pull/29079#issuecomment-2288145594, the PR moves `Controls` into core.",
29013,2024-07-29T14:06:28Z,2024-07-29T18:56:27Z,Mugen87,0,6,3,327,4,3,0,[],,0,1987933.0,0,0,0,0,11008725.634204,,0,3,1,False,[],,,"Related issue: -

**Description**

This PR ports `Sky` to `WebGPURenderer`.","I had to use a custom version of `cameraPosition` since I get the following WebGPU warning when using the definition from `CameraNode`.

> [Buffer ""bindingBuffer_camera""] bound with size 64 at group 0, binding 1 is too small. The pipeline ([RenderPipeline ""renderPipeline""]) requires a buffer binding which is at least 176 bytes. This binding is a uniform buffer binding. It is padded to a multiple of 16 bytes, and as a result may be larger than the associated data in the shader source. While encoding [RenderPassEncoder (unlabeled)].DrawIndexed(36, 1, 0, 0, 0).

There is no issue with a WebGL backend. It may be related to this https://github.com/mrdoob/three.js/pull/28953 @Mugen87 `Object3D` already defines an `up` property that is a normal `Vector3`. Thoughts on renaming this to something else to avoid any potential issues? Or maybe you expect it be safe to override it? Do you think `upUniform` would do the trick? Yeah, that should do it! https://github.com/mrdoob/three.js/pull/29199"
29196,2024-08-21T10:07:36Z,2024-08-21T12:10:39Z,lenville,0,2,2,18,1,2,1,[],,0,7387.0,0,0,0,0,11016403.862238,,0,2,1,False,[],,,"**Description**

This PR improves the robustness of the `PCDLoader` by refining how header information is parsed from PCD files. The update addresses an issue where the regex patterns used to extract header fields such as `VERSION`, `FIELDS`, `SIZE`, and others did not account for multi-line strings. This could lead to incorrect parsing, especially when the header data wasn't at the start of the entire string.

The need for this fix arose due to the addition of new, extended custom fields in PCD files. These custom fields introduced more complex formatting, causing the previous regex patterns to fail in certain cases.

**Changes include:**
- Modified regex patterns to use the `^` anchor combined with the `m` (multiline) flag, ensuring that each pattern matches the beginning of each line within the header string.
- This update prevents potential mismatches and enhances the accuracy of the PCD file parsing process.

These improvements are essential for handling PCD files with complex or non-standard formatting, including those with extended custom fields, ensuring that the loader remains reliable across different datasets.

Tests have been run on various PCD files, including those with custom fields, to confirm that these changes work as expected.","This line and three subsequent ones do not look right. > This line and three subsequent ones do not look right.

thanks, I'm done fixing it"
29185,2024-08-20T12:18:22Z,2024-08-21T08:56:45Z,lenville,2,0,1,18,1,1,1,[],74618.0,0,78720.0,0,0,0,0,11023625.306969,,0,1,0,False,"['lenville', 'Mugen87']","I had to revert your PR since I have realized after the merge that you have targeted `master`. Please file a new PR and target `dev` this time. > I had to revert your PR since I have realized after the merge that you have targeted `master`. Please file a new PR and target `dev` this time.

Sure, I've submitted a new PR targeting dev: [PR #29196](https://github.com/mrdoob/three.js/pull/29196).",,"**Description**

This PR improves the robustness of the `PCDLoader` by refining how header information is parsed from PCD files. The update addresses an issue where the regex patterns used to extract header fields such as `VERSION`, `FIELDS`, `SIZE`, and others did not account for multi-line strings. This could lead to incorrect parsing, especially when the header data wasn't at the start of the entire string.

The need for this fix arose due to the addition of new, extended custom fields in PCD files. These custom fields introduced more complex formatting, causing the previous regex patterns to fail in certain cases.

**Changes include:**
- Modified regex patterns to use the `^` anchor combined with the `m` (multiline) flag, ensuring that each pattern matches the beginning of each line within the header string.
- This update prevents potential mismatches and enhances the accuracy of the PCD file parsing process.

These improvements are essential for handling PCD files with complex or non-standard formatting, including those with extended custom fields, ensuring that the loader remains reliable across different datasets.

Tests have been run on various PCD files, including those with custom fields, to confirm that these changes work as expected.",
29195,2024-08-21T08:57:12Z,2024-08-21T08:57:18Z,Mugen87,1,0,1,18,1,0,0,[],309.0,0,1802.0,0,0,0,0,11026214.409226,,0,1,0,False,['Mugen87'],Actually I have fixed the commit history in `master` with a force-push (ugh). ,,Reverts mrdoob/three.js#29185,
29094,2024-08-09T03:25:11Z,2024-08-09T03:56:44Z,sunag,3,0,2,19,3,0,0,[],155.0,0,1045731.0,0,0,0,0,11039006.92697,,0,2,1,False,"['github-actions[bot]', '0b5vr']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.5 kB) | 462 kB (111.5 kB) | +0 B | This PR improves the CPU load on WebGPURenderer!
It's still less performant compared to WebGLRenderer though, the bottleneck still comes from somewhere around NodeMaterial according to Chrome DevTools profiler.

![image](https://github.com/user-attachments/assets/89c5ff8f-7f48-4023-b459-78872caf66a0)
 about [`updateNode`](https://github.com/mrdoob/three.js/blob/d7ba0351543915d87d910c409aa7b08ef1611964/src/nodes/core/NodeFrame.js#L128), it seems we are simply doing crazy amount of `updateNode` invocation for `webgpu_performance.html`.

I count the call of `updateNode` for each `updateType` per single `renderAsync`:

```
""render"": 2397
""object"": 10376
""frame"": 6384
```

This is the content of `nodeBuilder.updateNodes`:

![image](https://github.com/user-attachments/assets/c725d306-9cd4-40f0-8c3c-46b1437fe49f)
",,"Related issue: https://github.com/mrdoob/three.js/pull/29066#issuecomment-2270384667

**Description**

`Proxy` should be avoided in the rendering cycle as they harm performance.",
29190,2024-08-20T19:30:22Z,2024-08-20T21:05:27Z,HunterLarco,0,0,2,15,2,0,0,[],,0,5705.0,0,0,0,0,11070722.122397,,0,2,1,False,[],,,"**Description**

After being merged, additional feedback was provided on https://github.com/mrdoob/three.js/pull/28654 (see [comment](https://github.com/mrdoob/three.js/pull/28654#issuecomment-2181589740))

> The example is unfortunately not in an ideal state since a black screen by default isn't good. Instead of using a lil-gui, what do you think about cycling through the layers (1, 2, 3) in a fixed interval?
> If the E2E test fails, just add it to the exception list.

> Alternatively, I could just initialize the example by writing the first 3 layers to the screen and then letting users navigate the dat.gui. Do you have a preference?

> Let's use this approach since webgl_texture2darray_compressed is already animated.

This PR does just that, it updates the example to initialize with the first 3 layers of the spirited away reel. 

cc @Mugen87 

*This contribution is funded by [SOOT](https://soot.com)*
",
28654,2024-06-13T23:23:28Z,2024-06-20T21:13:38Z,HunterLarco,9,10,19,429,7,3,1,[],122.0,0,5861311.0,0,0,0,0,11076331.526152,,0,19,1,False,"['github-actions[bot]', 'HunterLarco', 'RenaudRohlinger', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 679.4 kB (168.3 kB) | 681.3 kB (168.7 kB) | +1.83 kB |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 457.4 kB (110.4 kB) | 459.4 kB (110.9 kB) | +1.99 kB | It seems like the provided example is failing just on windows CI=3. I'm not familiar with the difference between CI 0, 1, 2, and 3. I'd appreciate some guidance on what next steps to take and why CI=3 would fail while [0-2] succeeded. I tried to simplify the example as much as possible to fix the CI, but it seems that Windows might behave differently than macOS on this.

The CI running under Windows generates a diff of 2.3%:
>  Diff wrong in 2.3% of pixels in file: webgl_texture2darray_layerupdate

Did you also generate the screenshot under macOS? If so, could you try to run it on a Windows see if anything behave differently, and if not maybe try to generate the example on it. If you have troubles with this particular example, let's put on the exception list for now:

https://github.com/mrdoob/three.js/blob/abbf28a79a6f0a6223a4ecba22401a125c8af77e/test/e2e/puppeteer.js#L43 Fixed! I realized that the use of `setInterval` in the example was causing flakiness in CI. To resolve this, the example has been modified so that the controls GUI can be used to manually move textures from a source array into a dest array. In fact this is nice because it allows for even more control/experimentation with the feature.


https://github.com/mrdoob/three.js/assets/2695807/cce6afb5-5e7b-4efe-b734-e2d21fa0a843

 Would it be possible to get this in for r166? Until landed, ETC2 formats cannot be used with `addLayerUpdate` which is unfortunate because it means that iOS and Safari are both forced into less performant texture array updates. It would be nice to catch the next release so that my company can improve our rendering for Safari + mobile users. The example is unfortunately not in an ideal state since a black screen by default isn't good. Instead of using a lil-gui, what do you think about cycling through the layers (1, 2, 3) in a fixed interval? 

If the E2E test fails, just add it to the exception list. > The example is unfortunately not in an ideal state since a black screen by default isn't good. Instead of using a lil-gui, what do you think about cycling through the layers (1, 2, 3) in a fixed interval?

Sure! That was the original example earlier in this PR, I can put up another change to revert to that version of the example (with an exception in E2E testing).

Alternatively, I could just initialize the example by writing the first 3 layers to the screen and then letting users navigate the dat.gui. Do you have a preference? > Alternatively, I could just initialize the example by writing the first 3 layers to the screen and then letting users navigate the dat.gui. Do you have a preference?

Let's use this approach since `webgl_texture2darray_compressed` is already animated.",,"**Description**

In https://github.com/mrdoob/three.js/pull/27972 I added logic which allows three.js clients to update specific layers within a texture array and in doing so authored [this code](https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLTextures.js#L978-L1027) which determines the number of bytes required to represent a single layer within a texture array.

This code is accurate for many format-type pairs, but not all. In this PR I updated the logic to include all format-type pairs currently supported by THREE. The impact is that `setLayerUpdate` will now be accessible to more projects.

**Design Notes**

I've written this PR so that `TextureUtils.getByteLength` is exposed as a helper to clients. My company often works with texture arrays and would get a lot of value by having this method available. It's frequently helpful when managing memory to know how large a layer is. Knowing this, I feel it's a good helper to expose.

*This contribution is funded by [SOOT](https://soot.com)*
","## Property access on null or undefined

The base expression of this property access is always undefined.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2259) ## Property access on null or undefined

The base expression of this property access is always undefined.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2260) Can this function be internal or is it required for the user to have access to it?

If possible, I would prefer to not expose it and move the logic to `WebGLUtils` instead. In a different PR, there is the plan to add `TextureUtils` as an addon in `examples/jsm` (see https://github.com/mrdoob/three.js/pull/28512#issuecomment-2139001685). It is not ideal to have the same module in the core and as an addon. Oh wait, I see `getByteLength()` is used in the new example... Since this is an advanced feature, I would probably not expose the helper for now and inline the size computation in the example. Hmm, I think `addLayerUpdate` has limited value if three doesn't provide clients a way to know the byte bounds of a single layer. You need `TextureUtils.getByteLength` to know which subarray within the `CompressedArrayTexture`'s data to update. We could make this method internal, but then it would force clients to either implement this logic themselves or copy/paste it from the three repo. And inlining would fail in the example because the KTX2Loader dynamically selects a format + type depending on the underlying WebGL context. There's no guarantee that the hard-coded byte length will be consistent on different devices. (also thanks for the quick review) Let's see how we can organize the code regarding #28512. The code in https://github.com/mrdoob/three.js/pull/28512 is so compact so I think we can move it in `src` as well. That means there is no need to update this PR.

It's definitely good that the layer size computation in `uploadTexture()` is moved into a helper function. "
28907,2024-07-17T21:34:53Z,2024-07-17T21:38:45Z,aardgoose,1,0,1,16,2,0,0,[],136.0,0,2896458.0,0,0,0,0,11110099.854057,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 683.7 kB (169.3 kB) | 683.7 kB (169.3 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 460.9 kB (111.2 kB) | 460.9 kB (111.2 kB) | +0 B |",,"Fix typo horizonal -> horizontal.

Also fixed in Nodes BloomPass.js where it was replicated.
",
29158,2024-08-17T14:01:13Z,2024-08-19T16:27:47Z,aardgoose,3,4,2,22,4,2,0,[],145.0,0,277036.0,0,0,0,0,11078342.394442,,0,2,1,False,"['github-actions[bot]', 'aardgoose', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | Do you think we still need this workaround? https://github.com/mrdoob/three.js/pull/27447 > Do you think we still need this workaround? #27447

Sadly, we still do.  ",,"Currently bindGroups and bindGroupLayouts are creates 1:1.  Cache layouts per bindGroup definition, and reused.

webgpu_materials_toons:

layouts without caching 404,
layouts with caching: 6

webgpu_materials_video:

Without caching creates many layouts per frame., with caching 6","`cacheKey` seems to suggest a string, I think we could have `bindingsReference` or something similar. I think interessing complete `cacheKey|bindingsReference = []` to avoid undefined values. Done done"
29090,2024-08-08T18:43:20Z,2024-08-08T18:46:58Z,aardgoose,0,0,5,16,3,1,1,[],,0,1005944.0,0,0,0,0,11110108.298971,,0,5,1,False,[],,,as title,
29122,2024-08-12T19:59:43Z,2024-08-13T10:00:54Z,aardgoose,1,0,7,10,1,0,0,[],136.0,0,655750.0,0,0,0,0,11110119.704568,,0,7,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Allow simple subclassing of material: Related issue: #28160

",
29135,2024-08-14T13:15:03Z,2024-08-14T13:58:52Z,aardgoose,2,0,1,4,1,1,1,[],142.0,0,507187.0,0,0,0,0,11110163.339657,,0,1,1,False,"['github-actions[bot]', 'RenaudRohlinger']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | That was it, awesome @aardgoose! The WebGL version of `webgpu_performances.html` is back to 144fps!",,"Since #27367 the WebGL fallback renderer has equated the pipeline object to the  WebGLProgram object but is cached per renderObject.id (previously the VAO was included in the pipeline state).

This results in the creation of redundant program objects, as demonstrated in the webgpu_performance example where over 700 are created. 

Remove renderObject.id from the cache key to fix this issue.

@sunag @RenaudRohlinger ",
29148,2024-08-15T19:33:57Z,2024-08-16T02:13:40Z,aardgoose,2,0,3,18,4,1,1,[],138.0,0,397989.0,0,0,0,0,11110228.368793,,0,3,1,False,"['github-actions[bot]', 'Mugen87']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | The CI still seems to complain about the screenshot. I suggest you put the example on the exception list if a regeneration does not work. I'll revisit the exceptions at a later point.",,"Combining multiple renderpasses and scissoring with msaa can result in invalid framebuffer contents being used.

This is illustrated by the webgpu_textures_anisotropy example using the WebGL fallback renderer.

Apply the scissor coordinates to the framebuffer blit and invalidation operations.


",
29154,2024-08-16T16:02:43Z,2024-08-16T16:43:32Z,aardgoose,1,0,1,36,1,0,0,[],145.0,0,324259.0,0,0,0,0,11110232.554733,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"
The webgpu_occlusion example is currently broken, the blitFramebuffer operation is included in the scope of the query and produces an incorrect samples_passed count.

Fix this by moving endQuery() before other operations.

Also remove some duplicated consts. ",
29176,2024-08-19T13:24:10Z,2024-08-19T14:16:54Z,aardgoose,1,0,1,15,1,1,1,[],158.0,0,74563.0,0,0,0,0,11110242.243648,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"All RenderTargets now have a 'textures' array property.
",
29178,2024-08-19T16:52:06Z,2024-08-19T17:27:22Z,sunag,2,1,5,185,5,1,0,[],145.0,0,2120.0,0,0,0,0,11170210.496851,,0,5,1,False,"['github-actions[bot]', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | For the same result ![image](https://github.com/user-attachments/assets/fb6a69a7-eab1-4331-a5fa-bc8e43163318)
",,"**Description**

Update to TSL approach and simplification.
","## Unused variable, import, function or class

Unused import vec3.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2407)"
29173,2024-08-19T10:05:57Z,2024-08-19T16:31:51Z,Mugen87,1,0,2,241,5,0,0,[],138.0,0,23155.0,0,0,0,0,11173544.501711,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: -

**Description**

This PR adds `StereoPassNode` as a WebGPU pendant for `StereoEffect`. Since it is a pass node, you can do the same things like with a normal pass so it can be part of a post processing effect chain.

Side note: The issue mentioned in https://github.com/mrdoob/three.js/pull/29125#issuecomment-2286101554 was not related to `StereoCamera.update()`. The projection matrices for the right and left eye were already correct. It was just important to specify the `coordinateSystem` for both cameras otherwise `Renderer` would override the matrices.",
29175,2024-08-19T12:14:32Z,2024-08-19T16:28:52Z,RenaudRohlinger,1,0,1,12,2,1,1,['WebGPU'],153.0,0,15261.0,0,0,0,0,11173724.173097,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related: https://github.com/mrdoob/three.js/pull/26585

**Description**

`""float32-filterable""` is now [widely available](https://web3dsurvey.com/webgpu/features/float32-filterable) (89.71%). This PR adds the support of Float32 Filterable Textures when the feature is available.

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29177,2024-08-19T14:16:03Z,2024-08-19T14:23:35Z,RenaudRohlinger,1,0,1,5,1,1,1,['WebGL Backend'],142.0,0,452.0,0,0,0,0,11181243.348633,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

This PR align the behavior of the WebGLBackend with the WebGLRenderer (taken from `WebGLExtensions.init`).

This fixes multiple silent issues and improve compatibility for the upcoming migration, for instance, this change ensures that libraries relying on float32 textures with linear filtering do not break (as it depends on the `OES_texture_float_linear` extension).


<!-- Remove the line below if is not relevant -->

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
16275,2019-04-17T18:04:07Z,2019-04-18T05:26:31Z,WestLangley,5,3,2,153,2,2,0,[],67.0,0,168558444.0,0,0,0,0,11175967.510676,,0,2,1,False,"['donmccurdy', 'mrdoob', 'bhouston', 'WestLangley']","The helper is the little guy.

![Screen Shot 2019-04-17 at 1 40 50 PM](https://user-images.githubusercontent.com/1000017/56310355-b9281800-6119-11e9-9898-763232999969.png)
 I like this, although the outcome of https://github.com/mrdoob/three.js/pull/16223 discussion may affect it. `LightProbeVolumeHelper`? I think it is a light probe helper.  It visualizes a single light probe. :)  It is not a volume.  The volume helper would probably show the tetrahedral structure as lines with multiple little spheres. It does that now, but if individual light probes were no longer Object3D instances, should they still have individual helpers?

But LightProbe exists today, and LightProbeVolume is still a topic of active discussion, so I'm fine with merging this. :) Thanks!",,"This should be helpful to someone.

There is a bit of repeated shader code, but we can clean this up when things clarify.

```js
var helper = new THREE.LightProbeHelper( lightProbe, size );
scene.add( helper );
```","In the meanwhile, it would be preferable to have `LightProbeHelper` without a dependency to `ShaderMaterial` if possible so the helper is usable in `WebGPURenderer`.

Instead of directly evaluate the probe in a shader, how about converting the probe to an (irradiance) environment map and apply that to the sphere. The texture itself could be generated via JS as a`CanvasTexture`.
 Some questions, in no particular order...
1. If we didn't convert to an irradiance map, can we create the custom material in `LightProbeHelper` in a way that is supported?
2. Should we support `Lightprobe` defined by an irradiance map -- in addition to SH3?
3. Can we avoid the JS workflow recommended in your suggestion?
4. Light probes have demonstrated use in experimental XR, but that is all (so far) in three.js. Is it even worth pursuing such changes at this time? > If we didn't convert to an irradiance map, can we create the custom material in LightProbeHelper in a way that is supported?

I'm not sure how this would work. If we decide against the JS workflow, we probably need a separate helper class. Passing the renderer into the helper won't work because of incompatible imports (three.module.js vs three.webgpu.js).

> Should we support Lightprobe defined by an irradiance map -- in addition to SH3?

That would be a nice feature.

BTW: When I remember correctly big engines actually always sample irradiance environment maps in their shaders for performance reasons and do not evaluate the light probe.

> Can we avoid the JS workflow recommended in your suggestion?

I've initially thought our light probes should represent baked lighting but then I've seen probes might be updated per frame like in `webgl_lightprobe_cubecamera`. So I'm afraid the JS workflow would be too slow.

> Light probes have demonstrated use in experimental XR, but that is all (so far) in three.js. Is it even worth pursuing such changes at this time?

Granted, it is not a high priority task.

The main issue with our light probe implementation is the lack of a backing feature. However, there is #18371 which I would like to see merged at some point. Defining a JSON format for baked light probe volumes is a start for having exporters."
29171,2024-08-19T08:27:41Z,2024-08-19T14:18:15Z,Mugen87,1,0,1,366,3,0,0,[],19221.0,0,21034.0,0,0,0,0,11181564.010154,,0,1,1,False,['mrdoob'],I vote for removing it too 👍,,"Related issue: -

**Description**

We should revisit some `webgl_*` examples and decide whether or not the code should be migrated to `WebGPURenderer` or maybe removed altogether. We can do this in a case-by-case manner.

One demo that I like to suggest to remove is `webgl_materials_curvature`. It is focused on a very specific topic (curvature estimation) and I suspect it is not clear for most users looking at the demo what it is actually showcasing. Since it also has a dependency to `ShaderMaterial`, I vote to remove it.

",
29174,2024-08-19T11:47:35Z,2024-08-19T14:16:35Z,RenaudRohlinger,1,0,1,4,1,1,1,['WebGPU'],145.0,0,8940.0,0,0,0,0,11181665.219317,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: #29140

**Description**

The recent change in #29140 broke the BatchedMesh in the WebGPUBackend (example included). The issue is that `attribute.bytesPerElement`, for example `index.bytesPerElement` doesn't exist in the WebGPUBackend and the way `drawIndexed` was called wasn't actually correct. This PR fixes these issues.


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29172,2024-08-19T09:33:52Z,2024-08-19T10:46:03Z,RenaudRohlinger,1,0,1,4,1,0,0,['WebGL Backend'],148.0,0,4332.0,0,0,0,0,11194296.30253,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: #27071

**Description**

This PR addresses an issue in the WebGL backend where textures using linear filtering without mipmaps are rendered as completely black. The problem was caused by incorrect filtering, specifically the use of `LinearMipmapLinearFilter` instead of the appropriate filter for non-mipmapped textures.

For more context, an initial fix was made to address video textures breaking in the examples. However, this fix was only partial, as it did not cover all cases and still affects any linear filtered texture without mipmaps. More details in the related PR: 
https://github.com/mrdoob/three.js/pull/27610


*This contribution is funded by [Utsubo](https://utsubo.com)*
",
28584,2024-06-08T00:43:44Z,2024-08-05T10:04:45Z,gkjohnson,8,7,7,94,3,2,1,[],115.0,0,6250035.0,0,0,0,0,11201202.243845,,0,7,1,False,"['gkjohnson', 'Mugen87', 'github-actions[bot]', 'edankwan', 'pailhead']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 682.2 kB (169 kB) | 683.3 kB (169.2 kB) | +1.11 kB |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 459.4 kB (110.9 kB) | 460.6 kB (111.2 kB) | +1.11 kB | This needs more love. I guess you are planning to implement a depth peeling demo with a different PR, right? (that would be awesome, btw^^)

We should have at least one example that uses this new code path. > I guess you are planning to implement a depth peeling demo with a different PR, right? (that would be awesome, btw^^)

I can do this when I have a chance - I'll base it on the demo above. I'll have to leave it to someone else to make a nicer, reusable component, though. @Mugen87 is this okay to merge? Hi, I’m on a phone atm so can’t look at the code, but since 

https://github.com/mrdoob/three.js/pull/15490

is mentioned, is there any chance to inquire what was the issue with that one? For what it’s worth a depth peel example was proposed as well:

https://github.com/mrdoob/three.js/pull/15312

it was never rejected, but after a few years with no feedback I closed it. 

Does this solve the stencil sharing as well?


 For all intents and purposes this (DepthTexture) works exactly the same as the render buffer, before, it needed an extension, now it doesn’t? #15490 is basically solved now? > it was never rejected, but after a few years with no feedback I closed it.

I think I'd given quite a bit of feedback on that PR 😅 The solution in this PR is the one I had advocated for in #15490 since it aligns with three.js' existing API designs - though without an additional `DepthBuffer` class since an extension is no longer needed for readable depth textures.

> Does this solve the stencil sharing as well?

Yes. Stencils use the same depth buffer attachment.

> https://github.com/mrdoob/three.js/pull/15490 is basically solved now

It should be, yes. The demo in the [depth peeling test example I made](https://github.com/gkjohnson/depth-peeling-demo) used a three.js build from this PR to ensure everything wsa working.",,"Related issue: #19447, #15490, other [depth peeling discussions](https://github.com/mrdoob/three.js/issues?q=depth+peeling)

**Description**

This PR adjusts the `setRenderTarget` function to rebind the depth attachment so that it can be re assigned, unbound, and shared between multiple different render targets. If you set the render target and _then_ set `.depthTexture`, though, it will not take effect until `setRenderTarget` is called again.

This allows a lot more flexibility in the reuse of render targets and depth textures while avoiding texture read / write feedback loops. For example it allows for implementing depth peeling without having to manually copy data between textures to avoid this kind of feedback.

There's a demo [here](https://gkjohnson.github.io/depth-peeling-demo/) and [here](https://gkjohnson.github.io/depth-peeling-demo/#drone) demonstrating this PRs use for depth peeling:

| Before | After |
|---|---|
| <img width=""300"" alt=""image"" src=""https://github.com/mrdoob/three.js/assets/734200/615febf6-8b21-4c4b-98d6-742df4971a06""> | <img width=""300"" alt=""image"" src=""https://github.com/mrdoob/three.js/assets/734200/a7b3175b-7be1-4301-bb16-ec509f5aa4b5""> |
| <img width=""300"" alt=""image"" src=""https://github.com/mrdoob/three.js/assets/734200/483a37a5-8770-4a0f-9ba6-68c280bf0e8f""> | <img width=""300"" alt=""image"" src=""https://github.com/mrdoob/three.js/assets/734200/036e50ab-ee7b-4606-b4ee-c16ad2ab2a05""> |
| <img width=""300"" alt=""image"" src=""https://github.com/mrdoob/three.js/assets/734200/6107b013-df7e-45f1-87a6-8ba5425f1c3c""> | <img width=""300"" alt=""image"" src=""https://github.com/mrdoob/three.js/assets/734200/7d412a66-a904-4749-a900-3b99a75201e6""> |

cc @donmccurdy I know you've expressed interest in this kind of OIT previously.","I've tested the PR with [webgl_rtt](https://threejs.org/examples/webgl_rtt) and it does not look right (or at least optimal) to me that this code path is taken in normal `setRenderTarget()` calls. The additional bindings executed in `setupDepthRenderbuffer()` are a waste for all scenarios with a static depth buffer.

Isn't it possible to make the depth texture exchange more explicit? E.g. use a flag that is set to true when depth texture reference is changed? Good call - I just added a check in `setupDepthRenderbuffer` to avoid rebinding the depth buffer if it has already been bound. Let me know what you think. cc @Mugen87 - just wanted to check on this again. The PR has now been changed so that the depth buffer is only updated and rebound if it has changed. I don't understand this bit. 

`setupRenderTarget()` is only called when `__webglFramebuffer` is `undefined` (so no framebuffer creation happened so far). When is `__webglFramebuffer`, `undefined` but not `__webglDepthRenderbuffer`? Can we move this check in `setRenderTarget()` and do it before checking the dimensions of the depth texture? The dimensions check should be only relevant when exchanging depth textures and not in the default case. Just removed this. I added it when checking whether the depth buffer needed to be initialized in other functions but you're right it's not needed here. I realized this is a bit more complicated when I was thinking through it again. Hopefully the current change makes sense. We need account for the case the where a depth texture is used and already bound on a render target, then disposed - meaning the depth texture is implicitly unbound so we need to make sure the three.js state reflects this. I tested and pushed the current change to the depth peeling demo page."
29167,2024-08-18T20:01:40Z,2024-08-18T21:33:54Z,renovate[bot],0,0,1,6,1,0,0,[],,0,5660.0,0,0,0,0,11241702.029579,,0,1,0,False,[],,,"[![Mend Renovate](https://app.renovatebot.com/images/banner.svg)](https://renovatebot.com)

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [github/codeql-action](https://togithub.com/github/codeql-action) | action | digest | `eb055d7` -> `429e197` |

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

🔕 **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://www.mend.io/free-developer-tools/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4yNi4xIiwidXBkYXRlZEluVmVyIjoiMzguMjYuMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29166,2024-08-18T19:25:26Z,2024-08-18T21:37:05Z,WestLangley,0,0,1,85,1,1,1,[],,0,11047.0,0,0,0,0,11238489.134498,,0,1,1,False,[],,,"Use template literals.
",
29168,2024-08-18T20:01:59Z,2024-08-18T21:35:07Z,renovate[bot],0,0,1,140,1,0,0,[],,0,5589.0,0,0,0,0,11241755.11953,,0,1,0,False,[],,,"[![Mend Renovate](https://app.renovatebot.com/images/banner.svg)](https://renovatebot.com)

This PR contains the following updates:

| Package | Change | Age | Adoption | Passing | Confidence |
|---|---|---|---|---|---|
| [qunit](https://qunitjs.com) ([source](https://togithub.com/qunitjs/qunit)) | [`2.21.1` -> `2.22.0`](https://renovatebot.com/diffs/npm/qunit/2.21.1/2.22.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/qunit/2.22.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/qunit/2.22.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/qunit/2.21.1/2.22.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/qunit/2.21.1/2.22.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |
| [rollup](https://rollupjs.org/) ([source](https://togithub.com/rollup/rollup)) | [`4.20.0` -> `4.21.0`](https://renovatebot.com/diffs/npm/rollup/4.20.0/4.21.0) | [![age](https://developer.mend.io/api/mc/badges/age/npm/rollup/4.21.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![adoption](https://developer.mend.io/api/mc/badges/adoption/npm/rollup/4.21.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![passing](https://developer.mend.io/api/mc/badges/compatibility/npm/rollup/4.20.0/4.21.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) | [![confidence](https://developer.mend.io/api/mc/badges/confidence/npm/rollup/4.20.0/4.21.0?slim=true)](https://docs.renovatebot.com/merge-confidence/) |

---

### Release Notes

<details>
<summary>qunitjs/qunit (qunit)</summary>

### [`v2.22.0`](https://togithub.com/qunitjs/qunit/compare/2.21.1...2.22.0)

[Compare Source](https://togithub.com/qunitjs/qunit/compare/2.21.1...2.22.0)

</details>

<details>
<summary>rollup/rollup (rollup)</summary>

### [`v4.21.0`](https://togithub.com/rollup/rollup/blob/HEAD/CHANGELOG.md#4210)

[Compare Source](https://togithub.com/rollup/rollup/compare/v4.20.0...v4.21.0)

*2024-08-18*

##### Features

-   Add option to configure directory for virtual modules when preserving modules ([#&#8203;5602](https://togithub.com/rollup/rollup/issues/5602))

##### Pull Requests

-   [#&#8203;5602](https://togithub.com/rollup/rollup/pull/5602): feat: introduce the virtualDirname option to customize the virtual directory name ([@&#8203;TrickyPi](https://togithub.com/TrickyPi))
-   [#&#8203;5607](https://togithub.com/rollup/rollup/pull/5607): chore(deps): update typescript-eslint monorepo to v8 (major) ([@&#8203;renovate](https://togithub.com/renovate)\[bot], [@&#8203;lukastaegert](https://togithub.com/lukastaegert))
-   [#&#8203;5608](https://togithub.com/rollup/rollup/pull/5608): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://togithub.com/renovate)\[bot])
-   [#&#8203;5611](https://togithub.com/rollup/rollup/pull/5611): chore: fix the `noConflict` option in REPL. ([@&#8203;7086cmd](https://togithub.com/7086cmd))
-   [#&#8203;5613](https://togithub.com/rollup/rollup/pull/5613): chore(deps): lock file maintenance minor/patch updates ([@&#8203;renovate](https://togithub.com/renovate)\[bot])
-   [#&#8203;5614](https://togithub.com/rollup/rollup/pull/5614): chore(deps): lock file maintenance ([@&#8203;renovate](https://togithub.com/renovate)\[bot])

</details>

---

### Configuration

📅 **Schedule**: Branch creation - ""after 1am and before 7am on monday"" in timezone Asia/Tokyo, Automerge - At any time (no schedule defined).

🚦 **Automerge**: Enabled.

♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.

👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://togithub.com/renovatebot/renovate/discussions) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR was generated by [Mend Renovate](https://www.mend.io/free-developer-tools/renovate/). View the [repository job log](https://developer.mend.io/github/mrdoob/three.js).
<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzOC4yNi4xIiwidXBkYXRlZEluVmVyIjoiMzguMjYuMSIsInRhcmdldEJyYW5jaCI6ImRldiIsImxhYmVscyI6W119-->
",
29142,2024-08-15T09:20:02Z,2024-08-15T18:07:58Z,Mugen87,2,0,3,1590,2,0,0,[],184234.0,0,199414.0,0,0,0,0,11345648.04543,,0,3,1,False,"['hybridherbst', 'Mugen87']","Just a note, these kinds of changes (every line of the file has changed) unfortunately make it really hard to rebase changes in a fork to the latest three.js version... Unfortunately, there is no way around the refactoring which was long overdue. We must make the files more ES6 conform if we want to use ESNext features (like private fields and methods) in the future. Besides, code consistency is important as well. It's easier to maintain the controls if they follow the same principles (similar to loaders).",,"Related issue: https://github.com/mrdoob/three.js/pull/29085

**Description**

Same as https://github.com/mrdoob/three.js/pull/29085.

To clarify, this PR does not change any parts of the public API or behavior of `OrbitControls`. The class is now derived from `Controls` and implemented in a ES6 style like all other controls. The constructor can be side-effect free if no `domElement` is assigned to the ctor. When `domElement` is assigned after construction time, the app has to call `controls.connect()` once.",
29149,2024-08-16T01:03:36Z,2024-08-16T02:04:10Z,sunag,4,0,2,15,1,0,0,[],3626.0,0,182351.0,0,0,0,0,11306097.071106,,0,2,1,False,"['hybridherbst', 'sunag']","The `fps` parameter in `time` is ignored for now. Thanks!
That’s fine — the fps parameter was removed in MaterialX 1.39 anyways. Hi @sunag, do you happen to have a testcase online where this works?

I'm still getting errors with the file I had attached to the original issue, presumably because ""in"" is a reserved word:

<img width=""467"" alt=""image"" src=""https://github.com/user-attachments/assets/eb088473-a9f4-4c77-a7b9-b3cedd5650f7"">

Any ideas?

**EDIT:** I added a hack in getUniformFromNode to avoid this:

```js

	getUniformFromNode( node, type, shaderStage = this.shaderStage, name = null ) {

		if ( name === 'in' ) {

			console.warn( 'NodeBuilder: ""in"" is a reserved word, using ""inValue"" instead.', node, name 	);
			node.name = 'inValue';
			name = node.name;

		}

``` > I'm still getting errors with the file I had attached to the original issue, presumably because ""in"" is a reserved word:

This looks like an old issue, are you using `WebGLRenderer`?",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/28985


",
29157,2024-08-17T08:33:29Z,2024-08-17T09:25:48Z,Mugen87,0,0,1,3,3,0,0,[],,0,3139.0,0,0,0,0,11371916.865017,,0,1,1,False,[],,,"Related issue:  #29137

**Description**

Removes some remaining references to `NodeMaterial.normals`.",
29153,2024-08-16T08:35:34Z,2024-08-17T08:26:26Z,Mugen87,0,0,1,48,1,0,0,[],,0,85852.0,0,0,0,0,11375479.803799,,0,1,1,False,[],,,"Related issue: -

**Description**

Both methods have no purpose anymore since the engine can't be used with WebGL 1. Developers should use `isWebGL2Available()` and `getWebGL2ErrorMessage()` instead.",
29151,2024-08-16T02:39:58Z,2024-08-16T02:47:04Z,sunag,4,0,1,8,1,0,0,[],160.0,0,57169.0,0,0,0,0,11425499.04819,,0,1,1,False,"['github-actions[bot]', 'Spiri0', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | wow, that was quick. I made the change locally in ```src/renderers/webgpu/utils/WebGPUTextureUtils.js``` to test it. Normally that's enough. Unfortunately, I still only see mipmaps for the first texture in the array. Do I need to pay attention to anything else? Maybe be necessary build again three.webgpu.js Ah I understand, since r167 with three.webgpu.js the node system has become a core part. You were right sunag. I just had to rebuild three.webgpu.js
Now it's working properly",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/29145
",
29140,2024-08-15T02:58:36Z,2024-08-16T02:15:24Z,prince805962788,5,4,1,2,1,3,0,[],141.0,0,83808.0,0,0,0,0,11484143.048719,,0,1,0,False,"['github-actions[bot]', 'prince805962788', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | `bytesPerElement` does not seem to be a default value for `BatchedMesh`, I think that if your geometry has no indexes it should be 1 > `bytesPerElement` does not seem to be a default value for `BatchedMesh`, I think that if your geometry has no indexes it should be 1

but，when I using webglRenderer, it doesn`t throw Error It's is a bug, but the solution seems that should be like: `const bytesPerElement = hasIndex ? index.bytesPerElement : 1;` > It's is a bug, but the solution seems that should be like: `const bytesPerElement = hasIndex ? index.bytesPerElement : 1;`

Thank you, let me think about it again",,"**Description**
when using batchedMesh in WebGPURenderer, implement WebGPUBackend draw function, browser will throw Error.
The Error content is : reading ""bytesPerElement"" of null.
Because the value of bytesPerElement is read from index, it should actually be read from object.","`index !== undefined`, `index !== null`, `index !== 0`, ... ? if index === undifned or  index === null, ""bytesPerElement"" will be 1 and because  this code 
`passEncoderGPU.drawIndexed( counts[ i ] / bytesPerElement, count, starts[ i ] / 4, 0, firstInstance );`
""bytesPerElement"" must not be 0 @prince805962788 I think that `hasIndex` is better for this case https://github.com/mrdoob/three.js/pull/29140#issuecomment-2290509437 At first I was worried that it might be undefined，then I double check bufferGeometry.js. It default value is null，so your suggestion is ok"
29150,2024-08-16T02:01:33Z,2024-08-16T02:10:40Z,sunag,1,0,4,61,4,0,0,[],138.0,0,634.0,0,0,0,0,11484340.707951,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: Closes https://github.com/mrdoob/three.js/issues/28988

",
29141,2024-08-15T03:25:24Z,2024-08-15T03:36:23Z,sunag,1,0,1,4,1,0,0,[],141.0,0,682.0,0,0,0,0,11565661.84544,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.4 kB (169.7 kB) | 685.4 kB (169.7 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Does not crash if there is no `colorNode` in `NodeMaterial` base class.
",
29092,2024-08-09T00:25:19Z,2024-08-11T03:21:46Z,cmhhelgeson,6,1,8,20,4,1,0,[],134.0,0,507498.0,0,0,0,0,11588052.035703,,0,8,1,False,"['github-actions[bot]', 'cmhhelgeson', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | `remainder()` is used for integer, and `mod()` for float. You tried replace remainder to mod() in your example? I think that rename `remainder()` to `modInt()` would be less confuse instead of change it. > `remainder()` is used for integer, and `mod()` for float. You tried replace remainder to mod() in your example? I think that rename `remainder()` to `modInt()` would be less confuse instead of change it.

Yes that fixed it. I did also try an arbitrary modulus with WebGL and that worked fine. I'm not sure why so much documentation seems to indicate that % is not allowed in GLSL at all? If it's okay, can I just change this pull request to implement the suggested name change. > If it's okay, can I just change this pull request to implement the suggested name change.

Sounds great! > > If it's okay, can I just change this pull request to implement the suggested name change.
> 
> Sounds great!

Ok cool, I'll also make sure there's a deprecation option per the new standards. Could you keep `mod()` name? I think just rename `remainder()` to `modInt()` is better.",,"**Description**

~~Between WGSL and GLSL, there are differences in how the commonly used modulus operation is handled. GLSL has a function mod() that computes _x modulo y_. It does not permit the use of the % operator to perform the same operation. Meanwhile, WGSL does allows the use of the % operator to compute the modulus of two numbers, and therefore has no equivalent function mod. Therefore, when the % operator is used in a TSL shader via the remainder() function, that shader will be valid for the renderer's WebGPUBackend, but invalid for its WebGLBackend. While a user could simply write their shader to use remainder or mod depending on what graphics API they are targeting, this solution negates the inherent portability of TSL shaders across shader languages.~~

Modified to simply rename remainder and mod to make their usage more clear.

","I think could be good add what release it was deprecated
```js
export const remainder = ( ...params ) => { // @deprecated, r168
```"
29138,2024-08-14T16:59:34Z,2024-08-14T19:04:36Z,sunag,0,0,1,82,20,0,0,[],,0,7508.0,0,0,0,0,11596387.609464,,1,1,1,False,[],,,"**Description**

Apparently playground is out of date and its official url is not working.

https://threejs.org/playground/",
29134,2024-08-14T08:15:17Z,2024-08-14T15:28:15Z,RenaudRohlinger,1,0,1,33,2,0,0,['TSL'],237.0,0,25978.0,0,0,0,0,11609374.69975,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"
*This contribution is funded by [Utsubo](https://utsubo.com)*
",
29133,2024-08-14T04:19:53Z,2024-08-14T15:26:55Z,sunag,1,0,1,24,2,0,0,[],195.0,0,40025.0,0,0,0,0,11609452.808519,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Introduce `npm run test-e2e-webgpu` command.

This should make it fast to test the WebGPU examples once that testing all the others WebGL examples first can take a few minutes.

",
29132,2024-08-14T04:07:44Z,2024-08-14T13:48:38Z,RenaudRohlinger,1,2,4,48,2,2,0,['WebGL Backend'],144.0,0,34854.0,0,0,0,0,11615353.74274,,0,4,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"Related issue: [#27388](https://github.com/mrdoob/three.js/pull/27388#issuecomment-2287654308)

Next is about moving `VAO` into a new `WebGLBindingStates` class and handle the binding of buffers to a state comparator too.

*This contribution is funded by [Utsubo](https://utsubo.com)*
","It would be good to always add the component to the message that logs it. E.g.:
```js
console.warn( 'THREE.WebGLBackend: bindBufferRange() is only applicable for uniform buffers.' );
``` Oops, actually `_bindBufferRange` was a method I forgot to cleanup that I will work on later on, also I don't think internal warning is useful. Thanks for the heads up!"
29081,2024-08-08T01:10:00Z,2024-08-13T15:04:22Z,cmhhelgeson,2,4,15,495,3,2,1,[],75821.0,0,558684.0,0,0,0,0,11620587.931981,,0,15,1,False,"['cmhhelgeson', 'RenaudRohlinger']","I think there's still some issues with the velocity code for some reason. Is there anyway to output the shader code built by the NodeBuilder without explicitly modifying the WGSLNodeBuilder class with console calls?

EDIT: I've also changed the color output a bit to reflect the fact that lighting can be integrated with the colorNode, and added calls to the UniformNode.label() function as I think it might be helpful to surface some of the debug capabilities of the node systems for website readers, even if there is a negligible impact on the effectiveness of the shader itself. The original shader had both a call to update the fragment shader for the birds and commented out test code, so I think this is in keeping with the original sample. Awesome!! Happy to see it work on the WebGL Backend thanks to the PBO fallback! 😎 ",,"**Description**

A port of the GPGPU birds sample to WebGPU Compute shaders. We already have a fair amount of compute shaders, but I figured it wouldn't hurt to port this one over as well. Having a 1 to 1 port of an old shader could also help with migration purposes. There's also some areas of the code that can be simplified, like the attraction code, which seems to take unnecessary steps to bring cosine output into a [-0.5, 0.5] range. Code is currently WIP and will be ready when undrafted. There's also so


https://github.com/user-attachments/assets/b54736c8-6a73-4a6b-84c4-cc0e5f1f2a52","## Unused variable, import, function or class

Unused imports mat3, mat4, modelViewMatrix, positionView, positionWorld, sqrt, uint, varying, vec2.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2385) ## Unused variable, import, function or class

Unused variable LOWER_BOUNDS.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2386) ## Unused variable, import, function or class

Unused imports mat4, modelViewMatrix, positionView, positionWorld, remainder, uint, varying, vec2.

[Show more details](https://github.com/mrdoob/three.js/security/code-scanning/2388) It seems the example produces the warning:

> AttributeNode.js:92 AttributeNode: Vertex attribute ""normal"" not found on geometry.

How about you create the bird material like so for now:
```js
const birdMaterial = new THREE.NodeMaterial();
birdMaterial.normals = false;
```
You can then remove the lights from the scene, too."
29126,2024-08-13T13:47:53Z,2024-08-13T14:01:03Z,Mugen87,2,0,1,47,2,0,0,[],555.0,0,63505.0,0,0,0,0,11638294.677933,,0,1,1,False,"['mrdoob', 'Mugen87']","BTW: I think we can port `StereoEffect`, `AnaglyphEffect` and `ParallaxBarrierEffect` as  `StereoPassNode`, `AnaglyphPassNode` and `ParallaxBarrierPassNode` in `nodes/display`. They would be used via `PostProcessing` like so:
```js
postProcessing = new THREE.PostProcessing( renderer );

const stereoScenePass = stereoPass( scene, camera );
// const anaglyphScenePass = anaglyphPass( scene, camera );
// const parallaxBarrierScenePass = parallaxBarrierPass( scene, camera );

postProcessing.outputNode = stereoScenePass;
``` > BTW: I think we can port `StereoEffect`, `AnaglyphEffect` and `ParallaxBarrierEffect` as `StereoPassNode`, `AnaglyphPassNode` and `ParallaxBarrierPassNode` in `nodes/display`.

Agreed! And would be great to remove these files eventually.",,"Related issue: -

**Description**

`AnaglyphEffect` and `ParallaxBarrierEffect` can make use of `FullScreenQuad` which simplifies the code a bit.

Besides, the PR adds the missing `dispose()` method to `ParallaxBarrierEffect`.
",
29121,2024-08-12T19:37:09Z,2024-08-14T01:03:42Z,sunag,3,0,1,90,1,0,0,[],146.0,0,122668.0,0,0,0,0,11644576.544843,,0,1,1,False,"['github-actions[bot]', 'linbingquan', 'sunag']","### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B | @sunag 

Can we let `Fn()` execute itself in the `setup*` phase, the user should have less learning costs and write less code.

I was try to execute `colorNode` in `NodeMaterial.setupDiffuseColor()`, it can work.

Before:
```js
material.colorNode = Fn( () => {} )()
```

After:
```js
material.colorNode = Fn( () => {} )
```

I'm not sure it's a good idea, also I'm not sure if there are other questions. I think it could have other name like the example below, because `Fn()` will return a `function` and not a `Node`, this could make the subsequent process easier:

```js
const Shader = ( ...params ) => Fn( ...params )();

material.colorNode = Shader( () => {} );
```",,"**Description**

All TSL function calls are deferred to compilation time, if this is not the desired action just create a simple JS function. The `Fn.once()` update allows only one function call to be made per material.

```js
// use Fn().once() to call the function only once in compilation, 
// it will reuse the return value of the last call.

const normalViewFn = Fn( ( builder ) => {

	let node;

	if ( builder.material.flatShading === true ) {

		node = normalFlat;

	} else {

		node = varying( modelNormalMatrix.mul( normalLocal ), 'v_normalView' ).normalize();

	}

	return node;

} ).once(); 

// With deferred once functions we can have constants that can obtain 
// important data from the material, object and renderer at compile time.

export const normalView = normalViewFn().toVar( 'normalView' );
```

The use for the end user is the same if he would use a constant.

```js
import { normalView } from 'three/tsl';

material.normalNode = normalView;
```

Optional output type has also been added to the function, this can help to optimize and avoid call overload.

```js
const normalViewFn = Fn( function(){}, 'vec3' );
```",
29131,2024-08-14T03:53:33Z,2024-08-14T04:05:53Z,sunag,1,0,1,14,2,0,0,[],142.0,0,743.0,0,0,0,0,11650317.735009,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

`.context` property should be a reserved work for that users can use `anyNode.context( {} )`",
29130,2024-08-14T03:18:26Z,2024-08-14T03:51:45Z,WestLangley,1,1,1,7,1,1,0,[],136.0,0,2000.0,0,0,0,0,11651168.67144,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"As the title says.

","It's seems redundant, `vec3( color )` is equal `color.rgb`."
29129,2024-08-14T02:03:52Z,2024-08-14T03:22:56Z,sunag,1,0,1,107,5,0,0,[],136.0,0,4749.0,0,0,0,0,11652894.27235,,0,1,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 685.1 kB (169.6 kB) | 685.1 kB (169.6 kB) | +0 B |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

| Filesize `dev` | Filesize PR | Diff |
|----------|---------|------|
| 462 kB (111.4 kB) | 462 kB (111.4 kB) | +0 B |",,"**Description**

Keyword should replace variables in GLSL/WGSL with node names, after TSL this became unnecessary and was in disuse for a long time.",
29127,2024-08-13T23:51:46Z,2024-08-14T01:01:12Z,WestLangley,0,0,1,15,2,0,0,[],,0,8548.0,0,0,0,0,11657021.535072,,0,1,1,False,[],,,"Adhering to the nomenclature of the later example, under the assumption that nomenclature is preferred.

Also, and more importantly, applying bloom in linear space -- i.e., prior to tone mapping.
",
30218,2024-12-27T06:24:12Z,2024-12-28T00:24:31Z,RenaudRohlinger,1,0,2,41,2,1,1,[],180.0,0,64819.0,0,0,0,0,76228.701641,,0,2,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.88 <br> **135.69** | 489.26 <br> **135.79** | +378 B <br> **+108 B** |
| WebGPU Nodes | 488.35 <br> **135.56** | 488.73 <br> **135.67** | +378 B <br> **+110 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.8 <br> **151.3** | 558.8 <br> **151.3** | +0 B <br> **+0 B** |
| WebGPU Nodes | 514.87 <br> **141.08** | 514.87 <br> **141.08** | +0 B <br> **+0 B** |",,"**Description**

Currently using `instancedArray/attributeArray( data, 'uint')` will always generate a `float` buffer regardless of the type argument. this PR fixes the issue by correctly generating a `uint` typed array.
 

*This contribution is funded by [Utsubo](https://utsubo.com)*
",
30224,2024-12-28T12:32:32Z,2024-12-28T12:39:40Z,Mugen87,1,1,3,912,14,1,0,[],175.0,0,431.0,0,0,0,0,32117.103184,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 489.24 <br> **135.78** | 489.09 <br> **135.73** | -153 B <br> **-59 B** |
| WebGPU Nodes | 488.71 <br> **135.66** | 488.55 <br> **135.61** | -153 B <br> **-47 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.8 <br> **151.3** | 558.64 <br> **151.24** | -153 B <br> **-53 B** |
| WebGPU Nodes | 514.87 <br> **141.07** | 514.72 <br> **141.02** | -153 B <br> **-54 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30182

**Description**

Documents more modules.
",FYI: I have removed this method since it was not used in the code base.
30221,2024-12-27T14:32:36Z,2024-12-27T14:42:10Z,Mugen87,1,0,3,658,15,0,0,[],175.0,0,575.0,0,0,0,0,111170.708791,,0,3,1,False,['github-actions[bot]'],"### 📦 Bundle size

_Full ESM build, minified and gzipped._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 339.44 <br> **79.06** | 339.44 <br> **79.06** | +0 B <br> **+0 B** |
| WebGPU | 488.88 <br> **135.69** | 488.86 <br> **135.68** | -21 B <br> **-10 B** |
| WebGPU Nodes | 488.35 <br> **135.56** | 488.33 <br> **135.55** | -21 B <br> **-8 B** |

### 🌳 Bundle size after tree-shaking

_Minimal build including a renderer, camera, empty scene, and dependencies._

|| Before | After | Diff |
|:-:|:-:|:-:|:-:|
| WebGL | 465.3 <br> **112.11** | 465.3 <br> **112.11** | +0 B <br> **+0 B** |
| WebGPU | 558.8 <br> **151.3** | 558.8 <br> **151.3** | -1 B <br> **-7 B** |
| WebGPU Nodes | 514.87 <br> **141.08** | 514.87 <br> **141.07** | -1 B <br> **-7 B** |",,"Related issue: https://github.com/mrdoob/three.js/pull/30182

**Description**

Document more modules.
",
