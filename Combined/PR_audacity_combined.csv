pr_number,created_at,merged_at,author,number_of_comments,number_of_review_comments,number_of_commits,lines_of_code_changed,number_of_files_changed,number_of_reviewers,number_of_approvals,labels,time_to_first_response,number_of_assignees,review_duration,number_of_changes_requested,number_of_build_runs,number_of_build_failures,number_of_linked_issues,time_since_last_commit,test_coverage,number_of_reviews_requested,number_of_revisions,number_of_milestones,dependency_changes,comment_authors,issue_comments_text,reviews_text,issue_text,review_comments
7308,2024-09-10T13:07:38Z,2024-09-10T13:49:46Z,igorkorsukov,0,0,1,9,2,1,1,[],,0,2528.0,0,0,0,0,9493.363903,,0,1,0,False,[],,,,
7303,2024-09-10T12:15:27Z,2024-09-10T12:42:48Z,igorkorsukov,0,0,1,9,1,1,1,[],,0,1641.0,0,0,0,0,13512.070402,,0,1,0,False,[],,,,
7301,2024-09-10T10:27:20Z,2024-09-10T13:13:54Z,grliszas14,0,0,2,40,1,1,1,[],,0,9998.0,0,0,0,0,11642.102624,,0,2,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/7298,
7288,2024-09-09T13:13:46Z,2024-09-09T14:53:04Z,LWinterberg,0,0,1,12,3,1,1,[],,0,5961.0,0,0,0,0,92093.184657,,0,1,0,False,[],,,,
7295,2024-09-10T08:53:37Z,2024-09-10T09:58:23Z,grliszas14,0,0,1,2,1,1,1,[],,0,3890.0,0,0,0,0,23373.188585,,0,1,0,False,[],,,,
7286,2024-09-09T11:14:29Z,2024-09-09T12:47:07Z,kryksyh,0,0,1,4,1,1,1,[],,1,5564.0,0,0,0,0,99647.21806,,1,1,0,False,[],,,"Resolves: -

Bump upload/download artifact build action versions for actions missed in the previous PR

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7296,2024-09-10T09:04:35Z,2024-09-10T09:55:35Z,Eism,0,0,1,13,2,1,1,[],,0,3063.0,0,0,0,0,23542.236599,,0,1,0,False,[],,,,
7267,2024-09-06T07:05:57Z,2024-09-10T13:08:41Z,grliszas14,0,3,3,116,10,1,1,[],,0,367371.0,0,0,0,0,11952.301069,,0,3,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/7258,"I would suggest moving this code into the model (`trimLeftClip` method) from the name it looks like this value will be used only in the insureVisible method - I suggest moving these constants to the method and then maybe it will be easier to choose a name  Let's also abandon searching for a parent by name and pass it directly through all the children?
I don't like the search approach because it's hard to control. Someone will delete or just rename the name and everything will break"
7302,2024-09-10T11:57:48Z,2024-09-10T12:34:50Z,igorkorsukov,0,0,5,905,72,1,1,[],,0,2223.0,0,0,0,0,13990.054762,,0,5,0,False,[],,,,
7294,2024-09-09T21:12:38Z,2024-09-10T09:28:21Z,Gootector,2,0,1,132,1,1,1,[],42816.0,0,45686.0,0,0,0,0,23637.165902,,0,1,0,False,['Gootector'],"@LWinterberg It's ready, checked many times. Please merge. I'm taking a break from translations. Anyway - everything has been fixed. I'd like to see all these fixes in the new official Audacity translation on the Transifex - ""by default"" and ""without historical translations"". @LWinterberg Thank you!",,"Update Polish Translation
Major fixes:
- translated pitch names
- fixed all strings translations

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7283,2024-09-09T10:31:05Z,2024-09-09T11:33:01Z,Eism,0,0,1,15,4,1,1,[],,0,3719.0,0,0,0,0,104097.560665,,0,1,0,False,[],,,,
7281,2024-09-09T09:32:12Z,2024-09-09T11:32:46Z,Eism,0,0,1,36,1,1,1,[],,0,7237.0,0,0,0,0,104113.517472,,0,1,0,False,[],,,,
7266,2024-09-06T01:03:35Z,2024-09-09T08:13:38Z,JoeS209,3,0,2,4,1,1,1,[],214341.0,0,285003.0,0,0,0,0,116064.72226,,0,2,0,False,"['kryksyh', 'JoeS209']","@JoeS209 please rebase on the latest master, to get the ci build working. I can do that today.  How do you want me to do this?  From past experience if I just sync the master to my fork, then that will introduce all of those changes to my pull request. > I can do that today. How do you want me to do this? From past experience if I just sync the master to my fork, then that will introduce all of those changes to my pull request.

Yes, that should work@JoeS209 thank you!",@JoeS209 thank you!,"Resolves: #7131

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7284,2024-09-09T10:47:21Z,2024-09-09T11:32:12Z,kryksyh,0,0,1,16,1,1,1,[],,1,2691.0,0,0,0,0,104150.883698,,0,1,0,False,[],,,"Resolves: 

Fix app crash when toggling toolbar buttons off

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7277,2024-09-08T08:11:33Z,2024-09-08T11:58:04Z,kryksyh,1,0,1,2,1,1,1,[],13297.0,1,13608.0,0,0,0,0,188982.37416,,1,1,0,False,['LWinterberg'],"also, this probably doesn't need QAhooray!",hooray!,"In continuation of #7215. Replace Warning with Debug, as Warning produces a modal dialog on windows, which not useful for the user, and may interfere with CI tests

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7280,2024-09-09T09:20:10Z,2024-09-09T11:07:41Z,kryksyh,0,0,2,24,1,1,1,[],,1,6454.0,0,0,0,0,105619.570571,,0,2,0,False,[],,,"V2 is deprecated as of 2024

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7269,2024-09-06T08:00:05Z,2024-09-07T06:58:33Z,Gootector,2,0,1,174,1,1,1,[],44906.0,0,116886.0,0,0,0,0,259193.074813,,0,1,0,False,['Gootector'],@LWinterberg It's ready. Please merge. I've probably standardized everything I can. @LWinterberg Thank you!,,"Update Polish Translation
Major fixes:
- ""Audio Unit"" should not be translated
- ""sample"" translated as ""próbka"" (like ""sample rate"" - ""częstotliwość próbkowania"")

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7270,2024-09-06T10:19:50Z,2024-09-06T12:07:04Z,grliszas14,0,1,1,104,8,1,1,[],,0,6437.0,0,0,0,0,361257.262437,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7255
","Should be inside trackeditInteraction()->mergeSelectedOnTrack  
The reason is that the action controller is called only for processing of actions... 
But a service method can be called in other cases, in some scenario, from some API extensions, etc.
In this case, all the logic associated with this operation must be executed...
If we ever need to not modify the history in some case, then it is better to do this explicitly, in the service method add a flag ""do not change history"" "
7254,2024-09-04T14:21:40Z,2024-09-05T12:45:44Z,grliszas14,0,6,1,105,9,1,1,[],,0,80647.0,0,0,0,0,445337.433579,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6629
","I think either `selected-track-split` should be sent here, or the track id should be pass to `track-split`  I think pushHistoryState should be inside trackeditInteraction()->split  we need to either add the track id argument here, or send a new action with the track id (as is done for clips in doGlobalSplit) I think pushHistoryState should be inside trackeditInteraction()->split It looks like we should just resend the TRACK_SPLIT action with the track id argument here better to add 
```
    IF_ASSERT_FAILED(args.count() == 1) {
        return;
    }
```"
7215,2024-08-30T09:59:38Z,2024-09-05T08:37:50Z,igorkorsukov,0,2,1,4,1,2,1,[],,0,513492.0,0,0,0,0,460214.442665,,0,1,0,False,[],,,,Could you also update comments to reflect changes? fixed 
6447,2024-05-17T09:17:40Z,2024-05-17T11:04:14Z,lalitshankarchowdhury,6,0,1,7,1,1,1,[],6375.0,1,9535644.0,0,0,0,0,512581.354415,,0,1,1,False,"['LWinterberg', 'lalitshankarchowdhury']","Yeah, testing it a bit more extensively, the biggest issue with this is that the custom cursor images don't get scaled correctly. But then, they didn't before either. This is a straight improvement. > Yeah, testing it a bit more extensively, the biggest issue with this is that the custom cursor images don't get scaled correctly. But then, they didn't before either. This is a straight improvement.

So, GDI can only help scale text according to DPI, and custom bitmaps need to be scaled manually. Heya @lalitshankarchowdhury 

Unfortunately we'll have to revert this change, as it introduces a number of minor and major issues on setups different to mine which make this nonfeasible to ship at the moment.  No worries! https://github.com/audacity/audacity/issues/6466 are the issues we had found with it

 @LWinterberg what's the current status on this issue?awesome find!",awesome find!,"Resolves: #4788 (partially)
Resolves: #6427 on windows

This PR fixes rendering of text on HiDPI monitors on Windows.

## Before
![Screenshot 2024-05-17 143322](https://github.com/audacity/audacity/assets/33201674/904ad5a7-2cd1-4e3e-ab2b-6dc861eac32f)

## After
![Screenshot 2024-05-17 143432](https://github.com/audacity/audacity/assets/33201674/0ac1066c-c9d0-4907-ba8d-f0c04997af53)

The issue is fixed by letting GDI automatically scale the text according to the current DPI: [source](https://blogs.windows.com/windowsdeveloper/2017/05/19/improving-high-dpi-experience-gdi-based-desktop-apps/).

What's not fixed:

- Drawing bitmaps according to scale

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7238,2024-09-03T08:18:55Z,2024-09-04T12:30:59Z,Eism,0,2,4,132,4,2,2,[],,0,101527.0,0,0,0,0,532623.535639,,0,4,0,False,[],,,Resolves: #7226,"Better to add method like this `isHasSelection` I think totalTime can be 0, and then there will be a problem"
6955,2024-07-23T20:24:35Z,2024-07-26T11:24:04Z,kryksyh,4,0,1,2,1,2,2,['bug'],419675.0,1,3683896.0,0,0,0,0,535514.908873,,0,1,1,False,"['kryksyh', 'wchouser3', 'ChandigarIT', 'Antony-Edward-Stark']","this patch seems to have fixed the problem. I wonder how long before we see it show up in Arch default repo No sign of 3.6.2 when I try to upgrade

root@****:~# apt install audacity
audacity is already the newest version (3.6.1+dfsg-1) @ChandigarIT Unfortunately, 3.6.2 is not released yet, but it will be pretty soon. thanks for fixing white screen issue. Thank you...
I was ust saved by your timely release. ",,"Resolves: on a certain combination of wxWidgets versions and OS, waveform painting was corrupting the memory and resulted in a white screen.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7249,2024-09-04T09:49:22Z,2024-09-04T12:36:35Z,Eism,0,0,2,60,6,1,1,[],,0,10036.0,0,0,0,0,532287.946156,,0,2,0,False,[],,,Resolves: #7247,
7248,2024-09-04T09:19:22Z,2024-09-04T10:46:50Z,grliszas14,0,0,1,131,9,2,2,[],,0,5251.0,0,0,0,0,538872.94867,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6822
",
7252,2024-09-04T11:47:52Z,2024-09-04T12:08:39Z,grliszas14,0,0,1,6,1,1,1,[],,0,1250.0,0,0,0,0,533964.352391,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7251
",
7241,2024-09-03T15:17:34Z,2024-09-04T08:46:32Z,Eism,0,4,3,182,13,3,1,[],,0,62941.0,0,0,0,0,546091.49855,,0,3,0,False,[],,,Resolves: #7240,"actually... why we're dropping metrics passed here before? I think better to use secs_t here 
better to use it everywhere to pass time hmm, why not just ?
```
m_tracksChanged.itemChanged(track);
``` We adjust taking into account the trim left (just above I take the current metrics and adjust fromTime/toTime)"
7222,2024-08-31T21:22:08Z,2024-09-01T07:17:24Z,Gootector,1,0,1,4,1,1,1,[],172924.0,0,172925.0,0,0,0,0,673433.542311,,0,1,0,False,['Gootector'],@LWinterberg Thank you!,,"Update Polish Translation (3.6.2)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7181,2024-08-27T14:09:33Z,2024-09-04T08:28:31Z,saintmatthieu,0,6,22,6500,50,2,1,[],,1,670739.0,0,0,0,0,547175.269866,,1,22,0,False,[],Added two suggestions. Compilation errors should be fixed.,Added two suggestions. Compilation errors should be fixed.,"Resolves: #7169

A rather large PR, but where no new functionality is written, only things are moved around.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Incorrect comment message ""LoudnessBase in lib-math"" It seem to be only used by Reveb effect, I'd suggest to move this file into `lib-buildin-effects` as well That creates a transitive dependency on `wxBase` for `lib-utility` and comment in CMake file states: ""No dependencies on wxWidgets"". In that case maybe `lib-math` could be a good place for it. PitchName.h/cpp does math things and string things. I thought a bit of math was more tolerable in a string library than the other way round, and the dependency on wxBase seems harmless to me, isn't it? If it isn't, please let me know why, otherwise I'd just remove that part of the comment. Oh well: compilation of PitchName.cpp failed on mac because it doesn't find Internat.h (part of lib-strings). Couldn't find out why but doing as you suggest fixes the build. So be it. The main point is to separate the sheep from the goats: `lib-utility` is more about ""domainless"" tools, the `lib-math` is domain aware."
7217,2024-08-30T12:56:12Z,2024-09-03T07:46:05Z,Eism,0,0,1,35,2,1,1,[],,0,326997.0,0,0,0,0,636118.47146,,0,1,0,False,[],,,Resolves: #6939,
7225,2024-09-02T09:33:04Z,2024-09-02T14:20:07Z,Eism,0,0,1,21,3,1,1,[],,0,17226.0,0,0,0,0,698877.59572,,0,1,0,False,[],,,Resolves: #7114,
7141,2024-08-22T14:05:16Z,2024-08-23T07:55:32Z,igorkorsukov,0,5,4,530,23,2,2,[],,0,942079.0,0,0,0,0,708093.128362,,0,4,1,False,[],"Excellent !
Looking forward to those QML components coming to life.
Please address the ""buildin"" spelling mistake, hurts a little when reading :)","Excellent !
Looking forward to those QML components coming to life.
Please address the ""buildin"" spelling mistake, hurts a little when reading :)","I don't know yet how it will all work, set parameters, apply...

This is only:
* Defining the file structure for built-in effects
* Registering effects and view models
* View blanks
* Open effect dialog (was already done, just slightly corrected) ","builtin (with t) Here too, with t. Why don't you guys ever seem to use `const` ? t ""engine"" ?"
7219,2024-08-30T13:44:46Z,2024-09-02T05:31:24Z,grliszas14,0,0,1,222,6,1,1,[],,0,229609.0,0,0,0,0,730593.168061,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7161
",
7159,2024-08-26T10:13:01Z,2024-08-27T10:34:03Z,igorkorsukov,0,7,4,519,33,3,2,[],,0,608523.0,0,0,0,0,709984.255882,,0,4,1,False,[],,,,"I suppose this property will also have to be read from `viewModel` ? Are we planning to fix this `wxToSting` typo sometime or is it already too late? 😄  no need Can you please explain why we need another class and why we cannot use AbstractEffectModel only? yes, that's probably how it will be  I will fix in a next PR, it's never too late :D These are two different classes with different goals.
We now have two types of views (view models) - specific and general. 
Specific - have a specific UI and may have specific behavior of the view model. They manipulate each parameter in their own way.
General provides a generic UI and manipulates the parameter list. 

Abstract view model is what is common between specific and general. 

```
                         / Specific1 Model (specific view and work with params)
    AbstractEffectModel -  SpecificN Model
                         \ General Model (just list of params)
```
"
7220,2024-08-30T14:14:04Z,2024-09-02T09:14:54Z,Eism,0,1,1,39,1,1,1,[],,0,241253.0,0,0,0,0,717191.320052,,0,1,0,False,[],,,Resolves: #7172,better to use safe double comparison
7218,2024-08-30T13:19:50Z,2024-08-31T08:32:56Z,LWinterberg,0,0,1,29836,8,1,1,[],,0,69190.0,0,0,0,0,892508.832383,,0,1,0,False,[],,,,
6287,2024-04-16T12:15:57Z,2024-04-25T13:16:56Z,LWinterberg,1,0,1,135,8,1,1,[],11952795.0,1,11953093.0,0,0,0,0,762838.981088,,0,1,0,False,['QuantumGood'],"1. I understand that inexperienced users do nearly zero version control, backup, filename and project management, but **experienced users have to take version control, filename, backup and project management into account on most projects**. Truncating from dozens of characters down to ten (numeric characters) is nowhere near enough for using track names for version control, filename, backup and project management. 
2. This is a major truncation of Audacity functionality and usefulness for those that use Audacity's feature that allows track name to be exported as filename—a typical filename with project name, date and user name (e.g. ""IRS.Efile_1-5-2024_Kevin.Elin"") was formerly readable as a track name.
3. Around 99% of my track names are now not viewable. I have dozens of projects with track names that follow client filename standards, now unreadable without manually checking eack. Also, knowing overlay was available, we adopted other standards for version and project tracking that use track names longer than ten, now unreadable .  
**I am returning to working in Audacity after a few months off, or would have commented sooner.**
![image](https://github.com/user-attachments/assets/17dc5f54-093e-4bf0-8562-a86fb6497ac0)
",,"Resolves: #6269
",
7216,2024-08-30T10:32:01Z,2024-08-30T11:52:42Z,Eism,0,0,3,35,5,1,1,[],,0,8846.0,0,0,0,0,962922.53571,,0,3,0,False,[],,,Resolves: #7192,
7205,2024-08-29T10:04:16Z,2024-08-30T12:21:49Z,kryksyh,6,0,1,5,1,1,1,[],598.0,1,94657.0,0,0,0,0,965176.860349,,0,1,0,False,"['kryksyh', 'saintmatthieu']","@saintmatthieu there few other places where we didn't consider the stretch factor when comparing intervals.
Please check if it also needs fixes (in another pr).  I'm looking at [this way of reproducing](https://github.com/audacity/audacity/issues/7196#issuecomment-2316956776). After the track is split, the clips of each channels should have the exact same stretch ratio, start and end times. Then it is saved. Then it is reopened. What explains the difference we now see in `AreAligned` ? > I'm looking at [this way of reproducing](https://github.com/audacity/audacity/issues/7196#issuecomment-2316956776). After the track is split, the clips of each channels should have the exact same stretch ratio, start and end times. Then it is saved. Then it is reopened. What explains the difference we now see in `AreAligned` ?

what is happening is that we are calling SetRate only of the left channel, this leads to slight differences between left and right.

https://github.com/audacity/audacity/blob/e3b721d6730f0671a019391a4b94e764c221b660/libraries/lib-wave-track/WaveTrack.cpp#L656 ... and this redoes the clip boundary calculations, I see...
I'm not so fond of the proposed fix because it loosens the equality check because of a numeric precision error we introduce before exporting to XML.
Given your analysis, isn't calling SetRate on the left channel as well not an option? (With a comment linking to this issue.) Or alternatively (but maybe more risky because hard to guarantee it won't have a stupid impact on some other stupid code) doing smth like
```cpp
void WaveTrack::SetRate(double newRate)
{
   if (mRate == newRate) return;
   ...
}
```
? @saintmatthieu 
> I'm not so fond of the proposed fix 

Well, I don't believe that comparing floats to be equal here should be allowed. Semantically, what we are doing here is comparing if clips are aligned with sample precision, so the code should reflect that. Otherwise, if you want to compare times bitwise, let's do that, but rename the method to HaveIdenticalIntervals or something.

>  isn't calling SetRate on the left channel as well not an option

It makes sense. I checked it, and it works as expected. I can do that, but the first point still stands

 > what we are doing here is comparing if clips are aligned with sample precision

`GetPlayStartTime()` and the end-time version of it do round the result to samples all right, but `GetSequenceStartTime()` not. I suppose it's because of the latter that the alignment check fails?
I think we're safer with a bitwise comparison. If the clips get merged into a stereo track, some assumptions of equality of sequence start and end times may be made later.",,"Resolves: [#7196](https://github.com/audacity/audacity/issues/7196)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7194,2024-08-28T13:31:28Z,2024-08-30T08:42:12Z,kryksyh,1,13,1,46,8,4,1,[],76120.0,1,155444.0,0,0,0,0,978358.014205,,0,1,0,False,['kryksyh'],"@grliszas14 @Eism I've updated the PR addressing your comments and made sure that clips view and track header are in sync

![image](https://github.com/user-attachments/assets/fce9e5e4-83fe-4816-bc62-618d37ef2b55)
",,"
Resolves: [#6747](https://github.com/audacity/audacity/issues/6747)

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","You can't use both Layout and width/height at the same time
If the element is stored in some layout and you want to set a fixed size, you need to use Layout.preferredWidth/preferedHeight properties should be higher than local properties value settings The code becomes more readable if separate properties value settings ​​into groups using empty lines Does the default height changed somewhere in the design?
see bottom of the description Alex made here: https://github.com/audacity/audacity/issues/6761 That's actually a reasonable question, I wasn't aware were to get the exact numbers, so was inspecting figma designs:

![image](https://github.com/user-attachments/assets/98fb7365-f941-4dcd-bc74-552a992d16cd)


now I see that there is also a 2px separator, which is not a part of the track header. Thanks, I'll revert the change to default height @grliszas14 Actually, it does make more sense to keep the separator as part of the ""track header"" as it should be drawn after the last track also. So, I'll keep the default height as 116. Then maybe talk it through with Alex - this property is shared between track header and clip which height is 114px by design. It's just two pixels but I guess we want to have very fine-tuned UI ;)  ps clips and separators are obviously separated so that make: 1px of upper separator + 114px clip + 1px separator which is exactly 116px -> we need to make sure that track headers and tracks itself match in the UI  @grliszas14 oh, i missed that the same constant was used by the clip drawing. There one issue with it though, clips are separated by 3 pixels now (or one, I don't know if the black ones are a part of the separator)
![image](https://github.com/user-attachments/assets/1c3cd6cf-29ed-455b-b86e-f5dfd1510603)
 Black 1px border belongs to the clip (it's inner border) so actually what we are left with is 1px white separator with 10% opacity. But yeah - you can make sure we match track header precisely anyway, I'm not that sure right now But, I've got your point, the DEFAULT_SIZE constant does not take into account the separator. I would rather call it the ""bottom padding"", does it make sense?

At least the current designs have this 2px line below the last track

![image](https://github.com/user-attachments/assets/cdb4138d-e904-4e15-9a2f-bd81da08dcb2)
 I think I discussed that with Alex someday and we decided to leave tracks separators with 1px width but maybe let's make sure.
@DilsonsPickles we need your expertise In the designs, both track headers AND tracks are 116px with a 2px inset stroke that acts as a separator. The reason I designed it like this was purely to make my life easier when making mock ups. Instead of faffing around with an additional separator component for both the track headers panel and tracks I could just incorporate the separator into the component. 

With that said, I don't mind if the track headers and tracks are 114px with a 2px separator component underneath each header. All I care about is there being a 2px gap between each track header and a 2px gap between each track in the canvas. 

Hope this helps, will leave implementation decision in your capable hands."
7178,2024-08-27T12:55:57Z,2024-08-30T19:15:34Z,LWinterberg,0,0,1,1618,1,1,1,[],,0,281981.0,0,0,0,0,940352.116129,,0,1,0,False,[],,,rebased https://github.com/audacity/audacity/pull/7121 by @DandelionSprout onto 3.6.2 instead of master,
7210,2024-08-29T13:15:43Z,2024-08-30T07:13:58Z,igorkorsukov,0,0,2,597,6,1,1,[],,0,64695.0,0,0,0,0,983652.194845,,0,2,0,False,[],,,,
7199,2024-08-28T18:39:07Z,2024-08-29T13:25:58Z,kryksyh,0,0,1,30,1,1,1,[],,1,67611.0,0,0,0,0,1047732.448656,,1,1,0,False,[],,,"Resolves: #7204 

If Audacity is showing `UpdateNoticeDialog` during launch (ie on clean installation) the splash screen never fade out, and crashes the app if the dialog is clicked.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7203,2024-08-29T08:28:22Z,2024-08-29T10:39:56Z,igorkorsukov,0,1,2,410,9,1,1,[],,0,7894.0,0,0,0,0,1057694.461121,,0,2,0,False,[],"Thanks for this effort in clarifying the steps of `DoEffect`.
I cannot vow this is going to yield identical behavior to the previous version (ignoring the TODO's) but we can fine tune this if needed in due time.
Please address commented spelling mistake before merging.","Thanks for this effort in clarifying the steps of `DoEffect`.
I cannot vow this is going to yield identical behavior to the previous version (ignoring the TODO's) but we can fine tune this if needed in due time.
Please address commented spelling mistake before merging.",,`effectexecutionscenario.h` (no trailing `n`)
7191,2024-08-28T12:51:07Z,2024-08-28T13:39:07Z,grliszas14,0,1,1,61,5,1,1,[],,0,2881.0,0,0,0,0,1133343.017741,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/7162,you can use pushProjectHistoryDeleteState method as reference
7188,2024-08-28T10:20:27Z,2024-08-28T14:22:28Z,grliszas14,0,4,1,237,15,2,1,[],,0,14525.0,0,0,0,0,1130739.170706,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7158
","Why did you decide to use a separate object instead of just passing this? oh, I did it the same way as it is done in TracksListModel -> should I fix that in both? I asked Elnur... in general, he took this solution from MuseScore, it made sense there, but here and in TracksListModel it doesn't make sense :) You can just pass this  fixed"
7200,2024-08-28T18:51:29Z,2024-08-29T08:47:42Z,kryksyh,1,0,1,2,1,2,2,[],49832.0,1,50173.0,0,0,0,0,1064429.33295,,0,1,0,False,['kryksyh'],"@dozzzzer could you review and check this change, please?",,"Resolves: -

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7179,2024-08-27T13:30:30Z,2024-08-28T07:55:58Z,igorkorsukov,0,2,3,395,17,2,1,[],,0,66329.0,0,0,0,0,1171781.121989,,0,3,0,False,[],,,,"Don't we need to reset this flag somewhere? you are right! I had a reset, but when I discovered that there was no track in the delete and started to rework it, I lost it

fixed"
7146,2024-08-22T21:32:51Z,2024-08-27T16:10:57Z,vsverchinsky,2,0,2,71,10,2,2,[],49389.0,0,412726.0,0,0,0,0,1228443.47951,,0,2,0,False,"['chinakov', 'vsverchinsky']","Tested, thanks! The bug can still be reproducd. @LWinterberg Could you please check add tell if it now behaves as expected, if so I might change implementation a little bit to exclude possible unintended changeslooks good now!",looks good now!,"Resolves: #7124 

Paste behaviour change: when pasting all clips and labels to the right from the beginning of selection intrval should move accordingly, if sync lock disabled and ""...clips can move"" option is enabled

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA: Please check operations that involve track copying with two types of selections - one that ends inside wave clip, second one that has ends with emptiness (it may also be an empty wave interval):
 - [x] Copy/Paste
 - [x] Cut/Paste
 - [x] Split cut/Paste
 - [x] Effect preview (!)
 - [x] Effect ""Repeat""
",
7168,2024-08-26T12:57:24Z,2024-08-27T12:43:41Z,saintmatthieu,1,0,8,1282,49,1,1,[],74307.0,1,85577.0,0,0,0,0,1240921.573536,,0,8,0,False,['dozzzzer'],"@saintmatthieu 
Applying Fade Out gives the result that Fade _IN_ would give:

Actual:

<img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/6cb959e4-e5c8-437b-903e-c2e5fb2a894e"">

Expected:

<img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/9ea5b78a-8068-4df2-85ab-60ad01580196"">
",,"Resolves: #7167 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
The following effects have been relocated. Please verify (esp. on Mac and Linux, where I haven't done it myself) that the effects are still discovered and made available in the effect menu:
- [x] Fade in
- [x] Fade out
- [x] Reverse
- [x] Repair
- [x] Stereo to Mono (Tracks > Mix > Stereo to mono)
- [x] Invert
Also
- [x] Applying reverse with label track selected still reverses the labels
",
7170,2024-08-26T14:41:04Z,2024-08-27T09:11:21Z,Eism,0,0,1,2,1,2,2,[],,0,66620.0,0,0,0,0,1253658.699073,,0,1,0,False,[],,,,
7166,2024-08-26T12:31:29Z,2024-08-26T14:44:29Z,Eism,0,0,2,307,4,1,1,[],,0,7983.0,0,0,0,0,1320073.231167,,1,2,0,False,[],,,Resolves: #7147,
7163,2024-08-26T12:00:55Z,2024-08-26T14:42:04Z,grliszas14,0,0,1,22,4,1,1,[],,0,9672.0,0,0,0,0,1320218.599087,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6836
",
7165,2024-08-26T12:29:54Z,2024-08-26T12:35:16Z,saintmatthieu,0,0,1,115,21,1,1,[],,1,322.0,0,0,0,0,1327831.778104,,0,1,0,False,[],,,"Resolves: #7089

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA: none",
7090,2024-08-13T11:04:13Z,2024-08-26T13:11:51Z,kryksyh,20,6,2,121,3,2,1,[],3017.0,1,1130859.0,0,0,0,0,1325635.87107,,0,2,0,False,"['kryksyh', 'petersampsonaudacity', 'dozzzzer']","@kryksyh 

Dmitry,  I have just kicked off a stereo recording - of out shortly but I plan to let this run and run including overnight if it fails to crash in the meantime (fingers crossed). Crashed after 5h 5m
![image](https://github.com/user-attachments/assets/48b963c9-1b57-4eb9-87ca-c5e01a690e79)

I see a new build is in progress ...

Petee
 @petersampsonaudacity 
Peter, thanks for the update. 
I still failing to reproduce the issue on my machine, so I'm trying to catch the bug blindfolded.
I see one interesting thing on your screenshot, though: you have the waveform zoomed out to fit the screen. Is this how you always run the tests? > I see one interesting thing on your screenshot, though: you have the waveform zoomed out to fit the screen. Is this how you always run the tests?

@kryksyh 
Dmitry, yes that is how I have been running these tests:
a) lets me see hourly progress
b) avoids to much re-drawing of the waveform window

Nit How I would normally record wher I would be zoomed in a lot more though.

I've got a test running with your latest build, 50 mins so far and all is OK Testing on W11 with @kryksyh 's lates brancg test build:  audacity-win-3.6.2-alpha-20240813+16a7f69-x64

I have now sustained 12h 35 of recording without a crash

STRs
1. purge Audacity settings folder
2. Launch the test build
3. Press Record
4. Zoom out so 13 hours is visible in the tracks pane
5. 12h 03m - Audacity still recording
6. Press Stop
7. Prss Record
8. Recording continues on same track
9. 12h 10m Audacity still recording
10. press Stop
11. Press Shift + Record to record on a new track
12. 12h 20m Audacity still recording
13. Place cursor at 12m 20s in first track
14. Press Record to record in top track
15. Press Pause - recording pauses
16. Press Pause - recording continues
17. 12h 35m Recording still continuing
18. Press Stop
19. Exit Audacity withot saving
20. Observe:  **NO** crash

So functionally this looks good to be pulled into 3.6.2 Beta for further testing - _But I'm guessing a code review approval may be needed first._ @petersampsonaudacity 
Peter, thanks again for the update. This looks promising. By the way, do you experience a severe slowdown when zooming out on a 12-hour recording? > By the way, do you experience a severe slowdown when zooming out on a 12-hour recording?

@kryksyh 
Dmitry, no I don't notice any such slowdown or loss of response from Audacit when zooming back and foirth from 12 hours displayed to normal zoom, nor when zooming back to 12 hous displayed.
 @kryksyh 

Dmitry, I've just kicked off a recording using your latest test branch build:  audacity-win-3.6.2-alpha-20240814+4074e72-x64

I'm planning to let this run overnight and will report back in the morning.  _(Fngers crossed)_ Testing on W11 with @kryksyh 's latest branch build for this:  audacity-win-3.6.2-alpha-20240814+4074e72-x64

I got a crash at 2h 7m 19s
![image](https://github.com/user-attachments/assets/9129e424-f1ac-47ab-b500-b386837ed8a7)
 PR was updated with one more fix for another crash reason. Testing on W11 with @kryksyh 's latest branch test buid for this:  audacity-win-3.6.2-alpha-20240820+63fc474-x64

Hi Dmitry,

last chance to test on W11 for a while - and the most I can let it run for is an hour or so - as we are packing up in Zurich, returning to Manchester and W10 later today.

### UPDATE
Ih 41m later still recording nicely.  Stopped the recording Testing on W10 with @kryksyh 's latest branch test build for this:  audacity-win-3.6.2-alpha-20240820+63fc474-x64

Hi Dmitry,

Now I'm back in Manchester I've just downloaded your latest test branch for this om my W10 laptop.

Just set running a recording which hopefully may run overnight ...
 Testing on W10 with @kryksyh 's latest branch test build for this:  audacity-win-3.6.2-alpha-20240820+63fc474-x64

Hi Dmitry,

This latest test build had the recording running for 16 hours 30 minutes - with no crash.

_This chewed up most of the remaining free space on my SSD C: drive, which thankfully got released properly once I exited the project without saving._

Looks, from a functional perspective, good to go for pushing to a 3.6.2 Beta. @kryksyh 

Hi Dmitry,

so now I am testing the very latest 3.6.2 Beta build using my slower 1TB HD as the location for the temporary files (the app of course remains on my SSD C: drive)

Will report back later.



============================================

### UPDATE
Crashed after 1h 10m 26s Audacity just froze after 1h 27m on my end. @petersampsonaudacity @dozzzzer, in a way, this is a positive change. Waiting 1.5 hours for a crash is better than waiting 16 hours. Thanks again, any clues on how could I reproduce it on my side? @kryksyh It's still very inconsistent, the same as before: right now, almost five hours in, it's still recording and doesn't crash or freeze. @kryksyh @dozzzzer 

I agree with Sergey, there appears to be no consistency in the length of time.

Tonight I will try with my temporary files set on a 32GB exFAT USB clip drive, just to see if a slower drive collapses sooner

_I just kicked it off - Audacity's Status Bar says that it gives headroom for 24 hours of stereo recording ..._

_I'm assuming that I should still be using @kryksyh 's latest branch for this from 3 days ago?_

 @kryksyh @dozzzzer 

Well, I really don't entirely understand what happened there.

Test is: temporary files set on a 32GB exFAT USB clip drive, running Dmitry's branch build: temporary files set on a 32GB exFAT USB clip drive

1)  I woke up to find a black screen with a message saying it had failed to boot as it couldn't find a boot device.

2) I removed the USB clip drive , turned off the machine and on again. It booted fine as usual from my SSD C: drive

3) I reinserted the clip drive and launched Audacity, **NO** recovery was offered.

4) I examined the Session Data folder on the clip drive it had the AUP3 WAL and SHM all tagged as ""unsaved"" - see screenshot below.

5) I examined the space left on the clip drive - plenty left

6) I right-clicked on the New Project ... .aup3unsaved and manged to open it with Audacity.

7) It showed that recording had stopped just after 40 minutes.

![image](https://github.com/user-attachments/assets/b67b0288-709f-4415-9d05-57215136858a)

================================================================

I'm not sure that this test (and its outcome) has any real relevance to this issue as logged.

But it does re-enforce for me the advice that we give in the manual about not using external clips and disks for live projects.

Having said that I have used clip drives many times in the past when I was testing for disk space exhaustion when we introduced a trap and error message for that.

I guess that he morning's black screen and boot failure could possibly have been caused by an overnight Microsoft update which forced a reboot (one that failed, probably because of the inserted clip drive).
 A subsequent test using the 32GB USB clip drive ran successfully for 24h 03m 11s (until it filled the disk).

The disk full was trapped and reported by Audacity - the project was salvageable by saving to a bigger disk.

For fuller report see PR #7018 Might be missing `mBlockCount` update in `Sequence::AppendBlock`",Might be missing `mBlockCount` update in `Sequence::AppendBlock`,"Resolves: [#7018](https://github.com/audacity/audacity/issues/7018)

Use deque instead of vector to prevent reallocations

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","In that case `.load` might not be necessary, but won't harm either Is it necessary? I guess that should be enough to update `mBlockCount` in `HandleXMLEndTag`? Yes, I definitely overdid it here. I agree, but let's keep it, for who knows where this code will end up eventually. Shouldn't it be `requiredSample - sequenceSampleCount`? Though no I see no harm I believe that having it as it is will be slightly better, as it give us possibility to walk out of the If block and get the data from `sequence`."
7139,2024-08-22T10:56:41Z,2024-08-26T09:26:25Z,grliszas14,0,0,1,5,2,1,1,[],,0,340187.0,0,0,0,0,1339162.047754,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7115
",
7149,2024-08-23T12:38:33Z,2024-08-26T07:26:54Z,igorkorsukov,0,0,1,555,33,1,1,[],,0,240501.0,0,0,0,0,1346336.587986,,0,1,0,False,[],,,"https://github.com/audacity/audacity/issues/7152

From https://github.com/audacity/audacity/compare/master...saintmatthieu:audacity:6954-offline-effect-poc-3#diff-80be53273b81fd413a10f579792a0a1cd1eda5546bf8d25b030bb7e06f7548aeR9 

as is ",
7140,2024-08-22T13:38:58Z,2024-08-23T12:23:50Z,LWinterberg,0,0,1,31,2,1,1,[],,0,81897.0,0,0,0,0,1587717.221985,,0,1,1,False,[],"Everything seems to be in order, thanks!","Everything seems to be in order, thanks!",,
7145,2024-08-22T16:52:54Z,2024-08-23T07:41:43Z,Eism,0,0,2,79,7,2,2,[],,0,53331.0,0,0,0,0,1604648.015355,,0,2,0,False,[],,,Resolves: #7144,
7132,2024-08-21T12:41:32Z,2024-08-23T07:40:09Z,Eism,0,0,1,81,5,2,2,[],,0,154796.0,0,0,0,0,1604666.534215,,0,1,0,False,[],,,added global delete for trackedit which depending on the system state calls the correct action,
7143,2024-08-22T14:25:28Z,2024-08-22T15:04:15Z,grliszas14,0,0,1,1,1,1,1,[],,0,2331.0,0,0,0,0,1664496.814202,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/7142,
7126,2024-08-20T19:08:05Z,2024-08-21T17:47:51Z,vsverchinsky,4,3,1,7,2,2,1,['crash / freeze'],61909.0,1,151983.0,0,0,0,0,1670689.08647,,0,1,1,False,"['vsverchinsky', 'dozzzzer']","While testing this PR, I can still reproduce the ""Sync Failed"" error message after trying to retrieve the project that was previously uploaded using this exact 32-bit build and then removed from the local `CloudProjects `directory. However, Audacity doesn't crash after the error message. Is this expected? @vsverchinsky  Please ignore my previous comment. In this PR's build I cannot reproduce the sync failed problem anymore.  @dozzzzer Attempt to download project that was corrupted by 32bit app (there should be no local copy) should fail with the message you mentioned. But before this patch it could also crash. It crashes for me in debug version almost in 100% cases. Btw did you try it on Mac or Windows?  I've tried both and it only gives me that error message and never crashes. @vsverchinsky ",,"
QA: attempt to sync with remote project when there is no local copy could crash the app when something goes wrong. Should be more or less reproducible with remote project created in 32 bit 3.6.1 and clean `CloudProjects` directory

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I may be missing something, but shouldn't we call OnFailure here? Attempt to call `RemoteProjectSnapshot::OnFailure` is UB because object itself is destroyed, and from what I see `OnFailure` is invoked before that. I see. Thanks for the explanation. "
7133,2024-08-21T12:47:16Z,2024-08-22T12:55:01Z,kryksyh,0,0,1,18,1,2,2,[],,1,86869.0,0,0,0,0,1672254.022414,,1,1,0,False,[],,,"Resolves: #7130

To QA: Could you test any other multichannel formats to check if they are handled properly?

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7135,2024-08-21T13:54:18Z,2024-08-22T12:17:12Z,kryksyh,0,0,1,125,2,1,1,[],,1,80583.0,0,0,0,0,1674518.558992,,1,1,0,False,[],,,"Resolves: #7134

* Wait until the main window is visible before hiding the splash screen
* Fade-out splash screen instead of simply hiding it

To QA: please test this PR on all available platforms, as it may behave differently depending on the system

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7138,2024-08-22T10:36:15Z,2024-08-22T10:56:03Z,grliszas14,0,0,2,15,4,1,1,[],,0,1193.0,0,0,0,0,1679392.797938,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7082
Resolves: https://github.com/audacity/audacity/issues/7137",
6834,2024-07-08T08:44:12Z,2024-08-22T10:40:16Z,grliszas14,0,6,1,285,10,3,1,[],,0,3894970.0,0,0,0,0,1680340.28667,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6766,"I think we should only send clips that were added, not all clips from the current track Could you please explain these changes?  Project needs to have a tempo setup - if it doesn't when you try to copy&paste a clip then Paste() function throws an exception. So for now I've set a hardcoded 120 BPM (it's not used anywhere yet except copy&paste logic)  Fixed  Won't harm to mention the clipboard in the names of the added functions fixed"
7136,2024-08-21T14:42:23Z,2024-08-22T08:36:02Z,Eism,0,0,1,17,2,1,1,[],,0,64423.0,0,0,0,0,1687797.59371,,1,1,0,False,[],,,"improves the situation with #6975, but with very fast zoom in and zoom out audacity still crashes",
7129,2024-08-21T10:46:55Z,2024-08-21T12:53:23Z,Eism,0,0,1,2,1,1,1,[],,0,7591.0,0,0,0,0,1758758.833753,,0,1,0,False,[],,,Resolves: #7128,
6851,2024-07-11T12:40:03Z,2024-08-19T05:51:24Z,kryksyh,1,2,1,523,3,2,1,[],2155402.0,1,3469370.0,0,0,0,0,1832593.599496,,1,1,1,False,['chinakov'],"I have made several test runs of launch times, and it seems that your improvement had halved the launch time needed. Thank you! 

Here are the results, if you are interested: https://docs.google.com/spreadsheets/d/129_z_V-H6lX4-_NaVNkSqokPCoEJaf_HgjCGRZxNB1c/edit?usp=sharing",,"Remove unnecessary sample rate probing during startup to improve startup time.

The changes do not affect the user experience. This sample rate probing takes less than a second in most cases and configurations.

However, in certain conditions:
- GDB
- default device is pipewire

 the application startup could take more than a minute:

[master branch](https://github.com/audacity/audacity/assets/314303/a2189068-7feb-41ec-abd9-53ca5faec022)


And with these changes it is significantly faster:

[slightly less sample rate checks](https://github.com/audacity/audacity/assets/314303/1e124bdb-1c9e-4be6-9f68-5250626d77db)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",please initialize with the default values Thanks!
7098,2024-08-14T15:39:01Z,2024-08-20T12:50:42Z,kryksyh,0,0,1,3,1,1,1,[],,1,508302.0,0,0,0,0,1845324.285922,,1,1,0,False,[],👍 ,👍 ,"Resolves: #7093, #4781

If the window is minimized, the ruler panel tries to repaint itself infinitely.
The reason is that the horizontal position is updated if auto-scrolling is enabled (`mLastDrawnH != viewInfo.hpos`), but the OnPaint method is not called because the window is not visible.  As a result, ""bool changed"" is always true, resulting in high CPU usage.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6934,2024-07-22T08:56:27Z,2024-08-20T12:49:32Z,DavidBailes,10,0,1,4,1,1,1,[],4563.0,0,2519585.0,0,0,0,0,1845397.553546,,1,1,0,False,"['DavidBailes', 'LWinterberg', 'petersampsonaudacity', 'saintmatthieu']","Thank you @DavidBailes for jumping on this!
I'd like to have @LWinterberg 's opinion, though. I think the intention really was to put focus and selection on the imported material.
In 3.5, the behavior was like below:
![image](https://github.com/user-attachments/assets/80c3b2bb-f4f9-4082-b579-d8dc4079091f)
![image](https://github.com/user-attachments/assets/a02627dc-8925-435e-88fa-741a0ae398bc)
The usefulness of keeping the selection interval untouched but applying it to the newly imported track is dubious to me.
 > The usefulness of keeping the selection interval untouched but applying it to the newly imported track is dubious to me.

A more common case would probably be that initially, there is no time selection, just a cursor position. Why should importing a track loose that cursor position, and instead have a time selection covering all the audio in the imported track? If a user wants to select all the audio in the import track they can easily do so, rather than it being done automatically for them, whether or not they want it. > Why should importing a track loose that cursor position, and instead have a time selection covering all the audio in the imported track?

Because we have that horrible feature bug of giving people error messages when they have no audio selected and go to applying any effect. Automatically selecting audio would be a way around it. (automatically doing a clip selection instead would be better, but we don't have that concept yet). See also #1725 > > Why should importing a track loose that cursor position, and instead have a time selection covering all the audio in the imported track?
> 
> Because we have that horrible feature bug of giving people error messages when they have no audio selected and go to applying any effect. Automatically selecting audio would be a way around it. (automatically doing a clip selection instead would be better, but we don't have that concept yet).

But as you've already pointed out in the issue you linked to (see below), the alternative to automatically selecting audio when it's imported/recorded/etc, is to have a way of intelligently selecting audio is none is selected. This has the advantage that it doesn't mess up users who know what they are doing, see eg the forum post which raised the issue: https://forum.audacityteam.org/t/audacity-3-6-is-out-now/111894/42?u=david_bailes

> See also #1725

In that issue, here's your last comment:
<quote>
I feel like the solution here would be to

1. always apply effects to the clip the edit cursor currently is in, as opposed to the entire project, when nothing is selected, and
2. not select anything upon creating audio
</quote>

and I think that's roughly the the right way to go. I don't think that the right way to go is to select all created audio, eg recording, import, etc.

If there was proper clip selection, as you mention above, this might provide an alternative which wouldn't involve loosing the cursor position.

 Testing on GitHub with @DavidBailes 's test branch build for this:  audacity-win-3.6.1-alpha-20240722+2594629-x64

a) importing a file does not get that audio audio selected

b) **BUT** - when you import a file the time selection that was originally present gets transferred to the newly imported track:
![image](https://github.com/user-attachments/assets/b197bb29-ff9a-4404-8753-507048b0b32b)
And applying an effect show that the selection is indeed in the new track and this is **not** just a visual/display error


**So the user's original carefully made selection is still being destroyed**
 > b) **BUT** - when you import a file the time selection that was originally present gets transferred to the newly imported track

This is the same behaviour as 3.5.1 and previous versions - the last imported track becomes selected. This PR does not change that, it only removes the change in the time selection. > This is the same behaviour as 3.5.1 and previous versions - the last imported track becomes selected. This PR does not change that, it only removes the change in the time selection.

Yes, I just tested that - and it is the case all the way back through to 1.2.6 (and possibly earlier)

BUT that looks erroneous to me.  

@LWinterberg @dozzzzer 
Do we need a new issue for the time selection being moved to the newly imported tack?  Or should this just be fixed within the scope of this current thread?

Certainly Forum user ShelbyShark thinks so - see the second Forum link that I posted in the original post in the issue thread #6929
https://forum.audacityteam.org/t/audacity-3-6-is-out-now/111894/42
And I am **strongly** minded to agree with her.
 I'd like to await a bit more feedback before committing to reverting this change. The previous behavior doesn't make much sense to me, the current one does (even though it breaks some folks' workflows).  > I'd like to await a bit more feedback before committing to reverting this change. The previous behavior doesn't make much sense to me, the current one does (even though it breaks some folks' workflows).

@LWinterberg . Concerning breaking this previous workflow. You set the cursor position based on the audio in the existing tracks, you import some audio, and then time shift the audio in the new track it so that it starts at that cursor position. This workflow is possible in 3.5.1, and in all(?) previous versions.
In Version 4.0, then I presume that this workflow will be possible, because it will be possible to select the clip ""properly"" and so have the audio selected, AND leave the cursor position unchanged.
So why break this workflow in 3.6.x, only for it to be OK again in 4.0? > In Version 4.0, then I presume that this workflow will be possible, because it will be possible to select the clip ""properly"" and so have the audio selected, AND leave the cursor position unchanged.

On second thoughts, I'm not completely sure what the most user-friendly behaviour for this will be in 4.0. (In Reaper, the equivalent workflow works because the audio is inserted at the cursor position.)",,"Resolves: https://github.com/audacity/audacity/issues/6929

Problem:
In 3.6.0, when importing audio files, the time selection is set to cover the audio in the last imported file. This is a change wrt previous versions, can means that users loose any previously set time selection. It was introduced by the commit: 4532f561db

Fix:
Remove the setting of the time selection when importing audio files.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7118,2024-08-19T12:51:11Z,2024-08-20T12:46:36Z,LWinterberg,0,0,1,6,1,1,1,[],,0,86129.0,0,0,0,0,1845570.276962,,0,1,0,False,[],,,Resolves: #6702,
7122,2024-08-20T08:03:38Z,2024-08-20T12:11:46Z,kryksyh,0,0,1,6,1,1,1,[],,1,14891.0,0,0,0,0,1847663.226416,,1,1,0,False,[],,,"Resolves: -

Update translations for clarity

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7123,2024-08-20T08:28:57Z,2024-08-20T10:01:34Z,igorkorsukov,0,7,1,149,15,3,2,[],,0,5557.0,0,0,0,0,1855479.219048,,0,1,0,False,[],,,,"missing return statement? oops  Since we are using pointers as id, it might make sense to use `using WaveClipID::type = uintptr_t` here for clarity, though it is effectively the same as uint64_t on most platforms.
 Here, clip ID will have aligned values, so the result might not be as expected. I thought about it, but I don't want to reveal the information that it is a pointer, i.e. that this pointer is a hack and just a current implementation detail thank you, fixed  This would work as long as color count is not a multiple of 4, otherwise all clips would have the same color. But as I understand this is a temporary solution, so I believe this is fine for now.

https://godbolt.org/z/6Pz5jhWdb

"
7117,2024-08-19T09:30:08Z,2024-08-19T12:43:14Z,Eism,0,0,1,2,1,1,1,[],,0,11589.0,0,0,0,0,1932178.122464,,0,1,0,False,[],,,Resolves: #7065,
7109,2024-08-17T14:49:56Z,2024-08-19T08:44:19Z,Eism,0,0,5,275,12,1,1,[],,0,150867.0,0,0,0,0,1946513.171118,,0,5,0,False,[],,,"- now when selecting a track in au4 the corresponding tracks are selected in au3
- if an error occurred during the recording process, we now show a dialog with a description of this error
- enabled restart when reverting to factory settings 
- fixed crash on first launch (after reverting settings)
- fixed a bug when matching au3 keys in au4 settings",
7095,2024-08-13T15:26:04Z,2024-08-19T08:37:48Z,saintmatthieu,0,0,2,663,5,1,1,[],,0,493904.0,0,0,0,0,1946909.746801,,0,2,0,False,[],,,"Resolves: #7094

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7092,2024-08-13T11:55:25Z,2024-08-19T08:33:55Z,saintmatthieu,5,2,4,524,18,1,1,[],78.0,0,506311.0,0,0,0,0,1947142.793849,,0,4,0,False,"['Eism', 'saintmatthieu']","@vsverchinsky this PR depends on #6954, hence the many commits. At the time of writing, the last 4 commits only are specific to this branch. I liked the previous approach better - we had one class related to the amplify effect, and now we have two classes in two locations.
I also don't understand how to implement a qml view for this effect.
I would suggest looking at my solution in [this PR](https://github.com/audacity/audacity/pull/7054) - move Amplify to au4 code in the effects module. We will have one class and one place, we can also replace wxWidgets with qml in this class and there will be a few changes.

If you want to separate processing from the UI, then I think it is better to add a new separate class AmplifyProcess and move all the code there, and call the new class in the AmplifyEffect process method. This approach solves the two-location problem
 Hey @Eism,

I see in your PR (which looks like an RFC (Request For Comments) at the moment?) that we have a fundamentally different approach. You opt for a copy-paste approach while I try to make AU3 code reusable. I'm doing so because what I think should be reused is _not only_ a processing method, but also (using `EffectAmplify` as example) :
* the application logic of the effect: e.g. `EffectAmplify::Init()` inspects the contents of the audio track selection, to know which amount to apply to achieve a desired target peak amplitude value.
* the integration in the broader Audacity application logic: `EffectAmplify` inherits from e.g. `PerTrackEffect::Process`, which (among other things)
  * creates temporary track objects from the selection,
  *  renders time-stretching if any
  * feeds the processor method with the audio from the track clips
  * throws away the result of the processing if there was a failure, and commits it otherwise.

For this reason I urge to reuse as much as possible the effect framework, at least for the destructive effects. (This is not a use case for the MuseScore audio engine anyway.)

> I also don't understand how to implement a qml view for this effect.

If the generic approach we must use for Nyquist and Vamp effects is also adopted for built-in effects, then on the middle term it could look like in [my response to @vpereverzev's message](https://mu--se.slack.com/archives/C07D86RJY73/p1723634346437349?thread_ts=1722344540.779879&cid=C07D86RJY73). If you need something now, you should write a new class that inherits from `AmplifyBase` ; the members you need for read/write are declared as `protected`. I demonstrated that on my PoC, please take a look at [this video](https://mu--se.slack.com/archives/C06RX437GJV/p1722943713942859) at 1:33 : 
![image](https://github.com/user-attachments/assets/76cb8db0-991d-49fb-8533-0629688e1e77)
`Au3Amplify` can read and change `mRatio` and other parameters.
 @Eism actually, our concerns might be compatible.

In your PR, you've introduced `au3::effects::EffectAmplify`, which mirrors AU3's `EffectAmplify`.
`au3::effects::EffectAmplify` could well copy-paste the body of the original, wxWidget-dependent `EffectAmplify::PopulateOrExchange` method and wx with Qt widgets like you intend to do. Only you'd need `au3::effects::EffectAmplify` to also inherit from the `AmplifyBase` class I'm introducing here, so you can access the members you need for the UI (`AmplifyBase::mRatio`, `AmplifyBase::mClip`, etc.) You've been asking about that `Show()` method.

The `Show` method is only on my PoC branch. I introduced an `IEffectDialog` abstract API, inherited from `Au3Amplify` (my au4 version of your `au3::effects::EffectAmplify`, so that it can be called from `DoEffect` independently on the implementation (whether amplify, compressor, etc.):
```cpp
namespace au::au3
{
class IEffectDialog
{
public:
    virtual ~IEffectDialog() = default;
    virtual bool Show() = 0;
};
} // namespace au::au3
```
then `class Au3Amplify final : public AmplifyBase, public IEffectDialog`, which allows it to get called in
```cpp
auto showEffectHostInterfaceCb = [](Effect& effect, ...)
      {
         ...
         auto dialog =
            dynamic_cast<au::au3::IEffectDialog*>(&effect);
         if (!dialog)
            return false;
         if (!dialog->Show())
            return false;
         ...
         return true;
      };
...
AudacityApplicationLogic::DoEffect(..., std::move(showEffectHostInterfaceCb));
```
But this `IEffectDialog` is only PoC code. Maybe instead you will use
`class au3::effects::EffectAmplify : public AmplifyBase, public AbstractEffectModel`, the callback would dynamic-cast `effect` to an `AbstractEffectModel` and call whatever method shows the UI.",,"Resolves: #7091

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`override` I don't insist but rather suggest that it could be a module
7116,2024-08-19T07:53:25Z,2024-08-19T08:29:11Z,saintmatthieu,0,0,1,33,5,1,1,[],,1,2146.0,0,0,0,0,1947429.531232,,0,1,0,False,[],,,"Resolves: build failure

https://github.com/audacity/audacity/pull/7099 and later https://github.com/audacity/audacity/pull/7017 merged different definitions of the same declarations. This PR resolves this.

Note that, in the au4 project, this should probably be resolved in a follow-up PR as discussed [in this and following comments](https://github.com/audacity/audacity/pull/7099/files#r1718120001). This PR only does the necessary to repair the AU3 build and remove unnecessary sources from the AU3 build tree.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7099,2024-08-14T20:55:09Z,2024-08-16T11:31:29Z,Eism,0,9,13,1435,40,2,2,[],,0,384126.0,0,0,0,0,1950546.683185,,0,13,0,False,[],,,,"Just out of interest, I'm not calling for correction, why not just like this?
```
if(WIN32)
   set(MODULE_SRC ${MODULE_SRC} ${AU3_LIBRARIES}/lib-files/PlatformCompatibilityWindows.cpp)
elseif(APPLE)
   set(MODULE_SRC ${MODULE_SRC} ${AU3_LIBRARIES}/lib-files/PlatformCompatibilityMacOS.cpp)
else()
   set(MODULE_SRC ${MODULE_SRC} ${AU3_LIBRARIES}/lib-files/PlatformCompatibilityLinux.cpp)
endif()
```

If there are more platform-dependent files, it is easy to add them, but in the original solution we will have to create more and more new variables better to use our platform defines from `include(GetPlatformInfo)`  Question for the future, have you checked if there are any hard dependencies with some code from au3? Or can these sources be used independently by add them to some separate module? What is ModuleManager? For us, these classes that return paths can become a problem.
The application as a whole should have one source of truth for returning standart paths.
In AU4, this is IGlobalConfiguration (https://github.com/musescore/framework_tmp/blob/main/framework/global/iglobalconfiguration.h) (internally, this is QStandardPaths   https://github.com/musescore/framework_tmp/blob/main/framework/global/internal/globalconfiguration.cpp)
If we use these classes, there will be two sources of paths and the paths can be different for the same entity, this will become a problem.
It would be good to do it like this:
* In AU3, add an interface that returns paths.
* Add the ability to register an implementation of this interface.
* In AU4, we register our implementation, which receives paths from IGlobalConfiguration.
* In AU3, our own implementation should be substituted, if needed. Or even better, all paths should be passed as parameters to methods...
And then we can simply have different call points, with different sources of parameters I agree, there should be one source of truth. If you already have this functionality implemented in AU4, that's the one that should be reused, of course.
This code is a bit outdated. @vsverchinsky suggested a better approach which I applied to my PR: see [this commit](https://github.com/audacity/audacity/pull/7017/commits/17d74067d6794f81ee12cd2ab4483e4bde1704e1). In the AU3 source tree, we add `PlatformCompatibilityWX.cpp`, which provides definitions for `PlatformCompatibility::GetUserDataDir()` and the rest using the wxWidgets methods we used before, so we're sure there are no behavioral changes. I had in mind that the au4 sources could have `PlatformCompatibilityQt.cpp`, which would invoke `GlobalConfiguration::userDataPath()` and other appropriate methods? > I had in mind that the au4 sources could have PlatformCompatibilityQt.cpp, which would invoke GlobalConfiguration::userDataPath() and other appropriate methods?

Just please let's make sure that there is no Qt in the name :) 
The following options are possible:
* PlatformCompatibilityAU4
* PlatformCompatibilityMuse This comment wasn't actually addressed: this PR was merged with PlatformCompatibilityWindows.cpp etc."
7017,2024-08-02T12:14:48Z,2024-08-19T05:59:32Z,saintmatthieu,3,29,2,3527,56,3,1,[],593625.0,1,1446284.0,0,0,0,0,1956411.894914,,0,2,0,False,"['vsverchinsky', 'saintmatthieu']","> One suggestion. I looked into `EffectsManager` implemenation and to me it seem that actually there are two interfaces combined: one for effects and the second one for commands. Attempt to extract `IAudacityCommand` results in massive changes that are unlikely useful for Audacity 4 progress (but if so, what I suggest does not prevent us from future refactroing). Alternative solution is to define abstract command interface inside EffectManager:
> 
> ```
> class EffectsManager {
> public:
> 
> class BasicCommandsInterface
> {
> public:
> 
>    virtual bool HasCommand(const PluginID& id) = 0;
>    virtual bool Do(const PluginID& id) = 0;
>    virtual wxString GetURL(const PluginID& id) = 0;
>    virtual wxString GetDescription(const PluginID& id) = 0;
>    ...
> };
> 
> struct PREFERENCES_API CommandsInterface final : GlobalHook<CommandsInterface, BasicCommandsInterface&()> { };
> 
> ...
> };
> 
> ...
> //Inject commands interface
> static EffectsManager::CommandsInterface::Scope audacityCommandsInterfaceScope {
>    []{ 
>        static AudacityWxCommandsInterface commandsInterface;
>        return commandsInterface;
>       }
> };
> ```
> 
> I expect that that would require very few trivial changes in `EffectsManager`

I don't understand:
`BasicCommandsInterface` is the equivalent to my proposed `IAudacityCommand`, right ?
Then you propose this global `AudacityWxCommandsInterface` ; but there are many implementations of `AudacityCommand` and these aren't instantiated as singletons. > BasicCommandsInterface is the equivalent to my proposed IAudacityCommand, right ?

No. With that approach no changes to `AudacityCommand` is required. There will be only few changes in `EffectsManager` interface that remove dependency on ui framework, and command related logic should be moved into `AudacityWxCommandsInterface`. Example:
```cpp
bool EffectManager::DoAudacityCommand(const PluginID & ID,
                             const CommandContext &context,
                             bool shouldPrompt /* = true */)

{
   this->SetSkipStateFlag(false);
   //Below is the old implementation that makes EffectManager depend 
   //in AudacityCommand (or IAudacityCommand):
   /*AudacityCommand *command = GetAudacityCommand(ID);
   if (!command)
   {
      return false;
   }
   bool res = command->DoAudacityCommand(parent, context, shouldPrompt);
   return res;*/
   
   //With BasicCommandInterface that dependency is removed. All command-related logic should
   //be extracted into AudacityWxCommandsInterface 
   return CommandsInterface::Call().Do(context, ID, shouldPrompt);
}
``` I pushed a better fix for that problem.
`DoEffect` is in fact only concerned with the application of plugins of type `PluginTypeEffect`. Review of the places where it is used confirms this. Hence, plugins of type `PluginTypeAudacityCommand` should have no mention in `DoEffect` whatsoever.
You were the first to observe that `EffectManager` was concerned with plugins of both type `Effect` and `AudacityCommand`. In the commits I just pushed, I extract the methods that look for both effects and commands in another class, `EffectAndCommandManager`, which can go in `src`.
Now there's no mention of commands in `lib-audacity-application-logic` anymore.One suggestion. I looked into `EffectsManager` implemenation and to me it seem that actually there are two interfaces combined: one for effects and the second one for commands. Attempt to extract `IAudacityCommand` results in massive changes that are unlikely useful for Audacity 4 progress (but if so, what I suggest does not prevent us from future refactroing).
Alternative solution is to define abstract command interface inside EffectManager:
```
class EffectsManager {
public:

class BasicCommandsInterface
{
public:

   virtual bool HasCommand(const PluginID& id) = 0;
   virtual bool Do(const PluginID& id) = 0;
   virtual wxString GetURL(const PluginID& id) = 0;
   virtual wxString GetDescription(const PluginID& id) = 0;
   ...
};

struct PREFERENCES_API CommandsInterface final : GlobalHook<CommandsInterface, BasicCommandsInterface&()> { };

...
};

...
//Inject commands interface
static EffectsManager::CommandsInterface::Scope audacityCommandsInterfaceScope {
   []{ 
       static AudacityWxCommandsInterface commandsInterface;
       return commandsInterface;
      }
};

```

I expect that that would require very few trivial changes in `EffectsManager`","One suggestion. I looked into `EffectsManager` implemenation and to me it seem that actually there are two interfaces combined: one for effects and the second one for commands. Attempt to extract `IAudacityCommand` results in massive changes that are unlikely useful for Audacity 4 progress (but if so, what I suggest does not prevent us from future refactroing).
Alternative solution is to define abstract command interface inside EffectManager:
```
class EffectsManager {
public:

class BasicCommandsInterface
{
public:

   virtual bool HasCommand(const PluginID& id) = 0;
   virtual bool Do(const PluginID& id) = 0;
   virtual wxString GetURL(const PluginID& id) = 0;
   virtual wxString GetDescription(const PluginID& id) = 0;
   ...
};

struct PREFERENCES_API CommandsInterface final : GlobalHook<CommandsInterface, BasicCommandsInterface&()> { };

...
};

...
//Inject commands interface
static EffectsManager::CommandsInterface::Scope audacityCommandsInterfaceScope {
   []{ 
       static AudacityWxCommandsInterface commandsInterface;
       return commandsInterface;
      }
};

```

I expect that that would require very few trivial changes in `EffectsManager`","Resolves: #6954 

The scope of this PR is to verify that the Audacity 3 effect framework can be re-used in Audacity 4 for destructive effects (probably paving the way for realtime effects, too).

The `PluginManager` is central in that regard, as it takes care of built-in effects, plugins (VST and such), generators, analyzers and macro commands (and possibly more), detecting them and making all relevant information accessible through its API.

On top of that, the `DoEffect` function encapsulates the Audacity 3 application logic resulting from a user applying a destructive effect on some selection: querying the data from the wave track selections, invoking the UI if needed, driving the effect whose ID was given as input, writing back the result, remembering what effect was last used, etc.

This PR also provides the AU4-specific implementation for a dummy compressor, demonstrating how a developer may get started importing an Audacity 3 effect to Audacity 4.

Commit detail :
* [Non-wxWidget-based standard paths (windows and mac only for now)](https://github.com/audacity/audacity/pull/7017/commits/fe0510fc51eb3a667027863790fe5cf181d2f261) : The plugin manager currently relies on a wxWidgets app to run to find paths such as the executable path. This commit adds platform-dependent code that does this without the the need for a wxWidgets app.
* [DoEffect reusable by Au4](https://github.com/audacity/audacity/pull/7017/commits/d05e7f745945086d20f24e9efa3c205ff8d77988) : `DoEffect` had some other dependencies on wxWidgets, sometimes indirect ones (on the `EffectManager` or the `AudacityCommand`) which had to be abstracted away :
  * The `EffectManager` contains some of the application logic of what happens when Audacity users apply an effect,
  * The `AudacityCommand`s are an abstraction of the well-known macro commands, which allow a user to execute with one click a series of operations (e.g. select all tracks, apply noise reduction and export to a wav file all at once). This abstraction allows the plugin manager to manage these commands like other effect types.
* [CompressorInstance part of lib-audacity](https://github.com/audacity/audacity/pull/7017/commits/e23800663c5f9688addcc65ae542fcdc27ba3274) : an example of the code that Au4 needs to compile for a given effect to be found by the PluginManager. Now in Au4, the plugin manager can find at least one effect, and we can use it to process audio. Such work will have to be done one a per-effect basis.
* [Au3WrapModule initializes PluginManager](https://github.com/audacity/audacity/pull/7017/commits/243542c54ec1c2da7d84051152fd11c72b2e26c9) : does just what it says
* [au4: Selection change updates ViewInfo and TrackList selection](https://github.com/audacity/audacity/pull/7017/commits/5c0756a38c9d8c39d63a00dad2b68ab166535cc8) : without this, `DoEffect` thinks no audio is selected and then nothing happens.

What this PR does not do is connecting the Audacity 4 effects menu to usage of the `DoEffect` function. Another PoC branch based on this one exists with a [hack commit](https://github.com/audacity/audacity/commit/234dbc6f14d6cc5905f69e9bcb5f7475d0ab14af) that does this quick-and-dirty to verify that things work as expected.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

### QA list:
This is a refactoring PR, an no behavior whatsoever should have changed.
The changes are simple (mostly renaming and moving code around) but rather widespread ; while testing please don't hesitate to choose test cases that seem related to the list below, even if only vaguely.
- [x] Please all test cases you have on Macros
- [x] Applying generators, analyzers, tools or destructive effects still works.
- [x] When successfully applying an effect, tool, analyzer or generator, the effect menu displays correctly ""Repeat <...>""
- [x] Editing a clip's name still works","We talked about this a little bit. I believe that an application should have one settings file. This code makes it so that there are two settings files, one that is created by the muse framework (it stores, for example, theme settings) and the other is created here. Should be removed from `src` After SU a few days ago we had a follow-up discussion with @Eism and @vpereverzev and IIUC there was a consensus to trying to use the Au3 library as a black box with its own persistency mechanism and making sure that this library exposes the necessary read/write from it.
But I can conceive that one mechanism for all settings for may make things better on the middle term. Only I haven't tried it and seen how the PluginManager reacts to it.
I guess we can experiment with multiple setting files for now and maybe change in the future? The code I had to write for that isn't much, throwing it away if necessary wouldn't be a big loss. I wouldn't block this PR for that, though. I only have concerns about the main config file (I have no concerns about the plugin config files).
When we move on, and the au3 code disappears completely or almost disappears, the user will still have 2 main config files - this will look very strange, and some effort will need to be made to ensure backward compatibility. 
There will also be problems directly when rewriting a code. For example, now a selected device can store au3, then we rewrite this functionality to the new code (without wx), but so that a user does not loss anything, we will still need to store (or at least read) from the au3 settings file. 

In fact, I have already implemented an adapter to the muse::settings, since we seemed to have discussed this yesterday.
https://github.com/audacity/audacity/pull/7019 I see : indeed, changing the setting implementation of the general config is even beyond the scope of this PR. Sorry that I mixed things up, will revert that line as soon as I can verify that my PoC still runs without it. (Having troubles launch the app at the moment.) Unnecessary change That could be a single `PlatformCompatibilityWX.cpp` which simply wraps calls to `wxStandardPaths`, the new implementation does not depend on wx, but might introduce unwanted behavior change.  Unnecessary change Unnecessary change Unnecessary change Unnecessary change Unnecessary change Unnecessary change Is it used at all?

 May be `BasicUI::*` would be a good replacement for it? Am I miss something? This line seem to never evaluate to `true` Just remembered that we have `GlobalHook`s, but I do not insist that we should use that one here Changes in that file are not necessary Unnecessary change Unnecessary change Unnecessary change Unnecessary change Unnecessary change I like previous name more :) Awesome ! How come I didn't think of that. Hm. Not anymore. Good catch. I think so too. I was being extra conservative. (`mMessageBoxCb` was also meant to be injected with `GetMessageBoxCb()`, but I lost that injection somewhere along the way. Anyway.) I didn't pay attention. Was added in [this PR](https://github.com/audacity/audacity/pull/722). I can't see how this could be executed either, though. Remove ? Then we'd have one callback injection less. Awesome ! How come I didn't think of it. Also maybe Qt has such helpers, too, when it gets needed in AU4.
I'll give it a try."
7040,2024-08-06T01:24:50Z,2024-08-19T05:50:48Z,nalin243,0,0,1,2,1,1,1,[],,0,1139158.0,0,0,0,0,1956936.481347,,0,1,0,False,[],,,"Resolves: *#6434*

Removed the redundant 'Enable' from 'Enable Extra Menus' in the view menu

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7100,2024-08-15T08:13:56Z,2024-08-16T12:11:23Z,Gootector,1,0,1,16,1,1,1,[],85811.0,0,100647.0,0,0,0,0,2193303.575421,,0,1,0,False,['Gootector'],@vsverchinsky It's OK now. Please merge. Thank you for your patience.,,"Update Polish Translation (3.6.2)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7106,2024-08-16T10:12:06Z,2024-08-16T11:49:37Z,LWinterberg,0,0,1,4,4,1,1,[],,0,5854.0,0,0,0,0,2194606.774456,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/7104,
7105,2024-08-16T08:43:01Z,2024-08-16T09:25:53Z,igorkorsukov,0,0,1,2,1,1,1,[],,0,2572.0,0,0,0,0,2203235.910837,,0,1,0,False,[],,,,
7101,2024-08-15T11:01:20Z,2024-08-15T13:32:56Z,saintmatthieu,0,3,2,452,29,2,1,[],,1,9096.0,0,0,0,0,2274813.239448,,0,2,0,False,[],,,"Resolves: #7097

* Change UI strings,
* Where the distinction is important, rename methods, variables and comments.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Mixer Board slider (including tooltip if any) shows ""volume"" instead of ""gain"",
- [x] Changing a track's volume through track or mixer-board slider adds a history item that mentions ""volume"" and not ""gain"".
- [x] Track slider tooltip when hovering and when dragging all say ""volume""
- [x] Track volume changes in a previous audacity version are preserved when opening the project with this build

","is `a volume gain` intentional here? and here too `a volume gain` , not sure if this is a typo? Yeah, kind of. Could have been ""(volume is applied"", but that's also acceptable I think."
7055,2024-08-07T08:57:58Z,2024-08-14T15:07:24Z,vsverchinsky,0,19,3,695,12,2,1,[],,0,626990.0,0,0,0,0,2355524.39087,,0,3,0,False,[],"I think it's going in the right direction, but I've asked a few clarifications. It's a tough PR, though, so in the next round of review I may give more attention to other things.","I think it's going in the right direction, but I've asked a few clarifications. It's a tough PR, though, so in the next round of review I may give more attention to other things.","Resolves: #7002, #7001, #7059

Channel maps disabled when exporting with master effects on.

QA: Check stereo to mono and mono to stereo export. Additionally please check for regression: Mix and Render and Stereo to Mono

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","So that fixes an out-of-bound reference on `pointers` if we have some real-time effect on a stereo track and out playout device only has one channel, right? Does it then crash?
AFAICS, if we were doing things properly further down the call stack and mixed left and right rather than only keeping the left channel, then we'd have to allocate `set->NChannels()` entries to `pointers`.
Do we want to be audacious and use this opportunity to fix things properly? 😬 I don't know how big a use case having only 1 output channel is, though, so maybe this is the simpler and safer path. Might want to keep the option if the master effect stack has only disabled effects ? Why ? For debugging ? Nice English! Oops, one too many. Why keeping these in comments? Could you explain why `2` here ? It used to be `mNumChannels`, which represented the number of output channels. I like the initiative of moving some of the complexity behind appropriate abstractions. Before this gets merged, though, I'd like to see these new classes get their own files. Then functions like `MixBuffers` would also be relocated to `DownmixStage.cpp`, and maybe others, too. Looking at this I first wondered why a ""sequence source"" might be the last node of an track's realtime effect stack. Now I see that, in fact, it exposes the processed audio, but uses `*sequence` to get information about channels and gains.
I think it'd be less confusing if it were called `ProcessedSequenceDownmixSource` and it didn't take a `WideSampleSequence` reference but only the metadata it needs about it, to make it really clear that it's not going to pull data from that reference. I was also confused by that. We have a source, from which we'd normally like to acquire data, but to do this we have to ask its _downstream_ to provide us with data. Ruined me poor brain.
I think what might have brought you to this naming is this:
```cpp
      AudioGraph::Source *pDownstream = &source;
      for (const auto &stage : input.stages)
         if (
            auto& pNewDownstream =
               RegisterEffectStage(*pDownstream, sequence->NChannels(), stage, outRate))
         {
            pDownstream = pNewDownstream.get();
         }
      mixdownSources.emplace_back(
         std::make_unique<SequenceDownmixSource>(
            *pDownstream,
            *sequence,
            pMixerSpec ? &pMixerSpec->mMap[i] : nullptr
         )
      );
```
In that case, `pDownstream` is actually an upstream. It's just called that way because, at the end of this loop, it's supposed to point to the last source of the graph, or its ""downstream"". But from the point of view of a `DownmixSource`, it's an upstream.

I would ""simply"" remove the `GetDonwstream()` method and give the `DownmixSource` the `Acquire` , `Release` and `Remaining` methods. > Does it then crash?

I'd say it should, but didn't check myself

> AFAICS, if we were doing things properly further down the call stack and mixed left and right rather than only keeping the left channel

```cpp
for(unsigned n = 0, cnt = std::min(numChannels, mNumPlaybackChannels); n < cnt; ++n)
{
   const auto gain = seq->GetChannelGain(n);
   for(unsigned i = 0; i < samplesAvailable; ++i)
      mMasterBuffers[n][i] += mProcessingBuffers[bufferIndex + n][i] * gain;
}
```

`Keep-only-left-channel` logic implemented in per-track effects, when source track is mono and playback is stereo, that could be clearly observed with spatial effects. May be it would be good and correct to change that now too. No, this is a leftover, I tried to undestand where does compiler tries to use a copy-constructor when it wasn't expected to do so. Thanks! I wish I wrote this but this is a copy-paste 🥲  No good enough explanation. When I wrote this I though that the best thing I could do is to make exported audio to be exactly same as one would hear when hit play. But there could be only one playback channel depending on device configuration. 
I agree now that what you suggest is better option. Probably the confusion comes from the fact that `DownmixSource` isn't in same hierachy with `AudioSource`
`SequenceDownmixSource`. I'll add more comments that should clarify that and extract it into a sepatate source file as you suggested > I would ""simply"" remove the GetDonwstream() method and give the DownmixSource the Acquire , Release and Remaining methods.

I'd preferred not to do that because that will simply bloat the interface. > It's just called that way because, at the end of this loop, it's supposed to point to the last source of the graph, or its ""downstream

And it is a downstream of individual processing sequence from the point of view of `DownmixStage`. Spelling I don't see the big deal in adding these few interfaces if it settles this upstream/downstream ambiguity, which to me persists in spite of your argument."
7074,2024-08-09T14:01:08Z,2024-08-14T20:56:52Z,kryksyh,0,3,2,32,2,3,2,[],,1,456944.0,0,0,0,0,2334580.5367,,0,2,0,False,[],,,"Resolves: follow up to #7038 

Cleanup and theming support

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","` qrc:/qml/Audacity/ProjectScene/trackspanel/audio/BalanceTooltip.qml:42:9: Unable to assign [undefined] to QFont` please add translation  
`qtrc(""projectscene"", ""Pan"")` Thanks, fixed!"
7080,2024-08-12T08:23:34Z,2024-08-14T14:42:12Z,grliszas14,0,1,1,15,4,1,1,[],,0,195521.0,0,0,0,0,2357059.969847,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7042
","Prefer this: id.funс() (signal) 
So it is clear what comes from where and the interpreter will find the method faster (no need to go through all the methods of all the ancestors)

```
root.clipSelectedRequested()
```"
7085,2024-08-13T02:12:21Z,2024-08-14T06:16:36Z,Gootector,1,0,1,14,1,1,1,[],13189.0,0,101055.0,0,0,0,0,2387399.688393,,0,1,0,False,['Gootector'],@LWinterberg Please merge. Thank you.,,"Update Polish Translation (3.6.2)
Fixed ""action"" translations in some cases.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7071,2024-08-09T12:30:28Z,2024-08-09T15:26:17Z,kryksyh,1,0,1,50,9,1,1,[],86575.0,1,86576.0,0,0,0,0,2710394.117892,,0,1,0,False,['petersampsonaudacity'],"@kryksyh 

I just updated the 3.6.2 alpha manual for this",,"  Resolves: [#6856](https://github.com/audacity/audacity/issues/6856)

- Reset `RMS` and `Show clipping` prefs on `Reset Configuration` command
- Repaint the waveform after settings were changed

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7073,2024-08-09T12:46:41Z,2024-08-13T12:56:08Z,grliszas14,0,11,4,473,16,2,1,[],,0,346171.0,0,0,0,0,2449826.309318,,0,4,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6871
","please initialize with default value (code may change over time... at some point the value of this variable may not be assigned) fixed A few thoughts...
It seems that this setting should not be in IProjectViewState, but something else, something like IProjectConfig. Because whether snap is enabled or not is not a state of the view, it is just a setting that can be set in different ways (via view is just one of the ways).
On the other hand, it is quite convenient now, and the separation of IProjectViewState and IProjectConfig can only add inconvenience and misunderstanding. newXPosition -> currentXPosition? and need compare with currentPlaybackPosition (maybe equal) newXPosition -> currentXPosition? better to use `!RealIsNull` better to use !RealIsNull I would recommend using isSnapEnabled as an argument 
This can be useful if we want to get the value in some other case, but not the same as set globally (in the project). It would be great if we could get values ​​with arbitrary snap settings (I feel like it would be both useful in the future and architecturally cleaner)
But it is not convenient to pass three arguments...
What do you think about combining this into one argument (structure) and also using this structure in viewState? 
Like: 

```
    struct Snap {
        SnapType type = SnapType::Bar;
        bool enabled = false;
        bool isSnapTriplets = false;
    };

    class IProjectViewState
    {
        void setIsSnapEnabled(bool enabled)
        {
            Snap s = this->snap();
            s.enabled = enabled;
            setSnap(s);
        }

        void setSnapType(SnapType type)
        {
            ...
        }
        void setIsSnapTripletsEnabled(bool enabled)
        {
            ...
        }
        virtual void setSnap(const Snap& s) const = 0;
        virtual Snap snap() const = 0;
        virtual muse::ValCh<Snap> snapChanged() const = 0;
    };


double TimelineContext::singleStepToTime(double position, Direction direction, const Snap& snap) const
{
...
}
```
 It should be one of two things: 
1. 
```
muse::ValCh<Snap> snap() const override;
```

2. or 
```
Snap snap() const override;
muse::Channel<Snap> snapChanged() const override;
```
where 
```
muse::Channel<Snap> snapChanged() const 
{
     return m_snap.sh;
}
```"
7075,2024-08-09T14:53:08Z,2024-08-10T11:02:13Z,igorkorsukov,0,0,1,2,1,1,1,[],,0,72545.0,0,0,0,0,2715867.453793,,0,1,0,False,[],,,,
7063,2024-08-08T08:38:58Z,2024-08-09T11:23:18Z,kryksyh,0,0,1,16,1,1,1,[],,1,96261.0,0,0,0,0,2801001.927899,,1,1,0,False,[],,,"Resolves: #7025

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7039,2024-08-05T16:20:55Z,2024-08-09T09:59:09Z,Gootector,1,0,1,24,1,1,1,[],17022.0,0,322695.0,0,0,0,0,2806052.830323,,0,1,0,False,['Gootector'],@LWinterberg Please merge. Thanks.,,"Update Polish Translation (3.6.2)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7023,2024-08-03T17:46:29Z,2024-08-09T09:58:38Z,Gootector,3,0,1,134,1,1,1,[],168003.0,0,490330.0,0,0,0,0,2806084.49475,,1,1,0,False,['Gootector'],"Hi, I'll check it soon. When deadline? @LWinterberg Hi, I updated the translations. In Polish, I found ""more correct"" translations for Attack/Release terms, but there are Attack/Decay terms also, so... so I think that these terms are very similar. In German, I reverted to English. ""The compressor's terms"" are very specific... @LWinterberg Please merge Polish & German. I finished the translations.Fwiw: I'm unsure if Attack/Release are translated at all in German usually. I see that https://www.thomann.de/de/onlineexpert_page_kompressoren_die_dynamischen_parameter.html for example just uses the english terms, as does https://de.wikipedia.org/wiki/Kompressor_(Signalverarbeitung)","Fwiw: I'm unsure if Attack/Release are translated at all in German usually. I see that https://www.thomann.de/de/onlineexpert_page_kompressoren_die_dynamischen_parameter.html for example just uses the english terms, as does https://de.wikipedia.org/wiki/Kompressor_(Signalverarbeitung)","Update German Translation (3.6.2)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7060,2024-08-07T17:34:52Z,2024-08-08T14:03:36Z,kryksyh,0,0,1,9,3,2,2,[],,1,73732.0,0,0,0,0,2877781.612117,,0,1,0,False,[],Congrats !,Congrats !,"Due to regression, after the stereo-to-mono split, both new tracks were assigned the same ID, which should be unique to all tracks. This was causing weird behavior, including data loss and crashes.

Resolves: #7048, #7050, #6886

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes in behavior
",
7038,2024-08-05T15:19:43Z,2024-08-07T12:22:05Z,kryksyh,0,5,1,178,6,3,1,[],,1,247006.0,0,0,0,0,2885417.929543,,0,1,0,False,[],,,"Resolves: [#6748](https://github.com/audacity/audacity/issues/6748)

* added a knob with tooltip  as a separate element
* slightly changed KnobControl to handle hover and drag states properly, which is required for the tooltip display

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It looks like this tooltip would be better made as a separate component, it will probably be needed in other places This value should be taken from the settings.
It needs to be improved, add something like a delay tooltip to the Theme property. Take it from the uiconfiguration (need add method)
 Done Done please use our components - StyledTextLabel"
7037,2024-08-05T14:28:15Z,2024-08-08T11:52:54Z,grliszas14,0,1,4,346,13,1,1,[],,0,249884.0,0,0,0,0,2885629.015966,,0,4,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6770
Resolves: https://github.com/audacity/audacity/issues/6552
","I believe we need to do things a little differently: 
* IPlayCursorController - this is the main controller for the play cursor and it should only operate on time (there should be no x coordinates, pixels, etc.)
* PlayCursorViewController - This is an adapter for view, and its main task is to convert coordinates, pixels into time and back, and pass this time to the main playcursor controller.
"
7062,2024-08-08T08:29:53Z,2024-08-08T10:08:36Z,Eism,0,0,2,896,30,1,1,[],,0,5926.0,0,0,0,0,2891890.081673,,0,2,0,False,[],,,,
7058,2024-08-07T10:45:25Z,2024-08-07T11:46:05Z,igorkorsukov,0,0,1,42,11,1,1,[],,0,3640.0,0,0,0,0,2972445.182799,,0,1,0,False,[],,,,
7056,2024-08-07T09:13:12Z,2024-08-07T10:51:54Z,igorkorsukov,0,0,1,112,16,1,1,[],,0,5922.0,0,0,0,0,2975697.285678,,0,1,0,False,[],,,,
7047,2024-08-06T11:51:58Z,2024-08-06T13:04:00Z,igorkorsukov,0,0,1,550,19,1,1,[],,0,4322.0,0,0,0,0,3054173.545085,,0,1,0,False,[],,,,
7051,2024-08-06T14:35:31Z,2024-08-06T17:26:37Z,igorkorsukov,0,0,1,711,29,1,1,[],,0,10267.0,0,0,0,0,3038415.730664,,0,1,0,False,[],,,,
7022,2024-08-03T17:22:29Z,2024-08-05T03:30:27Z,Gootector,0,0,1,110,1,1,1,[],,0,168117.0,0,0,0,0,3129749.701224,,0,1,0,False,[],,,"Update Polish Translation (3.6.2)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7035,2024-08-05T12:08:50Z,2024-08-05T12:51:24Z,igorkorsukov,0,0,1,1285,77,1,1,[],,0,2554.0,0,0,0,0,3141332.579289,,0,1,0,False,[],,,,
7032,2024-08-05T05:12:31Z,2024-08-05T09:20:01Z,grliszas14,0,8,1,22,3,2,1,[],,0,15022.0,0,0,0,0,3153845.225293,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6991
","It's better to do the opposite here, call init, in which to call load.
init need call it once.
Load can be called several times for some reason.  `m_project = context()->currentProject();` - it's better to call it in init.
Also we should subscribe to project changes in global context  fixed  fixed Should be before 
```
if (!m_project) {
        return;
}
``` fixed I lost the point, where do we get the properties now?
And when changing the project in the global context, we need to get new properties and call the load.  Right now we're not using the properties yet, see the commented metaInfo() function.
I've used the properties model to retrieve path for temporary thumbnail image in QML, we'll need to update this model later when we're going to have some project preferences UI to change meta info (and the thumbnail image path will change too as we implement this one: https://github.com/audacity/audacity/issues/6996 )"
7024,2024-08-03T17:58:29Z,2024-08-05T03:23:16Z,mlocati,0,0,1,106,1,1,1,[],,0,123189.0,0,0,0,0,3172521.120884,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6826,2024-07-05T10:03:21Z,2024-08-05T03:32:03Z,DavidBailes,0,0,1,2,1,1,1,[],,0,2654922.0,0,0,0,0,3174897.871857,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6813

Changed the access key of ""Show RMS waveform"" so that there isn't a duplicate access key.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6978,2024-07-28T06:37:44Z,2024-08-05T03:40:17Z,yaohwu,0,0,1,4,1,1,1,[],,0,680553.0,0,0,0,0,3174403.880833,,0,1,0,False,[],,,"Resolves: *fix zh_CN locale content typo*

*""Disabled"" means ""禁用"" in Chinese. ""仅用"" sounds like ""禁用"" but means ""only use"". So it is a typo and this pull request will fix it*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7019,2024-08-02T12:32:14Z,2024-08-02T18:39:20Z,igorkorsukov,0,0,1,390,6,1,1,[],,0,22026.0,0,0,0,0,3379663.656921,,0,1,0,False,[],,,,
7014,2024-08-02T04:03:00Z,2024-08-05T03:29:15Z,BigDataStructure,1,0,1,6,1,1,1,[],23186.0,0,257176.0,0,0,0,0,3175067.760946,,0,1,0,False,['petersampsonaudacity'],"Tested on W11 with @BigDataStructure 's latest branch test build for this:  audacity-win-3.7.0-alpha-20240802+e26b6fa-x64

Looks good to me:
![image](https://github.com/user-attachments/assets/a7d10358-e5ed-44a3-8ce0-4e4508b1c91e)

@LWinterberg  is this for 3.6.2 or is it to wait till 3.7.0 ?
",,"Resolves: https://github.com/audacity/audacity/issues/7008

Thanks Leo and Peter for the superfast feedback.

- Changed the two ""Insane"" strings to ""Excessive"", and removed the comments above them
- Worked only in `ExportMP3.cpp`

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7016,2024-08-02T12:12:28Z,2024-08-02T12:34:49Z,grliszas14,0,0,1,25,4,1,1,[],,0,1346.0,0,0,0,0,3401531.835568,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/7015

",
7003,2024-07-31T14:18:17Z,2024-08-01T17:31:46Z,vsverchinsky,1,0,1,40,4,1,1,[],4013.0,0,158590.0,0,0,0,0,3409538.994783,,0,1,0,False,['petersampsonaudacity'],"Testing on W11 with @vsverchinsky 's brach test build for this:  audacity-win-3.6.2-alpha-20240731+4ab9afd-x64

This now looks much better, the center line appears as soon as the solid wavecolor disappaers with the zoom level:

![image](https://github.com/user-attachments/assets/bf5dce60-15bf-4eeb-b1fb-4fc27022607c)
",,"Resolves: #6912 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7010,2024-08-01T10:36:03Z,2024-08-01T12:14:36Z,grliszas14,0,0,2,409,12,1,1,[],,0,5913.0,0,0,0,0,3489152.241207,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6991
",
7012,2024-08-01T12:48:09Z,2024-08-01T13:10:41Z,igorkorsukov,0,0,1,6,2,1,1,[],,0,1352.0,0,0,0,0,3485787.387815,,0,1,0,False,[],,,,
7000,2024-07-31T10:30:06Z,2024-08-01T08:17:21Z,kryksyh,0,0,1,87,4,1,1,[],,1,78440.0,0,0,0,0,3503384.823071,,1,1,0,False,[],,,"Resolves: [#6573](https://github.com/audacity/audacity/issues/6573)

Adjust visuals depending on the number of channels for the track

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6998,2024-07-30T16:10:49Z,2024-07-31T14:14:30Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,79434.0,0,0,0,0,3568348.853108,,0,1,0,False,[],,,"Resolves: #6989 

QA: please check that projects created on both 32 bit and 64 bit projects could be synced on either architecture

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6993,2024-07-30T12:28:52Z,2024-07-31T09:32:44Z,vsverchinsky,1,2,1,25,3,3,2,[],13900.0,0,75847.0,0,0,0,0,3585255.446512,,1,1,0,False,['vsverchinsky'],Removed `SamplesCount` double check,,"Resolves: #6924

QA: attempt to open project that was created in previous version should also succeed

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`SamplesCount > 0` is already checked line 200. Thanks!
6956,2024-07-24T04:19:21Z,2024-07-31T10:29:26Z,nalin243,10,0,2,87,1,1,2,['UI'],654.0,0,627005.0,0,0,0,0,3581869.437744,,0,2,1,False,"['kryksyh', 'petersampsonaudacity', 'nalin243']","@dozzzzer 

Done. @nalin243 looks good to me.
I'm wondering if allowing the user to correct the input if they selected the incorrect range makes sense? 
For example, we could show the dialog again so the user can correct the input, instead of forcing them to use context menu once more. @kryksyh 

I had thought of doing something like that but as the dialog is just two clicks away I didn't. Should I make a commit now or wait until @LWinterberg responds? Tested on W10 with @nalin243 's latest test branch for this:  audacity-win-3.6.2-alpha-20240724+cef9925-x64

a)  The dialog box now has normal Audacity buttons/controls:
![image](https://github.com/user-attachments/assets/b3273875-2667-47aa-99cd-4123cfcd39f4)


b) The error message is much improved:
![image](https://github.com/user-attachments/assets/b28381bd-d461-4fd8-890e-1ca74007420a)
 > But from a user experience perspective, I would prefer that the dialog does not close in case of incorrect input, but instead prompts the user to enter the data again.

@nalin243 @kryksyh 

I am **_strongly_** minded to agree with this _(and my ""Mystery-Shopper agrees)_ - but I am not the ultimate decision-maker ...

To my mind if the user is in that dialog they clearly have a desire to change the limits, so if they make an accidental error then it makes sense to keep them in the dialog when the error message is dismissed (and of course keep the dialog displayed, but inaccessible, under the error message).

However, I would suggest that you go ahead and do that @nalin243 

==========================================================


As far as I can recall there are other places in Audacity where such behavior obtains - where the dialog is not removed when the user submits errors in a dialog.

Good examples of this are the effect dialogs where of you type an out-of-range value in a field the you get the error but remain in the effect dialog upon dismissing the error dialog:
![image](https://github.com/user-attachments/assets/735f1ae9-5505-4bb6-a296-d340da742c53)
 > Should I make a commit now

@nalin243 yes, let's go for it @kryksyh @petersampsonaudacity 

> And note that you may also try to change the lower limit to be higher than the upper limit (as well as the other way around). However that may be seen as correct behavior as the user may want to make both limits much higher (or lower. So any error message should probably not be triggered by changing either of the limits - but should be triggered by the user pressing the OK button when invalid limits are in place in the input fields.

If the user presses Ok button then the dialog will close. So in this case the dialog will close the error message will pop up and then once the user presses Ok button for error message the dialog will reappear. 

[Screencast_20240724_165357.webm](https://github.com/user-attachments/assets/ce767113-91ca-4a2a-b083-d8f53857f6f3)

Is this fine?

As far as I am aware the only way to not close the dialog will be to override the OnClose for this dialog. If there is some other way to do this I am not sure how it would be done. 

 >  Screencast_20240724_165357.webm 
> Is this fine?

@nalin243 looks good to me

 @kryksyh 

Done. Testing on W10 with @nalin243 's latest branch build for this:   audacity-win-3.6.2-alpha-20240724+ec2e1f3-x64

Now, after I dismiss the error dialog the ""Change Speed Limits"" dialog is re-displayed.

It disappears while the error message is displayed - I would prefer it if it remained visible (but inaccessible) while the error message is displayed, as then the user could move the message to observe the incorrect entries in the dialog - but I can live with it the way it is now, if need be.

@LWinterberg @Tantacrul 
What are your thoughts on this please?Approved.

But from a user experience perspective, I would prefer that the dialog does not close in case of incorrect input, but instead prompts the user to enter the data again. 

@LWinterberg , what do you think? @nalin243  Great work, thanks","Approved.

But from a user experience perspective, I would prefer that the dialog does not close in case of incorrect input, but instead prompts the user to enter the data again. 

@LWinterberg , what do you think? @nalin243  Great work, thanks","Resolves: #6736

- Used wxDialogWrapper the Shuttle gui system to create a new dialog box with both the lower speed limit spinctrl and upper speed limit spinctrl in one place.
- Used AudacityMessageBox to show an error message and block the user from setting invalid limits.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6994,2024-07-30T13:04:22Z,2024-07-30T14:01:24Z,igorkorsukov,0,0,3,148,13,1,1,[],,0,3422.0,0,0,0,0,3655554.445594,,0,3,0,False,[],,,,
6997,2024-07-30T15:21:52Z,2024-07-30T16:39:05Z,saintmatthieu,0,0,1,18,2,1,1,[],,1,4633.0,0,0,0,0,3646093.580157,,0,1,0,False,[],,,"Resolves: #6995 

https://github.com/audacity/audacity/pull/6333 fixed what it intended to fix but incorrectly : where it intended there to be only one sample-block-deletion callback instance, it was accidentally copied, defeating the purpose of the design.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] fixes #6995 (it may still take a long time, but now there is the progress dialog that was supposed to be there)
- [ ] #6321 is still fixed",
6992,2024-07-30T10:46:49Z,2024-07-30T13:12:40Z,saintmatthieu,1,0,3,993,11,1,1,[],221.0,1,8752.0,0,0,0,0,3658479.870787,,0,3,0,False,['saintmatthieu'],"@LWinterberg [322f210](https://github.com/audacity/audacity/pull/6992/commits/322f21065ac5978a9274550d1fafb6977dc691eb) relies on the fact that when launching a freshly installed Audacity version, `AppData\Roaming\audacity\pluginregistry.cfg` is reset. I haven't found the mechanism in the code that proves this, but a quick experiment has shown this to be the case. If you could confirm that'd be great. Otherwise it'd mean that users would only see the classic filters if they've enabled it manually or they've somehow reset their config.",,"Resolves: #6982 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] Effect menu has a ""Legacy"" section containing ""Legacy Compressor"", ""Legacy Limiter"" and ""Classic Filters""",
6968,2024-07-25T10:42:46Z,2024-07-30T13:08:32Z,kryksyh,0,0,1,17,2,1,1,[],,1,440750.0,0,0,0,0,3658725.91567,,1,1,0,False,[],,,"Resolves: [#6926](https://github.com/audacity/audacity/issues/6926)

While discussing issue [#6926](https://github.com/audacity/audacity/issues/6926), @LWinterberg @dozzzzer @kryksyh came up with these changes to new clip naming:

Previous behavior:
- Recordings are named as `TrackName #TakeNo`
- Generated clips are named as `TrackName ClipNo` 
- Clip copies are named as ""OriginalName.CopyNo`, which was broken since 3.5.0
- The numbering of recordings and generated clips was parallel, meaning there could be a recording named `TrackName #1` and a generated clip named `TrackName 1`

To unify and simplify naming, the behavior will be changed as follows:

- Recordings are named as `TrackName.ClipNo`
- Generated clips are named the same as recordings `TrackName.ClipNo`
- Clip copies keep the original name without additional numbering

---


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6983,2024-07-29T13:25:44Z,2024-07-30T08:36:30Z,igorkorsukov,0,0,1,242,10,1,1,[],,0,69046.0,0,0,0,0,3675053.608506,,0,1,0,False,[],,,,
6984,2024-07-29T14:39:50Z,2024-07-30T08:27:37Z,kryksyh,0,12,1,200,2,3,2,[],,1,64067.0,0,0,0,0,3675587.867039,,0,1,0,False,[],,,"Resolves: [#6572](https://github.com/audacity/audacity/issues/6572)

- Make the indicator and the ruler responsive to the track panel height change
- Adjust styling according to the design spec

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","it is the same as `Layout.fillHeight: true`, isn't it? I'm not sure that we need Gradient anymore I would recommend avoiding a lot of comments, in some cases they make it difficult to read, like in this one @Eism  Yeah, almost. The difference here is that Layout.fillHeight fill sets the height the same as the parent's height. The parent, in this case, is not the root. 
We have clipping enabled there, so we could collapse the track panel, leaving only the track name visible. And if we do so, the height of the parent of the volume indicator row would be larger than the visible rect.

You can see, that the most part of the indicator is hidden if I set `Layout.fillHeight: true`
![image](https://github.com/user-attachments/assets/072fcd10-d835-4f26-8e89-7b97eb0b34af)
 I personally prefer the code to be readable so you would not need comments at all. In this particular case, the logic is kind of obscure, so I chose to be more verbose.
But I got your point though. I reached out @DilsonsPickles and he suggested to keep it for now Sounds like a function we'd like to re-use somewhere probably, helper qml module would be nice maybe? But that's just something to think of, not necessarily now nitpick: typo I would do that if you could guide me on where to put it Usually we have an approach that if it is used in more than two places, only then we move it to a separate place, so we need to wait
separate place - we have `UiComponents/Utils.js` for such tasks Okay, I hope this will be fixed within #6768 and we won't need the clip at all
By the way, please replace `height` with `Layout.preferedHeight` - if the object is inside the layout, then the anchors and sizes should be set via the Layout Done"
6985,2024-07-29T15:33:43Z,2024-07-30T07:21:04Z,grliszas14,0,0,1,171,6,1,1,[],,0,56841.0,0,0,0,0,3679583.886159,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6980,
6988,2024-07-30T07:36:33Z,2024-07-30T07:54:00Z,grliszas14,0,0,1,29,4,1,1,[],,0,1052.0,0,0,0,0,3677603.01309,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6987,
6979,2024-07-29T06:47:40Z,2024-07-29T07:31:29Z,grliszas14,0,0,1,38,3,1,1,[],,0,2629.0,0,0,0,0,3765362.057942,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6761
",
6981,2024-07-29T09:52:45Z,2024-07-29T13:58:24Z,Eism,0,0,6,1050,25,1,1,[],,0,14742.0,0,0,0,0,3742144.373297,,0,6,0,False,[],,,,
6974,2024-07-26T12:11:15Z,2024-07-26T14:29:39Z,igorkorsukov,0,0,1,366,13,1,1,[],,0,8304.0,0,0,0,0,3999474.457297,,0,1,0,False,[],,,,
6969,2024-07-25T12:59:39Z,2024-07-26T11:23:38Z,saintmatthieu,1,0,1,3,1,1,1,[],7267.0,1,80639.0,0,0,0,0,4010636.905103,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @saintmatthieu 's test branch build for this: audacity-win-3.6.2-alpha-20240725+21b4a4d-x64

This appears to work properly again in Matthieu's branch build.",,"Resolves: #6927

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] #6927 is fixed
- [x] Also test that stretching clips still shows and plays the correct envelope",
6958,2024-07-24T09:25:08Z,2024-07-26T07:57:12Z,igorkorsukov,0,0,2,69,5,1,1,[],,0,167524.0,0,0,0,0,4023023.768574,,0,2,0,False,[],,,"* Switch Win CI from 2022 to 2019 (2022 crash on start)
* Added libjpeg, libpng dependency 
* Fixed install libs suffix ",
6966,2024-07-25T09:32:22Z,2024-07-25T12:55:06Z,grliszas14,0,0,3,93,5,1,1,[],,0,12174.0,0,0,0,0,4091541.457719,,0,3,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6666
Resolves: https://github.com/audacity/audacity/issues/6667
",
6960,2024-07-24T12:58:34Z,2024-07-25T12:52:45Z,vsverchinsky,0,0,2,20,3,1,1,[],,0,86098.0,0,0,0,0,4091646.144268,,0,2,0,False,[],,,"Resolves: #6846, #6847

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6935,2024-07-22T11:22:22Z,2024-07-25T07:31:59Z,igorkorsukov,0,0,3,62,5,1,1,[],,0,245378.0,0,0,0,0,4110940.235093,,0,3,0,False,[],,,,
6953,2024-07-23T15:28:23Z,2024-07-24T14:39:03Z,grliszas14,0,0,1,490,5,1,1,[],,0,83440.0,0,0,0,0,4171718.727508,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6808,
6883,2024-07-16T14:36:02Z,2024-07-24T10:55:52Z,kryksyh,0,2,3,108,1,2,4,[],,1,677995.0,0,0,0,0,4185106.310487,,1,3,0,False,[],Approved with a single suggestion to eliminate code duplication,Approved with a single suggestion to eliminate code duplication,"Resolves: [#3679](https://github.com/audacity/audacity/issues/3679)

The intended behavior is:
- When SyncLock is enabled, all sync-locked tracks are edited regardless of their selection state if their respective Label track is selected.
- When SyncLock is disabled and playable tracks are selected, only the selected playable tracks are edited.
- When SyncLock is disabled, and no playable tracks are selected, all tracks are edited.

Here is a sample project to play with: [labels.zip](https://github.com/user-attachments/files/16253354/labels.zip)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Predicate could be extracted into predicate builder function to avoid code duplication in the same file makes sense, done"
6951,2024-07-23T13:52:47Z,2024-07-24T07:17:37Z,saintmatthieu,0,0,1,27,1,1,1,[],,1,62690.0,0,0,0,0,4198207.132265,,0,1,0,False,[],,,"Resolves: #6941 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6937,2024-07-22T13:21:55Z,2024-07-24T07:17:04Z,saintmatthieu,0,0,1,2,1,1,1,[],,1,150909.0,0,0,0,0,4198242.213969,,0,1,0,False,[],,,"Resolves: #6857

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] #6857 is fixed
- [ ] also works for pitch shift values with cents (use the pitch and speed clip dialog for that)",
698,2020-12-01T21:12:10Z,2023-01-10T13:03:28Z,Paul-Licameli,10,13,16,1029,47,4,2,[],35909964.0,0,114802592.0,0,0,0,0,4343945.940928,,2,16,0,False,"['komosinski', 'rbdannenberg', 'SteveDaulton', 'Paul-Licameli']","Testing with f91a73

**Test 1**
1. Create a new 16-bit track
2. Generate 10 seconds silence
3. Change sample format to 32-bit float (from track dropdown menu)
4. Observe that the track is still absolute silence (as expected)
5. Generate a tiny bit of noise at the end of the track
6. Export as 16-bit WAV
7. Import the exported WAV file
8. Observe that the beginning of the track has dither noise (as expected, because part of the track contains 32-bit float samples).


**Test 2**
1. Create a new 16-bit track
2. Generate 10 seconds silence
3. Change sample format to 32-bit float (from track dropdown menu)
4. Observe that the track is still absolute silence (as expected)
5. Use the Draw Tool to modify samples near the end of the track
6. Export as 16-bit WAV
7. Import the exported WAV file
8. Observe that the beginning of the track **does not** have dither noise (This is NOT expected, because part of the track contains 32-bit float samples). > Testing with f91a73
> 
> **Test 1**
> 
> 1. Create a new 16-bit track
> 2. Generate 10 seconds silence
> 3. Change sample format to 32-bit float (from track dropdown menu)
> 4. Observe that the track is still absolute silence (as expected)
> 5. Generate a tiny bit of noise at the end of the track
> 6. Export as 16-bit WAV
> 7. Import the exported WAV file
> 8. Observe that the beginning of the track has dither noise (as expected, because part of the track contains 32-bit float samples).
> 
> **Test 2**
> 
> 1. Create a new 16-bit track
> 2. Generate 10 seconds silence
> 3. Change sample format to 32-bit float (from track dropdown menu)
> 4. Observe that the track is still absolute silence (as expected)
> 5. Use the Draw Tool to modify samples near the end of the track
> 6. Export as 16-bit WAV
> 7. Import the exported WAV file
> 8. Observe that the beginning of the track **does not** have dither noise (This is NOT expected, because part of the track contains 32-bit float samples).

I made the judgment that sample tool edits are typically applied for only tiny corrections and should not cause the whole rest of the track to be contaminated with dither, and likewise for the Repair effect.  Do you disagree?
 > I made the judgment that sample tool edits are typically applied for only tiny corrections and should not cause the whole rest of the track to be contaminated with dither, and likewise for the Repair effect.

That seems reasonable, though it's a surprising inconsistency that modifying even a single sample with other effects causes the entire track to be dithered, but modifying a hundred samples with ""Repair"" or the Draw tool does not.
 > > I made the judgment that sample tool edits are typically applied for only tiny corrections and should not cause the whole rest of the track to be contaminated with dither, and likewise for the Repair effect.
> 
> That seems reasonable, though it's a surprising inconsistency that modifying even a single sample with other effects causes the entire track to be dithered, but modifying a hundred samples with ""Repair"" or the Draw tool does not.

A hundred samples is still less than three milliseconds of spot-repair, typically to remove some impulse.

I expect most other effect applications are typically not so small and I make the conservative assumption that the whole track needs dither after changing any part of it.

The exceptions are the Invert and Reverse effects.
 > > > I made the judgment that sample tool edits are typically applied for only tiny corrections and should not cause the whole rest of the track to be contaminated with dither, and likewise for the Repair effect.
> > 
> > 
> > That seems reasonable, though it's a surprising inconsistency that modifying even a single sample with other effects causes the entire track to be dithered, but modifying a hundred samples with ""Repair"" or the Draw tool does not.
> 
> A hundred samples is still less than three milliseconds of spot-repair, typically to remove some impulse.
> 
> I expect most other effect applications are typically not so small and I make the conservative assumption that the whole track needs dither after changing any part of it.
> 
> The exceptions are the Invert and Reverse effects.

Reviewing what I did months ago:  also Truncate Silence, and Stereo To Mono.

But I wonder now if that last was a mistake.  It averages corresponding samples of the two channels.  So in general there could be quantization error.

 I agree: if you start with 2 channels that map perfectly without rounding to 16-bit integers, and you average them, half of the resulting samples will still end up as 16-bit integers, but the other half will be an integer + 0.5, so half the samples will receive the maximum rounding error, for an overall quantization noise RMS of 0.35 quantization levels, which, if I did the math right, is slightly higher than quantization noise for a random signal. So yes, stereo-to-mono should be dithered. From a quick test, it appears to behave in the way that is intended, but I remain unconvinced that this is the correct approach to the issues https://github.com/audacity/audacity/issues/1584 and  https://github.com/audacity/audacity/issues/2387

Audacity has a Preference setting for the kind of dither (or ""None"") to use when exporting. Any reasonably experienced user would reasonably expect their setting to be used by Audacity when exporting a 32-bit float track to a 16-bit PCM file, but with this proposed ""fix"", that will not always be the case. To make matters worse, I believe there will always be some fringe cases where Audacity behaves in unexpected ways. For example, (just one example from a few minutes testing), if a track contains only 16-bit data, imported from a 16-bit PCM file, and you insert some silence before exporting, then the exported file may be dithered or not dithered depending on how the inserted silence was created. If the silence was generated by an effect other than Audacity's built-in ""Generate Silence"", then the export will be dithered, whereas if produced by Audacity's ""Generate Silence"", or ""Edit > Remove Special > Silence Audio"", or Splitting the track and dragging to create a space, then the track will not be dithered.

Personally I much prefer the philosophy ""Does what it says on the tin"" rather than ""Does what the developer thought  you wanted"". In particular, I very much dislike it when an application doesn't do what it is told to do by the user. > From a quick test, it appears to behave in the way that is intended, but I remain unconvinced that this is the correct approach to the issues #1584 and #2387
> 
> Audacity has a Preference setting for the kind of dither (or ""None"") to use when exporting. Any reasonably experienced user would reasonably expect their setting to be used by Audacity when exporting a 32-bit float track to a 16-bit PCM file, but with this proposed ""fix"", that will not always be the case. To make matters worse, I believe there will always be some fringe cases where Audacity behaves in unexpected ways. For example, (just one example from a few minutes testing), if a track contains only 16-bit data, imported from a 16-bit PCM file, and you insert some silence before exporting, then the exported file may be dithered or not dithered depending on how the inserted silence was created. If the silence was generated by an effect other than Audacity's built-in ""Generate Silence"", then the export will be dithered, whereas if produced by Audacity's ""Generate Silence"", or ""Edit > Remove Special > Silence Audio"", or Splitting the track and dragging to create a space, then the track will not be dithered.
> 
> Personally I much prefer the philosophy ""Does what it says on the tin"" rather than ""Does what the developer thought you wanted"". In particular, I very much dislike it when an application doesn't do what it is told to do by the user.

If you import 16 bit PCM, do only cut-copy-paste edits (or even just do nothing), then export again -- there should not be dithering.  I did it in this PR by tracking the origin of the data as having lesser bit depth than the floats used to store it temporarily in memory.

What alternative should I have done instead?  Testing that every floating point sample happens to equal some quantized variable?


 > What alternative should I have done instead? Testing that every floating point sample happens to equal some quantized variable?

Personally, I'd just have added an option in the Export dialog to apply dither (default enabled) so that the user can easily disable dither for a single export. > What alternative should I have done instead? Testing that every floating point sample happens to equal some quantized variable?

Maybe some alternative (or an interesting new option, not necessarily with favorable properties of added noise) would be [stochastic rounding](https://en.wikipedia.org/wiki/Rounding#Stochastic_rounding) – this way all floating point values which happen to fit integers would be saved as is (thus solving the problem of all ""lossless"" operations like generating silence, cutting, amplifying with integer gain coefficient, etc.), and floating point values which do not have integer counterparts would be rounded to nearby integers without obvious regularities/patterns.

The advantage would be that the added value (introduced error) would never be larger than 0.5 unit per single value. Also, after the application of this dithering and saving its output as an integer representation, further loading, converting to float and saving as integer would not introduce more changes.

The RNG used for this could be seeded with a hash of the dithered sample so that the dithered output is always the same for a given sample.I can not really spot anything potentially wrong in these commits, but of course this comes from the perspective of someone who has still limited knowledge of the code.

 Verified that the suggested steps to reproduce now show the correct behavior; reviewed my older comments and verified that one defect I pointed out is now fixed; got a sense of the code and have no objections to it.
","I can not really spot anything potentially wrong in these commits, but of course this comes from the perspective of someone who has still limited knowledge of the code.

 Verified that the suggested steps to reproduce now show the correct behavior; reviewed my older comments and verified that one defect I pointed out is now fixed; got a sense of the code and have no objections to it.
","Resolves: #1584
Resolves: #2387

Do the work of tracking effective width of sample data, which may be less than the width used for storage.

When exporting or mixing-and-rendering, avoid dither if the destination format is at least as wide as the effective width, and some other conditions are also met (such as default gain and pan, and no envelope).

Assume the greatest width (32 bit float) for results of effects and generators, except for Invert, Reverse, and Repair.  Thus this will not prevent accumulated dithering in amplification.
","This probably will have an undesired effect. ""Used in scrubbing"" will be used as documentation for SetTimesAndSpeed Do we really need it? It doesn't look readable at all and is not required here Need what?  Uniform initialization?  You don't like it or think it's unreadable?

I now make the habit to use it where I can.  Consistent use of it helps make it clear that questionable implicit conversions aren't happening.
 That is what I intended.
 So it doesn't apply to the functions below? Yes, consistency is a problem here. There are cases where uniform initialization is good and welcome. But here, it is inconsistent with the surrounding code and has no special meaning. So I'll take that as an excuse to use uniform initialization on all the members!  Just as I incidentally fix up other things like Doxygenation.

 As I wrote to you in more detail by email, this call returns int16sample when simply trying to mix two 32-bit tracks created on the spot - I might be wrong here, but I would expect it to return floatSample instead. Let's talk about this before I can approve the changes. I have a doubt about this. 
I create two tracks, by default at 44.1k, then resample one of them at 48k, then mix the two tracks to one, so this ""if"" statement will be true and this method will say that dithering is needed. However, the two tracks have the same bit depth, only thing is that one of them will need to be resampled before mixing - I think dithering should not be applied in this case Congratulations, you found a real mistake of mine. > I create two tracks, by default at 44.1k, then resample one of them at 48k, then mix the two tracks to one, so this ""if"" statement will be true and this method will say that dithering is needed.

I think dither *should* be applied in this situation because mixing tracks with different sample rates can create quantization noise. This can be demonstrated by mixing a low level sine wave with an inverted copy: With shaped dither adds around -88dB RMS dither noise, mostly in the very high frequency range (where hearing is least sensitive to low level sound). Without dither creates harmonic noise at around -100 dB RMS, with the highest peak at the frequency of the original sine wave (likely to be more obtrusive)

Observe that without dither there is significantly more noise below 5000 Hz

![Tracks000](https://user-images.githubusercontent.com/11681097/154659206-2abe81ba-a85c-40a0-b8a2-866d4f6a3416.png)

 Alright then, dither is needed in this case too. I re-tested this, and confirm it is now fixed."
6936,2024-07-22T13:17:07Z,2024-07-22T13:33:55Z,igorkorsukov,0,0,1,4,2,1,1,[],,0,1008.0,0,0,0,0,4348434.181978,,0,1,0,False,[],,,,
6925,2024-07-19T15:32:13Z,2024-07-22T13:23:06Z,saintmatthieu,1,0,1,5,1,1,1,[],71239.0,1,251454.0,0,0,0,0,4349083.564614,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @saintmatthieu 's branch build for this.

This now appears to work properly in Matthieu's branch build - attempting to drag the waveform splitter:
a) does not change the collapsed waveform - _this is expected behavior_
b) the collapsed TCP remains properly displayed",,"Resolves: #6751 

I think the perfect fix would be to fail the hit test when the track is minimized and the cursor is above the left/right channel horizontal line, but I couldn't figure out how to make this work, and I think this simple fix does the trick UX-wise.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6921,2024-07-19T09:11:25Z,2024-07-22T07:32:08Z,igorkorsukov,0,0,1,384,11,0,0,[],,0,253244.0,0,0,0,0,4370142.804227,,0,1,0,False,[],,,,
6923,2024-07-19T14:04:11Z,2024-07-22T07:32:06Z,igorkorsukov,0,0,2,523,13,1,1,[],,0,235675.0,0,0,0,0,4370146.854144,,0,2,0,False,[],,,,
6919,2024-07-19T08:37:04Z,2024-07-19T10:30:52Z,grliszas14,0,1,2,59,6,1,1,[],,0,6828.0,0,0,0,0,4618623.356931,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6835
",I think better to add method like:  selectionController()->isDataSelected()
6906,2024-07-17T21:46:06Z,2024-07-19T11:25:05Z,Gootector,2,0,1,6,1,1,1,[],22.0,0,149053.0,0,0,0,0,4601857.735318,,0,1,0,False,['Gootector'],@vsverchinsky Please merge. Thanks. @LWinterberg Thanks!,,"Update Polish from Transifex (3.6.1)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6914,2024-07-18T12:11:27Z,2024-07-19T09:08:48Z,kryksyh,2,6,4,13,4,2,1,[],75292.0,1,79017.0,0,0,0,0,4619974.084922,,1,4,0,False,"['CennoxX', 'dozzzzer']","Tested. I no longer see the original issue:

<img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/82395cd8-8b18-4287-8654-6990449e3a9e"">
 I also tested the fix and can confirm the issue is solved.",,"Resolves: https://github.com/audacity/audacity/issues/6892

## Before:
### Main toolbar
![image](https://github.com/user-attachments/assets/cf24b184-7b7d-494e-8817-8f13ea0ae414)

### Effects panel

## After:
### Main toolbar
![image](https://github.com/user-attachments/assets/743a357b-d7c5-4911-b171-9d3cb35c6d8c)
![image](https://github.com/user-attachments/assets/c241e1e7-8379-45ed-b0ce-42c4ca3f1357)

### Effects panel
![image](https://github.com/user-attachments/assets/70bbfa61-90e4-4433-998c-a03f048e058e)

![image](https://github.com/user-attachments/assets/e503f2ba-e499-4a4a-8378-b187c409fbf6)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","There are few places that may require backgroud colour override as they use different one: `RealtimeEffectsPanel.cpp` (opened via Effects button on track panel, then add effect) and `EffectUI.cpp`(open effect ui by clicking on the button with effect name)
Did you check them? >Did you check them?

I did not, I need to fix those, thanks!
![image](https://github.com/user-attachments/assets/0e283c68-a362-4a72-9e47-c566e4fdaa25)
 @vsverchinsky  Should look better now, please check ![изображение](https://github.com/user-attachments/assets/68bb8f4f-4899-4d3b-8bea-7a47592692c5)
Click an effect name to open effect UI. I get this under Windows platform @vsverchinsky right, missed that one with the dark theme enabled. Should be fixed now.

Why do effect dialogs not use the selected theme though? 👍 
Don't know for sure, but probably it was something that was missed during redesign or there might have been some problems with that"
6917,2024-07-18T22:17:51Z,2024-07-19T09:10:16Z,LWinterberg,0,0,1,10,1,0,0,[],,0,39149.0,0,0,0,0,4623459.538242,,0,1,0,False,[],,,,
6913,2024-07-18T11:31:31Z,2024-07-18T17:25:41Z,vsverchinsky,0,0,1,22,1,1,1,[],,0,24855.0,0,0,0,0,4676534.44563,,0,1,0,False,[],,,"Fulfill the precondition of `WaveTrack::ClearAndPaste` by duplicating the only channel into two

Resolves: #6882 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6903,2024-07-17T13:54:37Z,2024-07-18T17:19:16Z,DavidBailes,0,0,1,26,1,1,1,[],,0,98680.0,0,0,0,0,4680526.272166,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4763

For some VST3 effects, for discrete parameters in the plain UI for keyboard users, it's not possible to set all the possible values.

It appears that the problem is that some plugins don't provide the correct implementation of the functions for converting between plain and normalized values.

Fix:
Detect when invalid functions for these conversions are provided, and when this is the case, use the formula use the formula given by Steinberg in their documentation. (Form posts on Reaper's forums, it appears that Reaper does something similar to this.)




<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6902,2024-07-17T13:23:34Z,2024-07-18T17:26:45Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,104490.0,0,0,0,0,4676579.464935,,1,1,0,False,[],,,"Crash was caused by an attempt to write outside of `mTemp` buffer when number of exported channels was more than 3.

Resolves: #6889

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6910,2024-07-18T10:22:23Z,2024-07-18T13:44:03Z,kryksyh,0,0,1,148,8,1,1,[],,1,12101.0,0,0,0,0,4693441.674123,,2,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6855

To prevent Audacity from opening projects created in newer versions, update the project version to MIN.MAJ.0.0 on project save.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6881,2024-07-16T13:55:38Z,2024-07-17T10:43:24Z,Eism,0,0,9,1510,23,1,1,[],,0,74870.0,0,0,0,0,4790678.142927,,0,9,0,False,[],,,,
6898,2024-07-17T10:01:24Z,2024-07-17T10:34:35Z,igorkorsukov,0,0,1,9,3,1,1,[],,0,1991.0,0,0,0,0,4791213.339366,,0,1,0,False,[],,,,
6838,2024-07-08T13:40:27Z,2024-07-10T18:09:37Z,nalin243,1,0,1,0,2,1,1,[],3161.0,0,753442.0,0,0,0,0,4804222.560658,,0,1,0,False,['petersampsonaudacity'],"


Testing on W10 with @nalin243 's latest branch build for this:  audacity-win-3.6.0-alpha-20240708+37df314-x64
_(and note the Mac builds for this failed to work)._

This now appears to work properly in this branch build with the correct icons now showing for collapse and expand in the TCP's of tracks for both Dark and High Contrast themes.

I tested>
1. stereo track
2. mono track
3. label track
4. time track

I tested these individually and with the **View > Track Size** commands for **Collapse** and **Expand**

_For completeness I also tested in Light and Classic themes - and these remain OK._


===============================================================

Now this test branch properly declares itself to be **3.6.0 alpha** 
",,"Resolves: #6815 

Rotated the TCPChevron icon 180 degrees for dark and high contrast themes

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6842,2024-07-09T16:15:26Z,2024-07-10T18:09:00Z,nalin243,1,2,2,20,1,2,1,[],3402.0,0,657766.0,0,0,0,0,4804200.157591,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with @nalin243 's branch build for this:  audacity-win-3.6.0-alpha-20240709+ba19532-x64

Having already added a Time track to the project the next visit to Tracks > Add New shows that the **Time Track** menu option is properly grayed-out and unavailable in this branch build.
![image](https://github.com/audacity/audacity/assets/50205984/0ccbeefc-1643-4c18-b392-7708faf5aef6)
",,"Resolves: #6052 

Added a new command flag in TimeTrackMenuItems.cpp and commented out the previous error message that popped up if a time track already existed. 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Please fully remove these as you've made a better solution.  @LWinterberg  Done.
6880,2024-07-16T12:32:41Z,2024-07-16T15:28:33Z,vsverchinsky,0,0,1,15,1,1,1,[],,0,10552.0,0,0,0,0,4859980.809864,,0,1,0,False,[],,,"Resolves: #6875 

QA:
  Please test same scenario as in original bug report, but with stereo tracks 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6879,2024-07-15T20:21:47Z,2024-07-16T10:08:14Z,LWinterberg,0,0,1,129,1,1,1,[],,0,49898.0,0,0,0,0,4878889.534706,,0,1,0,False,[],,,squashed and rebased @shinniuwu's branch,
6833,2024-07-08T05:58:51Z,2024-07-15T13:16:02Z,Gootector,1,0,1,2008,1,1,1,[],631036.0,0,635482.0,0,0,0,0,4949883.377602,,0,1,0,False,['vsverchinsky'],Thank you!,,"Update German from Transifex (3.6.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6831,2024-07-08T05:48:22Z,2024-07-15T13:11:26Z,Gootector,2,0,1,1891,1,1,1,[],301676.0,0,636102.0,0,0,0,0,4949893.419939,,0,1,0,False,"['vsverchinsky', 'Gootector']",@vsverchinsky Please merge Polish & German updates. Thanks. Thank you!,,"Update Polish from Transifex (3.6.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6874,2024-07-15T12:44:13Z,2024-07-15T13:41:58Z,Eism,0,0,4,112,12,1,1,[],,0,3469.0,0,0,0,0,4952777.547922,,0,4,0,False,[],,,Resolves: #6803,
6866,2024-07-12T20:08:38Z,2024-07-15T13:15:02Z,trebmuh,1,0,1,4,1,1,1,[],234391.0,0,234392.0,0,0,0,0,4954390.024851,,0,1,0,False,['vsverchinsky'],Thank you!,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6869,2024-07-14T16:54:52Z,2024-07-15T13:14:01Z,LWinterberg,0,0,1,8758,1,1,1,[],,0,73152.0,0,0,0,0,4954459.171119,,0,1,0,False,[],,,this is still based on the 3.5 PO as this translation was massively out of date and the process has dragged on quite a bit,
6873,2024-07-15T11:22:23Z,2024-07-15T12:12:28Z,Eism,0,0,1,235,28,1,1,[],,0,3009.0,0,0,0,0,4958151.638882,,0,1,0,False,[],,,"Resolves: #6872
",
6865,2024-07-12T15:31:57Z,2024-07-15T09:34:17Z,vsverchinsky,0,0,1,255,3,1,1,[],,0,237741.0,0,0,0,0,4967647.396817,,0,1,0,False,[],lgtm,lgtm,"Resolves: #6536, #6844

With large latency values `TimeQueue` buffer values could have become overwritten. The issue is temporary fixed by buffer reallocation in case if overwrite is detected.

QA:
Please also check scrubbing and seek.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6863,2024-07-12T13:02:26Z,2024-07-15T07:45:23Z,LWinterberg,6,0,1,6,2,1,1,[],11590.0,1,240181.0,0,0,0,0,4974179.05135,,0,1,1,False,"['LWinterberg', 'vsverchinsky', 'dozzzzer']","Windows: 
<img width=""785"" alt=""image"" src=""https://github.com/user-attachments/assets/c5ca9fb5-ab48-4899-8349-cbe20dbb79ab"">

@LWinterberg @vsverchinsky  @LWinterberg Seems like new file has Exif format and the previous one had EFIF I don't know why it breaks in CI, it works fine locally 
![image](https://github.com/user-attachments/assets/06a22949-426b-4187-b907-cbf8cf5a27b5)
 Tried metadataless, that didn't work. Trying 4:2:0/DCT integer without arithmetic coding @ 50% Trying now with the image dimensions matching exactly the HTML Tested",,,
6861,2024-07-12T11:15:28Z,2024-07-15T07:05:49Z,Eism,0,2,2,924,24,2,1,[],,0,244419.0,0,0,0,0,4976361.790322,,0,2,0,False,[],,,Resolves: #6800,"This raises doubts, it seems that playback should not depend on the projectscene.
Options:
* Move the playtoolbar to the projectscene (favorite)
* Move this component to a common place, maybe something like commonscene, or even to uicomponents.

I'm not calling for this to be fixed right now, but it's technical debt. If it's not fixed, there will be a cyclical dependency. https://github.com/audacity/audacity/issues/6872"
6854,2024-07-11T15:19:34Z,2024-07-15T07:25:41Z,grliszas14,0,2,2,273,16,3,1,[],,0,317167.0,0,0,0,0,4975368.078757,,0,2,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6664,"There is a `wxASSERT(pd)` few lines above. 
Why not make a stub implementation of `BasicUI`? There are lots of similar places where it's used Good idea, implemented empty QtBasicUI stub, no AU3 dependecies in current changes, please have a look"
6864,2024-07-12T14:49:09Z,2024-07-12T17:49:57Z,kryksyh,1,0,1,30,1,1,1,[],6692.0,1,10848.0,0,0,0,0,5197114.710858,,1,1,1,False,['dozzzzer'],Tested,,"Previously only the first channel was imported when ffmpeg importer was used.

Resolves: #6858

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6811,2024-07-03T16:21:16Z,2024-07-12T15:41:07Z,Patriccollu,1,0,1,197,1,1,1,[],775183.0,0,923685.0,0,0,0,0,5056350.769738,,0,1,0,False,['vsverchinsky'],Thank you!,,"Hello,

This is a 2nd update of **Corsican** localization for Audacity 3.6.0.

Best regards,
Patriccollu.",
6852,2024-07-11T13:37:13Z,2024-07-12T09:20:01Z,LWinterberg,2,0,1,4,2,1,1,[],9817.0,2,70975.0,0,0,0,0,5227706.211604,,0,1,1,False,"['LWinterberg', 'dozzzzer']","The RMS in the waveform is now off by default. 
However, if it's ON and there's a clip in the project, when I reset the config, the option goes back to OFF, but the waveform is not repainted and still shows the RMS. 

Is it desired? @LWinterberg @Tantacrul  It's not desired, but I'm fairly sure it's also not introduced by this PR. ",,,
6853,2024-07-11T15:10:26Z,2024-07-12T12:57:48Z,kryksyh,3,4,1,17,2,1,2,[],60902.0,1,78449.0,0,0,0,0,5214639.2803,,1,1,0,False,"['LWinterberg', 'dozzzzer']","> should it be merged into release-3.6.0?

I wouldn't mind if it was, the question is if @dozzzzer @chinakov still have bandwidth to test it before release Yeah, let's do that. Does the QA result block merge? I think improving the situation for FLAC (even if it doesn't address the ffmpeg formats) would be worthwhileApproved with few comments.
@LWinterberg should it be merged into `release-3.6.0`? Can you please squash it and merge it with Reabase and merge after QA completes?","Approved with few comments.
@LWinterberg should it be merged into `release-3.6.0`? Can you please squash it and merge it with Reabase and merge after QA completes?","Resolves: [#6674](https://github.com/audacity/audacity/issues/6674)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","👍  `ImportRAW.cpp` directly invokes factory's `CreateMany`, would be nice to keep it same in both. `ImportUtils::FinalizeImport(TrackHolders&, TrackList &&)` There is a ImportUtils::ForEachChannel(TrackList&, const std::function<void(WaveChannel&)>&) overload"
6471,2024-05-22T09:19:12Z,2024-07-11T16:33:33Z,LWinterberg,0,0,1,49,2,1,1,[],,1,4346066.0,0,0,0,0,5288100.087769,,0,1,1,False,[],,,,
6840,2024-07-09T11:25:32Z,2024-07-11T15:31:55Z,grliszas14,0,2,4,129,7,2,1,[],,0,187584.0,0,0,0,0,5291803.644561,,0,4,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6837
Resolves: https://github.com/audacity/audacity/issues/6781","better use std::numeric_limits<double>::epsilon() Yup, I thought that too but I tried that and it's to small... so I'm using the same value as AU3 does"
6804,2024-07-03T08:21:52Z,2024-07-11T11:37:25Z,DavidBailes,2,0,1,10,2,1,1,[],425504.0,0,702933.0,0,0,0,0,5305877.125421,,1,1,0,False,"['DavidBailes', 'nalin243']","@DavidBailes It is not possible for me to move the slider using keyboard in Linux. I did not even know this was a thing that was possible for play at speed slider. Could you try it out in a linux machine? This may be a DE specific issue like in #6704  > @DavidBailes It is not possible for me to move the slider using keyboard in Linux. I did not even know this was a thing that was possible for play at speed slider. Could you try it out in a linux machine? This may be a DE specific issue like in #6704

@nalin243 . I can confirm that it's not possible to use the play-at-speed slider using the keyboard on xUbuntu 22.04. A workaround for keyboard users is Extra > Play-at-Speed > Adjust playback speed, and then use the text box in that dialog.",,"Resolves: https://github.com/audacity/audacity/issues/6801

A number of bugs were introduced by a PR for changing the play-at-speed accuracy back to 3 decimal places (commit: 37330d6). These bugs are all fixed by reverting some of the unnecessary changes in that PR.

A
Problem: the step size for keyboard users of ASliders is too small (For example the recording and playback level sliders). This is fixed by reverting the constant 100.0 to 10.0 in LWSlider::Increase() and LWSLider::Decrease().

B
Problem: For the play-at-speed slider, using the keyboard, it's not easy to get back to a speed of exactly 1.000. This was caused by the change of the minimum of the speed slider being changed from 0.01 to 0.001, and the dependence of LWSlider::Increase() and LWSlider::Decrease() on that value. So the minimum value of the speed slider was reverted to 0.01 (which I think is quite slow enough).

C
Problem: The commands Extra > Play at speed > Increase/Decrease playback speed, result in very small changes of speed. Fixed by reverting the constant 0.01 to 0.1 in OnPlaySpeedInc() and OnPlaySpeedDec()


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6829,2024-07-05T17:47:05Z,2024-07-10T18:11:31Z,vsverchinsky,0,0,1,3,1,1,1,[],,0,433466.0,0,0,0,0,5368631.273092,,0,1,0,False,[],,,"Resolves: #6818 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6819,2024-07-04T13:28:08Z,2024-07-10T18:10:27Z,vsverchinsky,2,0,1,4,1,2,2,[],67681.0,0,535340.0,0,0,0,0,5368696.709037,,0,1,0,False,"['LWinterberg', 'petersampsonaudacity']","really? I added that because without them i saw black dots around the zoom buttons. Maybe that was restricted to my local build then for some reason Testing on W10 with @vsverchinsky 's test branch build for this.

This seems to work properly in Vitaly's branch build. 

I see no more black dots/framing around the TCP buttons for the X (delete), the chevron (collapse/expand) and the ellipsis (menu)",,"Resolves: #6752

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6817,2024-07-04T11:44:01Z,2024-07-10T12:07:36Z,Eism,0,1,3,276,17,1,2,[],,0,519818.0,0,0,0,0,5390466.264341,,0,3,0,False,[],,,,I think better to use muse::Timer (don't use Qt here) 
6824,2024-07-05T07:07:09Z,2024-07-05T09:18:02Z,mlocati,1,0,1,349,1,1,1,[],8568.0,0,23196.0,0,0,0,0,5817302.186013,,0,1,0,False,['mlocati'],"PS: I maintain the Italian translations [on Transifex](https://app.transifex.com/klyok/audacity).

The only problem is that the .po files downloaded from Transifex have many (useless) changes when compared to the .po files (re)generated by the `locale/update_po_files.sh` script.

On Posix systems you can avoid these useless changes by running `update_po_files.sh`.

On Windows that's not possible, even with WSL: since `.gitattributes` forces checking out the source .c files with the Windows line endings, the gettext tools don't work (they don't accept strings containing `\r\n`).

So, in order to avoid these useless changes I created [this tiny project](https://github.com/mlocati/audacity-fix-po).

Here's the process I've used to generate this PR:

1. I cloned the Audacity repository locally
2. I downloaded the .po file from Transifex to the `locale` directory
3. I committed the changed file
4. I ""normalized"" the file by running
   ```sh
   docker run --rm -it -v C:\path\to\audacity:/app ghcr.io/mlocati/audacity-fix-po it
   ```
",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6816,2024-07-04T09:38:19Z,2024-07-04T13:24:45Z,vsverchinsky,0,0,1,16,2,1,1,[],,0,13595.0,0,0,0,0,5904233.711955,,0,1,0,False,[],,,"As now clips may have multiple sequences in it we must create individual `Resample` instance for each of them to avoid internal state mixing that may happen in case of single `Resampler` is used to process every channel.

Resolves: #6810 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6767,2024-06-26T14:44:44Z,2024-07-03T08:15:12Z,grliszas14,0,8,2,167,11,2,2,[],,0,581431.0,0,0,0,0,6009215.293776,,0,2,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6625,"I think it would be more correct to use onClipRemoved here to send a notification about the removed element in clipList Non-obvious signature. I think it's better to have two methods, something like:
* bool removeClip(const processing::ClipKey& clipKey);
* bool removeClipData(const processing::ClipKey& clipKey, double begin, double end); I think it's better to have two methods: 
1.
```
void ProcessingActionsController::clipDelete(const ActionData& args)
{
       IF_ASSERT_FAILED(args.count() > 0) {
               return;
       }

      processing::ClipKey clipKey = args.arg<processing::ClipKey >(0);
      ...
}
```
see https://github.com/igorkorsukov/audacity/blob/master/au4/src/projectscene/view/clipsview/clipcontextmenumodel.cpp#L14

From the context menu we need to use this method

2. void ProcessingActionsController::clipDeleteSelected()

I'm not sure if it's needed now... It would be better to add a method like this: `Clip clip(const ClipKey& key) const;`
(and it is better to use `at` method to access read-only list element) This method is better to add to ProcessingProject here we need to find out if the start and end match the start and end of the clip, then we need to notify about the clip being removed, if they do not match (the clip is not removed), then notify about the clip being changed please do not use auto for simple types
The point here is that the compiler will easily calculate the type, but for reading a code this is unnecessary complexity, we need to know what the function returns... for reading and understanding the code, we need to see what types we are dealing with. For example, in this case, seeing that the type is double, then further in the code it is clear that there may be a problem, doubles are not safe to compare with each other (<= and =>) doubles are not safe to compare with each other 
I suggest two options:
1. Use the `processing::secs_t` type, it is not just a double, but a wrapper over the double, for correct work with it
```
    processing::secs_t initialClipStart = clip->Start();
    processing::secs_t initialClipEnd = clip->End();

...
```

2.  Use functions from `#include ""global/realfn.h""`   RealIsEqualOrMore, RealIsEqualOrLess"
6792,2024-07-01T14:37:33Z,2024-07-02T12:45:35Z,LWinterberg,1,0,5,152,3,1,1,[],65804.0,0,79686.0,0,0,0,0,6079391.654146,,0,5,0,False,['petersampsonaudacity'],"Testing on W10 with @LWinterberg 's branch test build for this:  

There is now a whole raft of Factory presets for the new 3.6 compressor:  audacity-win-3.6.0-alpha-20240702+6338b3b-x64
![image](https://github.com/audacity/audacity/assets/50205984/9b1b4a94-9ca2-4178-b8d8-fae2f6e63b17)
These can be selected and appear to work properly as intended - both in destructive mode and RT mode

And a smaller set is available for the new Limiter:
![image](https://github.com/audacity/audacity/assets/50205984/fdb094f2-59ea-46d8-8ebe-534f946241a5)


---------------------------------------------------------------------------------

@saintmatthieu 
Will there be user documentation available (in the manual) on the behavior of these presets?",,"Resolves: https://github.com/audacity/audacity/issues/6753
Supersedes: https://github.com/audacity/audacity/pull/6754

All presets are in! 
QA: Effects touched are reverb, compressor and limiter",
6516,2024-05-28T13:49:54Z,2024-07-02T12:37:10Z,LWinterberg,0,0,1,8,1,1,1,[],,0,3019639.0,0,0,0,0,6079899.640508,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6515
Requires merge of https://github.com/audacity/audacity.github.io/pull/27",
6798,2024-07-02T10:33:02Z,2024-07-02T11:31:40Z,vsverchinsky,1,0,1,25,7,1,1,[],1252.0,0,3535.0,0,0,0,0,6083816.116113,,1,1,1,False,['vsverchinsky'],"@dozzzzer @chinakov Don't you mind to skip QA? There are only color changes, @DilsonsPickles has already approved them",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6782,2024-06-27T13:50:20Z,2024-07-02T10:05:07Z,grliszas14,0,5,1,248,10,1,2,[],,0,418492.0,0,0,0,0,6089023.578717,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6737,"Then let's replace it with `Item` Then let's replace it with `Item` I think that logically gridlines belongs to timeline, it would be better to move it there. please use camelCase for variable name  please don't use `auto` for simple types "
6793,2024-07-01T14:45:50Z,2024-07-02T10:06:12Z,vsverchinsky,1,0,2,33,5,2,2,[],64699.0,0,69961.0,0,0,0,0,6088625.847473,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build for this:  audacity-win-3.6.0-alpha-20240701+a0197a1-x64

This seems to work as intended with the user able to turn off the RMS display from the View menu
![image](https://github.com/audacity/audacity/assets/50205984/5bdfd7ff-974f-4f59-b5ef-689f8cd2c223)

--------------------------------------------------------------------------------------

Curiously when Dominic Mazzoni originally launched Audacity there was no RMS display.  This is Audacity 1.0
![image](https://github.com/audacity/audacity/assets/50205984/56cc9eef-24fe-4987-b314-4d41544a51de)
 But by 1.2.6 the next oldest version I have still, the RMS in the waveform is present
",,"Resolves: #6219 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6797,2024-07-02T08:59:32Z,2024-07-02T09:20:47Z,Eism,0,0,1,7,1,1,1,[],,0,1279.0,0,0,0,0,6091687.365196,,0,1,0,False,[],,,,
6796,2024-07-02T08:12:52Z,2024-07-02T08:32:30Z,Eism,0,2,1,60,2,2,1,[],,0,1181.0,0,0,0,0,6094587.451067,,0,1,0,False,[],,,,"need to add a issue  You already did it :)
https://github.com/audacity/audacity/issues/6664"
6790,2024-07-01T09:57:12Z,2024-07-01T11:43:44Z,Eism,0,0,2,39,2,1,1,[],,0,75799.0,0,0,0,0,6100110.081454,,0,2,0,False,[],,,"Resolves: #6695
Resolves: #6769
",
6746,2024-06-25T09:20:13Z,2024-07-01T15:15:14Z,DavidBailes,0,0,1,26,1,1,1,[],,0,539702.0,0,0,0,0,6156828.390742,,1,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6714

Problem:
When using the exponential sliders with arrow keys, there are two issues: A. Right/down arrow key does not change the position.

B. When the position is near the left hand end of the slider, the arrow keys don't change the position of the slider. The setting value has a precision of 1 decimal place. Near the left hand end of the slider, a change is slider position by 1, may result in a change setting value, when ""rounded"" to 1 decimal place of zero. So the slider position and setting value is unchanged.

Fixes:
A. In bool DynamicRangeProcessorEditor::UpdateUI(), round the value when setting the slider positions.

B. Handle the wxEVT_SCROLL_LINEDOWN and wxEVT_SCROLL_LINEUP events, and ensure that the change in the slider position results in a change of setting value of at least 0.1.

Resolves: https://github.com/audacity/audacity/issues/6714


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6547,2024-05-30T13:40:21Z,2024-05-31T12:27:41Z,nalin243,3,0,1,1,1,1,1,[],1079.0,0,2487763.0,0,0,0,0,6439561.873752,,0,1,0,False,"['LWinterberg', 'nalin243']","(your change looks good, but it seems like artifactory.audacityteam.org is down atm) No problem.  Thanks for the patch!",,"Resolves: #5626

*Manually set the quality slider size for any sliders that are added to the audio options area in export audio panel so we have a consistent slider size always.*

![oggvorbis](https://github.com/audacity/audacity/assets/29351098/28db4a59-4e61-46d4-8eda-25f9e7d01ee3)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6378,2024-05-02T16:45:53Z,2024-05-03T11:02:02Z,nalin243,0,0,1,35,4,1,1,[],,0,4895397.0,0,0,0,0,6439996.523517,,0,1,0,False,[],,,"Resolves: #5222 

I just added an extra zero to all the 100s and 0.1s in ASlider and TranscriptionToolBar and also changed the precision for SPEED_SLIDER to up to three decimal places

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6732,2024-06-21T11:04:11Z,2024-06-25T14:48:17Z,nalin243,2,0,1,12,1,1,1,[],8350.0,0,595877.0,0,0,0,0,6440020.460436,,0,1,0,False,"['nalin243', 'saintmatthieu']",@saintmatthieu Could you approve this again? No new changes.  Thanks @nalin243 for your contribution!,,"Resolves:  #6450 

I added extra code in the DoValidateNumber function for both IntegerValidatorBase and FloatingPointValidatorBase which sets the value to the closest valid value.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6783,2024-06-27T14:49:22Z,2024-06-28T07:07:35Z,igorkorsukov,0,0,2,136,8,1,1,[],,0,58693.0,0,0,0,0,6445293.957128,,0,2,0,False,[],,,,
6775,2024-06-27T07:48:24Z,2024-06-27T08:12:03Z,igorkorsukov,0,0,1,48,6,1,1,[],,0,1419.0,0,0,0,0,6527828.23746,,0,1,0,False,[],,,,
6776,2024-06-27T10:25:05Z,2024-06-27T11:02:24Z,igorkorsukov,0,0,1,87,3,1,1,[],,0,2239.0,0,0,0,0,6517607.571546,,0,1,0,False,[],,,#6771 ,
6773,2024-06-27T06:08:14Z,2024-06-27T07:24:06Z,Eism,0,0,1,127,4,1,1,[],,0,4555.0,0,0,0,0,6530704.947431,,0,1,0,False,[],,,,
6764,2024-06-26T14:16:06Z,2024-06-27T07:08:55Z,Eism,0,0,3,1133,36,1,1,[],,0,60773.0,0,0,0,0,6531615.191835,,0,3,0,False,[],,,Resolves: #6526,
6750,2024-06-25T14:42:59Z,2024-06-26T13:36:47Z,saintmatthieu,0,10,1,300,12,2,1,[],,1,82429.0,0,0,0,0,6594749.021007,,1,1,0,False,[],,,"Resolves: #6320

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] Compressor and limiter have factory presets specified in [compressor presets.zip](https://github.com/user-attachments/files/15973161/compressor.presets.zip)
- [ ] Limiter has factory presets specified in [limiter presets.zip](https://github.com/user-attachments/files/15973160/limiter.presets.zip)
","This regex won't recognise settings like:
`1.23e-4`
or
`123.` (without digit after the decimal)
is that ok? just curious std::stod can throw out_of_range exception which is not handled  This function returns empty optional if any setting is missing - is that desired? I mean maybe we want to handle partial settings and filling missing ones with default values? nitpick: could be a std::array if the size of container is known in advance typo: ""translated"" ? Right. It's acceptable insofar as we have unit tests that check that all presets are parsed successfully, so if we introduce one with scientific notation, tests will tell us, and it can be introduced then.
Thank you, though, and thanks unit tests. Should be caught by the unit tests, but you're right, I'll generalize. The typical way of producing presets is to use the editor to do so: then all settings are saved, so partial presets shouldn't be a thing. If for some reason it becomes one we can make the procedure more granular. Yeah, but then you have to count your number of presets and update that size - more human work `:P`. (What you suggest would have been fine too, of course.) I wanted to get rid of that comment: now I know it should be translatable."
6738,2024-06-24T10:02:26Z,2024-06-26T14:35:08Z,grliszas14,0,3,2,92,9,1,1,[],,0,189163.0,0,0,0,0,6591248.488489,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6555
Resolves: https://github.com/audacity/audacity/issues/6649

","I think it's better to use the term: timelineRulerMode
And maybe better use enum for it  It's better to keep the formatter as it was here. (m_mode -> m_formatter) 
The logic is simple.

There are show modes
There are formatters
For different modes, different formatters
(but ​​in theory there may be for some modes, if more appear, the same formatter, but the difference will be in something else) I think better rename to `m_timelineRulerModeChanged`"
6636,2024-06-07T11:10:18Z,2024-06-26T13:10:36Z,vsverchinsky,3,0,1,5,1,1,1,[],10715.0,0,1648833.0,0,0,0,0,6596308.25136,,1,1,0,False,"['petersampsonaudacity', 'Paul-Licameli']","Testing on W10 with @vsverchinsky 's branch build for this:  audacity-win-3.6.0-alpha-20240607+ef0fbc5-x64

This now appears to be properly fixed. What about splitting channels? > What about splitting channels?

When i say ""properly fixed"" - I mean properly for _**all**_ errant behaviors reported in the thread for #6564  - not just the STRs

So, yes splitting also works fine again with Vitaly's fix",,"Resolves: #6564 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6725,2024-06-20T08:54:21Z,2024-06-25T14:50:57Z,saintmatthieu,0,0,1,5,1,1,1,[],,1,453396.0,0,0,0,0,6676703.482763,,0,1,0,False,[],,,"Resolves: #6724

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Bug report is fixed
- [x] Resampling from track menu still works
- [x] Other resampling-related test cases you might have are green
",
6743,2024-06-24T12:38:44Z,2024-06-25T12:45:48Z,vsverchinsky,0,0,1,5,1,1,1,[],,0,93189.0,0,0,0,0,6677848.816132,,0,1,0,False,[],,,"Resolves: #6646

The issue seem to be fixed on GH side

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6740,2024-06-24T10:16:45Z,2024-06-24T15:18:50Z,vsverchinsky,1,0,1,21,1,1,1,[],6357.0,0,18128.0,0,0,0,0,6761430.362565,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build for this:  audacity-win-3.6.0-alpha-20240624+638605e-x64

The meters are no longer squished/squashed after
a) Reset Configuration
b) use of Options in meter dropdown menus

Looks to be fixed in this branch build.
",,"Resolves: #6676 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6741,2024-06-24T11:39:08Z,2024-06-24T15:18:06Z,vsverchinsky,1,0,1,41,7,1,1,[],3248.0,0,13141.0,0,0,0,0,6761475.036535,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build for this:  audacity-win-3.6.0-alpha-20240624+cda5b49-x64

The Transport toolbar buttons' tooltips are now fully displaying properly in this branch build.

Here's an example:
![image](https://github.com/audacity/audacity/assets/50205984/7c31ef23-6e3f-47d1-8d4f-315a9ea2a336)
",,"Resolves: #6687 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6742,2024-06-24T11:41:55Z,2024-06-24T12:51:22Z,saintmatthieu,1,0,2,57,1,1,1,[],7312.0,1,7313.0,0,0,0,0,6767138.106138,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with @saintmatthieu 's branch build for this:  audacity-win-3.6.0-alpha-20240624+922af26-x64

This is sadly **_not_** properly fixed, yes the label track is present after the STRs in #6453 - But the label track is incorrectly in an earlier state.

See my fuller test report on #6453 ",,"Resolves: #6453


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6735,2024-06-23T00:52:47Z,2024-06-24T08:45:28Z,brad0,0,0,1,2,1,1,1,[],,0,131528.0,0,0,0,0,6768271.692558,,0,1,0,False,[],,,"Do not assume AltiVec when building on 32-bit PowerPC unless the compiler is
targeting a newer processor. OpenBSD/powerpc targets the G3. Both Clang and
GCC's AltiVec headers check for the compiler having AltiVec mode enabled.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6739,2024-06-24T10:03:32Z,2024-06-24T13:09:57Z,vsverchinsky,1,0,1,3,1,1,1,[],6707.0,0,11190.0,0,0,0,0,6769167.788183,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build for this:  audacity-win-3.6.0-alpha-20240624+55c88da-x64

The errant black triangle when there is no loop region is now no longer present in this branch build",,"Resolves: #6677 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6731,2024-06-21T06:01:04Z,2024-06-21T08:11:37Z,Eism,0,0,2,476,19,1,1,[],,0,7836.0,0,0,0,0,7046270.303045,,0,2,0,False,[],,,Resolves: #6525,
6726,2024-06-20T10:13:57Z,2024-06-21T07:18:15Z,grliszas14,0,8,1,710,22,2,2,[],,0,75858.0,0,0,0,0,7049477.721823,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6594,"please don't use Qt here (use std::string or muse::String...) 
we try not to use Qt where it can be omitted :) i.e. Qt is used mainly only for view we don't use the prefix `get` I believe the term `audio api` is more understandable than `host` in this case. but maybe I'm wrong :)  Just followed au3 style at first, but audioApi sounds more understandable for me as well, changed :+1:  I think better to name `audioApiList` I think better return ""Audio API:"" I know that it's done similar to MuseScore... But it looks so-so... It would be more appropriate to have something like:
```
muse::String currentAudioApi() const override;
void setAudioApi(const muse::String& audioApi) override;
```"
6730,2024-06-20T14:55:53Z,2024-06-20T15:43:06Z,Eism,0,0,1,2,1,1,1,[],,0,2837.0,0,0,0,0,7105582.763751,,0,1,0,False,[],,,"Resolves: #6728
",
6721,2024-06-19T10:35:00Z,2024-06-19T11:40:48Z,Eism,0,0,1,136,7,1,1,[],,0,3952.0,0,0,0,0,7206524.001951,,0,1,0,False,[],,,,
6719,2024-06-19T04:48:42Z,2024-06-19T12:22:19Z,saintmatthieu,0,0,7,253,9,1,1,[],,1,27221.0,0,0,0,0,7204033.334098,,0,7,0,False,[],,,"Resolves: #6717

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA: Mainly aspect changes and small fixes in the behavior of the 5-sec maximum mark for the meters.",
6718,2024-06-19T02:35:55Z,2024-06-19T09:23:50Z,saintmatthieu,0,0,1,1,1,1,1,[],,1,24476.0,0,0,0,0,7214748.19225,,0,1,1,False,[],,,"This broke the builds configured without the libaudiocom flags

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA; no need",
6711,2024-06-18T08:23:56Z,2024-06-18T13:54:12Z,Eism,0,5,3,973,31,1,2,[],,0,19819.0,0,0,0,0,7284924.791129,,0,3,0,False,[],,,"Resolves: #6691
","It seems there is no need a little better implementation (no call function in recursion)
```
inline int _pow10(int power)
{
    int result = 1;
    for (int i = 0; i < power; ++i) {
        result *= 10;
    }
    return result;
}
``` better add static  better add static  it seems unnecessary"
6707,2024-06-17T14:56:34Z,2024-06-18T12:01:20Z,saintmatthieu,0,0,1,8,1,1,1,[],,1,75886.0,0,0,0,0,7291701.540697,,0,1,0,False,[],,,"Resolves: #6678 

Changes introduced in #6391 exposed to a race condition, whereby the main thread might call `WaveformPainter::EnsureClip()`, the audio thread clear the cache vector (via `WaveformPainter::MarkChanged()`), and the main thread read the cache vector.
Proposed solution: `MarkChanged` only schedules the cache reset vial an atomic boolean, The actual reset happens on the main thread.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6684,2024-06-13T15:03:41Z,2024-06-18T10:27:47Z,LWinterberg,1,0,3,103,41,1,1,[],415524.0,0,415525.0,0,0,0,0,7297237.785571,,0,3,0,False,['chinakov'],"Tested, the attached issues are fixed within this PR. The light theme now has proper mouse over states for toolbar buttons. ",,"Resolves: https://github.com/audacity/audacity/issues/3868
Resolves: https://github.com/audacity/audacity/issues/1783
",
6682,2024-06-13T14:16:38Z,2024-06-18T11:01:00Z,LWinterberg,0,0,1,8,1,1,1,[],,0,420610.0,0,0,0,0,7294976.166597,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6679

Resolves: https://github.com/audacity/audacity/issues/6708

QA: To test, open up 3.5 first, close it, then open this build. It should in particular make it such that the record and loop button don't get cut off. ",
6705,2024-06-17T12:58:19Z,2024-06-18T10:27:14Z,saintmatthieu,0,0,1,52,4,1,1,[],,1,77338.0,0,0,0,0,7297349.476025,,0,1,0,False,[],,,"Resolves: #6694

We were passing unscaled slider values to the text validator.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6703,2024-06-17T09:36:49Z,2024-06-18T10:25:12Z,saintmatthieu,0,0,5,998,19,1,1,[],,1,89365.0,0,0,0,0,7297413.676337,,0,5,1,False,[],,,"Resolves: #6662

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6715,2024-06-18T08:51:48Z,2024-06-18T09:30:31Z,grliszas14,0,4,2,323,11,2,1,[],,0,2323.0,0,0,0,0,7300757.963931,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6661

",need to add override  need to add override added added
6712,2024-06-18T08:34:17Z,2024-06-18T09:04:37Z,igorkorsukov,0,0,1,296,22,1,1,[],,0,1821.0,0,0,0,0,7302312.308717,,0,1,0,False,[],,,,
6635,2024-06-07T07:42:05Z,2024-06-17T11:29:49Z,saintmatthieu,0,4,2,738,37,3,2,[],,1,877664.0,0,0,0,0,7380003.031679,,0,2,1,False,[],Can't build without `lib-cloud-audiocom` LGTM from me and also from Lukas and Arif!,Can't build without `lib-cloud-audiocom` LGTM from me and also from Lukas and Arif!,"Resolves: #6618

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

## QA

When redirected to audio.com, the actions below should lead to the URL opened in the browser ending with
`mtm_campaign=Audacity&mtm_source=<audacity version>&mtm_content=<see below>`,
e.g. `https://audio.com/matthieu-hodgkinson/audio/french-break-136-bpm-pl/edit?mtm_campaign=Audacity&mtm_source=Audacity-3.6.0-alpha-20240610&mtm_content=Share_Audio_Button`
Note that this should also apply to the ""link-account"" button associated with these actions, as well as to the 
""Visit audio.com"" button in case the max number of projects was exceeded.

### Example
I want to save my project to the cloud,
![image](https://github.com/audacity/audacity/assets/22740106/23c5b092-d1ae-4a77-9812-ca9441006b13)

but there have to link my account: 
![image](https://github.com/audacity/audacity/assets/22740106/defcf838-19fc-4fdd-ba04-406e10ffab07)

It leads me to audio.com and the link has `Save_to_Cloud_Menu` appended:
![image](https://github.com/audacity/audacity/assets/22740106/e6228408-f009-4aa0-b994-d9ced2ccd649)

Once I have linked my account, upload begins and then I see the success dialog, and clicking on ""view my project"" leads me to 
![image](https://github.com/audacity/audacity/assets/22740106/67b0871d-2b6c-4744-a7a1-4fd73c8a17ab), which also has that `Save_to_Cloud_Menu` appended.

I save another project, and say I reached my limit. I see 
![image](https://github.com/audacity/audacity/assets/22740106/275b5cef-9fea-423e-b2e9-ea7d23e54209)
and clicking ""Visit audio.com"" leads me to my projects page, 
![image](https://github.com/audacity/audacity/assets/22740106/6c405916-d254-4ae4-b7ab-033c4b1da5d9), and the link also has `Save_to_Cloud_Menu` appended.

### Actions (to be checked by QA)

| Action                            | string                            | notes |
| --------------------------------- | --------------------------------- |---|
|![image](https://github.com/audacity/audacity/assets/22740106/1bdcb768-953c-4f93-91d7-3d0029e91d44) | `Share_Audio_Button`                | |
| ![image](https://github.com/audacity/audacity/assets/22740106/50fb33fd-97d9-44f9-b945-d2c780bcd97a)                  | `Share_Audio_Menu`                  | |
| ![image](https://github.com/audacity/audacity/assets/22740106/06fdf9cf-5c82-4302-8bee-e968d0158b1a)           | `Share_Audio_Export_Menu`           | |
| ![image](https://github.com/audacity/audacity/assets/22740106/4b083114-6579-402e-ac88-8dfbb1953767)| `Share_Audio_Export_Extra_Menu`     | mp3 or any other format but not ""selected audio"" |
| ![image](https://github.com/audacity/audacity/assets/22740106/b33eda05-b6b3-46c4-be3c-09a6ffdb3c88)               | `Save_to_Cloud_Menu`                | |
| ![image](https://github.com/audacity/audacity/assets/22740106/86389bf8-2802-4ea2-bc18-9d958f9e1de2)  | `Save_Project_Save_to_Cloud_Menu`   | and then when the modal opens, use the cloud option |
| ![image](https://github.com/audacity/audacity/assets/22740106/b0a2f206-22f8-450c-9f20-dc0d7311b8e4)                       | `Prefs_Panel`                       |  |
| ![image](https://github.com/audacity/audacity/assets/22740106/97e2b751-5b4d-439c-a121-921cf893a3a7)   | `Update_Cloud_Audio_Preview_Menu`   | |
| ![image](https://github.com/audacity/audacity/assets/22740106/5888556e-bc33-482c-8253-8515fc9a878d)   | `Link_Audiocom_Account_Help_Menu`   | If done successfully, there shouldn't be a redirect. If it fails, though, then there should, and the string should be in the URL. One way of failing it is to give some random token. (There are several other reasons why this might fail but testing them all would probably be an overkill. |
| ![image](https://github.com/audacity/audacity/assets/22740106/176f23ee-6335-4294-bbc6-1d98debaf9cb)              | Open_From_Cloud_Menu              | |

","typo ""Ssave"" nitpick: formatting should be ok this should be good too"
6671,2024-06-12T12:53:10Z,2024-06-17T11:24:17Z,saintmatthieu,0,6,3,388,10,3,3,[],,1,426667.0,0,0,0,0,7380336.205355,,0,3,0,False,[],The accessibility changes for the changes to the check boxes are fine.,The accessibility changes for the changes to the check boxes are fine.,"Resolves: #6659

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","nitpick: did the autoformatter do it? It was way easier to read before unintentional change? Yeah, this must be a spec of the `.clang-format` you can find in some of our subdirectories. Same reason as above, but that one looks peculiar all right ... nitpick: you can write ""MacOS and Linux doesn't cope..."" as this function checks if the current platform is running Windows (only) -  just to to reduce potential questions in the future Agreed. Will solve when rebasing."
6693,2024-06-14T12:34:34Z,2024-06-14T14:24:22Z,Eism,0,1,2,255,15,1,1,[],,0,6591.0,0,0,0,0,7628730.908333,,0,2,0,False,[],,,Resolves: #6653,This was necessary to be able to reset the selection by clicking
6688,2024-06-13T16:11:45Z,2024-06-15T06:19:29Z,saintmatthieu,0,0,2,5,2,1,1,[],,1,137264.0,0,0,0,0,7571427.186307,,0,2,0,False,[],,,"Resolves: #6675 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6692,2024-06-14T09:34:14Z,2024-06-14T10:04:21Z,Eism,0,0,1,3,1,1,1,[],,0,1811.0,0,0,0,0,7644334.074679,,0,1,0,False,[],,,,
6689,2024-06-14T08:56:09Z,2024-06-14T10:18:14Z,igorkorsukov,0,0,1,166,11,1,1,[],,0,4925.0,0,0,0,0,7643505.493268,,0,1,0,False,[],,,,
6683,2024-06-13T14:22:40Z,2024-06-14T09:26:41Z,Eism,0,2,3,1512,23,1,1,[],,0,68645.0,0,0,0,0,7646596.7868,,0,3,0,False,[],,,"Resolves #6524
",please set init value  please set init values
6686,2024-06-13T15:29:53Z,2024-06-14T08:26:46Z,dozzzzer,0,0,1,200,1,1,1,[],,0,61013.0,0,0,0,0,7650196.320615,,0,1,1,False,[],,,"Resolves: *(direct link to the issue)*

Corrections of errors and inaccuracies in the translation of Audacity into Russian to facilitate user interaction and a better understanding of the functions and interface of the program.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6681,2024-06-13T14:05:13Z,2024-06-14T07:03:56Z,igorkorsukov,0,6,1,119,5,2,1,[],,0,61123.0,0,0,0,0,7655168.543967,,0,1,0,False,[],,,"Resolves: #6670
","Any reason behind that particular number? Or is it just for now to be able to freely drag clips pretty much everywhere? Typo? ""slips"" -> ""clips"" ? I'd reduce nesting levels by writing
`if (m_clipList.at(i).key != clip.key) {
    continue;
}
...` These are just initial values, deliberately large, so as not to limit  fixed changed "
6680,2024-06-13T13:44:21Z,2024-06-13T16:09:15Z,saintmatthieu,0,0,1,13,3,1,1,[],,1,8695.0,0,0,0,0,7708849.96502,,0,1,1,False,[],,,"Resolves: #6589 

This PR fixes a regression introduced in the previous PR for that ticket, #6657

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Pressing stop freezes the graph, pressing play clears it and it starts again
- [x] Pausing freezes the graph, un-pausing starts it again where it stopped (without clearing)",
6650,2024-06-10T15:13:54Z,2024-06-13T13:33:35Z,LWinterberg,0,8,46,2061,760,1,1,[],,0,253190.0,0,0,0,0,7718183.347489,,0,46,0,False,[],"just some nitpicking, good work :+1: ","just some nitpicking, good work :+1: ","Resolves: #6651


Resolves: https://github.com/audacity/audacity/issues/5688

QA: Verify that all themes look good (ie, not obviously broken). Light and Dark should look pretty swish, HC should be pretty much unchanged, classic should also be pretty much unchanged (new classic theme = old light theme). ","leftovers? leftover leftovers leftovers leftover leftover leftovers whitespace - I see Matthieu removes them every PR, so let's not add it to his workload :P "
6657,2024-06-11T10:12:46Z,2024-06-13T13:16:13Z,saintmatthieu,1,0,6,283,15,1,1,[],4095.0,1,183807.0,0,0,0,0,7719235.525566,,1,6,1,False,['petersampsonaudacity'],"Testing on W10 with @saintmatthieu 's latest branch build for this fix:  audacity-win-3.6.0-alpha-20240611+a470e1c-x64

This now appears to work fine in Matthieu's branch:

a) if you press Pause during playback in either of the two effects then the graph now stops and doesn't continue scrolling blank.  And when you press pause to restart playback then the graph restarts.

b) also works if you press pause and then switch from RT Compressor to RT Limiter and vice versa.

Looks to be functionally fixed to me.",,"Resolves: #6589

In addition to the strictly necessary changes to fix the problem reported in #6589, 115e46fa5f12101330ae6b1ff23e506201792796 and 4756b37334080f6adc642b3237ece04c1ec6f665 also address some apparent mistake:
`ProcessingScope` was always calling `RealtimeEffectManager::ProcessStart(bool suspended)` and `ProcessEnd(bool suspended)`  with `false`, while dead code nearby suggested that the correct value should be `true` when playback was paused.
Rectifying this has the (positive?) consequence that `RealtimeSuspend()` and `RealtimeResume()` is called on `EffectInstance` implementations also when pausing or un-pausing playback. Testing should therefore cover existing implementations (see QA list).

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

## QA
### Limiter-specific:
- [ ] Interactions of play/pause/bypass behave as expected on the graph
- [ ] If the editor is opened during playback/pause/bypass state, further play/pause/bypass interactions behave as expected.
### General
- [ ] Anything unusual when pausing/resuming playback with an effect from any of the following, please report:
* AU
* Ladspa
* LV2
* VST
* VST3",
6673,2024-06-12T14:52:01Z,2024-06-13T06:56:30Z,igorkorsukov,0,0,4,547,27,1,1,[],,0,57869.0,0,0,0,0,7742019.756659,,0,4,0,False,[],,,"[#6653](https://github.com/audacity/audacity/issues/6653)
",
6669,2024-06-12T12:12:06Z,2024-06-12T12:56:49Z,igorkorsukov,0,0,1,213,2,1,1,[],,0,2684.0,0,0,0,0,7806802.035089,,0,1,0,False,[],,,,
6641,2024-06-07T17:34:53Z,2024-06-12T13:57:01Z,vsverchinsky,0,0,1,20,1,1,1,[],,0,428533.0,0,0,0,0,7793586.165023,,0,1,0,False,[],,,"Resolves: #6519

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6663,2024-06-11T14:26:46Z,2024-06-11T15:33:14Z,grliszas14,0,2,1,22,4,2,2,[],,0,3988.0,0,0,0,0,7883820.419079,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6631,"By the way, we have https://github.com/audacity/audacity/blob/master/au4/src/au3wrap/wxtypes_convert.h
It can be improved... changed"
6658,2024-06-11T10:19:21Z,2024-06-11T13:45:38Z,Eism,0,0,3,407,13,1,1,[],,0,12380.0,0,0,0,0,7890273.476765,,0,3,0,False,[],,,Resolves: #6527,
6619,2024-06-06T12:27:39Z,2024-06-11T13:00:14Z,DavidBailes,0,0,1,39,1,1,1,[],,0,433955.0,0,0,0,0,7893002.396161,,0,1,0,False,[],Thanks @DavidBailes for your contribution!,Thanks @DavidBailes for your contribution!,"Resolves: https://github.com/audacity/audacity/issues/6617

Problem:
When the compressor and limiter are used as realtime effects, there are a number of check boxes immediately above a graph which determine which parameters are shown in the graph. For sighted users, the purpose of these check boxes is reasonably obvious. However, for users of screen readers, the names of the check boxes, eg input, output, without their visual context, do not make their purpose at all obvious.

Fix:
Change the accessibility names of the check boxes to ""Show input"", ""Show output"", etc.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6655,2024-06-11T08:33:31Z,2024-06-11T09:58:31Z,igorkorsukov,0,8,6,888,40,2,1,[],,0,5100.0,0,0,0,0,7903906.970611,,0,6,0,False,[],,,"Resolves: #6620
","Will it have always the same colour? When I see that long returned type I think of making some typedef or 'using', what do you think? missing headers with license
 p is not used anywhere else so maybe it's not worth to create a named variable but rather put it directly into signal argument
emit selectionEnded(m_startPoint,  QPointF(x, y)); yes, it doesn't depend on the theme or settings  in this module (au3) it is problematic to use usings, because here two domain models intersect (even some type names coincide, for example TrackId), we need to clearly see which type, from which model, is meant here. fixed changed"
6639,2024-06-07T14:10:44Z,2024-06-11T08:29:31Z,Eism,0,0,3,674,30,1,1,[],,0,325130.0,0,0,0,0,7909245.135675,,0,3,0,False,[],,,Resolves: #6523,
6647,2024-06-10T13:55:08Z,2024-06-11T08:07:49Z,grliszas14,0,1,1,172,17,1,1,[],,0,65562.0,0,0,0,0,7910550.712964,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6581,"I think this ruler should be part of the track delegate (TrackClipsItem) 
(i.e. one ruler for each track)"
6609,2024-06-05T08:57:01Z,2024-06-10T13:36:50Z,saintmatthieu,0,0,9,569,11,1,1,['Music'],,1,448790.0,0,0,0,0,7977211.128332,,0,9,1,False,[],,,"Resolves: #6510

At the time of writing, results in
![image](https://github.com/audacity/audacity/assets/22740106/7bd5e7f2-0dab-4d38-99c7-f9274711dd72)
![image](https://github.com/audacity/audacity/assets/22740106/d26ca0e1-3a59-4c41-8d89-e68046fcd399)
![image](https://github.com/audacity/audacity/assets/22740106/e020b21e-0bcb-490f-ad60-cc77a5c60a5c)
![image](https://github.com/audacity/audacity/assets/22740106/607ef618-e636-4a19-b2c0-c843a3e26716)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

Some ideas for QA:
- [x] Animated elements (meter and graph) are only visible in realtime limiter and compressor
- [x] Compression curve is only visible in compressor
- [x] Interactions with playback and bypass buttons work (e.g. open before playback start, open during playback, open while bypassed, etc.)",
6640,2024-06-07T15:41:17Z,2024-06-10T09:29:09Z,vsverchinsky,0,0,1,5,1,1,1,[],,0,236872.0,0,0,0,0,7992074.867959,,1,1,0,False,[],Follow-up ticket. https://github.com/audacity/audacity/issues/6646,Follow-up ticket. https://github.com/audacity/audacity/issues/6646,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6633,2024-06-07T06:57:20Z,2024-06-07T09:03:07Z,Eism,0,0,2,556,12,1,1,[],,0,7550.0,0,0,0,0,8252835.957116,,0,2,0,False,[],,,now it uses StyledToolBarView from framework,
6622,2024-06-06T15:10:23Z,2024-06-07T06:32:03Z,igorkorsukov,0,0,2,232,10,1,1,[],,0,55300.0,0,0,0,0,8261903.157432,,0,2,0,False,[],,,"Resolves: #6613 
",
6621,2024-06-06T14:03:07Z,2024-06-06T14:30:09Z,igorkorsukov,0,0,1,126,10,1,1,[],,0,1622.0,0,0,0,0,8319619.427458,,0,1,0,False,[],,,"Resolves: #6607
",
6615,2024-06-06T07:09:50Z,2024-06-06T13:23:37Z,igorkorsukov,0,0,5,524,27,1,1,[],,0,22427.0,0,0,0,0,8323612.624775,,0,5,0,False,[],,,"Resolves: #6584
",
6616,2024-06-06T07:21:10Z,2024-06-06T07:50:48Z,igorkorsukov,0,0,1,2,1,1,1,[],,0,1779.0,0,0,0,0,8343581.945969,,0,1,0,False,[],,,,
6612,2024-06-05T13:20:22Z,2024-06-05T13:38:37Z,grliszas14,0,0,2,31,3,1,1,[],,0,1120.0,0,0,0,0,8409089.364768,,0,2,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/6562,
6537,2024-05-30T09:04:13Z,2024-06-05T11:18:27Z,saintmatthieu,0,10,13,851,18,2,1,[],,1,526454.0,0,0,0,0,8417526.741949,,0,13,1,False,[],,,"Resolves: #6508

In addition to #6508, this PR introduces several smaller improvements.
To give reviewers an idea, the result at the time of writing is something like this:
![image](https://github.com/audacity/audacity/assets/22740106/356fc01c-23c7-40ee-92ef-b32035c0db80)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Here some image for comparison: 
![Elapsed-time-comparison](https://github.com/audacity/audacity/assets/22740106/d43a9171-7bf7-436b-b4f8-8e70ab644b58)
 The x-axis is elapsed times between two ticks. `std::unique_ptr<wxGraphicsContext> MakeGraphicsContext(const wxPaintDC& dc)`? No themeing? Leaked Leaked :+1: `wxTimer` isn't precise mechanism indeed, alternatively you can try set 1ms update period and call `wxWindow::Refresh`(without `wxWindow::Update`) from timer update function making an early return from it until next `OnPaint`. I don't think it will yield better result, but then you don't have to explain numbers.
Btw, I checked Auburn Couture plugin and it's a bit jittery too.
👍  Interesting idea. I just tried it, but indeed, no improvement. No, at least not yet. It doesn't offer much choice, and the colors are being revisited by @jessjwilliamson at the moment. We can do this later if it get prioritized."
6578,2024-06-03T13:45:08Z,2024-06-05T08:16:02Z,igorkorsukov,0,0,1,17,1,1,1,[],,0,153054.0,0,0,0,0,8428472.34695,,0,1,0,False,[],,,"Resolves: #6539
",
6603,2024-06-04T14:41:08Z,2024-06-05T06:34:46Z,grliszas14,0,0,1,354,9,1,1,[],,0,57219.0,0,0,0,0,8434550.095872,,0,1,0,False,[],,,https://github.com/audacity/audacity/issues/6558,
6590,2024-06-04T10:39:26Z,2024-06-04T13:15:48Z,grliszas14,0,2,1,215,10,1,1,[],,0,9382.0,0,0,0,0,8496889.320694,,0,1,0,False,[],,,,"Let's add task about open project by file drag and drop  (here https://github.com/orgs/audacity/projects/27/views/1)  Let's add task about create ""about dialog"" (here https://github.com/orgs/audacity/projects/27/views/1)"
6570,2024-06-03T07:21:42Z,2024-06-04T10:50:39Z,LWinterberg,0,0,1,4,1,1,1,[],,0,98941.0,0,0,0,0,8505597.202157,,0,1,0,False,[],,,"Resolves: #6568

QA: the normal CI build doesn't work for this. It's only the installer which no longer should display this warning: 
![image](https://github.com/audacity/audacity/assets/87814144/eeacbf8e-7ab1-4745-967b-0e6b891e66e4)

This build should have installers: https://github.com/LWinterberg/audacity/actions/runs/9345991660",
6602,2024-06-04T12:10:08Z,2024-06-04T12:35:30Z,igorkorsukov,0,0,1,2,1,1,1,[],,0,1522.0,0,0,0,0,8499310.334225,,0,1,0,False,[],,,,
6588,2024-06-04T02:40:42Z,2024-06-04T07:30:08Z,Gootector,1,0,1,8,1,1,1,[],18242.0,0,18243.0,0,0,0,0,8516757.489975,,0,1,0,False,['Gootector'],Thanks!,,"Update Polish Translation (3.6.0)
Fixes.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6567,2024-06-03T01:44:01Z,2024-06-03T15:16:58Z,LWinterberg,0,0,1,16,1,1,1,[],,0,48781.0,0,0,0,0,8576020.753927,,0,1,0,False,[],,,"Resolves: #2937 

There may be an opportunity to refactor this code and make it all work properly again... but then, I see a comment by @Paul-Licameli nearby lamenting the difficulty of refactoring this code, so maybe this is best left decaying and let Qt make a fresh start
",
6577,2024-06-03T13:08:54Z,2024-06-03T14:12:22Z,grliszas14,0,4,1,548,31,2,1,[],,0,3825.0,0,0,0,0,8579886.133102,,0,1,0,False,[],,,https://github.com/audacity/audacity/issues/6550,let's rename to ProcessingActionsController (and file name)  let's rename to IProjectSceneActionsController (and file name) fixed fixed
6571,2024-06-03T08:44:31Z,2024-06-03T10:05:23Z,igorkorsukov,0,0,1,11,2,1,1,[],,0,4852.0,0,0,0,0,8594722.495153,,0,1,0,False,[],,,"Resolves: #6569

",
6521,2024-05-29T08:17:10Z,2024-06-03T08:45:37Z,DavidBailes,0,0,1,8,1,1,1,[],,0,433707.0,0,0,0,0,8599511.025325,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6457
Resolves: https://github.com/audacity/audacity/issues/6520

Problems:
1. The link isn't in the Tab order.
2. Screen readers read its name as hyperlink, rather than ""watch video""

Fixes:
1. Use a wxPanel rather than a wxWindow for footer.
2. Leave setting the accessibility name to wxWidgets.


*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6514,2024-05-28T12:34:50Z,2024-06-03T08:50:04Z,DavidBailes,1,1,1,17,3,1,1,[],501435.0,0,504914.0,0,0,0,0,8599244.615483,,0,1,0,False,['DavidBailes'],@vsverchinsky . Updated the PR so that the only change in the tab order is that the headers are included.,,"Resolves: https://github.com/audacity/audacity/issues/6456

Problem:
As you tab through the controls in the realtime effects pane, there is no indication which controls are for the focused track and which for master.

Fix:
1. Include the header windows in the Tab order.

2. Set the accessibility name of the header window for master effects.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","@LWinterberg WDYT?
> Note that the fix used also means that the windows used to contain the controls for each effect is now also in the tab order

The current behavior is as per design"
6565,2024-06-01T20:36:14Z,2024-06-03T07:29:36Z,Gootector,1,0,1,10,1,1,1,[],129620.0,0,129642.0,0,0,0,0,8600034.693562,,0,1,0,False,['Gootector'],Thanks!,,"Update Polish Translation (3.6.0)
Fixes.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6512,2024-05-27T17:55:59Z,2024-06-03T08:20:11Z,saintmatthieu,0,4,4,89,4,2,1,[],,1,570252.0,0,0,0,0,8601040.96686,,0,4,0,False,[],,,"Resolves: #6505

In addition to fixing the delay issue, this PR also modifies the aspect of the graph, using one line for the actual compression and a filled area to denote the difference between target and actual compression.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

","What if lookahead has changed? Do you need to `mSync.reset()` somewhere? `(elapsedSincePacket - displayDelay)`? Otherwise `displayDelay` is not used wxWidgets defines set of pen/brush constants. 
Could be replaced with `*wxBLACK_PEN` Our playback currently doesn't handle varying latency, see https://github.com/audacity/audacity/issues/3223. Will add a comment."
6563,2024-05-31T14:12:17Z,2024-06-03T07:02:39Z,igorkorsukov,0,0,2,213,11,1,1,[],,0,233423.0,0,0,0,0,8605694.348441,,0,2,0,False,[],,,https://github.com/audacity/audacity/issues/6551 ,
6561,2024-05-31T12:57:58Z,2024-06-03T06:40:21Z,igorkorsukov,0,0,1,34,2,1,1,[],,0,236543.0,0,0,0,0,8607033.466206,,0,1,0,False,[],,,the previous solution blocked interaction with clips ,
6559,2024-05-31T12:13:33Z,2024-05-31T16:04:56Z,LWinterberg,0,0,2,173,8,1,1,[],,0,13887.0,0,0,0,0,8832356.599903,,0,2,0,False,[],,,"Resolves: #2034

This removes these dialogs: 

![image](https://github.com/audacity/audacity/assets/87814144/47a26b84-10f0-45cb-95eb-91c989631fac)

![image](https://github.com/audacity/audacity/assets/87814144/987c3299-693f-4a7c-b662-dbffc4564664)

When you close an empty project (dirty or not), Audacity now just closes. When you save an empty project, dirty or not, Audacity now just saves. ",
6560,2024-05-31T12:19:20Z,2024-05-31T21:12:53Z,igorkorsukov,0,0,1,92,1,1,1,[],,0,32013.0,0,0,0,0,8813883.809765,,0,1,0,False,[],,,https://github.com/audacity/audacity/issues/6554,
6517,2024-05-28T14:23:03Z,2024-05-31T13:23:45Z,LWinterberg,1,0,6,32,7,1,1,[],248241.0,0,256135.0,0,0,0,0,8841540.957333,,1,6,0,False,['Paul-Licameli'],"Should you also move Dmitry to emeritus in AboutDialog.cpp?
",,"Resolves: #6477

Also simplifies the cloud sync success dialog by removing a button. (expected behavior: done opens the project online, X only closes the dialog)

Also clarifies the cloud save option in the save dialog more. 

Also removes the ""Save project is for project files not audio files"" warning, instead it's now included in the save dialog directly.

Also renames Extra -> Tracks -> Close track... to Delete track...

Also moves Dmitry to emeritus.",
6500,2024-05-27T06:46:53Z,2024-05-31T11:48:21Z,saintmatthieu,1,0,1,63,5,1,2,['bug'],33727.0,1,363688.0,0,0,0,0,8847758.543112,,0,1,1,False,['saintmatthieu'],"@LWinterberg the first commit fixed the problem for drag-and-drop, but not when importing via the menu.
To fix this, the last commit makes it such that all public `Import` methods of the `ProjectFileManager` end up scrolling to the last imported track.
I guess this is desired, but maybe you can think of a case when importing should _not_ result in auto-scrolling ?I cannot think of any case where you wouldn't want the track you just added to not be visible.",I cannot think of any case where you wouldn't want the track you just added to not be visible.,"Resolves: #6361

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6542,2024-05-30T11:01:20Z,2024-05-30T11:49:05Z,igorkorsukov,0,0,1,10,1,1,1,[],,0,2865.0,0,0,0,0,8934117.479777,,0,1,0,False,[],,,,
6546,2024-05-30T13:35:00Z,2024-05-30T18:22:24Z,igorkorsukov,0,0,2,249,15,1,1,[],,0,17245.0,0,0,0,0,8910518.102743,,0,2,0,False,[],,,,
6541,2024-05-30T10:53:12Z,2024-05-30T11:05:47Z,igorkorsukov,0,0,4,340,16,1,1,[],,0,756.0,0,0,0,0,8936716.929855,,0,4,0,False,[],,,,
6533,2024-05-29T12:42:33Z,2024-05-30T08:00:12Z,igorkorsukov,6,4,1,1060,20,2,1,[],669.0,0,69459.0,0,0,0,0,8947854.931339,,0,1,0,False,"['Paul-Licameli', 'igorkorsukov']","Explain please? > Explain please?

Synchronized with the structure in MuseScore.
Our goal is to make applications similar with MuseScore, so as not to waste time on what has already been implemented and to be able to focus on the unique functions of Audacity.  > > Explain please?
> 
> Synchronized with the structure in MuseScore. Our goal is to make applications similar with MuseScore, so as not to waste time on what has already been implemented and to be able to focus on the unique functions of Audacity.

How deep is this work?  Will it rewrite the inter-thread communications that happen now in AudioIO.cpp? > How deep is this work? Will it rewrite the inter-thread communications that happen now in AudioIO.cpp?

Not now, at the moment these are only wrappers for AU3 (AudioIO) > > How deep is this work? Will it rewrite the inter-thread communications that happen now in AudioIO.cpp?
> 
> Not now, at the moment these are only wrappers for AU3 (AudioIO)

“Not now” suggests that you mean “later.”

Are you sure you won’t discover things AudioIO.cpp does that MuseScore does not and have to rethink this?
 > “Not now” suggests that you mean “later.”
> 
> Are you sure you won’t discover things AudioIO.cpp does that MuseScore does not and have to rethink this?

We have not yet explored this issue, but we plan to study it in the future, and then we will see.",,,"can you please restore this? The method is called rewindToStart, but we accept an optional position, should we change the name of the method or remove the optional position? In what cases can a position be put?  let's remove the optional position fixed"
6203,2024-04-02T21:26:01Z,2024-05-29T14:20:05Z,vsverchinsky,3,3,5,405,19,3,4,[],3711270.0,0,4899268.0,0,0,0,0,9011438.925805,,1,5,0,False,['vsverchinsky'],"One more commit added that fixed scrolled window auto-size issue Squashed fix commits One new commit @vsverchinsky
[Text edit fix](https://github.com/audacity/audacity/pull/6203/commits/38a614b2ab31a5e702d55201d9950a3c298156bc) added",,"Resolves: #6156 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I know that there's only one line after ""if"" statement but I'd add curly braces anyway - I've seen too many bugs with it Same comment as above - consider using curly braces anyway We don't have a strict policy about use of brackets in `if`-statements, but generally in Audacity's sources brackets are not used with single line expressions."
6503,2024-05-27T08:49:56Z,2024-05-29T06:26:27Z,saintmatthieu,1,3,1,17,2,3,4,[],10102.0,0,164191.0,0,0,0,0,9039883.025597,,0,1,0,False,['saintmatthieu'],"@LWinterberg @vsverchinsky the first commit fixed the scanning of the module paths, but not the readout from `audacity.cfg`, which had the same problem again. The second commit should address that.",,"Resolves: #6448 

`wxFileName::Normalize()` by default uses (among others) the `wxPATH_NORM_ENV_VARS`.
On Windows, this environment-variable path expansion option has a [bug](https://github.com/wxWidgets/wxWidgets/issues/19214), causing #6448. (Note that the way this was resolved by wxWidgets was by discouraging the use of that option, rather than fixing the problem itself.)

We are using `Normalize` as Audacity collects paths where to look for modules. Looking at the code ending at the place where we make this call to `Normalize`, it seems to me that environment variable expansion is not needed, and can hence be disabled (see diff).

We make other calls to `Normalize` in other contexts, which I reviewed. There seems not to be a need to disable this option there, but I would like to have the opinions of the reviewers.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","One thing that bothers me a bit is that `AddUniquePathToPathList` isn't unique anymore, but I don't think was expected that `sAudacityPathList` could contain environment variables in its paths You mean it was unique before this change and now it isn't ? I don't understand. No, I just didn't think well enough about it, please ignore that comment"
6458,2024-05-20T08:19:03Z,2024-05-28T16:51:05Z,grliszas14,1,24,1,61,4,3,3,[],725177.0,0,725178.0,1,0,0,0,9085550.266417,,0,1,0,False,['vsverchinsky'],"@grliszas14 for a single-commit PR's please use ""rebase and merge"", that makes history look much clearer. Ideally before merging a branch with multiple commits rebase your branch on top of recent master first, wait checks are complete and then do ""merge commit""",,"Resolves: https://github.com/audacity/audacity/issues/6376

Getting file handle of file that hasn't been downloaded yet (in the middle of download) is a blocking call. If file is big or internet connection is slow this call freezes whole app. 
Moved blocking call to a separate thread and allowed user to cancel import (if so, user goes back to usual flow, thread is going to finish it's job but the result is ignored, thread cleans up after itself)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think doxygen-style comment will be recognized as comment to the first function only, not a whole group. Should be single-line C-style comment `//` Please don't mix code-style in a single header, we use camel-case prefixed with `m` for member variable names (except for POD structures) File header comment is missing `final` This dialog will appear on every import, even for tiny files that are readable, won't it be too intrusive? Did you make sure that all calls are thread-safe? Isn't it enough to try simply `fopen` file? Use either `XO` or `_` macro for translatable strings, otherwise `gettext` will not see your string definition Handler is already bound to the event via event table you've defined above, one of them should be removed `Is...`? Can't be called after `OnImportStartCleanup` Doesn't need to be a part of interface. Please consider using `ProjectWindows` or assigning this dialog directly to a project frame via `GetProjectFrame` Tried it, unfortunately fopen returns false-positive true and after that when you call plugin->Open UI freezes anyway.
I think this is the only option we have. The most vulnerable scenario is when user cancels importing because thread is working until it finishes it's job and by that time we're out of scope so I've used shared_ptr to take care of promise object to be still available (avoiding potential segfault that way) I don't think there is a way to determine if file is already readable or in the middle of download so I guess it needs to stay that way.
There's other option though: there is a progress dialog displayed right after obtaining file handle - instead of showing ImportInfo dialog and then ProgressDialog, we could display only ProgressDialog but sooner - but this needs some refactoring because ProgressDialog expects file handle in its constructor.
Right now it looks like ImportInfo dialog ""evolves"" into ProgressDialog fixed fixed fixed fixed fixed fixed fixed assigned dialog to project frame but left function and renamed it (still need to call EndModal) One last thing: `lib-basic-ui` is a toolkit-neutral library, better define `enum` and map it to a framework-specific value in the library that implements `BasicUI` interface, which is `lib-wx-init` This should be `XO(""Importing files""), XO(""Importing %s..."")` where %s is the file that currently is being imported Fixed 👍 "
6504,2024-05-27T10:15:48Z,2024-05-28T09:01:34Z,igorkorsukov,0,0,2,423,16,1,1,[],,0,81946.0,0,0,0,0,9116978.844517,,0,2,0,False,[],,,,
6480,2024-05-23T14:24:17Z,2024-05-27T11:47:04Z,saintmatthieu,0,6,3,677,26,2,1,['Music'],,1,336167.0,0,0,0,0,9193452.084726,,0,3,1,False,[],,,"Resolves: #6479

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Closing/Opening editor during playback works as expected (new graph is started)
- [x] Enabling/Disabling the effect during playback works as expected (produces a gap)
- [x] Actions such as moving the window, opening a menu don't freeze the graph on Windows anymore.
","This comment is obsolete. Redundant `std::move` Not more than one consuming and one producing threads I remember we agreed to avoid use `new` except when allocating wx structures. I'd suggested to replace that with `= std::make_unique<...>` 👍  Mh, this line fails on MacOS x86_64, with the error
```
/Applications/Xcode_15.0.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.0.sdk/usr/include/c++/v1/__memory/shared_ptr.h:269:8: error: aligned deallocation function of type 'void (void *, std::align_val_t) noexcept' is only available on macOS 10.13 or newer
```
So it's not happy about the use of `std::align_val_t`. Probably due to
```cpp
template <typename T> class LockFreeQueue
{
public:
 ...
private:
   // Align the two atomics to avoid false sharing
   // mStart is written only by the reader, mEnd by the writer
   NonInterfering<std::atomic<size_t>> mStart { 0 }, mEnd { 0 };
};
```
which inherits from `NonInterferingBase`,
```cpp
NonInterferingBase {
   static void *operator new(std::size_t count, std::align_val_t al);
   static void operator delete(void *ptr, std::align_val_t al);
   ...
};
```
But `MeterPanelQueue` also uses this class, and this never caused that build problem 🤷 
```cpp
using MeterUpdateQueue = LockFreeQueue<MeterUpdateMsg>;
```
My only yet feeble guess is that the memory layout of `MeterUpdateMsg` differs from that of `DynamicRangeProcessorOutputPacket` in a fortunate way.
Any idea @vsverchinsky ?"
6395,2024-05-07T08:12:02Z,2024-05-22T13:49:35Z,saintmatthieu,30,22,8,4389,45,2,1,[],634083.0,0,1754857.0,0,0,0,0,9179497.118923,,0,8,0,False,"['petersampsonaudacity', 'saintmatthieu', 'dozzzzer', 'SteveDaulton', 'LWinterberg']","@saintmatthieu 

When changing parameters during playback, abrupt volume changes of high amplitude occur:

(Warning: it may get loud)

https://github.com/audacity/audacity/assets/70063970/b324f64f-d924-4954-b0ca-c006d4a86c55

 @petersampsonaudacity was reporting this [here](https://github.com/audacity/audacity/issues/6339#issuecomment-2109972046) for a chirp and with other parameters, too.
I expect this to happen. We do not have any kind of parameter change smoothing in place, so it does so in steps. In this particular case, you are changine the threshold for the limiter, which is like changing the input gain. Testing on W11 with @saintmatthieu 's latest branch build:  audacity-win-3.6.0-alpha-20240514+2d767ac-x64

This shows that with both the new effects the **Presets and Settings**  fail to work:
a) the **Factory Presets/Default** fails to restore the default settings,
b) whilst the user can set and recall a user preset, these also fail to apply when invoked.

_This is technically a regression on 3.5.1 behavior with the old, replaced, effects._ > Testing on W11 with @saintmatthieu 's latest branch build: audacity-win-3.6.0-alpha-20240514+2d767ac-x64
> 
> This shows that with both the new effects the **Presets and Settings** fail to work: a) the **Factory Presets/Default** fails to restore the default settings, b) whilst the user can set and recall a user preset, these also fail to apply when invoked.
> 
> _This is technically a regression on 3.5.1 behavior with the old, replaced, effects._

@petersampsonaudacity thanks for your report!
On my side it's also buggy, but less so: changing an effect parameter by applying a preset does not update the slider positions. Everything else works, though.
Could you double-check if this is consistent with your experience?
Fix commit pushed. > On my side it's also buggy, but less so: changing an effect parameter by applying a preset does not update the slider positions. 

@saintmatthieu testing on W11 with your two latest branch builds;
audacity-win-3.6.0-alpha-20240516+b7b392b-x64 and 
audacity-win-3.6.0-alpha-20240516+13bcfb5-x64

I confirm that
a) the default slider settings get restored (slider positions)  with the use of the Factory >default
b) the user can set a user preset and when recalled it restores the users slider positions

So looks like this works properly now.

>Everything else works, though.
> Could you double-check if this is consistent with your experience?

I can't really vouch for the actual accuracy in use of compressor or limirter as I have no real experience of using such effects - you might want to approach @SteveDaulton  for that.

-------------------------------------------------------------------------------------------------------------------

One thing I do note is that the dialogs for the new replacement effects are narrower than the ones they replace - the upshot being that the sliders are narrower than previously.

This can be mitigated by expanded the dialog rightwards with click&drag on its right edge 
**_BUT_** I am un-convinced that this will be readily ""discoverable"" by many users.

 Am I testing the correct version? I am using Audacity 3.6.0-alpha commit ID: 4e4fdb but the new Limiter does not behave like any other limiter I've ever used. That's the correct version. I'm listening :) An ""ideal"" (but impossible) limiter prevents the audio from going above a specified threshold level, without affecting audio below that level (other than optional makeup gain), and without introducing distortion.

Easiest to demonstrate with a generated test tone, though it  also applies to real-world audio.
Here is a 10 second 2kHz sine tone, which fades up to a peak level of 0dB over 5 seconds, then fades back down to silence:


![sine](https://github.com/audacity/audacity/assets/11681097/d2f63df0-c61d-4ee6-95a1-496aba9e3f15)


After limiting to -5dB (chosen to match the  new limiter default), I would expect the waveform to look similar to this:


![hard-limit-5](https://github.com/audacity/audacity/assets/11681097/eadab87f-1027-464a-8d93-a709b94bf967)


Using the new Limiter with default settings, the result looks like this:


![new-limiter](https://github.com/audacity/audacity/assets/11681097/a022efd4-4d5b-42ba-a01e-1ab2d09fe076)


which, after normalizing to 0dB looks like this:



![new-limiter-normalized](https://github.com/audacity/audacity/assets/11681097/69d915b2-0fa9-43c4-97de-5e4cab24bfe2)

 Strange. I get this: 
![image](https://github.com/audacity/audacity/assets/22740106/0ca886c5-56d4-4d9b-ba4c-0ba98ca2ebb2)
That was, like you, with default settings: 
![image](https://github.com/audacity/audacity/assets/22740106/b9e46b4e-6fcb-4231-864c-4925f35e8e54)
That looks correct to me. > Strange. I get this:

That does not look like a sine wave. I'm guessing it is a square wave, but even so I don't get that result.
(I am using the Ubuntu 22.04 AppImage on Ubuntu 22.04)
 I cannot reproduce your post-normalization case either. 

The way this thing works is somewhat similar to the Waves L2, the Avid Pro Limiter and various other mastering limiters. The idea of these is that you have a ceiling (which we call ""make-up target"") which already would be a normalized output to whatever you set as your target - assuming material actually hits the threshold. For the case where you don't want any make-up, the target and threshold need to be identical.  Also tested the same AppImage in a clean install of Debian in VirtualBox and I get the same result. Right, it was with a square wave. Now with a sine: ![image](https://github.com/audacity/audacity/assets/22740106/70b26313-8e8a-4e2d-9071-21435c9e6308)
@SteveDaulton any way you could try the exact same on another OS ? Looks like we have a problem on Linux. Curiously, on one attempt the effect did change the dynamics, but much more than it should have. I have not been able to repeat this.

When I try now, if I set the Threshold and Make-up Target to the same value, the effect does nothing (effectively a no-op). Thanks for your early report, @SteveDaulton , @dozzzzer has confirmed [this](https://github.com/audacity/audacity/pull/6395#issuecomment-2115642737). Looking into this. (Ubuntu 22.04) I also see a wrong result after applying Limiter with the default parameters to a sine tone with fade in & fade out, although different from @SteveDaulton's one:

![image](https://github.com/audacity/audacity/assets/70063970/57dfb1a8-7aa0-4966-8c01-fdeafb0321c2)
 I was using `abs` instead of `std::abs`, which on Linux takes an `int` argument ...
Fix pushed, please @SteveDaulton @dozzzzer would you give it another shot once the build is ready ? When resizing the window during playback, the graph drawing stops until the LMB is released:

https://github.com/audacity/audacity/assets/70063970/07293dc4-c44f-4af6-a97f-295a72c3a68f

 Yeah, I haven't found how to solve this. I don't get updates when resizing is under way (wxWidgets stuff). At best I could get the straight line to disappear. Then it'd look like when you bypass and un-bypass. @dozzzzer actually that was an easy fix. Please re-test when latest build is ready. Testing with Commit Id: d40c0e  I am still seeing the same bug. I beg your pardon: I messed up force-pushing from different machines. [0d0f371](https://github.com/audacity/audacity/pull/6395/commits/0d0f371275f451122b5e4ac09ddd3699793fe331) is the fix commit. Testing on W11 with:  audacity-win-3.6.0-alpha-20240517+d40c0e6-x64

Like @dozzzzer I get a break when the dilaog is resized until the LMB is released.

But unlike @dozzzzer  my break is blank withou the joing line that he has:

![image](https://github.com/audacity/audacity/assets/50205984/8a5454c7-f2db-4aed-a34d-ca5e6b3e525d)
 @petersampsonaudacity yes. The fact that you don't see a line is the improvement brought by 8c2b772cd3aa0e554c9186e2de15a0a6deca1227. I don't think I can possibly get the data updates during resizing, as this seems to block the main thread, where the updates otherwise happen. > The fact that you don't see a line is the improvement ...

Yes, I think it's better with the blank rather than the line.

>I don't think I can possibly get the data updates during resizing, as this seems to block the main thread, where the updates otherwise happen.

I'm pretty sure folk can live with that, resizing the dialog is not something most users will be doing a lot of.

 > I beg your pardon: I messed up force-pushing from different machines. [0d0f371](https://github.com/audacity/audacity/pull/6395/commits/0d0f371275f451122b5e4ac09ddd3699793fe331) is the fix commit.

OK, that one works, though it introduces a lot  more distortion than the Nyquist limiter, even with the ""Hard Limit"" algorithm. The distortion is particularly noticeable on the 3rd  harmonic. During playback, when moving one of the following: **Threshold**, **Attack** or **Release** in the Compressor effect, it produces abrupt volume changes. The Limiter effect doesn't have such a problem anymore. Check this out:

https://github.com/audacity/audacity/assets/70063970/118973d7-8abc-4e31-aea7-148878d59dcd

I think this is pretty serious, so I'd like this to be fixed within this PR. However, given the circumstances, I'd want to know what you guys think about it and whether we would want to address this in the next patch release @Tantacrul @LWinterberg 

Also, @saintmatthieu I understand this isn't going to be an easy fix, is it? Oof. Yeah that's pretty bad. Thanks @dozzzzer, it is a bug you caught indeed.
Note that each time you change the release time, the graph shows the actual attenuation goes back to zero before it converges back towards the target, in a time lapse that I suspect equals your look-ahead (120ms).
The mistake I did was to reset the look-ahead state when any parameter gets changed. Fix was easy and is pushed. I hope it does the job. @saintmatthieu I've discovered that the graph isn't being painted as long as the ""Presets & Settings"" menu is opened. And then when the menu is closed, a straight line is painted all over the gap. Could you fix that?

<img width=""450"" alt=""image"" src=""https://github.com/audacity/audacity/assets/70063970/41f8558d-105a-4fff-b591-8ff0491c3738"">
",,"Resolves: #6305, #6366

This PR wraps [Daniel Rudrich's SimpleCompressor](https://github.com/DanielRudrich/SimpleCompressor) in two new real-time capable built-in effects, namely ""Real-time Compressor"" and ""Real-time Limiter"".

The limiter is the same as the compressor but with a reduced set of parameters, ratio and attack time being hard-coded to infinity and 0ms.

The legacy, offline compressor files were renamed, but for now stays found in the same place in the menu (`Volume and Compression > Compressor` and `Volume and Compression > Limiter`). Removal from default list is planned in #6319. At that stage the new versions should also find their final place in the menu.

UI still misses the transfer function, which may be added to this PR or as follow-up.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Changing parameters in real time works
- [x] Latency compensation works (use look-ahead for this to be non-trivial)
- [x] Effect preview works
Channel routing tests:
- [x] Mono track is processed properly
- [x] Stereo track is processed properly (use a clip with contrasting left/right content)
- [x] Compression history only appears when used as real-time effect
- [x] Adding an instance on the real-time effect stack and rendering the track yields output that's bit-exact with applying the effect as destructive effect.","May be `lib-src` is better place for this library? `std::move` is redundant here, better pass `settings` parameter by reference `mSettings` is not initialized at this point. While in that particular case nothing bad will happen because `CompressorSettings` is trivially constructible, I'd still suggested to move initialization into constructor's body. I don't understand why should `LimiterSettings` inherit `CompressorSettings`. I really do not see any benefits from doing so, but I see downsides in many `if(...) else { ... }` and typechecks. I'd suggested to eliminate `LimiterSettings` type, but instead introduce:
```cpp
static constexpr DefaultCompressorSettings = CompressorSettings {...};
static constexpr DefaultLimiterSettings = CompressorSettings {...};
```  I've been considering, yes, but I'll probably be modifying the code in some follow-up work. Is that a good reason? Well spot, thanks. I'm not sure that this would work - not that I wouldn't like it to!
I think it's because of this guy: 
![image](https://github.com/audacity/audacity/assets/22740106/6a686b28-d2a8-403b-b79d-950a8b6ac487)
The `EffectSettingsAccess` class initially creates a default-constructed struct. Creating a new type is the only way I found of circumventing that. Is it? The given `settings` object is originally a right value. If I passed by reference in the end there'd be a call to the copy ctor, wouldn't there? Not the case with POD-types I guess. It will simply create an extra copy. Hm, didn't think of it. `EffectWithSettings<>::MakeSettings` is virtual and can be overriden, will that help? Up to you. I think it's not a big deal if you modify code added to `lib-src`, I recall there are already such cases `instance` will outlive editor, so that should be safe Is it possibly depend on ring buffer size (which is usually 0.25ms)? `wxPoint2DDouble` makes graph move smoother? I guess it will be better to always call `RealtimeProcess`, but instead effects could implement `bypass` mode, so that effects could accumulate samples if it's required for processing. For VST's that should be done trivially.  WDYT? `CompressorInstance` could remember it's state after init/suspend/resume/finalize, `OnTimer` then could check that state. I have no doubt that observers will do the thing, I'm just a bit sceptical about effect instance being a publisher. And if it didn't, would there be harm in a dangling subscription ? The size of the low-latency playback thread buffer you mean? Yes. No, it's more for anti-aliasing. Will comment. We'd then have to review all implementations and make sure none of the actually does the processing when bypassed. So I think this is safer. The sample rate may change between playback states, and all this time the panel may stay open, so the sample rate update is a must.
I tried other things before, and the observer-publisher pattern seemed like the simplest in the end (although there is no fundamental difference between injecting a callback lambda, I think). No, it stores pointer in `weak_ptr`, should be safe anyway"
6463,2024-05-21T14:16:12Z,2024-05-27T10:16:47Z,Gootector,1,0,1,20,1,1,1,[],505193.0,0,505202.0,0,0,0,0,9197704.946761,,0,1,0,False,['Gootector'],Thank you!,,"Update Polish Translation (3.6.0)
Fixes.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6481,2024-05-23T15:25:59Z,2024-05-27T11:00:09Z,vsverchinsky,1,0,1,49,2,1,1,[],72489.0,0,329660.0,0,0,0,0,9196260.133354,,0,1,0,False,['LWinterberg'],"![image](https://github.com/audacity/audacity/assets/87814144/8c2548b3-1d8b-43ee-88d3-039401312d3a)
hm, compiling this myself fails to draw the new image.

Edit: also doesn't work when using the build from CI",,"Resolves: #6460

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6490,2024-05-24T14:15:04Z,2024-05-24T16:14:14Z,LWinterberg,0,0,1,4,1,1,1,[],,0,10660.0,0,0,0,0,9433117.592337,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6482
",
6359,2024-04-29T07:41:33Z,2024-05-27T09:00:31Z,vsverchinsky,16,30,4,2599,30,4,0,[],2367.0,2,2424026.0,0,0,0,0,9203364.355505,,0,4,0,False,"['chinakov', 'saintmatthieu', 'dozzzzer', 'DavidBailes', 'LWinterberg', 'vsverchinsky', 'Paul-Licameli']","> No micro fades

As in, it doesn't honor the micro-fades preference?  @vsverchinsky when playing a mono clip, only the left channel is playing audio:

<img width=""500"" alt=""image"" src=""https://github.com/audacity/audacity/assets/70063970/0916ce8c-5cb3-4d0b-9142-cbb579838084"">
 I have completed a review of changes in AudioIO.cpp.

If my contribution of per track meters is also wanted, there is a lot of needed work to make these compatible.

I may volunteer my own very different rewrite of AudioIO.cpp to support a master channel in the right way.

I understand that:
- The sequence of transformations on individual tracks includes time warping (for time track), muting (of individual tracks), effects (stacked on single tracks), panning, in that order.
- Then you mix tracks and apply the master stack, on the PRODUCER side of the RingBuffer.  (As for individual stacks.  We must avoid who knows what computations in opaque code, on the low-latency consumer side.)
- Micro-fading is still applied on the consumer side.
- There are only one or two RingBuffers corresponding to the device output channels.

The old version, without a master stack, differed in these ways:
- There was a RingBuffer for each WaveChannel.
- Applying mute and pan, and mixing of the RingBuffer outputs, was done on the consumer side.

Questions might arise about subtle differences of results, moving the muting before the effect processing.  (Is it better with your change?  Have you tried muting a track with a reverb, during play -- which before, would just mute it at once, but after, might instead produce the decaying tail of what was unmuted?)

Also, whether pan should apply before a per-track effect or after:  It might make a difference for certain effects like reverbs that are not simple LTIs but might work in terms of mid and side channels.  (@saintmatthieu, opinion?)

More later...
 More:

The existing ring buffers should not be removed.  Ring buffers for the master mix should be added.  The consumer thread should take equal samples out of all of them.  Only the samples from the master mix are stored in the output buffer of the audio io callback.

This allows future development to send the buffers of pre-mixed per-track data inter-thread, back to the master thread for drawing.

 See `SendVuInputMeterData` and `SendVuOutputMeterData` which now do such inter-thread communication:  but I would need to send other buffers too.

 My thinking is this:  the consumer thread needs to have access to intermediate states of calculation of the mix samples, corresponding in time to the ultimate output.  Those intermediates should be sent to other code that performs graphical display, keeping as closely synchronized as possible with the real-time playback.  That synchronization will not be perfect, given the reality of frame refresh rates.

Still, the latency of the RingBuffer itself should be accounted for in that drawing update.  Sending the per-track information to the main thread more directly from the producer thread would make less perfect synchronization of the display.

Therefore, more data should be travelling through ring buffers from the high-throughput but variable-latency producer thread, to the more regularly updating consumer thread.
 @Paul-Licameli good point about reverb.
I confirm that muting a track may not instantly mute the sound but any effect with a tail will continue ringing.
It may sound better but I don't think this is the wanted behaviour: muting is muting. What if the effect is a long echo ?
@LWinterberg ? About panning before or after, yes, if the effect is non LTI, this would make a difference. If there is one place for panning and gain, I think it should be where it is a the moment, after the effect stack. I guess other DAWs do it that way, too (or may have also a ""pre-gain""), and if a non LTI effect such as a compressor comes in, it will come with its own pre-processing gain parameter.
A mid/side encoding/decoding operation is a linear operation, though, so in that particular case it should not make a difference. I disapprove.

please wait to see my alternative that will be compatible with oerctrack meters.

expext it today.
 Approving for now. My purpose is not to override @Paul-Licameli's disapproval, because maybe his alternative makes this very complex logic easier ? I'll leave up to @vsverchinsky to decide but I don't want to block QA anymore. Let it merge then:  but my PR will begin with reversion of all the changes in AudioIO.cpp (not of other UI changes) and then a more careful stepwise rewrite.

QA will likely need to re-test everything involving sound quality, but not the UI changes.
 Found issues:
1. When a User adds [MT-A Plugin by Mercurial](https://mercuriall.com/cms/details_freestuff) to the Master Effects, and uses the built-in bypass feature, the audio played back is panned 100% to left, instead of stereo playback. 
2. When a User adds Kilohearts Distortion plugin to the Master Effects, and playbacks some audio, full scale noise can be heard for a second after playback has been initialized.
3. If a User has added any Master Effects, and enabled them, the effects are not applied to files on file export (I am not sure what to expect here, should Master Effects render when they are enabled?)  >  (I am not sure what to expect here, should Master Effects render when they are enabled?)

Yes! > Let it merge then: but my PR will begin with reversion of all the changes in AudioIO.cpp (not of other UI changes) and then a more careful stepwise rewrite.
> 
> QA will likely need to re-test everything involving sound quality, but not the UI changes.

My changes are more complicated than expected.

However, I might be fixing long standing problems with effect latencies.  Search for issues with “latency” Looking into the export/render problem. @vsverchinsky .  Serious accessibility issue, logged here: https://github.com/audacity/audacity/issues/6456 @vsverchinsky . Another accessibility issue, logged here: https://github.com/audacity/audacity/issues/6457 Completed review of @saintmatthieu commits :+1:Haven't finished yet the review, but stumbled on a potential crash. Finished reviewing the first commit (the audio part) ; nothing major besides that crash, but hopefully this is an easy fix.
Please remove the dead code ; I don't see why it should be kept, and it's noisy and sometimes confusing. Not requesting changes because I'm not certain of my analysis, but I think there is another bug, already present in the first commit but that I missed before. https://github.com/audacity/audacity/pull/6359#discussion_r1596816243 Following up on https://github.com/audacity/audacity/pull/6359#discussion_r1600928970:
Vitaly and I had a conversation and he helped me understand the bigger picture. This seems like a good change to me.","Haven't finished yet the review, but stumbled on a potential crash. Finished reviewing the first commit (the audio part) ; nothing major besides that crash, but hopefully this is an easy fix.
Please remove the dead code ; I don't see why it should be kept, and it's noisy and sometimes confusing. Not requesting changes because I'm not certain of my analysis, but I think there is another bug, already present in the first commit but that I missed before. https://github.com/audacity/audacity/pull/6359#discussion_r1596816243 Following up on https://github.com/audacity/audacity/pull/6359#discussion_r1600928970:
Vitaly and I had a conversation and he helped me understand the bigger picture. This seems like a good change to me.","Resolves: #6346

Known issues:
 - UI: Master effects section does not fit automatically to the contents
 - No micro fades applied to solo/gain change
 - Latency increased for track controls in real-time (delay between the moment you press TC button and the moment you hear changes is audiable)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Several projects can be open at once, each with master channel effects, and behavior is as expected.
- [x] Real-time effects can be added and removed during playback - works for both track and master channel.
- [x] Real-time effect UI indicates track name or ""Master"", depending.
- [x] Playback of MIDI file in otherwise empty project works (i.e., MIDI messages are sent, and only silence is played back).
- [x] Mute / Solo during playback still works (there may be a click audible but that shouldn't be a regression)
- [x] Playback of several tracks, some with effects with latency and others without, within a loop, yield expected result.
- [x] Master track effects are applied when exporting but not rendering (in place or to new track) or stereo-to-mono
- [x] Export does delay compensation
- [x] Export works for files of 10 seconds or more
- [x] Master effects are persistent across closing/re-opening a project
- [x] Master effect stacks in several projects open at once do not interfere with each other (e.g. Reverb in project A isn't applied to tracks in project B).
- [x] Backward compatibility: a project with master effects can be opened in previous Audacity version, only without the master effects.
- [x] Scrubbing","I don't know if this comment is relevant only to the following two out-commented lines or to what follows, too. Why keep the dead code? Looks like even the pointer should be `const`, i.e., `static const ChannelGroup* const MasterGroup;`
Also, I'd prefer the initialization to take place here as well for clarity, rather than in the source file. trailing spaces Why not just removing it? `nullptr` aka `MasterGroup` ? If so I'd prefer `MasterGroup` over `nullptr`, in case one looks for all places where it's used. Why ? Isn't this used by `AllocateChannelsToProcessors` to ""plug"" an effect's output channels to the number of playback channels. Why should this change with the master channel? I think correct English would be `MakeTrackEffectPane` (even if there's more than one effect). This crashes when playing a MIDI file on an empty project, because `mPlaybackSequences` and, consequently, `mProcessingBuffers`, are then empty. Maybe a solution: the size of `mMasterBuffers` equals the number of playback channels, maybe it could be used instead.
Also, AFAICS these buffers always have the same size, so a simple `mMasterBuffers[0].size()` would be more expressive and sufficient. Or `mPlaybackBuffers`. Noise trailing spaces I don't see any side effect if `pScope == nullptr`, so shouldn't the `if (pScope)` be on this line? The comment isn't specifically about master channel. 
When we allocate two mono effects to one stereo track there is at least one problem with UI : you can't see the output of the second channel. 
I think configuring effects to process samples in native track format and rate could have benefit of reducing CPU load in case if playback sample rate is higher compared to playback rate. But that may be conceptually wrong.  Regarding the CPU, I don't know, it looks like there is no negotiation at the moment: the framework dictates the sampling rate to the effect instances, which I guess is much simpler. Also, I think resampling is inevitable, so I'm not sure we want to try and minimize it.
My point is that this TODO should probably be tempered with some doubt, e.g., ""consider initializing (...) because (...)"" "" or for the master when group is null"" Comment ""mPlaybackBuffers correspond many-to-one with mPlaybackSequences"" above this line is no longer correct
 I would add a comment that this `resize` is expected not to allocate memory in the worker thread, because sufficient size should have been reserved in `AllocateBuffers`.  Perhaps, test capacity before and after and `assert` no change.
 I don't think the mixer can be properly eliminated in the case that it does resampling of a track whose rate does not match the device output rate, or there is a time track.  There will be some state in the resampler dependent on previous input.

However, note that the mixer stands as a producer in relation to this function which is its consumer.  Perhaps, if it really matters, another thread could mix in advance.

But all that effort at overlapping computation may be unnecessary because this thread really spends most of its time idle anyway, going faster than the ultimate real-time consumption of its output.

Or then again maybe it might matter in future because we want to have ever more capacity for complicated calculations like more effects, more stretching, more pitch shifting.

Or again, maybe you were thinking of power consumption, not performance.
 I notice that as part of this PR you have moved the logic to silence tracks (which might be driven by unpredictable presses of the mute buttons by the user) from the low-latency thread to this high-throughput thread.

Was that for simplification of the former, so that it does less work?  Or some other reason?

Does this comment mean you have not yet restored the microfading feature?  (I have not yet read enough to answer that for myself)

I think I like this change because as I recollect, the microfading had a dependency on the buffer size given to `audacityAudioCallback` which can depend on operating system or larency settings.  That should not be:  the duration of the fade in or out should be independent of that.


 I don't know what earlier check is meant here. Could it be that this comment is also outdated? A little bit higher, line 2712 on this commit, is the line `float *outputFloats = outputBuffer;`, which only seems to be an alias to the same thing, maybe a remnant of older code. Would you remove it if you get the chance? There might be a mini bug here: if adding a real-time effect during playback increased latency such that `samplesAvailable` becomes 0, what would be played for that frame would be the samples of the previous `mPlayoutBuffers`, possibly leading to a repeated playout of the last few ms.
Solution might be to return `false`, such that the `AudioThread` doesn't read the content of `mPlayoutBuffers` ?
It would be worse if a real-time effect had variable latency, but I don't think there's a use case for that. That would apply to the next `if(samplesAvailable == 0)` too. I have doubts about the correctness of the handling of latency for the master channel.
The `discardable` value returned by a real-time effect is the number of leading samples that can be discarded.
For the track effects, this is indeed what is done:
```cpp
         for(int i = 0; i < seq->NChannels(); ++i)
         {
            auto& buffer = mProcessingBuffers[bufferIndex + i];
            buffer.erase(buffer.begin(), buffer.begin() + discardable);
         }
```
For the master track, however, no leading samples are discarded, and then
```cpp
      unsigned bufferIndex = 0;
      for(auto& buffer : mMasterBuffers)
      {
         mPlaybackBuffers[bufferIndex++]->Put(
            reinterpret_cast<constSamplePtr>(buffer.data()),
            floatSample,
            samplesAvailable,
            0
         );
      }
```
which means trailing samples are discarded instead. It was already that way in the previous commit but I missed it.

If I'm correct, the consequence of this mistake would be that, if the master channel has an effect that adds delay, an artefact due to zeroed audio would be heard at the beginning of playback. I also don't see the necessity of `masterOffsets`. I don't think there can be left-overs from one `ProcessPlaybackSlices` to the next, as it would mean this method would produce more audio samples than asked for, and I don't see it to be the case. Unused Comment refers to variables that no longer exist delete ""of"""
6488,2024-05-24T11:27:28Z,2024-05-24T12:12:23Z,vsverchinsky,0,0,1,8,1,1,1,[],,0,14036.0,0,0,0,0,9439801.001082,,0,1,0,False,[],oh yes please,oh yes please,"`apt install` fails to install gcc11

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6486,2024-05-24T09:37:40Z,2024-05-24T13:16:57Z,Eism,0,0,3,2582,55,1,1,[],,0,13161.0,0,0,0,0,9447266.918619,,0,3,0,False,[],,,,
6472,2024-05-22T11:57:40Z,2024-05-24T13:18:59Z,grliszas14,0,30,1,488,9,2,0,[],,0,177690.0,0,0,0,0,9447138.053847,,0,1,0,False,[],,,,"It may be better to pass the entire context as a property, this is done in other places, this can be useful when more properties from it are needed (for example, a selected loop)  no objections, but for information, the theme can be used in the cpp directly, like this
```
Inject<ui::IUiConfiguration> uiconfiguration;

...

uiconfiguration()->currentTheme()
```  At the moment, the reasons why we need to have a base class with virtual methods and an inheritor are not clear. I believe this is not necessary. In AU4 we don't use singletons I think it’s possible in one line... (in AU3, in my opinion, the code width is too small, I think this is a legacy of many years ago, when there were small monitors with low resolution) It's best to avoid in-out arguments unless clearly necessary.
For example, here I think it’s better to do this:
```
TickInfo TimeFormat::tickInfo(double zoom) const 
{
   ...
}
```
 missing return?  better 
```
QString TimeFormat::label(const TickInfo& info, TickType tickType) const
``` In AU4 we use `camelCase` for method names And I think these methods can be made static for convenience see https://github.com/musescore/MuseScore/wiki/CodeGuidelines  not necessary for us  here the painter cannot be null, there is no mandatory check Please do not use auto unless necessary (for example, if the type is too complex) There’s no need to call saves and restore here. I think here it’s better to explicitly set the pen for the painter. 
This code essentially does nothing, it modifies a local variable that is not passed to the painter. there are a lot of objects being passed by non-constant reference, are they all changed by this method? pen (color) does not change, so there is no need to set it in the loop pen (color) does not change, so there is no need to set it in the loop In AU4 we use `camelCase` for method names not need  It’s better to use a structure with named fields, it’s much more convenient and clearer than `std::get<0>` Please always initialize with default values, like this
```

struct TickInfo {
    double major = 0.0; // distance between major ticks [s]
...
``` there is no need to explicitly call initialization here in AU4 we prefer to use `=` for initialization, and only use `{}` where necessary
```
double m_zoom = 0.0;
``` It makes sense if you know that there can be different types of rulers in Audacity. I implemented timeline but you can also have ""Beats and measures"" ruler - which needs to have the same methods implemented. I can remove it right now if you want but we're gonna need it later anyway Isn't it a good habit to use {} initialization? I mean it has advantage of additional check - it saves you from conversions that lose information like:
int b{8.1} -> will produce compilation error
int b = 8.1 -> will compile, but b is 8 instead of 8.1 
I know it's rather rare case but :P  Yes, I assumed that there might be something like that, but then the architecture must be appropriate. 
that is, then it turns out that there should be something like this:
* Single implementation of timeline for different things
* Must be type of timeline 
* There must be a factory that created a formatter for a given type.

(These are all assumptions, I didn't look at how it was done in AU3 :) )

Yes, everything may be like this... but it may not be like that :) Therefore, I suggest not complicating things until it is clear why it is needed. Because in reality it may be a little different. There may be some benefits to using `{}`, but the big value is readability, and easy to read code means consistent code. It's common practice in the muse framework to use `=`, and there's no good reason to change hundreds of thousands of lines of code to do otherwise :)

More philosophical thoughts, if we use `{}` to initialize class members, then it is consistent to use `{}`  to initialize local variables, but in practice this is not the case, in one place it’s one thing, in another place it’s another :)

Another point, I often see `double v {}`, but this only raises questions about what the default value is, and how much time is spent on thinking depends on the developer’s experience :) In the `double v = 0.0;` option, for developers of any experience the same minimum time of awareness.

i.e., pros and cons of both approaches can be found

If it is important for you to use `{}`, for technical reasons, or you are used to it and think that it is more correct, then I do not insist on using `=`. 
I see that AU3 uses `{}`, so it could be a big cognitive problem to switch to `=` for no obvious reason (other than code consistency)  It's not that important for me, I'll switch to `=`, that's not a problem :) It's just the first time I see a different opinion about that, but it's always good to get a different point of view - that's why I asked. Good point with `double v{}`, I didn't think about that"
6485,2024-05-24T08:13:06Z,2024-05-24T08:38:27Z,igorkorsukov,0,0,1,74,10,1,1,[],,0,1521.0,0,0,0,0,9463983.59224,,0,1,0,False,[],,,,
6489,2024-05-24T12:29:05Z,2024-05-24T13:09:12Z,igorkorsukov,0,0,1,325,22,1,1,[],,0,2408.0,0,0,0,0,9447738.28117,,0,1,0,False,[],,,,
6473,2024-05-22T14:03:35Z,2024-05-22T21:13:04Z,mlocati,0,0,1,1897,1,1,1,[],,0,27862.0,0,0,0,0,9589416.806696,,0,1,0,False,[],,,"- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6464,2024-05-21T18:59:47Z,2024-05-22T09:09:36Z,LWinterberg,0,0,1,2,1,1,1,[],,0,50993.0,0,0,0,0,9634913.809254,,0,1,0,False,[],,,"This reverts commit c4d7f08da256089c1f9b8d86eb5575b4e0d638b0.

@dozzzzer ",
6455,2024-05-20T07:31:41Z,2024-05-21T10:38:54Z,Eism,0,0,4,647,14,1,1,[],,0,97638.0,0,0,0,0,9715957.453304,,0,4,0,False,[],,,,
6465,2024-05-21T19:16:24Z,2024-05-22T09:08:59Z,LWinterberg,0,0,1,7,1,1,1,[],,0,49961.0,0,0,0,0,9634951.456667,,0,1,0,False,[],,,"This reverts commit 15e23de18d9144011596a091a1f03cdf703365f4.

Resolves: https://github.com/audacity/audacity/issues/6466

",
6438,2024-05-15T08:22:06Z,2024-05-21T08:26:40Z,LWinterberg,0,0,2,47,2,1,1,[],,0,518679.0,0,0,0,0,9723893.859564,,1,2,1,False,[],,,Resolves: #6427 by bumping the font size down by 1 and removing the track status (which still can be viewed from the track menu anyway),
6462,2024-05-21T07:48:00Z,2024-05-21T08:14:33Z,igorkorsukov,0,0,1,3,2,1,1,[],,0,1593.0,0,0,0,0,9724625.869842,,0,1,0,False,[],,,,
6452,2024-05-18T13:50:10Z,2024-05-20T09:38:11Z,Patriccollu,1,0,1,96,1,1,1,[],157691.0,0,180063.0,0,0,0,0,9783628.484129,,0,1,0,False,['vsverchinsky'],Thank you!,,"Hello,

This is an update of **Corsican** localization for Audacity 3.6.0.

Best regards,
Patriccollu.",
6384,2024-05-03T20:41:55Z,2024-05-20T11:00:34Z,brad0,5,0,1,78,3,1,1,[],600081.0,0,1454391.0,0,0,0,0,9780595.509765,,0,1,0,False,"['brad0', 'vsverchinsky', 'igorkorsukov']","Ping. Maybe better to add something like this:
Stk.h
```
#ifdef swap16
#undef swap16
#endif
``` Existing code-style suggests using lower camel-case naming convention, name like `byteSwap*` or similar will fit better @vsverchinsky Ping. @brad0 Thank you!",,"Resolves: https://github.com/audacity/audacity/issues/6357

Rename swap functions to not conflict with OpenBSD's swap macros

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6459,2024-05-20T09:22:42Z,2024-05-20T10:31:34Z,Gootector,1,0,1,155,1,1,1,[],4138.0,0,4138.0,0,0,0,0,9802804.300773,,0,1,0,False,['vsverchinsky'],Thank you!,,"Update German Translation (3.6.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6437,2024-05-14T21:06:18Z,2024-05-20T13:06:17Z,vsverchinsky,5,9,1,625,8,3,3,[],224509.0,0,489631.0,0,0,0,0,9793495.305784,,0,1,0,False,"['LWinterberg', 'vsverchinsky']","Oh also, while we wait for the strings: similar to #6446 we need to hide the musehub part of this on Linux because it's not available there. 

Might look something like this:

![image](https://github.com/audacity/audacity/assets/87814144/ed489ec6-d431-4c8d-9d94-47fe6f395069)

 Strings approved @LWinterberg can you please check how it looks now for you? windows @ 100%
![image](https://github.com/audacity/audacity/assets/87814144/cfefebc9-ae9f-4e5f-8dcb-220d86392f54)

@ 150%

![image](https://github.com/audacity/audacity/assets/87814144/9ae7233b-30df-4068-a62a-f7e8d826a0b9)

@ 225%
![image](https://github.com/audacity/audacity/assets/87814144/e6ca76a7-2d0b-4cc6-8af6-6712670defe3)
 Squashed and rebasedI don't see anything wrong code safety wise, but am less able to judge if visually and behaviorally this meets the requirements, so maybe let @LWinterberg double-check on that before moving on. still awaiting final approval for the strings from martin","I don't see anything wrong code safety wise, but am less able to judge if visually and behaviorally this meets the requirements, so maybe let @LWinterberg double-check on that before moving on. still awaiting final approval for the strings from martin","Resolves: #6365 

Needs correct links and images.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think the entire SplashDialog can get deleted. We now always show the new WhatsNewDialog. HAS_WHATS_NEW also doesn't need to be a flag anymore.

The SplashDialog does have functions to show you some paragraphs about alpha and beta versions - I don't think we need those anymore, as long as the WhatsNewDialog a) is enabled in alpha/beta builds and b) says it is an alpha/beta in the dialog.  When compiling out of sources you need to explicitly define `-DSHOW_WHATS_NEW_SECTION=Yes` cmake variable to enable this new dialog. CI is configured to define that variable for us, but it's not the case when compiling out of sources. Linux distros maintainers likely compile Audacity with old-style `SplashDialog` without images and links to YouTube. Right. Let's set SHOW_WHATS_NEW_SECTION=Yes in the source by default then, and let maintainers explicitly opt out of it if they don't want it. And if they do opt out, let's just not show any startup screen. Minor: since `WhatsNewURL` is only used here, it could be `constexpr`ed within this method. MusehubURL and PluginsURL are identical. rename instances of PluginsURL to MuseHubURL and set MuseHubURL ""https://www.musehub.com"" this is a little mighty I found. Unless there's rendering differences between platforms, I found that a window height of 480 worked well with a 20px border.
 
before: 
![image](https://github.com/audacity/audacity/assets/87814144/ee82707d-abd7-4b25-979f-36393aaca103)

after: 
![image](https://github.com/audacity/audacity/assets/87814144/b6cd65e0-7f85-4bfa-9e7d-b87a46d25442)
 (this border I set to 20) This is how it looks on my machine with 40 px border :/
![изображение](https://github.com/audacity/audacity/assets/20165230/b558bf4b-e85c-42ae-9928-03b2151837ab)
 Ah, this is because of dpi scaling ..."
6454,2024-05-20T06:44:21Z,2024-05-20T10:30:54Z,Gootector,1,0,1,189,1,1,1,[],13609.0,0,13610.0,0,0,0,0,9802835.722781,,0,1,0,False,['vsverchinsky'],Thank you!,,"Update Polish Translation (3.6.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6386,2024-05-04T06:02:26Z,2024-05-13T11:33:28Z,brad0,1,0,1,4,2,1,1,[],566424.0,0,1197613.0,0,0,0,0,10003747.747693,,0,1,1,False,['brad0'],Ping.,,"```
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-wx-wrappers/AudacityDontAskAgainMessageDialog.cpp:57:14: warning: | has lower precedence than !=; != will be evaluated first [-Wparentheses]
   if (style | wxCENTRE != 0)
             ^~~~~~~~~~~~~~~
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-wx-wrappers/AudacityDontAskAgainMessageDialog.cpp:57:14: note: place parentheses around the '!=' expression to silence this warning
   if (style | wxCENTRE != 0)
             ^
               (            )
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-wx-wrappercd s/AudacityDontAskAgainMessageDialog.cpp:57:14: note: place parentheses around the | expression to evaluate it first
   if (style | wxCENTRE != 0)
             ^
       (               )
1 warning generated.
```

```
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-music-information-retrieval/MusicInformationRetrieval.cpp:64:17: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   else if (bpm = GetBpmFromFilename(in.filename))
            ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-music-information-retrieval/MusicInformationRetrieval.cpp:64:17: note: place parentheses around the assignment to silence this warning
   else if (bpm = GetBpmFromFilename(in.filename))
                ^
            (                                    )
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-music-information-retrieval/MusicInformationRetrieval.cpp:64:17: note: use '==' to turn this assignment into an equality comparison
   else if (bpm = GetBpmFromFilename(in.filename))
                ^
                ==
1 warning generated.
```

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6385,2024-05-04T05:45:32Z,2024-05-13T11:33:52Z,brad0,1,0,1,8,1,1,1,[],567417.0,0,1198610.0,0,0,0,0,10003767.197265,,0,1,1,False,['brad0'],Ping.,,"```
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-basic-ui/BasicUI.cpp:17:5: warning: macro expansion producing 'defined' has undefined behavior [-Wexpansion-to-defined]
#if HAS_XDG_OPEN_HELPER
    ^
/home/ports/pobj/audacity-3.5.1/audacity-Audacity-3.5.1/libraries/lib-basic-ui/BasicUI.cpp:15:30: note: expanded from macro 'HAS_XDG_OPEN_HELPER'
#define HAS_XDG_OPEN_HELPER (defined(__linux__) && !defined __ANDROID__) || defined (__FreeBSD__) || defined (__NetBSD__) || defined(__OpenBSD__)
                             ^
```

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6451,2024-05-17T18:29:33Z,2024-05-17T19:39:59Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,4250.0,0,0,0,0,10029086.517131,,0,1,1,False,[],,,"No QA required

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6445,2024-05-16T15:39:17Z,2024-05-17T14:12:25Z,vsverchinsky,0,0,1,2,1,2,2,[],,0,81201.0,0,0,0,0,10048753.591682,,0,1,0,False,[],,,"Resolves: #6394 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6444,2024-05-16T15:27:24Z,2024-05-17T12:44:54Z,vsverchinsky,0,0,1,5,1,2,2,[],,0,76668.0,0,0,0,0,10053999.848793,,0,1,0,False,[],,,"Resolves: #6433 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6446,2024-05-17T08:33:21Z,2024-05-17T12:28:11Z,saintmatthieu,0,0,4,209,4,2,2,[],,1,14090.0,0,0,0,0,10055023.367965,,0,4,1,False,[],,,"Resolves: #6382

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] Works as specified by the Figma design (see #6382)
",
6439,2024-05-15T08:32:44Z,2024-05-15T19:03:32Z,vsverchinsky,2,0,1,4,1,1,1,[],6733.0,0,40346.0,0,0,0,0,10201604.448262,,1,1,1,False,['dozzzzer'],@vsverchinsky Crash when pressing Cmd (Ctrl) + S or Cmd (Ctrl) + Shift + E Tested,,"Attempt to do so raises an assertion failure

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6440,2024-05-15T09:58:05Z,2024-05-15T11:22:48Z,Eism,0,0,1,4,2,1,1,[],,0,5086.0,0,0,0,0,10231745.686516,,0,1,0,False,[],,,,
6441,2024-05-15T11:53:05Z,2024-05-15T14:07:12Z,igorkorsukov,0,0,4,863,10,1,1,[],,0,8047.0,0,0,0,0,10221885.592629,,0,4,0,False,[],,,,
6412,2024-05-10T07:28:45Z,2024-05-15T07:43:17Z,Eism,0,5,5,1597,39,2,2,[],,0,432887.0,0,0,0,0,10244907.469884,,0,5,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","please move to internal  maybe better name ""iau3playback.h"", ""iau3audiooutput.h"" ? Hmm, is Promise really appropriate here?
Typically, a promise is used in cases where you call some kind of asynchronous action, and you need to get the result of this action - successful, not successful ahh, I get it, this is an asynchronous retrieval of the value... ok.  Actually, the idea is to make the interfaces of au3 classes and similar classes from the framework the same, so that it is easier to replace later"
6435,2024-05-13T13:47:41Z,2024-05-13T14:10:00Z,igorkorsukov,0,0,1,239,11,1,1,[],,0,1340.0,0,0,0,0,10394518.844993,,0,1,0,False,[],,,,
6432,2024-05-13T12:04:34Z,2024-05-13T12:53:10Z,igorkorsukov,0,0,1,17,4,1,1,[],,0,2916.0,0,0,0,0,10399131.57984,,0,1,0,False,[],,,,
6400,2024-05-07T14:23:57Z,2024-05-13T10:03:43Z,vsverchinsky,0,0,2,30,2,1,1,[],,0,502799.0,0,0,0,0,10409286.82201,,0,2,0,False,[],,,"Resolves: #6383

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6391,2024-05-06T08:58:25Z,2024-05-13T10:02:54Z,vsverchinsky,0,0,1,7,1,1,1,[],,0,608681.0,0,0,0,0,10409337.684943,,0,1,0,False,[],,,"Resolves: #6373 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6430,2024-05-13T08:20:13Z,2024-05-13T09:54:41Z,grliszas14,0,0,1,6,2,1,1,[],,0,5673.0,0,0,0,0,10409839.445543,,0,1,0,False,[],,,,
6431,2024-05-13T09:18:47Z,2024-05-13T09:30:57Z,igorkorsukov,0,0,1,14,3,1,1,[],,0,730.0,0,0,0,0,10411268.984441,,0,1,0,False,[],,,,
6429,2024-05-13T08:09:12Z,2024-05-13T08:25:49Z,igorkorsukov,0,0,1,2,1,2,2,[],,0,997.0,0,0,0,0,10415179.175766,,0,1,0,False,[],,,,
6280,2024-04-15T09:01:57Z,2024-05-13T08:25:36Z,saintmatthieu,2,0,3,81,4,2,2,[],2874.0,1,2417019.0,0,0,0,0,10415193.219089,,1,3,1,False,"['LWinterberg', 'saintmatthieu']","> there is one history entry per imported file, even if several were copied and pasted in one go (@LWinterberg shouldn't this be changed?

Yes, consolidating these actions makes sense to me. However, if the files get imported one by one, those actions should not be consolidated. > > there is one history entry per imported file, even if several were copied and pasted in one go (@LWinterberg shouldn't this be changed?
> 
> Yes, consolidating these actions makes sense to me. However, if the files get imported one by one, those actions should not be consolidated.

Leaving it as is since it's beyond the scope of this PR and it turns out to be non trivial.",,"Resolves: #6028

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
Basically, copy-pasting from the clipboard behaves the exact same as drag-dropping. In particular,
- [x] files are sorted alphabetically
- [x] there is one history entry per imported file, even if several were copied and pasted in one go (@LWinterberg shouldn't this be changed?)
- [x] Not effective during playback
- [x] A mixture of file types can be imported, e.g. audio and midi.
- [x] The bottom-most track gets focus and is fully selected.

Besides:
- [x] Copy a track, then copy a wav file, paste: the wav file is pasted. Vice versa. (It is important that this is tested on all Windows, Mac and Linux, as implementation interacts with the OS clipboard).
- [x] If import of one of the files fails, then entire operation is aborted.
",
6415,2024-05-10T11:50:18Z,2024-05-10T12:34:35Z,igorkorsukov,0,0,1,310,8,1,1,[],,0,2657.0,0,0,0,0,10659455.511089,,0,1,0,False,[],,,,
6411,2024-05-09T15:23:11Z,2024-05-09T18:39:08Z,grliszas14,0,0,2,1870,15,1,1,[],,0,11757.0,0,0,0,0,10723983.605817,,0,2,0,False,[],,,,
6409,2024-05-09T13:56:35Z,2024-05-09T14:43:01Z,igorkorsukov,0,0,4,339,12,1,1,[],,0,2786.0,0,0,0,0,10738151.842684,,0,4,0,False,[],,,,
6407,2024-05-09T11:21:48Z,2024-05-09T12:28:53Z,igorkorsukov,0,0,1,956,20,0,0,[],,0,4026.0,0,0,0,0,10746199.78084,,0,1,0,False,[],,,,
6408,2024-05-09T11:58:29Z,2024-05-09T12:28:51Z,igorkorsukov,0,0,2,1585,47,1,1,[],,0,1822.0,0,0,0,0,10746204.160075,,0,2,0,False,[],,,included https://github.com/audacity/audacity/pull/6407  ,
6406,2024-05-09T09:39:57Z,2024-05-09T10:02:15Z,igorkorsukov,0,0,2,327,21,1,1,[],,0,1338.0,0,0,0,0,10755001.902294,,0,2,0,False,[],,,,
6404,2024-05-08T13:43:47Z,2024-05-09T06:16:50Z,igorkorsukov,0,0,5,3734,47,1,1,[],,0,59583.0,0,0,0,0,10768527.404444,,0,5,0,False,[],,,,
6401,2024-05-07T15:23:07Z,2024-05-07T15:44:19Z,grliszas14,0,0,1,16,4,1,1,[],,0,1282.0,0,0,0,0,10907270.535403,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6403,2024-05-08T10:25:35Z,2024-05-08T12:16:22Z,grliszas14,0,0,1,4,2,1,1,[],,0,6647.0,0,0,0,0,10833357.60877,,0,1,0,False,[],,,,
6393,2024-05-06T11:35:07Z,2024-05-07T14:57:37Z,grliszas14,0,0,1,5,2,1,1,[],,0,98563.0,0,0,0,0,10910071.725694,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6399,2024-05-07T14:20:10Z,2024-05-07T14:54:33Z,igorkorsukov,0,0,4,3300,40,1,1,[],,0,2063.0,0,0,0,0,10910268.971842,,0,4,0,False,[],,,Ported from Qt branch ,
6390,2024-05-06T08:23:03Z,2024-05-07T10:34:32Z,grliszas14,0,0,1,136,5,1,1,[],,0,94289.0,0,0,0,0,10925872.08153,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6396,2024-05-07T08:24:07Z,2024-05-07T09:16:22Z,igorkorsukov,0,0,1,12,2,1,1,[],,0,3135.0,0,0,0,0,10930562.439792,,0,1,0,False,[],,,,
6228,2024-04-05T10:41:44Z,2024-05-06T07:18:54Z,vsverchinsky,0,0,1,108,6,2,2,[],,0,2666249.0,0,0,0,0,11023994.07414,,0,1,0,False,[],,,"Resolves: #5581

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6392,2024-05-06T09:42:42Z,2024-05-07T09:13:43Z,grliszas14,0,2,3,377,6,1,1,[],,0,84661.0,0,0,0,0,10930725.288498,,0,3,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",should be `audacity/4.0/learn/started_playlist.json` should be `started_playlist.test.json`
6230,2024-04-05T13:01:39Z,2024-05-03T19:26:08Z,vsverchinsky,0,0,1,4,1,1,1,[],,0,2442283.0,0,0,0,0,11239568.188433,,1,1,0,False,[],,,"Resolves: #4731 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5642,2023-11-17T13:10:32Z,2024-05-03T11:02:39Z,Paul-Licameli,4,2,3,72,14,3,2,"['refactoring', 'dependency breaking', 'libraries & modules']",30.0,1,14515881.0,0,0,0,0,11261438.949795,,1,3,1,True,"['dozzzzer', 'Paul-Licameli']","Please give a quick look, guys.  Like it?  Nominate it for the 3.5 board.
 I showed you what's possible in the modules dependency graph with a little work.

I moved only the minimal necessary files into lib-preference-pages for this.

If more pages might be easily moved into the library, perhaps they should, but then the library will serve miscellaneous purposes, grouping rather unrelated preferences together.
 This PR was approved but forgotten.  I rebased it and fixed conflicts.  Please reconsider.
 TestedProvided that this PR is quite simple I think we should take it",Provided that this PR is quite simple I think we should take it,"Resolves: *(direct link to the issue)*

Two of the import-export modules can break their dependency on the Audacity executable, with only two .cpp files moved from Audacity to a new, ""red"" library, lib-preference-pages.

If these ideas are pursued, that library might turn ""green."" https://github.com/audacity/audacity/discussions/5628

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It is really odd that this code is still here, provided that Audacity links against lame directly for quite a few years. I think that we need to revise ExportMP3 code. That could be separately addressed of course.  What do you think of this PR otherwise?
"
6363,2024-04-29T14:46:14Z,2024-05-02T10:05:51Z,Paul-Licameli,2,0,1,5,1,1,1,['Design Debt'],2586.0,0,262240.0,0,0,0,0,11339739.001323,,0,1,1,False,"['chinakov', 'Paul-Licameli']","I should have said, just right of AudioSetup or of Share Audio, depending on the build configuration.  And also assuming default preferences.
 Tested, thanks! ",,"Resolves: *(direct link to the issue)*

QA:
Test this in builds configured with and without the Audio.com upload

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6299,2024-04-17T13:35:15Z,2024-05-02T10:06:15Z,Paul-Licameli,0,0,2,288,77,1,1,['code quality'],,0,1303250.0,0,0,0,0,11339789.572603,,3,2,1,False,[],,,"Resolves: *(direct link to the issue)*

Make CMakeLists.txt files in src, libraries, and modules conform to these conventions:

1 Each begins with a multiline comment explaining its purpose

2 `set(...)` and not `list( APPEND ... )` is used for the first assignment of any CMake variable
meant to be local to the file; so that in case the variable was nonempty in the parent scope,
this does not contaminate the local scope's copy

QA:
Nothing -- this is likely a straight-to-merge change

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6368,2024-04-30T21:25:33Z,2024-05-02T15:16:15Z,ethan17jh,0,0,1,2,1,1,1,[],,0,150642.0,0,0,0,0,11340980.950064,,0,1,0,False,[],,,"This is the only instance of a button being labeled ""Ok"" in all of GitHub. Every other button is labeled ""OK"".

Resolves: https://github.com/audacity/audacity/issues/3612

In all of Audacity, every single ""OK"" button is labeled exactly that: ""OK"" in all caps. However, there is a single button labeled ""Ok"", which appears when a user links their audio.com account. This pull request remedies this and standardizes the ""OK"" buttons.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior",
6377,2024-05-02T13:21:46Z,2024-05-02T15:08:22Z,igorkorsukov,4,0,252,48784,446,2,2,[],841.0,0,6396.0,0,0,0,0,11341455.584139,,0,252,0,False,"['LWinterberg', 'igorkorsukov']","did you mean to target this to master? not  the qt branch? > did you mean to target this to master? not the qt branch?

To the master. This project has nothing to do with the `qt` branch, everything is different here. From there we will only take some developments and the old project of transfering to Qt will be closed. Right. I'd suggest a new branch then, maybe called `au4`.  > Right. I'd suggest a new branch then, maybe called `au4`.

We decided that a separate branch was not needed, it would not provide any benefits and would only create unnecessary problems and costs.

Working as a master, we have the following advantages:
* If it is necessary to change AU3 for AU4, these changes will be immediately integrated.
* We will immediately see how changes in AU3 affect AU4

We have experience of moving from MuseScore 3 to MuseScore 4, we also moved there without a branch, using a separate directory - it was successful.",,"We (me, @Eism and @grliszas14 ) are Muse employees.
Some time ago we started working on Audacity 4.
The main difference from previous projects to transfer Audacity to Qt is that in this project we are not just transferring the Audacity UI to Qt(Qml), but are starting to use a lot of developments from MuseScore.
To do this, we separate the common part in the Muse Framework, which will be used by both Audacity and MuseScore. This work has just begun; there is still a long way to go.

The main goal is to reuse as much as possible what has already been done in order to be able to quickly implement a new interface and be able to focus on the main functionality.

We also plan to combine development approaches, architecture, project structure, etc. So that the Muse Developers and the community can effectively develop both of our projects.

At this stage, AU4 will be developed as a separate project, a separate application in the `au4` directory.

I believe and hope that all our ideas will be realized and we all will get many benefits from this collaboration :) ",
6372,2024-05-02T10:46:06Z,2024-05-02T10:48:20Z,Gootector,0,0,1,8,1,1,1,[],,0,134.0,0,0,0,0,11357058.348921,,0,1,0,False,[],,,"Unnecessary spaces in the file

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6356,2024-04-27T20:25:04Z,2024-05-01T14:01:01Z,gcarson1,0,0,2,37,1,1,1,[],,0,322557.0,0,0,0,0,11431899.274629,,0,2,0,False,[],,,"Resolves: https://audacity.gitbook.io/dev/getting-started/coding-standards/making-audacity-doxygenable

*(short description of the changes and the motivation to make the changes)*

Reading Audacity coding standards I came across the initiative to add Doxygen supported documentation at the class level. This file was not up to those standards.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6367,2024-04-30T18:36:52Z,2024-05-01T12:32:07Z,Sean-PB,0,0,2,6,2,1,1,[],,0,64515.0,0,0,0,0,11437233.863559,,0,2,0,False,[],,,"Resolves: a typo in CONTRIBUTING.md and added links to BUILDING.md

I fixed a typo and wanted to add links to make it easier for users to get to official download pages of required software (python and cmake).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6351,2024-04-26T14:48:24Z,2024-04-30T12:07:35Z,crsib,0,0,1,105,7,1,1,[],,0,335952.0,0,0,0,0,11525107.198987,,0,1,0,False,[],,,"Resolves: #6348

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6263,2024-04-11T23:48:38Z,2024-05-01T12:30:51Z,DaviFN,0,0,1,29,4,1,1,[],,0,1687333.0,0,0,0,0,11437312.808097,,0,1,0,False,[],,,"Resolves: #3825

*Tweaked MacrosWindow::OnListSelected based on MacroCommandDialog::OnItemSelected to achieve expected behavior*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6023,2024-02-22T12:54:07Z,2024-04-30T12:06:41Z,ZTFtrue,1,0,1,50,1,1,1,['performance'],5870712.0,0,5872354.0,0,0,0,0,11525166.088375,,1,1,0,False,['chinakov'],"Tested, thanks!",,"…e loop.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6354,2024-04-27T10:26:43Z,2024-04-29T12:12:05Z,brad0,2,0,1,10,1,1,1,[],12555.0,0,186433.0,0,0,0,0,11603931.682525,,0,1,1,False,"['shoogle', 'brad0']","Does OpenBSD use AppImage? If not, you could disable compilation of this entire file in [src/CMakeLists.txt](https://github.com/audacity/audacity/blob/ae0ab087588d5c54c1231ecdf42f4eead5aa11be/src/CMakeLists.txt#L1250). > Does OpenBSD use AppImage? If not, you could disable compilation of this entire file in [src/CMakeLists.txt](https://github.com/audacity/audacity/blob/ae0ab087588d5c54c1231ecdf42f4eead5aa11be/src/CMakeLists.txt#L1250).

@shoogle Ah, I was wondering what this bit of code was about. AppImage is for Linux and does not apply to *BSD.",,"Only build findlib binary on Linux. AppImage is for Linux. This
came about as OpenBSD does not have dlinfo().

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6345,2024-04-25T13:53:29Z,2024-04-29T12:43:14Z,Paul-Licameli,0,1,1,11,1,2,2,['bug'],,1,343605.0,0,0,0,0,11607156.297052,,0,1,0,False,[],"I would prefer to see `if` written differently, I don't have to strong opinion in this case.","I would prefer to see `if` written differently, I don't have to strong opinion in this case.","... Solution is to delay the scrolling until after TrackListEvent subscriptions fire and update the cumulative ChannelView heights.

Resolves: #6340

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","if (auto project = pProject.lock())
   ..."
6353,2024-04-27T08:06:21Z,2024-04-29T12:10:21Z,brad0,0,0,1,5,2,1,1,[],,0,194832.0,0,0,0,0,11603958.049356,,0,1,1,False,[],,,"A few more build fixes from our tree.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6254,2024-04-10T16:14:39Z,2024-04-29T12:06:56Z,LWinterberg,4,1,1,8,1,2,2,[],5849.0,0,1626765.0,0,0,0,0,11611530.491524,,0,1,0,False,"['LWinterberg', 'namazso']","oh wow, apparently I can't use `int64_t` because `long` is defined differently on Linux compared to macOS and Windows, and wxString::toLong gets confused on one platform or the other. I guess this means then that you'll be able to put in a larger number on Linux compared to the other platforms then in case you need to have an offset greater than 8 petabytes  ¯\\\_(ツ)_/¯ You probably want to just use `long long`, which is 64 bits on both platforms, and there exists a wxWidgets function for it. thanks! ![image](https://github.com/audacity/audacity/assets/8676443/c3c670f7-85ab-4b29-8c87-b2179b7963b9)
Seems like the previous values are filled back incorrectlyI tested the CI artifact for Windows and it works as expected",I tested the CI artifact for Windows and it works as expected,"Resolves: #6253 probably. Can't test because I need to reconfigure my local build environment. 


","`long` on Windows is 32 bits, so this wouldn't fix the issue"
6277,2024-04-13T13:12:56Z,2024-04-29T12:41:10Z,Paul-Licameli,3,0,1,6,1,2,2,[],157968.0,0,1381789.0,0,0,0,0,11608209.590813,,0,1,0,False,"['crsib', 'LWinterberg', 'Paul-Licameli']","Just to verify: This is for master/3.6 and not 3.5, correct? This is for 3.6 > Just to verify: This is for master/3.6 and not 3.5, correct?

The error exists now only in mastrr",,"Resolves: #6276

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6350,2024-04-25T19:18:45Z,2024-04-26T10:49:19Z,Paul-Licameli,3,0,1,2,1,2,2,[],46338.0,0,55841.0,0,0,0,0,11875412.831194,,2,1,1,False,"['crsib', 'chinakov', 'dozzzzer']","🫡 ![image](https://github.com/audacity/audacity/assets/139755141/fa87437c-96f4-452b-9d0a-566a5d7aa484)
 ![image](https://github.com/audacity/audacity/assets/2660628/d0bcf7d3-911c-4cbd-871f-979aea85023e)
🥲  😔 ",🥲  😔 ,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6347,2024-04-25T15:00:37Z,2024-04-26T12:59:45Z,SteveDaulton,1,0,1,4,1,1,1,[],63105.0,0,79287.0,0,0,0,0,11867455.850739,,0,1,1,False,['dozzzzer'],Tested,,"Resolves: [*(direct link to the issue)*](https://github.com/audacity/audacity/pull/6165)

*(short description of the changes and the motivation to make the changes)*
Adds the new ""GetInfo: Selection"" to Nyquist's AUD-GET-INFO command, thus making the feature conveniently available to Nyquist code.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6349,2024-04-25T19:05:33Z,2024-04-26T10:48:27Z,Paul-Licameli,0,0,1,5,1,1,1,[],,1,56578.0,0,0,0,0,11875470.249063,,0,1,0,False,[],,,"Resolves: #6226

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6229,2024-04-05T12:30:27Z,2024-04-26T10:20:11Z,LWinterberg,0,0,1,0,1,1,1,[],,1,1806590.0,0,0,0,0,11877165.668515,,0,1,0,False,[],,,"Resolves: #4504 

Before:
![image](https://github.com/audacity/audacity/assets/87814144/ae2a9741-0e2a-46d0-9d4d-e21c1b15e9fb)
After:
![image](https://github.com/audacity/audacity/assets/87814144/c8a8bc62-7705-474d-8550-817c1f3d3717)

",
6165,2024-03-24T01:29:47Z,2024-04-25T10:59:02Z,jonata,3,0,1,21,2,1,1,[],2809559.0,0,2813485.0,0,0,0,0,11946712.405377,,0,1,0,False,"['LWinterberg', 'SteveDaulton']","This does not do what it says it does. An ""Audio Selection"" is two dimensional, having both a temporal range, and a track list. ""GetInfo: Selection"" only returns the temporal range.

Possible solutions:

* Rename the command ""GetInfo: SelectionTimes"" (or similar)
* Extend the returned value to return both the times and a list of tracks.

Also, it does not appear to work with the Nyquist ""get-audio-info"" command, thus requiring Nyquist users to implement their own parsing of strings in the form: `(""\n{ ""Start"":8.70968, ""End"":15.1092 }"" . T)`. > ""GetInfo: Selection"" only returns the temporal range.

And GetInfo: Tracks returns selectedness, so if you need it you can figure it out. I think this implementation is sufficient for syncing Audacity with external tools which likely aren't interested in the internal track selection to begin with.  > which likely aren't interested in the internal track selection to begin with.

That's a very bold assumption.

> Also, it does not appear to work with the Nyquist ""get-audio-info"" command

Fixed by this pull request: https://github.com/audacity/audacity/pull/6347",,"Resolves: #407

Added selection information (Start and End) when user send ""GetInfo: Type=Selection"" to pipe.

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6266,2024-04-12T11:45:37Z,2024-04-25T13:16:34Z,LWinterberg,3,0,2,26,3,1,2,[],613958.0,0,1128661.0,0,0,0,0,11952987.040547,,0,2,0,False,"['LWinterberg', 'grliszas14']","Take a look here:
https://github.com/audacity/audacity/blob/master/src/TrackInfo.cpp#L53-L63
kTrackInfoWidth is bigger -> so allowableWidth is bigger  -> so the loop that reduces the font size is run fewer times. So that the font size remains smaller while keeping larger kTrackInfoWidth you'd need to make allowableWidth independent of the kTrackInfoWidth. Up to you though
 OK, I understand this function now. It looks for ""Stereo, 999999 Hz"" as that probably is the longest text string and if that doesn't fit, it makes the font smaller. That unfortunately, it kinda works around the wrong issue. In 3.5:

![image](https://github.com/audacity/audacity/assets/87814144/a2f490c4-094a-4ffe-ba34-69f9b1213629)
![image](https://github.com/audacity/audacity/assets/87814144/8e8e8498-0e64-490c-81ac-f887374d6ced)

In this build:

![image](https://github.com/audacity/audacity/assets/87814144/72c0b707-9b7e-41ce-a437-f94ffc7c7fca)
![image](https://github.com/audacity/audacity/assets/87814144/e6f563f9-5151-40ca-813f-18012cee2ed3)

I think the text downscaling is both insufficient for what it was trying to do, and also probably unnecessary now. I think I'll remove it.  the text can line break automatically anyway! 
![image](https://github.com/audacity/audacity/assets/87814144/db6b3493-33bc-4c08-8790-dc20046c83fb)
",,"Resolves:  #6265

Still to investigate: The font size got larger in the process somehow. Not sure why. Not sure I dislike it either. 
",
6244,2024-04-09T09:44:51Z,2024-04-25T13:15:36Z,LWinterberg,0,0,10,96,11,1,1,[],,0,1395050.0,0,0,0,0,11953046.580718,,0,10,0,False,[],,,"Resolves: #6243

Another bunch of commits from my themes branch. 

* Most of the removed colors are actually unused, with only commented-out code hinting where they may have been used. 
* Some of them are practically unused, depending on conditions which never arise.
* Foxusbox is not a typo
* SetBackgroundBrushes is technically a function, not a color, but also unused. 

QA: I don't believe there are any implications on any alive code. If anything, check all themes if everything is still in place.",
5818,2023-12-26T14:41:58Z,2024-04-25T12:52:39Z,vsverchinsky,20,30,17,4582,33,2,0,[],4286.0,0,10447841.0,0,0,0,0,11954429.775336,,1,17,0,False,"['crsib', 'vsverchinsky', 'Paul-Licameli']","Have you addressed the issue with zoom levels where min and max have the same sign? > Have you addressed the issue with zoom levels where min and max have the same sign?

I've attempted to fix that but not sure that it was correct:
![изображение](https://github.com/audacity/audacity/assets/20165230/46d8d9e4-d125-4a51-9ce0-92ecc68b777f)
![изображение](https://github.com/audacity/audacity/assets/20165230/14bdb514-6f4b-4ad6-9c86-ac513503c10f)
 Linux build is failing.

Is this only about waveform painting? If so, rename it all as Lin-waveform-paint.

Or maybe lib-waveform-geometry if the library will also handle any hit testing.  The painting and hit testing for anything painted on the screen should be kept together.  Painting maps some thing to pixel x and y coordinates, while hit testing must know the inverse of the same mapping.
 > The painting and hit testing for anything painted on the screen should be kept together

I strongly disagree. These topics are irrelevant most of the time, and definitely irrelevant here. > If so, rename it all as Lin-waveform-paint.

`lib-wave-track-paint` is a green library providing a way to build visuals for wave tracks. Right now, only waveform painting has been migrated to this library. Neither Vitaly nor I ever migrated the ""green"" part of the spectrogram painting. This can be done, however. > Linux build is failing.

Trying to fix that...

> Is this only about waveform painting? If so, rename it all as Lin-waveform-paint.

Right now it has only waveform image generation part. As you mentioned it could provide geomentry data that will be useful for hit testing and in that case `lib-waveform-geometry` could be an option too.

> Or maybe lib-waveform-geometry if the library will also handle any hit testing

It could indeed provide geometry information for hit testing purpose, as hit testing itself usually refers to platform or framework specific code, I think. But there is nothing to hit test right now. This library does not provide any means to draw ""lollipops"" or envelopes that can be manipulated.

 > It could indeed provide geometry information for hit testing purpose, as hit testing itself usually refers to platform or framework specific code, I think.

I strongly disagree. This is a lower-level library, that is only responsible for helping the WaveformView to **paint** given the ZoomInfo, selection, and screen bounds. It is not responsible for interactions and it should be kept that way. > > It could indeed provide geometry information for hit testing purpose, as hit testing itself usually refers to platform or framework specific code, I think.
> 
> I strongly disagree. This is a lower-level library, that is only responsible for helping the WaveformView to **paint** given the ZoomInfo, selection, and screen bounds. It is not responsible for interactions and it should be kept that way.

No, don't make it responsible completely for interactions.  However the association between pixel coordinates and things in the data model ought to be defined in one place.  A mapping of things to pixels required for painting, and its inverse mapping, should be defined together and kept consistent.

So maybe what I want to argue is that lib-waveform-geometry would be separated from a painting library and do only such coordinate transformations.  lib-waveform-painting could depend on it, and hit testing would also depend on it, but neither of those two would depend on the other.

My opinion about spectrogram is that it is a completely different association of things with pixels, at least in the y coordinate, and would have its own separate libraries.

 > No, don't make it responsible completely for interactions. However the association between pixel coordinates and things in the data model ought to be defined in one place

ZoomInfo is still used to achieve this purpose.

> My opinion about spectrogram is that it is a completely different association of things with pixels, at least in the y coordinate, and would have its own separate libraries.

This library provides the way to cache imagery, required to draw WaveTrack. Spectrograms are no different in this aspect. The way how the specific bitmap is generated can be lifted away from the library, resulting in 3 libraries: caching, waveform bitmap generation, and spectrogram image generation.  > > No, don't make it responsible completely for interactions. However the association between pixel coordinates and things in the data model ought to be defined in one place
> 
> ZoomInfo is still used to achieve this purpose.

Yes, the association x-coordinate with time is common to spectrum and waveform views, and is already in lib-screen-geometry which does not even depend  on wxBase.

The two kinds of views define very different meanings for y-coordinates however and would have completely different paint procedures, in the detailed use of that caching and blitting layer.

Really I must go beyond my simple reaction to the pull request title and really review it to see what's really there.  I'm still waking up.
 I would like the review to pause, for now, @Paul-Licameli 

1. It was not agreed yet that we need it for 3.5 or for Audacity 3 at all.
2. Most of the comments are related to disliking names. This brings an enormous cognitive load when reading the comments.
3. Likely the part you are looking at now can be omitted.
4. The next commit is enourmous.  Unless we agree first on some basic ideas I expect the review to span hundreds of comments again. I would like to avoid that. 
5. I don't remember the details of the code, so I can't respond to the comments.

If Martin and Yana would approve moving this PR forward, we will clean it up with Vitaly first and discuss the ideas on the dev call first. > I would like the review to pause, for now, @Paul-Licameli
> 
>     1. It was not agreed yet that we need it for 3.5 or for Audacity 3 at all.
> 
>     2. Most of the comments are related to disliking names. This brings an enormous cognitive load when reading the comments.
> 
>     3. Likely the part you are looking at now can be omitted.
> 
>     4. The next commit is enourmous.  Unless we agree first on some basic ideas I expect the review to span hundreds of comments again. I would like to avoid that.
> 
>     5. I don't remember the details of the code, so I can't respond to the comments.
> 
> 
> If Martin and Yana would approve moving this PR forward, we will clean it up with Vitaly first and discuss the ideas on the dev call first.

All right, I will stop.  But please note:  there is more than just naming to object to.  I think there are real off-by-one errors in the bounding box class.

 >  I think there are real off-by-one errors in the bounding box class.

I agree, there are errors for sure. > > I think there are real off-by-one errors in the bounding box class.
> 
> I agree, there are errors for sure.

I'm NOT reviewing, just noting other thoughts while compiling something else.

There IS a need to distinguish point and vector.  Surely Rectangle stores a point for top left, and BoundingBox for top left and bottom right.

I didn't review Size completely, but it too has some strangeness (like multiplication of two sizes, why?).  Maybe Size should become the vector class and a Rectangle can be defined by a point and a diagonal vector.

But should rectangles be ""oriented"" (with possibly negative area) or just have non-negative area always? -- Then maybe Rectangle should instead always canonicalize itself to have a diagonal with non-negative components, and the corner as the real top-left.
 There is a common terminology in UI toolkits, where Point has some vector-like properties. You can observe similar properties with QPoint and wxPoint. There is absolutely no need to distinguish points and vectors unless the ultimate goal is to teach students about doing dimensions in C++. I don't recall the concept of ""point"" in math though. They are pretty much the synonyms, used interchangeably.

Usually rendering engines call such structures ""vectors"" and UI toolkit ""points"". I think that ""Point"" is used in UI for the last 40 years or so. We can rename it to vector, just to save time on this code review, but I'd rather not. 

I am hard against having both points and vectors. It will create lots of mess in the code for very little and strictly academic (?) reason. We are writing software, not a research paper. It must be fast, readable, and maintainble.

Both vector and points may have component by component division, even if it makes little sense from the mathematical perspective. They are not multiplicative inverses, but from the programming point of view they can be useful. For example , when you need to represent a different scale on different axises. In fact, this operation is implemented in hardware both for CPUs and GPUs.

Defining a rectangle is quite complex topic indeed. That is why there are two different definitions in this library alone. However, the way how rectangle is defined is never about defining the most correct one from the math point of view. It's about convince and performance.

I don't think that we need AABB for the sake of this PR. They were used in code that was further 10x faster than this. That's it, 100x faster than Audacity is now.

However, I think that Point (with vector properties, sorry), Size, and Rect as (Point, Size) could be useful overall. I agree, that there is a better place for them now than lib-graphics. They surely need better unit test coverage. I would love to have adequate Color class too. wxColour is quite heavy and not too useful.

To summarize, I don't like renaming points to vectors, but I don't care much. I will stand hard against adding vectors on top of the points or defining rectangles using diagonals. The standard library distinguishes time points from durations in chrono.  It does not affect the performance of compiled code but it makes distinctions between variables that allow programming errors to be caught at compile time and increases confidence in correctness of code that does compile.

What I suggest is simply analogous to that.
 Affine space is a different mathematical notion from vector space.  One has points with no distinguished origin.  The other describes displacements in an affine space.  https://en.m.wikipedia.org/wiki/Affine_space To be able to describe a point in affine space you need to have a basis. When you have a basis vectors and points are pretty much the synonyms.

I don't see how std::chrono and Points as defined in UI are related. Chrono attaches units to the durations and time_points have implementation defined basis, unknown to the user in principle. Both concerns are critical to chrono. At the same time chrono is very verbose and rarely used in extensive computations.

In graphics, we always have a well defined basis for the screen space. We don't need to attach units to the points (this is not true for typography or for physics, but we are not doing a physics library). The vectors and points are the synonyms in this case. There is absolutely no need to separate between them except making the point (no pun intended). I won't change my opinion. In case the discussion about this topic will take too much time, this PR will be dropped and QPoint (with vector properties!) will be used for the needs of the Qt version of the Audacity.

 You asked my opinion in review and I gave it.  I would design these classes differently.

Points and vectors may have a common representation but they do not have the same algebra.  A static type distinction between them can catch errors at compile time and also make the signatures of functions more informative.

Just as we distinguish different types of Identifier rather than pass naked strings around, or use enumerations — similarly there are number pairs used for different purposes and I would distinguish them.

A point is a position in a geometric space.  A vector is not, but is a displacement from point to point.  Scaling a vector is meaningful.  Scaling a point is not.
 And I have strong reasons to disagree with you.

> they do not have the same algebra

I'm unsure how to read this, but I will stress again: we are not doing academic papers, and we are not implementing an abstract concept.

> Just as we distinguish different types of Identifier 

We don't. There are 2 cases in the code where TaggedIdentifier is used, and URLString is a clearly a bad example of one. It is not used in the code anymore; I have forgotten to remove it. Otherwise, we just use Identifier. It gives no better type-safety over the raw strings. We have exactly one type-safe identifier: NormalizedKeyString. Is it an Identifier at all? I don't know, but that feels a bit wrong.

>  or use enumerations

We rarely use them, preferring Identifiers, which are essentially strings and are not type-safe.

Gosh, we have places where `any` is used. We are constantly dependent on a global state. We have so many places that need attention right now, so why waste time and mental resources on discussing points vs vectors, irrelevant to the use case they are designed for?

> Scaling a point is not.

This statement is wrong when we are talking about GUI of any kind. At least, since the first release of Android :-)

---

I honestly feel that we are in the ""snapping"" PR space again. However, that PR was critical because it was fixing the functionality required for release, which was implemented wrong. This one is not. I have no time, or energy, or will to discuss this topic. ",,"Extracts platform-indepentend parts of a waveform image generation implemented in Dmitry's branch into a new `lib-wave-track-paint`, but it not yet used by-default. Insead one will have to enable it by uncommenting `EXPERIMENTAL_WAVEFORM_PAINT` flag in Experimental.cmake. 
The major difference is that this branch uses `wxDC` to paint the generated waveform image, thus changes in the existing code are minimal and performance benefits are still noticeable.
Before:
![before](https://github.com/audacity/audacity/assets/20165230/67c3a3f8-005a-4e46-b634-dc63bb465e6e)
After:
![изображение](https://github.com/audacity/audacity/assets/20165230/1fb4162d-a28f-43b6-a5dd-77dce4fd6f1d)


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I would make a type distinction between points and vectors.  Then type checking will not allow meaningless operations.

Two vectors can be added or subtracted to make a vector.  A vector can be scaled by a number.

Addition of a point to a point or scaling of a point does not make sense.  Subtracting a point from a point does make sense, but the result is not a point, but a vector.
 Why are the two operations above useful?  They are not usual operations you want with vectors.
 Comment
```
@pre `scale` != 0
```
 So essentially, the points are meaningless; vectors can be used all over the place :-) Again, two questionable, non-member operations Welcome to the world of graphics :-) Probably this operation is not used though This depends on ScaleType That's wrong.  Distance between points is norm of the difference.
 Norm is a function of a vector.
 This one is an unfortunate mistake  I would put Point, Rect, and Size in lib-screen-geometry which can be just about the geometry with no mention of color.  That's a leaf library not even using lib-utility.

Yes, lib-screen-geometry still has extraneous constants about the particular Audacity 3 layout, as we discussed before.   Let me figure out how to clean that up.
 `lowest` or `min`?
 So the convention is that x coordinates increase rightwards, y coordinates downwards.  It's the usual graphics convention, but worth explicit comment near the top of the class definition. The ""problem"" with this specific PR is that it is two years old and predates many of the libraries. I haven't re-reviewed much myself, but most, if not all, of the lib-graphics are likely not strictly needed for the purposes of the pull request. 

I am not sure that we want it for 3.5 or for Audacity 3 at all; this was never discussed @ianalarina. Please note that the PR is not even on the board. Are the bottom and right coordinates included or excluded?
 A box could be valid but empty, if bottom and right are excluded.
 Inclusive, or exclusive of p2?
 bottomRight describes a point EXCLUDED from the given rectangle.
 There are only numbers in this class, so I think you don't need moves Meant to INCLUDE the point always?
 I might name it with a noun, `Expansion` There is an assumption that the rectangle is valid -- not negative area
 I have a strong opinion that function and methods must be verbs. I will push hard towards it. I think `>=` and `<=` are correct.  `p12` and `p22` are excluded points of the rectangles.
 This calculation is correct, but making the change above may return a different rectangle when the resulting area is zero.
 Also if you use {} for zero-area rectangles, canonicalizing origin to zero -- then should this do nothing for such rectangles?  Or is that the caller's problem to check? Or `Expansion` ditto Ah, here it is:  bottom and right are indeed meant to be included.  That is not like top + height or bottom + width of a rectangle.
 Wrongly returns false when the true bottom or right edge of the rectangle coincides with the included boundary.

Fix with `- 1` twice
"
6331,2024-04-23T11:04:28Z,2024-04-23T15:20:29Z,crsib,2,0,1,9,4,1,1,[],95189.0,0,95828.0,0,0,0,0,12037894.021129,,0,1,0,False,"['LWinterberg', 'VVD']",Don't see this commit in main. It is in release-3.5.1 only. The release branch will get merged into master after it gets released.,,"Based on patches provided in #6326, #6327, #6328, #6329

Resolves: #6326
Resolves: #6327
Resolves: #6328
Resolves: #6329

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6333,2024-04-23T14:06:31Z,2024-04-24T09:32:07Z,saintmatthieu,0,0,1,27,2,1,1,[],,1,69936.0,0,0,0,0,12052864.115662,,0,1,0,False,[],Magnifique!,Magnifique!,"Resolves: #6321

All instances of `SqliteSampleBlockFactory` stored their progress-window instances onto the same singleton. They did so using the `Scope` mechanism, which works by temporarily swapping its state with that of the singleton.

When two objects use this mechanism in an interleaved way, things go wrong. Say `s` is our singleton, `a` our factory A, and `b`, our factory `B`:
```
s = ""S""; a = ""A""; b = ""B"";
swap(a, s); // s == ""A"", a == ""S""
swap(b, s); // s == ""B"", b == ""A""
swap(a, s); a.clear(); // s == ""S"", a == """"
swap(b, s); b.clear() // s == ""A"", b == """"
```
""A"" is still alive. In this case, it's a modal dialog, which is in a weird, half-dead state, blocking everything else.

I don't see the need for a singleton in this particular case: `SqliteSampleBlock` instances have a reference to their factory, and can just ask them for their callback directly.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
Please try macro-processing heavy files and/or lots of them at once, and see if you observe something weird with the progress bar.",
6338,2024-04-24T08:29:40Z,2024-04-24T08:58:24Z,LWinterberg,0,0,1,8,1,1,1,[],,0,2399.0,0,0,0,0,12054213.750406,,0,1,0,False,[],,,assuming the other things on the board go in,
6268,2024-04-12T11:59:40Z,2024-04-15T08:32:35Z,LWinterberg,0,0,1,12,1,1,1,[],,1,1023891.0,0,0,0,0,12056922.312987,,0,1,1,False,[],,,,
5760,2023-12-08T11:46:55Z,2023-12-13T11:37:31Z,LWinterberg,2,0,1,27,1,1,2,[],5195.0,0,11911032.0,0,0,0,0,12056950.166982,,0,1,0,False,['petersampsonaudacity'],"Testing On W10 with @LWinterberg 's latest branch:  audacity-win-3.5.0-alpha-20231208+d7c59b2-x64

This is _**NOT**_ fixed in this branch.

FLAC export is still no grayed-out and can still be clicked on to get the inappropriate error message. Testing on W10 with @LWinterberg 's latest branch for this fix:  audacity-win-3.5.0-alpha-20231211+43d0cba-x64

This now works fine:
![image](https://github.com/audacity/audacity/assets/50205984/3576bd31-18dd-4e51-8c85-20ef05bcea9a)
",,Resolves: https://github.com/audacity/audacity/issues/5758,
5144,2023-09-05T11:01:17Z,2023-09-12T09:31:53Z,LWinterberg,0,0,1,2,1,1,1,[],,0,20035376.0,0,0,0,0,12056945.281826,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5141

While x/1 time signatures are certainly possible, I'd wager they also are of low musical value and importance. Simply hiding it from the dropdown would be a very quick and easy fix for the bug in question.",
5800,2023-12-19T13:05:03Z,2023-12-21T09:38:39Z,LWinterberg,0,1,1,94,4,2,1,[],,1,10955942.0,0,0,0,0,12056954.793419,,0,1,0,False,[],"Looks good to me, goodbye white hands!","Looks good to me, goodbye white hands!","Resolves: #5801
","Alternatively `pCursor = adjustLeftSelectionCursor.get()`

`adjustRightSelectionCursor` now has type `std::unique_ptr<wxCursor>`
"
6308,2024-04-18T10:15:58Z,2024-04-23T18:23:02Z,LWinterberg,0,0,1,142,6,1,1,[],,0,461228.0,0,0,0,0,12107415.066212,,0,1,0,False,[],,,Resolves: #6307,
6246,2024-04-09T10:50:29Z,2024-04-23T18:21:25Z,LWinterberg,0,0,1,94,5,1,1,[],,0,1236660.0,0,0,0,0,12107513.014718,,2,1,0,False,[],,,"Resolves: #6245

And probably the last cherry-pickable thing from the themes branch I have. 

QA: This removes a checkbox from the Interface preference tab and somewhat alters how themes are loaded.",
6218,2024-04-04T13:37:43Z,2024-04-23T18:18:52Z,LWinterberg,0,0,2,42,6,1,1,[],,1,1658473.0,0,0,0,0,12107667.41664,,0,2,0,False,[],,,"Resolves: #5954

I said ""I should clean up my themes branch"" earlier, so might as well do it. ",
6330,2024-04-23T10:02:45Z,2024-04-23T15:22:45Z,crsib,0,0,1,17,1,1,1,[],,0,19203.0,0,0,0,0,12118236.178247,,0,1,0,False,[],,,"XCode 15 toolchain breaks the compatibility for
macOS version older than 12

Resolves: #6322 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6315,2024-04-22T09:16:26Z,2024-04-22T10:09:55Z,LWinterberg,0,0,1,641,1,1,1,[],,0,3214.0,0,0,0,0,12223406.358625,,0,1,0,False,[],,,via audacity-translation,
6241,2024-04-08T15:29:28Z,2024-04-23T12:08:12Z,crsib,2,9,4,6114,33,2,1,[],854022.0,0,1283927.0,0,0,0,0,12129911.368219,,1,4,0,False,"['crsib', 'saintmatthieu']","Here's a list of things I think I've understood, please correct me if I'm wrong:
* We support different versions of FFMPEG
* This PR adds support for version 7
* FFMPEG is made of several libraries, including `avcodec`, `avformat`, `avutil`,
* channel layout in version 7 uses a new API, hence a new wrapper is needed and gets injected also in the older `AVUtilImpl`s,
* one same class, `AVChannelLayoutWrapperImpl`, is defined for all versions, but with some `ifdefs` whose value change depending on what `ffmpeg-x.x.x-single-header.h` was included before, and wrapped in different namespaces
* `FFmpegFunctions::Private` is the guy which iterates the supported versions and selects the latest and greatest, if any

That system is quite a feat ... Who was the initiator of this system? Anyone's hand I should shake other than yours, @crsib ? :D

Trying to think of what needs to be tested. The new FIFO is common to all versions, so I suppose that testing with one FFMPEG version would be sufficient for that part.
For the rest, `HAS_AV_CHANNEL_LAYOUT` seems to have some impact, so testing with version before 59 (which FFMPEG is that?) and from 59+. 
 > We support different versions of FFMPEG

We have to support multiple versions because ... we cannot ship the FFmpeg with Audacity for legal reasons

> This PR adds support for version 7

Yep

> FFMPEG is made of several libraries, including avcodec, avformat, avutil,

We use these three. `avcodec` is a library with all codecs, `avformat` adds support for multiple containers, `avutil` is just used by every FFmpeg library.

> channel layout in version 7 uses a new API, hence a new wrapper is needed and gets injected also in the older AVUtilImpls,

It was introduced in FFmpeg 6, but the old API was killed in 7

> one same class, AVChannelLayoutWrapperImpl, is defined for all versions, but with some ifdefs whose value change depending on what ffmpeg-x.x.x-single-header.h was included before, and wrapped in different namespaces

Yep

> FFmpegFunctions::Private is the guy which iterates the supported versions and selects the latest and greatest, if any

> which FFMPEG is that?

The correspondence between library versions and FFmpeg versions can be found here https://ffmpeg.org/download.htmlSome minor improvement suggestions to please consider, but I couldn't see anything faulty.","Some minor improvement suggestions to please consider, but I couldn't see anything faulty.","Resolves: #6225

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","could be `const` typo Why capital? Looks like it could be just a `queue` and this one just a `deque` `mFFmpeg` somehow knew the number of channels and the sample size? (Haven't thoroughly looked for it.) ExportFFmpeg was largely written over a decade ago. I don't know why the FFmpeg FIFO was used in the first place, I think because it was used in examples.

Before the latest release, FIFO was just the bytes queue. In the new FFmpeg it now operates on pages and Audacity was not ready for that, so I had to get creative :-) `queue` is a `dequeue` by default, but I agree that the semantics would be clearer For free pages FILO is as good as FIFO, I don't have any opinion about the container here."
6309,2024-04-18T14:59:18Z,2024-04-19T09:28:07Z,DavidBailes,1,0,1,11,1,1,1,[],59.0,0,66529.0,0,0,0,0,12485121.645205,,0,1,0,False,['DavidBailes'],I guess this may be too late for 3.5.0.,,"Resolves: https://github.com/audacity/audacity/issues/6251

Problem:
You can arrow past the start and end of the list.

Fix:
Don't pass on to the wxGrid for normal processing the down arrow and up arrow keydown events when they are going to cause this problem.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6310,2024-04-18T15:11:29Z,2024-04-19T09:28:30Z,crsib,0,0,1,8,1,1,1,[],,0,65832.0,0,0,0,0,12485088.047261,,0,1,0,False,[],,,"Resolves: #6300 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6289,2024-04-16T13:27:34Z,2024-04-18T16:44:05Z,LWinterberg,2,0,1,10,1,1,1,[],183625.0,0,185304.0,0,0,0,0,12544653.367528,,0,1,0,False,"['crsib', 'LWinterberg']","File validates now.

![image](https://github.com/audacity/audacity/assets/87814144/4a51bf5b-8d96-48aa-b6df-8be43314ccc4)

I think this can skip QA.  Yep, I've checked that too before approving",,Resolves: #6192,
6304,2024-04-18T00:37:49Z,2024-04-18T07:34:52Z,Patriccollu,0,0,1,22,1,1,1,[],,0,38744.0,0,0,0,0,12564598.825604,,0,1,0,False,[],,,"Hello,

This is an 'ultimate' update of **Corsican** localization for Audacity 3.5.0 to take into account commit https://github.com/audacity/audacity/commit/c1b1f7ec994b48727fc990e3db16b1faff679d57 to Fix #6271

I noticed that both Transifex 3.5.0 and audacity.pot in 3.5.0 branch do not reflect this change regarding accelerator keys.

Best regards,
Patriccollu.",
6297,2024-04-17T12:48:50Z,2024-04-17T16:37:58Z,crsib,0,0,13,361,15,1,1,[],,0,13752.0,0,0,0,0,12632132.299135,,0,13,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6303,2024-04-17T16:42:21Z,2024-04-18T09:32:14Z,crsib,0,0,3,91,3,1,1,[],,0,60596.0,0,0,0,0,12571277.895756,,0,3,0,False,[],,,"Resolves: #6301 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6286,2024-04-16T04:04:13Z,2024-04-17T13:16:52Z,Gootector,0,0,1,264,15,1,1,[],,0,119559.0,0,0,0,0,12644204.863862,,0,1,0,False,[],Thank you very much!!,Thank you very much!!,"Fix #6271

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6189,2024-03-29T15:24:14Z,2024-04-02T16:40:20Z,crsib,0,0,89,20222,234,1,1,[],,0,1630664.0,0,0,0,0,12647499.325791,,0,89,0,False,[],,,"Resolves: #5427

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6187,2024-03-29T14:35:07Z,2024-03-29T15:13:24Z,crsib,0,0,20,414,24,1,1,['Cloud'],,1,1632995.0,0,0,0,0,12648117.175211,,0,20,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6284,2024-04-15T16:48:57Z,2024-04-16T10:00:56Z,mlocati,0,0,1,3,1,1,1,[],,0,62705.0,0,0,0,0,12741577.991385,,0,1,0,False,[],,,"Resolves: #6279

The gettext header should be present in the compiled .mo files even if in the source .po files it's marked as fuzzy.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6273,2024-04-12T23:52:51Z,2024-04-16T08:43:33Z,Gootector,1,4,2,2960,1,1,1,[],269367.0,0,291042.0,0,0,0,0,12747009.176925,,0,2,0,False,['Gootector'],Done. See changes: https://github.com/audacity/audacity/pull/6273/commits/e58a8a6c5bcc94bda69d7a12811cc4b8bc768eea.Thank you for the translation. I found a few things.,Thank you for the translation. I found a few things.,"Update German from Transifex (3.5.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""Fertig"" would be the typical translation here ""Hochladen"" is incorrect here. German just borrowed [Upload](https://www.duden.de/rechtschreibung/Upload). Either ""Erneut versuchen"" or ""Wiederholen"" Neuter gender; importiertes"
6274,2024-04-13T00:04:32Z,2024-04-15T10:23:56Z,Gootector,0,0,1,5362,1,1,1,[],,0,209964.0,0,0,0,0,12827386.179999,,0,1,0,False,[],,,"Update Turkish from Transifex (3.5.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6270,2024-04-12T12:28:09Z,2024-04-15T10:05:48Z,crsib,0,0,3,38,2,1,1,[],,1,250663.0,0,0,0,0,12828472.426915,,0,3,0,False,[],,,"Resolves: #6267 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6272,2024-04-12T23:38:38Z,2024-04-15T10:21:57Z,Gootector,0,0,1,2847,1,1,1,[],,0,211399.0,0,0,0,0,12827507.626631,,0,1,0,False,[],,,"Update Polish from Transifex (3.5.0)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6205,2024-04-03T07:14:05Z,2024-04-03T15:37:04Z,Gootector,2,0,1,4,1,0,0,[],30172.0,0,1006229.0,0,0,0,0,12869352.962931,,0,1,0,False,"['crsib', 'Gootector']","Thank you a lot! Hi! Lately I've been having some troubles with my e-mail address on o2.pl and my Github account. Now, I will probably be visible as ""Grzegorz Pruchniakowski"" in my PRs.
Translation updates for 3.5.0 are in Pull Requests.

Greetings,
Gootector",,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6227,2024-04-05T08:02:00Z,2024-04-08T09:53:23Z,DavidBailes,2,0,1,10,2,1,1,[],612720.0,0,688707.0,0,0,0,0,13011201.614295,,0,1,0,False,['DavidBailes'],"@LWinterberg Was just wondering whether this change would cause any problems with the translations. > Was just wondering whether this change would cause any problems with the translations.

@LWinterberg @crsib It does cause problems. Is there a work around for this?

Logged issue: https://github.com/audacity/audacity/issues/6271",,"Resolves: https://github.com/audacity/audacity/issues/6188

Fixed 5 missing access keys.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6237,2024-04-08T09:49:27Z,2024-04-12T12:06:13Z,mlocati,0,0,1,1335,1,1,1,[],,0,360417.0,0,0,0,0,13073845.269677,,0,1,0,False,[],,,"Update Italian from Transifex - 3.5.0

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6256,2024-04-10T22:40:56Z,2024-04-11T17:03:28Z,Paul-Licameli,17,0,1,10,1,1,1,[],35306.0,0,66160.0,0,0,0,0,13149015.697482,,0,1,0,False,"['crsib', 'LWinterberg', 'Paul-Licameli']","I don't quite understand why this fix works TBH > I don't quite understand why this fix works TBH

I don’t know whether it works.

the Linux packaging that failed is not tested in PRs before merge.
 The packaging job should run in your actions (if you have them enabled) And it has failed - https://github.com/Paul-Licameli/audacity/actions/workflows/package_linux.yml

I can take a look Friday I think Revert my contribution if that is easiest It is just certain Gcc versions that interpret # include directives wrong? FWIW: There is no sync/ProjectUploadOperation.h in **modules**/sharing/mod-cloud-audiocom/. There is one though in **libraries**/lib-cloud-audiocom/ though.  Maybe just omit “sync/“  `libraries/lib-cloud-audiocom` must be in include paths of `mod-cloud-audiocom`, so no, this should not be the case. And it clearly builds with no issues unless the build happens on Arch (probably, this only affects ""system only"" builds) I will not approve this change.  The problem with the Linux build is very simple, I overlooked a detail during the code review, and the audio com module is enabled unconditionally, which is wrong. 

I will push the fix (and one more fix for GCC13) soon > The problem with the Linux build is very simple, I overlooked a detail during the code review, and the audio com module is enabled unconditionally, which is wrong.
> 
> I will push the fix (and one more fix for GCC13) soon

OK

Messages crossed:  see my latest small commit.

Is that all that is really necessary?
 
> > The problem with the Linux build is very simple, I overlooked a detail during the code review, and the audio com module is enabled unconditionally, which is wrong.
> > I will push the fix (and one more fix for GCC13) soon
> 
> OK
> 
> Messages crossed: see my latest small commit.
> 
> Is that all that is really necessary?

Answering myself:  I did not reproduce #6261, but I think I did make a separate fix that is desirable.
 There is one more fix needed for GCC 13, I will merge it into the release first, and merge the release into the master right after Please do consider https://github.com/audacity/audacity/pull/6256/commits/8613d62de25e3345b5c6df55800a9ef0bd94f1d3
 Straight to merge then?

I apologize for the invconvenience I made.
 > Straight to merge then?

Yep

> I apologize for the invconvenience I made.

No problems :-)
",,"Resolves: #6258

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6261,2024-04-11T16:45:14Z,2024-04-11T17:21:17Z,crsib,0,0,2,3,2,1,1,[],,0,2170.0,0,0,0,0,13147947.724566,,0,2,0,False,[],,,"Nothing to test, straight to merge

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6252,2024-04-10T13:08:44Z,2024-04-11T16:56:54Z,DavidBailes,0,0,1,23,1,1,1,[],,0,100090.0,0,0,0,0,13149420.860926,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6190

Problems:
1. When there are projects in the table, you have to press Tab twice to move to the next control.
2. When there are no projects in the table, pressing Tab does not leave the table.
3. When the table becomes the focus, for screen readers the whole table is the focus, rather than a row.

Fixes:
1. Handle the wxEVT_GRID_TABBING event to provide the correct tabbing behaviour.
2. When the wxGrid control becomes the focus, create a focus event for the row which should be the focus, by the call mAccessible->SetSelectedRow(row).



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6240,2024-04-08T14:11:51Z,2024-04-11T16:57:51Z,DavidBailes,0,0,1,1,1,1,1,[],,0,269161.0,0,0,0,0,13149362.896009,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6196

Fix the accessibility name of the Project Name text box.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6260,2024-04-11T11:46:26Z,2024-04-11T16:55:53Z,crsib,0,0,5,192,8,1,1,[],,0,18570.0,0,0,0,0,13149481.60319,,0,5,0,False,[],,,"Resolves: #6200

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6221,2024-04-04T17:34:35Z,2024-04-10T18:24:10Z,Paul-Licameli,2,0,3,308,267,1,1,[],65850.0,0,521380.0,0,0,0,0,13230582.937598,,2,3,1,False,"['LWinterberg', 'Paul-Licameli']","any point in QAing this? > Resolves: _(direct link to the issue)_
> 
> _(short description of the changes and the motivation to make the changes)_
> 
>     * [x]  I signed [CLA](https://www.audacityteam.org/cla/)
> 
>     * [x]  The title of the pull request describes an issue it addresses
> 
>     * [x]  If changes are extensive, then there is a sequence of easily reviewable commits
> 
>     * [x]  Each commit's message describes its purpose and effects
> 
>     * [x]  There are no behavior changes unnecessary for the stated purpose of the PR
> 
> 
> Recommended:
> 
>     * [x]  Each commit compiles and runs on my machine without known undesirable changes of behavior



> any point in QAing this?

I think not, @crsib ?  Thanks for approval.

Maybe there will be more modules for the various effect protocols, as for the import/export, and I think the categorization into boxes makes a more legible view.
",,"Resolves: *(direct link to the issue)*

Reorganize the modules into several sub-folders, and change the generation
of Graphviz output from configuration to make a tidier graph that puts boxes
around sets of related modules, with the libraries used only in those modules.

The before picture:
![modules dot](https://github.com/audacity/audacity/assets/11670369/e4662465-b68c-42f1-959b-19477d5e2375)

The after picture:
![modules dot](https://github.com/audacity/audacity/assets/11670369/25ed9d18-6875-42f9-b06e-16512d638c10)


This pull request changes no C++ source code.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6242,2024-04-08T16:06:29Z,2024-04-10T14:17:31Z,crsib,0,0,1,4,1,1,1,[],,0,166265.0,0,0,0,0,13245386.047288,,0,1,0,False,[],,,"Resolves: #6239

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6249,2024-04-09T13:36:35Z,2024-04-10T14:16:14Z,crsib,0,0,1,10,1,1,1,[],,0,88783.0,0,0,0,0,13245462.142042,,0,1,0,False,[],,,"Resolves: #6248

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6234,2024-04-07T10:40:21Z,2024-04-08T09:14:50Z,Patriccollu,1,0,1,2425,1,1,1,[],81281.0,0,97818.0,0,0,0,0,13419804.123629,,0,1,0,False,['vsverchinsky'],Thank you!,,"Hello,

This is an update of **Corsican** localization for Audacity 3.5.0.

The translation on [Transifex files](https://app.transifex.com/klyok/audacity/language/co/) is also completed.

Best regards,
Patriccollu.",
6236,2024-04-08T08:27:12Z,2024-04-08T09:53:17Z,DavidBailes,0,0,1,5,1,1,1,[],,0,5165.0,0,0,0,0,13434046.142066,,1,1,1,False,[],,,"Partially Resolves: https://github.com/audacity/audacity/issues/6065

Problem:
Using either Jaws or NVDA the cloud status is not read when reading the status line. Using the Inspect tool, in its tree view it can be seen that there is no child of the status line which has an accessibility name which is the cloud status. The status line has a WindowAccessible set, so that the accessibility name of the status line can be set to ""status_line"". WindowAccessible is dealing with the accessibility objects of the status bar's children, and not doing a very good job. (It's not written to be able to do this.)

Fix for NVDA only:
Don't set a WindowAccessible for the status line, and let Windows provide the accessible objects for the status line, and for all the children for which an accessibility object is not set. This means that the status line no longer has the accessibility name of ""status_line"". I'm not sure when this was introduced and why. But neither the current Jaws or NVDA scripts make use of the name, so I don't see any problem.

Note on Jaws:
This fix does not fix the issue for the Jaws screen reader. It looks like it is not using the accessibility objects of the status line for its information about the text on the status line.

Partially Resolves: https://github.com/audacity/audacity/issues/6065


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6215,2024-04-03T16:56:53Z,2024-04-04T18:06:03Z,crsib,0,0,1,4,1,1,1,[],,1,90557.0,0,0,0,0,13750075.455557,,0,1,0,False,[],,,"Resolves: #6209 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6201,2024-04-02T16:25:58Z,2024-04-05T13:08:24Z,Paul-Licameli,1,11,17,1575,59,2,1,['code quality'],17605.0,0,247349.0,0,0,0,0,13681538.995577,,2,17,1,False,['Paul-Licameli'],"Thank you for review.  I may open the other PR then, which is is not as simple.found some minor things, but overall it looks good to me!","found some minor things, but overall it looks good to me!","Resolves: *(direct link to the issue)*

Cleanup conditional compilation directives for all the EXPERIMENTAL flags
that have been turned on in releases.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The two comments I'd have here would be: 

1. why not put this feature into the experimental.cmake so it can be toggled from there?
2. It seems like the concern ""not to affect this effect for now, as there might be no indication that it does"" is somewhat easily resolvable by adding a checkbox into the noise reduction effect UI.  Can these go too? It seems to me like this is never checked and always true I'm not sure this function does anything at the moment, it seems to me like instead of dragging the playhead around, I instead do things with loop regions.  This one actually only got merged this friday; somehow this feature had fallen through the cracks all these years. It is somewhat unfinished (see https://github.com/audacity/audacity/issues/6186) still and possibly the only flag I've seen so far which actually warrants an EXPERIMENTAL flag - but then, I did decide that in the current form it is useful and have no intention on disabling it if anything goes wrong. Removing this flag is fine.  This “obvious” idea from 2014 was vetoed by the old team and I forgot it.  But it remains latent.

You don’t yet see part 2 of this contribution.  I also want to rewrite the un-enabled experimentals with C++17 `if constexpr` instead of old `#ifdef` and that would include this idea.  That rewrite would let the compiler check those branches too so that they remain buildable while other parts of Audacity evolve.

I’m waiting first for acceptance of the easier rewrites in this PR.
 And so the file Experimental.cmake will be eliminated, and the switching-on of other experiments will also not require recompiling everything as now. That’s an old fashioned C/C++ “include guard” that allows a header file to be included twice but fully parsed only once.  It’s still my habit to write these.  `#pragma once` is an alternative, not quite standard, but recognized by the compilers that matter for our builds. Can’t you click precisely on the down pointing green (or red) triangle and move it, when the head is in pinned state? I implemented the pinned head, which at first was always centered, then in a later release let you drag it off center, thinking that it’s more useful during recording to have it farther right.

Also little known perhaps — you can double click it to recenter. oh, in pinned state. Yes, that still works.  Good"
6211,2024-04-03T13:14:46Z,2024-04-04T18:05:37Z,DavidBailes,0,0,1,21,2,1,1,[],,0,103852.0,0,0,0,0,13750110.054687,,0,1,0,False,[],"Amazing, thank you for you help, David","Amazing, thank you for you help, David","Resolves: https://github.com/audacity/audacity/issues/6208

Fixed:
1. All controls now have access keys.
2. In the Account group box, the label of the person icon is now read by screen readers.
3. The accessibility name of the ""Remove temporary file after"" text box now includes the word days.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6214,2024-04-03T16:53:15Z,2024-04-04T16:58:31Z,Paul-Licameli,0,0,1,1,1,1,1,['libraries & modules'],,0,86719.0,0,0,0,0,13754134.134124,,0,1,0,False,[],,,"... rapidjson comes as a transitive dependency through lib-import-export

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6147,2024-03-19T17:13:00Z,2024-04-04T11:07:25Z,LWinterberg,0,0,1,322,4,1,1,[],,1,1360470.0,0,0,0,0,13775200.361287,,0,1,1,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5864
Resolves: https://github.com/audacity/audacity/issues/2725

The vocal reduction effect as-is doesn't really do what it says on the tin. Rather, it takes advantage of typical mixing and mastering techniques with some success - but utterly fails when the recording doesn't match its expectations. The new ML-powered stem separation introduced with openVINO and others does not need to rely on mixing techniques and is capable of separating vocals and music, or indeed vocals and an assortment of instruments with much more success.

Once an installer for openVINO is ready, the effect therefore should be removed from Audacity and offered as a nyquist plugin instead. 

cc @RyanMetcalfeInt8 ",
6172,2024-03-25T13:07:55Z,2024-03-29T14:13:55Z,crsib,0,10,39,8450,82,2,1,['Cloud'],,1,349563.0,0,0,0,0,14282413.832709,,0,39,1,False,[],"Few typos, otherwise looks great 👍 ","Few typos, otherwise looks great 👍 ","- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","typo Could be shortened:
```cpp
if(Queue.empty() || !canMerge || !Queue.back().second)
   Queue.push_back( message, canMerge );
else 
   ...
``` typo typo Could it be declared `mutable` too? `BasicUI::IsUIThread` will not work here? `override` typo typo: ""one minute ago"" You can subscribe both to immediate notifications and notifications deferred to UI thread"
6178,2024-03-26T13:57:25Z,2024-03-29T13:37:05Z,saintmatthieu,0,0,1,10,1,1,1,[],,1,257980.0,0,0,0,0,14284627.503569,,0,1,1,False,[],,,"Resolves: #5756

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6148,2024-03-20T12:12:21Z,2024-03-29T11:04:46Z,vsverchinsky,1,10,2,76,5,2,1,[],430951.0,0,773603.0,0,0,0,0,14293710.439147,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's test branch build for this:  audacity-win-3.5.0-alpha-20240325+36a0164-x64

This looks to be properly fixed in Vitaly's test branch.

1. I generated a stereo tone at 0.4 amplitude
2. Exported it as mono
3. Imported the audio file
4. Observed: amplitude is a smidgeon under 0.4  _(and certainly not longer doubled to 0.8)_

![image](https://github.com/audacity/audacity/assets/50205984/cfaa158b-b3f0-4111-8110-a3607015687f)
It all looks correct to me, but please consider the simplification I'm suggesting, and if you think it'd be wrong please explain. I'm not thrilled that the mixer is not simplified by this PR. There are parameters that seemingly can contradict each other, i.e., mixer specification vs number of output channels ; mixdown option vs mixer specification.
I admit though that solving this properly is a bigger task. (I am thinking that giving more responsibility to the mixer spec, making it a matrix of floats rather than just booleans, could go in the right direction.)
Also Audacity's mixer may be subject to refactoring anyway, so now doesn't seem like a good time for it. 
Otherwise it looks correct, AFAICS.","It all looks correct to me, but please consider the simplification I'm suggesting, and if you think it'd be wrong please explain. I'm not thrilled that the mixer is not simplified by this PR. There are parameters that seemingly can contradict each other, i.e., mixer specification vs number of output channels ; mixdown option vs mixer specification.
I admit though that solving this properly is a bigger task. (I am thinking that giving more responsibility to the mixer spec, making it a matrix of floats rather than just booleans, could go in the right direction.)
Also Audacity's mixer may be subject to refactoring anyway, so now doesn't seem like a good time for it. 
Otherwise it looks correct, AFAICS.","Resolves: #6100

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Why not `mApplyGain != ApplyGain::Discard` ? If for some reason some coder moved around the values of the enum we could have a change of behaviour there. I looked at the three places where the mixer is instantiated:
| place               | spec         | mode                             |
| ------------------- | ------------ | -------------------------------- |
| StereoToMono        | null         | MapChannels                      |
| AudioIO             | null         | Discard                          |
| ExportPluginHelpers | user-defined | MapChannels if spec else Mixdown |

and then the places where you use `mHasMixerSpec`:
```cpp
      else if (mApplyGain == ApplyGain::Mixdown &&
         !mHasMixerSpec &&
         sequence.NChannels() > 1 && mNumChannels == 1)
      {
         needsDither = true;
      }
```
and
```cpp
if(mApplyGain == ApplyGain::Mixdown && !mHasMixerSpec && mNumChannels == 1)
               gains[0] /= static_cast<float>(limit);
```
Looks like `mHasMixerSpec` could be removed, since always false if `mApplyGain == Mixdown` ? I don't think so. Say pan is 100% to the left, then here `denominator == 1`, but in the case of `ApplyGain::Mixdown`, it would be divided by 2. The problem is in c-tor. You can specify arguments that doesn't match each other. For example `MixerSpec` is discarded when the number of channels specified in `MixerSpec` isn't equal to number of output channels. May be if we had 2 or 3 constructors this class could have a bit more clear interface Thanks, I'll remove that comment Yeah, ok.

So recap:
* `Discard`: gain = 1 (-> channel-wise summation)
* `MapChannels`: gain depends on level and pan
* `Mixdown`: gain depends on level and pan and number of channels

Then on top of that, the mixer spec allows to exclude some channels from some tracks from the mix.
The ctor allows to pass `Mixdown` but that won't have an effect if a valid spec is passed.

I wonder why not giving another boolean argument wouldn't have kept things a bit simpler here? Keep `bool mApplyTrackGains` but adding `mAverageChannels` ? Food for thoughts: maybe it would make the internals of the mixer easier if the gains were part of the mixer spec, that is, it wouldn't be a matrix of booleans anymore but of doubles. It wouldn't be an optional argument anymore, and some external, testable helper could construct it. What makes averaging left with right require dither ? I think I know now: because dither is required if there is a multiplication by something other than an integer of the sample values (and that the output format is not float, but surely this must be checked elsewhere), which is the case for mixdown. > I wonder why not giving another boolean argument wouldn't have kept things a bit simpler here? Keep bool mApplyTrackGains but adding mAverageChannels ?

That would give 8 possible combinations of input parameters (2 states for mixer spec, 2 for `mApplyTrackGains` and 2 for `mAverageChannels`), instead of 6 when we use 3-state enum."
6139,2024-03-14T19:18:38Z,2024-03-29T10:47:27Z,lbordowitz,0,2,3,329,5,1,1,[],,0,1265330.0,0,0,0,0,14294807.52493,,0,3,0,False,[],"This looks good to me overall. There's some more improvements which may be something for the future. As-is, it adds a valuable feature with the label export in a pretty straight-forward manner, which in my book is good for a merge.. ","This looks good to me overall. There's some more improvements which may be something for the future. As-is, it adds a valuable feature with the label export in a pretty straight-forward manner, which in my book is good for a merge.. ","Resolves: #5924

This is a rebase of https://github.com/audacity/audacity/pull/394 . The original author is @Pokechu22 and the entirety of this code change should be credited as such.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/) - Pokechu22 did, too
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This would be something to improve in a followup PR. I [see](https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API) that webVTT does some fancy stuff, so the importer would need to be told to strip away everything that we can't deal with, eg. 

```

WEBVTT

STYLE
::cue {
  background-image: linear-gradient(to bottom, dimgray, lightgray);
  color: papayawhip;
}

00:00:00.000 --> 00:00:04.000 position:10%,line-left align:left size:35%
Where did <b>he</b> go?
```

would need to be converted to

```
00:00:00.000 --> 00:00:04.000 
Where did <b>he</b> go?
```

and from there converted to a label. 

The tags (`<b>, <c>, <i>, <u>`, etc) inside the text can stay as they may be things you'd want to set or edit in label form, too - for example to add emphasis to certain words when a character does so too. The style would need to be discarded for the time being. 

A second followup would be to make a new exporter for the labels in a similar vein to the Export Audio exporter, which then could have custom fields for styles and such in case of vtt.  While I have never seen a vtt or srt file do anything other than this, I'm a bit uncomfortable with such an assumption. I'd prefer something more robust here. This would also make parsing WebVTT easier. "
6185,2024-03-28T21:18:39Z,2024-03-29T10:47:01Z,andIsome,0,0,1,2,1,1,1,[],,0,48502.0,0,0,0,0,14294835.252016,,0,1,0,False,[],excellent find!,excellent find!,"Resolves: https://github.com/audacity/audacity/issues/5782

exporting audio now creates directories recursively

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6173,2024-03-25T15:03:31Z,2024-03-28T12:09:21Z,saintmatthieu,0,0,1,27,1,1,1,[],,1,248750.0,0,0,0,0,14376297.150505,,0,1,1,False,[],,,"Resolves: #6157

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6179,2024-03-27T09:12:54Z,2024-03-27T11:19:55Z,crsib,0,0,1,4,2,1,1,[],,0,7623.0,0,0,0,0,14465662.443845,,0,1,0,False,[],❤️ ,❤️ ,"It seems there is a bug in the compiler or linker, that optimizes out ItemProperties destructor from the binary, along with the VTable

Resolves: #6127 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6174,2024-03-25T17:26:45Z,2024-03-26T15:00:37Z,saintmatthieu,3,3,1,20,5,2,1,[],37.0,1,77632.0,0,0,0,0,14538823.486333,,1,1,1,False,"['DavidBailes', 'saintmatthieu']","@DavidBailes this actually depends on your fix, so to reduce overhead I included it in this PR. > I think what you a looking for is `wxDialog::Raise`, but probably I am wrong.

OnNextWindow() and OnPrevWindow() both use Raise(). There's also a mac/Linux only SetFocus().
If you haven't already tried using Raise() might be worth doing so to avoid the hide/show workaround.

I checked that with the current code, everything is fine on Windows. Yes, looks good! Coming up ...I don't quite understand what is goal of this PR, except for parenting.

I think what you a looking for is `wxDialog::Raise`, but probably I am wrong.","I don't quite understand what is goal of this PR, except for parenting.

I think what you a looking for is `wxDialog::Raise`, but probably I am wrong.","Resolves: #6168, #6170

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","But why do we still need both Hide/Show cycle and Raise? I expected that Raise would be sufficient alone Hide/Show cycle? We are only calling `Show(true)`. If that's what you meant: maybe, but does it hurt? Hmm, I misread the diff, sorry"
6176,2024-03-25T21:12:41Z,2024-03-26T14:58:27Z,saintmatthieu,0,5,3,45,3,2,1,[],,1,63946.0,0,0,0,0,14538955.523341,,0,3,1,False,[],"I don't understand second commit. I doesn't seem that it should have any visible behavior change. 

Observers are not thread safe indeed.

I do approve the last commit ","I don't understand second commit. I doesn't seem that it should have any visible behavior change. 

Observers are not thread safe indeed.

I do approve the last commit ","Resolves: #6158 

The buzz was due to the readout of an uninitialized buffer, which occurred when the stretcher has to reboot during playback. This easy fix is to zero it out instead, which makes the imperfection less audible. A proper fix would be to resynchronize the time stretcher's sample provider, but the effort is probably not worth it: allowing formant preservation toggling during playback is just a convenience for the user to hear with and without with just one click, but is by no means intended for actual music production.

Working on this ticket also uncovered a potential crash, due to a race condition between stretcher initialization on the audio thread and formant-preservation callbacks from the main thread. One could crash rather easily by selecting a very short loop of a few hundred ms, playback and toggling fast formant preservation on and off. A fix is proposed.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Why? To get the publisher to know a wee bit earlier that the subscription isn't valid anymore, hopefully before this object and its members gets destroyed ...
But that won't prevent the risk that
```
[this](int cents) {
            mCentShift = cents;
            mUpdateCentShift = true;
         }
```
gets called after `this` is destroyed (and hence `mCentShift` (`bool`) and `mUpdateCentShift` (`atomic<bool>`)). Is this safe? I couldn't crash Audacity anymore when stress-testing this on Windows and Mac, but I don't know the theoretical justification - if it does exist at all. Input welcome. That depends on the data layout, but ok  This can be done as `if(mUpdateFormantPreservation.exchange(false)`, but I don't care much Thanks, I didn't know that."
6175,2024-03-25T19:04:32Z,2024-03-26T13:37:54Z,saintmatthieu,0,0,1,13,1,1,1,[],,1,66802.0,0,0,0,0,14543788.682915,,0,1,1,False,[],,,"Resolves: #6169 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6122,2024-03-11T18:36:20Z,2024-03-25T09:06:09Z,crsib,0,6,20,5501,39,2,1,[],,1,1175392.0,0,0,0,0,14646493.71867,,0,20,1,False,[],All seem good now,All seem good now,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Shouldn't this be guarded with mutex as well? No recursive locks on callbacks because `NetworkResponse` is not reused. 
And callback cannot be invoked before `NetworkManager::GetInstance().do*` returns because it's not yet assigned.

But... consider we assigning a `setRequestFinishedCallback` and request is complete and upload has failed by the moment, then `OnUploadFailed` will initate another attempt to `PerformUpload` which creates a new instance of `NetworkResponse`. Then when second `PerformUpload` completes the first one still isn't complete and `setUploadProgressCallback` could be assigned the second time to the later instance of `NetworkResponse`. Nothing too bad will happen but a bit tricky. `mProgressDataMutex`
Is it really neccessary? After all, consumer thread has finished execution I wonder if there is any pros of having multiple producing threads in that case? Are there any limits on number of blocks? Should it be `reserve`d like blocks array in snapshot? I think that's the typo in the comment :-)"
5980,2024-02-19T10:07:23Z,2024-03-22T14:05:44Z,vsverchinsky,20,28,2,2330,8,4,1,[],15073.0,1,2779115.0,0,0,0,0,14887709.054503,,1,2,0,False,"['petersampsonaudacity', 'dozzzzer', 'DavidBailes', 'LWinterberg', 'vsverchinsky']","@vsverchinsky 

You have a small typo Vitaly - it should say Di**s**abled

![image](https://github.com/audacity/audacity/assets/50205984/f0bba5de-0682-42d6-8913-8d479d8c5ac8)

Plus the Consistency>Spelling page in the Manual (and on Manual pages) has long had

""**built-in**"", not ""builtin"" or ""built in""

![image](https://github.com/audacity/audacity/assets/50205984/535fe73a-4fab-4466-962f-305f5863b5a7)


-------------------------------------------------------------------------------------------------------

But otherwise all seems to work fine

 Last branch update aims to fix compilation and keyboard navigation issues on platforms other than win. Remaining accessibility problems are yet to be fixed Testing on W10 with @vsverchinsky 's latest branch build:   audacity-win-3.5.0-alpha-20240227+067c5e1-x64

The list of EGATS is still NOT in strict alphabetical order - rather it has alphabetically ordered subsections.

a) This makes it harder to use.

b) It is not really necessary as the user can filter by Type to see the subsections. Testing on W10 with @vsverchinsky 's latest branch build: audacity-win-3.5.0-alpha-20240227+95f0559-x64

That looks better to me now with proper alphabetic ordering.

![image](https://github.com/audacity/audacity/assets/50205984/88a7061a-f69e-4196-9105-3f20108f6211)
 Testing on W10 with @vsverchinsky 's latest branch build for this:  audacity-win-3.5.0-alpha-20240229+0df2b93-x64

I see we now have an additional filter for Category (type of EGAT)

The cute thing is that the default setting you get for Category depends on the way you get to the Plugin Manager, so coming from **Effect>Plugin Manager** will default to Category **Effect** and similar for the other EGAT categories.

_I just hope that users are curious enough to explore the Category filter and realize that there is still an **All** category choice._
 Testing on W10 with @vsverchinsky 's latest branch:  audacity-win-3.5.0-alpha-20240306+c6c5a1c-x64

a) The cycling based on initial letter now seems good

b) if you are lower in the list that the first letter you type it will go back and find the EGATs starting with that letter

-------------------------------------------------------------------------------------------------

But I observe a small oddity with the alphabetic ordering of the list.

A couple of my VST/VST3 plugins are out of order at the bottom of the list.  This does not appear to be a VST/VST3 problem per se  as I have other VST/VST3 plugins further up the list which are in the correct alphabetic order.

![image](https://github.com/audacity/audacity/assets/50205984/1f523594-a499-45a2-951f-4875fb860680)

Interestingly though if I use ""i"" or ""m"" as my first letter it cycles through the correctly ordered ones and then these out of order ones at the bottom and then cycles back up.
 @vsverchinsky . Having C as the access key for Category has created a duplicate, as Cancel also uses C. Suggest you change the access key of Category to a.
Also as noted above by @petersampsonaudacity , the alphabetic ordering should not be case sensitive. > Also as noted above by @petersampsonaudacity , the alphabetic ordering should not be case sensitive.

Ahhhh, so that was the problem - thanks @DavidBailes  this dialog is going to be the closest thing to perfection we have in this app > this dialog is going to be the closest thing to perfection we have in this app

I'm certainly liking it a lot :-) Testing on W10 with @vsverchinsky 's latest branch for this:  audacity-win-3.5.0-alpha-20240311+dcc70d2-x64

The alphabetic ordering now properly ignores case:
![image](https://github.com/audacity/audacity/assets/50205984/7d7a5ce7-43a4-432a-a832-9ca9b3701de0)
 @vsverchinsky 

These two issues can be reliably reproduced:

#### 1. On Windows, when clicking into a checkbox to enable a plugin/effect, it wrongly clicks in a different row:

https://github.com/audacity/audacity/assets/70063970/cee9135a-2053-4c66-a497-aa5e50696537

#### 2. On macOS, when double-clicking on an empty row in the Plugin Manager, Audacity crashes.

___

> [!NOTE]
> The following issues occur seemingly at random and only on macOS, but still, it isn't too hard to come across them since they exhibit themselves frequently although not in 100% of the cases. These issues are:

#### 3. Audacity crashes after having disabled some built-in effect(s), then switching the Category to Generator and trying to rescan.

##### Example 1:

https://github.com/audacity/audacity/assets/70063970/8413ff05-79c4-4d7d-840e-cde3d54232f2

##### Example 2:

https://github.com/audacity/audacity/assets/70063970/11e90f59-580b-420d-8b5d-35f187e24c1c

#### 4. Audacity may also freeze sometimes with or without the ""Audacity Support Data"" dialog popping up when performing pretty much the same set of actions, i.e.:

1. Effect > Plugin Manager
2. Disable one-two effects
3. Click Rescan
4. Click Cancel to abort scanning
5. Click OK to dismiss the dialog
6. Select Category: Generator
7. Click Rescan

##### Example 1

https://github.com/audacity/audacity/assets/70063970/432aecc0-c6b5-41d9-8635-36aabab21467

##### Example 2

https://github.com/audacity/audacity/assets/70063970/b34d122f-68bb-4bb1-9f21-ac3c3a37f31c

#### 5. And lastly, much more rarely Audacity may freeze when canceling scanning. For this one, I don't have a screen recording. @dozzzzer @vsverchinsky 

> 1. On Windows, when clicking into a checkbox to enable a plugin/effect, it wrongly clicks in a different row:

I cannot reproduce this on W10

_Well, I can if I have run older versions and get multiple copies of the same EGAT - buut not if I clear the Audacity settings folder before launching the latest branch build for this._ >3. Audacity crashes after having disabled some built-in effect(s), then switching the Category to Generator and trying to rescan.

@dozzzzer @vsverchinsky 

I cannot reproduce this on W10 @dozzzzer @vsverchinsky 

>4. Audacity may also freeze sometimes with or without the ""Audacity Support Data"" dialog popping up when performing pretty much the same set of actions

>5. And lastly, much more rarely Audacity may freeze when canceling scanning. For this one, I don't have a screen recording.

I can never get to the **Cancel** button on the **Rescan** dialog anything like quickly enough - so I find myself unable to test this.

 @dozzzzer 
> 1. On Windows, when clicking into a checkbox to enable a plugin/effect, it wrongly clicks in a different row:

Nice catch! When I was debugging this issue I've found out that to reproduce this you'll need to have multiple rows with equal values in the column and enable sorting for this column. ""Type"" is a best option. @dozzzzer It seem that all 2-5 crashes/freezes may have same origin. At least I could reproduce any of 3-5 after I caught and fixed second issue. Testing on W10 with @vsverchinsky 's latest branch build for this:  audacity-win-3.5.0-alpha-20240314+cfb3b3a-x64

The list of **Types** has had ""effects"" trimmed from them as per @LWinterberg 's request
And ""Native Audacity"" is there for Audacity supplied EGATS (thanks for that)

![image](https://github.com/audacity/audacity/assets/50205984/aa631c58-f281-4553-b4da-1d47e8dece96)
 Testing on W10 with @vsverchinsky 's latest branch build for this:  audacity-win-3.5.0-alpha-20240314+cfb3b3a-x64

A few posts ago in this thread @LWinterberg requested that in the Type field we should lose the term ""effect"" from the type listings as not all EGATs are effects.  And this is now done as reported above.

**BUT** in the EGAT lists the non-effect EGATs show as ""**Built-in Effects**"" in their path listing:

![image](https://github.com/audacity/audacity/assets/50205984/d451ca4e-29cc-4d3c-92ef-fedb5a67ca26)
 Testing on W10 with @vsverchinsky 's latest branch build for this:  audacity-win-3.5.0-alpha-20240320+4f4b2e0-x64

@LWinterberg @dozzzzer @Tantacrul 

From a user and usability perspective all seems fine but with one small oddity/niggle - and that is the behavior of the space-bar shortcut with multiple selections (basically it acts as a toggle).

a) If you select a single EGAT in the displayed list and press the space-bar it toggles the enabled/disabled status of that selected EGAT.  All well and good and as expected.

b) BUT if you make a selection of multiple EGATs in the displayed list (with Shift or Ctrl modified selection) and press the space-bar it toggles the entire selection based on the status of the **last** EGAT that you select- rather than toggling the status of each individual EGAT in the list based on its current status (and it is topmost not the first one you select).

**Is this intended and desired behavior ?**   
Is it what a user would expect ?  I would have thought that most users would expect a toggle of existing status for all selected EGATs _(my ""Mystery-Shopper"" thought so too when I ran this past her)_.

@DavidBailes  - what would VI users expect in this case ?

BTW if you make a multiple EGAT selection with a Shift modified click to select a contiguous range of EGATS, then the toggle is based on the status of the whichever EGAT you clicked on second to make the contiguous selection.

-----------------------------------------------------------------------

STR
1. Effect > Plugin Manager
2. set Type filter to native Audacity
3. Observe:  Classic Filters is the only disabled entry
4. Click on Classic Filters to select it
5. Ctrl+Click on Auto Duck and Bass&Treble to select those too
6. Press the space-bar: 
7. Observe all three become un-selected i.e. Classic Filters does _**not**_ toggle

----------------------------------------------------------------------------------

I partly ask this question as the editor of the manual as this existing behavior is somewhat tricksy to explain.
Not done reviewing, but I'd like to get answers about `wxHAS_GENERIC_DATAVIEWCTRL` before completing it, as a lot of code depends on it.
Otherwise, requesting changes because of the items-greyed-out little bug. I can say that the code style and the much I've understood of the code looks ok, but I've only made a superficial review of this PR. For a more confident review I'd have had to invest a lot more time learning about those many classes, inheritances and flows. Thankfully, it is being thoroughly eyeballed and tested by @petersampsonaudacity and @DavidBailes, which I think can catch bugs better than my review. If it looks good to both these gentlemen I therefore suggest that it moves on to our internal QA.
Okay with that, @crsib and @ianalarina ? Review the commits since the last I reviewed, which was ""Loop the search over the table while typing"", until the last commit at present, ""Don't show hidden effects"". ~~I just have that one thing that might not be correct, I hope you can clarify.~~ All good.","Not done reviewing, but I'd like to get answers about `wxHAS_GENERIC_DATAVIEWCTRL` before completing it, as a lot of code depends on it.
Otherwise, requesting changes because of the items-greyed-out little bug. I can say that the code style and the much I've understood of the code looks ok, but I've only made a superficial review of this PR. For a more confident review I'd have had to invest a lot more time learning about those many classes, inheritances and flows. Thankfully, it is being thoroughly eyeballed and tested by @petersampsonaudacity and @DavidBailes, which I think can catch bugs better than my review. If it looks good to both these gentlemen I therefore suggest that it moves on to our internal QA.
Okay with that, @crsib and @ianalarina ? Review the commits since the last I reviewed, which was ""Loop the search over the table while typing"", until the last commit at present, ""Don't show hidden effects"". ~~I just have that one thing that might not be correct, I hope you can clarify.~~ All good.","Resolves: #3865
Resolves: #6031

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA: 
 - [x] Group toggling with mouse click does not work as in spec, though it works via the spacebar. 
 - [ ] Rescanning works as before.
 - [ ] Behaviour when rescanning finds an incompatible plugin is the same as before.","Minor: alphabetical order (below too) This is your way of not duplicating the long list of `wxDataViewCtrl` ctor arguments ? :D Doesn't look necessary as it was already set to null a few lines above. Most of these could be private. Trying to understand these:
Ideally this #if would be false, so that e.g.
`class PluginDataViewStateRenderer final : public wxDataViewToggleRenderer`
could be defined and end of story.
But it's not always the case and so you need some custom implementations.
Are your custom implementations inferior? If not, which not just keeping them and remove the #if ? ... I coincidentally found out that, in spite of this #if statement yielding true for me, there still is an available definition of `wxDataViewTextRenderer` in dvrenderers.h. So I tried to remove this #if and only keep 
`class PluginDataViewStateRenderer final : public wxDataViewToggleRenderer`
and
`class PluginDataViewTextRenderer final : public wxDataViewTextRenderer`
and then run Audacity. At first sight I don't see a difference. Because I'm lazy and try to minimize the amount of code I have to review, I similarly tried to remove this class definition, just using
```
#if wxUSE_ACCESSIBILITY
wxAccessible* PluginsDataViewCtrl::CreateAccessible()
{
   return wxDataViewCtrl::CreateAccessible();
}
#endif
```
I'm no narrator expert, but trying it out it still seemed to work. What was the motivation for this class definition? not used? not used? `ClearAll`, `SelectAll`, `Enable` and `Disable` not used. I don't understand why, but `eIsCreating` is the only mode used in this source file. A constant for this width would be nice. `pm` is not used I noticed (and think I remember someone else mentioning this in the ticket, maybe Peter) that once this modal shows, the visible plugin items become greyed out:
![image](https://github.com/audacity/audacity/assets/22740106/0b27817c-0405-434e-b926-c0b16900a18b)

I don't know why or how to fix this, but it probably would be around those lines. Yes 😅  > Ideally this #if would be false, so that e.g.

Ideally, yes. But `wxWidgets` controls are not always have same behavior across platforms. There are three different underlying types depending on target platform: generic on Windows (custom implementation that doesn't use high level OSs controls), gtk tree view on Linux-based platforms, and `NSOutlineView` on MacOS. They are all react differently on user input, and not exactly as we want it to. 
`wxDataView*Renderer` implementations are also platform-dependent, and class hierarchies they belong to are also different depending on platform.

> Are your custom implementations inferior

No doubt 🤣 

>  If not, which not just keeping them and remove the #if ?

I think I answered that question? https://github.com/audacity/audacity/issues/3865#issuecomment-1956381348 Yes, I'll remove that `if` statement, thanks! ACK > I noticed (and think I remember someone else mentioning this in the ticket, maybe Peter) that once this modal shows, the visible plugin items become greyed out

@saintmatthieu 

Yes I recall that was me - but:
a) I can't find where I reported it,
b) I can't seem to be able to replicate it on the latest branch build for this.

 @petersampsonaudacity As Matthieu accurately noticed, it seem that rows become grayed out when ""Incompatible Plugins"" dialog appear. In latest update I provided a hotfix which works for me.
Also, search when typing should now loop over the table. 🥲  `override` Either this should be an `override` or it is not used.
Please review this for other methods as well.
That will help the review, and making as many of these `private` as possible on top of that would help even more. One small thing: Currently, sorting by ""Generator"", the ""Type"" menu saying ""Audacity Effects""/""Nyquist Effects""/... is confusing, as you really are seeing something that's not an effect. Can you rename them to the following instead?

* Audio Unit 
* LADSPA 
* LV2 
* VST 
* VST3 
* Nyquist 
* Native

(where native is what currently is ""Audacity Effects"") @LWinterberg 

Good call.
But for greater clarity could the ""Native"" be expanded to ""**Native Audacity**"" ? With this change it is not guaranteed that `pluginProviderNames` and `mPluginProviderIds` have equal size anymore, is it? Then it is used in
```cpp
void PluginRegistrationDialog::OnTypeFilterValueChanged(wxCommandEvent& evt)
{
   const auto index = evt.GetInt();
   if(index >= 0 && index < mPluginProviderIDs.size())
      mPluginsModel->SetFilterType(mPluginProviderIDs[index]);
}
```
and I haven't yet understood what the consequences could be. All good, I didn't realize that `continue` also skipped the call to `mPluginProviderIDs.push_back(PluginManager::GetID(provider.get()));`."
6153,2024-03-21T08:44:59Z,2024-03-21T14:07:32Z,saintmatthieu,0,2,1,10,1,2,1,['3.5'],,1,19353.0,0,0,0,0,14974017.37926,,0,1,1,False,[],,,"Resolves: #5799 5799

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I don't understand why this works. I assume, that you try to catch Obj-C exception, and the syntax is different https://stackoverflow.com/questions/4648952/objective-c-exceptions  I guess because objective-c++ exceptions are derived from c++ exceptions."
6131,2024-03-14T07:06:03Z,2024-03-20T10:50:55Z,saintmatthieu,24,6,7,1007,21,2,1,['3.5'],34274.0,1,699098.0,0,0,0,0,14905008.894928,,1,7,1,False,"['DavidBailes', 'LWinterberg', 'petersampsonaudacity', 'saintmatthieu']","Testing on W10 with @saintmatthieu 's branch build for this.

This looks properly non-modal to me.

I can invoke the speed&pitch dialog from the Clip-handle and then still press Play or other buttons in the app. > Testing on W10 with @saintmatthieu 's branch build for this.
> 
> This looks properly non-modal to me.
> 
> I can invoke the speed&pitch dialog from the Clip-handle and then still press Play or other buttons in the app.

Thanks @petersampsonaudacity ! When you tested the focus selection (pitch or speed depending on why clip button one clicked, the arrow or the clock) was broken. Testing on W10 with @saintmatthieu 's latest branch build for this:  audacity-win-3.5.0-alpha-20240315+de007d8-x64

The arrow and the clock in the Clip-handle bow mirror the setting in the change Pitch&Speed dialog
![image](https://github.com/audacity/audacity/assets/50205984/deffe0da-fcd5-4344-8237-64ae5606fba1)

I also note that nicely in this non-modal dialog
1. when you are not playing the speed change is not grayed-out and can be used
2. Press Play and observe the Change Speed is grayed-out and inoperable
3. Press Pause and it remains grayed-out
4. Press Stop and observe that it becomes non-grayed out and usable again
 @saintmatthieu . A couple of issues:
A. At least on Windows, it's standard for a modeless dialog to just have a close button, rather than OK and Cancel buttons. That is, all changes take place immediately, and you can't cancel any changes. See, eg:
https://learn.microsoft.com/en-us/windows/win32/uxguide/win-dialog-box#modeless-dialog-boxes
With the current behaviour, a user can:
1. Open the pitch and speed dialog for a clip
2. In the main windows, press alt + up arrow a few times to increase the pitch.
3. In the pitch and speed dialog, press Cancel. This undoes actions taken in the main window, which I don't think should happen, and which I don't think the user would expect. Cancel should only undo changes made in the Dialog.

Just having a Close button removes this issue (and maybe others).

B. With the full set of default keystrokes, there are the keystrokes Alt + F6 and Shift + Alt + F6 which cycle you round the main window and any modeless dialogs, either forwards or backwards respectively. There is a bug for the pitch and speed dialog:
With the full set of default keystrokes:
1. Open the pitch and speed dialog for a clip.
2. Press Alt + F6. The main window becomes the focus.
3. Press Alt + F6. The main window remains the focus. The pitch and speed dialog should become the focus again. > Just having a Close button removes this issue (and maybe others).

A close button wouldn't work as the stretching can fail still. Applying stretching a real time is not great either, as typing in a new one-digit number would cause extreme stretches which are almost guaranteed to bump into something.  > A close button wouldn't work as the stretching can fail still. Applying stretching a real time is not great either, as typing in a new one-digit number would cause extreme stretches which are almost guaranteed to bump into something.

Then shouldn't it be  a modal dialog?. (If it's got OK and Cancel buttons, users will think it's a modal dialog.) @DavidBailes Leo and I talked and thought we did need the Ok/Cancel buttons because of the speed.
But then I thought I'd give it a try without nevertheless. There's a build coming up that changes the text control for a spin control, and gets rid of the Ok/Cancel buttons. I personally thinks it's pretty nice, the spin control reacting to key up/down and the mouse wheel and the clip size changing on the fly, but maybe it's because I'm on my second Friday-evening gin tonic.
Anyways, please try https://github.com/audacity/audacity/actions/runs/8299522237 > Then shouldn't it be a modal dialog?.

@DavidBailes  - it looks like a modal dialog to me, it blocks interaction with the rest of Audacity until this dialog is dealt with _(it does when I test it)_. > Anyways, please try https://github.com/audacity/audacity/actions/runs/8299522237

@saintmatthieu @LWinterberg For the speed, I think a user would probably also want to be able to type in a value. In addition, in previous commits a user has been able to enter values with decimal places, eg 89.6, which they can no longer do.
There would also be an accessibility issue to sort out, as the control is read as an editable text box (which it obviously isn't), but I think there first needs to be a decision about the usability of this control for users in general. > @DavidBailes - it looks like a modal dialog to me, it blocks interaction with the rest of Audacity until this dialog is dealt with _(it does when I test it)_.

@petersampsonaudacity . Could you give me the commit number of the build that you're referring to (there have been a few recently)? > > Anyways, please try https://github.com/audacity/audacity/actions/runs/8299522237
> 
> @saintmatthieu @LWinterberg For the speed, I think a user would probably also want to be able to type in a value. In addition, in previous commits a user has been able to enter values with decimal places, eg 89.6, which they can no longer do. There would also be an accessibility issue to sort out, as the control is read as an editable text box (which it obviously isn't), but I think there first needs to be a decision about the usability of this control for users in general.

I can do everything on my Windows machine (enter value directly also with decimal places) so long as I do not _clear_ the text before, which is obviously a bug. Looking into this.

About the reader seeing this as a text box: because we need decimal value support, a standard `wxSpinCtrl` object doesn't do it. I needed to re-use the spin-control wrapper already used for the project tempo. Was this concern of yours, @DavidBailes , somehow eliminated for project tempo? Maybe what I should add is a call such as
```cpp
#if wxUSE_ACCESSIBILITY
            txtCtrl->SetAccessible(safenew WindowAccessible(txtCtrl));
#endif
```
? Then the narrator reads ""Clip Speed pane, speed % colon"" instead of ""Control pane, speed % colon"".
 > @petersampsonaudacity . Could you give me the commit number of the build that you're referring to (there have been a few recently)?

@DavidBailes 
audacity-win-3.5.0-alpha-20240315+4a1df2d-x64 > > @petersampsonaudacity . Could you give me the commit number of the build that you're referring to (there have been a few recently)?
> 
> @DavidBailes audacity-win-3.5.0-alpha-20240315+4a1df2d-x64
That gives a modeless dialog here:
![image](https://github.com/audacity/audacity/assets/11887021/47c8a6f1-16c7-4529-96f7-81f63e729f5a)


 @DavidBailes 

![image](https://github.com/audacity/audacity/assets/50205984/a9baec6e-7b07-4e21-bfbc-159d1f122ebc)

Works fine for me - I can
1. invoke the dialog from the clip handle - and with it onscreen
2. Press Play (or Pause or Stop)
3. interact with the volume slider in the Meter toolbar and the pan & gain sliders in the TCP
4. and as it is Playing I can dynamically change the pitch in the dialog _(but not the speed - that gets grayed out as you can se in the image above)_ > I can do everything on my Windows machine (enter value directly also with decimal places) so long as I do not _clear_ the text before, which is obviously a bug. Looking into this.

I was running into that bug.
> 
> About the reader seeing this as a text box: because we need decimal value support, a standard `wxSpinCtrl` object doesn't do it. I needed to re-use the spin-control wrapper already used for the project tempo. Was this concern of yours, @DavidBailes , somehow eliminated for project tempo?

It's not a problem a screen reader reading the control as an editable text box, as long as the user can edit the text!

 > Maybe what I should add is a call such as
> 
> ```c++
> #if wxUSE_ACCESSIBILITY
>             txtCtrl->SetAccessible(safenew WindowAccessible(txtCtrl));
> #endif
> ```
> 
> ? Then the narrator reads ""Clip Speed pane, speed % colon"" instead of ""Control pane, speed % colon"".

The SpinControl contains a text box, and it's the latter which is the focus when the control is the focus.
It's only narrator that by default also reads the name of the containing window when it reads the name of a focused control. Occasionally that name is useful but often it isn't. In this case it isn't useful to have any name, and it would probably be better for narrator just to read something like ""pane, speed % colon"". If an empty name was going to be set for the containing SpinControl it would probably be better if this was done for the class, rather than having to do it for individual instances. I don't think it's an important issue at the moment. (If you really wanted to implement it for this instance, then you could set an accessible as above, and in PitchAndSpeedDialog::PopulateOrExchange() change .Name(XO(""Clip Speed"")) to set an empty string instead.)

Also note that the text box has a custom accessible object. This means that the accessible name can be different from the name before the control. So if you wanted you could have the word ""speed"" before the control, and ""%"" after the control.
In ShuttleGuiBase::AddSpinControl() in the constructor for the SpinControl, you set the prompt to be the accessibility name.
You could override that in PitchAndSpeedDialog::PopulateOrExchange() by calling SetName() on the textCtrl with the TranslatableString ""speed %""

In passing, you currently can't close the dialog by pressing Enter or Esc.
 > Works fine for me - I can
> 
> 1. invoke the dialog from the clip handle - and with it onscreen
> 2. Press Play (or Pause or Stop)
> 3. interact with the volume slider in the Meter toolbar and the pan & gain sliders in the TCP
> 4. and as it is Playing I can dynamically change the pitch in the dialog _(but not the speed - that gets grayed out as you can se in the image above)_

@petersampsonaudacity . But you said previously ""it looks like a modal dialog to me, it blocks interaction with the rest of Audacity until this dialog is dealt with (it does when I test it)"". > @petersampsonaudacity . But you said previously ""it looks like a modal dialog to me, it blocks interaction with the rest of Audacity until this dialog is dealt with (it does when I test it)"".

@DavidBailes 

I believe that was true at the time of writing and with @saintmatthieu 's branch as it was at the time.

But his latest branch is definitely non-modal when I test it

Quoting from: https://www.nngroup.com/articles/modal-nonmodal-dialog/
>In contrast, nonmodal (or modeless) dialogs and windows do not disable the main content: showing the dialog box doesn’t change the functionality of the user interface. The user can continue interacting with the main content (and perhaps even move the window, minimize it, etc.) while the dialog is open. > I believe that was true at the time of writing and with @saintmatthieu 's branch as it was at the time.
> 
> But his latest branch is definitely non-modal when I test it

Yes. @DavidBailes I briefly explored your suggestions, but couldn't get to the result where ""%"" is read after the value. Feel free to push a commit on this branch to perfect accessibility. > @DavidBailes I briefly explored your suggestions, but couldn't get to the result where ""%"" is read after the value. Feel free to push a commit on this branch to perfect accessibility.

@saintmatthieu . The suggestion wasn't to get the ""%"" read by screen readers after the value. Rather it was for the ""%"" to appear after the value for sighted users. But I think it's good enough now, so it's only something that I might look at in the (distant) future after your commit has been merged. @DavidBailes, I realize something you recommended still hasn't been addressed, namely
> B. With the full set of default keystrokes, there are the keystrokes Alt + F6 and Shift + Alt + F6 which cycle you round the main window and any modeless dialogs, either forwards or backwards respectively. There is a bug for the pitch and speed dialog:
With the full set of default keystrokes:

...
I'd like to have this for my own use, too, but haven't been able to change scope that way even with existing windows such as the history window. Is this feature really still working properly? > I'd like to have this for my own use, too, but haven't been able to change scope that way even with existing windows such as the history window. Is this feature really still working properly?

@saintmatthieu . The Alt + F6 and Shift + Alt + F6 keystrokes are only available by default when using the full set of default shortcuts. (In the shortcuts page of preferences, press the defaults button and choose full.)
With the full set, I think you'll find that you can use these shortcuts to move back and forth to the history window, contrast and plot spectrum analyzers, manage macros dialog, all the real time effect dialogs, and others.
",,"Resolves: #5981 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] While the P&S dialog is open, selecting another clip updates the title in the dialog. (""Selecting"" means clicking either the clip's waveform or affordance bar or tabbing through the clips of a track.)
- [x] Ctrl+Shift+P opens dialog for last selected clip
- [x] History entries are added sensibly.
- [x] The lowest possible speed value is bound by the beginning of the following clip (preventing overlap)
- [x] The close button or pressing ESC close the dialog.
- [x] Deleting the clip that's represented in the dialog closes the dialog.
- [x] The dialog displays the name of the last clicked clip.
- [x] Changing the pitch value in the dialog updates the value displayed on the clip.
- [x] Starting playback/recording play greys out the speed box, which gets re-activated when playback/recording stops.
- [x] Playback start/stop events of one project doesn't activate/deactivate speed box in other project.
- [x] When clicking the arrow icon of a clip, the dialog still opens with focus on the semitone box, and when clicking the clock icon, on the speed box.
- [x] Accessibility still works
- [x] Changing speed with stretch handles updates the value in the dialog
- [x] Changing speed by changing project tempo updates the value in the dialog
- [x] Changing pitch semitone and cent values behaves as gracefully as before when going from positive to negative values. (Pardon me for not elaborating the subtleties, I think you'll notice if there is a difference in behaviour.)
- [x] Clicking on the right channel of a stereo clip behaves as when clicking on the left channel.
- [x] Maybe this resolves #5944 ?","What was the motivation for this change?
Isn't `MeterPanel::OnAudioCapture(AudioIOEvent event)` accidentaly affected by it? `{ }` will make it more readable Is it possible to bind to `wxCloseEvent` from `PitchAndSpedDialog`? That will help to avoid the UI dependency in `ProjectManager` Without this change, the `AudioIOEvent::PLAYBACK` callback is called with an empty project pointer, and so the callee cannot check the playback of which project it is that stopped.
Indeed, you identified a place where this change could affect behaviour. I examined other places subscriptions of this callback and this seems to be the only one (besides PitchAndSpeedDialog) that cares about the value of `event.pProject` when `!event.on`. I'll push a fix for `MeterPanel`. You mean `wxEVT_CLOSE_WINDOW` on `this` ? This is triggered when I close the dialog, meanwhile `Destroy` I think is meant for when closing the project. I just tried, though, and it freezes Audacity. As discussed, used `ProjectWindowDestroyedMessage` - thanks for the suggestion, it's better now."
6150,2024-03-20T13:11:44Z,2024-03-21T12:06:48Z,DavidBailes,0,0,1,8,1,1,1,[],,0,82504.0,0,0,0,0,14981263.648098,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6149

Problem: no access keys
Fix: add access keys


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6068,2024-02-29T14:24:42Z,2024-03-20T12:19:13Z,saintmatthieu,10,30,5,1292,43,3,1,"['Music', '3.5']",9878.0,1,1811636.0,1,0,0,0,14975754.544002,,1,5,1,False,"['crsib', 'saintmatthieu', 'dozzzzer', 'Paul-Licameli']","You need a Windows build fix
 > You need a Windows build fix

I have a segmentation fault on the StaffPadTimeAndPitch unit-test, which I can't reproduce locally :/ Found what the problem was - memory alignment. Pushed a fix commit with an explanation. Thanks unit tests 🙏  @patrickvi2 thanks a lot for your comments ❤️ I just pushed commits to address them, feel free to re-review. Just force-pushed after rebase without other changes. @vsverchinsky: @patrickvi2 has reviewed the DSP part of this PR. Would you be so kind to review the rest? >   * You define it using and interface too, and I don't see why. The only place it is used - it is used directly.

Not strictly speaking: `FormantShifter` only sees the abstract API.
I stopped my experimentational wandering when I reached this solution, despite it mixing up both logging and configuration responsibilities. I admit that it's not perfect, but I thought it could be tolerated and further clean-up work be spared. I don't really mind addressing this, if you still see it as a must.

I provided an answer to your question around optimization earlier in this conversation. Please note, that tests have failed, @saintmatthieu  @saintmatthieu 

The discovered bugs are macOS only:
1. While playing, an attempt to change the clip's pitch by entering any non-zero semitones/cents value causes Audacity to freeze;
2. While playing, if semitones/cents value is other than zero and formant preservation is ON, an attempt to disable formant preservation causes a freeze as well;
3. While playing, if the Pitch and Speed dialog is opened, an attempt to close the dialog causes a freeze. @dozzzzer thank you, I didn't get thread safety right and for some reason it still worked on Windows.
@crsib the last commit addresses this.I have two issues with this PR

* FormantShifterLogger is responsible for handling configuration.
  * You define it using and interface too, and I don't see why. The only place it is used - it is used directly.
* I think we should keep process_hop SIMD ready. I expect that the fix will be very simple.

There are some minor comments as well, but I will not block the PR because of them.","I have two issues with this PR

* FormantShifterLogger is responsible for handling configuration.
  * You define it using and interface too, and I don't see why. The only place it is used - it is used directly.
* I think we should keep process_hop SIMD ready. I expect that the fix will be very simple.

There are some minor comments as well, but I will not block the PR because of them.","Resolves: #6001 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Pitch and Speed dialog now has an ""Optimize for Voice"" checkbox.
- [x] Checking it noticeably (hopefully for the best when the input is voice) affects the audio result when pitch shifting up- and down.
- [x] Checking it also affects time stretching, although less noticeably, and hopefully positively when the input is voice.
- [x] Doesn't hurt the ears when used on silence, synthetic tones or other unusual signals (if you can think of any).
- [x] The checkbox state is persistent across project saving and closing.
- [x] The checkbox can be checked/unchecked during playback. (A click may be heard when doing so, but that's acceptable.)
","This is a valid value in expected range. If you already support c++23 in your tool-chain, you might better use `std::expected` as return-type, otherwise a `std::optional` or at least a negative value to be able to sort out non-valid input. Maybe check, if it is save to assume `float` is 32bit on all machines. But I think, it is.... You might want to add an early return for factor is not fullfilling expectations (`factor <= 0`) Why? As you use `factor` for calculating the bounds of your iterators, it's maybe a good idea to check `factor` is in expected range. Shouldn't it be `1.f / env`? As `env` can still be close to infinity small, the resulting weight might get a huge number introducing noise and artifacts. I could imagine, that either limiting `1/env` or the weight would result in less audible artifacts. I didn't know `expected`, that's interesting, thank you. Unfortunately we still C++17, and even our CI toolchain for MacOS doesn't support the full C++17 std lib, e.g. `<filesystem>`. I don't know the exact version numbers, but the oldest MacOS version we release Audacity for cannot deal with the most recent C++ versions.
Also, we are relatively lenient in terms of safety: we document functions with `@pre` conditions, assert these preconditions, but generally don't otherwise deal with error handling. You won't find this pattern often, where the return value is checked for error. Seems to work for us 🤷 On the other hand, unit-testing is encouraged, and I have been lazy doing this time... I will assert at the beginning of `FormantShifter::Process` like I should have, given the pre-condition stated in that methods documentation. Concerning this particular method, given its narrow scope, it usually is tolerated without. A remnant of me copying chunks from the [stftPitchShift repo](https://github.com/jurihock/stftPitchShift/blob/48042d72a43287676543950691d227732a46759b/cpp/StftPitchShift/Cepster.h#L48) to get started.
It's not a great protection, because, as you commented someplace else, the weights can still end up being huge. I expect this can happen if for some reason the input signal has a frequency region of near-zero values.
I'm about to push a protection that I think makes sense: the purpose of formant preservation is to boost or attenuate spectral regions by some reasonable amount of decibels. This commit will limit the amplification to +20dB, which is plenty for our purpose and then avoid crazy amplification. Since `env` has type `float`, I expect `1` to be typecast to float, too. But sure, it doesn't hurt adding the `.f`. Agreed, limiting the weights it will be. @Paul-Licameli would you be so kind to review that I pasted here your Discord message in a relevant way? I am confused. Why `lib-utility` instead of `lib-math`? `lib-math` depends on `lib-soxr`. I'm reluctant to let the time-and-pitch depend on this mainly because it compiles PFFFT functions which are also found in `lib-fft`, another dependency of time-and-pitch. I think this should be moved into a separate directory, and with `requirements.txt` Do you plan to have different implementation? Why is this a part of a logger (which is a logger otherwise)? I believe you only use it for tests. It's way too intrusive, TBH You use `FormantShifterLogger` directly here. This happens because `GetFftSizeOverride` must not be a part of it.

I think that you should have an empty logger for production and use FormantShifterLogger only for tests. 

Configurability must not be a part of logger. You do not utilize the interface again. Was there any need for it then? We spent a lot of time and effort to optimize it, it is weird to see it go.  Paul has introduced the class for aligned vectors, hasn't he? You go from SIMD to scalar algorithm, and I don't see any good reason for that And why is it a problem? It doesn't introduce a circular dependency. And probably, it should be called FastLog2 or whatever.  I don't like it, but I don't have a strong opinion, either I don't understand this point. Why do we need it deterministic? How much do we care about this determinism? 

Provided that `srand` modifies the global state I wonder if something like https://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine should be used instead. I understand that this is a new code, but I will stress that it is located in a known hot point Why this include is in the header?"
6146,2024-03-19T10:07:55Z,2024-03-19T13:59:49Z,saintmatthieu,0,1,2,40,4,1,1,['3.5'],,1,13914.0,0,0,0,0,15147285.268213,,0,2,1,False,[],,,"Resolves: #6062, #6092, #6140

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","perhaps a regex non-match for [0-9] would be more complete, but I can't actually find any language using something other than period or comma for a separator, so this probably works too. "
6129,2024-03-13T13:13:03Z,2024-03-16T16:12:32Z,Paul-Licameli,5,0,1,14,2,2,2,[],3928.0,0,425007.0,0,0,0,0,15243484.901924,,0,1,0,False,"['petersampsonaudacity', 'vsverchinsky', 'Paul-Licameli']","@vsverchinsky are the changes alone sufficient in master to get good enough performance, or should you also combine it with some of the other work in #6107?
 @Paul-Licameli Sorry for the late response. @chinakov's experiment shown that the difference isn't significant, so I'd say that we can merge your PR as is. Thank you! @Paul-Licameli 

Testing on W10 with the latest 3.5.0 master:  audacity-win-3.5.0-alpha-20240316+3c07b93-x64-msvc2022

Initial testing shows that import of a large MP3 file is now even worse - taking twice as long as with 3.4.2, but 3.4.2 is still slower than 2.4.2

2 hour stereo MP3 size 259MB

a) on 3.4.2 import took 46 seconds
b) on 3.5.0 master import too 1minute 25 seconds
c) on 2.4.2 the same import took only 35 seconds

I can probably find some time next week to do some more extensive testing with differing file types. @Paul-Licameli @dozzzzer @LWinterberg 

OK so I found some time to resurrect one of my old time testing macros (one for import testing)

I only ran a single import of a one-hour stereo file in various formats - the results are nowhere near as conclusive as yesterday's stark result.

![image](https://github.com/audacity/audacity/assets/50205984/c9e1584b-0914-4bc1-80cf-bfe872eea915)
orange cells = worst times
green cells = best times

I have an extended version of the Macro which allows me to run the import for each file type multiple times - I was thinking 5 or 7 to get a fair average.  I can probably find some time tomorrow to run this test
 @Paul-Licameli @LWinterberg @dozzzzer @crsib 

So I spent some time yesterday evening running a set of tests on 3.3.3, 3.4.2 and 3.5.0 latest master build.

My macro had 5 sets of imports of a one-hour stereo file in the various formats.
_This round of testing had me using the internal 1TB spinning metal D:drive that I have on my PC for my temporary project file location as with the 25 one hour imports the project filespace grw to just over 35GB - this filled my SSD C:drive when I first tried the macro._

![image](https://github.com/audacity/audacity/assets/50205984/da2b6805-79f4-4025-9ee0-c5af1ee3e569)
orange cells = worst times
green cells = best times

This appears to show that the latest 3.5.0 master is indeed an improvement in this regard on 3.4.2 and 3.3.3

Interestingly it is the MP3 import that shows the least improvement versus 3.3.3
@crsib  - might this be down to the method (tools) that we use to import MP3 files?",,"Resolves: #4999

This change may relieve most of the performance problem for import now in 3.5.  I recommend it for release.  Maybe parts of #6107 could also be cherry picked, if in fact the other problem of channel iteration is significant too.

The wave-clip-refactoring branch has other changes that solve the import performance problem.  In my opinion that branch still is very large and possibly risky in spite of all the testing done so far.  I do not recommend merging that branch to 3.5.  It should merge into 3.6 alpha, and another development cycle should allow for discovery of any other subtle bugs that branch may have introduced.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5989,2024-02-19T21:42:41Z,2024-03-15T10:57:37Z,vsverchinsky,4,8,1,62,2,2,1,[],43806.0,0,2121312.0,1,0,0,0,15503803.554775,,1,1,0,False,"['LWinterberg', 'petersampsonaudacity']","@dozzzzer 

Testing on W10 with @vsverchinsky 's latest branch build for this:  audacity-win-3.5.0-alpha-20240219+ab76a81-x64

Vitaly, unless the text after the final period is a valid audio file extension then the text after the last period is stripped and replaced with the appropriate file extension.

STRs
1. get some audio
2. File > Export Audio
3. in the File Name filed type:  a.b.c.d
4. press the Export button
5. Observe: file is exported as a.b.c.wav I note you can also export a filename which is all periods.

For example if you set the File Name to be four periods:   **....** 

the resulting exported file is three periods with a wav extension:   **...wav**  

@LWinterberg @Tantacrul 
Is this sensible?  Is this intended/desired behavior?

I suspect not. > the resulting exported file is three periods with a wav extension: ...wav
> Is this sensible? Is this intended/desired behavior?

It's not really sensible to name a file that way, but it is allowed. There's a convention that files starting with . are hidden files, so you often have files called .env, .config or .temp or similar in the inner workings of various programs.  BTW a similar issue occurs when you try to save a project with periods and without an aup3 extension

1. launch Audacity (3.4.2 or this test branch)
2. File > Save Project
3. set the project name to be **a.b.c**
4. Observe: project is saved as **a.b.aup3**Haven't understood everything and have to interrupt at this stage. Maybe when I get back to it @vsverchinsky will have provided helpful comments. Regex should be reworked. Other than that LGTM.",Haven't understood everything and have to interrupt at this stage. Maybe when I get back to it @vsverchinsky will have provided helpful comments. Regex should be reworked. Other than that LGTM.,"Resolves: #5823

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I've been trying to understand when this branch is reached, unsuccessfully. I'm having trouble understanding why `ValidateAndFixExt()` here, before the state of `this` was changed at all (at least AFAICS), is necessary. Would `mFullName->SetValue(fullname);` directly not have had the same effect as
```
      filename.SetFullName(fullname);
      mFullName->SetValue(filename.GetFullName());
``` So it's this `GetExt()` which is too lenient, right ? for `Artist – Track (feat. Artist)` returning ` Artist)` rather than an empty string.

The differentiation between the use cases where there is an extension but it doesn't match the format and where there is no valid extension isn't clear to me. I personally would have begun with building an extension getter function that behaves the proper way. But sure, it's hard to verify that this would really simplify the code below without trying it. There remains a problem, at least on Windows: with ""Artist – Track (feat.Artist)"" (no whitespace before ""Artist)""), ""Artist)"" is still going to be considered an extension and this branch will get executed, resulting in e.g. ""Artist – Track (feat.wav"".
I think there should be a proper filename extension regex here. Would `R""^([a-zA-Z0-9]+)$"" work? If you give that name to a file on Windows it will perfectly accept "".Artist)"" as file extension, though unknown may be.  Export plugin is allowed to change `FormatInfo` structure fields when user modifies parameters. The example is `ExportPCM` which actually is a wrapper for multiformat sndfile exporter. Publically it reports only two formats. First of them is specifically configures export to WAV, and the second one is called ""other uncompressed formats"", which mutates when you change the parameter that is related to the actual exported format. See `ExportOptionsSFEditor::SetValue` `wxFileName` is not a string, though it can be converted to a string and created from string. Likely the reasoning was that `filename->SetFullName(fullname) == fullname` isn't always the case. But in case when `fullname` originiates from filename it could be indeed overcomplication. Did a little bit of debugging. Changing the choice in that ""Header"" drop-down modifies the preferences and consequently the value returned by `mSelectedPlugin->GetFormatInfo()`, which plays a role in `ValidateAndFixExt()`.
Thanks for the explanation, it's an ... interesting world."
6080,2024-03-01T11:05:44Z,2024-03-15T10:56:01Z,vsverchinsky,0,8,1,8,1,3,1,[],,0,1209031.0,0,0,0,0,15503902.526684,,2,1,0,False,[],,,"Resolves: #5792

The bug seem to happen because `WaveChannel` intervals counting and interval access may happen on diffrenet objects due to inderection that may happen in `Channel::ReallyDoGetChannelGroup` when interval iterator dereferencing tries to access interval via `Channel::GetInterval`

NB: to reproduce bug you'll need to completely replace existing clip in the track with the pasted one

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What is it that I'm missing ...
Before this change:
```cpp
const ChannelGroup &Channel::GetChannelGroup() const
{
   assert(FindChannelIndex() >= 0);
   return DoGetChannelGroup();
}
```
After this change:
```cpp
ChannelGroup &Channel::ReallyDoGetChannelGroup() const
{
   return DoGetChannelGroup();
}
```
So what difference does it make?
I haven't been able to reproduce that bug. I suppose the clips don't actually need to be hours long? Mine were just a few seconds. > What is it that I'm missing ...

`ReallyDoGetChannelGroup` is a virtual function 😎 and it's overwritten in `WaveChannel` :
```cpp
ChannelGroup &WaveTrack::ReallyDoGetChannelGroup() const
{
   const Track *pTrack = this;
   if (const auto pOwner = GetHolder())
      pTrack = *pOwner->Find(this);
   const ChannelGroup &group = *pTrack;
   return const_cast<ChannelGroup&>(group);
}
```
`GetHolder()->Find(this)` may return track that is in fact different from `this` and that contains different amount of intervals.

> I haven't been able to reproduce that bug. I suppose the clips don't actually need to be hours long? Mine were just a few seconds.

For me crash occured on repaint event. So probably the length of the pasted clip is a important to reproduces this bug, because when you paste long clip UI thread isn't blocked and repaint events may slip into copying process. Ok, so there _is_ a need for the track to be stereo for the crash to happen, right? Paste happens, but the process is slow and repainting happens before the left channel is finished copied. At this stage, left channel has size 1, and right channel, 0, but the painting thinks both have size 1. Could that be the problem? I came across that problem in the recent past. Actually what I said doesn't make sense. If asking `NIntervals()` on the right channel of that yet incomplete stereo track, the painting would have got 0, which would be the truth ... Now it would say `1`, but that wouldn't be the truth anymore. So I wonder if fixing this place wouldn't break another one.
Do you know exactly which line crashed? I'll try to reproduce. Caught it: 
![image](https://github.com/audacity/audacity/assets/22740106/5f49d960-b0ce-436d-8ffb-6d4e9f7a59a0)
 Somehow the left channel has zero clips, and the right channel, 1 already. Now comes the messed up part ...
![image](https://github.com/audacity/audacity/assets/22740106/fb6c9731-6073-44e0-a252-770d2c1e8a2a)
Here, we ask the leader for its right channel (`channel == 1`), and that right channel asks for `Intervals()`, which is a range of of clips of size 1. But to get that `const auto pInterval`, the range dereferences, asking back to the leader track for the interval at index `0` and calls directly on it without a null-pointer check. But the leader track is empty 💥 

What your change does is that it will ask the leader for the number of intervals it has, which will be zero, so the range is empty, and no de-referencing happens.

I propose an alternative fix:
![image](https://github.com/audacity/audacity/assets/22740106/bba7bbce-acc5-4b71-9c12-bd0d7739f3e3)

At least we know that we're not breaking something else, and @Paul-Licameli 's refactoring may well provide a proper fix.
 Hm, I think you are right and the hotfix you are suggesting is correct and mine is not. I didn't consider that the problem comes from invariant violation. Obviously track could be inspected while being modified. I see Matt's long comment.  I expect this crash is not reproducible in the wave-clip-refactoring branch because of changes from channel-major to interval-major in pasting.

If this hot fix is merged to master, and master is then merged to wave-clip-refactoring to keep it current, the fix should then be reverted in that branch.
"
6094,2024-03-04T16:14:24Z,2024-03-14T12:26:36Z,Paul-Licameli,15,30,42,3698,83,2,1,"['Clips', 'refactoring']",79325.0,1,850336.0,0,0,0,0,15584879.721773,,0,42,0,False,"['saintmatthieu', 'Paul-Licameli']","Rebased unchanged onto updated dependency
 Rebased unchanged onto updated dependency
 Is destination master already ? I corrected the base branch
 The known crash bisects to 3fa777844e0bdee147d5d6f8a8b7dfff109eef85

I hoped I could remove those complications, and I verified that generating stereo pluck words.  But mono pluck crashes, as does tone or noise either mono or stereo.
 Please re-commence review of the commit sequence from the beginning and dismiss your first review if satisfied that there are no crashes.

But it’s not done yet.  Expect more steps in this transformation.

Yet I think that at last, this will be the last PR of this big fix of the foundations.
 Reviewed up to ""WaveChannel no longer contains WaveClipHolders..."" inclusively. Rebased onto updated base branch.

Some minor changes removing extraneous semicolons and improving commit comments.

The commit adding SwapChannels and MakeNarrow was removed.

One commit adding some assertions was added.
 Apologies for all the force-pushes.  Please review at least from ""The width of a WideChannelGroupInterval is not immutable"" onward.
 Sorry, more commits to review.  I decided there is something still unsatisfactory in Transactions.  It's not strictly part of the clip restructuring but it's not correctly exception-safe.  Also @vsverchinsky's debugging of import performance calls to our attention, the need to avoid unnecessary transactions.
 > I haven't commented on this in the wide-wave-track PR, but is there something that justifies `WaveChannel` inheriting `WideSampleSequence` conceptually?

Let's leave that alone.

At least one place where compilation will fail is where `WideSampleSource` is constructed in `PerTrackEffect.cpp`.

`WideSampleSource` lives in `lib-mixer` which doesn't know `lib-wave-track` but uses the `WideSampleSequence` abstraction.
 I found this in your `StretchingSequenceIntegrationTest.cpp`

```
   const auto numChannels =
      GENERATE(1 /*, 2*/); // When wide WaveTrack is implemented this test
                           // should also run in stereo.
```

You can decide what to do about it later
 I have fixed the infinite recursion.
 Force pushed onto updated base branch
 force-push with some squashing
Reviewed up to ""WideChannelGroupInterval's constructor takes number of channels"" inclusively.
There's a crash that's very easy to reproduce - see comment. Done with this iteration. Some questions that I'd like answered before I approve - which I look forward to! There's a stack overflow, at least on Windows - see comment.
(Not requesting changes because it's a pain to remove afterwards.)","Reviewed up to ""WideChannelGroupInterval's constructor takes number of channels"" inclusively.
There's a crash that's very easy to reproduce - see comment. Done with this iteration. Some questions that I'd like answered before I approve - which I look forward to! There's a stack overflow, at least on Windows - see comment.
(Not requesting changes because it's a pain to remove afterwards.)","Resolves: #6086

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Re-test all in https://github.com/audacity/audacity/pull/5965
- [x] Re-test all in https://github.com/audacity/audacity/pull/6071

And some more specific areas for attention (apologies for any duplication):
- [x] Creating, expanding, deleting cutlines (including nested cutlines inside of cutlines)
- [x] Test cutlines again, after making them in a stereo track, splitting stereo to mono, then expanding or deleting
- [x] Joining mono tracks to stereo loses cutlines (as in master)
- [x] A Nyquist generator (Pluck)
- [x] Saving and reopening of projects
- [x] Reopening of 2.x projects into this branch, including cases with misaligned clips
- [x] Edit > Duplicate, undo/redo, cut-copy-paste of mono and stereo tracks
- [x] Create one each of label, time, MIDI tracks; undo and redo, (label and MIDI:) cut copy and paste
- [x] Rendering of a clip with stretch; paste into a clip with stretch ratio difference
- [x] Watch waveform, spectrum, split views, when splitting, joining, swapping channels
- [x] for a given track, right clicking on it where there is a clip and where there is none still behaves.
- [x] Stereo to mono, also in spectrogram view, also with envelopes and cutlines
- [x] Mono to stereo, also in spectrogram view, also with envelopes and cutlines
- [x] Swap channels, also in spectrogram view, also with envelopes and cutlines
- [x] Effects: auto-duck
- [x] Effects: change pitch
- [x] Edge cases of pasting:  hidden data on the source and target clips, pasting exactly at the start or end of the target as well as at some middle point
- [x] Generating silence in a clip, when cursor is exactly at start or end, destroys smart clip data, as in master
- [ ] ","The first `false` is `backup`, which is the negation of `forClipboard` in the creation of `newClip`, but always `false` here. I wonder if that's correct. The execution of `RightClips();` crashes for me just when generating a mono tone:
```
WaveClipHolders &WaveTrack::RightClips()
{
   return mRightChannel->Clips();
}
```
`mRightChannel` is null. ... as well as when generating a tone on a stereo track. ... I realise now that this was that way already before this commit. So the change is conservative and if there is a bug related to this, it is not introduced herein.
 I'm debugging this now
 How? By mixing left- and right? I suppose that `pInterval->GetClip()` never equals `nullptr` ? In which case this could reduce to `const bool selected = selectedClip == &pInterval->GetClip();` - for clarity. The standard guarantees that the first assignment of this line gets evaluated before the second? Line 46 of this file has `using WaveClipHolder = std::shared_ptr<WaveClip>;`. Is it too soon to remove this alias? I was puzzled by `auto WaveTrack::RightmostOrNewClip() -> IntervalHolder`, wondering if it might return the last entry of `mClips` or if some wrapping was still necessary. I haven't commented on this in the wide-wave-track PR, but is there something that justifies `WaveChannel` inheriting `WideSampleSequence` conceptually? The two `FindClip` definitions in the anonymous namespace (at the time of writing lines 1510 and 1527) are now unused. Rename this `FindClip` ? `const` Will `origClip.mSequences.size() == 1` after this move? No need for a `Transaction transaction{ *this };` in this implementation? ""DiscardRight"" perhaps is a better name
 `GetClip` returns a reference and & is address-of.

We assume references always refer to an existing object.
 It's not an assignment, it's an initialization, and surely they are evaluated in sequence.
 Maybe one more cleanup commit is justified, to eliminate dual terminology.
 I should eliminate the inheritance and see whether things still compile.  But the abstract base class may be used somewhere.
 noted
 As I said, a terminology cleanup later
 ok
 Even if this were assignment and not initialization -- the `,` as an expression operator (not as the separator of declarations) also ensures sequencing.

The hazard you may be thinking of, is that in evaluation of arguments passed to a function, which are separated by commas -- then, yes, the sequence of evaluation is not specified.

 Not immediately.  You see that this function is only called under `WaveClip::SplitChannels` and before it exits, it calls `MakeNarrow` (or whatever I rename that to be) and that visits the main clip and recursively the cutlines.

 Intentionally so.

See #6107 which proposes a fix for the slow importing in the master branch.  That fix will conflict too much with wave-clip-refactoring, so if it is merged, it should be reverted before wave-clip-refactoring is merged to master.

I need an alternative fix for performance, and that is to remove the Transaction.  In fact I suggest #6107 also just remove it.

There is strong exception safety for operations on individual Sequence objects, meaning in case of exception, the previous state of the objects is restored unchanged.

There is only weak exception safety for WaveClip objects operating on multiple Sequences, unless there is also a Transaction, to handle the possibility that one Sequence is updated, but an exception happens during the update of the other.  Each Sequence remains self-consistent, but the WaveClip might not achieve strong exception safety, or the ""strong invariant"" condition of equal length sequences.

Recall PR #6089 which you reviewed.  I decided I can't easily guarantee that consistency always.  It reduced the programming effort to allow Append to violate the strong condition temporarily.



 See also the long commit on Append in the header file.
 Of course - I overlooked that it returned a reference. I cannot find the standard spec for that, but it looks like you're right - from left to right."
6071,2024-02-29T15:05:33Z,2024-03-06T14:13:51Z,Paul-Licameli,5,6,16,1917,132,2,1,"['Clips', 'refactoring']",73909.0,0,1120368.0,0,0,0,0,15664579.094881,,1,16,0,False,['Paul-Licameli'],"> Reviewed commits up to [43228ce](https://github.com/audacity/audacity/commit/43228cedb1ecbe62db4e99a4a973e059e342112b) exclusive. Best PR _ever_ !!

I have other candidates for that honor over all the years..

Do you know the term ""scaffolding?""

What I did in 3.4 was put some scaffolding in while figuring out a big transformation.  At last the building is sound enough to take the scaffolding down again.
 Commit ""Track::Duplicate and Clone return just a track, not a list"" introduced a crashing bug, for instance when generating noise.  The fix was that `DuplicateWithOtherTempo` must remove the second, output argument, which was no longer getting initialized.  You may see this change in my next force-push of this branch.
 @vsverchinsky you may wish to review at least the changes in import.
 Rebased unchanged onto updated dependency
 Rebased unchanged onto updated wave-clip-refactoring branch
Reviewed commits up to 43228cedb1ecbe62db4e99a4a973e059e342112b exclusive.
Best PR *ever* !!","Reviewed commits up to 43228cedb1ecbe62db4e99a4a973e059e342112b exclusive.
Best PR *ever* !!","Resolves: #6070
Resolves: #6072

Depends on
- #5965

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA
- [x] Wouldn't hurt to re-test every box of #5965 
- [x] Mix and render menu commands
- [x] Lengthening sync-lock adjustment of wave tracks
- [x] Loudness effect works correctly with mono tracks alone, and with stereo
- [x] Import Raw, with more than two channels, works as before
- [x] Change Speed effect
- [x] Effect preview play
- [x] Equalization
- [x] Generate silence
- [x] Noise Reduction
- [x] Paulstretch
- [x] Repeat effect
- [x] Change Pitch (high and low quality), Change Tempo (ditto), Sliding time/pitch shift effects
- [x] Compressor
- [x] At least one Nyquist effect and Nyquist generator
- [x] Cross-document copy/paste with hidden smart clip data
- [x] Edit > Duplicate
- [x] Split Cut
- [x] Split New
- [x] Edit > Labeled Audio menu commands
- [x] FIndClipping done once; then, done again on another track, re-using the same label track named ""Clipping""
- [x] Import MIDI
- [x] Import Ffmpeg
- [x] Import FLAC
- [x] Import MP3
- [x] Import OGG
- [x] Import Opus
- [x] Import PCM
- [x] Import WavPack
- [x] Shift + Click in track control panel to extend the range of selected tracks (either upward or down)
- [x] Track focus changes (up and down arrow keys moving the yellow border)
- [x] Mix and render examples of stereo with nontrivial envelope
- [x] Cross-project copy and paste, where project tempi differ, do the correct stretch on insertion
- [x] Ctrl- and unmodified-clicks on track control panels change track selection correctly
- [x] Clicks of icon buttons in mixer board (with or without shift, or ctrl) too
- [x] Click of right channel of partly visible track at top of viewport, correctly scrolls it into view
- [x] Updates of vertical ruler width for changes of track height or waveform/spectrogram scale type behave as before
- [x] Mute and solo buttons work as before
- [x] Edit > Audio Clips > Split
- [x] Click in right channel to delete or expand CutLine
","Shouldn't this be calling `CreateMany` ? So now `newTracks.size() == 1` ? Nice! Wait to read a later commit that makes the distinction in return types.
 Yes

In fact, I now think this commit needs to be in the previous PR for correctness of all stages of the transformation.

So I squashed it into a68333aad87a7dd417aa8ad73e5c8a8c3f8b5bbc
 Rename this `waveChannelVisitor`?"
6126,2024-03-12T16:16:42Z,2024-03-13T13:43:47Z,DavidBailes,0,0,1,9,1,1,1,[],,0,77225.0,0,0,0,0,15666655.023434,,1,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/6125

Problem:
If an audio track is selected, then when recording a new track, the actual sampling rate for the recording is the sampling rate of the selected track, rather than the sampling rate of the project. The sampling rate of the new track in the track control panel is the sampling rate of the project. So if these two sampling rates are different, this results in the recording with a changed speed.

Looks like the problem was introduced by this commit: 70b7487

Fix:
Only use the sampling rate of the selected track or tracks when appending to them.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5965,2024-02-16T12:07:05Z,2024-03-05T13:49:07Z,Paul-Licameli,12,30,37,3208,138,2,2,[],100297.0,1,2244306.0,0,0,0,0,15674552.966931,,1,37,0,False,"['saintmatthieu', 'Paul-Licameli']","Rebased unchanged
 Another rebase, with no change except one easy conflict resolution with 6110c4f5e73d90c367ba606c7a47bd8352c0f7c3
 Rebased to updated dependency branch

 Rebased, squashed some fix-ups, added a new first commit in the sequence
 Looking at `class WideChannelGroupInterval : public ChannelGroupInterval`, I'm wondering what need there is to distinguish the two. A channel _group_ is necessarily wide, isn't it? Rebased onto updated wave-clip-refactoring.  Made the newly merged in handle classes compile.  Removed the extraneous file.
 Two new commits which may resolve some of the problems you found.
 Rebased unchaged to updated base branch
 Merged master to wave-clip-refactoring, then rebased this with some squashing, and added to the QA checklist
 I discovered a problem, maybe noticeable only in debug builds.  Generate or record some sound, then use Reverse effect.  An assertion is violated.

I also observe that tracks can have duplicate shared pointers to a clip.
 > I discovered a problem, maybe noticeable only in debug builds. Generate or record some sound, then use Reverse effect. An assertion is violated.
> 
> I also observe that tracks can have duplicate shared pointers to a clip.

@chinakov should be aware - he currently is actively testing this card. @saintmatthieu please look at the two newest commits
@chinakov I'm afraid you might need to retest it all to be very sure
Reviewed commits up to [Define and use WaveChannelView::GetFirst and FindFirst](https://github.com/audacity/audacity/pull/5965/commits/539cd3c862caa97cae1df90274a29a935ab2edca) exclusively - to be continued Reviewed commits up to [Replace WaveClip with Interval in two more functions for time shift](https://github.com/audacity/audacity/pull/5965/commits/b93a44be31b3cfde0e79402d6108bc95c6a9826f), inclusive.
A crash bug was found, and I would like that the suggestion about the `const` method overload is applied. Review complete up to ""Fewer direct uses of WaveTrack::mClips..."" inclusively. Reviewed up to fa016813abed83226788e55566239ed485761759, inclusively.","Reviewed commits up to [Define and use WaveChannelView::GetFirst and FindFirst](https://github.com/audacity/audacity/pull/5965/commits/539cd3c862caa97cae1df90274a29a935ab2edca) exclusively - to be continued Reviewed commits up to [Replace WaveClip with Interval in two more functions for time shift](https://github.com/audacity/audacity/pull/5965/commits/b93a44be31b3cfde0e79402d6108bc95c6a9826f), inclusive.
A crash bug was found, and I would like that the suggestion about the `const` method overload is applied. Review complete up to ""Fewer direct uses of WaveTrack::mClips..."" inclusively. Reviewed up to fa016813abed83226788e55566239ed485761759, inclusively.","Resolves: #5624
Resolves: #5198
Resolves: #5159
Resolves: #6081

Growing pull request in progress will make a real wide WaveTrack structure, eliminating most need for the old
track list link flag, except during deserialization.

There will not yet be a real wide WaveClip, unified with the WideClip and WaveTrack::Interval notions.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Saving, closing and re-opening project with both mono and stereo tracks works, also if these tracks have effect stacks
- [x] Doing this across Audacity versions also works
- [x] If you have any old project that has a stereo track whose channels have different sample rates and/or sample formats, please try to open it, and see that the error messages are still as expected.
- [x] Moving clips from track to track, both mono and stereo, one or several at a time, still works.
- [x] The problem reported in #5264 hasn't reappeared.
- [x] Split stereo to mono -- including examples with nontrivial envelopes
- [x] Join mono to stereo, also mono tracks with different settings (e.g. color, level, mute/solo)
- [x] Use some Nyquist generator (e.g. Pluck) on both mono and stereo tracks
- [x] Delete clips from mono and stereo tracks
- [x] Mix Stereo to Mono in the Tracks menu
- [x] Generate noise, mono and stereo
- [x] Click and drag to zoom vertical rulers in waveform and spectrogram
- [x] Vertical ruler context menu items
- [x] Dragging of MIDI data too
- [x] Track > Duplicate for mono and stereo; also cut, copy, paste
- [x] Naming of new clips is unchanged when splitting, recording, etc.
- [x] Dragging clips (left, right, up, or down) is correctly prevented from making overlaps
- [x] Benchmark tool
- [x] Sorting of clips by name and by time
- [x] opening of 2.4.2 (or earlier) projects with mono and stereo tracks
- [x] Copy-paste with difference of stretch ratio
- [x] Swapping stereo channels, including with envelopes
- [x] Test some destructive effects
- [x] Rearranging sequence of mono and stereo tracks, dragging one up or down
- [x] Both R and Shift + R recording, mono and stereo
- [x] Simply making a new empty stereo track
- [x] Long undo/redo message, in the History window, after Mix and Render, correctly describes the new track as mono or stereo
- [x] Force-quit Audacity, then restart exercise crash recovery, either recovering or discarding
- [x] Open files from earlier versions (either .aup or .aup3) with misaligned clips
- [x] Reverse effect

","What is this for? The change on this particular line isn't needed. Same here (for the sake of clarity) I missed to update that comment in the pitch-shift PR, you may want to complete it. It should be the other way round, shouldn't it? Namely the `const` method has the implementation, and the non-const one const-casts. Otherwise there is no guarantee that your const method really doesn't modify your object.
I tried it, to make sure I wasn't overlooking something, you may copy-paste:
```cpp
auto WaveTrack::Interval::GetCutLines(WaveTrack& track) -> IntervalHolders
{
   IntervalConstHolders constResults =
      const_cast<const Interval&>(*this).GetCutLines(
         const_cast<const WaveTrack&>(track));
   IntervalHolders results(constResults.size());
   std::transform(
      constResults.begin(), constResults.end(), results.begin(),
      [](const auto& p) { return std::const_pointer_cast<Interval>(p); });
   return results;
}
``` Does the use of a shared pointer mean that note intervals may survive a note track? If we are sure it's not, using a `const NoteTrack&` would convey this information (and be more economic). Mistakenly added I was thinking of moving it to a nonmember function in wavetrackutilities Ditto This crashes. `iter` must not outlive the interval created by `RightmostOrNewClip`.
Looking for other places that use this faulty pattern, but a solution that prevents compilation of these would of course be ideal. I'm thinking that if `ChannelGroup::IntervalIterator<IntervalType>::mpGroup` were a weak pointer rather than a naked pointer, then
```cpp
std::shared_ptr<IntervalType> operator *() const
      {
         if (!mpGroup || mIndex >= mpGroup->NChannels())
            return {};
         return mpGroup->template GetChannel<IntervalType>(mIndex);
      }
```
at least would return a nullptr, not garbage, and this could be checked by the user. If the user doesn't do the check, we still have a crash, but at least it could help debugging? Couldn't find another usage that might have this problem. `pRight` is not used anymore. I remember from your explanation yesterday that you now needed to split the cloning implementation in two, sort of, but I can't remember why, if you could help me remember and understand this change. What steps exactly reproduce the crash?
 Avoids violating some `IsLeader()` assertions.  
 Put wave tracks into the temporary Tracklist objects before doing other things with them, while they are still not yet wide tracks.

 I don't understand -- delete the comment?  Or complete it, how?

Or you can do that as you will in master.
 I don't really agree.  It is not too hard by inspection of the non-const function to see that it doesn't change any data structure directly, but just exposes non-const pointers.  This pattern of the const calling the non-const with a cast is a common enough idiom.  The total lines of code is less as I did it.
 I like it as I wrote it.  Less is assumed about lifetimes of things this way.  Maybe intervals would survive.

I had reasons to rewrite WaveTrack::Interval to hold shared pointers, not references.  But I admit, there, the pointers are to WaveClip objects, not the track.
 Never mind, I understand the problem, which happened not to crash on the debug macOS build, but that was an ""accident.""
 ok Do the const-cast in the direction I propose and no inspection is needed anymore but that of the const-cast of the return type. Then the real implementation may grow and there still won't be a need for inspection. Your arguments not to apply this suggestion aren't solid. No.
 The reparenting is going to happen on the pre-condition that `index < mAttachments.size() - 1`, which means that,  if `mAttachments.size() == 2`, calling `Erase(parent, 0)` will reparent the remaining attachment but not `Erase(parent, 1)`. I still don't understand why reparenting is necessary, but this looks worth being pointed out. not used Shouldn't the modification `this->SetLinkType(LinkType::None);` be undone here? Great to see these gone!
I was expecting this commit to justify the previous one, a67b7aded083eea4a3fbdfb455e95801e49a60f6, but does it, actually? It is intentionally not stated as a precondition.

The idea of reparenting is that each attachment is informed when its numerical slot in the array changes.  There is no change for those before `index`.
 Precisely not!

The tentative stereo channel pair (as indicated by the ""leader"" attribute) is discovered to be ineligible to merge and so two mono tracks remain.
"
6082,2024-03-01T15:18:07Z,2024-03-11T14:30:30Z,saintmatthieu,1,5,4,186,12,4,2,"['Music', '3.5']",117.0,1,861143.0,0,0,0,0,15836654.475105,,0,4,1,False,['saintmatthieu'],"@vsverchinsky I remember your remark of a recent PR of mine you reviewed. It was one large commit and was tedious to review.
I haven't gone as far as making sure that each commit builds this time, but at least I've created individual commits where I simply move code around.",,"Resolves: #6021 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Ctrl+click on clip pitch or speed button resets the value to the default (causing the buttons to disappear)
- [x] Hovering over button shows tip in bottom left of Audacity window that Ctrl (Win, Linux) / Cmd (Mac) + click resets to default value.

Changing a clip's speed via the pitch-and-speed dialog or by ctrl-clicking the speed button ...
- [x] updates the selection to the new size of the clip (new behaviour)
- [x] throws a not-enough-room popup rather than overlapping with the following clip (like current master)
- [x] inserts an undo item in the project history, makes the project dirty and can be undone
",@LWinterberg your input please. `mTrackInterval.StretchRightTo(expectedEndTime)` duplication removed in next commit stray thought: Usually I see platform dependent stuff done as `#if __WXMAC__` These look good to me Or at least using [GetOperatingSystemId](https://docs.wxwidgets.org/3.0/classwx_platform_info.html#ab70a9c0bac9a38f05930e5f05a153cff)
6055,2024-02-28T12:33:36Z,2024-03-08T11:30:25Z,LWinterberg,0,0,1,5,1,1,1,[],,0,773818.0,0,0,0,0,16106652.337455,,0,1,0,False,[],,,Resolves: #6000 ,
6056,2024-02-28T12:51:34Z,2024-03-11T14:13:19Z,saintmatthieu,0,1,1,2,1,2,1,"['Music', '3.5']",,1,1041705.0,0,0,0,0,15837687.385891,,0,1,1,False,[],,,"Resolves: #6004

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`maxEndTime` is the start time of the next clip, and `expectedEndTime`, that of this clip after stretch. It's fine for them to be equal: clip boundaries abide by a closed-begin/open-end rule."
6089,2024-03-03T23:42:06Z,2024-03-07T14:40:02Z,Paul-Licameli,3,2,7,464,9,2,1,"['Clips', 'refactoring']",56998.0,1,313080.0,1,0,0,0,16181682.833385,,0,7,0,False,['Paul-Licameli'],"Rebased unchanged onto updated dependency
 Rebased unchanged onto updated dependency
 Rebased unchanged onto updated base branch
`bool WaveClip::Paste(double t0, const WaveClip& o)` seems to have a bug.","`bool WaveClip::Paste(double t0, const WaveClip& o)` seems to have a bug.","Resolves: #5156

Depends on:
- #6071

WaveClips are not yet ever stereo, but this is a preparation.

Weaken the WaveClip invariant, not to require equal lengths of all sequences.

That stronger condition is called the ""strong"" invariant.  It is required for certain mutating
operations that insert or delete in the sequences.  There is a method to repair the
WaveClip when this is not so by appending silence to the shorter sequence.

The strong condition will be violated often, as appending to stereo tracks is still
done in many places in a channel-major fashion, alternating channels.

In most cases this temporary misalignment is soon repaired.  In generators (including
Nyquist), new mono tracks are zipped, and the zipping function refuses to do it if
it would violate the strong condition.

The one possible gap is in exception handling during recording, which attempts to
save as much as possible of the recording.  There is an attempt now to repair the
misalignment in that contingency too.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Record
- [x] Pencil tool
- [x] Generators, and some destructive effects
- [x] cut,  with and without the making of cut lines
- [x] paste, including pasting exactly at the start or end of a clip
- [x] Lengthening sync Lock adjustment
- [x] Silence command (not generator) or the Silence edit toolbar button
- [x] Recording interrupted by exhaustion of drive space loses at most one block (about 5.9 seconds with default sample format and rate)


","Looks like a bug: `dup` gets destroyed when this scope closes, making `pOther` unusable. Sharp eyes
"
6103,2024-03-05T16:59:32Z,2024-03-06T14:54:23Z,crsib,0,0,14,4685,98,0,0,[],,0,78894.0,0,0,0,0,16267222.928394,,1,14,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6101,2024-03-05T12:15:34Z,2024-03-05T16:10:44Z,crsib,0,4,13,1483,42,2,1,['3.5'],,0,14114.0,0,0,0,0,16349043.219222,,0,13,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Indentation Not used Indentation, here and in few other places in the `Adds RequestPayload class` commit Oh heck"
6099,2024-03-05T10:01:28Z,2024-03-05T11:44:16Z,crsib,0,0,1,33,3,1,1,['3.5'],,1,6171.0,0,0,0,0,16365032.278873,,0,1,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6093,2024-03-04T15:26:22Z,2024-03-04T18:40:03Z,crsib,2,0,2,11,2,1,1,['3.5'],2974.0,1,11625.0,0,0,0,0,16426486.479741,,0,2,1,False,"['crsib', 'vsverchinsky']",I don't think that this PR requires QA. @vsverchinsky what do you think? Agreed,,"This PR backports the CI changes made in `beta-3.5.0` branch. These changes are needed to unblock Notarization on Apple platforms.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6098,2024-03-05T09:27:31Z,2024-03-05T09:54:00Z,crsib,0,4,1,77,4,2,1,[],,1,1591.0,0,0,0,0,16371652.086188,,0,1,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","shouldn't it be `size < 3 || size > 4`? typo: `pathc` I was tentative between 1 and 2 required numbers and decided to have 2 :-) Fixed, thank you!"
6064,2024-02-29T11:21:44Z,2024-02-29T12:02:25Z,LWinterberg,0,0,1,63,1,1,1,[],,0,2669.0,0,0,0,0,16795722.707415,,0,1,0,False,[],,,,
6061,2024-02-28T21:58:02Z,2024-02-29T09:35:17Z,Gootector,0,0,1,18,1,1,1,[],,0,41835.0,0,0,0,0,16804779.762713,,0,1,0,False,[],,,"Update German from Transifex
Unification of these strings.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6060,2024-02-28T21:36:14Z,2024-02-29T09:34:13Z,Gootector,0,0,1,4,1,1,1,[],,0,43079.0,0,0,0,0,16804844.861706,,0,1,0,False,[],,,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6038,2024-02-26T04:14:06Z,2024-02-26T08:04:29Z,Gootector,0,0,1,20,1,1,1,[],,0,13824.0,0,0,0,0,17069428.978939,,0,1,0,False,[],,,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6020,2024-02-22T10:44:42Z,2024-02-25T13:15:37Z,Paul-Licameli,1,0,1,6,1,1,1,['bug'],21010.0,1,268259.0,0,0,0,0,17137159.660912,,1,1,0,False,['petersampsonaudacity'],"Testing on W10 with @Paul-Licameli 's branch build for this fix:  audacity-win-3.5.0-alpha-20240222+f24e454-x64

Works a treat again in Paul's branch on Windows",,"Resolves: #6019

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
6029,2024-02-23T11:26:43Z,2024-02-23T14:11:16Z,LWinterberg,0,0,5,84,13,1,1,[],,0,18323.0,0,0,0,0,17298175.215351,,0,5,0,False,[],,,"git mishap re-PR

Fixes: https://github.com/audacity/audacity/issues/5894",
5953,2024-02-14T03:58:07Z,2024-02-23T12:00:49Z,JoeS209,1,0,2,10,1,1,1,[],588768.0,0,806562.0,0,0,0,0,17314453.885609,,0,2,0,False,['JoeS209'],"Anyone?
looks good to me. A quick test shows it functions now, though I'll leave more thorough testing to QA. ","looks good to me. A quick test shows it functions now, though I'll leave more thorough testing to QA. ","Resolves: #5639

1) Add null check to GetSampleRateList().
2) Ensure ffmpeg is loaded in FFmpegExporter class.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5895,2024-01-25T11:15:21Z,2024-02-23T11:16:30Z,LWinterberg,0,3,5,84,13,1,1,[],,1,2505669.0,0,0,0,0,17317113.804424,,0,5,0,False,[],"I never liked the stupid pin image.  Bye!
","I never liked the stupid pin image.  Bye!
","Resolves: #5894 
","Commit #2 eliminates the pin images.

Great!  You know I implemented the needed drawing code for the pinned play years ago, but -- the silly pin button image was NOT my idea and I never liked it.  Let it just be a triangle.

However -- what you also lose here, is the alternation of the color of the triangle between green for play, and red for record.

Are you sure you want that too?

 I see commit number 3 still colors the triangle on the timeline either red or green, even if the button is always green.
 Now, I have reviewed to the end, and I understand the button is an unchanging gearwheel.

OK, I have no objections to anything.
"
5952,2024-02-13T17:16:55Z,2024-02-22T11:52:54Z,saintmatthieu,9,30,4,1895,25,5,1,[],98671.0,0,767499.0,0,0,0,0,17391992.252051,,3,4,0,False,"['saintmatthieu', 'chinakov', 'Paul-Licameli']","The build fails, in both commits.

Remember `-Daudacity_use_pch=NO` in your Cmake variables.
 I fix the build, try to run it, generate noise -- and there is a crash.
 So it was at least in a debug build.
 @Paul-Licameli thanks for your comments and help, I just pushed fixes.
I moved back this ticket to the progress column because of https://github.com/audacity/audacity/pull/5952#discussion_r1489495326. The CI builds still fail
 The build is still failing
 You still need `<wx/frame.h>` in WaveClipUtilities
 And the last commit causes new compilation errors
 ![image](https://github.com/audacity/audacity/assets/139755141/7329b223-7b60-479c-b6a3-b1d99b00c488)

https://github.com/audacity/audacity/issues/5959 this has not been fixed by this PR. The issue is still present on Linux.",,"Resolves: #5901

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] See if by chances it fixes #5959 (not mandatory)

","It seems like there have been some wires crossed here - the overflow button should summon the clip context menu. Clicking on the pitch/speed numbers should summon the dialog.  Do not put this here.

Just put in the file where the sole call to it is.

Besides which:  this change is extraneous to what the first commit comment says.
 This deletion is one cause of failure of compilation of the first commit
 `#include <wx/gdicmn.h>` for `wxRect` is another needed change
 As I said, I don't like enlarging this file with the new function, but `#include <wx/frame.h>` would be needed to fix its compilation
 I dislike so called ""utility"" files unless the things put into them really are needed in more than one place.
 I could fix the first commit so it compiles -- but then the second fails to link!  You neglected to add the new files to `CMakeLists.txt`.  Also the new files should have banners.
 After I fix CMakeLists.txt, still, to build I must add:

```
#include <wx/window.h>
``` Again, I don't see the need to move the code -- but also I notice, `SelectInterval` is lost.  Intentional?
 I was mistaken -- I see it is used in more than one place, now that I fix CMakeLists.txt and rebuild.
 For me, the debug build was violating an assertion in wxWidgets, but my build didn't have debug symbols and I couldn't see wxWidgets source code.

After some trial and error, I figured out that replacing `wxColour{}` with `*wxBLACK` was a sufficient fix.
 > SelectInterval is lost
It's a tentative removal. The clip still remains selected after the dialog is closed even without. I intended to ask @crsib if he remembered why he added this in 65d23cf019fe465c852a06314981544fc9699dab. That was literally the task to select the clip on right click. @LWinterberg probably has more details. I feel foolish now -- yes, just making it happen at button-up not down was the right thing!
 Need `weak_from_this()` for third argument
 `this` may not survive by the moment handler is invoked. I think it would be safer to grab weak pointers explicitly. `AudacityProject` has `std::enable_shared_from_this` in its base. Could be shortened:
```
if (affordanceRect.IsEmpty() || title.empty())
   return {};
``` not a clipped clip, documentation for `GetClippingBox` says:
> Gets the rectangle surrounding the current clipping region.
> If no clipping region is set this function returns the extent of the device context.

The clipped clip rect is what will be returned if `hasClipRect` is `true`.
Otherwise I like the motivation to eliminate one call to `GetClippingBox` Could you please explain what ""lowlit"" and ""hightlit"" mean? ""Modern"" way: pass `shared_ptr`s by value, and use `std::move`
https://clang.llvm.org/extra/clang-tidy/checks/modernize/pass-by-value.html When I have an expression under `if` statement that spans across multiple lines then I prefer to enclose the body of the branch into `{ }` that make code much more readable to my taste You could avoid introducing extra name `ClipButtonTag`:
```
template<ClipButtonId ID>
class ClipButtonSpecializations final
{
public:
   static bool NeedsDrawing(const ClipInterface&);
   ...
};
extern template<> ClipButtonSpecializations<ClipButtonId::Overflow>;
...
``` :eyes:
https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-const-or-ref-data-members.html
Not the case in that particular set of arguments, but I don't like the idea of wrapping arguments into a structure to shorten the list...  Would be nice to reset `weak_ptr` in `Release` and `Cancel` `label` should be passed by value then, not reference.
`move` on `iProp` is redundant OK, fixed in later commit I agree. Nice! First time I read something like this. I do see advantages. I thought about it, but couldn't think of a situation where it could change behaviour."
5977,2024-02-17T03:45:15Z,2024-02-22T11:28:58Z,tkna91,9,0,1,2,1,1,1,[],228397.0,0,459824.0,0,0,0,0,17402767.257797,,0,1,0,False,"['tkna91', 'LWinterberg', 'imciner2']","Do we know that the x11 environment/xwayland is always available? If systems without exist, I believe this change would break Audacity on them. 

I see in the [docs](https://developer-old.gnome.org/gtk4/stable/gtk-running.html#id-1.9.4.2.13) that there'd potentially an easy fix to that: 

> This environment variable can contain a comma-separated list of backend names, which are tried in order. The list may also contain a *, which means: try all remaining backends.

so `GDK_BACKEND=x11,*` would probably make this safe everywhere. Sorry, I was including a link to the gtk3 documentation.
If the next Audacity will use gtk4, it would be better to include a link to the following documentation
https://docs.gtk.org/gtk4/running.html#gdk_backend ah, actually, it doesn't work. Audacity uses wxwidgets, and for compatibility reasons we build with GTK2. I see [the * thing goes back at least 10 years](https://gitlab.gnome.org/GNOME/gtk/-/commit/632ee007a46dfb869f8b2f2598c54f9d19f06cdb), but that's not enough to reach GTK2 apparently. Please do an interactive rebase and drop the commit with my suggestion, then force-push.

Anyway, this means we actually have to answer the question: Do we know that the x11 environment/xwayland is always available for anything that uses the .desktop file? I will research that. Okay, so: 

* RedHat is dropping the xorg server, but explicitly keeping the x11 environment (xwayland) around. 
* BSD seems to still run xorg most of the time.
* Online forks of Audacity may or may not use broadway, but given that online services only need the maintainer to update this (and not every individual end user), it'd be fine.
* Gnome 40+ has an xwayland-on-demand thing which would launch xwayland only when an app requests it (which we'd do here)
* Outside of a few arch users, I have not seen any attempts to ditch xwayland by anyone.

Given that (and given that Mac and Windows don't care if you break the .desktop file), I think it's safe to assume that x11 is present in some capacity. Fedora has already been carrying a patch adding this for at least the last 3 or so years: https://src.fedoraproject.org/rpms/audacity/blob/rawhide/f/gdk_x11_backend.patch @LWinterberg That is, `GDK_BACKEND=x11,*` is not good and `GDK_BACKEND=x11` is good. right?
But I am having a hard time understanding why.
Are you saying that the `x11,*` values are not supported in GTK 3.0-3.9.x and may cause malfunctions?

- https://developer-old.gnome.org/gtk2/2.24/gtk-running.html
- https://docs.gtk.org/gtk3/running.html#environment-variables
- https://docs.gtk.org/gtk4/running.html#gdk_backend @LWinterberg No, no. You simply want me to organize my commits in the form `GDK_BACKEND=x11,*`? > @LWinterberg That is, GDK_BACKEND=x11,* is not good and GDK_BACKEND=x11 is good. right?

correct. Simply drop my suggested change, you had it right the first time. 

> But I am having a hard time understanding why.

It seems like old GTK does an exact string comparison, while new GTK does a substring comparison.

> Fedora has already been carrying a patch adding this for at least the last 3 or so years

That's good to know. I imagine you're not aware of anyone running into problems because x11 is missing either then, correct? @imciner2  > That's good to know. I imagine you're not aware of anyone running into problems because x11 is missing either then, correct? @imciner2

No, we've never had any problems reported by any users when using this. We first introduced this to fix https://github.com/audacity/audacity/issues/459, actually.",,"Add GDK_BACKEND=x11 to Exec env

Resolves: https://github.com/audacity/audacity/issues/4247

Add GDK_BACKEND=x11 to Exec env
Resolve memory leak during Wayland recording using Xwayland 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior",
5976,2024-02-16T21:25:06Z,2024-02-20T14:05:46Z,dg-no-9,2,0,1,9,1,1,1,[],5717.0,0,319240.0,0,0,0,0,17566162.52943,,0,1,0,False,"['petersampsonaudacity', 'dg-no-9']","
Behavior after the fix.
https://github.com/audacity/audacity/assets/3023753/cf75c402-c7fd-4ed9-9812-923dd49dcd00

 For my test results on @dg-no-9 's fix for this in his branch this see:

 **v3.4.0 Metadata set default not working on audio export #5494** 

But basically, the bug as stated appears to be fixed in this test branch",,"Resolves: [v3.4.0 Metadata set default not working on audio export](https://github.com/audacity/audacity/issues/5494)

Tags::LoadDefaults() needed some re-doing as it had some issues left while refactoring.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5921,2024-02-06T11:59:36Z,2024-02-20T16:42:38Z,Paul-Licameli,3,4,8,526,35,2,2,[],607830.0,0,1226586.0,0,0,0,0,17556746.714167,,1,8,0,False,['Paul-Licameli'],"Sorry, only the last seven commits are proper to this pull request.  The rest belong to its dependencies.
 Rebased without changes
 Rebased again
This PR also includes the colour-index change, but it's not mentioned in the description. (I reviewed that part as well.)
QA checklist will be long, will add what I can think of.","This PR also includes the colour-index change, but it's not mentioned in the description. (I reviewed that part as well.)
QA checklist will be long, will add what I can think of.","Resolves: #5693
Depends on
- #5653

WaveTrack::DoOnProjectTempoChange becomes interval-major.

More than that:  there is library restructuring to remove all mention of ""tempo"" in lib-track.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
This is purely a refactoring PR, there should be no behavioral change. In particular, verify that:
- [x] Copy-paste audio, label and note tracks across projects with different tempo still preserves length in beats-and-measures view (like it does on master).
- [x] Same when changing project tempo: audio, label and note track beat length is preserved.
- [x] Clip speeds are persistent after closing and re-opening of project.
- [x] Name of new or replaced track is correct when using the mix-and-render command.
- [x] Tools > Run Benchmark now succeeds!  (It does not in master!)
","I don't expect this to convey more than just the insertion of a new clip, so I think something like `WaveTrackNewClipMessage` would be more informative. IIUC, this is to know whether the clip's colour should be overwritten, and this depends on whether it's the copy of a clip from another track or a freshly created clip.
If I'm right, I'd much prefer it to be called `fromOtherTrack` or similar. It denotes precisely the intention, and I don't really know what ""new clip"" means anyways. Ignore this commit
 Ignore this commit
"
5979,2024-02-19T08:23:54Z,2024-02-20T09:42:05Z,saintmatthieu,1,1,1,18,2,1,1,['Music'],91084.0,1,91091.0,0,0,0,0,17581985.996316,,0,1,1,False,['saintmatthieu'],"> I have just one, quite minor concern. It's not blocking for sure

Addressed. Squashed and hard-pushed.I have just one, quite minor concern. It's not blocking for sure","I have just one, quite minor concern. It's not blocking for sure","Resolves: #5906 

A use of PFFFT was forgotten in #5950

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think, but I might be wrong, that const ref should be used now in this place. `x` is no longer used in place, and the ownership of `x` is not transferred on the main branch"
5653,2023-11-19T21:18:55Z,2024-02-19T17:44:17Z,Paul-Licameli,16,16,7,613,21,3,3,"['Clips', 'refactoring']",137189.0,1,7935925.0,0,0,0,0,17639451.618275,,0,7,0,False,"['crsib', 'chinakov', 'Paul-Licameli']","I think you wrote enough to convince me to redraft this.
 Rebased to recent `audacity/wave-clip-refactoring` and resolved an easy conflict
 Rebased to updated base branch.  No changes, no conflicts.
 If a User has a **non-default** color for a Stereo track, and then:
1. Swaps Stereo Channels - the audio track reverts back to default color (blue)
2. Splits Stereo Track - the last audio track reverts back to default color (blue)
3. Splts track to Mono - the last audio track reverts back to default color (blue)

This behaviour has been changed from the last release version. 

If a User has non-default colors for 2 Mono tracks, the behaviours for joining and mixing and rendering are not changed from the last release version. 
 > Recording or generating into a track uses the wave track color

Generating indeed does use the wave track color, but recording into said track still preserves the default track color (blue). 

Pictured: Recording preserve default blue color, generated audio preserves custom color defined by the User.
![image](https://github.com/audacity/audacity/assets/139755141/85ef4130-f9bb-476a-8e03-130819019634)

 Another issue: if a User opens a project with differently coloured clips within one track, one of the channels will be reverted back to default color. 

Take a look at the last track in the project. 

How it was saved in your Branch Build:
![image](https://github.com/audacity/audacity/assets/139755141/d68e3701-9b90-4c37-9d5f-0b9e38969af5)


How it was opened in Current Release Version:
![image](https://github.com/audacity/audacity/assets/139755141/0e96b5c8-37a4-4070-90e1-80d244e9cac0)
 > If a User has a **non-default** color for a Stereo track, and then:
> 
>     1. Swaps Stereo Channels - the audio track reverts back to default color (blue)
> 
>     2. Splits Stereo Track - the last audio track reverts back to default color (blue)
> 
>     3. Splts track to Mono - the last audio track reverts back to default color (blue)
> 
> 
> This behaviour has been changed from the last release version.
> 
> If a User has non-default colors for 2 Mono tracks, the behaviours for joining and mixing and rendering are not changed from the last release version.

Considering this problem, I now realize that this issue must depend first on fixing #5530 
 As you understood, ""Cache"" is now a misnomer and the next commit renames them as ""Attachments"" to WaveClip.  The are attached data on the clip getting certain notifications of events in the clip's lifetime.

Some attachment on WaveClip removes the irrelevant mention of color from lib-wave-track which shouldn't be there.

I did reuse existing WaveClipWaveformCache to define the override of WriteXMLAttrubutes.  If you don't like it, it's easily done to make another class just to hold the color with its own registered factory.  I didn't see that as necessary.

I don't like it that clips are now mentioning stretches and pitch shifts (also serialized data) and would put them in WaveClip attachments too.

 Force pushed with changes that separate the attachments for colors, from the other attachments that really perform only caching.
 Looks like you forgot to push. Rebased without change to updated wave-clip-refactoring branch
 Doing this hard work once will make it easier the next time for the application to decorate WaveClip non-intrusively with other information not essential the clip's purpose as a container of samples.

Already since I prepared this, WaveClip got polluted with pitch shifting stuff that should instead use this mechanism.
 Rebased without changes
 One new commit for review
 Rebased onto updated dependency branch
 Rather than simply rewriting SetWaveColorIndex as interval-major, better to remove completely from lib-wave-track, any mention of extraneous display related things.

Some surprisingly roundabout solutions are needed with attached objects on WaveTrack and WaveClip, but they may prove useful in future to attach other extra information to tracks and clips non-intrusively.
This PR introduces new complier warinings
`ClipListListener` feels a bit unfinished and fragile I am really confused by this PR, I will wait before the parent branch is merged and this PR is rebased before giving it a new round of review.

Reviewing it commit-by-commit makes it hard to understand if there is a simple way to improve it and I am seriously concerned by some of the decisions made in it. 

I cannot approve it as it is. This is an incredibly complex PR addressing a minor problem. I don't like some decisions made here, but I don't want to block your branch either.","This PR introduces new complier warinings
`ClipListListener` feels a bit unfinished and fragile I am really confused by this PR, I will wait before the parent branch is merged and this PR is rebased before giving it a new round of review.

Reviewing it commit-by-commit makes it hard to understand if there is a simple way to improve it and I am seriously concerned by some of the decisions made in it. 

I cannot approve it as it is. This is an incredibly complex PR addressing a minor problem. I don't like some decisions made here, but I don't want to block your branch either.","Resolves: #5652
Depends on #5828

QA:
- [x] Changing of wave track color with the track's menu
- [x] Mixing-and-rendering keeps color setting of the first mixed track;  then splitting to mono channels keeps same in both
- [ ] Recording or generating into a track uses the wave track color
- [x] Dragging clips from track to track preserves clip color, even if one track then has multiple colors
- [x] Mix-and-render names the new track as before (either ""Mix"" + number or keeping name of the sole track)
- [x] ""Get Info"" macro command for clips reports correct colors
- [x] ""Set Clip"" macro command, for colors
- [x] ""Set Track Visuals"" macro command, for colors
- [x] Cut/Copy then Paste of tracks (in or cross-project) preserves colors
- [x] Pasting or generating sound into an existing clip does not change its color
- [x] When a clip lengthens for sync lock with another track, its color does not change
- [x] Splitting a clip colors both as the original
- [x] Undo and Redo of all of the above
- [x] Waveform, Spectrogram panning and zooming are not slower
- [x] Persistency of wave track color settings, and of clip color
- [x] Opening in 3.4, a project that was saved in 3.5, works with correct colors; and oppositely

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","When included from another library that macro will expand into
```
template struct __declspec(dllexport) ClientData::Cloneable<WaveClipListener>;
...
```
 I see many C4661s:
```
'ClientData::Cloneable<WaveClipListener,ClientData::UniquePtr>::~Cloneable(void)': no suitable definition provided for explicit template instantiation request
``` There is also at least one `mClips.push_back` in `InsertClip`, which is used in many places. But `InsertClip` may start send lots of redundant/unwanted messages on projects that have many clips. So I don't understand why `OnNewClip` is not in `InsertClip`, but simple insertion of it seem to be too ""dirty"" fix. Why not observer? `deserialization` flag feels like extra parameter My guess is that there will be an extra call to `SetColorIndex` during deserialization: one from `OnNewClip`, and second in `HandleXMLAttribute`, right? As linked in CRTPBase.h, it's recommended here:

https://learn.microsoft.com/en-us/cpp/cpp/general-rules-and-limitations?view=msvc-170

I use the same in `extract-lib-note-track` which has passed code review but is not yet merged into master.
 See the bottom of that page
 I see the same in the logs for the build of `extract-lib-note-track`.  I think I should instead give an inline '{}' body to the dtor in the class definition and let the linker de-duplicate it.
 How would I create the observers and the subscriptions if WaveTrack is the publisher?

Each new WaveTrack must inform its own listener, which has its own separate state (the wave track color), of the event of addition of clips.

So the listener must be created too with each WaveTrack -- and that's where `ClientData` is useful, if also I use `BuildAll` instead of creation on demand.  It allows hooking of a constructor of a class.

And I need `BuildAll` so that the new attached object is present from the beginning, before any clips are created or deserialized.

But you are right that I could then also use Observer instead of this class.

There is the problem of getting deep-copy right, but that is what `Reparent` is for.
 I'm not sure of the complete set of messages that will be useful in future.  I could easily use Observer and an enumeration now for creation, deserialization, deletion, ... 
 Yes, does it matter much?

It would matter in case a file serialized wave color without clip color, but then the clip colors would still be initialized.

I don't think there are any such legacy files, though.
 I think we should revise the usage of CRTPBase in a separate PR. I have opened a task for that #5704 Serializable cache is not a usual thing, TBH I think this violates SRP and in a bad way. I missed it somehow, during the first pass of the review, but it caught my eye when I saw color index serialization in the wave cache. I have a strong opinion that the fix is worse than the problem. I understand that it is pointless to argue. Otherwise, my review would've ended here."
5951,2024-02-13T13:55:13Z,2024-02-16T15:09:51Z,vsverchinsky,5,0,1,82,2,1,1,[],4744.0,0,337050.0,0,0,0,0,17834550.269885,,0,1,0,False,"['SteveDaulton', 'petersampsonaudacity']","Testing on W10 with @vsverchinsky 's latest branch for this:  audacity-win-3.5.0-alpha-20240213+848d528-x64

I observe the for all EGATs The **Apply/Generate** button has been moved to the bottom of the EGAT dialog window and a **Cancel** button has been added (back) also in the footer.

![image](https://github.com/audacity/audacity/assets/50205984/dda6e539-e9d1-4d06-8099-858182c9a822)

_This is a much more ""conventional"" position for action buttons in a dialog._
 @DavidBailes  wrote earlier in #4205 

>I think that a more natural place for the preview button would be at the bottom, as in previous sketches: https://github.com/audacity/audacity/issues/3615#issuecomment-1385705419
>
>A user reads down the parameters, maybe changes some on the way and then presses the preview button at the bottom.

@LWinterberg @DilsonsPickles @Tantacrul @vsverchinsky @crsib 

I am minded to agree with David as the **Preview** can also be regarded as an action button.

See also:   **Move OK/Cancel/Preview down in EGATs #3615**  Considering that the natural flow is to set the parameters first before previewing, it seems strange to have the Preview button at the top.

Nice to see the return of the Cancel button. Testing on W10 with @vsverchinsky 's subsequent branch for this:   audacity-win-3.5.0-alpha-20240214+3a68083-x64

The EGATs' footers in Vitaly's latest branch now have buttons for **Preview**, **Cancel** and **Apply**
The Preview is left justified and the Cancel & Apply are right justified in the dialogs
![image](https://github.com/audacity/audacity/assets/50205984/45ddbe5d-b0d1-41bc-bf3e-f34ea1c73e02)

![image](https://github.com/audacity/audacity/assets/50205984/190a2b65-42c3-48c5-900a-4d53c9ac008e)


Looks good to me.
 I am in the process of updating the Manual for this change (about 40% done so far - it's a long job).

And I have to say that these EGATs look SO much better with the action buttons back in the footer.

Thanks for fixing this.",,"Resolves: #4205
Resolves: #3615 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5950,2024-02-13T12:24:33Z,2024-02-16T16:14:37Z,Paul-Licameli,8,1,6,489,21,1,1,[],6393.0,1,273012.0,0,0,0,0,17904029.067869,,1,6,0,False,"['saintmatthieu', 'crsib', 'Paul-Licameli']","There was some discussion in another channel.  @crsib give an opinion.

@saintmatthieu doesn't trust this because the allocation and destruction functions weren't hit in the debugger.  But what I wrote was not what was compiled in his build.

For unknown reasons my code compiles in CI for all Windows build but did not compile on Matt's machine.
 Do you use Debug configuration @saintmatthieu ? > Do you use Debug configuration @saintmatthieu ?

Yes. Now I do get the allocators hit.
I can't build in `Debug`, though, compilation errors, have to use `RelWithDebugInfo`. Is the debugging experience really as good as in `Debug` ? @crsib > Now I do get the allocators hit. I can't build in `Debug`, though, compilation errors, have to use `RelWithDebugInfo`. Is the debugging experience really as good as in `Debug` ? @crsib

Paul fixed this. I’m redrafting it though I think a redefined allocator is a neater solution, but there is more to it than a redefined deleter for unique_ptr.  I’m less familiar with this technique and muffed my first attempt a little! > Is this constant valid, though? The library aligns memory regions to 64 bytes, but this is not required by the instruction sets it uses internally (SSE2/Neon).
> 
> Probably, it doesn't harm, so I won't block this PR for this reason.

Yes, that is the weak point, but at least the magic number 64 is in only once place, reproducing a detail hidden in the pffft sources.
I don't see anything wrong with this code and I don't want to be picky about the names",I don't see anything wrong with this code and I don't want to be picky about the names,"Resolves: #5906

Alternative fix for misalignment of buffers passed to pffft uses a non-default
allocator in std::vector.

Also PffftFloats is a pointer, always to the start of aligned span of floats (but agnostic
about the memory management).

Also moves FFT related files out of lib-math.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this constant valid, though? The library aligns memory regions to 64 bytes, but this is not required by the instruction sets it uses internally (SSE2/Neon).

Probably, it doesn't harm, so I won't block this PR for this reason."
5933,2024-02-09T11:44:22Z,2024-02-16T15:10:42Z,vsverchinsky,0,0,1,9,2,1,1,[],,0,617222.0,0,0,0,0,17907831.452994,,0,1,0,False,[],,,"Resolves: #5638

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5949,2024-02-13T11:42:11Z,2024-02-16T15:07:53Z,vsverchinsky,6,0,1,12,3,1,1,[],5960.0,0,271615.0,0,0,0,0,17907970.545616,,0,1,0,False,"['crsib', 'LWinterberg', 'petersampsonaudacity']","Can you please add the checkbox to the scan dialog as well? ah, I hadn't thought of putting it there as well, but I support that idea. > ah, I hadn't thought of putting it there as well, but I support that idea.

It was so natural for me that I forgot about mentioning it xD Testing on W10 with @vsverchinsky 's latest branch build for this:  audacity-win-3.5.0-alpha-20240213+cf42988-x64

This seems to be working properly.

I note the new checkbox in Effects prefs to turn off plugin scanning.

1. On my initial run of this branch my plugins got scanned
2. I then set the new no-scanning checkbox to ""on""
3. deleted the plugins cfg files from the audacity settings folder
4. relaunched 
5. Observe: my plugins were not scanned and not available
6. reset the no-scanning to be ""off""
7. relaunched
8. Observe: my plugins were scanned and made available The exact nature of the in-scan-dialog checkbox has led to some discussion in the design team which is unresolved as of now, please move this PR forward as-is.  Please open up a task related to it @LWinterberg ",,"Resolves: #4923

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5957,2024-02-14T14:37:49Z,2024-02-15T11:15:43Z,DavidBailes,1,0,1,7,1,1,1,[],5492.0,0,74274.0,0,0,0,0,18008375.865065,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @DavidBailes  latest branch for this fix:  audacity-win-3.5.0-alpha-20240214+eb85171-x64

This looks fixed to me 
a) after the multiple file export the focus is on the OK button
b) pressing the Enter button dismisses the dialog

![image](https://github.com/audacity/audacity/assets/50205984/7ab38548-c6f5-4905-879c-bc7521a1538a)
",,"Resolves: https://github.com/audacity/audacity/issues/5947

Problem:
In this dialog, a read-only text box showing the files exported is the initial focus. A user would expect that pressing Enter would close the dialog without the need to first tab to the OK button, but this is not the case.

Fix:
Use the wxEVT_TEXT_ENTER event, to close the dialog when the text box is the focus, and the user presses Enter.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5828,2023-12-28T17:29:46Z,2024-02-15T16:58:11Z,Paul-Licameli,13,12,44,3939,116,2,5,"['Clips', 'refactoring']",87.0,1,4231709.0,0,0,0,0,17987824.49131,,1,44,0,False,"['dozzzzer', 'Paul-Licameli']","Incomplete, but the commits so far will not change.
 Rebased without changes
 > I have reviewed until [575d2f4](https://github.com/audacity/audacity/commit/575d2f4ad42185f432614ab643dd07b8db249319) so far

""Accessors for SpectrogramBounds from WaveChannel""
 > The most of the PR is about changing pointers to references and whitespaces.
> 
> I don't like that public `ReallyDoWhatever` methods keep popping out, but it is clearly to late to object.
> 
> I don't know if the approval makes much sense given that PR is still a draft.

Don't approve.  Just signal non-disapproval of work so far.
 Rebased, and squashed fixups that were reviewed
 Rebased with no new changes
 wave-track-refactoring just had a difficult merge of recent master, with some conflict resolutions needed.

Now the branch was rebased and force-pushed onto that, also with some conflict resolutions.  No other new work.
 @crsib sorry, one more commit.

The splitting of stereo tracks needed something extra.
 @Paul-Licameli 

1. Create an empty stereo track, set no. of channels to '2'. Start recording and stop. Observe the left channel's vertical scale: it got wiped out.

https://github.com/audacity/audacity/assets/70063970/4be50efc-b957-49bd-ae3a-50bfd7ee8448

2. Generate a chirp. Try to drag it. Observe: a crash.

https://github.com/audacity/audacity/assets/70063970/a1648952-eb09-4813-bff0-b88757c06f7f
 @dozzzzer please try this branch again, now with fixes for the two known problems
 @Paul-Licameli 
1. The previously discovered bug of the left channel's vertical scale removal persists. This time, though, you need to record and stop twice to see the issue:

https://github.com/audacity/audacity/assets/70063970/f842035c-d564-4c6d-819b-667c43e856e7
 rebased onto recent merge of master into the refactoring branch
 TestedI have reviewed until 575d2f4ad42185f432614ab643dd07b8db249319 so far The most of the PR is about changing pointers to references and whitespaces.

I don't like that public `ReallyDoWhatever` methods keep popping out, but it is clearly to late to object.

I don't know if the approval makes much sense given that PR is still a draft. I have no objections so far I have left a few comments, but nothing blocking.","I have reviewed until 575d2f4ad42185f432614ab643dd07b8db249319 so far The most of the PR is about changing pointers to references and whitespaces.

I don't like that public `ReallyDoWhatever` methods keep popping out, but it is clearly to late to object.

I don't know if the approval makes much sense given that PR is still a draft. I have no objections so far I have left a few comments, but nothing blocking.","Resolves: #5778

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Exercise each track drop-down menu item (even for Time, Label, MIDI tracks)
- [x] All vertical ruler context menu items for wave and spectrum views; mouse wheel rotations; click and drag actions
- [x] Recording and append-recording, with spectrum, waveform, label track, time track, MIDI track also present
- [x] Collapsing, expanding of tracks
- [x] Track Select, close, Mute and Solo buttons; also those in the Mixer Board
- [x] Dragging of separators between tracks and between channels
- [x] Mix Stereo to Mono 
- [x] Dragging of clips including between tracks
- [x] Time selection (including click and drag, double click in clip, shift-click)
- [x] Frequency selection (including shift clicks above and below the box, dragging of center and boundary lines)
- [x] Appearance of the ""X"" button at top left of track is unchanged
- [x] Vertical ruler zoom-drag for waveform and spectrum, MIDI track
- [x] Editing label text
- [x] Dragging envelope points in time track and wave track
- [x] Correct update of widths of vertical rulers for all kinds of tracks
- [x] Dragging track height
- [x] Dragging to rearrange track sequence
","It's good that dynamic_cast is used now. Not ideal, but much safer. I don't understand why comparing the addresses of two unrelated objects (both are Sites attached to a different objects, ain't they) is needed. I expect that this pointers are pretty much random and do not reflect any properties of the objects It's very hard to understand what this method is for doing a commit-by-commit review. I don't like it at all, but again, to late to object ADL is a lot of fun, but I wonder if it generates new warnings from Clang. Right now, ADL for `std::move` used across several of your PRs generates enormous amounts of warnings, making it very hard to diagnose macOS.

If it generates new warnings, please do not use ADL here. For `std::move`, LLVM guys consider it harmful because `move` is a common name. I don't know if it applies to any of the functions in this case. Site in general allows locking of accesses to slots depending on template arguments, although we do t use the feature anywhere yet.  This sequencing avoids possibility of deadlock. No operator == for std::function except to test against null What are examples of the warnings? This deserves a very clear comment at least.  There are 2525 warnings with message
```
unqualified call to 'std::move' [-Wunqualified-std-cast-call]
```
This is roughly 60% of the warnings Clang generates.  They multiply quickly because `Registry.h` contains two places, that generate this warning."
5937,2024-02-09T23:01:29Z,2024-02-14T15:11:00Z,vsverchinsky,0,0,2,29,5,1,1,[],,0,403799.0,0,0,0,0,18080633.073169,,0,2,0,False,[],,,"Resolves: #5500

QA:
  1) Check the original bug STR
  2) Check that progress dialog does not appear after warning when CL exporter cannot locate executable 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4620,2023-04-27T09:10:03Z,2024-02-14T14:37:18Z,DavidBailes,2,0,1,4,1,1,1,[],25232496.0,0,25334835.0,0,0,0,0,18082683.731877,,0,1,0,False,"['DavidBailes', 'LWinterberg']","@DavidBailes can you rebase this onto master to regenerate the builds? sorry for this massive delay > can you rebase this onto master to regenerate the builds? sorry for this massive delay

Done.",,"Resolves: https://github.com/audacity/audacity/issues/4619

Problem:
Using the keyboard it can be not straightforward to get back to a speed of 1.00 after setting the slider to its minimum or maximum slider.

In void TranscriptionToolBar::Populate(), with the values set for options.Line() and options.Page(), and given how the step sizes are calculated in LWSlider::Increase() and LWSlider::Decrease(), the step sizes are 2.99/60, and 2.99/6.

Fix:
Change the values set for options.Line() and options.Page so that the step sizes are 3.00/60 and 3.00/6. Note: After this fix, a user will still encounter the same issue if they set the slider to the minimum value, and then try to return to 1.00, but they can work around this by setting the slider to the maximum value and then returning to 1.00. In addition most users will probably be using speeds of > 1.00.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5943,2024-02-12T11:09:40Z,2024-02-12T13:10:16Z,DavidBailes,1,0,1,6,2,1,1,[],3913.0,0,7236.0,0,0,0,0,18260707.58873,,0,1,0,False,['petersampsonaudacity'],"Tested on W10 with @DavidBailes  latest branch build for this:  audacity-win-3.5.0-alpha-20240212+3f4bc06-x64

All seems good:

![image](https://github.com/audacity/audacity/assets/50205984/88497273-ee2b-40ac-9a9e-2d4b494cf791)

![image](https://github.com/audacity/audacity/assets/50205984/4e5645d4-8024-4d67-9162-017d8a0857e2)
",,"Resolves: https://github.com/audacity/audacity/issues/5932

Problem:
Timeline sub menu isn't easy to find in the extra menu, which isn't shown by default, and the timeline view has increased importance in the upcoming 3.5. release.

Fix:
Move the timeline sub menu to the View menu.
The only available access key for Timeline on the View menu was the letter l. Given that is not a desirable access key due to the shortness of the underline indicating the access key, the access key ""e"" was chosen, and the access key of another item changed.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5926,2024-02-07T15:55:20Z,2024-02-12T11:48:38Z,DavidBailes,0,0,1,16,1,1,1,[],,0,417198.0,0,0,0,0,18265606.737643,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5912

Problem A:
The names of the first two controls are not read correctly by screen readers. These two controls are wxSpinCtrl, which on Windows create a text box which is a ""buddy window"", and which is the focus. This makes it very difficult to set a WindowAccessible so that the accessibility name can be made to include text coming after the control.

Fix A:
Change the layout of the labels of the controls so that Windows can automatically set the accessibility names such that they are useful.

Problem B:
The accessibility name of the third control is just ""%"", rather than ""Clip Speed %"".

Fix B:
Just add ""Clip Speed"" to the accessibility name using a standard ShuttleGui function.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5935,2024-02-09T13:50:25Z,2024-02-12T11:48:08Z,DavidBailes,0,0,1,13,3,1,1,[],,0,251863.0,0,0,0,0,18265637.949023,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5934

Problem:
The names of the group boxes are not read by Jaws or Narrator. But they are by NVDA.

The radio buttons are grandchildren of the group box, but they should be children. Extra panels where introduced by this commit: 7a55c90, to fix a problem with keyboard navigation of radio buttons on macOS: https://bugzilla.audacityteam.org/show_bug.cgi?id=2692 And I presume an extra panel was added in the Music imports group to follow this pattern.

Fix:
Only include the extra panel on Mac builds.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5930,2024-02-09T08:00:33Z,2024-02-09T10:47:51Z,vsverchinsky,0,0,1,212,6,1,1,[],,0,10059.0,0,0,0,0,18528434.845534,,0,1,0,False,[],,,"Resolves: #5283 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5925,2024-02-07T13:50:56Z,2024-02-09T10:46:50Z,vsverchinsky,0,0,1,4,1,1,1,[],,0,161778.0,0,0,0,0,18528494.248114,,0,1,0,False,[],,,"Resolves: #5750

QA:
Please check the following cases when ""split by track"" option choosen in Export Audio dialog
  1) Stereo tracks are correctly mixed down into mono
  2) Mono tracks are correctly exported as mono when panning is set to be off the center
  3) Mono tracks are expanded into stereo with panning being correctly applied.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5929,2024-02-08T11:49:56Z,2024-02-09T09:01:37Z,DavidBailes,0,0,1,2,1,1,1,[],,0,76302.0,0,0,0,0,18534831.28991,,0,1,0,False,[],,,"Resolves: [*(direct link to the issue)*](https://github.com/audacity/audacity/issues/5928)

Change the access key of Timeline so that there isn't a duplicate access key.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5910,2024-02-03T10:15:39Z,2024-02-07T09:43:07Z,DavidBailes,0,0,1,37,4,1,1,[],,0,343649.0,0,0,0,0,18705143.632072,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2133

Problem:
After seeking, there are a number of cases in which the playback does not correspond to the playback position. A number of these are listed in the issue: https://github.com/audacity/audacity/issues/2133

The problem was caused by this commit: 5af2a26, which removed the constraints on seeking in PlaybackPolicy::OffsetTrackTime().

Fix:
Reinstate the constraints for seeking in PlaybackPolicy(), and add DefaultPlaybackPolicy::OffsetSequenceTime() with appropriate constraints for this policy.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5874,2024-01-19T13:17:38Z,2024-02-07T12:50:44Z,saintmatthieu,8,30,1,1532,36,3,1,['Music'],7520.0,1,1639986.0,0,0,0,0,18693889.019515,,0,1,1,False,"['dozzzzer', 'Paul-Licameli', 'saintmatthieu']","Sorry for the single large commit. There was a lot of trials before I came to that solution, and with the many API changes I'd have to rewrite integration with the older interfaces to break this down. Rebased after merging speed improvement PR. @vsverchinsky addressed the most critical of your comments, you may do another review iteration. @saintmatthieu 

When importing multiple loops at once, I'm getting wrong results basically in two different ways: 

1. In some cases (when importing [these three](https://drive.google.com/drive/folders/1GyNRPVB8EqiJH_ByffmjFpck6XXy9tA3?usp=drive_link), for example), one of the loops is stretched by the wrong amount. However, when importing this exact loop all by itself, it gets auto-stretched correctly, following the project's tempo.
2. In some other cases (e.g. when importing [these three loops](https://drive.google.com/drive/folders/1K9VPWYCR_AS-jKx7HhamQv0iEOE9cQtL?usp=drive_link)), it not only detects the tempo incorrectly but also fails to stretch the remaining parts to match that tempo. @dozzzzer I don't know how much of the problems you've found this covered, but at least some of it: there already is a bug on master.
1. Import 100_VintageDrums_03_TL.wavv, it gets correctly auto-detected.
2. Import JBK_170_Brk_Full_Drums_Stig_V1.wav, this one too.
3. Import again 100_VintageDrums_03_TL.wav: it gets detected as 170.

If the  2nd file hadn't metadata, there wouldn't be a problem. It's my fault, I have to fix this, but it should provide a separate fix.
Would you mind re-testing these two problems with files that have no metadata, just their BPM in the title? To be 100% sure that they don't have metadata, you may re-export your loops from Audacity. Dedicated ticket for that issue: https://github.com/audacity/audacity/issues/5914 I haven't followed this discussion, but I'm reminded of your attempts to use `std::for_each` with an execution policy.  Did you make that work, at least for Windows, and did it really save time?
 No I haven't. Behaviour of the progress bar was strange, and I haven't looked further into that.",,"Resolves: #5726

Adds tempo-detection support for when the user imports more than one audio file at once.

Also, an effort was put to write abstractions for `src`-specific logic, enabling better unit-testing.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:

### Multiple-file import
- [x] None of the files has tempo: nothing special happens.
- [x] One of the files has tempo: project takes tempo of that file.
- [x] Several files have tempo, all equal: project takes that tempo.
- [x] Several files have tempo, but different ones: tempo of one of these becomes project tempo, while others are stretched.

## Test cases of #5570 

Please re-test those cases, copied from that other PR QA list:

### UX flow and tempo-detection side effects
#### Importing with ""Ask me each time""

The user has their pref set to ""Ask me each time"",
- [x] importing on empty project launches user prompt
- [x] importing on a non-empty project, if the view is in minutes and seconds, nothing happens
- [x] importing on non-empty project, if the view is in beats and measures, clip is auto-stretched, and Ctrl-Z undoes import

#### Interacting with modal

The project is empty, the user hasn't already recorded their preference by checking ""Don't ask again"", and imports a file with BPM in its title. The prompt appears.

-  [x] If a user says ""No"", auto-stretches if in B&M mode, else nothing happens. Ctrl-Z undoes import.
-  [x] If a user says ""Yes"", the view switches to Beats-and-measures if not already there, and the project tempo becomes that of the clip. Ctrl-Z undoes only project configuration, without stretching the clip.

#### Persistency

- [x] The user recorded their preference by checking ""Don't ask again"". They now drop an audio file with BPM information in its title. Audacity behaves as described in this table:

| Case | Pref         | View is Beats and Measures | Project is empty | Result                                     |
| ---- | ------------ | -------------------------- | ---------------- | ------------------------------------------ |
| A    | ""Do nothing"" | No                         | Yes              | Nothing                                    |
| B    | ""Do nothing"" | No                         | No               | Nothing                                    |
| C    | ""Do nothing"" | Yes                        | Yes              | auto-stretch                               |
| D    | ""Do nothing"" | Yes                        | No               | auto-stretch                               |
| E    | ""Switch ..."" | No                         | Yes              | Switch to B&M and project takes clip tempo |
| F    | ""Switch ..."" | No                         | No               | Nothing                                    |
| G    | ""Switch ..."" | Yes                        | Yes              | project takes clip tempo                   |
| H    | ""Switch ..."" | Yes                        | No               | auto-stretch                               |

#### Miscellaneous
- [x] Importing file without BPM info in file name behaves as before

","Do not delete this header from CMakeLists.txt.  The build works, but the file was not deleted, and so should be made known to the IDEs as part of the project.
 The header file is still not there One would assume that entity named `On*` refers to an action, isn't `MusicFileImportPrefs` good enough? I thought we use capital letters for enumerations elsewhere... I'd expected `bool` as a return type, `On*` fits better here Method does not need an access to the internal state of the instance, so it can be lifted out from the class definition `ProjectInterface` could be simplified a bit: `SynchronizeProject` can accept as arguments what it now reads from getters (except `GetUserPrefs`). I guess that `ProjectInterface` is actually a project synchronization delegate (callback), right? Please, use `std::unique_ptr&` Why not `std::shared_ptr<ClipMirAudioReader>`?

 `AnalyzedAudioClip` seem to represent a delegate object too reference? I think that the previous loop can be combined with that one, eliminating the need for `loopIndices` variable This structure wraps parameters that are later passed to a `GetProjectSyncInfo`, this makes me think that it should be eliminated I'd liked to see this renamed to `OnTimeSignatureRecoginized` or similar The second argument doesn't seem to be useful in real world Not a clip, but rather a delegate I guess call to this function is important outcome of the `SynchronizeProject` function call in some cases, but it was not tested, otherwise I don't see much benefits from control inversion here in it.  I think that transformation could be simplified to `std::vector(sortednames.begin(), sortednames.end())` Is it really safe? I see that there could be `UserException` thrown at the same scope where `AudacityMirProject` is created Not sure if it's the case in the real world, but there is a code path where `ClipMirAudioReader` could be created but `Import` returns `false`. Could be easily fixed with `unique_ptr` Yes. What's would be the benefit? I don't quite understand. Could you pseudo-code what you mean? `std::shared_ptr&`, but sure. No good reason. Sure, but this step-by-step approach is less intricate. There are advantages to using a struct as opposed to many arguments, e.g. like smaller diff when modifying them, especially when there exists test code. Mmh, it's not only about the recognition of the time signature, but also the interaction with the user, which I finds makes the `On` naming a bit tricky ...
`SetViewToBeatsAndMeasures` itself isn't quite correct, actually. `ReconfigureMusicGrid` is probably better. In practice, you mean? Cases are seldom, true, but they exist. Future improvements could make this happen more often. What name do you propose?"
5919,2024-02-06T07:55:46Z,2024-02-06T16:42:59Z,saintmatthieu,1,0,1,21,2,1,1,['Music'],258.0,1,31633.0,0,0,0,0,18766356.842289,,0,1,1,False,['saintmatthieu'],"3885e7c33e9d76683905ca852c7b1b2ef2119263 seems to fix well the problem:
![image](https://github.com/audacity/audacity/assets/22740106/da8c6e8c-e23c-4831-a545-1c7821e094ec)

Tracks 1 and 4 show an impulse centered at 1s.
Tracks 2 and 3 show octave-up-shifted rendered tracks before and after this change.
Tracks 5 and 6 show octave-down-shifted rendered tracks before and after this change.
In both directions, the impulse response is nicely centered after the fix.
(That the single impulse has pre- and post-echoes is a known characteristic of the algorithm.)",,"Resolves: #5905 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] pitch-shifting and time-stretching clips doesn't introduce delay, whether positive or negative. (If it is not obvious aurally, you may render the clip to observe the delay.)
",
5916,2024-02-05T16:09:31Z,2024-02-06T16:26:35Z,saintmatthieu,0,7,1,497,20,2,1,['Music'],,1,87862.0,0,0,0,0,18766903.717061,,0,1,1,False,[],"Approved, though a question about project-owned tags needs to be clarified. 

This PR introduces many code style changes that make it harder to read and understand.","Approved, though a question about project-owned tags needs to be clarified. 

This PR introduces many code style changes that make it harder to read and understand.","Resolves: #5914 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","indentation `newTags` could be a local object, that will simplify things. the acid tags could be then extracted like this:
```
if(newTags.HasTag(TAG_ACID))
   acidTag = StringToAcidizerTags(newTags.GetTag(TAG_ACID))
```
I wonder if it's a desired behaviour at all when all other tags get overwritten? But it is not related to the scope of this PR So this is the change: instead of being written into project-owned tags structure, ACID tag is exclusively written into new parameter.
But now ACID tag never gets written into project tags? Is that desired change? Not sure I understand: 
```
if(newTags.HasTag(TAG_ACID))
   acidTag = StringToAcidizerTags(newTags.GetTag(TAG_ACID))
```
is what was there previously. But then, `newTags` gets committed.
The loop metadata tags are clip-dependent, though, so re-using those of clip A for the import of clip B is wrong.
The other tags are
```
TAG_TITLE
TAG_ARTIST
TAG_ALBUM
TAG_TRACK
TAG_YEAR
TAG_GENRE
TAG_COMMENTS
TAG_SOFTWARE
TAG_COPYRIGHT
```
and to me it is ok that they are project-wide if they are used when exporting?
 Yes, it was wrong to create `TAG_ACID` and use it for clip-dependent metadata.
> now ACID tag never gets written into project tags?

They simply don't exist anymore. On export tags are copied from the project tags, so answerd is yes.
What I meant was that by making newTags a local structure we could avoid unnecessary (and there no control on the user side over that) tag overwrites and extensive API changes, currently it's a bit complicated:
```
auto cleanup = finally([&]{
   if ( !committed )
      Tags::Set( project, oldTags );
});
auto newTags = oldTags->Duplicate();
Tags::Set( project, newTags );
``` Isn't this to satisfy this comment:
```
   // do the actual import, creating whatever tracks are necessary with
   // the WaveTrackFactory and calling the progress callback every iteration
   // through the importing loop
   // The given Tags and AcidizerTags structures may also be modified.
   // In case of errors or exceptions, it is not necessary to leave outTracks,
   // tags or acidTags unmodified. If resulting outTracks is not empty, then
   // each member of it must be a nonempty vector.
   virtual void Import(
      ImportProgressListener& progressListener, WaveTrackFactory* trackFactory,
      TrackHolders& outTracks, Tags* tags,
      std::optional<LibFileFormats::AcidizerTags>& acidTags) = 0;
      ```
in ImportPlugin.h ?"
5911,2024-02-03T20:46:23Z,2024-02-06T16:10:23Z,JoeS209,13,12,3,42,6,3,1,[],140273.0,0,242640.0,0,0,0,0,18768316.068375,,0,3,0,False,"['crsib', 'JoeS209', 'petersampsonaudacity', 'Paul-Licameli']","@dozzzzer @DavidBailes 

Testing on W10 with @JoeS209 's latest branch build:  audacity-win-3.5.0-alpha-20240204+b11feb8-x64

This now seems to work properly in Joe's branch with no crash and the stereo track is properly created.

I tested entirely using the keyboard with no mouse
1. Shift+M in the top track to get the menu
2. scroll down in menu with down arrow to get the ""Make Stereo Track"" command
3. Press enter
4. Observe: stereo track is made _(and no crash occurs)_

_Just for thoroughness, I also tested making the stereo track from two mono tracks just using the mouse, all was OK._ Thank you for your fix!  The first commit alone is wrong, but the two together look correct and sufficient to fix the crash.

I suggest simplifications.  Please make them, and I will approve it.
 Wait now, Joe -- I had an afterthought that could simplify the entire fix further.

Don't change `ProcessUIHandleResult` at all.

Rather, in `CellularPanel::DoContextMenu`, assign `pCell` to a local `weak_ptr<TrackPanelCell>`, and then use `pCell.reset()` after `DoContextMenu`.

Say, `wCell` is that new local.

Then, pass `wCell.lock().get()` not `pCell` to `ProcessUIHandleResult`

This should be enough to fix the problem, with less disturbance of other code.

Do you understand why?
 Thanks, Paul.  Yes, I think I understand what you are saying here.  I was originally looking for a solution like that, but I became fond of getting away from passing raw pointers around.  But I'll implement your suggestion if you like.
 And I assume that we still pass a shared_ptr to `CellularPanel::DoContextMenu`. Yes, change the signature of `DoContextMenu`.

Remember this about `weak_ptr` : it allows some code to safely point at an object, while not controlling its lifetime.

So if the cell object wants to die after handling the context menu, let it die, but then safely detect whether it died.

`TrackPanel::ProcessUIHandleResult` was written to deal correctly will null pointers passed into it, but not with junk pointers to destroyed objects.

What I suggest is enough to replace the unsafe junk pointers with safe null pointers, while also not changing the lifetime of the cell objects.

And therefore, it's a more conservative fix, not delaying the destruction of the cells compared to the previous master.
 OK, will do.  Note that I had changed `ProcessUIHandleResult` to take shared pointers largely due to this comment that was in `CellularPanel::DoContextMenu`, before my changes:

```
   // To do: use safer shared_ptr to pCell
   ProcessUIHandleResult(pCell, pCell, refreshResult);
```
 > OK, will do. Note that I had changed `ProcessUIHandleResult` to take shared pointers largely due to this comment that was in `CellularPanel::DoContextMenu`, before my changes:
> 
> ```
>    // To do: use safer shared_ptr to pCell
>    ProcessUIHandleResult(pCell, pCell, refreshResult);
> ```

Did I write that?  Oh, yeah, in 2018 at commit f6609e5.

But for present purposes, indeed, you can write less code to achieve the result we need.
 OK, changes made, tested locally, and committed.  Checks currently in progress.  Please let me know if there are any additional changes needed.
 Now it's a good, simple fix.

The three commits should be squashed down to one, after this is also approved by our QA.
 Tested again on W10 with @JoeS209 's latest branch:  audacity-win-3.5.0-alpha-20240206+d0c721a-x64

Still works fine with the revised ""good, simple fix"" > Now it's a good, simple fix.
> 
> The three commits should be squashed down to one, after this is also approved by our QA.

Thanks, Paul.  I really appreciate the feedback and suggestions.  About the ""squashing"" of the commits, is there something that I need to do for that, or does that happen automatically when the changes are pulled into the master?
 We will squash before the merge, no worries",,"
Resolves: #5858

Resolve TrackPanelCell lifetime issues via usage of shared_ptr vs. raw pointer.  I'm no expert in shared_ptr but this seems to work.  ""Works on my machine...""  Open to critiques, suggestions.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","> The raw pointer overloads assume ownership of the pointed-to object. Therefore, constructing a shared_ptr using the raw pointer overload for an object that is already managed by a shared_ptr, such as by shared_ptr(ptr.get()) is likely to lead to undefined behavior, even if the object is of a type derived from [std::enable_shared_from_this](https://en.cppreference.com/w/cpp/memory/enable_shared_from_this).

https://en.cppreference.com/w/cpp/memory/shared_ptr/shared_ptr

But if raw pointer is not managed by another `shared_ptr` this still will likely cause a problem if calling side does not assume ownership transfer. Please see the second commit in the pull request.  This was resolved by not passing a raw pointer to DoContextMenu, and instead passing a shared pointer.  I realized this myself after the first commit.
 I agree with @vsverchinsky  -- as originally written, this hazardous code could lead to a double-free error corrupting the memory manager.  But, indeed, you must have discovered this by yourself and fixed it.

It is rare to construct a `shared_ptr` directly from a raw pointer -- instead one more often uses `std::make_shared` to combine construction of an object with the making of the first shared pointer to it.  All other shared (or weak) pointers must then be copies of previously existing shared pointers (or lockings of previously existing weak pointers).

 I would simplify this function:  let its `pCell` argument be a non-reference -- which implies a copying of a shared pointer when it is called.  So the explicit copying when you make `pCellLocal` is instead implicit.  And then you can simply reassign `pCell` as needed.  Fewer lines of code would change.
 So this variable initialization might disappear -- but even if this were needed, I would also use `auto` to simplify the declaration, avoiding the the verbosity of the long type name.  Let the compiler deduce it instead.
 Thanks Paul.  I like this suggestion.  I'll make the change, retest, and commit the changes into the pull request.  Stay tuned. You can simplify this:  you don't need `ptr1` but can just keep `nullptr` in the ternary expression.

Furthermore:  Don't define the function `GetShared` but just use `shared_from_this` directly.
 Yes, I realized the error not long after I checked in the first commit.  I then fixed it on my own and added the second commit to the pull request. As I understand it, the real heart of the bug fix is here:  the shared pointer constructed from the view object extends its lifetime for the duration of the call that pops up the context menu. In general I don't like ""auto"" because it makes the code less comprehensible, for me anyway.  But like you also suggest, this initialization should disappear after I make the other change.
 ... So that, inside `DoContextMenu`, `pCellLocal` (or just `pCell`) is still guaranteed to point to a live object.

 I don't have the code in front of me at the moment but essentially yes.  The crash was occurring across the UI function near the end, because the object that the raw pointer was pointing to disappeared.
"
5732,2023-12-01T13:56:24Z,2024-02-06T11:20:22Z,LWinterberg,7,11,11,791,29,2,1,[],363879.0,1,5779441.0,0,0,0,0,18785715.569961,,0,11,0,False,"['LWinterberg', 'petersampsonaudacity', 'Paul-Licameli']","Is this ""ready for review"" again?
 Testing on W10 with @LWinterberg 's latest branch for this:  audacity-win-3.5.0-alpha-20231205+9a22bc2-x64

### 1) Tracks Behaviors prefs 
**Scrolling left of zero** has gone, **Advanced Vertical Zooming** has gone and **Enable dragging selection edges** has gone _(it is now ""always-on"")_
![image](https://github.com/audacity/audacity/assets/50205984/8b295f12-c34a-4262-91ed-da34304e4209)
The **None** option for the **Solo** button has been removed.

### 2) Warnings prefs
this is now a very sparse dialog, it may make sense to move these to another pane.
![image](https://github.com/audacity/audacity/assets/50205984/9c40ae9a-229c-45c4-9f73-20640c444adb)


### 3) Interface prefs
The setting for **Show Scrub Ruler** has been removed
![image](https://github.com/audacity/audacity/assets/50205984/8245953d-68d5-4a61-b32f-f2798d057977)


### 4) Scrub Ruler
The Scrub Ruler remains available still from the **Transport > Scrubbing** submenu
The intention was for this to go entirely I thought.
![image](https://github.com/audacity/audacity/assets/50205984/92c0b4d6-2852-4b59-81f6-0cf1192556c1)

_If this remains impeding pushing this PR to master then I suggest that the issue of the Scrub Ruler removal is treated as a separate clean-up issue._


**5) Scrub toolbar**
The **Scrub Toolbar** is still available in **View Toolbars**  -  this too could be dealt with as a separate issue.
![image](https://github.com/audacity/audacity/assets/50205984/dc8a0280-a05f-4a89-9b82-e11a869255d8)




 I raise the suggestion again:  Why not bring back a checkmark in the time ruler to turn on the scrub ruler, making that more discoverable?
 > Why not bring back a checkmark in the time ruler to turn on the scrub ruler, making that more discoverable?

that's a good idea I see this failed CI because the ""Sanity"" test crashes -- that just stars Audacity and immediately quits it.
 > I see this failed CI because the ""Sanity"" test crashes -- that just stars Audacity and immediately quits it.

I debugged that for you and pushed a commit onto your branch to fix it.
 I see is has been rebased, and there is just one new change -- to eliminate a lookup of the ""Scrub"" toolbar in Scrubbing.cpp.

Now I see, there is one other bit of code that can also be eliminated, in ProjectAudioManager.cpp.

I pushed one more commit to complete the work.

It can be done in another PR, and I ask again:  Do you want to put a context menu item in the time ruler to reenable the scrub ribbon?
",,"Resolves: #5714

* Resolves: https://github.com/audacity/audacity/issues/4341
* Resolves: https://github.com/audacity/audacity/issues/4185 
* Resolves: https://github.com/audacity/audacity/issues/3511 
* Resolves: https://github.com/audacity/audacity/issues/4440 
* Resolves: https://github.com/audacity/audacity/issues/5666
* Resolves: https://github.com/audacity/audacity/issues/2880

----

* Removes ""solo=none"" option
* Removes timeline tooltips preference
* Removes dragging selection edges
* Removes some warnings
* Removes the preference to scroll to negative time
* Hides the scrub ruler option from the preferences.

The latter is intentional - Whether the scrub ruler is shown or not feels a bit more like enabling a toolbar than setting a preference. A full removal of scrub ruler and scrub toolbar doesn't appear either as Audacity crashes upon startup when I do.
","Test the case that you select ""None"" in a previous version of Audacity, then open this one, and confirm that the preference defaults back to Multi-track.

Step `EnumSettingBase::Migrate` in the debugger to see it happen.
 This commit leaves `mTimelineToolTip` unused, so amend it to remove the member variable.
 Please delete too, the commented-out declaration of this function in the header file.
 The preference can also still be enabled with a button in the scrubbing toolbar.

OK, you are the designer, but I think it's too difficult to discover the scrubbing feature.  There is no longer, either, any clue about it in the context menu of the time ruler.

Scrubbing still needs a satisfactory user interface.

About your commit comment:  I follow the convention that if it doesn't all fit on one line, I end the first line with ellipsis ... and then there is one blank line before the rest.
 See `SCROLLING_LIMITS` in `src/Experimental.cmake`.  You delete the sole use of `EXPERIMENTAL_SCROLLING_LIMITS`, and that is where this preprocessor constant is defined.

See my comments there about why I implemented scrolling beyond zero:

```
   # Paul Licameli (PRL) 24 May 2015
   # Allow scrolling up to one half of a screenful beyond either end of the project,
   # if you turn on the appropriate Tracks preference.
   # This allows smooth-scrolling scrub to work more reasonably at the ends.
```

I'd forgotten that motivation, myself!

Does this give any reason to pause about deleting this feature?

I had certain ideas about scrubbing -- I don't remember all of them just now, but I think one of them was an alternative mode that would keep the play head in a fixed position but let you drag the wave under it.

 If not, then also delete this part of Experimental.cmake
 This comment doesn't apply
 There's another EXPERIMENTAL flag to delete from the .cmake file.
 This deletion also allows you to eliminate
`#include ""Scrubbing.h""`
at the top of the file.  Please do that!
 I did try to remove the entire scrubbing toolbar and scrub bar, however, doing so crashes Audacity upon startup as it reads the old preferences file. Any idea how to fix that? I could debug it if you wrote a draft PR, if you don't have the debugging experience.

But if you do all of that, how is anybody supposed to scrub at all?  How, besides using the Transport menu, awkwardly?
"
5889,2024-01-24T12:47:14Z,2024-01-31T10:09:58Z,LWinterberg,4,0,2,2,2,1,1,[],4406.0,1,965516.0,0,0,0,0,18938193.192189,,0,2,0,False,"['LWinterberg', 'GermanKiwi', 'vsverchinsky']","Actually, looking at it in practice I think I just want to set a simple max size for this thing and not allow it to stretch all across the screen.  > Actually, looking at it in practice I think I just want to set a simple max size for this thing and not allow it to stretch all across the screen.

@LWinterberg 
Export editor UI is also present in Timer Record dialog.
In that particular case limiting the maximum width of the dialog may not look good with some translations, I think. If so, maybe the constraints could be set on `wxComboBox` that is created in `ExportOptionsCLEditor`? Hi @LWinterberg, does this patch mean the Export dialog will now always be centered in the middle of the Audacity window - just as the Preferences dialog already is?

The reason this is important for me, is because I always keep Audacity maximised on my screen, and I have a large 32-inch 4K monitor, and it's harder to interact with the Export dialog when it always opens up in the top-left corner of the screen, rather than in the center, directly in front of my eyes. :) > Hi @LWinterberg, does this patch mean the Export dialog will now always be centered in the middle of the Audacity window - just as the Preferences dialog already is?

That indeed would be the case yes.

Let me know if you see other dialogs which don't open up in the center - the fix for these is quite easy.",,"Resolves: #5515
Resolves: #5884

hey look it's the same PR again but for a different dialog and limiting the exciting direction of X this time instead of Y. 

It's intentional that the thing is not centered for the updates; the window should just extend downwards instead of shifting position to stay centered.",
5897,2024-01-26T15:08:40Z,2024-02-06T08:57:09Z,KissDaniGH,0,0,1,5914,1,0,0,[],,0,928110.0,0,0,0,0,18794314.203495,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5900,2024-01-29T08:52:03Z,2024-02-02T17:19:25Z,saintmatthieu,12,30,19,1232,57,2,0,"['Music', '3.5']",99648.0,2,454335.0,1,0,0,0,19031488.784661,,1,19,1,False,"['dozzzzer', 'saintmatthieu', 'petersampsonaudacity', 'Paul-Licameli']","I see messages crossed about Observer.

You made simplifications, not exactly as I suggested, and I hope you agree it's all more understandable now.

Can you answer my questions about thread safety?  The subscriptions may be created and destroyed only in the main thread, and that includes destruction of either the publisher or the subscriber before the other.

Publication on another thread is safe if that is so.

 I would move `CentShiftChange` into `ClipSegment.h` and then `WaveClip` could publish that type and simply pass a function to `Subscribe` without the extra lambda adaptor.

It's minor though.
 All right, I see no real blocker.

I dislike the now increasing involvement of pitch and stretch notions in lib-wave-track, where they should be extraneous, but that restructuring is for later.

Assuming too that the thread safety of Observer is correct, and that you will squash it into fewer commits -- I can approve it
 @saintmatthieu 

1. When opening up the Pitch & Speed dialog and entering a new value, a strange ""-24"" pops up in the text box at random. Furthermore, after the text box is cleared and the new value is entered, it gets increased by 1:

https://github.com/audacity/audacity/assets/70063970/eb05ca0d-ba3d-4ae0-8d1e-3765b852582d

Also, I've observed that every time I put the cursor in the ""cents"" text box and press Backspace, the semitones value decreases by 1:

https://github.com/audacity/audacity/assets/70063970/013bcdcd-f4f0-4cd9-9f51-daefad08b2ad



2. Not sure if anything at all should be done about it, but during testing, I've observed somewhat deteriorating quality at higher values. It becomes more obvious from around 20+ semitones up. At this point, the sound becomes quite unusable while the competitor's algorithm yields a much cleaner result. Tested on one-shots, drum loops, bass loops and vocals. Here's an example of such deterioration: https://www.dropbox.com/scl/fo/71moh408cvrlz34pmrafr/h?rlkey=kq1xllldkag4e71hswmk5t4zg&dl=0 This isn't too critical since it manifests itself at higher (although not extreme) values but still smth worth to be aware of.

(TBC)

 > 1. When opening up the Pitch & Speed dialog and entering a new value, a strange ""-24"" pops up in the text box at random. Furthermore, after the text box is cleared and the new value is entered, it gets increased by 1

Tweaks pushed, hope they improve UX.

About 2., I allowed pitch shifting to such extreme ratios because the weird resulting sounds might be interesting to the users at an educational and experimental level, and maybe useful in the creation of weird atmospheres. When we have tempo curves, I can imagine that one might want to slowly drop or raise the pitch to something increasingly unrecognizable.

Ideally of course, it'd pitch up and down more realistically, but the amount of work involved in improving this is completely unknown.

I'm confident that the technology will be very useful as it is. One potential area of improvement is formant preservation: when shifting voice, one quickly gets into a Chipmunk effect. I just created an issue for this: https://github.com/audacity/audacity/issues/5902. Maybe this will address some of the limitations you've noticed ? (Could you please share your examples using Google Drive instead?) @saintmatthieu 

1. It seems that the upper/lower boundaries aren't in place when pitch-shifting using Alt (Option) + ↑/↓. After reaching a value of a couple of hundred, an attempt to play back causes Audacity to freeze.
2. On macOS, quitting the Pitch & Speed dialog by ESC doesn't restore the previous pitch value and submits the entered value instead; clicking Cancel, though, doesn't work as it should either: it resets the current pitch value to zero. > I'm confident that the technology will be very useful as it is. One potential area of improvement is formant preservation: when shifting voice, one quickly gets into a Chipmunk effect. I just created an issue for this: https://github.com/audacity/audacity/issues/5902. Maybe this will address some of the limitations you've noticed ? (Could you please share your examples using Google Drive instead?)

@dozzzzer I omitted the problem of aliasing and imaging. This may also explain the lower quality you noticed. I created another ticket for that: https://github.com/audacity/audacity/issues/5904 Testing on W10 with @saintmatthieu 's latest branch for this:  audacity-win-3.5.0-alpha-20240202+81dc5f9-x64-msvc2022

Pitch and Speed  changing appears to work while Audacity is playing - but there are some issues of note:

1) when Audacity is playing and you hover the cursor over the Clip-handle drag bar the cursor icon that you get is a **white no-entry**  icon - to me this implies that no action is available but clicking on it still brings up the drag-bar context menu, including the **Pitch and Speed** command.
This is **_not_** introduced as part of this change - the same occurs in 3.4.2

2) when Audacity is playing the **Clip Speed %** in the **Pitch and Speed** dialog is grayed-out and unavailable.  
This is _**not**_ the case when the command is invoked while Audacity is not playing.
![image](https://github.com/audacity/audacity/assets/50205984/8383c245-1445-45e4-b5cf-474e9d6cbb54)

3) The **Pitch and Speed** context menu :command has a much reduced UI compared to the **Effect > Pitch and Tempo > Change Speed and Pitch** menu command:
![image](https://github.com/audacity/audacity/assets/50205984/b633326e-093c-4d2e-865e-81a65800f672)

4) I was really expecting the **Change Speed and Pitch** effect to be a further Audacity command that would now be available in the Real-time effects stack - and not just a clip-handle context menu.

5) In the clip-handle context menu command dialog for **Pitch and Speed** - you appear to be able to change pitch and speed independently.  
This appears to contrast with what happens with the **Effect > Pitch and Tempo > Change Speed and Pitch** menu command. @saintmatthieu  @LWinterberg 

Perhaps most importantly:

6) this PR states that the dynamic pitch change in the  clip being played is ""non-destructive"".

BUT testing shows that the pitch change is actually applied destructively (the change goes on the Undo/History stack).
![image](https://github.com/audacity/audacity/assets/50205984/1a172236-e9e5-46f1-8030-70e587dbae83)
And Undo/Redo can be applied. @saintmatthieu @LWinterberg 

7)  the dialog seems un- necessarily wide

![image](https://github.com/audacity/audacity/assets/50205984/c2664111-7532-4c7e-a281-2c9cd6f5cce6)
 8) in the old clip-handle context menu the command was **Change Speed** - in the new menu it is just **Pitch and Speed**.

Surely it would be better to add back the ""**Change**"" and make the new command be **Change Pitch and Speed**
a) for clarity of purpose  (""does what it says on the tin"")
b) to differentiate from the **Render Pitch and Speed** just beneath it

![image](https://github.com/audacity/audacity/assets/50205984/bf3f75df-1ddb-4084-ae3d-15bc3386719f)
 I have updated the Manual for the changes as they currently are - but retained P1s just in case further changes are effected.When you add images, you should also update the list of image file names in `lib-theme-resources/CMakeLists.txt`, so that the build will correctly reconfigure when you checkout a commit with a changed image list.
","When you add images, you should also update the list of image file names in `lib-theme-resources/CMakeLists.txt`, so that the build will correctly reconfigure when you checkout a commit with a changed image list.
","Resolves: #5891, #5863

Non-destructive pitch shifting

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

## QA
Please be aware of #5728, which this PR does _not_ fix.
- [x] resolves #5863
- [x] ""Change Speed"" dialog is now called ""Pitch And Speed""
- [x] ""Pitch And Speed"" dialog is accessible like before (Select clip + right-click, right-click on clip header, `Edit > Audio Clips > Pitch and Speed...`)
- [x] ""Pitch And Speed"" is now also accessible by ""Alt+P"" when clip is fully selected
- [x] ""Alt+Up"" / ""Alt+Down"" change clip pitch by +/- 1 semitone
- [x] Pitch shift can be changed also during playback
- [x] Using extreme pitch shift and speed combinations does not freeze or crash Audacity (there may be pauses in audio, but normal audio should be recoverable by coming back to more reasonable settings)
- [x] Pitch-shift by cents is available in dialog
- [x] Pitch-shift and speed changes are drawn sensible in the clip header, or not drawn at all when space doesn't suffice.
- [x] Also with language set to e.g. Arabic or Hebrew
- [x] Quitting the dialog by ESC or Cancel restores previous pitch
- [x] Changing pitch adds an entry in history and is undoable
- [x] Changing pitch makes project dirty
- [x] Pitch changes persist after closing and re-opening project
- [x] Changing pitch, saving project and re-opening with earlier Audacity (e.g. 3.4.2) works fine (no pitch shifting)
- [x] Opening older project works fine

For mix-and-rendering, copy/paste or merging clips, the same rules apply for pitch-shifted and time-stretched clips. Here are some of the items to verify I can remember:

- [x] Mix-And-Render renders pitch shift
- [x] Export audio renders pitch shift
- [x] Merging clips with different pitch shift renders them
- [x] Pasting clip of pitch shift _x_ onto other clip with pitch shift _y_ doesn't merge them
","What happens if you swap channels?
 This commit is strange.

As I said I don't like it that lib-wave-track mentions extraneous things like quarter notes and stretch ratios, and now this is one more thing.  I might figure out a restructuring in my branch.

Why can't a track or clip simply publish whenever it changes, and have subscribers attached to it?  Why must you first set a publishing interface into it?
 I think this function should be moved into `WaveTrackAffordanceControls.cpp` which is the sole user of it.
 Repeated expression could be `textWidth`
 Seeing this commit that again changes what is painted in the affordance area -- I say again:  add it to the QA checklist, that it should be tested with a right-to-left language, Hebrew or Arabic.
 Should you always draw that bitmap, or not in case you reassigned 0 to iconWidth?
 Oh I see the early return did that, but I found it a bit non obvious
 Those classes look nice, but I'd rather you just follow conventional use of ShuttleGui for bracketing things.
 This method is called when preparing tracks for playback. During playback, swapping channels isn't possible. After playback, the publisher will have expired, so swapping channels wouldn't have consequence. The publisher is updated by the stretching sequence, before playback, and gets destroyed after playback.
But I'll try the approach you suggest. It helped me when I had to change things around, and I think it would also have helped me when I looked at this source file the first time and was trying to figure out how it all worked. Two octaves down, five octaves up -- might comment somewhere that these are the bounds.  Maybe more prominently in the header file.
 This does not impose the limits on pitch shift that the dialog does.
 It's a little strange that this is a member function of a UI object (representing a certain rectangle of the screen).  Can't it simply be a non-member function? I really dislike this entire commit -- adding mutability.

Let it stand, but I may explain the alternative with another suggested commit.
 Why remove `const`?  That's not necessary and having it here is useful information to a maintainer.
 Looks good to me - see ""Use Observer framework"" commit Oh, now I see at this commit why the member becomes non-const.

Consider using the utility `AtomicUniquePointer` instead of a mutex.
 Adding a comment. Looks indeed like it should. Or just `std::mem_fn`
 It seems you are reinventing the Publisher utility and I don't know why.
 I think `mPropagators` never gets size more than 1, so why a vector?
 ... there is the call to `FindTrack`, though, which is a member method. I haven't understood yet under what conditions it may cause an early return.
Making that method const, at least, is a no-brainer. Ok, found something better. Coming up... I don't think an atomic would be helpful here, since it's not only just the reallocation of the object that must be synchronized. Remember that comment in SP:
```
  /**
    Set independent time stretch and pitch factors (synchronously to processing thread).
    ...
  */
  void setTimeStretchAndPitchFactor(double timeStretch, double pitchFactor);
  ``` It's outdated now, through the use of `Observer`. But there is just too much weirdness and reinvention going on, as I said.

What I think you should do:

Make `ClipInterface` inherit `Observer::Publisher<double>` (or maybe some distinct struct type `PitchRatio` just containing a double).

~~A `using` declaration to make `Publish()` public.~~  Never mind, I think it's not needed

~~A pure virtual `DoPublish(double)`.~~

~~`WideClip` overrides that to do the work.~~

 You may ignore most of a9752ac3a7431db60b6742de5ae9a5b5281ea104 and 250725b5876d32aa78c9114af86f0dff36d0fe24, as I did in a recent commit put in place almost exactly what you described. See, too, that this change is outdated. The constructor of `ClipSegment` isn't passed a function that does subscription.  It is just passed a reference to `Observer::Publisher<PitchRatio>`.  That reference can be stored in `StaffPadTimeAndPitch::Parameters`.  Then `StaffPadTimeAndPitch` in its constructor simply subscribes to the publisher, passing in that lambda, and holding the `Subscription` object which is a sort of smart, weak pointer representing the connection between publisher and subscriber.
"
5873,2024-01-18T20:20:12Z,2024-02-02T13:30:52Z,Paul-Licameli,1,1,2,76,11,2,1,[],1200154.0,1,1271449.0,0,0,0,0,19123486.758054,,1,2,0,False,['Paul-Licameli'],"Please review it again.  The second commit is very different now and makes more conservative changes.
That's really elegant 😻",That's really elegant 😻,"Resolves: #5862

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",I think that the explanation of this line presense is that we've found out that zero clips could have been created during editing the project.
5879,2024-01-22T10:39:22Z,2024-01-24T16:35:36Z,saintmatthieu,0,0,1,12,1,1,1,"['bug', 'Music', '3.5']",,1,194174.0,0,0,0,0,19890013.710374,,0,1,1,False,[],,,"Resolves: #5878

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5887,2024-01-24T10:40:03Z,2024-01-24T14:21:08Z,crsib,0,1,2,103,5,1,2,[],,1,13268.0,0,0,0,0,19898079.15284,,0,2,1,False,[],,,"Part of #5427

This PR is untestable

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","My guess is that `AppEventsProvider` exists to protect parts of events API from unwanted use? If so I'd suggest also to make a statement to the class comment that the number of instances should be limited to one (assertion in ctor wouldn't harm).
`AppEvents::AppEventsProviders` could be shortened to `AppEvents::Provider`, sorry :)"
5867,2024-01-16T14:50:48Z,2024-01-24T13:38:37Z,saintmatthieu,6,20,6,308,23,3,1,['Music'],514041.0,1,686870.0,0,0,0,0,19900634.480107,,1,6,1,False,"['saintmatthieu', 'Paul-Licameli']","My review is complete.  Some comments could be improved.  I have doubts about correctness, because of aliasing of input and output buffers, contrary to what the commens in pffft.h recommend.
 @Paul-Licameli comments addressed. > cript 0 and Nyquist at 1.

That's an interesting idea.
The input to the novelty measure is power, though, not the complex output of PFFFT. I have to know where the real and imaginary parts of a given bin are to combine them. > > cript 0 and Nyquist at 1.
> 
> That's an interesting idea. The input to the novelty measure is power, though, not the complex output of PFFFT. I have to know where the real and imaginary parts of a given bin are to combine them.

I believe you really get a sequence of complex numbers, except that the first two floats are two real numbers.  So you can really add the squares of successive float pairs after subscript 1.
 how FFT delivers permuted answers: https://en.wikipedia.org/wiki/Bit-reversal_permutation

That's as applied to bin numbers 1, ..., N / 2 - 1 but as complete complex numbers.

 Aha, you think the internal layout is something standard? I guess you're right, but the PFFFT API doesn't give an indication of it. Maybe someone exchanges the PFFFT library some day and it changes?
Also, after these optimizations, the STFT isn't the bottleneck anymore (at least on Windows), so further improvements here would be marginal.My doubts about correctness were answered.

I approve.

I also leave this suggestion:  use `pffft_transform` not `pffft_transform_ordered` and see if there is some more measurable improvement.

You can do that because none of the calculations of the novelty depend on bin number.  Comparing corresponding binds, however permuted, you will compute the same thing (up to small non-associativities in floating point addition).

I believe the un-reordered output will still put DC at subscript 0 and Nyquist at 1.
","My doubts about correctness were answered.

I approve.

I also leave this suggestion:  use `pffft_transform` not `pffft_transform_ordered` and see if there is some more measurable improvement.

You can do that because none of the calculations of the novelty depend on bin number.  Comparing corresponding binds, however permuted, you will compute the same thing (up to small non-associativities in floating point addition).

I believe the un-reordered output will still put DC at subscript 0 and Nyquist at 1.
","Resolves: #5794 

This PR intends to speed up the tempo detection **without modifying its quality**. Guarantee that quality is not modified is given by the benchmarking, re-run after each optimization and checking that none of the dataset's 140 files was evaluated differently.

Processing time measurement was added to the benchmarking. On a Windows laptop, the algorithm is about 4 times faster after these optimizations, and on a Macbook, about 3 times. Commit-by-commit improvement is detailed in the commit messages.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
That the quality did not change noticeably was verified with the benchmarking tests. Please nevertheless smoke-test the build, importing a few rhythmic and non-rhythmic files, preferably that you've already used before. If you have long files with high sample rate that have brought the progress bar in focus before this change, please try them again now: the speed should be noticeably faster.","I would ask @crsib whether an alternative using conan would be better.
 I would put pffft in `lib-math/3dparty` and build it along with lib-math. Similar to what we do with the staffpad library now. I don't think that this library is available in any distro. `explicit` maybe This is an example of a decorator-pattern class
 Comment says 16 kHz, but code says 24 kHz.  You are not calculating a rate, but a factor by which to divide the rate.  Maybe say

""Input rate divided by this integer will be as close as possible to 24kHz and not greater.""
 I wrote elsewhere how I almost understand where the magic numbers come from, and how the method might be generalized to higher or lower degree polynomial approximations.  We might experiment with the tradeoff of computation speed and accuracy of the log2 approximation.  But then the greatest gain is likely just from avoiding the transcendental function.
 remove repeated ""your data""
 `explicit` ? Comments in pffft.h say:

""If 'work' is NULL, then stack will
     be used instead (this is probably the best strategy for small
     FFTs, say for N < 16384).""

Did you try this?  Does it improve performance?
 ""This is
     similar to calling pffft_transform and then pffft_zreorder.""

Meaning `pffft_transform_ordered`.

Comments for `pffft_zreorder`:

""input and output should not alias.""

But you violate that.

This makes me doubt correctness.
 I might put this line in a Finally
 Again, aliasing of input and output
 I notice now that the old version had an off-by-one mistake that escaped earlier review!  The bin one before Nyquist was not correctly mirrored. So, I understand that this algorithm, unlike InverseRealFft, expects the data to be given already as packed complex numbers with implied conjugate-symmetry, and so the copy is not needed.
 Indeed ... > Did you try this? Does it improve performance?

No, but `mWork` is allocated only once for the entire STFT, so I doubt it has noticeable impact. Also, my optimizations were guided by visual studio's profiler, and this also told me that STFT wasn't the performance bottleneck after these optimizations anymore. > This makes me doubt correctness.

I don't quite understand the logical order of what gets you to this conclusion.

In any case, did you also see that `pffft_transform_ordered`'s comment expressly says ""input and output may alias."" ?

 I think so too. I must admit I have understood little of your demonstration, especially the bit-shift part, maybe you can explain that to me more at length in an upcoming conversation. Besides me not understanding it looked correct, judging by your results and also some I ran on my side. That's similar to my first approach, but I thought, maybe we could spare ourselves yet another copy of PFFFT. Or did you mean have StaffPad depend on `lib-math` ? You are right.  The warning against aliasing applies only to `pffft_zreorder` called directly.
"
5888,2024-01-24T11:13:34Z,2024-01-24T12:33:09Z,crsib,1,0,1,12,4,1,1,[],4760.0,1,4777.0,0,0,0,0,19904561.577057,,0,1,0,False,['crsib'],This PR only affect unit tests,,"Resolves: #5877

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5811,2023-12-21T12:41:30Z,2024-01-24T12:26:02Z,LWinterberg,0,1,1,11,2,2,1,[],,1,2936677.0,0,0,0,0,19904988.468794,,0,1,0,False,[],,,"Resolves: #5637

same approach as https://github.com/audacity/audacity/pull/3609 ","Maybe instead
```
const auto maxHeight = std::max(1, wxDisplay().GetGeometry().GetHeight() - 100);
const auto minHeight = std::min({ sz.y, 600, maxHeight });
SetSizeHints(sz.x, minHeight, wxDefaultCoord, maxHeight);
```

just to be sure your minimum height is not more than the maximum height, which is positive
"
5886,2024-01-23T14:51:07Z,2024-01-24T10:08:44Z,crsib,1,0,1,325,6,1,1,[],1637.0,1,69462.0,0,0,0,0,19913226.991064,,0,1,1,False,['crsib'],This PR tests itself!,,"Part of #5427 

Adds SHA256

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5881,2024-01-22T16:58:20Z,2024-01-23T13:52:16Z,JoeS209,0,0,1,5,1,1,1,[],,0,75236.0,0,0,0,0,19986222.490377,,0,1,0,False,[],,,"Resolves: #5860

Add null check before calling MarkUnsaved on project.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5885,2024-01-23T12:02:05Z,2024-01-23T13:29:34Z,crsib,1,0,1,83,1,1,1,[],184.0,1,5252.0,0,0,0,0,19987582.118621,,0,1,1,False,['crsib'],I would say that this PR is untestable at this point,,"Part of #5427 

Allows MP3 exporter to be configured using JSON

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5869,2024-01-17T11:45:19Z,2024-01-17T13:16:42Z,DavidBailes,0,0,1,7,1,1,1,[],,0,6208.0,0,0,0,0,20506033.970692,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5868

Problem:
Tempo and upper time signature: using German or Norwegian keyboard, can't enter digits 8 or 9.

When the digits 8 or 9 are typed (or any digit) MenuCreator::FilterKeyEvent() returns these to wxWidgets for further processing, without them being matched to the shortcuts of any commands. However, on Windows, on being returned to wxWidgets, any keys are first matched with accelerators in the menus, before being given to the control which is the focus. In the German and Norwegian keyboard layouts, [ and ] are AltGr 8 and AltGr 9. Not sure quite why, but 8 and 9 match the keyboard accelerators [ and ].

Fix:
In FormatLabelWithDisabledAccel(), add [ and ] to the accelerators which are disabled.

Resolves: https://github.com/audacity/audacity/issues/5868


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5839,2024-01-03T13:03:31Z,2024-01-16T22:36:09Z,saintmatthieu,8,28,7,1092,26,3,2,['Music'],15265.0,2,1157558.0,0,0,0,0,20559593.055933,,0,7,0,False,"['saintmatthieu', 'Paul-Licameli']","See above about the inconsistency of a comment with its function.

I think the code is correct but the comment is not.  Distributor really must begin with trusted distributor.

Correct?
 > See above about the inconsistency of a comment with its function.
> 
> I think the code is correct but the comment is not. Distributor really must begin with trusted distributor.
> 
> Correct?

OK I see that's outdated.  I approve, up to commit 4f7c6e0b455b28b840ee1048cab37482d55b79f0
 Pushed a commit that creates a test utility, to allow QA edit the ACID and DistributedBy tags of wav files, necessary for testing. `typedef   struct SNDFILE_tag   SNDFILE ;`
 Banners should be in recently added files, and the recent commits don't all build, so should be squashed in the final result.  Otherwise, I must examine the new test utility.
 I caught up reviewing recent commits and made some suggestions but nothing is blocking
 @Paul-Licameli another round of review please? The commits I pushed today are not trivial. Thanks @crsib for helping me out! Do you have an idea why the ""Adapt tag-writing utility to support new use cases."" commit broke it? It doesn't add new library dependencies ...",,"Resolves: #5546

Please refer to ticket for detailed description.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

### QA
To add tags to the files, you can use the `riff-test-util` command-line application that comes with the Audacity build.
Some more info from the exiftool documentation about [Acid](https://exiftool.org/TagNames/RIFF.html#Acidizer) and [`DistributedBy`](https://exiftool.org/TagNames/RIFF.html#Info) RIFF info tags.

- [x] The `Beats` tag (number of beats) is taken into account: 
![image](https://github.com/audacity/audacity/assets/22740106/846794ee-fe91-49bf-b1b1-1c89d5626a1e)
- [x] If `Beats` tag is not present or set to 0, `Distributed By` must be set to a trusted distributor for the metadata to be taken into account. For now, the only distributor whose metadata we trust is ""Muse Hub"": 
![image](https://github.com/audacity/audacity/assets/22740106/e9efc523-1e65-4ee6-accc-c973d486a53a)
- [x] Priority order: If no metadata is found, then title is parsed. If no BPM is found in the title, then the DSP analysis kicks in. If the DSP is inconclusive, then nothing happens.
- [x] If the one-shot tag is true, the file is treated as non-rhythmical: project tempo isn't changed or the clip isn't stretched, and no DSP analysis is done (no progress bar pops up): 
![image](https://github.com/audacity/audacity/assets/22740106/49880ade-a0f1-4724-9ddd-393029af1ad9)
- [x] If BPM value there is lower than 30bpm, the metadata parsing fails (and title parsing takes over)
","banners
 These are not necessary to compile what is below.  If they are required in other places that include this header, I would move them there. Maybe return `nullopt` instead.  Elsewhere you write a function taking `optional<AcidizerTags>`
 Remind the reader that `{}` means undefined time signature
 You might replace the first two with forward declarations of incomplete types.
 The comment is inconsistent with the code, which is right?

You might try `std::mismatch` and might then not need the length comparison -- you expect just to get the end iterator of the prefix.
 Why does a module have a unit test?  Can this go to `lib-file-formats`?

I like a banner comment in each `CMakeLists.txt` delimited by
```
#[[
   ...
]]
``` See other examples.  That banner just summarizes the purpose of the library.
 I'm failing to configure the build for macOS:
```
 Target ""mod-pcm"" of type MODULE_LIBRARY may not be linked into another
  target.  One may link only to INTERFACE, OBJECT, STATIC or SHARED
  libraries, or to executables with the ENABLE_EXPORTS property set.
``` Yes: see fe2caec OK, I see you fixed the configuration problem.

This completes a round of review.
 I agree, that's better. Works for the AcidizerTags, but with SNDFILE I get the `redifinition with different basic type` error, don't know why. I found an easier approach: remove trailing nulls (due to byte-padding for word alignment it would seem) and exactly compare the strings. You might also forward declare `SNDFILE` Emphasize with a comment, this should NOT be `auto`
 Might move this line up and eliminate a few repeated expressions
 Although both sizes happen to be 4 so it will work -- still the change in the last argument should be reverted.
 I would make `file` a reference.  Otherwise it needs a null check to make me confident.  It is just passed to a sndfile function, which is C style, but I don't know whether the library does null checks or would crash.  Better to use C++ style in this wrapper level.
 Why not propagate the error out of this function and let the caller decide whether to eat it?
 Thanks Reworked that utility code, this isn't an issue anymore. I don't expect this to be an issue beyond development of this utility, and am lazy handling it on the client side. This utility is used only for tests? Yes. This suggests to me, maybe you might like instead, simply
`using AcidizerTags = std::variant<OneShot, Loop>;` or not...
 You might simplify away these two constructors with
`using LibFileFormats::AcidizerTags::AcidizerTags`"
5850,2024-01-09T13:07:41Z,2024-01-15T19:55:26Z,Paul-Licameli,0,2,1,6,1,2,1,['bug'],,1,542867.0,0,0,0,0,20655637.48372,,0,1,0,False,[],Unnecessary call to `ModifyState` in the synchronous branch should be removed. (The bug description can then also be simplified.),Unnecessary call to `ModifyState` in the synchronous branch should be removed. (The bug description can then also be simplified.),"Resolves: #5849

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I, like you, would have thought this change is necessary now that I see it, but I just tried and undo/redo restores the stretch correctly _even without this change_ ...
I think this is because these lines are executed synchronously to file import, and later there is `   AddImportedTracks(fileName, std::move(newTracks));` which in turns pushes a new state in the history. It was unnecessary in the commit I based this on at first.  But it will be necessary in latest master, which delays those lines into the `CallAfter`.
"
5865,2024-01-15T06:27:46Z,2024-01-16T12:09:14Z,LWinterberg,1,0,5,245,12,1,1,[],14298.0,1,113789.0,0,0,0,0,20590311.651871,,0,5,0,False,['petersampsonaudacity'],"Testing on W10 with @LWinterberg 's branch:  audacity-win-3.5.0-alpha-20240115+de3c348-x64

1) #5848 now works properly in Leo's branch build when the Audacity language is set to Deutsch.

2) And the hovertext tooltip when hovering over the X in the TCP now says **Delete Track (Ctrl+C)**

3)  **K. Soze** is moved to **Contributors**",,"* Resolves: #5848 
* Removes ancient versioning system remnants (arch)
* Rename ""close track"" to ""delete track"" (the tooltip for hovering over the x on a track)
* update `man audacity` from 1.3.5 (probably will only go into effect on linux repositories?)
* Move K.Soze to contributors
",
5859,2024-01-11T10:12:58Z,2024-01-15T13:57:15Z,saintmatthieu,2,2,1,15,2,2,1,['Music'],357798.0,1,359058.0,0,0,0,0,20677132.865503,,1,1,0,False,"['saintmatthieu', 'dozzzzer']","Tested.
Importing a 4-bar musical loop before this PR:
`Operation 'Music Information Retrieval' took 0.141000 seconds.`

This PR:
`Operation 'Music Information Retrieval' took 0.079000 seconds.`

Which means about a 78% increase in speed when importing loops.
 > Tested. Importing a 4-bar musical loop before this PR: `Operation 'Music Information Retrieval' took 0.141000 seconds.`
> 
> This PR: `Operation 'Music Information Retrieval' took 0.079000 seconds.`
> 
> Which means about a 78% increase in speed when importing loops.

I never checked that log window before, good to know!
How long is that file of yours ? I expect the improvement to have proportionally most impact for files between 4 and 8 seconds. After that, it should converge with longer files.",,"Resolves: #5854 

I tested this by adding logging to the `SqliteSampleBlock`. I imported an 8-second mono file, which needs two sqlite blocks. Without this change, there were 11 sqlite queries, against only just 3 with.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Smoke-testing the tempo detection feature looks fine. (Most noticeable speed improvement would be on a weak, weak machine for clips between 6 and 10 seconds. Maybe even this may not be noticeable, but the code change was easy.)","So, I understand that staggered use of a pair of sample views doubles the number of sample blocks that keep caches, and avoids destruction of the earlier blocks too soon.  

The commit comment misleads?  The problem was not only where the fetching wraps around from end to start, but at other hops too?

It is appropriate to use mutable members instead of const-casting when the purpose is caching.
 The comment is correct at least in its intention - which isn't saying much. I suppose there's a lot of context to give to fully understand why this is needed, which would probably be overwhelming in a comment. And maybe I'm lazy, too.

Making the members mutable and `AddChannel` const."
5856,2024-01-10T15:39:51Z,2024-01-11T17:26:54Z,saintmatthieu,0,3,3,1243,21,1,1,['Music'],,1,92823.0,0,0,0,0,21010155.038389,,1,3,0,False,[],,,"Resolves: #5795

Please refer to 5795 for more detail.
**Note that this PR does not modify production code** (only marginally, see commit comment) **and hence does not require QA.**

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","banner? Declared but undefined, at first commit at least
 banner"
5857,2024-01-10T16:58:15Z,2024-01-10T18:09:01Z,saintmatthieu,0,0,1,3,1,1,1,['Music'],,1,4246.0,0,0,0,0,21094031.012866,,0,1,0,False,[],,,"The Linux package build job has been failing, apparently because of the `AudacityDontAskAgainMessageDialog` introduce with the tempo-detection title parsing PR. This PR attempts to fix this.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5791,2023-12-15T23:09:24Z,2024-01-10T14:59:54Z,saintmatthieu,10,30,12,3456,69,2,0,"['Music', '3.5']",312498.0,1,2217030.0,0,0,0,0,21105379.128046,,2,12,1,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","@rbdannenberg this might be of interest to you? In any case, this whole initiative would benefit from your input. Please note, I have pushed a few suggested commits onto the branch to simplify some algorithms.  I cherry-picked IteratorX.h from the wave-clip-refactoring branch, which you reviewed before.  I extended it with more utilities.  You can avoid temporary vectors of integers just to use iota.
 I figured out the reason for the crash in the unit test in macOS release builds, and I presume the Linux builds were failing for the same reason.
 @Paul-Licameli I've addressed the 3 things we've agreed on: the `div / 8` error, filtering 4/4 time signatures rather than mistakenly just taking the first of them, and using integer arithmetic when filtering out hypotheses that don't have a round number of tatums per bar.
I've also addressed some of the easiest other comments. Sorry at this late hour I don't have sufficient brains for more.
And finally, I've rebased and put aside the benchmarking commits for now. Since these _do not_ change the behaviour of Audacity, I think they can be pushed even while QA is doing its work. But for today they're out.
I'll make time tomorrow to address more of your comments if I'm confident they don't change behaviour. My benchmarking tests can help me verifying this. Reminding ourselves that https://github.com/audacity/audacity/pull/5791#discussion_r1441172648 points to a pre-existing problem that should have another issue and will be easily fixed.
 Does the last commit affect caching or the missed beats in time track? > Does the last commit affect caching or the missed beats in time track?

It's only about caching. What missed beats do you mean? @Paul-Licameli I cherry-picked the benchmarking test code onto that branch (including your suggestion commits). Production code is not modified at all so that won't interfere with QA. A lot of follow-up work depends on this and I already have a benchmarking-improvement ticket, so didn't want to add to the confusion by creating yet another similarly named ticket. @saintmatthieu 
When importing a non-looped rhythmical audio file, it still tries to detect its tempo even though it shouldn't.
So, to illustrate this misbehavior let's take [this loop of 78 bpm](https://www.dropbox.com/scl/fi/jarjq2jo22365jejvzbqp/bb_drum_break_loop_brooklyn1_78.wav?rlkey=nt9g6tug4kkczr2iywfxm4bzu&dl=0) as a source and trim it by about 1/16 from the right. The resulting loop would look smth[ like this](https://www.dropbox.com/scl/fi/pkp5l5i012x1viyw1f4f4/cut-off-loop.wav?rlkey=v59ce3mada9peqziy4jthxyhw&dl=0).
Import it into Audacity with ""Ask me each time"" in Preferences, and there you have it: Audacity falsely detects the tempo.
 
<img width=""400"" alt=""image"" src=""https://github.com/audacity/audacity/assets/70063970/719e541c-89ea-4d83-8d4a-9e33c995f159"">
 Yes: the algorithm detects it as 7 bars of 3/4. There probably is such a periodicity in the onset pattern, which is all the algorithm takes into account at the moment. If it also looked at timbre change patterns, it could probably realize that there in fact is no such periodicity. With a bit of luck I can work on that, but later.",,"Resolves: #5640

DSP method for the detection of musical meter, and its integration.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

# QA:

## New items

- [x] Importing very short file do not crash
- [x] Importing files longer than 1mn does not trigger the detection

## From title-parsing ticket #5570

This is a selection of the QA items found #5570 that might have been affected by this PR.

### UX flow and tempo-detection side effects
#### Importing with ""Ask me each time""

The user has their pref set to ""Ask me each time"",
- [x] importing on empty project launches user prompt
- [x] importing on a non-empty project, if the view is in minutes and seconds, nothing happens
- [x] importing on non-empty project, if the view is in beats and measures, clip is auto-stretched, and Ctrl-Z undoes import

#### Interacting with modal

The project is empty, the user hasn't already recorded their preference by checking ""Don't ask again"", and imports a file with BPM in its title. The prompt appears.

-  [x] If a user says ""No"", auto-stretches if in B&M mode, else nothing happens. Ctrl-Z undoes import.
-  [x] If a user says ""Yes"", the view switches to Beats-and-measures if not already there, and the project tempo becomes that of the clip. Ctrl-Z undoes only project configuration, without stretching the clip.

#### Persistency

- [x] The user recorded their preference by checking ""Don't ask again"". They now drop an audio file with BPM information in its title. Audacity behaves as described in this table:

| Case | Pref         | View is Beats and Measures | Project is empty | Result                                     |
| ---- | ------------ | -------------------------- | ---------------- | ------------------------------------------ |
| A    | ""Do nothing"" | No                         | Yes              | Nothing                                    |
| B    | ""Do nothing"" | No                         | No               | Nothing                                    |
| C    | ""Do nothing"" | Yes                        | Yes              | auto-stretch                               |
| D    | ""Do nothing"" | Yes                        | No               | auto-stretch                               |
| E    | ""Switch ..."" | No                         | Yes              | Switch to B&M and project takes clip tempo |
| F    | ""Switch ..."" | No                         | No               | Nothing                                    |
| G    | ""Switch ..."" | Yes                        | Yes              | project takes clip tempo                   |
| H    | ""Switch ..."" | Yes                        | No               | auto-stretch                               |

#### Miscellaneous
- [x] Answering ""Yes"" to the prompt adds a history item, and can be undone from the `Edit` menu or with ctrl-Z. Undoing means reverting to the previous tempo and view.
- [x] The amount of stretching is minimized through power-of-two speed changes. E.g., if a clip with title BPM 50 is dropped in a project with tempo 90, the clip is auto-stretched to 45 BPM, i.e., its speed is set to 90% rather than 180%.
- [x] For loops lasting _N_ quarter notes + _e_, with _e_ less than a 32nd, _e_ is trimmed off from the right (to ease horizontally duplicating loops)
- [x] Importing more than one file at once behaves like it did before - no stretching, no project re-configuration.","I just removed the contrast measure in a follow-up commit, improving performance of the classifier and simplifying the procedure. Please ignore this part while reviewing. Fix the comment fix the comment
 Put a banner on the file and `#include` guard
 I wish we had `std::span` from C++20.  I wish we could use `std::vector` less often to pass contiguous ranges of values.  Because `std::vector` specifies storage management details that are extraneous to the algorithm.

Without `span` you would need at least one extra `size_t` argument so that you could pass simple pointers.

Don't fix this but remember it and think about it.
 The assertion should be commented as a precondition You use template parameters T and U, not requiring them to be the same.

You use `double` in the return type.

Maybe you might make this more general?  (Could there be some future need to use it with `long double` or `std::complex<float>?)

Maybe

`template<typename ResultType = std::common_type_t<double, T, U>, typename T, typename U>`

Maybe also the common cases where T and U are both double or both float could also declare `extern MATH_API` explicit template instantiations here, and a companion .cpp file could generate the definitions.


 See here for a formula that suggests a one-pass accumulation of the answer which might or might not make a difference in performance https://en.wikipedia.org/wiki/Covariance#Mathematics

But see also https://en.wikipedia.org/wiki/Catastrophic_cancellation
 Here too, this is just variance (times N)
 I think this line is unnecessary to build
 Banners for this and other new source files
 Previous contents of `buffer` matter -- this is addition, not assignment.  A header comment should say that. I figured out that the only uses of `GetFloats` are in this function.  Is there a guarantee that `frame.data()` used as the buffer will be zero-initialized first?  Only if the given `frame` is empty before this `resize`.  Precede this with `resize(0)` and then there is no more doubt. Here is the use of `GetNextFrame` but I see no zeroing out of the buffer between passes.

Is there in fact a bug here?
 To treat the short file boundary case really fully, should there be a while loop below?  With a careful test that the loop makes progress each time?  Or should you be sure to zero-fill any uninitialized part remaining after the second read?  (Which would be a consequence of first resizing the buffer to zero above) Clarify with comments that this class does not calculate STFT, but is only a source of time-domain frames, with windowing function applied
 You might just write `std::plus{}`
 Not clear in context here, what string you mean.

Use `//!` instead of `//` and it becomes a Doxygen brief comment.
 Make a `@pre` comment
 I might write
```
if (index >= 0)
   index = index % fullSize;
else
   index = fullSize - (-index % fullSize);
```
 Are you also assuming `fullSize > 0` ?  (Loops below won't terminate if it is 0)  Can it be unsigned?
 Incorrect if x is 0 or negative; again consider an unsigned argument
 The function name doesn't suggest exactly what it does.  6 is not a power of 2 or of 3.
 Or simply `n % 9 == 0`
 So really `GetPowersOf2And3` could generate just the powers of 2 and the triples of those
 I don't know what `odf` abbreiviates
 `j` is never 0
 This condition too is always false I would make a small companion `.cpp` file, just to define the destructor non-inline, so that the linker doesn't need to de-duplicate the virtual function table but will allocate it just in that .cpp.

Not very important for a header file that is not widely used, but I make a habit of this whenever I make a new abstract base class.

 I took another look this morning, and I'm still not convinced, that the loop using `GetNextFrame` in `MirDsp.cpp` is correct.  I still think later passes have a buffer contaminated with previous data.

But all of that could be fixed down at this level, if only the first `AddChannel` instead assigned the buffer, not accumulating into it.  Only the second `AddChannel` should remain.  And then no special header comments would be needed.
"
5822,2023-12-28T12:25:35Z,2024-01-02T19:14:50Z,krawieck,0,0,1,0,1,1,1,[],,0,906126.0,0,0,0,0,21331713.648186,,0,1,0,False,[],,,"Resolves: #5831

 [discussed on the forum](https://forum.audacityteam.org/t/mac-os-icon-does-not-follow-platform-guidelines/93807)

>On macOS there are suggested guidelines for the style of app icons (a rounded rectangle with a shadow): https://developer.apple.com/design/human-interface-guidelines/app-icons#macOS
>
>I suggest creating a version of the original icon that will match the style of the system. But of course I’m not talking about a whole new design, but simply on taking the [official template](https://developer.apple.com/design/human-interface-guidelines/app-icons#macOS) for the icon and putting the Audacity logo on a white background on it.
>
>The benefit of it all will be that Audacity will feel more at home for macOS users.

Icon changed based on the Apple resources listed above. The change only affects Mac OS.

the icon looks like this:
![mac-icon-2048](https://github.com/audacity/audacity/assets/10037914/4b70625e-4358-4506-8bdc-7aea0642f82f)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

",
2224,2021-12-03T04:02:59Z,2022-06-24T14:26:37Z,Subhra264,10,30,13,837,11,3,1,[],2207021.0,1,66132415.0,5,0,0,0,21367582.696765,,0,13,0,False,"['crsib', 'LWinterberg', 'Subhra264', 'Paul-Licameli']","Hello @Subhra264, are you planning to continue work on this? Hello, sorry, I know that I am late( I had no idea about audio channels, samples, sample rate etc. so had to study it first), but I am still working on it..

The `ImportWavPack.cpp` file is almost ready, except the `ImportWavPackFileHandle::Import` function which is partly complete. For example I pushed all the `channels` to `outTracks`. But it's taking time because ~I am not sure what to do with the `samplesRead` decoded with `WavpackUnpackSamples` as  in  the `ImportFLAC.cpp` file, I saw that channels were directly pushed to `outTracks`,  but in `ImportOgg.cpp` file, the read samples were appended to channels.
Also in `Import.cpp` and `ProjectFileManager.cpp`(I forgot the exact name but it was something similar), it looked like only those `tracks` were used.
Basically, I am confused that if only channels created with `WaveTrackFactory` and `sampleRate` are enough or I need to somehow append the decoded samples to the channels.~ (Edit : Sorry I misunderstood it, now seems to be clear)

Hopefully I will be able complete in 1 or 2 days.
Thanks... Hi @Subhra264 

Sorry for the delay! Can you please rebase onto the latest master, squash you changes into a single commit and force push? > Hi @Subhra264
> 
> Sorry for the delay! Can you please rebase onto the latest master, squash you changes into a single commit and force push?

I would like to see a rebase too, but not necessarily a squash to one commit, if the intermediate steps are really useful for review of the new feature in sensible incremental steps, and not just corrections of mistakes.
 > Sorry for the delay!

No Issues! :)
>  but not necessarily a squash to one commit, if the intermediate steps are really useful for review of the new feature in sensible incremental steps, and not just corrections of mistakes.

yeah, actually, I added new commits after the previous commit is bug-free ( I mean, after resolving the bugs I encountered related to that particular feature/implementation, so may not be ""bug-free"" ). So, each commit mostly represents a new feature/file. For example, the first commit is about integrating wavpack and creating a file containing all the necessary class details, the second commit implements all the `ImportPlugin` and `ImportFileHandle` class methods, and the third commit is to read tags, etc.  Hi @Subhra264!

Sorry for this long delay. I have crafted a commit, that should resolve your CI issues https://github.com/crsib/audacity/commit/2a353fd357f6cebb1a9cda61be33a9afe3edfb36

Can you please cherry pick it in your branch and rebase everything onto the latest master? > I have crafted a commit, that should resolve your CI issues https://github.com/crsib/audacity/commit/2a353fd357f6cebb1a9cda61be33a9afe3edfb36

All checks passed! Thank you! > When I export from Audacity - the resulting file seems to be missing some metadata: VLC does not show the file length and does not allow seeking. Everything works fine, if I generate wv file using the official CLI.
> 
> Looks like you miss `WavpackUpdateNumSamples` call in the end.

I have replaced `FileIO` with `wxFile` as seeking to the first block of the file was required. I have tested the wavpack files generated from audacity with VLC media player. Now, it seems to work correctly as it is now allowing seeking and the audio length is also shown. Also, I have addressed the changes you asked me to make. The latest commit is now ready for another review.

 > Export looks fine now, I will review import now!

Ok then, I will commit and push the remaining ExportWavPack changes along with ImportWavPack changes. @LWinterberg can you please add Subhradeep Chakraborty to the AboutDialog?When I export from Audacity - the resulting file seems to be missing some metadata: VLC does not show the file length and does not allow seeking. Everything works fine, if I generate wv file using the official CLI.

Looks like you miss `WavpackUpdateNumSamples` call in the end.

This concludes the review of the ExportWavPack.cpp, review for the importer will follow. When I export from Audacity - the resulting file seems to be missing some metadata: VLC does not show the file length and does not allow seeking. Everything works fine, if I generate wv file using the official CLI.

Looks like you miss `WavpackUpdateNumSamples` call in the end.

This concludes the review of the ExportWavPack.cpp, review for the importer will follow. Export looks fine now, I will review import now! Decoding loop need some love :-)

And some minor are changes will be welcome! Great work! Just a few more issue, but I think that they are easy to resolve. A one very minor step left!","When I export from Audacity - the resulting file seems to be missing some metadata: VLC does not show the file length and does not allow seeking. Everything works fine, if I generate wv file using the official CLI.

Looks like you miss `WavpackUpdateNumSamples` call in the end.

This concludes the review of the ExportWavPack.cpp, review for the importer will follow. When I export from Audacity - the resulting file seems to be missing some metadata: VLC does not show the file length and does not allow seeking. Everything works fine, if I generate wv file using the official CLI.

Looks like you miss `WavpackUpdateNumSamples` call in the end.

This concludes the review of the ExportWavPack.cpp, review for the importer will follow. Export looks fine now, I will review import now! Decoding loop need some love :-)

And some minor are changes will be welcome! Great work! Just a few more issue, but I think that they are easy to resolve. A one very minor step left!","Resolves: #1470 

*(short description of the changes and the motivation to make the changes)*
This Pull Request is created to integrate wavpack with audacity so that users can import/export wavpack files.

### Export:
1. By default, hybrid mode is not selected and the wavpack library creates a pure lossless ""wv"" file. If hybrid mode is enabled and the ""created correction file"" option is not selected then it will create a single lossy ""wv"" file.
![Export wavpack image 1](https://user-images.githubusercontent.com/59690052/155146822-f9a2c96e-e901-41a9-8593-8ed005e9a80f.png)

2.  Enabled ""create correction file"", so it will create a lossy ""wv"" file along with its ""wvc"" correction file.
![Export wavpack image 2](https://user-images.githubusercontent.com/59690052/155146997-0ce94bc2-ccf7-4f6b-94ee-1c24edb8d4bd.png)

3. Added the value for ""Artist Name"" tag.
![Export wavpack image 3](https://user-images.githubusercontent.com/59690052/155147166-1b2ab3cf-3652-460c-aabd-cb23cbd5671b.png)

4. 
![Export wavpack image 4](https://user-images.githubusercontent.com/59690052/155147215-8cc72364-879f-4f68-9435-7f860c335953.png)

5. 
![Export wavpack image 5 (with wvc)](https://user-images.githubusercontent.com/59690052/155147264-b56965b1-e0e7-4d10-a822-45ab1b784e4b.png)

### Import
1. 
![Import wavpack image 1(with wvc)](https://user-images.githubusercontent.com/59690052/155147359-3290ca16-cd46-47a0-b987-d630ce8c6933.png)

2. 
![Import wavpack image 2(with wvc)](https://user-images.githubusercontent.com/59690052/155147429-4a3504db-95ac-408c-b63a-7836dbbb8d32.png)

3.
![Import wavpack image 3(with wvc)](https://user-images.githubusercontent.com/59690052/155147475-8e5f78cd-1364-40da-8708-a939c17d1f4c.png)

4. Exported tags are present in the imported audio
![Import wavpack image 4(with wvc)](https://user-images.githubusercontent.com/59690052/155148234-3b4f6ed0-393c-4fb3-9eff-8c76d97ad4c1.png)

Also, the exported ""wv"" file successfully opens with the ""VLC Media Player"".

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Please update to GPL2-or-later.

Or even better, please add `/*  SPDX-License-Identifier: GPL-2.0-or-later */` to the top of both Export and Import files This `#ifdef` since Audacity was ported to use CMake based build. It is save, but it could be dropped. Please add space before `(` Please rewrite using `BoolSetting`  Ditto You can tie to BoolSetting And this code becomes no longer needed Please move all the Setting objects to the anonymous namespace above. This way you can reuse them! You can write `const auto hybridMode = HybridModeSetting.Toggle();` And this code will go away as well! But you still need to flush the config, so this line remains! Let's use C++ way
```
struct WriteID final
{
    uint32_t bytesWritten {};
    ...
};
``` Please initialise values here, i.e. `wxCheckBox* mHybridMode { nullptr };` The correct code is `ProgressResult::Failed` You can just use `= {}` to zero initialize the structure Please use Setting object you've extracted to the anonymous namespace before Missing check for `IsOpened` Please remove `this` and use `nullptr`. Please use `nullptr`

To close the context - after this line please write:
```
auto closeWavPackContext = finally([wpc]() { WavPackCloseFile(wpc); });
```

This way the context will be closed using RAII and won't leak. On top of that - it will allow to simplify the code `constexpr size_t` please This call will go away `const auto` instead of `uint32_t` (or `const size_t`) done For consitency: `Exporting selected audio as WavPack` For consistency: `Exporting the audio as WavPack` `GetBuffer` reurns `const char*` already, and I see no reason to remove const here: you do not modify the buffer and `const T*` means that you could not modify the data, the pointer itself is modifiable.  WavPack works even with float32 data, so `int16Sample` sounds like a pessimiztion to me.

I think we should allow user to choose between `16 bit`, `24 bit` and `32 bit float`, similar to ExportPCM.

 (I believe, that Audacity will return you an array of 32 ints, if you request sample24 as an output format for the mixer. Am I right, @Paul-Licameli?) This cycle should be adopted to the different sample formats This can be `return ProgressResult::Failed` now, as memory managment is handled by C++ now"
5765,2023-12-08T14:53:45Z,2024-01-04T21:43:11Z,Paul-Licameli,8,12,5,201,4,2,2,"['Clips', 'refactoring']",252316.0,1,2357369.0,0,0,0,0,21599583.40596,,1,5,0,False,"['saintmatthieu', 'Paul-Licameli']","Rebased unchanged onto updated base branch
 Rebased unchanged onto the updated dependency
 Two new commits fix the error in InsertSilence that @chinakov found
 Fixed the last new commit Rebased unchanged onto updated dependency branch
 Inserted commit 914bd9bbc02b78d2e90f65c6d5c0f6c309d7ffdf to fix recording
 Did I clarify?

Try it with and without that fixup, and you can see the fix for what Anton said here: https://github.com/audacity/audacity/issues/5764#issuecomment-1864432582
 Yes, but I added follow-up comments: https://github.com/audacity/audacity/pull/5765#discussion_r1441709116",,"Resolves: #5764

Depends on
- #5752

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I'm puzzled ... where does `clip` get inserted now? Just looked at `CreateWideClip` and it doesn't look like it is in there. I'm having trouble understanding this:
`!(comp(x, y) || comp(y, x))` returns false if x and y are shared pointers to the same object, so if there are as many different clip addresses as there are shared pointers, all comparisons in the range `[b, e)` will return `false`. Won't then `adjacent_find` return an iterator to `b` ?

What about the following?
```
   std::unordered_set<const WaveClip*> addresses;
   for (const auto &clip : mClips)
      addresses.insert(clip.get());
   return addresses.size() == mClips.size();
   ``` > I'm having trouble understanding this: `!(comp(x, y) || comp(y, x))` returns false if x and y are shared pointers to the same object, so if there are as many different clip addresses as there are shared pointers, all comparisons in the range `[b, e)` will return `false`. Won't then `adjacent_find` return an iterator to `b` ?
> 
> What about the following?
> 
> ```
>    std::unordered_set<const WaveClip*> addresses;
>    for (const auto &clip : mClips)
>       addresses.insert(clip.get());
>    return addresses.size() == mClips.size();
> ```

No,  I wrote the equivalence correctly, as not-inequivalent.  If x is less than y or y is less than x, they are inequivalent.

But indeed I could write all this more simply, if not more efficiently.  But the efficiency is not important.

For some reason I thought operator < was not defined for shared_ptr but I'm wrong about that, so a simple std::set should work, but it will do a lot of heap allocation of tree nodes.

See also https://en.cppreference.com/w/cpp/header/flat_set

 Good point.

There are two paths in `CreateWideClip`, one copying a given clip, and the other, not.  The first does not add the clip to the track, but the other does.  I don't like that inconsistency and neither should you.
 Could be const I don't see how this might influence the execution of `InsertInterval`, despite the comment. Reviewing `CreateWideClip`: in principle could be `const`, but in practice it may also require a `const` version of `WaveTrack::CreateClip`. `InsertInterval` calls `InsertClip` which doesn't do it for empty clips unless they are placeholders.

 I see, I missed that line.
The emptiness-check before insertion was introduced by @vsverchinsky with 1073cef. The title of your fix-up commit says ""Fix case of record, stop, put cursor right of clip, record again"" ; is this problem specific to your branch ? I suspect it may be on 3.4.2. Background: I'd like to avoid this hacky solution. It's doesn't make sense. An alternative would to pass a flag `bool acceptEmptyClips` defaulting to false. But understanding why the problem is on your branch and not on 3.4.2 first (which I'm not sure of) could yield a better solution. The problem was specific to the branch.

Let me make sufficient conservative transformations now and worry about un-hacking Vitaly's change later.  I want this branch un-blocked.
 All right."
5835,2024-01-02T17:27:31Z,2024-01-04T12:09:52Z,Paul-Licameli,1,0,1,5,1,1,2,"['bug', 'Clips', 'refactoring']",70965.0,1,153744.0,0,0,0,0,21633984.816449,,0,1,0,False,['Paul-Licameli'],just a squash ,,"Resolves: #5834

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5752,2023-12-06T22:25:31Z,2024-01-04T21:41:05Z,Paul-Licameli,7,13,5,591,4,2,1,"['Clips', 'refactoring']",49699.0,1,2502938.0,0,0,0,0,21599711.211953,,1,5,0,False,"['Paul-Licameli', 'saintmatthieu']","Done with 1st iteration, withholding approval because I suspect something to be a potential crash. Please review again
 See where I use `AddCutLine`.  I move the Interval object so that I can call the member function.  Then I must be careful not to use the moved-from object again:   in general all you can do with moved-from objects safely is destroy them or reassign them.  So I assign null to the pointer, deleting the object.  Then I am also sure to null-check that pointer if it is visited again.  That is also why at line 1998 I can't use `const`.
 Rebased unchanged onto updated base branch
 Thanks for the skeptical review.

I could fix things with const-casts inside `DetachClip` but that would be uglier.

You should ask the question, why did I want to write the function in this weird way?  And I should ask myself...
 What bothers me a little about this transitional state of things, is that the Interval objects that represent wide wave clips are transient objects not owned by the WaveTracks, whereas the WaveClip objects are.

Because the Intervals are temporaries, it is good to make them immutables -- all the fields are const, though they are pointers giving non-const access to something else.

That made me think, somehow the temporarily constructed Interval -- representing a detached cutline -- should be treated as an ""expiring"" object when you put the cutline back in place again.  Letting AddCutLine take Interval by-value would not be the right way to do that, (at it could be for a unique_ptr type), because Interval has a copy constructor.

Ah well, so much for overthinking things.  I'm rewriting it to take Interval by non-const lvalue reference.
 One more round of review, please, @saintmatthieu ",,"Resolves: #5751

Depends on:
- #5748
- #5835

Interval-major rewrite of WaveTrack::ClearAndPaste

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Won't the first call to `std::move(interval)` invalidate `interval`, and if `NChannels() == 2` (meaning the interval owns two clips), won't this crash the second iteration ? const? const? @Paul-Licameli I received an email notification that you responded to that, but somehow the comment went lost. It went like this:

> No.
>
> interval is not a pointer. It's a structure.
>
> See how I defined DetachClip with the && qualifier. That forces move else it won't compile.
>
> I defined it that way because the function steals data from the interval.

I saw the declaration of `DetachClip` and can understand, yes, that the compiler will only accept it called on a right reference. But if the `move` has no side effect on a struct, then I don't see a reason for that signature.

Also, I made the following experiment
```
   struct Foo
   {
      int x = 1;
   };
   const auto foo = std::make_shared<Foo>();
   const auto bar = std::move(foo);
   REQUIRE(foo->x == 1);
   ```
which passes, i.e., the `Foo` instance has two strong references, so it doesn't look that `DetachClip` invalidates the member clip.

But @crsib is more knowledgeable than me in those things and if he does see a reason to do it that way then he can overtake this part of the review and I'd approve it as a whole. It may well be faster than you patiently explaining me what it is that I don't understand :D Std::move alone does nothing at runtime.  It is only a cast that allows overload resolution to functions taking rvalue reference arguments, which by convention are understooold as possibly stealing data. Your experiment applied move to the pointer but not to the object pointed at. Yes, but so does `DetachClip`:
```
WaveClipHolder DetachClip(size_t iChannel) &&
      { return move(iChannel == 0 ? mpClip : mpClip1); }
 ```
`mpClip` and `mpClip1` being shared pointers. > Std::move alone does nothing at runtime. It is only a cast that allows overload resolution to functions taking rvalue reference arguments, which by convention are understooold as possibly stealing data.

I never realized that, thanks. > Yes, but so does `DetachClip`:
> 
> ```
> WaveClipHolder DetachClip(size_t iChannel) &&
>       { return move(iChannel == 0 ? mpClip : mpClip1); }
> ```
> 
> `mpClip` and `mpClip1` being shared pointers.

So this function has `&&` where you might otherwise use `const`.  It is a memebee function that must be called in an rvalue or moved object.
 So why not go easy on ignorants like me and just use `const` ? I don't get it. You said it was stealing, but it isn't.  Because `const` would be wrong.  `this` has a side-effect.  I could omit `&&` but putting it there forces `this` to be an rvalue or be moved.
 > Because `const` would be wrong. `this` has a side-effect. I could omit `&&` but putting it there forces `this` to be an rvalue or be moved.

Apologies for the late reply, somehow I missed this response and thought this work was on hold.
In my `Foo` example above, `foo` doesn't get invalidated by the `std::move(foo)` call apparently because it is `const`. I tried again without `const`, and indeed `move` then invalidated it.
`Interval::mpClip` and `mpClip1` are also `const`, though. I went as far as building and hitting that `DetachClip` implementation with a breakpoint: the `move` doesn't have the side effect you expect.
So I stand by opinion that this unusual method signature isn't justified. Aha, you are right
"
5838,2024-01-03T03:14:17Z,2024-01-03T17:21:57Z,Paul-Licameli,1,0,1,4,1,1,1,[],47040.0,0,50863.0,0,0,0,0,21701662.318753,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @Paul-Licameli 's branch build:  audacity-win-3.5.0-alpha-20240103+c17e14b-x64

This appears to properly fix _(in Paul's branch)_ both #5389 and #5819",,"Resolves: #5389
Resolves: #5819

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5837,2024-01-02T21:56:06Z,2024-01-02T23:23:25Z,Gootector,0,0,1,2,1,1,1,[],,0,5240.0,0,0,0,0,21766377.470552,,0,1,0,False,[],,,"Update copyright to 2024

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5770,2023-12-11T15:49:35Z,2024-01-02T19:14:18Z,DavidBailes,0,4,1,5,1,2,1,[],,0,1913084.0,0,0,0,0,21781326.358295,,1,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5757

When the Music import dialog opens, it's not automatically read by NVDA or Narrator, but it is by Jaws. Both NVDA and Narrator still think that the focus is the imported track.

Problem:
In TrackPanelAx::GetState(), the state of the list or a list item is given as focussed without checking whether it is actually focussed. Looks like this has always been the case, but hasn't been a problem up to now.

Fix:
Check whether focused: For the list item, explicitly check, and the for list, let wxWidgets do this using a standard accessible object.

QA:
This fix needs to be checked with NVDA and with Narrator.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I'm not familiar with that code, and also I cannot hit a breakpoint here that'd give me more context. Would I need a narrator for that, I suppose? @DavidBailes if you're okay with it let's just proceed with this one to QA, provided you've added a QA checklist in the description. Yes, TrackPanelAx::GetState() only gets called if a screen reader or one of the accessibility testing tools are running. The relevant code for how wxACC_NOT_IMPLEMENTED is handled is pasted below.
Not sure a QA checklist is needed - it's pretty obvious whether on opening, the dialog is automatically read by Narrator and NVDA.
I'm happy for it to go straight to QA.

```
STDMETHODIMP wxIAccessible::get_accState ( VARIANT varID, VARIANT* pVarState)
{
    wxLogTrace(wxT(""access""), wxT(""get_accState""));
    wxASSERT( ( m_pAccessible != NULL ) || ( m_bQuiescing == true ) );
    if (!m_pAccessible)
        return E_FAIL;

    if (varID.vt != VT_I4 || varID.lVal < 0)
    {
        wxLogTrace(wxT(""access""), wxT(""Invalid arg for get_accState""));
        return E_INVALIDARG;
    }

    long wxstate = 0;

    wxAccStatus status = m_pAccessible->GetState(varID.lVal, & wxstate);
    if (status == wxACC_FAIL)
        return E_FAIL;
    if (status == wxACC_INVALID_ARG)
        return E_INVALIDARG;

    if (status == wxACC_NOT_IMPLEMENTED)
    {
        // Try to use child object directly.
        if (varID.lVal > 0)
        {
            IAccessible* childAccessible = GetChildAccessible(varID.lVal);
            if (childAccessible)
            {
                varID.lVal = 0;
                HRESULT hResult = childAccessible->get_accState(varID, pVarState);
                childAccessible->Release();
                return hResult;
            }
            else if (m_pAccessible->GetIAccessibleStd())
                return m_pAccessible->GetIAccessibleStd()->get_accState(varID, pVarState);
        }
        else if (m_pAccessible->GetIAccessibleStd())
            return m_pAccessible->GetIAccessibleStd()->get_accState (varID, pVarState);
    }
    else
    {
        LONG state = wxConvertToWindowsState(wxstate);
        pVarState->lVal = state;
        pVarState->vt = VT_I4;
        return S_OK;
    }
    return E_NOTIMPL;
}
``` Ok. > provided you've added a QA checklist in the description

I've added a note for QA to test with both Narrator and NVDA."
5808,2023-12-20T16:26:16Z,2024-01-02T19:13:44Z,DavidBailes,0,0,1,15,1,1,1,[],,0,1133248.0,0,0,0,0,21781361.618638,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4956

Problem:
Lists of formats and codecs don't have accessibility names. (For sighted users, the nature of the lists is obvious from the layout.)

Fix:
Add accessibility names for these lists.

Resolves: https://github.com/audacity/audacity/issues/4956

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5814,2023-12-22T16:15:28Z,2023-12-27T12:18:18Z,vsverchinsky,3,0,1,18,1,1,1,[],84445.0,1,417770.0,0,0,0,0,22324690.604121,,1,1,1,False,"['dozzzzer', 'vsverchinsky', 'Paul-Licameli']","Where is issue resolved by this PR?
 > Where is issue resolved by this PR?

There is no PR, but there was a message about assertion failure in the dev chat Tested",,"Make sure that adjustment range boundaries does not exceed actual clip boundaries

QA:
 - User can't create clips that are shorter than 1 sample length long with trim/stretch 
 - Correct trim boundaries detected (trims are limited by the trimmed clip length itself and other clips)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5816,2023-12-25T08:56:53Z,2023-12-25T10:22:54Z,crsib,1,0,2,32,2,1,1,[],5123.0,0,5165.0,0,0,0,0,22504411.516145,,0,2,0,False,['crsib'],This PR goes straight to merge - it only affects local builds,,"Resolves: #5419 
Resolves an issue I have with the latest XCode, where Expat is searched by the DYLD in the wrong folder.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5812,2023-12-21T16:46:08Z,2023-12-22T12:40:39Z,Paul-Licameli,2,0,1,5,1,1,1,['bug'],34.0,1,71674.0,0,0,0,0,22755349.024544,,1,1,0,False,"['crsib', 'Paul-Licameli']","Should this fix be considered for another 3.4 patch?
 Let's discuss this at triaging ( @dozzzzer )",,"... the bug occurred only for tracks deserialized from a project file, and only the first time (not again, after undo and repetition of the drag)

Resolves: #5389 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5570,2023-11-10T13:41:18Z,2023-12-05T11:58:46Z,saintmatthieu,11,30,9,757,19,3,1,['Music'],1211234.0,1,3615230.0,0,0,0,0,22765285.265264,,2,9,1,False,"['dozzzzer', 'saintmatthieu']","Of course, I'll do a proper squash before merging. Thank you! #### 1) When importing a loop after another loop with a different tempo, stretching is applied

1. In a clean project, import a loop of 136 bpm
2. Click ""Yes"" in the appeared dialog
3. Observe: the project tempo is set to 136 bpm
4. Close the Track
5. Import a loop of 89 bpm
6. Click ""Yes"" in the appeared dialog
7. Observe: the project tempo is set to 89 bpm (which is correct), but the 50% stretching is applied to the clip

#### 2) When auto-stretching an imported loop, the algorithm doesn't seem to take into account its stretch ratio 

1. Set the project tempo to 90 bpm
2. Import a [4-bar loop of 128 bpm](https://www.dropbox.com/scl/fi/gksbt344qv8a5bkch6xc1/DK_Break_128_PL.wav?rlkey=1w0gj7ski886piotia8pgx28p&dl=0)
3. Click ""No"" in the Music Import dialog
4. Observe: the loop's speed is 70% (70.3125% to be precise)
5. With snapping enabled, shrink the loop to fit exactly 2 bars
6. Observe: the loop's speed is now 140.625%
7. Compare stretch ratios – 1.422 vs 1.406

Thus, it was supposed to go with the lesser one – 1.406 – which in this particular case would mean it should've **shrunk** the clip to 2 bars @ 90 bpm, not expanded it up to 4 bars @ 90 bpm.

#### 3) Undo resets the stretch ratio when Undo-ing

1. Set the project tempo to 120 bpm
2. Import a clip of 90 bpm
3. In the Music Import dialog, click No
4. Observe: the clip is shrunk (133% speed)
5. By holding Alt (Option), drag the edge of the clip and release to shrink or stretch the clip even more
6. Ctrl (Cmd) + Z

Actual result: back to 100% speed
Exp. result: 133% speed

#### 4) When importing a clip and auto-stretching it, the imported clip retains its original length and speed until you hover the mouse over the clip's title bar

1. Import a clip that has a tempo different from the project's one
2. Click No in the Music Import dialog in order to perform auto-stretching
3. Observe: no speed value at the top right corner of the clip's title bar
4. Hover over the clip's title bar
5. Observe: now the speed value pops up and the clip shrinks (expands) instantaneously


https://github.com/audacity/audacity/assets/70063970/f704a66a-f52d-47f6-a6a2-92251dc5d002

@saintmatthieu 


 @dozzzzer the problems you reported should be fixed now.
I also simplified the regex and made it more conservative, too. Essentially, ""BPM"" (case-insensitive) must be found after the BPM value (will add something to the QA list). If this is not the case, I'm working on a DSP-based plan B anyway, which would give a second chance for these files to be tempo-detected.

Thanks, those were all good catches. @saintmatthieu **Music Import** preference isn't working now in the updated branch.
Regardless of the selected option in the Music Imports section, a musical file is imported as a regular audio file. > @saintmatthieu **Music Import** preference isn't working now in the updated branch. Regardless of the selected option in the Music Imports section, a musical file is imported as a regular audio file.

@dozzzzer I just tried it again, and it works for me. Could it be because the file you import doesn't have ""BPM"" in its title? https://github.com/audacity/audacity/pull/5570#issuecomment-1831475562 @LWinterberg just realizing that I've only been doing tempo detection when only one file is imported at a time.
I'd keep the multiple-file import in a follow-up ticket, because the desired behaviour isn't so simple.
If the user has set her preference to either auto-configure or do-nothing, then I suppose the behaviour would be almost as it is now, i.e., either do nothing or switch to B&M and auto-stretch, not touching the project tempo.
If the preference is on ask-me-each-time, though, the dialog might need be changed. Also, the preference's wording might need be generalized. Follow-up ticket regarding multiple-file import: https://github.com/audacity/audacity/issues/5726 @saintmatthieu 
- in Beats and Measures mode, when selecting ""No"" in the Music Import dialog, the imported clip gets auto-stretched. Ctrl-Z should then undo the import, rather than undoing the auto-stretching of the clip:

https://github.com/audacity/audacity/assets/70063970/a77bd0f9-8cb7-4e17-b00d-426d5176822b

- in Minutes and Seconds mode, when selecting ""No"" in the Music Import dialog, the imported clip isn't auto-stretched. Ctrl-Z should then undo the import right off. Currently, the first attempt to Ctrl-Z doesn't do anything (the menu entry is ""undo Automatic Music Configuration""), and only the second one undoes the import:


https://github.com/audacity/audacity/assets/70063970/1c3c6a4c-8ce5-4edc-993c-9338d78eafe4

> The prompt can be tab-traversed

This doesn't work on macOS. Cmd + Fn + F6 should enter tabulation mode, but it doesn't.



 @dozzzzer Just pushed a fix for both bullet points 1 and 2. As discussed and clarified, the tab-traversing item is actually only relevant to Windows ; I wasn't aware such functionality wasn't available on Mac.
Cheers! Tested @Paul-Licameli I'm addressing your comments on #5791.Approved, though would be nice to see this PR squashed into fewer amount of commits There are compilation issues that need to be addressed. 
PR has few commits that undo or redo something, would be nice if they are gone","Approved, though would be nice to see this PR squashed into fewer amount of commits There are compilation issues that need to be addressed. 
PR has few commits that undo or redo something, would be nice if they are gone","Resolves: #5548

Introduce `lib-music-information-retrieval` with its filename parsing and integrate it into the import workflow.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes in behavior

## QA:

### New preference
- [x] There is a new section in the `Import / Export` preferences. Its values match the pop-up dialog mentioned below, and using the ""Don't ask me again"" checkbox in the pop-up modifies the value in the preferences accordingly.
- [x] By default, it has the value ""Ask me each time"".

### Regular expression

The regex may be (more or less correctly) summarized as `<(anything + (directory) separator) or nothing> <integer from 30 to 300 inclusive> <separator or nothing> <bpm (case-insensitive)> <separator or nothing>`. In case that helps, here is the current list of test cases:
```cpp
      { ""120 BPM"", 120 },

      // it is case-insensitive
      { ""120 Bpm"", 120 },

      // there may be an extension
      { ""120 BPM.opus"", 120 },

      // it may be preceeded by a path
      { ""C:/my\\path/to\\120 BPM"", 120 },

      // value must be between 30 and 300 inclusive
      { ""1 BPM"", std::nullopt },
      { ""29 BPM"", std::nullopt },
      { ""30 BPM"", 30 },
      { ""300 BPM"", 300 },
      { ""301 BPM"", std::nullopt },
      { ""1000 BPM"", std::nullopt },

      // it may be preceeded by zeros
      { ""000120 BPM"", 120 },

      // there may be something before the value
      { ""anything 120 BPM"", 120 },
      // but then there must be a separator
      { ""anything120 BPM"", std::nullopt },
      // there may be something after the value
      { ""120 BPM anything"", 120 },
      // but then there must also be a separator
      { ""120 BPManything"", std::nullopt },

      // what separator is used doesn't matter
      { ""anything-120-BPM"", 120 },
      { ""anything_120_BPM"", 120 },
      { ""anything.120.BPM"", 120 },

      // but of course that can't be an illegal filename character
      { ""120/BPM"", std::nullopt },
      { ""120\\BPM"", std::nullopt },
      { ""120:BPM"", std::nullopt },
      { ""120;BPM"", std::nullopt },
      { ""120'BPM"", std::nullopt },
      // ... and so on.

      // separators before and after don't have to match
      { ""anything_120-BPM"", 120 },

      // no separator between value and ""bpm"" is ok
      { ""anything.120BPM"", 120 },

      // a few real file names found out there
      { ""Cymatics - Cyclone Top Drum Loop 3 - 174 BPM"", 174 },
      { ""Fantasie Impromptu Op. 66.mp3"", std::nullopt },
```
### UX flow and tempo-detection side effects
#### Importing with ""Ask me each time""

The user has their pref set to ""Ask me each time"",
- [x] importing on empty project launches user prompt
- [x] importing on a non-empty project, if the view is in minutes and seconds, nothing happens
- [x] importing on non-empty project, if the view is in beats and measures, clip is auto-stretched, and Ctrl-Z undoes import

#### Interacting with modal

The project is empty, the user hasn't already recorded their preference by checking ""Don't ask again"", and imports a file with BPM in its title. The prompt appears.

-  [x] If a user says ""No"", auto-stretches if in B&M mode, else nothing happens. Ctrl-Z undoes import.
-  [x] If a user says ""Yes"", the view switches to Beats-and-measures if not already there, and the project tempo becomes that of the clip. Ctrl-Z undoes only project configuration, without stretching the clip.

#### Persistency

- [x] The user recorded their preference by checking ""Don't ask again"". They now drop an audio file with BPM information in its title. Audacity behaves as described in this table:

| Case | Pref         | View is Beats and Measures | Project is empty | Result                                     |
| ---- | ------------ | -------------------------- | ---------------- | ------------------------------------------ |
| A    | ""Do nothing"" | No                         | Yes              | Nothing                                    |
| B    | ""Do nothing"" | No                         | No               | Nothing                                    |
| C    | ""Do nothing"" | Yes                        | Yes              | auto-stretch                               |
| D    | ""Do nothing"" | Yes                        | No               | auto-stretch                               |
| E    | ""Switch ..."" | No                         | Yes              | Switch to B&M and project takes clip tempo |
| F    | ""Switch ..."" | No                         | No               | Nothing                                    |
| G    | ""Switch ..."" | Yes                        | Yes              | project takes clip tempo                   |
| H    | ""Switch ..."" | Yes                        | No               | auto-stretch                               |

#### Miscellaneous
- [x] Applying macro to file(s) still works (cf. https://github.com/audacity/audacity/issues/5604)
- [x] Importing file without BPM info in file name behaves as before
- [x] The prompt can be tab-traversed, has all buttons functional, and the close button as well as ESC are equivalent to ""No"".
- [x] Answering ""Yes"" to the prompt adds a history item, and can be undone from the `Edit` menu or with ctrl-Z. Undoing means reverting to the previous tempo and view.
- [x] The amount of stretching is minimized through power-of-two speed changes. E.g., if a clip with title BPM 50 is dropped in a project with tempo 90, the clip is auto-stretched to 45 BPM, i.e., its speed is set to 90% rather than 180%.
- [x] For loops lasting _N_ quarter notes + _e_, with _e_ less than a 32nd, _e_ is trimmed off from the right (to ease horizontally duplicating loops)
- [x] Pressing the left or right arrow with some clip selected and snap enabled now snaps the resulting position. (That's an important one, ask if it's unclear, which it probably is.)
- [x] If you have audio files with numbers in their name that you think might be misinterpreted as tempo, please try them out. Likewise, if you have audio files with tempo in their name they don't get recognized. Any misinterpretation please share the file name with me so that I can improve my regex with it. Thank you.
- [x] Importing more than one file at once behaves like it did before - no stretching, no project re-configuration.
","Is this file really needed here? I'd much prefer it not to be an operator overload https://docs.wxwidgets.org/3.0/classwx_dialog.html#a585869988e308f549128a6a065f387c6 Same here, single `SetEscapeId(wxID_NO)` should do the thing not used Shouldn't be there a way to change that in preferences dialog? This file has too many whitespace changes And `#include` reorderings... Shouldn't we display detected bpm value in that dialog, to make user well informed about the choice?

Btw, I get strange results when trying to import ""Big Bass Hit"" from MuseHub. It sets my project tempo to 542,373 `constexpr auto epsilon = std::numeric_limits<double>::epsilon() * mStep`? Yo, me too. I messed up a constant during clean-up, fix in 6c471cd. I want all chances on this library's side that it stays well formatted. But maybe it's time to check in this .clang-format in the root of the repo - I don't know of an automation that would want to reformat the entire repo. Why not? I find it sensible and it reads great:
```
   MIR::MusicInformation musicInfo { fileName, newTrackDuration };
   if (!musicInfo)
      return;
``` Cool, thanks! So that means that wxWidgets by default binds ESC with clicking a No button ?..
Anyway, thank you, it does work. We haven't discussed that with Design. I would say so, only then I wouldn't know if checking ""Don't ask me again"" should modify the value in that other dialog. @LWinterberg ? VSCode does that for me on save. I could only stage and commit the changes that are not automatic, but we're better without those trailing whitespaces anyways. Obviously devs tried to manually keep these in order, and yet it was imperfect. Automatic re-ordering is painful for the reviewers when not done regularly, sorry about that, but then everyone could do it automatically and time would be spared. ... pity that there isn't a `SetCloseButtonId(...)` ... I don't think this problem is related to the step size. The comment intends to give a comprehensive explanation, please let me know if there are unclarities. I'm doing some after-the-fact review of this because I need the background to understand #5791.

I note the first commit in the sequence didn't build (test compilation failed)
 Not yet used Second commit failed to configure the build because this file did not exist yet
 No banner
 No banner All of this could have used ShuttleGui instead
 Banners please for this and the .h file
 This associated empty user-visible strings with the identifiers.  That's wrong.  But what happened in later commits? ...
 I really don't like it that lib-wave-track and lib-track have all this mention of stretches and tempos, which are extraneous to what should be lesser and more easily understood class responsibilities.

It's not for you to clean up now, but along with wave clip refactoring, I want to figure out dependency inversion between lib-wave-track and lib-stretching-sequence.

 This might use `ForEachClip`
"
5810,2023-12-21T12:05:09Z,2023-12-21T18:10:02Z,LWinterberg,0,0,1,0,1,1,1,['non-code'],,1,21897.0,0,0,0,0,22821988.055888,,0,1,0,False,[],,,"Resolves: #5522

build to test: https://github.com/LWinterberg/audacity/actions/runs/7287719784 (probably)
",
5777,2023-12-12T02:31:14Z,2023-12-21T15:57:14Z,Paul-Licameli,1,0,5,212,13,1,1,"['Clips', 'refactoring']",737069.0,1,825963.0,0,0,0,0,22829958.710981,,2,5,0,False,['Paul-Licameli'],"Rebased onto updated dependency PR
",,"Resolves: #5776

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5775,2023-12-11T22:24:17Z,2023-12-21T15:55:06Z,Paul-Licameli,1,0,14,1502,32,1,1,"['Clips', 'refactoring']",751860.0,1,840652.0,0,0,0,0,22830088.375494,,2,14,1,False,['Paul-Licameli'],"Rebased onto updated dependency PR
",,"Resolves: #5774

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5773,2023-12-11T21:25:07Z,2023-12-21T14:57:00Z,Paul-Licameli,1,4,9,307,24,2,1,[],754243.0,0,840716.0,0,0,0,0,22833576.259089,,1,9,0,False,['Paul-Licameli'],"Rebased onto the new dependency, and also fixed that rvalue references in loops.
I have nothing to add besides that spooky `const &&`",I have nothing to add besides that spooky `const &&`,"Resolves: #5772

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Constant rvalue references are highly unusual. Why they are needed here? I will strike const Why the rvalue reference is needed here? Const was a mistake.

&& isn’t necessary but it is a reminder that the interval iterator dereferences to a value, not a reference as in the old version.

Interval iterators dereference to a shared pointer to a temporary structure.
"
5807,2023-12-20T14:33:19Z,2023-12-21T14:47:04Z,Paul-Licameli,1,0,1,20,1,1,1,"['bug', 'Clips', 'refactoring']",74699.0,1,87228.0,0,0,0,0,22834174.212511,,0,1,0,False,['crsib'],Wrong target branch?,,"Resolves: #5806
*(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5802,2023-12-19T15:07:59Z,2023-12-21T13:18:27Z,DavidBailes,3,0,1,1,1,1,1,[],5654.0,0,166229.0,0,0,0,0,22839494.847167,,0,1,0,False,['petersampsonaudacity'],"
@LWinterberg @dozzzzer @crsib 

Testing on W10 with @DavidBailes ' branch for this:  audacity-win-3.5.0-alpha-20231219+2e17667-x64

This now works properly in David's branch, exporting with the correct number of channels the user has set to record to before setting up the Timer Recording.

Works properly either if the user examines the deeper dialog:
![image](https://github.com/audacity/audacity/assets/50205984/260f01a3-cb71-4b84-bac1-a5551626d19a)

Or just uses the **OK** button without drilling down with the **Select**
![image](https://github.com/audacity/audacity/assets/50205984/323d3faa-049d-4367-9653-8b0d83919d2d)

Thanks for that Fix @DavidBailes 
 As David suggests the PR also appears to properly fix #4952  @crsib Dmitry, now that you have approved this, any chance we can get this pulled into master please?",,"Resolves: https://github.com/audacity/audacity/issues/5580
May also at least help with: https://github.com/audacity/audacity/issues/4952

Timer Record automatic export defaults to mono when project is set to record in stereo

Problem:
In the TimerRecordDialog class, m_iAutoExportChannels is initialized to 0; In the TimerRecordDialog, if you enable automatic export, but don't press the Select button to open the Export Audio dialog, then this leads to the export failing. If you do press the Select button and open the Export Audio dialog, then initially channels is set to mono, even if you're going to record in stereo. (There's a a call to TimerRecordExportDialog::Bind with number of channels equal to 0, then a call to ExportFilePanel::Init, with number of channels 0. When this parameter is zero this Init function gets the correct number of channels from the tracks to be exported, but in this context, there are as yet no tracks.)

Fix:
Set m_iAutoExportChannels to the number of recording channels.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5798,2023-12-18T20:14:04Z,2023-12-21T11:17:00Z,Gootector,2,0,1,4,1,0,0,[],175684.0,0,227003.0,0,0,0,0,22846756.499979,,0,1,0,False,"['crsib', 'Gootector']","@crsib Could U merge my PR? Thanks, and Happy X&NY for U and the entire Audacity Team. Thank you, mate! Happy NY to you too",,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3609,2022-09-13T10:10:17Z,2023-12-20T14:09:11Z,LWinterberg,0,1,1,3,1,1,1,[],,0,40017538.0,0,0,0,0,22922850.1352,,0,1,0,False,[],,,"Resolves: #2482 

While #2484 set a reasonable min-height and makes the window resizable once it overlaps with the taskbar, it still would allow for the default window size to go all the way from the top to the taskbar. Here I shave off another 100px so that a user always has access to the entire thing without resizing (even though they still may need to drag it upwards to have it not overlap). 

NB: This intentionally targets master; I'm not sure how this handles HiDPI and dual screens with different sizes, and I don't want to hold up this release with a P4 fix","OK for its effects

Stylistically, I'd prefer the name `wxDefaultCoord` to the magic number -1, spaces after each comma and around binray `-`, and a line break to keep it in 80 columns.

"
5781,2023-12-13T10:53:02Z,2023-12-20T10:02:44Z,LWinterberg,2,0,1,14,1,1,1,[],707.0,1,601786.0,0,0,0,0,22937638.548816,,0,1,0,False,"['crsib', 'LWinterberg']","You can run the job manually with the beta/release type aha! In that case, https://github.com/LWinterberg/audacity/actions/runs/7194667312 would be the build to test this with (I think - I'll try when it finishes)

Edit: It appears to work for me on Windows; it even sets the language to the language selected in the installer (as opposed to system language, which is what the Tools -> Reset prefs command does)",,"Resolves: https://github.com/audacity/audacity/issues/3781

This probably isn't testable with the PR build, but should be in the next beta. Unless @crsib has an idea on how to make it happen earlier. ",
5804,2023-12-19T17:00:52Z,2023-12-20T09:05:15Z,crsib,0,0,1,18,4,1,1,[],,1,57867.0,0,0,0,0,22941088.421266,,0,1,0,False,[],,,"Resolves: #5803 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5701,2023-11-28T05:15:55Z,2023-12-18T00:32:02Z,ksoze95,0,1,6,573,11,1,1,[],,0,1711062.0,0,0,0,0,23144592.780353,,1,6,0,False,[],,,"Resolves: #4929

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Could become a properties of the `AdornedQtRulerPanel` object, otherwise you can't possibly know that these properties are needed by looking at the interface of the class itself"
5685,2023-11-25T18:16:30Z,2023-12-04T13:27:34Z,LWinterberg,27,10,7,324,8,4,1,[],62496.0,1,1634928.0,2,0,0,0,23433092.194076,,0,7,1,False,"['LWinterberg', 'SteveDaulton', 'petersampsonaudacity', 'Paul-Licameli']","Here we can see that there is  slight clipping of the negative going waveform in the right channel:

![First Track000](https://github.com/audacity/audacity/assets/11681097/2cb6cc02-5aaf-48c8-9db6-443c4ec02730)
 What's an appropriate level to set the Limiter threshold?

![First Track001](https://github.com/audacity/audacity/assets/11681097/a33212a4-cacb-4b67-9a46-9ec7f80585a9)


Looking more closely at the peaks, I think I may need a bit of compression before applying the limiter.

![First Track002](https://github.com/audacity/audacity/assets/11681097/eef9319f-3422-434d-b618-81bd4c4ce3d1)

 Fixing the vertical scale might be useful.

![First Track003](https://github.com/audacity/audacity/assets/11681097/a189dde0-d909-4d4e-ac5d-337d2b121ae1)

![First Track004](https://github.com/audacity/audacity/assets/11681097/78dbcab1-8b5c-4296-8bdb-fb179535719e)
 I think the big plus-sign cursor for advanced vertical zooming in Spectrogram view looks most odd, cheap-and-tatty rather than carefully crafted.  Maybe it's just too big?

But basically I don't see what was wrong withe the old cursor, the magnifying glass.

-----------------------------------------------------------------------

> Fixing the vertical scale might be useful.

In Spectrogram view it can shrink to a very thin bar with no reticules or numbers at high V-Zoom levels:
![image](https://github.com/audacity/audacity/assets/50205984/7ccb3765-1da3-461a-9cce-4f58250d3785)
 I did some testing on old versions - and it appears that Advanced Vertical zooming was present from at least 1.2.6 onwards, so Dominic implemented that very early on.  And in those days it was only waveforms, no Spectrogram views back then.

a) The cursor back then was the little magnifying glass with the plus sign in it (which changed to a magnifying glass with a minus sign when you you used Shift modified left click to reverse the vertical zoom.

b) you could specify the vertical range to be zoomed with the click and drag in the Vertical Scale 

c) There was no right-click context menu

d) But the vertical zooming with a left mouse button click in the vertical scale could be used many times - and it centred on where the cursor was in the Vertical Scale.  In contrast the simple non-advanced context menu zoom in on the waveform seems to be limited to just one zoom in in this branch _(this limitation is not new it is in 3.4.2 and 2.4.2, so we have lost functionality there c.f. 1.2.6)_


e) in 1.2.6 the vertical scale was handled well even with a lot of zooming in

And I think that @DavidBailes is absolutely right in that it was only ""Advanced"" vertical zooming for many years and many versions of Audacity.  And is was only later when James introduced the new ""Simple"" vertical zooming accessed from the Vertical Scale context menu that the old logstanding vertical zoom acquired the label ""Advanced""

### TL;DR
**I would would _strongly_ like to see Advanced vertical zooming retained for Waveforms as well as Spectrograms.** Having a separate normal zoom and advanced zoom is an extremely poor allocation of functionality. Another example of this are cut lines, which, despite having been introduced in 2006 IIRC, have a mere 23 mentions in the forum. Having these features and having them off by default adds a *lot* of complication for no real benefit for the *vast* majority of users.

For spectrograms, Steve was able to [demonstrate](https://youtu.be/x8Tk734GbjE) how the drag-to-zoom plays well into our other tools, namely the drag-to-make-box selection. Hence why this PR enables it for that use by default. 

For waveforms, I do not see this this level of usefulness for the drag-to-zoom feature. What I do see however is a lack of functionality: If you have a recording or a stem at -10 or -20dB or so, it currently is very hard to quickly zoom in while keeping the 0-line centered. This PR makes this much more used feature a lot faster. Note that ctrl+scroll and shift+scroll are still possible and may be used to create all of the situations shown in this thread. 

For neither view I see a good argument to keep click-to-zoom-in, shift-click-to zoom-out or shift-right-click-to-reset. The former is *way* too easy to trigger accidentally and the latter two are stupidly hard to discover. Just imagine, you just recorded something, accidentally clicked the vertical ruler and now it *looks* like your waveform is hopelessly off-center and clipping hard, and ctrl+z deletes the recording you just made. That's extremely panic-inducing, and we will not keep it, and certainly not by default. 

> I think the big plus-sign cursor for advanced vertical zooming in Spectrogram view looks most odd, cheap-and-tatty rather than carefully crafted. Maybe it's just too big?

Magnifying cursor implies click-to-zoom (compare to how browsers behave when viewing an image in a new tab). I use the default crosshair cursor here (which, aside, would be the correct one for the box selection in the spectrogram as well). But what i really need is a rotated I-beam-looking thing, or something else which is pretty clearly a horizontal line.

> In contrast the simple non-advanced context menu zoom in on the waveform seems to be limited to just one zoom in in this branch

That's a bug in my branch, I'll fix it. use ctrl+scroll in the meantime. >>  In contrast the simple non-advanced context menu zoom in on the waveform seems to be limited to just one zoom in in this branch

> That's a bug in my branch, I'll fix it. use ctrl+scroll in the meantime.

actually, I can't reproduce it. right-click > zoom in happily zooms in again and again for me.  Rather that removing functionality that close to a quarter of responders to your own survey say that they use, maybe it would be better to redesign it in a way that is more discoverable and less prone to accidental clicking. For example, some audio apps use explicit zoom / pan controls on the track that operate in a similar way to scroll bars and are designed to look like zoom / pan controls.

By the way, testing https://github.com/LWinterberg/audacity/actions/runs/7011324514 on Linux, because the ""Advanced Vertical Zooming"" option is still available in the menu but non-function in any of the track waveform views, I predict that if Audacity is released like this, there will be a lot of people thinking that it is yet another thing that is broken.

Personally, I think that the way that ""Advanced Vertical Zooming"" was implemented (up to and including 3.4.2) is sub-optimal for the reasons that you describe. I also think that Advanced Vertical Zooming is a very valuable feature for advanced audio editing that must be retained. In my opinion, this pull request should be closed and an ""Enhancement"" issue drafted for a better implementation of current functionality. > because the ""Advanced Vertical Zooming"" option is still available in the menu but non-function in any of the track waveform views, I predict that if Audacity is released like this, there will be a lot of people thinking that it is yet another thing that is broken.

https://github.com/audacity/audacity/pull/5675 is the companion PR which removes the preferences. The zoom got unbroken now. Using ctrl+scroll and shift+scroll, you can do all the advanced zooming you want now, plus keep the benefit of it centering around 0 if you never offset the view. Testing on W10 with latest branch for this:  audacity-win-3.5.0-alpha-20231129+dd45d48-x64

@LWinterberg  
In the Vertical Scale context menu in Spectrogram view what is the difference between **Zoom to Fit** and **Reset Zoom** ?
![image](https://github.com/audacity/audacity/assets/50205984/df6fed54-6c9b-49e1-b329-362fa03a8709)


In contrast, I note that Waveform view only has **Reset Zoom** I don't need to zoom asymmetrically on the waveform very frequently, but as in the examples above, I do sometimes need to do so. Will I still be able to do that when I need to? > I don't need to zoom asymmetrically on the waveform very frequently, but as in the examples above, I do sometimes need to do so. Will I still be able to do that when I need to?

Definitely yes. Ctrl+scroll zooms in and out, Shift+scroll moves the wave up and down.  > Ctrl+scroll zooms in and out, Shift+scroll moves the wave up and down.

FWIW, I find that a lot more cumbersome than just click and drag, especially with the dB scale where there are three different mouse-wheel actions. > In the Vertical Scale context menu in Spectrogram view what is the difference between Zoom to Fit and Reset Zoom ?

One goes to half the sample rate of the track, one goes to ""normal"" zoom (I think 20k?). There's a noticable difference between them if you go into the >48k sample rates, but for 44.1k it's very similar. > > In the Vertical Scale context menu in Spectrogram view what is the difference between Zoom to Fit and Reset Zoom ?
> 
> One goes to half the sample rate of the track,

Also known as the Nyquist frequency, beyond which, any higher frequency content you might have sampled is aliased.

(Study rising square wave chirps, contrasting Square with Square, no alias.  The overtones of the perfect square wave are ""bouncing off the ceiling"".  But Square, no alias only sums lower terms of the Fourier series, making a wave not exactly square.)

<img width=""1292"" alt=""image"" src=""https://github.com/audacity/audacity/assets/11670369/9a22e4ab-7800-4dc7-af6e-cc604a60e743"">


<img width=""1292"" alt=""image"" src=""https://github.com/audacity/audacity/assets/11670369/36b09064-2122-45cc-82fc-fa917cb0847d"">

Here you see the ""Gibbs Effect"" at the start of the second chirp -- a certain mathematically unavoidable overshooting that happens when you truncate the Fourier series.

<img width=""1292"" alt=""image"" src=""https://github.com/audacity/audacity/assets/11670369/3cc88af6-28e9-4d74-99d3-0ebc48d44429"">

> one goes to ""normal"" zoom (I think 20k?). There's a noticable difference between them if you go into the >48k sample rates, but for 44.1k it's very similar.

 > > In the Vertical Scale context menu in Spectrogram view what is the difference between Zoom to Fit and Reset Zoom ?
> 
> One goes to half the sample rate of the track, one goes to ""normal"" zoom (I think 20k?). There's a noticable difference between them if you go into the >48k sample rates, but for 44.1k it's very similar.

Oh yeah -- I forgot this commit 3142060 where I changed default Spectrogram preferences according to Martin's wishes.  But for long before that, maximum frequency preference defaulted to 8000 Hz not 20000.

Zoom reset readjusts the top of the scale to whatever that preference is (but strangely, not the bottom -- which will be 0 for linear or 1 for logarithmic).

Zoom to fit goes up to Nyquist.

 Incidentally too, individual tracks may have differently adjusted spectrogram settings unlike the defaults in Preferences.  But I think it's not wholly satisfactory how all of that works.  There is a ""use Preferences"" checkbox to reset all to defaults.  But maybe you would want to do the opposite?  Assign the settings of THIS track as new defaults?  There is also no way to have a track override just some of the settings but keeping all others the same as the preferences.

Explore this and see what I mean.  Maybe it's matter for another enhancement request.
 I'm pleased to see you start figuring out more substantial C++ changes, Leo.

About the mouse wheel actions:  there is Shift+wheel, and Ctrl+wheel (or pinch and spread on a touch pad), but did you observe that the latter can also be Shift-modified too?  That causes, for log dB view only, another change:  variation of the bottom of the dB scale.

Consider whether you like that, or want to rebind it, or mention it in tool tips.

I'm also reminded that I find the fineness of mouse wheel control for these things a bit unsatisfactory.
 > This dispels my doubt about discoverability. Rely on the tooltips.

Actually it's not tooltips, it's status bar messages, which are easier to overlook, but still it is something.
 Or did you decide otherwise because those shortcuts are not mentioned in the status bar message, which is already long?
 Testing on W10 with @LWinterberg 's latest branch:  audacity-win-3.5.0-alpha-20231130+9817f6c-x64

I am somewhat surprised to find that while the Vertical click&drag to define a vertical zoom region - we still have it retained in the Note (MIDI) tracks.

I'm still finding the ability to zoom to a VS click&drag vertical region a loss

Yes you can achieve the same or similar efffect with Ctrl and Shift modified mouse-wheel actions - but I find those a _**lot**_ more fiddly - with more clicking _(if Gale Andrews were still alive he'd be complaining about his RSI)_. This is very poor. You have removed functionality that even your own survey indicates is regularly used. I have not removed functionality. I have removed a certain kind of interaction.  Consider this simple project:
![image](https://github.com/audacity/audacity/assets/50205984/94e25eb2-6db2-4736-8a2f-8a1c3612202e)

1) I find it odd and inconsistent that when I hover my cursor over the bottom two, the spectrogram and the note track I get a cursor that allows me to still ckick&drag a spread for the vertical zoom.

2) note that the spready cursor icon is different for both use cases - a further inconsistency
a) the big plus sign for spectrogram
b) the old  magnifying glass for the Note track

I do like the new V-Zoomy menu structure - but I am failing to see why it is really necessary to remove the spready vertocal zoom selection for only the waveform view.

**Audacity has had that click&drag vertical zoom selection for over 20 years in the 1.2.x series.**
 I'll rephrase:
This is very poor. You have removed _a certain kind of interaction_ that even your own survey indicates is regularly used. I've updated the manual for these changesI'm done with this round of review.

Something must be done about the MIDI track vertical ruler too, for completeness, and to remove all uses of the ""/GUI/VerticalZooming"" preference.

I would also rather see this pull request also change the Preferences page to eliminate the checkbox, and also remove the item in ViewMenus (including the callback function).

Keep this separate from #5675.  Let that one address other preferences that are less complicated.
 Did you forget to remove context menu shortcuts for MIDI tracks?
","I'm done with this round of review.

Something must be done about the MIDI track vertical ruler too, for completeness, and to remove all uses of the ""/GUI/VerticalZooming"" preference.

I would also rather see this pull request also change the Preferences page to eliminate the checkbox, and also remove the item in ViewMenus (including the callback function).

Keep this separate from #5675.  Let that one address other preferences that are less complicated.
 Did you forget to remove context menu shortcuts for MIDI tracks?
","Resolves: #5715

This is a companion to #5675.

It

* Always disables ""advanced vertical zoom"" for waveforms
* Always enables ""advanced vertical zoom"" for spectrograms and MIDI tracks
* uses a somewhat more appropriate cursor to drag selections in spectrograms
* uses simpler mouse gestures (click/shift-click to zoom in/out replaced with ctrl+scroll, shift+rightclick to reset replaced with simple click)
* Always zooms on the center in waveforms

It's still possible to create offset waveforms (half-wave zoom preset or shift+scroll), but zooming resets it. It'd be a nice-to-have if half-wave was a toggle, in which case zooming would keep 0 at the bottom. I don't think either of those things are blockers though.","Looking at the second of five commits so far.  This change is correct for the purpose stated in the commit comment.  But I would ask, how will the mouse actions be discoverable?  The read-only Mouse preferences pages too used to serve as a reference but that is gone.  I will review the rest.
 I now say, this commit is correct, but not complete.  Find all `""/GUI/VerticalZooming""` and see that the MIDI track, too, has a vertical ruler influenced by the same preference, and it also mentioned mouse actions in the context menu items.
 You might qualify this little variable as `const` or to be even more modern, `constexpr`.  That's a minor bit of style.  I skip it sometimes when the scope of a variable is small, but it can be helpful if ever you have something at the top of a large function or block. This dispels my doubt about discoverability.  Rely on the tooltips.
 Indentation.  The convention is three spaces in most of our source files.  You might change preferences in your source code editor.
 This change is not quite equivalent to the previous version.

""Right-click for menu."" was a message that appeared in the status bar, when you right click, and have not yet released the button.  This is lost.

But I suppose you observed this, and the answer is that it doesn't make sense as a discoverability aid if you really have to do that right click before you see the message suggesting right click!

And you are just assuming right click for context menu is a widespread convention we don't need to mention.

Yes?

 I think you didn't complete your intended work:  this context menu items still mention the mouse button shortcuts, but you removed those for waveform and spectrum rulers.
 > And you are just assuming right click for context menu is a widespread convention we don't need to mention.

@Paul-Licameli  that is a _**very**_ widespread convention an many apps and OSs indeed > > And you are just assuming right click for context menu is a widespread convention we don't need to mention.
> 
> @Paul-Licameli that is a _**very**_ widespread convention an many apps and OSs

It's a widespread convention _when it is obvious_ that the pointer is over a clickable entity (frequently indicated by a change in ""hover over"" colour). The problem that I see in relation to the track's vertical ruler is that a high proportion of users are unaware that it is clickable."
5748,2023-12-06T12:37:29Z,2023-12-11T17:03:16Z,Paul-Licameli,2,4,6,278,2,2,2,"['Clips', 'refactoring']",19878.0,1,447950.0,0,0,0,0,23690013.235856,,0,6,0,False,['Paul-Licameli'],"Rebased unchanged just to clean up the commit history
 Rebased without change onto the updated base branch
Clean-up looks good and sequence of commit made the review almost entertaining :D",Clean-up looks good and sequence of commit made the review almost entertaining :D,"Resolves: #5742 

Depends on
- #5763

Interval-major rewrites of functions using WaveTrack::HandleClear, other than ClearAndPaste

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`WaveClip::Interval` ??
Also, please use the no-brainer `ForEachClip` approach, when the day gets old it does make a difference. ... oh, there we go. You might want to squash these with the previous commit, which probably won't compile. Sorry, I made a dirty commit sequence that doesn't build at each step.
 Yes
"
5762,2023-12-08T12:54:47Z,2023-12-11T12:51:36Z,LWinterberg,1,5,1,465,27,2,1,[],3000.0,1,259013.0,1,0,0,0,23705112.746415,,0,1,0,False,['Paul-Licameli'],"Code review must look closely in each place, whether there was `#ifdef` or `#ifndef` and that the correct branch was deleted
",,Resolves: https://github.com/audacity/audacity/issues/5761,"The wrong branch was deleted here
 Looks like character encoding was messed up by your editor here And here
 This is intentional as we no longer do an offline manual as of https://github.com/audacity/audacity/commit/990d637816c59ed2ea4c6c443136c9aad90b4a68, so de-facto the dark audacity branch is the correct one here.  Then please say so in the amended commit comment."
5768,2023-12-10T17:50:56Z,2023-12-11T12:37:26Z,Paul-Licameli,0,0,2,77,7,1,1,"['bug', 'Clips']",,1,67593.0,0,0,0,0,23705965.785677,,1,2,0,False,[],,,"Resolves: #5767

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5763,2023-12-08T12:58:12Z,2023-12-08T15:41:47Z,Paul-Licameli,0,0,5,27,1,1,1,"['Clips', 'refactoring']",,1,15107.0,0,0,0,0,23948816.19718,,0,5,0,False,[],,,"Resolves: #5585

Fix conflict resolution of 23d58d5 with the draft that was merged in at af55662, introducing bugs

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5753,2023-12-07T05:30:57Z,2023-12-07T11:53:25Z,LWinterberg,0,0,1,16,2,1,1,[],,1,22951.0,0,0,0,0,24054209.096025,,0,1,0,False,[],,,Resolves: https://github.com/audacity/audacity/issues/5749,
5755,2023-12-07T07:12:28Z,2023-12-07T11:52:53Z,LWinterberg,0,0,1,8,1,1,1,[],,1,16828.0,0,0,0,0,24054241.376548,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5754

PR-ified patch provided in https://github.com/audacity/audacity/issues/5636#issuecomment-1842103965",
5703,2023-11-28T08:53:47Z,2023-12-05T16:46:01Z,DavidBailes,1,1,1,13,1,1,1,[],622294.0,0,633135.0,0,0,0,0,24209457.391854,,0,1,1,False,['Paul-Licameli'],"Thanks for this fix.  I carefully studied the other referenced commits to understand it fully.
",,"Resolves: https://github.com/audacity/audacity/issues/5670
Resolves: https://github.com/audacity/audacity/issues/3903

Problem:
When the time selection includes blank space before the audio, the results of the compressor effect are incorrect.

Relevant previous commits:
618106f1
0f830b44
The latter commit is a fix for the former. In the fix, a period of silence, mT0, is inserted into the WorkTracks, so that in ProcessOne() samples are appended starting at the same time as the start of processed audio in the original track. However, in ProcessPass(), the start of processing is given by std::max(trackStart, mT0), not mT0.

Fix:
Insert a period of silence based on std::max(trackStart, mT0). In addition, because after the addition of the silence the WorkTracks start from 0, the value of trackStart isn't calculated using WorkTracks, so avoiding unnecessary processing. trackEnd is handled similarly, just for consistency, although this isn't necessary.

Note:
There is an existing issue with the compressor effect, that if the selected audio in a track includes audio before time zero, then the results are incorrect. This fix does not address that problem.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","typo --  `original`
"
5602,2023-11-13T12:56:20Z,2023-12-05T14:18:46Z,Paul-Licameli,2,0,1,23,1,1,2,"['Clips', 'refactoring']",1559596.0,1,1905750.0,0,0,0,0,24218290.835006,,0,1,0,False,['Paul-Licameli'],"Rebased unchanged to updated base branch
 Rebased without change onto the updated base branch
This PR depends on the rewrite-wavetrack-pasting PR, to which it only adds one commit. LGTM.","This PR depends on the rewrite-wavetrack-pasting PR, to which it only adds one commit. LGTM.","Resolves: #5601

Depends on:
- #5586

*(short description of the changes and the motivation to make the changes)*

QA:  Try all with mono and stereo tracks being adjusted
- [x] Test the case that one track lengthens, and the sync locked track just shifts clips righward, widening a void
- [x] Test case that adjusting track inserts silence into a clip
- [x] The case of shortening sync-lock does not need test for this PR, but may for a future PR

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5736,2023-12-04T05:00:26Z,2023-12-04T09:08:15Z,Gootector,1,0,1,8,1,0,0,[],60458.0,0,60462.0,0,0,0,0,24277734.127167,,0,1,0,False,['Gootector'],Thanks!,,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5734,2023-12-01T15:07:41Z,2023-12-04T12:04:31Z,Paul-Licameli,2,0,1,39,3,1,1,"['bug', 'regression']",1729.0,1,248215.0,0,0,0,0,24312747.240186,,2,1,0,False,['Paul-Licameli'],"Wait, it's failing sanity
 I fixed it with a swap of two lines
",,"... 2676811 mistakenly removed it

Resolves: #5700

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5723,2023-11-29T15:06:59Z,2023-12-04T11:54:06Z,Paul-Licameli,1,2,11,1088,27,2,2,['refactoring'],169398.0,1,420431.0,0,0,0,0,24313375.036135,,0,11,0,False,['Paul-Licameli'],"Rebased unchanged onto updated base branch
I was happy to get onto that last commit where `AllClipsIterator` gets to hold wide intervals, but unfortunately that was by far the hardest 😅 
I guess that's fine but with relatively little confidence. I'd love to see some unit tests for that. Is this practicable ?","I was happy to get onto that last commit where `AllClipsIterator` gets to hold wide intervals, but unfortunately that was by far the hardest 😅 
I guess that's fine but with relatively little confidence. I'd love to see some unit tests for that. Is this practicable ?","Resolves: #5708

Certain other iterations rewritten as channel-major and moved to WaveTrackUtilities.cpp

QA:  see the issue

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Only now do I get the difference between `WaveTrack::GetClips` and `WaveTrack::GetAllClips` :D
Cutlines are a very good example of old feature with high maintenance expense. How do they stand on @LWinterberg 's kill list ?.. I don't know what the replacement idea is, if any.  Meanwhile, as ever, I default to conservative transformations.

You may notice that the all-clips iterations that include the cutlines all involve estimations of memory or disk space consumption which would be incomplete without them.
"
5586,2023-11-11T13:45:39Z,2023-12-01T14:04:33Z,Paul-Licameli,7,17,3,339,2,3,3,"['Clips', 'refactoring']",248170.0,1,1729137.0,0,0,0,0,24564750.233529,,1,3,0,False,"['chinakov', 'Paul-Licameli']","Rebased, after merging in the lastest hot-fix changes to WaveTrack.cpp, to be sure of no conflicts or need for additional changes -- there were none.
 @saintmatthieu please review again.

I will squash it into fewer commits.

Importantly I had to figure out a silly mistake that put duplicate shared pointers to the same clip into the same track, fixed by one deleted line.

This PR is important to unblock other PRs dependent on it.  I hope it moves soon back to testing.
 I have pushed again, squashing some fixups, and simplifying `GetClipAtTime`.

Given current master, the simplification of unreachable code is a conservative transfomation.

A doubt I had, though, was that @saintmatthieu 's commit  6de5c9fe had not been conservative at the time, and introduced some subtle change of behavior.  I remember having doubts at the time I reviewed that but I didn't follow them through.

If @DavidBailes can find a bug as a consequence of 6de5c9fe, open another issue to fix it.  But meanwhile let's unblock the progress of this important refactoring.
 Found one issue so far - when a User tries to paste a smart clip, either on:

- same track, 
- new track
- cross-project with the same or different tempo

the smart clip no longer contains the hidden data. 

This issue persists on both mono and stereo tracks.  Another issue found - if the User pastes a clip with the 'Editing a clip can move other clips' and 'Always paste audio as new clips' preferences enabled, and then pastes an audio clip at the 0:00 start time with an existing clip, Audacity crashes. 

![image](https://github.com/audacity/audacity/assets/139755141/a00fcc77-6ace-4c6d-874c-50a465f1e0ee)
 Rebased to recent master, and I fixed some things -- please see the last two commits.

Improved the comment for CreateWideClip and corrected the amount by which it required a shift.

Also changed IsEmpty so it doesn't iterate `mClips`
 Tested, all issues fixed. Thanks! Review iteration complete. Excellent, thank you! No bug detected but zero to two simplifications.","Review iteration complete. Excellent, thank you! No bug detected but zero to two simplifications.","Resolves: #5585

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

QA:  all the clip edge cases, mono and stereo...
- [x] Pasted-into track becomes selected
- [x] Cross-project paste, with and without project tempo differences
- [x] Paste with and without stretch ratio differences
- [x] With and without the new merging preference
- [x] Pasting into a clip, within one sample interval of time 0
- [x] With and without the ""Edit clips can move"" preference; test the prohibition
- [x] Moving of multiple other clips rightward to make room for the paste
- [x] New clips get correct names, and also when splitting to mono after the paste

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Such progress is also used in `WaveTrack::Resample` in a way that doesn't seem correct to me (not taking the number of clips into account and the progression from one clip to the next). I was tempted to add a QA item for that but I expect that our testers won't be happy and yet this wouldn't be a regression. As I understand, this is a provisional remain until `ClearAndPasteOne` is also re-written in terms of intervals, right? I suppose you have estimated or even tried including the rewrite of that into this PR? Too big? If so, I'd like that rewrite to figure among the very next things I'll be reviewing, to stay in this ugly state as shortly as possible. Correct.

I will remove more uses of `PasteOne` in two more PRs, keeping each PR not too large, not too slow to review, or to test.  Know that they are already in preparation.

Don't insist that I do all this sequentially.  I may want to have other PRs changing other parts of this big file also in flight concurrently through the project board.
 See #5602
 I wonder why `GetIntervalAtTime` isn't sufficient.
In fact, looking at the `GetWideClipAtTime` implementation, I see logic that might have been relevant before the 2-of-6 PR, but which now seems futile to me. More about this in a follow-up comment closer to that implementation. Can this ever be executed?
Say `clipB->WithinPlayRegion(t)` returns true, it then becomes `p`. Then further down you test that `t == p->GetPlayEndTime()`, which can never be true, since `p->WithinPlayRegion(t) == true` implies that `t < p->GetPlayEndTime()` (or there is a bug). I want to make only a conservative refactoring that changes the iteration to interval major.

I did not spend my time reasoning through whether the old extra logic in `GetClipAtTime` is still important.  I assumed it was.

If you think this should simplify, and can prove it, and can also understand why @DavidBailes put that extra logic there, and can convince him too that it is no longer needed -- then I suggest you make a PR for that purpose.

But I believe that should not block approval of this more urgent cleanup.
 > Can this ever be executed? Say `clipB->WithinPlayRegion(t)` returns true, it then becomes `p`. Then further down you test that `t == p->GetPlayEndTime()`, which can never be true, since `p->WithinPlayRegion(t) == true` implies that `t < p->GetPlayEndTime()` (or there is a bug).

Did you notice that the iteration through the clips was in backward order?
 https://github.com/audacity/audacity/pull/5586#discussion_r1404086453 intended to prove that already, and to my sense did. From what I read you haven't examined if that extra old logic was useful or not, and yet you introduced a new method replicating this. If `GetIntervalAtTime` didn't exist before I wouldn't mind so much, but it does, and introducing an alternative and even replacing existing usages suggests there's something wrong with `GetIntervalAtTime`. > Did you notice that the iteration through the clips was in backward order?

I don't see how this impacts the reasoning in https://github.com/audacity/audacity/pull/5586#discussion_r1404086453. > Can this ever be executed? Say `clipB->WithinPlayRegion(t)` returns true, it then becomes `p`. Then further down you test that `t == p->GetPlayEndTime()`, which can never be true, since `p->WithinPlayRegion(t) == true` implies that `t < p->GetPlayEndTime()` (or there is a bug).

@saintmatthieu 
The last time I changed this this function the initial lines were:
```
const auto clips = SortedClipArray();
   auto p = std::find_if(clips.rbegin(), clips.rend(), [&] (WaveClip* const& clip) {
      return time >= clip->GetStartTime() && time <= clip->GetEndTime(); });
```
Since then, it has been changed so that if a time is equal to the time of the end of the clip it is not considered to be in the clip.
So as you say, the lines that correct for rounding errors are no longer necessary.
(And the times of the start and end of clips are now rounded  to multiples of samples.) > > Can this ever be executed? Say `clipB->WithinPlayRegion(t)` returns true, it then becomes `p`. Then further down you test that `t == p->GetPlayEndTime()`, which can never be true, since `p->WithinPlayRegion(t) == true` implies that `t < p->GetPlayEndTime()` (or there is a bug).
> 
> @saintmatthieu The last time I changed this this function the initial lines were:
> 
> ```
> const auto clips = SortedClipArray();
>    auto p = std::find_if(clips.rbegin(), clips.rend(), [&] (WaveClip* const& clip) {
>       return time >= clip->GetStartTime() && time <= clip->GetEndTime(); });
> ```
> 
> Since then, it has been changed so that if a time is equal to the time of the end of the clip it is not considered to be in the clip. So as you say, the lines that correct for rounding errors are no longer necessary. (And the times of the start and end of clips are now rounded to multiples of samples.)

You made changes several years ago, and I don't remember the motivating use case to test.  Do you?  Was it clip movement with the keys?

 Yes, it was clip movement using keystrokes. It was to ensure if a user moved to the end of a clip which was immediately adjacent to a following clip, that the keystrokes to move clips would move the second clip and not the first.
However, WaveTrack::GetClipAtTime() is no longer called when moving clips using the keyboard. Doesn't the copy constructor copy the sequence start time already? Couldn't you, rather than calling `CreateWideClip` with `0.0` as offset argument and then calling `ShiftBy(t0)`, just pass `t0` as offset argument? I wanted to extend the argument list existing function but preserve its old behavior which is to make a clip with a specified sequence start time. Irrelevant -- this bit is out of date after the force push.  I had to correct a mistake
"
5721,2023-11-29T12:46:21Z,2023-12-01T13:23:24Z,LWinterberg,0,2,3,24,3,1,2,[],,1,175037.0,0,0,0,0,24567209.811833,,0,3,0,False,[],"I would fix one indentation and change one word of text, but all that is minor.
","I would fix one indentation and change one word of text, but all that is minor.
","Resolves: #5720 

Also adds @chinakov to the team credits and @teetow (who is currently doing C++ learning with me, and has been helping me out in design questions for the past few years) to the contributors list","Please fix the indentation, as it was before There is a subtlety in English about ""that"" versus ""which"".

The first identifies or distinguishes something or someone, while the latter adds information.  At least I think you will find that recommendation in style guides, though not all natives do it consistently.

I would write ""that"" here.

"
5719,2023-11-28T19:21:03Z,2023-12-01T13:11:54Z,LWinterberg,7,4,3,3336,28,1,1,[],56853.0,1,237061.0,0,0,0,0,24567905.25411,,0,3,0,False,"['LWinterberg', 'petersampsonaudacity', 'Paul-Licameli']","Testing on W10 with @LWinterberg 's branch build for this:  

This looks to be fixed in Leo's branch.

There is no **Screenshot** entry in the Tools menu
![image](https://github.com/audacity/audacity/assets/50205984/cad7e4d2-9f4e-4a2b-874c-6e8cc576b7ce)

I have added P1s to the Manual for this for when this gets pulled into master for 3.5.0
 OK, I'm done reviewing, and see nothing wrong with the code for the stated purpose.

But I would ask first why it's important to remove, rather than letting this harmless thing remain in Audacity 3.

A lot of work went into this development, and it was used to generate pictures in the online Audacity manual.

The professional team isn't maintaining that manual any more, but @petersampsonaudacity is still volunteering to keep it up to date, and I think he means to do so until we have Audacity 4.

I don't know if you still rely on the screenshot tools and would miss them, Peter.
 > and it was used to generate pictures in the online Audacity manual.

_**NOT**_ by me it wasn't - and after Gale Andrews died I was the major contributor and editor of the manual _(I don't know about Steve, Bill or Ed)_

I found that it was never that reliable a tool - I used my PC screenshot button and edited in Paint.

>But I would ask first why it's important to remove, rather than letting this harmless thing remain in Audacity 3.

Because basically it's just useless clutter that burdens the Tools menu

**Big** +1 from me for its removal > > and it was used to generate pictures in the online Audacity manual.
> 
> _**NOT**_ by me it wasn't - and after Gale Andrews died I was the major contributor and editor of the manual _(I don't know about Steve, Bill or Ed)_
> 
> I found that it was never that reliable a tool - I used my PC screenshot button and edited in Paint.
> 
> > But I would ask first why it's important to remove, rather than letting this harmless thing remain in Audacity 3.
> 
> Because basically it's just useless clutter that burdens the Tools menu
> 
> **Big** +1 from me for its removal

In which case, I'll formally approve the PR.
 It's also worth removing becase its UI is so rubbishy - it lets Audacity down.

See:
![image](https://github.com/audacity/audacity/assets/50205984/7e98a652-4f3f-4f7e-9bdd-819ba5fcadfa)

Many years ago there was an ENH to improve/upgrade it - but no-one ever picked that up, so it just languished ...

_**It certainly wins the prize for the most buttons in any Audacity dialog - maybe any dialog ever!**_
 > But I would ask first why it's important to remove, rather than letting this harmless thing remain in Audacity 3.

It has a number of bugs associated with it (see https://github.com/audacity/audacity/issues/2335), is not maintained, won't make the jump to 4, and crucially, is not used. Peter doesn't use it, QA doesn't want it, and users have easier to use options these days (Win+Shift+S on Windows, Cmd+Shift+4 on Mac). If there was some internal use for it, I'd leave the short-format dialog and the functionality intact, and just remove the button-rich dialog, but there doesn't appear to be one. > > But I would ask first why it's important to remove, rather than letting this harmless thing remain in Audacity 3.
> 
> It has a number of bugs associated with it (see #2335), is not maintained, won't make the jump to 4, and crucially, is not used. Peter doesn't use it, QA doesn't want it, and users have easier to use options these days (Win+Shift+S on Windows, Cmd+Shift+4 on Mac). If there was some internal use for it, I'd leave the short-format dialog and the functionality intact, and just remove the button-rich dialog, but there doesn't appear to be one.

I already approved!

I’m convinced!

Thank you for yet more reasons!

While I default to conservative behaviorally neutral refactorings, and don’t make redesign my job, this thing has also been a mildly annoying maintenance burden sometimes.  Bye bye.Reminder to fix just one comment in Python.
","Reminder to fix just one comment in Python.
","Resolves: #5718

Also removes some scripts relying on the screenshot tool, and VetoDialogHook which - as far as I can tell - only was useful for screenshots.","Wow, I never once in my life looked in this subdirectory of the source tree before!

Did you verify that things still run?

What remains in here can serve as examples for how to use the script pipe.
 I'm trying to run the old Perl script.  What I didn't know is that first you must start Audacity and have an audio track, not an empty project.  I get frequent error dialogs, and now the new export dialog messes up the macros by pausing for user input.

So anyway making this all run again seems out of scope for now.  But tell @dozzzzer and @chinakov to study these examples if they haven't.  Maybe writing Python programs driving the script pipe for regression tests would be easier than writing macros using Audacity's own user interface.
 I see `pipe_test.py` too, and there is still mention of screenshot in a comment in it.
 You are correct that `VetoDialogHook.h` existed only to enable screenshots.  This commit looks complete to me, for the purpose of removing it.
"
5558,2023-11-09T19:09:11Z,2023-12-01T11:06:09Z,Paul-Licameli,5,0,2,187,6,1,2,"['Clips', 'refactoring']",389434.0,1,1871822.0,0,0,0,0,24575457.247289,,0,2,0,False,"['Paul-Licameli', 'saintmatthieu']","I reckon you intend this to be merged in `wave-clip-refactoring` rather than `master` ? ... which would mean that only a42f52cbdff5caea65101b4ab49cdfb0bd8ac262 is to be reviewed, and which looks fine to me. I approve assuming that it's the case, please notify me if it wasn't. > I reckon you intend this to be merged in `wave-clip-refactoring` rather than `master` ?

Of course I did.  It's corrected. > ... which would mean that only [a42f52c](https://github.com/audacity/audacity/commit/a42f52cbdff5caea65101b4ab49cdfb0bd8ac262) is to be reviewed, and which looks fine to me. I approve assuming that it's the case, please notify me if it wasn't.

Yes, this PR is dependent on another and is meant to add only one commit.
 Rebased onto the updated dependency
",,"Resolves: #5554

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5716,2023-11-28T18:37:21Z,2023-11-29T17:19:14Z,LWinterberg,1,0,1,300,4,1,1,[],58077.0,1,81718.0,0,0,0,0,24725873.506838,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @LWinterberg 's branch build for this:  audacity-win-3.5.0-alpha-20231128+30b6e43-x64

This looks to be fixed in Leo's branch.

There is no **Mouse** entry in Preferences:
![image](https://github.com/audacity/audacity/assets/50205984/18e483e3-2c8b-413a-bc92-b59fab5baa90)

I have added P1s to the Manual for this for when this gets pulled into master for 3.5.0
",,Resolves: https://github.com/audacity/audacity/issues/5713,
5706,2023-11-28T10:28:11Z,2023-11-29T17:20:48Z,LWinterberg,22,0,1,1134,6,1,1,[],22275.0,1,111365.0,0,0,0,0,24725576.77691,,0,1,1,False,"['petersampsonaudacity', 'rbdannenberg', 'LWinterberg', 'Paul-Licameli', 'buanzo']","I have added P1s to the Manual for this Testing on W10 with @LWinterberg 's branch build:  audacity-win-3.5.0-alpha-20231128+5b3f4c4-x64

Karaoke is no longer in the View menu in this branch build.
![image](https://github.com/audacity/audacity/assets/50205984/29fee2a6-ff52-412c-8e62-edb5dfd40935)
 After so many years, the happy bouncing ball finally got bounced.  :cry:
 > ... the happy bouncing ball finally got bounced.

Got splatted !

 😠 

That's IT!!  I'm DONE!!!  I'm defecting to TENACITY!!!! NOW!!!1!!!1

/kidding
 roflmao > roflmao

Hello, buanzo, you magnificent SOB, you!!
 Here's where it all began ... [Automatic Lyric Alignment](https://www.cs.cmu.edu/~music/video/lyric-align.mp4) > Here's where it all began ... [Automatic Lyric Alignment](https://www.cs.cmu.edu/~music/video/lyric-align.mp4)

Thank you! > > roflmao
> 
> Hello, buanzo, you magnificent SOB, you!!

Did I ever mention…

The first assembly language I ever learned,
Long ago in high school, was PDP-11, and one of the mnemonics, for “subtract one and branch,” was… SOB ?
 I was familiar with that one, but I hope you were using the non geek
meaning :) Cheers!




On Tue, Nov 28, 2023, 18:52 Paul Licameli ***@***.***> wrote:

> roflmao
>
> Hello, buanzo, you magnificent SOB, you!!
>
> Did I ever mention…
>
> The first assembly language I ever learned,
> Long ago in high school, was PDP-11, and one of the mnemonics, for
> “subtract one and branch,” was… SOB ?
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/audacity/audacity/pull/5706#issuecomment-1830811532>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEHBT4KEDEUWEW6O23VPQ3YGZMI3AVCNFSM6AAAAAA75QGPJWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMZQHAYTCNJTGI>
> .
> You are receiving this because you commented.Message ID:
> ***@***.***>
>
 > Here's where it all began ... [Automatic Lyric Alignment](https://www.cs.cmu.edu/~music/video/lyric-align.mp4)

2007?  So long ago.
 I think 2007 was when I recorded the video before I lost the ability to run that archived version of Audacity. The work was completed by Dominic when he was a student in Dec. 2000. > I think 2007 was when I recorded the video before I lost the ability to run that archived version of Audacity. The work was completed by Dominic when he was a student in Dec. 2000.

“Let it snow”

I was told they got a lot of that white stuff around the Baltic lately.
 > Here's where it all began ... [Automatic Lyric Alignment](https://www.cs.cmu.edu/~music/video/lyric-align.mp4)

@rbdannenberg  I'd have liked to see more of that label track - we only got a brief glimpse at the end > “Let it snow”
> 
> I was told they got a lot of that white stuff around the Baltic lately.

But not much in Killington, Vermont,  for the skiing championships - the pistes look to be all artificial ""snow"" with the countryside all around barren of snow. > The first assembly language I ever learned,
> Long ago in high school, was PDP-11, and one of the mnemonics, for “subtract one and branch,” was… SOB ?

DEC (whom I worked for for a number of years) had a habit of ""cunning"" acronyms.

My favourite example was FUBAR for Failed UniBus Address Register - a military acronym from longer ago with a ruder meaning ...

Plus the DEC User Group - DECUS, I'm pretty sure that someone at DEC knew the Latin for ""ornament""

 The SOB instruction was used to make countdown loops.  Subtract one from a register, then branch conditionally, often backwards, if the new value was nonzero.  Or non-negative? I forget.
 Come to think of it. I think I also recall the FUBAR in the manuals now.
 My other favorite in DEC's manual's was 

""**This page is left intentionally blank**""

creased me up every time
 \*party music stops* sad

btw what was the rationale for removing karaoke?


On Wed, Nov 29, 2023, 14:21 LWinterberg ***@***.***> wrote:

> *party music stops*
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/audacity/audacity/pull/5706#issuecomment-1832376232>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEHBTZ5BDZX5PL5U5BOECDYG5VIFAVCNFSM6AAAAAA75QGPJWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMZSGM3TMMRTGI>
> .
> You are receiving this because you commented.Message ID:
> ***@***.***>
>
",,,
5707,2023-11-28T11:02:34Z,2023-11-29T13:21:52Z,LWinterberg,2,0,1,169,3,2,2,[],19954.0,1,94762.0,0,0,0,0,24740118.804112,,0,1,1,False,['petersampsonaudacity'],"I have added a P1 to the Manual for this Testing on W10 with @LWinterberg 's branch build:  audacity-win-3.5.0-alpha-20231128+4b18679-x64


**EQ XML to TXT converter** is no longer in the Tools menu in this branch build:
![image](https://github.com/audacity/audacity/assets/50205984/7da495fc-339a-4bbb-85e8-b964c7d90d99)
",,"same as https://github.com/audacity/audacity/pull/4832 - the reason this converter exists is a switch from the EQ preset format between 2.3 and 2.4. That's a few years ago now. We'll continue hosting the converter on the plugins page, but it no longer is necessary to bundle it with the executable.",
5717,2023-11-28T19:12:51Z,2023-11-29T12:54:58Z,LWinterberg,1,0,1,5,1,1,1,[],56410.0,1,63732.0,0,0,0,0,24741732.663477,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @LWinterberg 's branch build for this:  audacity-win-3.5.0-alpha-20231128+fedc70c-x64

This looks to be fixed in Leo's branch.

The errant un-required separator is no longer at the top of the TCP context menu:
![image](https://github.com/audacity/audacity/assets/50205984/e28645f4-df46-4d14-8cfe-5b9b24d490de)

I have P1s to the Manual for this for when this gets pulled into master for 3.5.0
",,"Resolves: #4144
",
5709,2023-11-28T14:58:14Z,2023-11-28T22:02:21Z,Paul-Licameli,2,0,1,16,1,1,1,['bug'],71.0,1,25452.0,0,0,0,0,24795291.303073,,1,1,1,False,['Paul-Licameli'],"That was a quick review!
 Sorry, my hasty work had a syntax error.  One work fix.
",,"Resolves: #5697

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5692,2023-11-27T12:46:38Z,2023-11-28T14:11:09Z,Paul-Licameli,3,6,16,454,18,2,1,"['Clips', 'refactoring']",14501.0,1,91477.0,0,0,0,0,24823564.064571,,0,16,1,False,['Paul-Licameli'],"Rebased to the updated base branch, and added the suggested assertions and preconditions.
 Fixed-up the commits to fix the Windows link; no other change

 > One method comment that will need to be corrected, I think, and the rest looks fine. Thanks for doing this ingrateful work.

""Thankless"" is the word to describe this tedious work.

But it is not that, if you are not ""ungrateful"" for it.

Gratitude is what our recent American holiday is about.  To God first, but to our friends and family too.

Je vous remercie.
One method comment that will need to be corrected, I think, and the rest looks fine. Thanks for doing this ingrateful work.","One method comment that will need to be corrected, I think, and the rest looks fine. Thanks for doing this ingrateful work.","Resolves: #5691

QA: Try with mono and stereo tracks:
- [x] Dragging clips
- [x] Changing sample format on a long enough track -- observe progress indicator filling up
- [x] Unchanged size estimation in the dialog that performs cross-document copy-paste with hidden samples
- [x] Filling of progress dialog for cross-document copy-paste with hidden samples
- [x] Silence command (Ctrl+L -- not the generator)
- [x] Recording; nothing lost at the end
- [x] Save, reopen project with wave data; nothing lost
- [x] Correct non-application of dither, when you import 16 or 24 bit audio to default float, and export again.  (To test, import both files, invert one, mix, and then use Contrast to verify all is really silence)
- [x] Delete an unexpanded cutline (right click)
- [x] Tracks > Resample

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Seems to me like `start` is actually treated as an absolute time in this method's body. Looks like this method is intended for calls on leaders ; if so, an assert would clarify that. ```
void WaveClip::SetSilence(sampleCount offset, sampleCount length)
{
   const auto start = TimeToSamples(mTrimLeft) + offset;
   Transaction transaction{ *this };
   for (auto &pSequence : mSequences)
      pSequence->SetSilence(start, length);
   transaction.Commit();
   MarkChanged();
}
```

I don't think so?

`start` is a count of samples given to the `Sequence` object, which doesn't know the timeline.  It doesn't even know the rate.  `WaveClip` knows its rate and offset.
  I didn't bother because it's not a public member function.
 But no harm in adding it either, which I will do.
 Right - I was confusing `WaveTrack::Silence` and `WaveTrack::Interval::SetSilence`: the former takes an absolute value - which makes sense - and makes it relative to clip play start."
5695,2023-11-27T13:27:21Z,2023-11-28T13:01:46Z,Paul-Licameli,0,0,1,7,1,1,1,['bug'],,1,84868.0,0,0,0,0,24827730.741319,,0,1,0,False,[],,,"Resolves: #5689

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5378,2023-10-13T15:55:19Z,2023-10-16T09:03:22Z,LWinterberg,0,0,1,42,1,1,1,[],,0,3954953.0,0,0,0,0,24836769.378352,,0,1,0,False,[],,,"resolves: https://github.com/audacity/audacity/issues/4780

As far as it is possible right now anyway. Screenshots and actual release date will need to be included once, the website is set up to take them and the release is here. This should work for the beta though.",
5622,2023-11-15T12:16:14Z,2023-11-15T12:39:54Z,LWinterberg,0,0,1,22,1,1,1,[],,0,1116870.0,0,0,0,0,24836797.91511,,0,1,0,False,[],,,,
5520,2023-11-07T13:55:57Z,2023-11-08T09:35:17Z,LWinterberg,0,0,1,15,1,1,1,[],,0,1802084.0,0,0,0,0,24836802.819821,,0,1,1,False,[],,,,
5662,2023-11-21T18:15:26Z,2023-11-27T16:23:45Z,Paul-Licameli,5,1,6,591,21,1,2,"['MIDI', 'refactoring', 'dependency breaking', 'libraries & modules']",481551.0,2,511704.0,0,0,0,0,24902014.455039,,1,6,0,True,"['crsib', 'chinakov', 'Paul-Licameli']","This PR doesn't build on Windows. I think some classes are missing `_API` macros.  Rebased to recent master, easy conflicts resolved, duplicate ""portsmf"" fixed
 Linking on Windows still fails. A one-word commit added to fix Windows link
 Tested, thank you! It's good to see MIDI import/export as a module. Please fix link issues first",It's good to see MIDI import/export as a module. Please fix link issues first,"Resolves: #5623

A module for import and export of MIDI, completing the set of import-export modules.

It will depend on Audacity, as some of the other existing modules do.

This will break some dependencies that are blocking the extraction of ProjectManager and ProjectFileManager into toolkit neutral libraries.

This unifies import code so that it's agnostic between audio and MIDI (see first QA item), but not Export of MIDI, which still requires a separate menu item.

QA:
- [x] Known behavior change! : File > Import > Audio will also import MIDI tracks.  (So should we keep the separate ""Import MIDI"" menu item?)
- [x] Drag-and-drop of MIDI files onto the project window
- [x] Import LOF applied to a MIDI file
- [x] MIDI files still appear in the File > Open Recent submenu
- [x] Imported MIDI tracks are correctly muted when the project had a Solo track (imported with either menu item)
- [x] Preferences > Import/Export Preference page behaves as before (all of the radio items) and sequences the pages as before
- [x] Disable mod-midi-import-export in Modules preferences; restart; observe Import/Export preferences again; reenable; restart; observe preferences once more; check sequence of pages and of the controls in the Import/Export page.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",portsmf is listed twice
5681,2023-11-24T18:24:11Z,2023-11-27T14:00:09Z,SteveDaulton,4,0,1,2,1,1,1,['bug'],235610.0,1,243457.0,0,0,0,0,24910538.329364,,0,1,1,False,"['chinakov', 'SteveDaulton']","Tested via creating 2 tracks with clicks and noise, both mono and stereo, then applied the effect. The application of the effect yielded similiar results, so it seems that it's fixed. Thank you! > Tested via creating 2 tracks with clicks and noise, both mono and stereo, then applied the effect.

Please note that this fix is for the Noise Gate's ""Analyze"" option (first control: Select Function => Analyze Noise Level).
The actual gating worked correctly before, and should still work correctly now.
The ""Analyze"" function was previously broken for mono tracks and should now be fixed. @SteveDaulton - thank you, I checked this as well, I guess I misunderstood. Tested. 
 > Tested

Super. Thanks [chinakov](https://github.com/chinakov).",,"Typo in peak-db() causing incorrect level measurement for mono tracks.

Resolves: Incorrect level measurement when analyzing mono track noise.

*Fixes typo*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5676,2023-11-24T11:15:22Z,2023-11-24T14:05:25Z,LWinterberg,3,0,1,237,2,1,1,[],3597.0,1,10207.0,0,0,0,0,25169517.829258,,0,1,1,False,"['Paul-Licameli', 'dozzzzer']","Tested > Tested

Easiest testing ever
 Indeed",,"take that, HP!",
5668,2023-11-22T19:28:54Z,2023-11-22T21:25:26Z,cjmayo,0,3,1,34,13,2,1,[],,0,90382.0,0,0,0,0,25232532.99215,,0,1,0,False,[],,,"libmad use was dropped by:
d4b2ac46c (""Drop outdated MAD imported"", 2023-05-11)

---

Includes update to About dialog.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior - I've used the About dialog and the man page - not the packaging scripts or Doxygen.
","This lib is still used I believe  Yes, but the patches and the vendored copy in that directory were removed in:
f66381b96 (""Removes previously vendored libraries from the source tree"", 2021-05-21)

Is any of the info there still relevant?
 Hmm, you are right, sorry for confusion "
5669,2023-11-22T19:36:13Z,2023-11-23T19:34:54Z,cjmayo,2,0,1,5,1,1,1,[],6667.0,0,89943.0,0,0,0,0,25232532.995195,,0,1,0,False,"['crsib', 'cjmayo']","> -Daudacity_use_lv2=system

Which system are you on? I think LV2 is properly found on Arch at least. I'm building it for myself, but using Gentoo, which currently makes lv2 optional:
https://gitweb.gentoo.org/repo/gentoo.git/tree/media-sound/audacity/audacity-9999.ebuild?id=46b0fc511e098676b8069a6012f1a81b57d5ff5c#n187

Building without lv2 has up to now saved me installing quite a few other packages:

dev-libs/serd
dev-libs/sord
dev-python/isodate
dev-python/rdflib
media-libs/lv2
media-libs/sratom
media-libs/lilv
media-libs/suil
",,"libraries/lib-lv2/LV2Utils.h:18:10: fatal error: lilv/lilv.h: No such file or directory
   18 | #include ""lilv/lilv.h"" // for lilv_free
      |          ^~~~~~~~~~~~~
compilation terminated.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior - I've successfully built without lv2 installed, and checked that without lv2 -Daudacity_use_lv2=system still fails on checking for lv2. I hope the CI here will show it builds with lv2 installed and selected.

",
5644,2023-11-17T16:34:10Z,2023-11-22T11:33:49Z,Paul-Licameli,0,4,6,590,12,2,1,[],,0,413982.0,0,0,0,0,25351420.009114,,0,6,0,False,[],"One mistake to address and one wish, but besides that LGTM.","One mistake to address and one wish, but besides that LGTM.","Resolves: #5633

*(short description of the changes and the motivation to make the changes)*

QA: Test the Reverse effect, with mono and stereo tracks; use visually dissimilar channels for stereo
- [x] Selection is inside a clip
- [x] Selection overlaps the end of a clip
- [x] Selection contains one or more clips
- [x] Selection overlaps the start of a clip

Note the last 3 are not mutually exclusive cases.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I see the first returned `IntervalHolder` is never used. Also, I expect that the first `IntervalHolder`, if not null, points at existing clips? I find this would give even more strength to a simpler API that returns just one holder, to a _newly created object_, if any. I think you meant to use an `&=` (not `|=`), or this method will always return true. No.  This API makes more sense to me, even if there is not yet any use for the first returned clip.  A split point defines two neighboring clips. OK
With just that change, I assume your tacit reapproval
"
5536,2023-11-08T20:17:04Z,2023-11-23T14:10:10Z,Paul-Licameli,7,2,29,3449,70,2,2,[],1000047.0,1,1273990.0,0,0,0,0,25255639.347919,,2,29,0,False,"['chinakov', 'Paul-Licameli']","Rebased and self-reviewed and ready for review.  Also a QA checklist.
 Rebased onto recent master with conflict resolution (mostly just `#include`s)
 Another rebase to resolve conflicts, only in the Cmake files
 There's only one issue - the unmodified scroll wheel does not let the User scroll through the tracks vertically.  Rebased unchanged to more recent master, but there are bugs to fix.
 > There's only one issue - the unmodified scroll wheel does not let the User scroll through the tracks vertically.

That problem bisects to the commit ""More member functions moved from ProjectWindow to Viewport""
 Rebased onto recent master (which gained just one commit) and inserted a FIXUP commit for the silly little mistakes

@crsib a quick second round of review should do

@chinakov please retest, paying closer attention to the vertical scrollbar and thumb size.
",,"Resolves: #5508

Depends on:
- #5644

A toolkit-neutral abstraction of a viewport, with horizontal and vertical scrollbars.

class Viewport relies on the abstract, façade class ViewportCallbacks which has it wxWidgets implementation in ProjectWindow.cpp.

There are now fewer dependencies on ProjectWindow.h.

QA: Unchanged zooming (including resizing of slider thumbs) and scrolling of the Track Panel after:
- [x] LOF (list-of-files) import with an ""offset"" command
- [x] Shift + mouse wheel
- [x] Ctrl (or Command) + mouse wheel
- [x] unmodified mouse wheel 
- [x] Dragging slider thumbs
- [x] Clicking arrowheads next to sliders
- [x] Clicking blank areas beside slider thumbs
- [x] Resizing main window
- [x] Page Up / Page Down keys
- [x] Deleting the last remaining track
- [x] Adding or removing tracks of any type (so that the vertical thumb appears, disappears, or resizes)
- [x] When a new tracks are pasted, or result from import, or generation, or recording, or analyzers (new label tracks), the first new one scrolls _completely_ into view vertically
- [x] Import of audio or MIDI also zooms to fit all, horizontally
- [x] Undo/Redo scrolls the first selected (or if none, the first) track completely into view vertically
- [x] Similar for up, down, Ctrl+Home, Ctrl+End
- [x] The previous again, with '""Move track focus"" cycles repeatedly through tracks' checked in Tracks Behaviors preferences
- [x] Everything in Zoom, Track Size, Skip To sub-menus of View (except the checkbox item; that only involves track vertical rulers)
- [x] Zoom-in command during playback keeps the play position in view
- [x] Zoom to fit vertically scrolls to top of track list, in case there are too many tracks to fix
- [x] Tracks preferences:  vary Preset1 and Preset2, to test the ""Zoom Toggle"" command
- [x] Playback or recording, with or without pinning the play head
- [x] Clicking and dragging selection start/end off the left/right edge, causing horizontal scrolling
- [x] For completeness, try things with ""Enable scrolling left of zero"" in Tracks Behaviors, though that may be on the ""kill list"" for near future releases
- [x] Time ruler synchronizes with horizontal scrolling
- [x] Just open these windows and close, observing proper positioning:  Macro manager, macro palette, Frequency analysis, Timer record, Contrast, cross-document pasting dialog (with copied, hidden clip data), Export audio, Import Raw, Import Labels, Resample tracks dialog (which chooses rate), Edit Labels dialog
- [x] Test Screenshot macro command (just once, any settings); name of resulting file
- [x] Close a project window
- [x] Project repaints after changing the checkbox or drop-down in Snapping toolbar
- [x] Project repaints after clicking a line in the History dialog
- [x] Resize main window; then, Tools > Reset Configuration restores default size

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I would love to see this members to be renamed to follow naming conventions  Easily done.  Of course this was just cut-and-paste.
"
5661,2023-11-21T15:32:53Z,2023-11-22T10:10:00Z,crsib,0,0,1,2,1,1,1,[],,0,67029.0,0,0,0,0,25356452.650044,,0,1,0,False,[],,,"Resolves: #5634 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5660,2023-11-20T23:34:18Z,2023-11-21T19:25:53Z,christian-heusel,1,0,1,6,1,1,1,[],71485.0,0,71495.0,0,0,0,0,25409502.558874,,0,1,0,False,['crsib'],"Straight to merge, only affects the Arch system package.",,"As these options were renamed in the meantime they caused the explictly
disabled parts of VST3SDK to be built again. We therefore adapt the build options of VST3SDK so they are disabled again.

https://github.com/steinbergmedia/vst3sdk/commit/0041ef2c879c3c54c03d33cdc11a97eaebfb5752

Resolves: -

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

This patch was already deployed to the archlinux testing repos: https://gitlab.archlinux.org/archlinux/packaging/packages/audacity/-/commit/66bf9779bd5253cfd1a91ce8dc15d3cf89ce1f83",
5532,2023-11-08T14:57:26Z,2023-11-21T15:36:17Z,crsib,1,3,2,184,5,2,2,[],691314.0,1,1128444.0,0,0,0,0,25420367.479178,,0,2,0,False,['crsib'],I have fixed couple of copy-paste-related bugs,,"Resolves: #5531

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","indentation redundant `move` I'm unsure that NRVO will work here, provided the argument is returned."
4364,2023-02-27T18:14:13Z,2023-11-21T15:31:11Z,Paul-Licameli,16,10,12,1268,39,3,2,"['MIDI', 'refactoring', 'libraries & modules']",1182430.0,1,23059022.0,0,0,0,0,25423583.013501,,1,12,1,False,"['crsib', 'vsverchinsky', 'Paul-Licameli']","https://github.com/audacity/audacity/pull/4364#discussion_r1133635250

Here is my reference for this.    https://docs.microsoft.com/en-us/cpp/cpp/defining-inline-cpp-functions-with-dllexport-and-dllimport?view=msvc-170
    
The linker knows how to remove the duplicate symbols and make only one definition.  In fact, a standard C++ linker that doesn't need the visibility annotations will do the same with template functions and importantly with any static variables defined inside those.  Much code using ClientData::Site already relies on that to be correct on Mac and Linux too.



 Does @crsib wish to revoke the approval of this pull request?

I know I had to do some unusual things with libraries to make the link work.  One, using and OBJECT library.  Two, there are still the unusual `#include` paths to get allegro.h and I thought @crsib might want to propose a cleaner way to do that.
 I don't see how it supports your reasoning. By unconditionally specifying `dllexport` you are forcing the symbol to be exported from every library that uses Cloneable. It is never imported and each library uses it's own instantiation. Linker cannot remove duplication when it happens in different link units. 

 > [#4364 (comment)](https://github.com/audacity/audacity/pull/4364#discussion_r1133635250)
> 
> Here is my reference for this. https://docs.microsoft.com/en-us/cpp/cpp/defining-inline-cpp-functions-with-dllexport-and-dllimport?view=msvc-170
> 
> The linker knows how to remove the duplicate symbols and make only one definition. In fact, a standard C++ linker that doesn't need the visibility annotations will do the same with template functions and importantly with any static variables defined inside those. Much code using ClientData::Site already relies on that to be correct on Mac and Linux too.

`The problem with a specialization of a class template is where to place the __declspec(dllexport); you are not allowed to mark the class template. Instead, explicitly instantiate the class template and mark this explicit instantiation with dllexport.`

https://learn.microsoft.com/en-us/cpp/cpp/general-rules-and-limitations?view=msvc-170 https://github.com/audacity/audacity/actions/runs/4404023816

Watch that build to see whether it works with portsmf as a STATIC library
 > > [#4364 (comment)](https://github.com/audacity/audacity/pull/4364#discussion_r1133635250)
> > Here is my reference for this. https://docs.microsoft.com/en-us/cpp/cpp/defining-inline-cpp-functions-with-dllexport-and-dllimport?view=msvc-170
> > The linker knows how to remove the duplicate symbols and make only one definition. In fact, a standard C++ linker that doesn't need the visibility annotations will do the same with template functions and importantly with any static variables defined inside those. Much code using ClientData::Site already relies on that to be correct on Mac and Linux too.
> 
> `The problem with a specialization of a class template is where to place the __declspec(dllexport); you are not allowed to mark the class template. Instead, explicitly instantiate the class template and mark this explicit instantiation with dllexport.`
> 
> https://learn.microsoft.com/en-us/cpp/cpp/general-rules-and-limitations?view=msvc-170

Also ""If you apply dllexport to a regular class that has a base class that is not marked as dllexport, the compiler will generate C4275. The compiler generates the same warning if the base class is a specialization of a class template. To work around this, mark the base-class with dllexport.""

That is why I needed the `declspec` on `Cloneable<T>` for any `T`, so that this definition in the last commit would work:

`struct NOTE_TRACK_API NoteTrackAttachment
   : ClientData::Cloneable<NoteTrackAttachment, ClientData::UniquePtr>
` You are marking the class as dllexport. Instead, MSDN says that you need to ""explicitly instantiate the class template and mark this explicit instantiation with dllexport"". Yes, I should read the page to the end.  (Maybe the page was updated since years ago when I first had this problem?). It specifically mentions the CRTP pattern (doesn't call it that) in the last two code examples.

I know the build succeeded as I did it, but I can also try that alternative.  Put  the declspec on the derived class.
 > https://github.com/audacity/audacity/actions/runs/4404023816
> 
> Watch that build to see whether it works with portsmf as a STATIC library

That build did succeed.  But will it be correct?  Now there are two staticlly linked copies of portsmf and I don't know if there are duplicated global variables to worry about?
 > Resolves: _(direct link to the issue)_
> 
> Toolkit neutral library for saving and loading MIDI data, and MIDI playback.
> 
> But not only the minimal work to enable the library to build:
> 
> Also moving mutable members of NoteTrack, used only in display, into ClientData attachments managed in the proper UI layer, like what was done for WaveTrack at [7caf7b0](https://github.com/audacity/audacity/commit/7caf7b02239edff5b26e57d3798304c86472be1e).
> 
> * [x]  I signed [CLA](https://www.audacityteam.org/cla/)
> * [x]  The title of the pull request describes an issue it addresses
> * [x]  If changes are extensive, then there is a sequence of easily reviewable commits
> * [x]  Each commit's message describes its purpose and effects
> * [x]  There are no behavior changes unnecessary for the stated purpose of the PR
> 
> Recommended:
> 
> * [x]  Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:  Test not only the display, but also persistency, and MIDI playback, for any regressions in behavior.
 Please review two new commits.

Please comment too about the strange header allegro.h and whether we need to fix whatever old hack that is.

`#include ""../../lib-src/header-substitutes/allegro.h""`
 Rebased onto recent master with some conflict resolution.

The problem with allegro.h still isn't solved satisfactorily.

I removed the commit that made portsmf an OBJECT library and the later reversion of that.
 This old PR has been rebased onto recent master, and I made other changes.  I think I don't need any of the tricks with `__declspec` after all.  But I will know for certain when this build completes.
 I finally figured out how to satisfy the MSVC linker without too much inelegancy.

Please review again!
 Please review.  The most recent build failures were only CI glitches.  Reruns succeeded.
 Another force-push and conflict resolutions with recent master.
The major issue with `header-substitutes/allegro.h` is the need to apply path relative to the library or module where you reference it. Maybe we could move it to `lib-sr/portsmf/include/allegro_wrapped.h` or `cmake-proxies/portsmf/allegro_wrapped.h`?",The major issue with `header-substitutes/allegro.h` is the need to apply path relative to the library or module where you reference it. Maybe we could move it to `lib-sr/portsmf/include/allegro_wrapped.h` or `cmake-proxies/portsmf/allegro_wrapped.h`?,"Resolves: #5445

Toolkit neutral library for saving and loading MIDI data, and MIDI playback.

But not only the minimal work to enable the library to build:

Also moving mutable members of NoteTrack, used only in display, into ClientData attachments
managed in the proper UI layer, like what was done for WaveTrack at 7caf7b02.

QA: Basically, all things MIDI...
- [x] Import and export of MIDI
- [x] Display of MIDI (resizing track vertically, scrolling left and right, changing vertical ruler bounds)
- [x] Playback of MIDI (including mute, solo, and the buttons that mute individual channels -- left and right clicks)
- [x] Persistency of MIDI tracks in projects

Playback should simply work on Windows.

If you haven't yet, you might find SimpleSynth64 for Mac, packaged by our own old team member Leland Lucius, which will enable testing on that platform too.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`const` setter is quite unusual combination. And I guess this is because reference to `NoteTrack` in `NoteTrackDisplayData` was made `const`, but considering that `NoteTrackDisplayData` is a short-living object for internal use and allocated on stack, 'constness' brings a confusion. This is due to `SetNoteRange` was made `const` `const` removed, alright I think that would be a more correct way:
```
#ifdef _WIN32
template struct REGISTRIES_API Cloneable<>;
#else
extern template struct Cloneable<>;
#endif
```
In `.cpp`:
```
#ifndef _WIN32
template struct ClientData::Cloneable<>;
#endif
```

There is a similar problem with `SettingsVisitor` specializations declaration which produces lots of warnings when compiled on windows.
 Yes!  See later commits that remove the mutable members.  I didn’t rest satisfied  with this. I did what made the Windows link work.  Nothing is needed for other compilers.

When the template argument is `bool` not a type as with `SettingsVisitor`, it's easy to instantiate all (both) possibilities explicitly so I did that to avoid inline code bloat for all compilers.

In this case, the set of all template arguments besides the defaults can't be predicted.

Solutions with REGISTRIES_API would not work with the following commit where something uses `Clonaeble` in the ""CRTP"" pattern, passing the new class name as the template argument to a `Cloneable<>` base.
 `STATIC` does not require `__declspec`, so I don't understand your motivation here. I don't think that the problem was identified correctly.  I am pretty sure that this is wrong. `__declspec(dllexport)` is not symmetrical, What happens here - every library that uses `Cloneable` now exports it. I recall the Windows build failing when I undid that (already a few years ago).  I could repeat the experiment and see if the build still fails without it.
 But is it ... true?"
5646,2023-11-18T13:13:39Z,2023-11-21T13:56:16Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,261760.0,0,0,0,0,25429281.160625,,1,1,0,False,[],,,"... Apparently a Microsoft compiler bug, mistakenly optimizing away the construction of an object marked static but also inside an anonymous namespace.

Resolves: #5615

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4379,2023-03-02T02:30:48Z,2023-11-20T20:37:46Z,Paul-Licameli,5,0,17,1366,81,1,1,"['refactoring', 'dependency breaking']",20954626.0,1,22788422.0,0,0,0,0,25491590.311105,,0,17,1,True,['Paul-Licameli'],"Journal sanity is failing!  So wait to review this.
 Ready for review now
 OK, NOW I've fixed all the CI problems with this one
 Rebased onto latest master and squashed the Linux build fixups
 Rebased onto recent master
",,"Resolves: #5444

Fix some old confusions in the flow of notifications, which resulted in undesirable dependencies of non-UI code on UI.

SetProjectCommand, ImportAUP, ProjectFileManager, ProjectManager,
and ProjectSelectionManager no longer depend on toolbars;
and the last also no longer depends on TrackPanel or ProjectWindow.  Instead, all those windows use Observer to
update for changes of selection formats or snapping choices.

Fewer places depend on ProjectSelectionManager.  That class now exists mostly to update persistent preferences
and the time selection in response to project format changes.

ProjectSelectionManager moves into lib-time-frequency-selection, which requires Snap to move into lib-snapping.

No new libraries but some changes in dependencies among libraries.

QA:
- [x] Changing numeric time format of controls works, all choices available, using the context menus in Selection toolbar
- [x] Ditto frequency formats in Spectral Selection toolbar
- [x] Ditto bandwidth formats (when you select Center Frequency and Width)
- [x] Persistency (in preferences) of your last chosen time, frequency, bandwidth formats, and also separately for the Audio Time toolbar, after exit (without save) and restart
- [x] Overriding, per-project persistency of those settings too (when you do save, then reopen; except for audio time -- an already existing omission)
- [x] Ditto for importing an Audacity 2.x.x project
- [x] In Edit > Labels > Label Editor, double clicks on times and frequencies gives a functioning numeric editor, also with all appropriate choices available
- [x] Correct repaint of time and spectral selection boxes when you enter changed numbers in the toolbars
- [x] Correct repaint after ""Select Frequencies"" macro command
- [x] Painting of yellow vertical snap lines when dragging selection, and smart clip edges, or time-stretching, and dragging clips
- [x] Upper bound frequency for spectral selection (painting it, entering numbers in controls, or with the macro command) is enforced at 1/2 highest sample rate of tracks in the project

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5535,2023-11-08T19:39:39Z,2023-11-17T11:25:24Z,Paul-Licameli,2,0,5,1621,68,1,1,"['refactoring', 'dependency breaking']",491464.0,1,747948.0,0,0,0,0,25783935.442727,,1,5,0,True,['Paul-Licameli'],"Rebased onto recent master with build fixes Hooray, CI passed.  There was just one glitched build that worked again with a rerun.
",,"Resolves: #5534

QA:
- [x] ""X"" button, track name button, expand/collapse and select buttons on left part of track properly changed to pressed appearance, and remain so until mouse-up (while mouse is in bounds of the button)
- [x] Audio and MIDI tracks:  drag bottom edge to resize, observe disappearance or reappearance of the buttons behaves as before

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5631,2023-11-16T10:35:44Z,2023-11-16T11:58:21Z,crsib,0,0,1,32,3,1,1,[],,0,4961.0,0,0,0,0,25868359.016598,,0,1,0,False,[],,,"On some Linux distros, modules go into a directory different from `/usr/lib/audacity`.

To handle this case, we try to find the path of the `lib-files` library on a disk and append this path to the search list.

Resolves: #5617

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4399,2023-03-09T17:39:05Z,2023-11-15T12:55:33Z,Paul-Licameli,7,0,4,779,36,1,1,"['refactoring', 'dependency breaking', 'libraries & modules']",20392383.0,1,21669392.0,0,0,0,0,25951328.504589,,1,4,1,True,"['chinakov', 'Paul-Licameli']","Really ready for review now and rebased onto latest master
 Force-pushed only a commit comment change
 > screen reader navigation to tracks and speaking of track names

Yeah, there seems to be a problem with this. Unlike in the release version of Audacity 3.4.2, this build does not let the narrator 'narrate' the individual tracks added to Audacity. Rather, it only narrates the track pane. 

 Rebased to recent master, resolved conflicts, inserted two small fixup commits so the screen reader works
 Rebased to recent master
 I promised you two fixup commits to review, but somehow misplaced them and didn't really include the fixes for the problems Anton identified.
 Now they are there.  Please review again.  It should take just a minute.
",,"Resolves: #5448

The logic for getting and setting the focused track is lowered to libraries.

TrackPanelAx is now used only by TrackPanel and together they inject the extra toolkit-dependent interaction with screen readers.

The other places that used to use TrackPanel.h, use only TrackFocus.h now.

QA: 
- [x] yellow focus border of tracks draws, and moves with cursor arrow keys
- [ ] screen reader navigation to tracks and speaking of track names

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5559,2023-11-09T19:09:31Z,2023-11-15T12:01:20Z,i-lina,1,5,2,44,8,2,1,[],480928.0,0,492710.0,0,0,0,0,25954585.825794,,0,2,0,False,['crsib'],Can you please squash the last two commits and rebase on the latest master?,,"Resolves: 
[Investigate Windows on ARM64 build](https://github.com/audacity/audacity/issues/5557)

Build Audacity natively for Windows running on ARM64. Audacity build dependency like RapidJSON, WxWidgets, OpusFile recipes have already been merged into audacity/conan-recipes. This series of patches resolve compilation issues seen when compiling on a ARM64 machine running Windows 11 and MSVC 2022 community edition. Steps I followed to setup build environment are https://github.com/i-lina/audacity/releases/tag/v3.4.1-win-arm64.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Do we need __aarch64__ here? Probably not, as the code builds for Apple Silicon and RPi Yeah, I figured, that I will only add the ARM64 flags and not __aarch64__. Did notice a few places, where they could be, but I was not very sure. In any case, it's only a prefetch :-) Looks like this line is redundant, _M_ARM64 is checked on line 111 Thanks, missed noticing that. Will fix."
5621,2023-11-15T11:12:09Z,2023-11-15T11:37:21Z,Gootector,3,0,1,6,1,0,0,[],25.0,0,2468.0,0,0,0,0,25955071.524828,,0,1,0,False,"['crsib', 'Gootector']",@crsib Please merge. I will after CI completes Thanks!,,"Update Polish from Transifex - 3.4.2

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5616,2023-11-14T14:30:00Z,2023-11-15T10:54:12Z,vsverchinsky,0,0,2,156,7,1,1,[],,0,73455.0,0,0,0,0,25958614.815484,,0,2,0,False,[],,,"Resolves: #5032

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5605,2023-11-13T15:02:38Z,2023-11-15T09:01:31Z,crsib,0,0,1,3,1,1,1,[],,1,151137.0,0,0,0,0,25965375.742255,,0,1,0,False,[],,,"(Probably) Resolves: #5106

This fixes the issue for me and looks quite sane: uninitialized memory can look like `NaN` or `Inf`, in both cases multiplying by 0 results in `NaN`, which is likely then converted to `INT_MAX`

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4067,2022-12-14T03:32:10Z,2023-11-14T14:14:17Z,DoraTrix,6,0,1,1,1,1,2,[],26866067.0,0,28982527.0,0,0,0,0,26033015.516292,,0,1,1,False,"['crsib', 'DoraTrix', 'marcushultman']","Would be nice to have this land. @Paul-Licameli Sorry for unsolicited pinging, but it appears this PR has fallen off everyone's radar, and I was wondering what it would take to get this to land. Not sure if the PR author is up for amending fixes, but I'd be happy to lend a hand where possible. As far as I can tell, it just needs an additional approving review?  It looks like the original reviewer deleted their account which might un-approve it in that sense - but the refresh button to request a new review isn't in the sidebar, so... 🤷‍♀️ @crsib Would you mind taking a look? @DoraTrix, can you please rebase on the latest master and force push? _sigh_

@crsib I botched the rebase, so I just added a new commit to the fix branch with the change.",,"Resolves: [#3723](https://github.com/audacity/audacity/issues/3723)

Adds ""name"" to the struct for the GetInfo command with type ""Clips"", uses the existing GetName() function in WaveClip.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5608,2023-11-13T16:44:53Z,2023-11-14T11:59:00Z,saintmatthieu,0,0,1,6,1,1,1,[],,1,69247.0,0,0,0,0,26041133.210864,,0,1,1,False,[],,,"Resolves: #5604 

Applying a macro to files is one method call which creates a provisional wave track, does stuff with it, exports the result and then remove the track from the project.

On the one hand, this is calling some `WaveTrack` method which queries clip boundaries and hence project tempo. On the other hand, the project tempo is set onto tracks _asynchronously_, i.e., an event is queued when adding a track to the track list to do that. When manually interacting with a project, the queued event has all the time to get executed before any of these boundary-querying calls are made. But not here.

This is a quick fix, which gets the `ProjectFileManager` to synchronously get `OnProjectTempoChange` to the tracks resulting from the import. I wonder if there is a way of making the call to `OnProjectTempoChange` when adding a track to a track list synchronous, but that would bypass the current publisher/observer construct. I don't have another idea so far.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5592,2023-11-12T17:04:43Z,2023-11-14T10:08:54Z,Paul-Licameli,1,0,1,5,2,1,1,['Build / CI'],64756.0,1,147857.0,0,0,0,0,26047734.872654,,0,1,1,False,['Paul-Licameli'],"CI failed.  Let me redraft this.
",,"... I shoulda done this months ago.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5572,2023-11-10T14:27:02Z,2023-11-14T09:29:44Z,vsverchinsky,0,0,1,29,1,1,1,[],,0,327781.0,0,0,0,0,26050072.470627,,0,1,0,False,[],,,"Resolves: #5568 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5514,2023-11-06T20:42:04Z,2023-11-14T09:24:46Z,aeiouaeiouaeiouaeiouaeiouaeiou,4,0,1,4,1,1,1,[],559917.0,0,650571.0,0,0,0,0,26050382.58652,,0,1,0,False,"['aeiouaeiouaeiouaeiouaeiouaeiou', 'Gootector', 'crsib']","You should change branch to 'release-3.4.2'. @Gootector done @crsib See here. Thank you, mate!",,"In the latest version the About dialog does not look correct.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5607,2023-11-13T15:43:38Z,2023-11-13T19:38:45Z,Paul-Licameli,0,0,1,1,1,1,1,[],,1,14112.0,0,0,0,0,26099947.590969,,2,1,0,False,[],,,"Resolves: #5571

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5597,2023-11-13T10:23:12Z,2023-11-13T13:00:17Z,crsib,0,0,1,14,3,1,1,[],,0,9430.0,0,0,0,0,26123857.784335,,0,1,0,False,[],,,"wxWidgets has introduced a breaking API change with https://github.com/wxWidgets/wxWidgets/pull/23309

This issue is also discussed here: https://github.com/NixOS/nixpkgs/pull/266945#issuecomment-1807292941

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5555,2023-11-09T18:48:29Z,2023-11-13T12:43:31Z,saintmatthieu,0,2,4,52,3,2,1,[],,1,323703.0,0,0,0,0,26124868.063515,,1,4,1,False,[],,,"Resolves: #5523
Resolves: #5599

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
This PR intends to restore the _exact same behaviour_ as that of 3.3.3 insofar as the ""Always paste audio as new clips"" option is disabled and no stretching is involved.

I put together this truth table:
| Always paste audio as new clips | Editing a clip can move other clips | One clip on clipboard only | Position  | Side effect on existing clip    |
| ------------------------------- | ----------------------------------- | -------------------------- | --------- | ------------------------------- |
| OFF                             | OFF                                 | False                      | Before    | not-enough-room error           |
| OFF                             | OFF                                 | False                      | Beginning | not-enough-room error           |
| OFF                             | OFF                                 | False                      | Middle    | not-enough-room error           |
| OFF                             | OFF                                 | True                       | Before    | not-enough-room error           |
| OFF                             | OFF                                 | True                       | Beginning | Shifts data to right and merges |
| OFF                             | OFF                                 | True                       | Middle    | Shifts data to right and merges |
| OFF                             | ON                                  | False                      | Before    | Shifts data to right            |
| OFF                             | ON                                  | False                      | Beginning | Shifts data to right            |
| OFF                             | ON                                  | False                      | Middle    | Shifts data to right            |
| OFF                             | ON                                  | True                       | Before    | Shifts data to right            |
| OFF                             | ON                                  | True                       | Beginning | Shifts data to right            |
| OFF                             | ON                                  | True                       | Middle    | Shifts data to right and merges |
| ON                              | OFF                                 | False                      | Before    | not-enough-room error           |
| ON                              | OFF                                 | False                      | Beginning | not-enough-room error           |
| ON                              | OFF                                 | False                      | Middle    | not-enough-room error           |
| ON                              | OFF                                 | True                       | Before    | not-enough-room error           |
| ON                              | OFF                                 | True                       | Beginning | not-enough-room error           |
| ON                              | OFF                                 | True                       | Middle    | not-enough-room error           |
| ON                              | ON                                  | False                      | Before    | Shifts data to right            |
| ON                              | ON                                  | False                      | Beginning | Shifts data to right            |
| ON                              | ON                                  | False                      | Middle    | Splits and moves to right       |
| ON                              | ON                                  | True                       | Before    | Shifts data to right            |
| ON                              | ON                                  | True                       | Beginning | Shifts data to right            |
| ON                              | ON                                  | True                       | Middle    | Splits and moves to right       |

There's a lot of redundance I didn't bother cleaning up, sorry about that.

Explanation of column names:
* ""One clip on clipboard only"": the region you selected before copying only contained one clip. It is important because pasting more than one clip should prohibit merging.
* ""Position"": the position of the cursor (cursor-paste) or the end of the selection (selection-paste):
* * ""Before"": strictly before the beginning of a clip
* * ""Beginning"": exactly at beginning of a clip
* * ""Middle"": within a clip

Besides that:
- [ ] Scenarios of that table relevant to selection-paste (as opposed to cursor-paste) also work
- [ ] Applying Noise Reduction doesn't create new boundaries (if unstretched)
- [ ] Nyquist effects that modify length (e.g. Delay) create new boundaries
- [ ] Nyquist effects that don't modify length (e.g. Tremolo) on unstretched clip don't create new boundaries
","I wonder what if both are `true`? I inspected calls to that function and didn't find place where it's the case. I don't think either that both happen to be true. AFAICS if `split` is true, whether `clearByTrimming` is true or not doesn't make a difference. If the former is false, though, we clear by trimming (as opposed to completely deleting) but the resulting smart clips on the right are moved back left."
5567,2023-11-10T12:12:15Z,2023-11-13T09:32:43Z,crsib,0,0,1,1,1,1,1,[],,0,249631.0,0,0,0,0,26136315.561296,,0,1,0,False,[],,,"Resolves: #5549 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5507,2023-11-06T13:16:19Z,2023-11-09T11:57:04Z,Paul-Licameli,5,6,8,227,3,2,1,[],40.0,1,431602.0,0,0,0,0,26296101.551293,,0,8,0,False,"['saintmatthieu', 'Paul-Licameli']","Draft still -- violating assertions when I record.  Wait for a fix ...
 I will not apologize for making the simplifying assumption that clips do have the same insertion order in corresponding tracks.

Other than adding a vector bounds check, I do not want to overcomplicate the transitional code we must write for this refactoring.  If you take on any of the other ""difficult"" channel iteration rewrites, you should do the same.

We already did the work in version 3.4 to ensure this condition.

See #5202, #5211, #5200.

 But making a refactoring branch may be a good idea.
 Ok. Please consider the other comments nevertheless. Rebased, and changed the base branch, and inserted two FIXUPs answering the review.
Looks good to me. I left some suggestions that I'd like to be considered to increase safety and remove code duplication.",Looks good to me. I left some suggestions that I'd like to be considered to increase safety and remove code duplication.,"Resolves: #5506

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

QA:
- [x] Edit > Clip > Join
- [x] Edit > Labels > Join

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This assumes that the insertion order of clips in each of the left- and right channel tracks is kept the same. What makes you confident that it is? Did you consider an approach comparing metadata (e.g. clip offset and length?) Isn't there a way of const-casting to avoid the non-trivial-code duplication? This assumes that `pair.second` really is an iterator obtained from the same leader-follower instance. Safer would be to modify the integration of the parts such that `RemoveWideClip(*clip->GetClip(0));` can be written (instead of current `RemoveWideClip(FindWideClip(*clip->GetClip(0)));`). Will do Both new functions are `private` so there is a bounded amount of code to examine to ensure the correctness.  I wouldn't worry about it.
 I'll do a bounds check
"
5393,2023-10-19T11:08:06Z,2023-11-10T18:04:15Z,Paul-Licameli,4,8,15,1238,30,2,1,"['Clips', 'refactoring']",1735170.0,1,1925774.0,0,0,0,0,26364824.098641,,1,15,1,False,['Paul-Licameli'],"> I see that `PendingTracks` remains to be an essential part of a track list, though it has become implicit part of it.

I don't understand your meaning.

While `PendingTracks` and `UndoTracks` are new files in `lib-track`, wasn't I careful to make the dependencies among them non-cyclic?

The pending track stuff is now implemented with another object attached to the project, without any intrusion into `TrackList`, and so a lot of confusing complication in that file can be thrown away.

I might have made another library dependent on `lib-track` but I didn't bother.
 @Vitaly your repeat review please.  I omitted something that prevents an assertion violation when doing one of the things in the QA checklist.  Also fixes a mismatch between header comments and actual behavior of a function.
 Rebased, and changed the base branch.
 Rebased onto the refactoring branch
I see that `PendingTracks` remains to be an essential part of a track list, though it has become implicit part of it.","I see that `PendingTracks` remains to be an essential part of a track list, though it has become implicit part of it.","Resolves: #5460

Clean up an old mess in TrackList, which predated the invention of ClientData.

Accomplish the same purpose non-intrusively now in TrackList.

That purpose is, to paint temporary recording tracks that are not the same as those in the project,
while the recording is not yet committed to undo history.  Some undo/redo items can be pushed or
modified during recording (as with Ctrl+B to drop a label), and those must be sequenced in undo
history entirely before the recording although they happened simultaneously with it.

QA: 
- Observe correct display updates during recording:
  - [x] recording to new tracks (Shift + R)
  - [x] append-recording (R key, when a track exists)
  - [x] Punch-and-roll recording
- Do things that push or modify undo history during recording; then observe undo-redo behavior.  The other changes are supposed to be sequenced all before the recording when you undo/redo
  - [x] changing the selection 
  - [x] Dropping a label (Ctrl+B, or Ctrl+M / MacOs Ctrl+.)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Please, move it to `protected` This flag look like an implementation detail that is exposed as a part of public interface. How one would decide whether it needs to be set to `false`? of the tracks's? This is a bit different from what `Track::SubstitutePendingChangedTrack` did. What if `track` isn't owned by the project's track list?  Though `TrackList::sCounter` is `static`, so id's will unlikely collide `Duplicate or `ReparentAllAttachments`?  Sorry, no, that would break compilation after the last commit.

`TrackListRestorer` uses `Duplicate`.  `PendingTracks` uses both.
 Unfortunate maybe, but the usual usage should default it.
 yes"
5566,2023-11-10T11:08:48Z,2023-11-10T16:51:46Z,crsib,1,0,4,14,3,1,1,[],1790.0,0,20581.0,0,0,0,0,26369175.747129,,0,4,0,False,['LWinterberg'],"> clear the looping region disables looping

That sounds very much like correct behavior.",,"Resolves: #5543 

@LWinterberg, this PR changes the Audacity behavior: clear the looping region disables looping. 

It looks sane to me, but please let me know if you disagree, and I will fix the issue differently then.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5443,2023-10-29T16:07:55Z,2023-11-10T14:57:04Z,Paul-Licameli,1,0,15,1805,39,1,1,"['refactoring', 'libraries & modules']",177609.0,1,1032553.0,0,0,0,0,26376058.625781,,0,15,0,False,['Paul-Licameli'],"Rebased onto recent master
",,"Resolves: #5442

Depends on
- #5415

Move CommandManager into toolkit-neutral libraries.

Lower toolkit-neutral menu visitation logic from MenuCreator to CommandManager.

Lift wxWidgets-specific implementations of menu building steps from CommandManager
to MenuCreator and invoke them by virtual function calls.

Thus CommandManager now includes a ""facade"" for menu population.

QA:  This should be quick to do, now that you know how:
- [x] Again, verify menu tree is unchanged
- [x] Again, verify shortcut keys are unchanged

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5545,2023-11-09T11:31:58Z,2023-11-10T11:05:54Z,vsverchinsky,1,0,1,24,2,1,1,[],6162.0,0,84849.0,0,0,0,0,26389920.241383,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build:  audacity-win-3.4.2-alpha-20231109+b783cdc-x64

This looks to fix this residual issue.

Testing with various selected format and a filename with no extension when pressing Enter - the outputted file has the appropriate extension added.",,"Resolves: #5533

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5565,2023-11-10T09:23:18Z,2023-11-10T11:05:17Z,vsverchinsky,0,0,2,8,1,1,1,[],,0,6130.0,0,0,0,0,26389961.2987,,1,2,0,False,[],,,"Resolves: #5529

QA: please also check #5263 for regression

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5544,2023-11-09T11:07:29Z,2023-11-10T11:04:31Z,vsverchinsky,0,0,1,24,2,1,1,[],,0,86229.0,0,0,0,0,26390011.762798,,0,1,0,False,[],,,"Resolves: #5511

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5550,2023-11-09T14:03:34Z,2023-11-10T11:03:38Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,75617.0,0,0,0,0,26390061.19502,,0,1,0,False,[],,,"Resolves: #5539 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5556,2023-11-09T18:53:41Z,2023-11-10T11:02:46Z,vsverchinsky,0,0,1,10,3,1,1,[],,0,58162.0,0,0,0,0,26390109.611943,,1,1,0,False,[],,,"Resolves: #5518 

Simple check for clipboard contents turned out to be not enough and text pasiting became imposible. But more complete check is very complicated and leads to attempts to modify many const-qulified structures.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5560,2023-11-09T19:19:10Z,2023-11-10T10:09:57Z,nekopsykose,0,0,1,1,1,1,1,[],,0,53447.0,0,0,0,0,26393297.392201,,0,1,0,False,[],,,"using the vector functions (e.g. vec_lde) requires importing the platform simd header

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5415,2023-10-23T15:10:15Z,2023-11-09T19:50:46Z,Paul-Licameli,2,0,23,5393,118,1,1,"['refactoring', 'libraries & modules']",699362.0,1,1485636.0,0,0,0,0,26444844.423645,,0,23,1,False,"['chinakov', 'Paul-Licameli']","Rebased onto master after merging its dependency

Let the review begin!
 Tested
",,"Resolves: #5437

The difficult dependency cycle of CommandManager and Menus is now broken!

A toolkit-neutral library for declarative descriptions of menu trees.

Also some reduced dependencies in CommandManager.cpp, but it is
not yet toolkit neutral too because it depends on ProjectWindows.h, wx/app.h, wx/menu.h

QA:
- [x] Try ""Get Info"" macro command with each choice of ""Format""
- [x] Verify pull-down menu tree is unchanged; including the optionally shown Extra menus
- [x] Verify menu shortcuts are unchanged (use the Export... button of Shortcuts preferences to compare builds)
- [x] File > Open Recent works as expected
- [x] Edit > Undo and Redo menu item texts update correctly after editing actions
- [x] Hover tooltips of the toolbar buttons show correct shortcut keys

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5551,2023-11-09T14:13:53Z,2023-11-09T16:43:57Z,saintmatthieu,0,0,1,14,1,2,2,['regression'],,1,9005.0,0,0,0,0,26456058.680788,,0,1,1,False,[],,,"Resolves: #5547

#eb11014 introduced the readout of a pointer without nullptr check. This is null if the Nyquist effect is a `bOnePassTool`.
The scope of this problem isn't yet clear. In any case, that pointer must be checked before usage.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5524,2023-11-07T17:01:47Z,2023-11-09T16:32:21Z,saintmatthieu,5,2,4,93,5,3,1,[],347.0,1,171698.0,0,0,0,0,26456093.524557,,0,4,1,False,"['saintmatthieu', 'LWinterberg', 'Paul-Licameli']","This draft looks right so far, of course needing real strings
 There is still one tiny behaviour difference, which I think is rather a relief, though (but it also could be that my judgment is biased by laziness since it'd also mean more code changes and more risk of introducing new bugs):
<img width=""1001"" alt=""Screenshot 2023-11-07 at 18 10 18"" src=""https://github.com/audacity/audacity/assets/22740106/647a43a9-f348-470c-905f-eee8cbc6bbc9"">

3.3.3: paste clipboard data onto selection, on either track, and the not-enough-room error pops up.
3.4.2 (with new setting off): paste clipboard data onto selection on
* upper track: the rightmost clip moves right.
* lower track: the not-enough-room error pops up.

So it'd be more lenient. @LWinterberg what do you think? LGTM! Shoot, that was still based on 3.4.1 ... ... cherry-picked onto 3.4.2.",,"Resolves: #5521

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

","@LWinterberg awaiting exact wording. ""Always paste audio as new clips"""
5552,2023-11-09T14:52:23Z,2023-11-09T16:13:55Z,crsib,0,0,3,60,1,1,1,['Build / CI'],,1,4896.0,0,0,0,0,26457860.252987,,0,3,1,False,[],,,"`wx-config` is now used to get the toolkit when
it can't be determined from the libraries name

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5541,2023-11-09T09:16:45Z,2023-11-09T10:27:41Z,crsib,0,0,1,2,1,1,1,[],,0,4260.0,0,0,0,0,26478635.904121,,0,1,0,False,[],,,"Do not enable NEON when building for armf

Resolves: #5476

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5538,2023-11-08T22:12:37Z,2023-11-09T09:16:00Z,Gootector,0,0,1,2,1,0,0,[],,0,39804.0,0,0,0,0,26482940.944887,,0,1,0,False,[],,,"Fix: capital letter
There should be a capital letter here.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5525,2023-11-07T19:35:07Z,2023-11-08T09:34:18Z,crsib,0,0,1,9,1,1,1,[],,0,50360.0,0,0,0,0,26568236.006234,,0,1,0,False,[],,,"Opus 1.3.1 had a broken build system in which it wasn't possible to control the instruction set used, which resulted in AVX being used. 

Resolves: #5516 
Resolves: #5496

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5510,2023-11-06T14:44:29Z,2023-11-07T20:23:11Z,saintmatthieu,1,0,2,115,4,2,1,[],17238.0,1,106722.0,0,0,0,0,26615713.204091,,1,2,1,False,['saintmatthieu'],"@crsib sorry, I need another round of review. I noticed that the crossfade track command was still broken for stretched clips. This is because the preliminary stretch-rendering creates new clip boundaries at the selection, which confused the fade-in/fade-out decision logic in `crossfadetrack.ny`.All looks correct to me for fixing the bug.

`'inclips` is now a new property of `*track*`.  Maybe a different Lisp symbol name for that could be clearer, such as `'pre-stretched-clips` (note, Lisp convention uses - not _ to separate words).

@SteveDaulton will want to know about this and document it in Nyquist reference.
","All looks correct to me for fixing the bug.

`'inclips` is now a new property of `*track*`.  Maybe a different Lisp symbol name for that could be clearer, such as `'pre-stretched-clips` (note, Lisp convention uses - not _ to separate words).

@SteveDaulton will want to know about this and document it in Nyquist reference.
","Resolves: #5483

When applying an effect to a track, the selection first gets stretch-rendered, which may introduce new splits at the beginning and end of the selection.
The problem is: the split happens at times rounded to the sample period, meanwhile the selection is not rounded.
In the particular case of the crossfade, the nyquist script checks that, within the selection, there is exactly one split. Depending on the rounding, the new stretch-rendering splits may fall into the selection boundaries, yielding the error ""Invalid selection. More than 2 audio clips selected.""

Proposed solution: modify the selection start and end values passed to the script by rounding them to the current track rate.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA: Note that, to test this, make sure you don't have the snap option checked.",
5291,2023-09-30T15:46:28Z,2023-10-04T12:35:08Z,LWinterberg,4,0,3,9404,6,1,1,[],71210.0,1,3283922.0,0,0,0,0,26631595.193879,,1,3,1,False,"['LWinterberg', 'Atomk', 'petersampsonaudacity', 'dozzzzer']","Testing on W10 with audacity-win-3.4.0-alpha-20230930+102c263-x64

@LWinterberg   -  Ooh that looks nicer Leo  :-)) Tested The 3.4.0 installer still has the ""squished"" logo:
![image](https://github.com/audacity/audacity/assets/6122017/5290e53c-fd0c-4c9f-81d3-e6d09c0fadcd)
 File in question is ""\win\Inno_Setup_Wizard\audacity_InnoWizardImage.bmp"". I'll fix it another time",,"This unsquishes the Audacity text logo, as seen in the initial splash, the welcome dialog and the about dialog. 

NB: The scaling factor here has been reset to 1. It's trivial to scale things down in each dialog to have them appear less mighty. 

(also removes some darkaudacity stuff which was unfortunate enough to be in my way)

Incidentally, the new XPM is smaller than the previous logo, so this even reduces load times a little. ",
5482,2023-11-03T10:49:56Z,2023-11-07T13:48:37Z,vsverchinsky,1,0,1,39,2,1,1,[],276917.0,0,356336.0,0,0,0,0,26639375.511728,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build for this fix:  audacity-win-3.4.1-alpha-20231103+b08b1c7-x64

This now appears to work fine.  

If the user has a Filename without an appropriate extension and then presses the Export button
a) the appropriate file extension is added in the dialog
b) a file of the identifiably correct format is exported

Also if the user adds a wrong/inappropriate extension 
c) then Audacity now corrects that with the appropriate extension.

**BUT note that if a user has a filename with dots/periods in it (say ""green.and.pleasant.land"") and no extension then the final text after the last dot/period will be stripped off and be replaced with the appropriate file extension.  
E.g.  ""green.and.pleasant.mp3""  - this destroying some of the user's carefully constructed filename.
Is this desirable behavior?**

@crsib @LWinterberg @dozzzzer :  prehaps this fix for #5007 could be pulled into the 3.4.1 Beta",,"Resolves: #5007

Not working well with custom ffmpeg exporter as it doesn't provide desired extensions list

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5512,2023-11-06T19:54:41Z,2023-11-07T11:00:48Z,Paul-Licameli,3,0,1,7,3,1,1,[],1505.0,1,59626.0,0,0,0,0,26644200.820211,,2,1,0,False,"['petersampsonaudacity', 'crsib', 'vsverchinsky']","Alternatively `LinkConsistencyFix` could be removed from `WaveTrackShifter` since we remove support for unaligned tracks @Paul-Licameli @crsib

I note that the build for this fix for 3.4.1 has partially failed.
https://github.com/audacity/audacity/actions/runs/6783530050
 I'm rerunning the build now",,"... when dragging clips from track to track.

WaveTrack::mLegacyFormat was uninitialized, which explains the intermittency.

Resolves: #5389

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5498,2023-11-05T11:55:38Z,2023-11-06T20:18:30Z,LWinterberg,2,0,1,2,1,0,0,[],11224.0,1,116582.0,0,0,0,0,26702389.936716,,0,1,1,False,"['chinakov', 'petersampsonaudacity']","Testing on W10 with @LWinterberg 's branch build:  audacity-win-3.4.1-alpha-20231105+4ab47c2-x64

Looks to be fixed Leo, with Ctr;+J for Join Clips in the Standard set of shortcuts. Yeah, can confirm that 'CMD + J' command joins clips as well. @LWinterberg 
",,this is probably fair given that the line clicking got axed,
5486,2023-11-03T13:33:16Z,2023-11-06T14:18:01Z,saintmatthieu,0,0,1,10,1,1,1,['P1'],,1,261886.0,0,0,0,0,26724027.994192,,0,1,1,False,[],,,"Resolves: #5471

Refactoring in 88370f3 changed behavior in code generating the LISP command in text form. crossfadeclips.ny rejected the new command in that form.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] Crossfade clips and crossfade tracks commands succeed on both mono and stereo data, so long as it is not stretched.",
5502,2023-11-06T07:51:26Z,2023-11-06T13:05:46Z,vsverchinsky,0,0,1,24,1,1,1,[],,0,18874.0,0,0,0,0,26728352.426893,,0,1,0,False,[],,,"Resolves: #5417
Resolves: #5480

Attempt to call `FileHistory::Clear` before `FileHistory::Load` causes deletion of all settings in `gPrefs`

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5490,2023-11-03T15:36:04Z,2023-11-06T13:30:24Z,crsib,1,2,1,15,1,1,1,[],85849.0,0,251663.0,0,0,0,0,26726886.052725,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @crsib  's latest branch build:  audacity-win-3.4.1-alpha-20231103+78b6d40-x64-msvc2022

This now seems to work properly on this branch build - the AUP project I created with 2.4.2 opens fine in this branch build.",,"Resolves: #5488

This fix was proposed by @vsverchinsky. This PR tweaks the part of the #5292 fix; it was verified under the debugger that the code runs for both AUP and AUP3 files.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Same should be applied to a linked track Or not, `FixTracks` iterates over all tracks, so ignore this comment then"
5503,2023-11-06T10:15:42Z,2023-11-06T11:11:39Z,crsib,1,0,1,5,1,1,1,[],1219.0,0,3360.0,0,0,0,0,26735212.721531,,0,1,0,False,['crsib'],"This goes straight to merge:

1. It only affects Linux on ARM
2. I've checked it on RPi 4
3. QA doesn't have Linux on ARM ATM",,"Resolves: #5476 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5492,2023-11-04T07:41:16Z,2023-11-06T08:58:17Z,iv-m,0,0,1,2,1,1,1,[],,0,177421.0,0,0,0,0,26743218.817876,,0,1,0,False,[],,,"
- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5501,2023-11-05T18:39:29Z,2023-11-05T20:16:39Z,nekopsykose,3,0,1,2,1,1,1,[],1357.0,0,5830.0,0,0,0,0,26788918.110206,,0,1,0,False,"['crsib', 'nekopsykose']","Hi, can you please rebase it onto release-3.4.1? done :) Fantastic, thank you!",,"this typo makes it link nothing since it expands to nothing, so libopusfile.so is missing and the module is broken

---

unrelated, but the failing `mod-opus.so` load from this reports the error in the popup as ENOTTY, which is pretty funny

also, you might want to pass `-Wl,--no-undefined` to the linker, because it catches these things early instead of at runtime:

```
ld: error: undefined symbol: op_open_callbacks
>>> referenced by ImportOpus.cpp:152 (./build/../modules/mod-opus/ImportOpus.cpp:152)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::OpusImportFileHandle(wxString const&))

ld: error: undefined symbol: op_channel_count
>>> referenced by ImportOpus.cpp:160 (./build/../modules/mod-opus/ImportOpus.cpp:160)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::OpusImportFileHandle(wxString const&))

ld: error: undefined symbol: op_pcm_total
>>> referenced by ImportOpus.cpp:161 (./build/../modules/mod-opus/ImportOpus.cpp:161)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::OpusImportFileHandle(wxString const&))

ld: error: undefined symbol: op_read_float
>>> referenced by ImportOpus.cpp:202 (./build/../modules/mod-opus/ImportOpus.cpp:202)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::Import(ImportProgressListener&, WaveTrackFactory*, std::__1::vector<std::__1::shared_ptr<TrackList>, std::__1::allocator<std::__1::shared_ptr<TrackList>>>&, Tags*))

ld: error: undefined symbol: op_head
>>> referenced by ImportOpus.cpp:210 (./build/../modules/mod-opus/ImportOpus.cpp:210)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::Import(ImportProgressListener&, WaveTrackFactory*, std::__1::vector<std::__1::shared_ptr<TrackList>, std::__1::allocator<std::__1::shared_ptr<TrackList>>>&, Tags*))

ld: error: undefined symbol: op_tags
>>> referenced by ImportOpus.cpp:249 (./build/../modules/mod-opus/ImportOpus.cpp:249)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::Import(ImportProgressListener&, WaveTrackFactory*, std::__1::vector<std::__1::shared_ptr<TrackList>, std::__1::allocator<std::__1::shared_ptr<TrackList>>>&, Tags*))

ld: error: undefined symbol: op_free
>>> referenced by ImportOpus.cpp:420 (./build/../modules/mod-opus/ImportOpus.cpp:420)
>>>               /cbuild_cache/link-cache/llvmcache-F1896CD3EF81FBF5FBCCAB14131C909985BE8802:(OpusImportFileHandle::~OpusImportFileHandle())
```
---

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5487,2023-11-03T13:51:21Z,2023-11-03T15:26:52Z,crsib,0,0,1,2,1,1,1,[],,0,5734.0,0,0,0,0,26979103.189381,,0,1,0,False,[],,,"Resolves: #5479 

Straight to merge

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5484,2023-11-03T12:18:20Z,2023-11-03T13:13:27Z,Paul-Licameli,2,0,1,2,2,1,1,[],2415.0,1,3311.0,0,0,0,0,26987108.576805,,2,1,0,False,"['crsib', 'Paul-Licameli']","Straight to merge I think
 Totally :-)",,"Resolves: #5485

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5481,2023-11-03T10:05:39Z,2023-11-03T11:58:24Z,crsib,0,0,1,6,1,1,1,[],,0,6769.0,0,0,0,0,26991613.577295,,0,1,0,False,[],,,"Resolves: #5467 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5477,2023-11-03T09:04:16Z,2023-11-03T11:42:11Z,vsverchinsky,0,0,1,1,1,1,1,[],,0,9494.0,0,0,0,0,26992572.119735,,0,1,0,False,[],,,"Resolves: #5473 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5462,2023-11-02T10:08:56Z,2023-11-02T11:14:25Z,saintmatthieu,0,0,1,1,1,1,1,[],,1,3930.0,0,0,0,0,27080657.825317,,0,1,1,False,[],,,"Resolves: #5461

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5459,2023-11-01T10:19:03Z,2023-11-01T14:22:06Z,crsib,0,0,1,2,1,2,2,[],,0,14586.0,0,0,0,0,27155795.831702,,0,1,0,False,[],Thanks for this PR. Tested and seems fine.,Thanks for this PR. Tested and seems fine.,"Resolves: #5454 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5458,2023-11-01T09:58:53Z,2023-11-01T14:13:12Z,saintmatthieu,1,0,1,9,1,1,1,['P1'],5541.0,1,15259.0,0,0,0,0,27156334.629105,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @saintmatthieu 's branch build for 3.4.0 Beta:  audacity-win-3.4.0-alpha-20231101+1b8cac1-x64

This appear to properly fix this issue.Well, that was quick","Well, that was quick","Resolves: #5456

When stretch-rendering an interval (stereo clip) that didn't have any stretch, we mistakenly replaced the clips with empty clips.
Now not only do we check that we don't stretch-render intervals that are already unstretched, but we also return proper clip copies if `GetStretchRenderedCopy` is called on an unstretched interval.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4684,2023-05-10T11:33:50Z,2023-10-31T17:09:15Z,Paul-Licameli,3,0,7,1504,20,1,1,['code quality'],14532876.0,2,15053730.0,0,0,0,0,27232167.37938,,3,7,1,False,['Paul-Licameli'],"Rebased onto the updated dependency
 Rebased again
 > This PR needs an extensive list of QA items

True

Thanks for reviewing.  Does your head hurt?
This PR needs an extensive list of QA items",This PR needs an extensive list of QA items,"Resolves: #5436

Depends on:
- #4651

Simplify calls to visit registries.  (When only visiting leaf nodes of one type, the visitor can be just one lambda).

Eliminate many dynamic_casts.  Instead TypeSwitch hides all the casting.

This also makes better type safety.  GroupItemBase because a detail class that applications should not use.

QA:
- [x] All as for #4651 again
   - [x] Try some track context menu items
   - [x] Sequence of items in the entire tree of pull-down menus is unchanged
   - [x] Likewise, the tree in the left column of the Preferences dialog
   - [x] Sequence of controls on the Library page of Preferences
   - [x] Sequence of formats in timer controls of Selection toolbar
   - [x] ditto snapping toolbar
   - [x] sequence of choices for ""Format"" in File > Export Audio... dialog
- [x] Exercise at least one item of each context menu
   - [x] Common track drop-down items
   - [x] Special drop-down items of each of the four kinds of track
   - [x] Wave track color choices
   - [x] clip
   - [x] background area (adds tracks)
   - [x] Label box
   - [x] Vertical rulers of waveform, spectrum, and MIDI tracks
 
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5175,2023-09-09T12:52:53Z,2023-09-27T12:06:44Z,Paul-Licameli,5,0,1,67,10,2,1,['Music'],179872.0,2,4498444.0,0,0,0,0,27241912.647571,,1,1,1,False,"['saintmatthieu', 'chinakov', 'Paul-Licameli']","> I am really surprised to see this PR. We have agreed that zeroing out is **not a fix**. I don't like that the buffer is modified on failure either.

As I explained at standup, I do not intend this to substitute for other fixes in the Plot Spectrum dialog.  But it affects other things besides plot spectrum.  It replaces failures with unspecified date with other failures with predictable zero data.  Deterministic behavior is not best but better.

Please note all the details at top about what is affected.
 Any failing use of `GetFloats` we know of that QA could use for testing? Using Find Clipping (Analyze -> Find Clipping) on a stretched clip results in no labels being placed in the 'Clipping' Label Track. 

<img width=""1292"" alt=""Screenshot 2023-09-25 at 14 34 03"" src=""https://github.com/audacity/audacity/assets/139755141/f8f49f21-310a-48ac-90b6-963234da5141"">
 Rebased onto recent master and resolved a conflict.

Now that other prior bug fixes are in the branch, I predict the freezing problems will go away.
 Tested, thanks!
I am really surprised to see this PR. We have agreed that zeroing out is **not a fix**. I don't like that the buffer is modified on failure either. ",I am really surprised to see this PR. We have agreed that zeroing out is **not a fix**. I don't like that the buffer is modified on failure either. ,"... This simple fix will make plot spectrum show blank instead of garbage for a selection with any stretch.

Make zero-fill on failure part of the WideSampleSequence contract too, removing a redundant defense in MixerSource.

Unproblematic un-checked uses are in:
- effects (where there will be pre-rendering of the selection)
- WideSampleSource (using new promise of WideSampleSequence; and anyway where we assume an upstream stretching sequence decorator)
- NearestZeroCrossing() (there are tests before it is called)

Problematic uses:

- [x] WaveTrack::ReverseOneClip -- won't generally work, but it happens to be called only from an effect now ; fixed by https://github.com/audacity/audacity/pull/5138

- [x] [Find clipping](https://github.com/audacity/audacity/issues/5176) (in src/effects but an analyzer, not an effect)
- [x] Punch and Roll Recording (only to find crossfade data)
- [x] [Snapping to frequency peaks](https://github.com/audacity/audacity/issues/5179) (drag of spectral box centerline, and ""Next Higher/Lower Peak Frequency"" menu commands; see SelectHandle)
- [x] Compare Audio macro command
- [x] SpectrumTransformer as used by experimental brush tool (ok in Noise Reduction)

Resolves: *(direct link to the issue)*

QA:  Try the things enumerated above.  They may not work, but behave differently, always using zeroes instead of unpreditable data.

Issues:

- [x] Find Clipping does not generate labels in the Clipping label track on stretched clips.
- [x] Reverse audio on a stretched clip hangs Audacity.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5139,2023-09-04T16:06:50Z,2023-09-19T09:47:30Z,saintmatthieu,19,30,1,46,2,3,1,['Music'],259597.0,2,4918802.0,1,0,0,0,27241918.862404,,2,1,1,False,"['chinakov', 'petersampsonaudacity', 'dozzzzer', 'saintmatthieu', 'Paul-Licameli']","> Reversion of my changes to AudioSegmentSampleView is questionable

I missed that commit on 2-of-6.
I looked at it again, but couldn't figure out the reason behind it ?
For the spectrum analyzer it seems simpler to me to be returned a `sampleCount` and then check whether this exceeded the maximum allowed number of samples. > > Reversion of my changes to AudioSegmentSampleView is questionable
> 
> I missed that commit on 2-of-6. I looked at it again, but couldn't figure out the reason behind it ? For the spectrum analyzer it seems simpler to me to be returned a `sampleCount` and then check whether this exceeded the maximum allowed number of samples.

I wrote a longer comment but the GitHub page ate it That's really annoying.  I wrote a careful long line comment and chose ""Request Changes"" from the top right but it lost my long comment.
 > > Reversion of my changes to AudioSegmentSampleView is questionable
> 
> I missed that commit on 2-of-6. I looked at it again, but couldn't figure out the reason behind it ? For the spectrum analyzer it seems simpler to me to be returned a `sampleCount` and then check whether this exceeded the maximum allowed number of samples.

Who said things should be as simple as possible, but not simpler?

This is a case of ""not simpler.""
 Here is a test case:  Make neighboring clips of equal duration.  Generate a tone in one and a tone of another frequency and the same amplitude in the other.  No stretches yet.  Select all and plot spectrum.  See two peaks equally high.  (Not two spikes, because of the realities of spectral leakage, unless you use rectangular windows and choose frequencies as exact multiples of the inverse of the sample window duration.  You might also like to choose linear, not log frequency scale.) … … if that is the control, the experimental would be two clips that sound the same as the control as played, but have unequal stretches.  For instance make the first clip half as long as in the control but stretch it to 2x duration, with the second clip as before.

Then plot spectrum.  What would you see?

I think you should see nearly the same plot, but I predict you will see unequal heights.  A clip stretched more will be under-weighted and another stretched less or compressed, over-. So maybe this bug fix allows some data to be plotted instead of nothing, but it’s bogus.  What should be done?

- ignore this as an unlikely use case?
- Detect clip stretch mismatch and display an error rather than bogus data?
- Do the hard work of more proper weighting of values?

If the last, maybe the way to do it is make a spectrum analyst for each clip separately, then write something that makes the correct weighted sums of several analyst results as one analyst object to be used later in plotting.
 Yet another possibility:  downgrade the priority of this bug, if in fact, present master doesn’t freeze but only fails to plot anything.  Then kick the can down to a later release.

Or just detect failure of `GetFloats` and give the user an error dialog explaining the problem, instead of the quiet failure to show any data, or showing bogus data. >  downgrade the priority of this bug

I believe P4 is already a pretty fair priority for it, but I definitely agree that it can be kicked down to the later release > … if that is the control, the experimental would be two clips that sound the same as the control as played, but have unequal stretches. For instance make the first clip half as long as in the control but stretch it to 2x duration, with the second clip as before.
> 
> Then plot spectrum. What would you see?
> 
> I think you should see nearly the same plot, but I predict you will see unequal heights. A clip stretched more will be under-weighted and another stretched less or compressed, over-.

Yes, in that case, the result would be obviously unexpected. Now I read all your comments till the last.

I say we merge this. It's imperfect, but at least it will work if you change project tempo and analyse over several clips. Then let's see if complains come our way. > Now I read all your comments till the last.
> 
> I say we merge this. It's imperfect, but at least it will work if you change project tempo and analyse over several clips. Then let's see if complains come our way.

I do not approve this for merge.
 This bug has low priority.  It is not a crash or freeze bug.

Rebasing 4th of 6 into the effect changes or refactoring tasks are far more important.
 I regret that. The work is now done and it does bring an improvement. Splitting hairs was more time consuming - although leading to interesting discussions. > I regret that. The work is now done and it does bring an improvement. Splitting hairs was more time consuming - although leading to interesting discussions.

Reasoning about the correctness of the changes you propose is my duty.  I did it.  I'm not satisfied.
 Testing on W10 with @saintmatthieu 's branch build for this:  audacity-win-3.4.0-alpha-20230908+519eafe-x64

When I now try to run Plot Spectrum on a stretched clip I get this error message.
![image](https://github.com/audacity/audacity/assets/50205984/18720a47-7305-4bc4-bd5f-192ff8277689)

I find that message very opaque and unhelpful to the user.  Now I figured out that if I rendered the stretched track then I would be able to plot the spectrum - but that's _**only**_ as a result of the discussions I had with Matthieu on Thursday.  

Maybe the error message could suggest that the user renders the track and then retries.
 Note that this PR would benefit from the [Move a function to new file WaveTrackUtilities](https://github.com/audacity/audacity/pull/5138/commits/b066650f6effa6fedd195564f32417fccdb72191) commit in #5138 : then we'd know for sure whether it's because of stretched data or not. Tested. On macOS, after a proper error message is displayed, a blank **Frequency Analysis** dialog is displayed that cannot be dismissed:

<img width=450 src=https://github.com/audacity/audacity/assets/70063970/9d475ea8-5142-4c0e-9653-80a4bfa17713>
 TestedReversion of my changes to AudioSegmentSampleView is questionable

","Reversion of my changes to AudioSegmentSampleView is questionable

","Resolves: #5119

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I see a new member variable in this dialog, which is non-modal and so may live a long time between button clicks.

That makes me want to examine its uses and see if instead local variables are used, or if that's not easy, then to be sure that the vector is cleared at appropriate times when the data are no longer needed.
 > see if instead local variables are used

Not easy: the audio is acquired in `GetAudio`, and read in another method: `Recalc`.

> be sure that the vector is cleared at appropriate times when the data are no longer needed

See `OnCloseButton()`.

This PR does not change the times when memory is acquired or released. Restating my lost comment:  This line is why I don't like the change.

`as_size_t` has an assertion that the value of the sample count is really in the range of a `size_t`.  I wasn't following the `@pre` comment convention yet those years ago.  It should be a `@pre` now.

And that means, there is burden of proof of satisfaction of the precondition at the point of the call.  But I don't know what the proof is here, and I don't think there is any sufficient information to prove it.

The point of commit 48aaca450b113a971a487f768c3e941accf9395a was to shift the burden of that proof instead to the places where `AudioSegmentSampleView` is constructed.

And note too, in that commit, the places where I added `@pre stretched samples in [t0, t1) can be counted in a `size_t` ` as an informal precondition, moving the burden of proof farther up.

And in the next commit after that, which is ba920717e826d4a0d6b5d81436d90f6a2e8f69df, I made those try-catches of `bad_alloc` in case the precondition was not satisfied.
 So I don't approve of the reversal of all of that caution that I put into an earlier commit.  And I must finish my examination of this pull request to see where you use the constructor and what proof of satisfaction of the precondition is possible.
 I'm not persuaded by this either.

After a closer look, I think this:
- Only a local variable in `Recalc` is necessary.
- `GetAudio` can return the value instead of changing a member variable.
- `Recalc` can call `GetAudio`.  Both existing calls to `GetAudio` can be eliminated with this change.
- `DrawPlot` and `PlotPaint` only use the number `GetNumSamples(mChannelGroupSampleViews)` so instead, just store that number as a member variable each time `Recalc` is called.
 Is this calculation right?  I think it’s 23.3 minutes Do you preserve non-throwing? Ok yes That should not be deleted I think I think you are correct that you make the lifetime of sample data just the same as in the previous version.

Which means, the previous version didn’t handle memory as efficiently as it might have and so we can improve on it now.

With closer study you can find that the “analyst” object has all the derived data necessary to draw the plot, and the size of that is proportional only to the analysis window size (or number of frequency bins) and independent of the length of the selection, which could be large. Even numbers that do fit in a size_t can be excessive and run out of memory.  There is still a bound of 64M samples and multiply that by four to get bytes.  Will there always be a quarter gig free?

So maybe a try-catch of `bad_alloc` could happen around the allocation, like what I lately did to bullet-proof the Mixer Board. This bothers me, for the same reasons that Mixer Board changes did, and why I cautioned about correct RMS calculation in Contrast.cpp.

Samples from neighboring clips with different stretches are treated as just one long sequence of samples as if they had the same real-time rate, ignoring stretches.  Is that right?

For Contrast I argued it was wrong:  rms should be calculated for clips separately, then combined into an overall RMS with the proper weighting of different clips, taking stretches into account at that point.

For Mixer Board, it was all right if only peak values are needed, but as I have also mentioned, Mixer Board also does an rms calculation that can be wrong now, but fixing it is future work that needs a totally different approach anyway to get the true post-fader levels out of the audio engine.

What wrong calculation could be happening here? … … answering that would take you into the guts of SpectrumAnalyst, where as I recall, values derived from many different FFT windows are combined into a single window that is later plotted.

As we have lately discussed, it is not wrong to take FFT of pre-stretched data and assign it to the same frequency bins as for the as-rendered sound that we don’t bother to calculate just yet.  However…

I think you would find there an assumption that all windows should be weighted equally in the combined result, but that could now be wrong with stretches.

What is a test case that might demonstrate this? …

 I see three stages that matter to our decision here:
1. Selection sample read-out (`GetAudio`)
2. Calculation of spectrum (`Recalc`)
3. Display of result (`Show`)

`GetAudio` itself calls `Recalc`, but `Recalc` can also be called independently, if there is a change of analysis parameter (window size, spectrum type, ...). The user may keep the analysis window open and change the track data, which is a nice user experience. So the time-domain audio must be kept in memory for the lifetime of the window, we cannot assume that it won't change and we can re-read it. It is correct. Unusual is the left operand of the bit-shift being 2, it usually is 1 - which would then yield 23.3.
Changed to `1 << 27`, in case I make another push. ### TL, DR:
From a result point of view, IMO it very marginally matters whether we pre-render or not, because of how rare use cases are where the limitation of either approach becomes a problem. (I assume that we don't put in the effort of weighting according to stretch ratio.) Implementation wise, I think this one is easier, isn't it? No need to make an editable copy of the track objects, just use a different, user-friendly API (`GetSampleView`).

### Detail:
Yes, the weighting is ignored here, which might yield unexpected results if the selection is made across clips of different stretch ratios. I don't expect this to happen often, and if it does, that the stretching difference is large enough to be noticeable, but in principle, yes, either accurate, preliminary stretch-rendering, or weighting would alleviate this.

I said ""accurate"" because, as we know already, the stretching algorithm is not perfect. I've done an experiment, which should serve as material for the spectrum analysis as well as the noise reduction problem.

1. I recorded myself saying ""test"" with an open mic.
2. I stretched the clip moderately, squeezing it by approx. 25%.
3. I duplicated the track for better comparison.
4. I selected a short region of background noise,
5. I rendered the stretching of that region.

The project overall:
![BackgroundNoise project](https://github.com/audacity/audacity/assets/22740106/c2677a6d-f528-4f21-b315-0f4e51e34f73)

The spectrum analysis of the unrendered labeled segment (upper track):
![Background noise spectrum](https://github.com/audacity/audacity/assets/22740106/66d7a635-ce0b-4936-980b-07e005b0cf5a)

That of the rendered segment (lower track):
![Background noise spectrum - rendered](https://github.com/audacity/audacity/assets/22740106/f838b753-454b-491f-b0c3-65e231b2cb3a)

(A way of superposing the spectra would be nice, like in Adobe Audition. We don't have this yet, do we?)

For the spectrum analysis use case, I don't expect this to happen often either. It's more for the noise reduction case that this might become an issue, but I'll elaborate in that other PR. I don't think so. In either versions, before or after, the only thing it does is returning before the warning check that there aren't too many samples. But if `selcount == 0`, it means that there was no selected track in the project, and no sample was read, in which case, of course, no warning anyways. Yep. `Recalc` then also must return a boolean, because the follow-up code that shows the result otherwise crashes. That's not hard, commit upcoming. I don't see how it was safer before. I'm looking at this:
```cpp
   // Not sure how to prove satisfaction of the invariant of GetSampleView
   mSampleView = pTrack->GetSampleView(t0, t1, mayThrow);

   // Expect that the difference of t1 and t0 is the part of a track played
   // in about 1/20 second (ticks of TrackPanel timer), so this won't overflow,
   // unless stretch ratio is extremely low.
   const auto nFrames = GetNumSamplesInView(mSampleView[0]);
```

If `AudioSegmentSampleView::mLength` is `size_t`,  overflow could happen in the first statement.
If it takes a `sampleCount`, overflow could happen in  `GetNumSamplesInView`.
Either way the overflow is caught by your try-catch.

Also, this would only happen in extreme cases : the MixerBoard refreshes every 50ms. What stretch ratio do we need to squeeze more than 2^31 samples of audio in such a short amount of time ? Possible, yet again there's the try-catch.

With `sampleCount`, the risk of overflow doesn't matter for this check in the next commit:
```cpp
   if (GetNumSamples(mChannelGroupSampleViews) > maxDataLen) {
      auto msg = XO(
""Too much audio was selected. Only the first %.1f seconds of audio will be analyzed."")
         .Format(maxDataLen / mRate);
      AudacityMessageBox( msg );
   }
```

But again, I didn't realize you had changed it, and didn't revert it properly as I left your comments untouched.
We have a disagreement about whether this PR should go in or not, let's wait until that's settled to see if I have to clean that up. ""Audio could not be analyzed. This may be due to a stretched clip. Try resetting any stretched clips, or mixing and rendering the tracks before analyzing."" might be better That makes me think that we don't have an straightforward way of unstretching clips ... Ticket ? You mean resetting the stretch ratio exactly to 1. I think this other old message should be corrected to ""must have""

Or maybe totally different words

@LWinterberg 
 I see one use of `GetAudio` where the return value is not checked, in `OnReplot`, but I think that will work all right.  The dialog remains shown but the message is shown and nothing will be analyzed.
 A clip could be either ""stretched"" or ""compressed"".  I'm just asking whether the wording should be more inclusive?
 Or should I say ""shrunk"" to avoid other confusions!
 ""must have"" sounds good to me. It is a problem at the basis indeed, ""stretch"" meaning ""expand"" in non-technical context. Not sure how to solve this :D Addressed. I suppose, yes: this PR doesn't change the execution sequence for the case where sequences have different sample rates. That's been working well and failure due to failing `GetFloats` take the same path."
5138,2023-09-04T15:23:10Z,2023-09-19T09:41:14Z,Paul-Licameli,30,30,22,818,42,3,0,['Music'],62419.0,2,4921421.0,1,0,0,0,27241922.211787,,0,22,1,False,"['Paul-Licameli', 'saintmatthieu']","I am going through the QA checklist for the original 5-of-6 PR, trying (almost) each item on both branches. I'll make separate comments for separate observations. Paulstretch:
1. Stretch a clip,
2. set preferences to editing a clip can move other clips,
3. select some region inside the clip and apply Paulstretch to a factor of 10.

I get such result on this branch:
![image](https://github.com/audacity/audacity/assets/22740106/c50a11e2-86e9-45e1-86c4-8e1e5384e111)

There shouldn't be the gap. #5044 doesn't suffer this problem.

If the checkbox ""edit a clip can move other clips"" isn't checked, this experiment works, on condition of course that the stretch factor <= 1. Auto Duck: works for neither this or the original branch. 1. Select a region on some stretched clip:
![image](https://github.com/audacity/audacity/assets/22740106/424d6ac9-f39f-48c8-9388-90c5b4a21382)

2. generate silence. On the original branch, the program crashes. On this branch, no crash, but unexpected result :
![image](https://github.com/audacity/audacity/assets/22740106/a49b8f3b-a562-4d0f-a9ad-c716072c82f1)

This is if the ""edit a clip can move other clips"" is checked. Without it, in debug, `assert(target.GetTrimLeft() == 0);` fails in `WaveTrack::ClearAndPasteOne`. Noise reduction:
On both branches, generating the noise profile stretch-renders the selected region and creates a clip (without creating an undo item):
![image](https://github.com/audacity/audacity/assets/22740106/dacb5ad4-9cf6-49a9-bee3-6dbbe70e953a)

Now I go back one step in the undo history (undoing whatever I did before generating the noise profile) and redo. Noise profile should still be in memory (?) but my undo/redo got rid of the unwanted rendered clip. Now I apply noise reduction. On this branch, I get the same spurious clip pattern as when generating silence: ![image](https://github.com/audacity/audacity/assets/22740106/dafef39f-1956-4ce3-b514-4a7dcd10ae5f)

On the original branch, it works. Graphic EQ fails on this branch: 
![image](https://github.com/audacity/audacity/assets/22740106/1c98f51b-33ac-46c3-aa61-34342a7047fd)

The gap shouldn't be there. Another effect of the EQ submenu, Bass and Treble, works, though.
 Effects that yield the spurious-clip pattern seen in the generating silence case:
* Generating silence
* Applying noise suppression
* High-pass filter
* Change tempo
* Change pitch
* Nyquist noise gate
 Mixing stretched stereo track to mono yields silence (on both branches) Truncate silence: works on this branch but not on the original branch (doesn't seem to pre-render) Now I know the rationale of this PR : get the destructive effects working, cherry-picking only the necessary part of 4-of-6 to make this work, i.e., `WaveClip::ApplyStretchRatio`. [Generalize use of progress bar and avoid unnecessary stretching if clip ratios match](https://github.com/audacity/audacity/pull/5045/commits/1985c7f3e179ad94994ad68f7f036081045c6fb8) introduced the `targetRatio` argument to that method, not necessary for this PR, but we ought not to forget it when repairing copy-paste later on if this PR makes it to master. Rebased unchanged onto recent master
 Fixed intermediate commit that failed to build
 New commit fixes at least some of the problems when editing a clip can move other clips
 > Now I know the rationale of this PR : get the destructive effects working, cherry-picking only the necessary part of 4-of-6 to make this work, i.e., `WaveClip::ApplyStretchRatio`. [Generalize use of progress bar and avoid unnecessary stretching if clip ratios match](https://github.com/audacity/audacity/pull/5045/commits/1985c7f3e179ad94994ad68f7f036081045c6fb8) introduced the `targetRatio` argument to that method, not necessary for this PR, but we ought not to forget it when repairing copy-paste later on if this PR makes it to master.

This branch does not include all of the 6th of 6.  Right, don't forget the rest of that one.
 > Paulstretch:
> 
> 1. Stretch a clip,
> 2. set preferences to editing a clip can move other clips,
> 3. select some region inside the clip and apply Paulstretch to a factor of 10.
> 
> I get such result on this branch: ![image](https://user-images.githubusercontent.com/22740106/265640540-c50a11e2-86e9-45e1-86c4-8e1e5384e111.png)
> 
> There shouldn't be the gap. #5044 doesn't suffer this problem.
> 
> If the checkbox ""edit a clip can move other clips"" isn't checked, this experiment works, on condition of course that the stretch factor <= 1.

This looks good now. > Auto Duck: works for neither this or the original branch.

@Paul-Licameli more detail:
Without stretching : ![image](https://github.com/audacity/audacity/assets/22740106/6fe32fd9-30cb-41b7-9387-e7883382ad5c)

If I stretch the clip on the lower track, though, applying auto-duck to the upper track does nothing. > 1. Select a region on some stretched clip:
>    ![image](https://user-images.githubusercontent.com/22740106/265642094-424d6ac9-f39f-48c8-9388-90c5b4a21382.png)
> 2. generate silence. On the original branch, the program crashes. On this branch, no crash, but unexpected result :
>    ![image](https://user-images.githubusercontent.com/22740106/265642207-a49b8f3b-a562-4d0f-a9ad-c716072c82f1.png)
> 
> This is if the ""edit a clip can move other clips"" is checked. Without it, in debug, `assert(target.GetTrimLeft() == 0);` fails in `WaveTrack::ClearAndPasteOne`.

Now it doesn't matter whether edit-can-move or not : the assert always fails. > Graphic EQ fails on this branch: ![image](https://user-images.githubusercontent.com/22740106/265645965-1c98f51b-33ac-46c3-aa61-34342a7047fd.png)
> 
> The gap shouldn't be there. Another effect of the EQ submenu, Bass and Treble, works, though.

This works now. > Effects that yield the spurious-clip pattern seen in the generating silence case:
> 
> * Generating silence
> * Applying noise suppression
> * High-pass filter
> * Change tempo
> * Change pitch
> * Nyquist noise gate

These still don't work, at least silence, NS (but you're working on this one @Paul-Licameli ), high-pass and change pitch. Haven't tried the others, but I reckon they also don't work. > > 1. Select a region on some stretched clip:
> >    ![image](https://user-images.githubusercontent.com/22740106/265642094-424d6ac9-f39f-48c8-9388-90c5b4a21382.png)
> > 2. generate silence. On the original branch, the program crashes. On this branch, no crash, but unexpected result :
> >    ![image](https://user-images.githubusercontent.com/22740106/265642207-a49b8f3b-a562-4d0f-a9ad-c716072c82f1.png)
> > 
> > This is if the ""edit a clip can move other clips"" is checked. Without it, in debug, `assert(target.GetTrimLeft() == 0);` fails in `WaveTrack::ClearAndPasteOne`.
> 
> Now it doesn't matter whether edit-can-move or not : the assert always fails.

Last evening I studied that complicated function ClearAndPasteOne.

There may be an explanation as with the bug that shifted clips too far right:  wrong inclusiveness or exclusiveness of the endpoints of a test for whether a point is in an interval, introduced when 2 of 6 was merged.

If so it would be good to understand just where this subtle problem is, not just hide it behind the 4 of 6 commit, which I think should be a logically independent fix of a different problem.
 > Now it doesn't matter whether edit-can-move or not : the assert always fails.

I think we can ignore this for now. Generating a tone with the selected region over a clip means is done as follows: create an empty clip, write the generated tone into it, clear the selected region and insert the tone in it. Since this involves copy-pasting clips onto one another, it will be repaired in the 4-of-6 PR. > > Now it doesn't matter whether edit-can-move or not : the assert always fails.
> 
> I think we can ignore this for now. Generating a tone with the selected region over a clip means is done as follows: create an empty clip, write the generated tone into it, clear the selected region and insert the tone in it. Since this involves copy-pasting clips onto one another, it will be repaired in the 4-of-6 PR.

I disagree:  the assertion should be understood and fixed.  I have added a fix.

You might see `// precondition satisfied because... ??` in two places, recording doubts I had about some stuff, that now I have resolved after deeper study of the new complexities Vitaly added to that function.
 > Mixing stretched stereo track to mono yields silence (on both branches)

Fixed
 > > Auto Duck: works for neither this or the original branch.
> 
> @Paul-Licameli more detail: Without stretching : ![image](https://user-images.githubusercontent.com/22740106/265916267-6fe32fd9-30cb-41b7-9387-e7883382ad5c.png)
> 
> If I stretch the clip on the lower track, though, applying auto-duck to the upper track does nothing.

I wonder if this is in common with the un-corrected mixing of stereo to mono.  For reasons I didn't figure out, apparently there are zeroes read from the stretched track instead of the proper values.
 > > Effects that yield the spurious-clip pattern seen in the generating silence case:
> > 
> > * Generating silence
> > * Applying noise suppression
> > * High-pass filter
> > * Change tempo
> > * Change pitch
> > * Nyquist noise gate
> 
> These still don't work, at least silence, NS (but you're working on this one @Paul-Licameli ), high-pass and change pitch. Haven't tried the others, but I reckon they also don't work.

Have you tried again with the latest changes? > > > Auto Duck: works for neither this or the original branch.
> > 
> > 
> > @Paul-Licameli more detail: Without stretching : ![image](https://user-images.githubusercontent.com/22740106/265916267-6fe32fd9-30cb-41b7-9387-e7883382ad5c.png)
> > If I stretch the clip on the lower track, though, applying auto-duck to the upper track does nothing.
> 
> I wonder if this is in common with the un-corrected mixing of stereo to mono. For reasons I didn't figure out, apparently there are zeroes read from the stretched track instead of the proper values.

`GetFloats` is called directly on the un-selected control track.  I changed that function, recall, to fail if there is any stretch in the specified interval.  So I think you will observe the same failure in master.

 I think the easy fix for AutoDuck is to make a temporary rendering of the control track during Process() and use that instead.

Can you write and push a commit to do that?

 > Effects that yield the spurious-clip pattern seen in the generating silence case:
> 
>     * Generating silence
> 
>     * Applying noise suppression
> 
>     * High-pass filter
> 
>     * Change tempo
> 
>     * Change pitch
> 
>     * Nyquist noise gate

I'm testing every place under src/effect where `ClearAndPaste` is used.  Project tempo is 120 and 4/4 time.

I generate 4 bars of noise in a mono track, stretch out to 6, select from 2 to 4, then apply an effect.

- Change speed
- High-pass filter (Nyquist.cpp)
- Generate silence (Generator.cpp)
- Noise reduction, step 2
- Tone generator (hits PerTrackEffect)
- Change Tempo, high quality on (SBSMSEffect)
- Change Tempo, high quality off (SoundTouchEffect)

In all of these, overlapping clips result.  That's bad.  I expect the same for other Nyquist effects, Chirp, Noise, Change Pitch, and the sliding pitch shift which visit the same functions.

But for any other effect, this PR makes an improvement over the master branch behavior.
 Rebased onto recent master and resolved conflicts
 If you understood my last criticisms of #5139, then you will understand my dislike of the proposed complications for the analysis phase of Noise Reduction.

If the selection for analysis happens to span clips of different stretch, then there may be mis-weighting of things when combining results.

Admittedly this is very unlikely for users to do, who use noise reduction intelligently (selecting only a small sufficient duration).

But on the other hand, for just that reason, I think the pursuit of this supposed efficiency isn’t worth it either.

I would keep my simple fix:  just render the stretch if needed, only on the selection, likely to be short, and simply avoid the side effect on tracks by not committing the EffectOutputTracks object.
Please consider the comments I left before merging.",Please consider the comments I left before merging.,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

## QA (copied from #5044)
All effects are supposed to work. Trying all of them may be too much, but a variety of types of effects should be tried (time-related effect, Nyquist, EQs and filters, noise removal, pitch shift, spectral tools, etc. Of course try them on stretched data, but also on stereo data, etc.

Note that applying an effect on a partial clip selection will create a new clip if the clip was stretched. That's wanted. The old behavior is only preserved on unstretched data.

- [x] AutoDuck
- [x] AutoDuck also works when there is stretch in the un-selected control track
- [x] Change Speed
- [x] Click Removal
- [x] EQ
- [x] Generate silence (in particular, does not create new clip boundaries at left and right edges of selection when generating over existing data and there is no stretching)
- [x] Loudness (in both modes)
- [x] Noise Reduction
- [x] Normalize
- [x] Paulstretch
- [x] Repair (Since this requires up to 128 samples only, the result will probably only be silence, and that's ok: it's a known limitation of the algorithm that rendering very tiny portions of audio only output silence)
- [x] Repeat
- [x] Reverse
- [x] Change Tempo and Sliding Scale, high and low quality
- [x] Stereo To Mono (previously reported by @dozzzzer as https://github.com/audacity/audacity/issues/5118)
- [x] Truncate Silence
- [x] Compressor
- [x] Some Nyquist effects and generators
- [x] At least one ""Per Track Effect"" example (any of the realtime capable, built-in or plug-in effects, but used destructively)

More for QA:
- [x] Effects applied to long enough areas, that the stretching progress indicator appears:  the indicator should fill up correctly, to 100% and then promptly vanish
- [x] Noise Reduction Analyze step, selecting stretched data and selections crossing clip boundaries with different stretch
- [x] Noise reduction analysis does not make unintended side-effects on tracks, or undo items
- [x] Test with and without the ""Editing a clip can move other clips"" preference (Track Behaviors)
- [x] Test all with selection of only a part of the track's duration, maybe with clip boundaries within, and different stretches
- [x] Test with silence generating a duration unequal to the selected duration
- [x] (Very minor) Click on clip boundary to merge isn't yet a hidden feature; it fails when stretch ratios differ, but makes no empty Undo item
- [x] Observe that new clip boundaries result when stretching is necessary, but if not, old behavior is preserved
- [x] Repair: stretch a mono clip by a factor of 2 and select 100 samples. You should get the error about not suitable to stretched data, not the other error that says you've selected too many samples.
- [x] #5135 is fixed by this PR
- [x] Apply a destructive effect to multiple tracks with stretch (maybe some without).  Observe just one progress bar proportioned to the number of wave tracks that have any stretch in the selection (maybe fewer than all the selected tracks).  The bar fills to completion and disappears at once, without jumping too fast over any part.
- [x] Use pencil tool _on unstretched clip(s)_ (getting this to work on stretched clips is for 3-of-6 to fix)
- [x] Effects that require sync-lock adjustment of other wave tracks that have some stretch or shrink in the selected interval
  - [x] In all of these, it should not insert splits in those tracks, and work when shortening a track, or widening a gap between clips; inserting silence into a clip is a KNOWN PROBLEM that is NOT IN THE SCOPE OF THIS PR but instead #5043 will do that
    - [x] Inserting generated silence
    - [x] Inserting generated tone, noise, chirp
    - [x] Nyquist generators, Change Speed, Paulstretch, Repeat, Change Tempo or Sliding Stretch (high and low quality)
  - [x] These two have some special case sync-lock handling and for now they WILL insert splits, though that might be reconsidered in future.
    - [x] Reverse
    - [x] Truncate Silence (Sync-locked tracks also shorten but with a cross-fade, unlike in other sync locks)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`WaveTrack::Duplicate` does this check for you. We should consider making it a public helper method of WaveTrack to places like these simpler. Pardon me I thought it did: not really, or intricately.
That said, `Duplicate` won't apply stretch ratio if no clip is stretched in the interval. So behaviour would be preserved removing those checks - although it would have a negative impact on performance. Nice ! 👍  I've been using `TimeInterval` on my other branch, which I think is appropriate since it's a pair of doubles. I prefer the way it was before: easier to understand (I always have to look up the subtlety between lower_bound and upper_bound) and on usage average seldom more expansive performance-wise. But sure ... I will change the name
 Eliminate `WXUNUSED` when you have an excuse to disturb a function with that macro.
Just declare `double, double`

Or if you want to be really modern: https://en.cppreference.com/w/cpp/language/attributes/maybe_unused
 New strings.  @LWinterberg  FYI copy-paste of agreed-upon strings from other places where pre-rendering is needed. @LWinterberg 
 You mentioned this utility in our meeting yesterday, but I didn't get the advantage over adding member functions to `WaveTrack` ? In the ""TimeAndPitchInterface::IsPassThroughMode"" commit of #5191, I'm consolidating checks of whether a clip is stretched with the decision in `StaffPadTimeAndPitch` to be in pass-through mode or not. Provided that what I did there is correct, the check here should be `pClip->StretchRatioEquals(1)`. Now that I pay attention to the progress bar, I realize that there are two buttons: stop and cancel. I don't see a difference in behaviour between the two. `EffectBase.cpp` uses just `ProgressShowCancel`, which seemingly we should here too. I'd be interested in knowing the difference between stop and cancel if anyone knows. Not sure how much this matters, but we get boxes of different look and feel depending on whether we've selected too many samples
![image](https://github.com/audacity/audacity/assets/22740106/e2f7eee5-082d-4361-99d7-08f3abe396f9)

or when selection intersects stretched data:
![image](https://github.com/audacity/audacity/assets/22740106/b619aeb1-9790-4b91-920c-392ec09c2497)
 A shortcoming that was already there that this commit should fix:
This check should be placed before the `if (repairLen > 128) {` check : if you expand a clip by a factor of 2, and select 100 visible samples, the `repairLen > 128` fails. I've experienced it and it took me time to understand why. A lambda user would probably perceive this as a bug. I don't think someone should be able to call `ApplyStretchRatio` with an empty interval. I'd rather have `@pre `!unstretchInterval || unstretchInterval->second > unstretchInterval->first`. Then, in EffectOutputTracks.cpp, if the interval is empty, call `WaveTrack::Duplicate` with an `std::nullopt` (or equivalent). wording sounds good I realize that the `unstretchInterval` arguments of `Track::Duplicate` and `WaveTrack::ApplyStretchRatio` have opposite meanings: stretch nothing in the former and everything in the latter. Maybe we should remove that argument from `Duplicate` and `Clone` and let the callers make a call after that to `ApplyStretchRatio` if needed. I think smaller is often better for classes.

The function I move into that file was defined in an earlier commit without intrusion into WaveTrack.  It wasn't necessary.  The existing public interfaces were sufficient to define it.

So then, why disturb and complicate the interface of WaveTrack without need?  I'm making the function available for reuse but keeping it separate from the class.

I think we may identify more inessential member functions of WaveTrack that could also be moved out.  It's a big file doing too much.

I think it would be better to have a smaller WaveTrack class someone could study, which provides just the essential services and maintains important class invariants.
 semantically, the (i) message is wrong in both cases anyway as we error out and abort. The red (x) would be more appropriate here. 

I have no strong feeling whether to use the big or the small text version. The big version feels a bit Vista/7, but I also have no strong desire to see it changed at the moment. The smaller version is the more appropriate to use going forward though. Done.

I recall there was a difference between Stop and Cancel for import and export.  I didn't look to see if that was conserved after all the refactoring in this release.

It was possible to Stop with a partially exported file instead of aborting the whole thing and deleting the file.
 All right, so change to red, but what's the required change for the looks-and-feel (if any) ? No strong objection to that. If you get the chance while squashing: `if (bGoodResult && tempList)`. `if (clip->GetStretchRatio() != 1.0)`. I'll make the change myself. If nothing is selected, then `mT0 == mT1 == 0` and the assert this commit introduces in `EffectOutputTracks::EffectOutputTracks` is hit. Neither of these false returns prevent the output tracks to be committed, actually. Maybe we should fix this now, i.e. `bGoodResult = false` if `processOne` fails. This makes a progress indicator for each wave track separately."
5134,2023-09-04T13:21:42Z,2023-09-05T13:37:26Z,saintmatthieu,1,2,1,33,3,3,1,['Music'],84846.0,1,4928707.0,0,0,0,0,27241925.220763,,1,1,1,False,['dozzzzer'],Tested,,"Resolves: #5113

Fix punch-n-roll for stretched (and unstretched) clips - see bug report for more detail.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] As in current release, a new clip is created when starting recording on a non-empty track.
- [x] Punch-n-Roll recording creates a new clip whether the cursor is in the left or right half of the space between samples ([demo](https://github.com/audacity/audacity/issues/5113#issuecomment-1705154108))
- [x] Punch-n-roll on a stretched clip doesn't have the issue reported in #5113 ",Is endTime now unused? minor: `const auto& b`
5400,2023-10-20T08:12:13Z,2023-10-20T11:11:28Z,saintmatthieu,5,0,1,15,4,1,1,"['bug', 'Music']",1207.0,2,972821.0,0,0,0,0,27241981.85887,,1,1,1,False,"['dozzzzer', 'crsib', 'saintmatthieu']","Please rebase this branch on `release-3.4.0` Still not there. You should have one commit, you have 2 now, first comes from the master and bumps the version to 3.5.0 > Still not there. You should have one commit, you have 2 now, first comes from the master and bumps the version to 3.5.0

Oj ... Parfait! TestedI do approve the fix, but it should not be merged before rebasing on the release branch","I do approve the fix, but it should not be merged before rebasing on the release branch","Resolves: #5397

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5398,2023-10-19T16:19:29Z,2023-10-30T08:38:26Z,saintmatthieu,16,24,2,476,6,2,1,"['bug', 'Music']",55420.0,2,1029984.0,0,0,0,0,27241984.243761,,2,2,1,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","Some comments about this PR that may help the understanding:
* `WaveClip` still being mono, it cannot be stretch-rendered independently from it's other channel. `WaveTrack::Interval` is now the place where this is done.
* The `StaffPadTimeAndPitch` processor needs a source and a sink. The sink sample size being different than the source, we cannot have the same `Interval` being at once source and sink. Hence the approach consisting of creating an empty copy, using it as sink, and afterwards copying over the envelope. Cutlines are not preserved. At the moment we have a (tiny?) bug on 3.4: enable cutlines, stretch a clip, cut a portion of it, render stretching: the red line is still visible, and clicking it still makes it disappear, but does not expand anything.
With this PR at least the red line isn't present anymore. I suppose it's okay to postpone the implementation of this to after this PR if Product think they're worthwhile preserving. If yes, the cutlines would probably have to be stretch-rendered, too ... About cutlines: @dozzzzer just logged an issue: #5401 This completes a round of review.  I think the sample formats must surely be fixed, and also preserving the project tempo in the clip may be desirable.
 Envelopes:  is it correct just to copy the envelope into the replacement clips, or do they have to be stretched too, as is done in WaveClip::OnProjectTempoChange?
 > Envelopes: is it correct just to copy the envelope into the replacement clips, or do they have to be stretched too, as is done in WaveClip::OnProjectTempoChange?

Stretch-rendering should not affect the timing of envelopes, and envelope points, like `mTrimLeft` and the likes, are updated on each shrink or expand operation. So we're good 👍  > > Envelopes: is it correct just to copy the envelope into the replacement clips, or do they have to be stretched too, as is done in WaveClip::OnProjectTempoChange?
> 
> Stretch-rendering should not affect the timing of envelopes, and envelope points, like `mTrimLeft` and the likes, are updated on each shrink or expand operation. So we're good 👍

Well I'm adding a QA checkbox anyway
 > Tracks with non-float samples should be a test case

I see you added a QA item, thanks. > One remaining thing I wanted to see was an assertion of a postcondition. I added it during your day off, in the interests of keeping this card moving through QA.

I forgot to do that, thank you. Just pushed a fix for [this issue](https://github.com/audacity/audacity/assets/22740106/6ac6c650-3f0c-4cab-9f67-7e6e5a350c21) found by @dozzzzer (thank you!)

 @saintmatthieu @Paul-Licameli 

- when rendering the clip that has trimmed envelope points and then dragging that clip, the trimmed envelope points re-appear:

https://github.com/audacity/audacity/assets/70063970/5e61ed5e-ba0c-45df-88c3-74e45dd55a19

 > @saintmatthieu @Paul-Licameli
> 
> * when rendering the clip that has trimmed envelope points and then dragging that clip, the trimmed envelope points re-appear:
> 
>  Screen.Recording.2023-10-27.at.11.58.55.video-converter.com.mp4

This video is linked in my previous comment. @saintmatthieu @Paul-Licameli 

1. add some envelope points at the beginning of the clip
2. shrink/stretch the clip
3. trim away the envelope points
4. right-click and select ""render clip stretching""
5. try to add more envelope points on the resulting clip

Actual result: only one envelope point can be added, at the very beginning of the clip


https://github.com/audacity/audacity/assets/70063970/dc9edbac-7241-47ec-b275-6c8c2a8a6c95

 Reapproved
 Reapproved
 TestedTracks with non-float samples should be a test case
 One remaining thing I wanted to see was an assertion of a postcondition.  I added it during your day off, in the interests of keeping this card moving through QA.
","Tracks with non-float samples should be a test case
 One remaining thing I wanted to see was an assertion of a postcondition.  I added it during your day off, in the interests of keeping this card moving through QA.
","Resolves: #5390

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA :
- [x] Doesn't re-introduce https://github.com/audacity/audacity/issues/5313
- [x] If a clip has no trimming, rendering is with RMB or with mix-and-render command yields bit-exact result
- [x] Whether stretch-rendering a clip and then applying an effect or directly applying the effect yields bit-exact result
- [x] All the above was done in mono and stereo
- [x] Test tracks with other sample formats than float
- [x] Test with a non-trivial envelope and observe the correct placement of points on the timeline
- [x] Cut lines are NOT preserved.  Whether this is agreeable to design will be decided later.

","@Paul-Licameli this is actually not right, which is why this PR is still a draft. I couldn't figure it out before the end of the day unfortunately. Maybe you can spot what I'm doing wrong. Fixed. The compile on macOS doesn't let you capture a structured binding name directly in a lambda.
Another fix is to change the lambda capture below from `[&]` to `[track = track, interval = interval]` `ForEachClip` might be used more consistently in these new functions, but that's not important.

Also I would redefine `ForEachClip` as an inline function, deducing the type of the argument as a template parameter, avoiding the construction of a `std::function` object.  But this is not important.

 Actually this is needed only for clip 0.  See the commits merged at 48154efe6d8ce8e02c570a665a31caab39786cdc.  Right channel envelopes are just ignored.
 This replacement for `WaveClip::ApplyStretchRatio` loses a few good things:
- Early quick exit when ratio is already 1
- pre- and post-conditions, stated in header comments, and asserted in the function
 Answering:  Exception safety was carefully documented for those Sequence operations precisely because exceptions are possible (otherwise it would have been `excsafety{No-Fail}`).  It is a promise that in case of exceptions, the Sequence object is restored to its prior state.

A known problem with wide wave clips (such as we have them, with the WaveTrack::Interval facade) is that strong exception safety for the individual sequences does not imply strong exception safety of the wide clip as a whole when appending or flushing.  Maybe there is success for one channel but failure for the other, and then there is no reversion of the first channel to its previous state.

I did not attempt to solve this unlikely problem for 3.4 and neither should you.  Just maybe it will happen if you record and run out of space on the drive.  There is exception handling in this case to save as much of the recording as possible rather than throw away the entire recording.  This hole in strong exception safety might mean it's one remaining way to end up with mis-aligned clips.
 The step `mRawAudioTempo = *mProjectTempo;` is lost in this version.  Should that be fixed?
 Cutlines?  Why not?

They might be preserved un-stretched.  Maybe nobody cares.
 Not completely like `this`.  I noticed that the new constructor of `Interval` always uses `floatSample` format.  I don't see where you change format to match the track's when inserting the new interval.

 More about formats:  either the argument to this function should be `float *const *` or else the format should be an argument, not assumed to be `floatSample`.  The latter solution has the appeal of more generality easily implemented, even if not yet needed.
 The assertions in this and the next two functions should be stated in header comments as preconditions.
 `dst`, as a freshly-created empty clip, doesn't have project tempo set yet. It will be when inserted with `WaveTrack::InsertInterval`. Preserving them unstretched would probably be the best, but then when expanding they should be stretch-rendered to the stretch ratio of the parent clip, meaning re-introducing the possibility of stretch-rendering to a ratio other than 1.
Also, that should be done at interval level to ensure joint-stereo, (at least until wide clips are a reality), and I'm not sure how this would look like.
So yeah, hoping nobody will care. I see.  Consider this point resolved.
 This is a design change.  Make sure designers agree.

Expansion of cutlines is done by WaveClip::Paste in WaveClip::ExpandCutLine.  Paste fails if ratios don't match.

So I think the complete solution would be correct remapping of cutlines along the timeline at the time stretch is applied, but then computing the stretch of the cutline could be delayed until just before the Paste.
 Absolutely - I've been overseeing this argument. Addressing ... ""Overseeing"" or ""overlooking""?  (Not the same...)
 https://www.jiosaavn.com/lyrics/im-looking-over-a-four-leafed-clover-lyrics/FhIgBjpjBAE > This is a design change. Make sure designers agree.

@dozzzzer logged a follow-up ticket that still awaits Martin's (or Leo's, but he's on vacation) input. https://www.youtube.com/watch?v=w1n5tShQpGM
 Trying ... 🤞  I think you may need to swap the two lines above to get correct results in all cases.  Because the function move envelope points after the collapsed part leftward.
 I wouldn't expect that, but to be on the safe side I'll push that change."
5384,2023-10-16T14:16:18Z,2023-10-17T11:32:35Z,vsverchinsky,1,2,3,47,5,2,1,['Music'],71652.0,1,1296574.0,0,0,0,0,27241986.148475,,0,3,1,False,['chinakov'],Tested - all check-list items and the original issue (Not enough room for pasting) have been fixed. ,,"Resolves: #5292

Another attempt to fix ""no room"" error

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Fixes #5268
- [x] Fixes #5279","I'd prefer to keep exclusively using `InsertClip` for adding clips. Here you bypass it because it's a case where it's okay that the clip is empty, but other coders later may not realize this and think it's okay to just push a new clip.
Would you please consider adding a boolean argument to `InsertClip` which defaults to rejecting empty clips ? Sure"
5341,2023-10-09T16:25:18Z,2023-10-11T09:06:51Z,saintmatthieu,2,0,2,146,7,1,1,['Music'],82427.0,1,1893631.0,0,0,0,0,27241991.651938,,1,2,1,False,"['dozzzzer', 'Paul-Licameli']","Nothing to add!
 Tested",,"Resolves: #5231

Please refer to #5231 for details.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Fixes #5231
- [x] Make a track with an alternation of clips with and without visible samples, drag-draw across them and ensure behaviour is acceptable. Please consult @LWinterberg if you have doubts.
",
5350,2023-10-10T13:48:04Z,2023-10-13T13:07:17Z,saintmatthieu,10,9,1,81,22,2,1,['Music'],76379.0,2,1816666.0,0,0,0,0,27241990.712605,,0,1,1,False,"['Paul-Licameli', 'saintmatthieu', 'dozzzzer']","@saintmatthieu 

### 1) When generating a sound using a Nyquist generator, the result is incorrect on Windows

1. Download & open [the project](https://www.dropbox.com/scl/fi/hquqrh7b3umy8uk5t8t5w/Nyquist-generator-bug.aup3?rlkey=yic310cn1bms1xavlokpo4358&dl=0)
2. Select an interval of appr. 0.5s
3. `Generate > Pluck` with the default length of 1.0s
4. Observe

#### macOS - correct result:

<img width=""450"" alt=""Screenshot 2023-10-11 at 12 39 32"" src=""https://github.com/audacity/audacity/assets/70063970/27ac95fe-e6b9-4bd9-be4b-0894a5340c9d"">

#### Windows - wrong result (the pluck is shorter and there's an unnecessary gap of silence):

<img width=""450"" alt=""Screenshot 2023-10-11 at 12 39 15"" src=""https://github.com/audacity/audacity/assets/70063970/30470416-b15e-40e1-82f1-45644dd27c9b"">

### 2) Beat Finder and Label Sounds analyzers don't yield any result

1. Open the above-mentioned project
2. Ctrl + A
3. `Analyze > Beat Finder` or `Analyze > Label Sounds`

Actual result: No beats detected; No label track with labeled sound is created; the stretched track isn't rendered, which is correct.

_P.S.: both issues aren't present in the most recent `master`_
 @dozzzzer  do you also test Nyquist Prompt?

One simple example:  select some interval of sound, and in the prompt window type
`(hzosc 60)`

That replaces the selection with a generated tone at Middle C (which is assigned the number 60 in MIDI)
 > That replaces the selection with a generated tone 

Yes, I've tried a few different examples and all of them yield correct results. @dozzzzer **1)** works for me 🤔  @dozzzzer **2)** Interesting ... @Paul-Licameli `EffectOutputTracks::Commit` also commits label tracks, I never realized ... > @dozzzzer **2)** Interesting ... @Paul-Licameli `EffectOutputTracks::Commit` also commits label tracks, I never realized ...

I hadn't thought of that!  So it needs a selective commit of labels only?
 @Paul-Licameli yes, something more fine-grained is needed. Please review my new commit. Tested All right, merge it.  The last commit isn't how I would have written it but I won't insist.
 `:bowing_man:`",,"Prior to this change, using Nyquist analysis tools on stretched clips replaced the selection with the stretch-rendered audio, which is not wanted.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Nyquist analysis tools (e.g., RMS) do not result in rendering the stretched clip. (The progress bar may show up, but that's only for analysis.)
- [x] Nyquist processing or generating tools still behave as before.","Not sure if this is exhaustive. This means that `EffectTypeTool` or `EffectTypeHidden` have their outputs commit, but especially in the latter case, I'm not sure that this is right.
Maybe this PR is worth more effort, in providing a virtual `bool Nyquist::ModifiesAudio()`  method, at least to improve clarify and maybe to realize that there are effects which aren't of the type analyze or none that don't want their output to be processed. What do you think @Paul-Licameli ? No, I think this change is good enough.

`EffectTypeHidden` is just StereoToMono which shares code with effects but is specially put in a different menu (Tracks).

`EffectTypeTool` includes the Nyquist prompt, in which you can type Lisp interactively and expect it to operate just as if a Nyquist effect.  It also includes Nyquist scripts that implement macros, but I'm not concerned about that case.

 Ok, so the Nyquist prompt will still render stretching, which is fine. I couldn't reach this place splitting stereo-to-mono the usual way, and haven't found a Nyquist way of doing that. These changes would work, but I think this commit could be much smaller if you simply supplied a boolean argument to `Commit`, defaulted, and non-default only where needed in Nyquist.cpp.
 The point of all this is that you do want to visit `AppendOne` for the added label track, but skip the replacement for the stretched wave tracks.

So you might call the argument `replaceTracks` defaulted to `true`.

I would like to see a simpler commit then.
 It's needed in Nyquist, but what makes you so confident that it is or will not be needed elsewhere ? Because Nyquist.cpp is just a strange awful pile of hacks and we don't want more like it.
 Vamp plugins also analyze and create label tracks. What about those? They did not need EffectOutputTracks.
"
5324,2023-10-06T12:46:19Z,2023-10-09T15:32:05Z,saintmatthieu,2,0,1,37,1,1,1,['Music'],156.0,2,2165969.0,0,0,0,0,27241995.042914,,1,1,1,False,"['chinakov', 'saintmatthieu']","@Paul-Licameli this is based on 4-of-6, as there'd be conflicts otherwise and there are fair chances that 4-of-6 gets merged before.
Also, the second last commit (""Imperfect attempt"") is just meant as fallback in case you find issues with the approach of using `ClearLeft` and `ClearRight` upfront. Please examine the overall diff first. Tested, ready to merge. Thanks! I understand the changes ",I understand the changes ,"Resolves: #5313

Please find details in #5313 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Bug reported in #5313 is indeed fixed,
- [x] also have cutlines on a stretched just about hidden by left- and right-trimming, and then stretch-render the clip. It should also yield normal results (previously the cutline hidden away be left trimming would creep back in to the clip).
",
5250,2023-09-26T14:05:36Z,2023-09-27T12:23:46Z,saintmatthieu,3,5,1,56,7,3,1,['Music'],62.0,2,3025207.0,0,0,0,0,27242001.369155,,1,1,1,False,"['dozzzzer', 'Paul-Licameli', 'saintmatthieu']","@crsib @Paul-Licameli @vsverchinsky I added three reviewers but it should be an easy PR that only one can review, whoever does it first. Tested I reviewed too.

I question why this is important for 3.4.  This is motivated by a theoretical case that seem unlikely in practice.

It's about sound quality in case of high sample rates -- but typical human hearing just can't detect much above 20kHz.

The point of this PR is to preserve the frequency resolution, but at high rates the result is less time resolution.  Maybe you will discover transients aren't treated as well.

This could be tested also with lower sample rates.
Couple style suggestions, looks fine otherwise","Couple style suggestions, looks fine otherwise","Resolves: #5124

Please refer to detailed description in #5124 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Get an audio file of sample rate 88.2kHz or higher, with harmonically rich and low-frequency content. (Feel free to resample an audio file of 44.1 or 48kHz, or to use [this sample](https://1drv.ms/u/s!ArATSZ9esLBGx062RpVHSYiGBs0m?e=8BgGsj)) Stretch the audio in either direction. This should sound better with this build than on current master.","`explicit`? `static_cast`?   `explicit`?
 Usually that's my choice, but elsewhere this file uses `(int)`, so I thought I'd stay consistent ... I missed that one, sorry."
5233,2023-09-22T16:32:40Z,2023-09-25T13:18:05Z,Paul-Licameli,2,0,1,1,1,1,1,['Music'],244294.0,2,3361980.0,0,0,0,0,27242005.387833,,0,1,1,False,"['Paul-Licameli', 'saintmatthieu']","I trust that the remaining one-liner fixes the issue.
I was foolish to format the code delivered by StaffPad when I integrated it. Someone at the time (I think it was you, Paul) said he didn't like it, and I thought I eventually undid it, but apparently not.
Maybe I should clean that up. Changes we have brought so far to this library don't concern StaffPad so much (fixing Linux build and fix for extreme stretch ratios) but this one more likely does and SP might want to have this upstreamed. > I trust that the remaining one-liner fixes the issue. I was foolish to format the code delivered by StaffPad when I integrated it. Someone at the time (I think it was you, Paul) said he didn't like it, and I thought I eventually undid it, but apparently not. Maybe I should clean that up. Changes we have brought so far to this library don't concern StaffPad so much (fixing Linux build and fix for extreme stretch ratios) but this one more likely does and SP might want to have this upstreamed.

I am sure they will want it.  Please communicate with them.
",,"... These changes appear seem to make mix-and-render give repeatable results.

I don't understand why.  Possibly only some of these changes are sufficient.  I don't know which.

UPDATE:  I do understand why!  After more study of the algorithm.

Resolves: [5210](https://github.com/audacity/audacity/issues/5210)

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5220,2023-09-20T08:23:59Z,2023-09-22T13:02:14Z,saintmatthieu,2,3,1,71,1,2,1,['Music'],110611.0,2,3564099.0,0,0,0,0,27242009.909355,,0,1,1,False,"['chinakov', 'Paul-Licameli']","Note this comment on another PR: https://github.com/audacity/audacity/pull/5043/commits/b18bd688d0a5c3abd8e364031043d5cde631fee7#r1333221516

This PR is not just changing performance, but also some observable consequences in the resulting clips.

Rightly or wrongly?  Unavoidably, if the performance change is really needed and more important.

@LWinterberg 
 Tested, thank you! ",,"Resolves: #5208

See ticket for detailed description.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Small selections are stretch-rendered faster than large ones when applying effects.
- [x] The resulting new, stretch-rendered clip doesn't have hidden parts left and right.
- [x] Please also test with selections beginning/ending within 1 second of start and end of clips
- [x] (PRL) observe a change in behavior that is not just performance when only a part of a stretched clip is selected and an effect applied:  before, the middle clip still had hidden clip data that you can see if you drag it to a new track.  After, it has none.
","Is this the smartest way to leave sufficient time to find the steady state?  Deeper knowledge of the library might be needed to answer that.

Should you reserve a certain amount of time or calculcate how to allow a certain minimum number of analysis windows?

Do you really need at the right end to?  Is the algorithm influenced by some lookahead?  (As with a compressor)
 It's a rather quick-and-dirty approach, given. It's probably an overkill, and 1 complete FFT size worth of samples should be sufficient. But we may get the FFT size to become sample-rate dependent in the future (there's an issue for that) and a self-maintaining solution would mean communicating that value somehow. Except for extreme stretch ratios, I don't expect this overkill to have a noticeable impact on performance. > Do you really need at the right end to? Is the algorithm influenced by some lookahead? (As with a compressor)

Yes, we do. Output samples at either edge of the constant-overlap region are influenced by the analysis samples before and after that."
5201,2023-09-16T14:49:24Z,2023-09-19T12:05:37Z,Paul-Licameli,1,0,1,18,1,1,1,['Music'],247836.0,2,3886570.0,0,0,0,0,27242014.766159,,0,1,1,False,['chinakov'],Tested,,"Resolves: *(direct link to the issue)*

QA:
- [x] Save a project from 3.4 containing some stretched or shrunk clips, with or without some clips with hidden data.
- [x] Attempt to open in earlier 3.x and see ""This project was created with a newer version of Audacity. You will need to upgrade to open it.""
- [x] Save a project from 3.4 without any stretch, but with some hidden smart clip data.
- [x] Open the project successfully in 3.1 or later.  Still fail to open in earlier 3.x.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5438,2023-10-27T14:50:34Z,2023-10-31T14:16:30Z,saintmatthieu,1,0,1,11,1,1,1,[],240056.0,1,343556.0,0,0,0,0,27242560.917363,,1,1,0,False,['crsib'],"I think this PR is for @Paul-Licameli, not for meLooks exactly right to me.  Looks small and harmless for Beta.

Please rebase onto the release branch and change the base branch of the PR.
","Looks exactly right to me.  Looks small and harmless for Beta.

Please rebase onto the release branch and change the base branch of the PR.
","Resolves: #5422

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5182,2023-09-11T10:29:38Z,2023-09-20T11:31:32Z,saintmatthieu,3,1,1,72,11,1,1,['Music'],4301.0,2,4334153.0,0,0,0,0,27242020.286862,,0,1,1,False,"['dozzzzer', 'saintmatthieu', 'Paul-Licameli']","I think you can shrink the branch so this PR does not include all of #5138.  Only the first and last commits of the sequence are needed.  That will allow it to be tester and maybe merged sooner.

 Thanks for the effort in accelerating this, but it also needs the `ProgressReporter` of ""Progress bar for pre-effect stretching"", which depends on ""Repair effects and generators"", ...
I'd rather wait than putting the extra work. This fix shouldn't be blocking anything other than the release itself. Tested",,"Resolves: *(direct link to the issue)*

Bug description: https://github.com/audacity/audacity/pull/5138#issuecomment-1713591482

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] ""Silence Audio"" command, across tracks and clips both stretched and unstretched. New clip boundaries should appear at an edge of the selection only if the clip underneath is stretched.
- [x] `Edit > Labeled Audio > Silence Audio` also works. (Note, though, that there isn't a progress bar for this yet. It's a bit trickier to introduce there, but #5043 has a utility that we will reuse for this once the utility is merged.)
","I repeat, you can clean up the old `WXUNUSED` macros

Just `double, double,` or you can use C++17 `[[maybe_unused]]`
"
5447,2023-10-30T09:29:10Z,2023-10-31T13:55:15Z,crsib,7,0,2,25,1,1,2,[],1464.0,0,102369.0,0,0,0,0,27243834.219718,,0,2,0,False,"['DavidBailes', 'LWinterberg', 'petersampsonaudacity', 'crsib']","@crib. This fix doesn't always default the export range to the entire project. The default export range is now the last used setting. This is a kind of behavior that a lot of places in Audacity has. This can be changed easily, I'm not sure that it should.

In the very same dialog every other setting remembers the value used during the last export.

@LWinterberg please advise  Testing on W10 with @crsib 's branch build:  audacity-win-3.4.0-alpha-20231030+c5fb3b0-x64

This works on first use if you have
a) multiple tracks
b) a non-empty label track
c) a selection
Then regardless if the above the ""Entire Project"" is properly offered (as now intended)

BUT on next use it still remembers the previously used export range _(and that ""remembering last use"" propagates to next launch of Audacity)_ - and sometime inappropriately so - try these steps:

Export Multiple can definitely be erroneous
1. purge the Audacity settings folder
2. get some audio - single track
3. add some labels
4. File > Export Audio (based on labels)
5. Observe: ""Entire Project"" is the default range offered
6. set the rang to ""Multiple Files""
7. Export button to export the labeled ranges
8. Delete the Label Track
9. File > Export Audio
10. Observe: ""Multiple Files"" is still the default range offered based on tracks  (even though there a no labels and only a single track)

It's a bit smarter with Export Selection - but not totally smart
1. purge the Audacity settings folder
2. get some audio - single track
3. select a portion of the track
4. File > Export Audio
5. Observe: ""Entire Project"" is the default range offered
6. set the range to be ""Current selection""
7. Export button to export the selection
8. make a different selection
9. File > Export Audio
10. Observe: ""Current selection"" is the default range offered (remembered from last use)
11. Export button to export the selection
12. make a point ""selection"" - i.e. set a cursor position
13.  File Export >Audio
14. Observe: ""Entire Project"" is offered as the default range

_@DavidBailes  and @SteveDaulton  any chance you can test this too please?_
 I'm fine with the current behavior. The first case @petersampsonaudacity is presenting sounds like a rather low-priority bug which can be fixed separately @LWinterberg  ironically if you add a step 11 to my first use case of actually make the offered Export - you then find that the whole project gets exported as Export Multiple based on tracks is offered - in which case the whole single track gets exported,

This may not be so good when the project has multiple tracks and no labels (which was @SteveDaulton 's use case in #5402  I think an important bit for usability is whether the user is aware of this option. If you've never used export multiple before and suddenly find your files getting chopped up after placing labels, it's super confusing. However, with this PR, you need to have used the export multiple option before, and it's likely that you have used it within the same session. Getting your files chopped up in this case may be a bit annoying, but chances are you know exactly what happened and also know exactly how to fix it. Testing on W10 with @crsib 's latest updated branch build for this:  audacity-win-3.4.0-alpha-20231030+6cc55d0-x64

This now looks **_much_** better to me.

Yes it now remembers that previously used range setting but now only applies that if and when it is appropriate - if it is not appropriate then ""Entire Project"" is offered.

@LWinterberg @crsib @vsverchinsky This looks good to go for 3.4.0 to me ",,"Resolves: #5402 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5450,2023-10-31T12:20:32Z,2023-10-31T12:26:09Z,crsib,1,0,1,17,1,1,1,[],328.0,0,341.0,0,0,0,0,27249180.530178,,0,1,0,False,['crsib'],This only affects build system on very specific Linux distros,,"Some of GTK libaries depend on libtiff, which uses new APIs from libjpeg-turbo 3, which breaks the build

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5449,2023-10-30T16:19:02Z,2023-10-30T17:42:16Z,mlocati,0,0,1,2551,1,0,0,[],,0,6930.0,0,0,0,0,27314683.271449,,0,1,0,False,[],,,"Update Italian from Transifex - 3.4.0

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4153,2023-01-06T15:06:42Z,2023-10-27T13:18:36Z,Paul-Licameli,1,2,2,7,2,4,2,[],25340730.0,1,25661070.0,0,0,0,0,27325684.112659,,2,2,1,False,['Paul-Licameli'],"Reviewing the conversation at the linked issue:  @dozzzzer told us why the fix wan't wrong, but incomplete.

So now another commit completes it.
Looks good to me",Looks good to me,"Resolves: #4151

A simple change so that pressing the power button of an effect list or a
single effect causes the nag to save the project when you close the window.

But this also causes the warning without need if you press the button twice,
toggling back to the original state.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I don't expect this file's changes to be intentional ? If not please revert before merge. I forgot to change the base branch of the PR to release.
"
5432,2023-10-26T21:18:47Z,2023-10-30T12:14:03Z,Gootector,3,0,1,8,1,0,0,[],312847.0,0,312928.0,0,0,0,0,27336302.069998,,0,1,0,False,"['crsib', 'Gootector']","@crsib Please merge. Sorry, mate Thanks!",,"Update Polish from Transifex - 3.4.0

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5408,2023-10-22T03:50:28Z,2023-10-26T08:25:49Z,brad0,4,0,1,61,9,1,1,[],28.0,0,714022.0,0,0,0,0,27343708.291972,,0,1,1,False,"['brad0', 'LWinterberg']","I can't sign the CLA. The URL does not work. > I can't sign the CLA. The URL does not work.

thanks for that, it should be fixed now. And thanks for the patch! Thanks. I signed the CLA. @crsib Can this be back ported to the 3.4 branch?",,"```
- When dlopening libraries on OpenBSD we need to drop the major version
- OpenBSD does not have sys/timeb.h. Note this has been removed from POSIX.1-2008
- Correct the mistake with the FreeBSD symbol, it should be __FreeBSD__
```


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5431,2023-10-25T20:20:42Z,2023-10-26T08:25:14Z,trebmuh,1,0,1,1325,1,0,0,[],43468.0,0,270105.0,0,0,0,0,27469012.315396,,0,1,0,False,['crsib'],Thank you as lot!,,Following #5413 as requested by @crsib ,
4651,2023-05-03T11:22:31Z,2023-10-27T12:51:06Z,Paul-Licameli,7,0,9,1400,79,1,1,['code quality'],168177.0,3,15298118.0,0,0,0,0,27593291.752443,,2,9,1,False,['Paul-Licameli'],"Rebased ont the fixed `simplify-with-Composite` branch.  Removed the failed fix for Windows build.  The branch just rebased on has a different fix which may work for this branch too.
 Windows build still wasn't good, now trying something else, which is actually a good enhancement of Composite, not just a workaround
 > Quite a large PR

Explain it to me.  It has been months since I wrote it… But I hope it is nice that visitors can often be mere lambdas  Rebased, unchanged
 And again
 Pushed again with a minor one-line change, removing an unused forward declaration
Quite a large PR",Quite a large PR,"Resolves: *(direct link to the issue)*

QA:
- [x] Try some track context menu items
- [x] Sequence of items in the entire tree of pull-down menus is unchanged
- [x] Likewise, the tree in the left column of the Preferences dialog
- [x] Sequence of controls on the Library page of Preferences
- [x] Sequence of formats in timer controls of Selection toolbar
- [x] ditto snapping toolbar
- [x] sequence of choices for ""Format"" in File > Export Audio... dialog

Depends on
 - #4623
 - #4624 

Each Registry specifies an exhaustive list of its leaf and node item types in its Traits.

Registry trees are checked for type correctness as they are constructed or registered for later
merge, although this check can still be evaded by (deprecated) use of GroupItemBase::push_back
to build a tree by other means.

Visitors of registry items are allowed only const access to items.

This pull request is not mostly about simplification of the use of registries, but some of that
happened too.  See for instance how the definition of class `NumericConverterItemRegistrator`
simplifies to a type alias.

There is still more type checking to do, and significant simplifications to achieve, in registry
visiting, making use of the TypeSwitch utility to be extracted from Track.h (see #4650).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5411,2023-10-22T05:26:20Z,2023-10-22T15:23:11Z,Gootector,1,0,1,6,1,0,0,[],508.0,0,35812.0,0,0,0,0,28016169.852176,,0,1,0,False,['Gootector'],@crsib My 3 patches and I'm out of your hair.,,"Update Polish from Transifex - 3.4.0
Two last fixes.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5409,2023-10-22T04:18:29Z,2023-10-22T15:22:57Z,Gootector,1,0,1,5692,1,0,0,[],460.0,0,39869.0,0,0,0,0,28016185.141658,,0,1,0,False,['Gootector'],@crsib Turkish. Very old translation in the repo. I imported the latest version from Transifex.,,"Update Turkish from Transifex - 3.4.0
PO file imported from Transifex.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5406,2023-10-21T17:32:58Z,2023-10-21T18:49:34Z,Patriccollu,0,0,1,905,1,0,0,[],,0,22593.0,0,0,0,0,28072192.899607,,0,1,0,False,[],,,"Hello @crsib

This is an update of **Corsican** localization for Audacity 3.4.0.

The files on [Transifex](https://app.transifex.com/klyok/audacity/language/co/) are also translated.

Best regards,
Patriccollu.",
5388,2023-10-18T02:16:33Z,2023-10-21T18:49:48Z,Gootector,1,0,1,992,1,0,0,[],180458.0,0,318796.0,0,0,0,0,28090176.21816,,0,1,0,False,['Gootector'],@crsib Done. Please merge.,,"Update German from Transifex - 3.4.0

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5387,2023-10-17T21:16:01Z,2023-10-21T10:05:47Z,Gootector,3,0,1,1072,1,0,0,[],198492.0,0,305386.0,0,0,0,0,28121619.644358,,0,1,0,False,"['crsib', 'Gootector']","@crsib Done. Please merge. @crsib Is something wrong? Nope, sorry mate",,"Update Polish from Transifex - 3.4.0

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5379,2023-10-13T22:51:26Z,2023-10-18T15:02:41Z,Paul-Licameli,10,1,3,70,4,1,1,[],221509.0,1,403880.0,0,0,0,0,28363002.051155,,0,3,0,False,"['crsib', 'saintmatthieu', 'Paul-Licameli']","Rebased unchanged to recent master
 1 There should be no variation in how the output tracks are computed — only, when.  That is why I chose the interface this way.   The virtual function would be too general.

2 Effects still have the general defect that the effect object (the unique long-lived one, for each different effect) is used to store state of the computation (members like mT0 and inputTracks()).  The remedy for this will be to introduce an EffectContext class and pass it as an extra argument in many places.  I have even written draft PRs for this, awaiting the opportunity for another refactoring campaign.  The best thing will be to put the EffectOutputTracks in that.  Destruction of the EfectContext object will then destroy EffectOutputTracks with no extra call.

The time for all that cleanup is not now. Rebased and changed the base branch for merge
 > 1 There should be no variation in how the output tracks are computed — only, when. That is why I chose the interface this way. The virtual function would be too general.

I'm not convinced by that, and I think it makes sense that an effect _instance_ may own a track it already has pre-processed in some way for reuse later when applying the effect. I'm not saying this shouldn't be superseeded by the effect context when the time is right, but in the meantime I see it as a possibility to spare additional complication in an already complex effect architecture. > > 1 There should be no variation in how the output tracks are computed — only, when. That is why I chose the interface this way. The virtual function would be too general.
> 
> I'm not convinced by that, and I think it makes sense that an effect _instance_ may own a track it already has pre-processed in some way for reuse later when applying the effect. I'm not saying this shouldn't be superseeded by the effect context when the time is right, but in the meantime I see it as a possibility to spare additional complication in an already complex effect architecture.

Let's fix all that later please, and just fix this bug now.
 > > 1 There should be no variation in how the output tracks are computed — only, when. That is why I chose the interface this way. The virtual function would be too general.
> 
> I'm not convinced by that, and I think it makes sense that an effect _instance_ may own a track it already has pre-processed in some way for reuse later when applying the effect. I'm not saying this shouldn't be superseeded by the effect context when the time is right, but in the meantime I see it as a possibility to spare additional complication in an already complex effect architecture.

I don't agree with that:  it's not the purpose of EffectInstance to own a track.  Really the only sort state an EffectInstance is meant to have are things like settings and delay buffer memory, while it is fed a stream of samples from outside.

EffectContext is (or would be) the more logical structure to hold temporary tracks that are operated on.

The effect system isn't ideal -- it is in a state of evolution from legacy code into something better, but that refactor was itself suspended to pursue others.
 I would approve a fix for that bug without the optimization part. > I would approve a fix for that bug without the optimization part.

I do not want to write a fix that computes stretch twice, wastefully.
 I think that the first commit makes an complicated system even more confusing for the sake of fixing a single effect. I like `EffectInstance::GetOutputTracks` a bit more, but again, to fix a single effect additional complexity is introduced, affecting the whole Effects framework.

However, I don't expect any new effect or let alone effect family to be implemented within the current framework, so I don't see much harm from the approach proposed in this PR. This is much better than calculating stretching twice.

I propose that we move this PR forward as is. The problems with the effects framework will be addressed in some near future with a quite high priority. So be it.Let me recap just to make sure we're on the same page first:
`EffectAmplify` during initialization analyses the audio. It has to do this on the stretch-rendered audio such that, when processing the stretch-rendered audio, it uses the correct scale factor.
This PR does this, but also avoid the duplicate stretch rendering by re-using the output tracks from the analysis phase.

What I'm not enthusiastic about is the added code complexity for optimization. Now the flow of `PerTrackEffect::Process` depends on what has happened in the `Init` method of the derived class. I've been trying to think of a bit more straightforward approach.

Could we get somehow `EffectInstance` to have a virtual `GetOutputTracks` method defaulting to the usual, and let `EffectAmplify::Instance` have it return a reference to the already stretch-rendered output tracks that it owns ? Then `DestroyOutputTracks()` wouldn't need be anymore, because the output tracks would disappear with the instance.","Let me recap just to make sure we're on the same page first:
`EffectAmplify` during initialization analyses the audio. It has to do this on the stretch-rendered audio such that, when processing the stretch-rendered audio, it uses the correct scale factor.
This PR does this, but also avoid the duplicate stretch rendering by re-using the output tracks from the analysis phase.

What I'm not enthusiastic about is the added code complexity for optimization. Now the flow of `PerTrackEffect::Process` depends on what has happened in the `Init` method of the derived class. I've been trying to think of a bit more straightforward approach.

Could we get somehow `EffectInstance` to have a virtual `GetOutputTracks` method defaulting to the usual, and let `EffectAmplify::Instance` have it return a reference to the already stretch-rendered output tracks that it owns ? Then `DestroyOutputTracks()` wouldn't need be anymore, because the output tracks would disappear with the instance.","Resolves: #5170

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Could be const.
5128,2023-09-01T12:33:02Z,2023-09-07T13:14:18Z,Paul-Licameli,3,0,4,299,9,1,2,['refactoring'],346606.0,2,4046066.0,0,0,0,0,28386721.28399,,2,4,1,False,"['Paul-Licameli', 'dozzzzer']","@Paul-Licameli moving back to In Progress:

- crash (Windows) or freeze (macOS) when clicking split line to merge on **a stereo track** Please review again, one added commit.
 Tested",,"Rewrite click to expand or delete cutlines or to merge clips, and rewrite
the painting of clip boundaries and cutlines, to remove some calls to
TrackList::Channels and lower two others into WaveTrack.cpp.

QA:  Do all this for mono and stereo tracks, and undo and redo changes:
- [x] Observe no change of display of clip boundaries and splits and cutlines in waveform and spectrum
- [x] Click clip split to merge still works (although we do intend to hide this feature later)
- [x] Left-click on a cutline to expand it
- [x] Right-click on a cutline to delete it

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5130,2023-09-03T15:52:59Z,2023-09-07T14:48:06Z,Paul-Licameli,5,0,5,555,32,1,1,['refactoring'],156953.0,2,3861262.0,0,0,0,0,28386729.295066,,0,5,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased onto master; no longer dependent on #5128.

This PR is meant to fix issue #5127 .  PR #5128 is no longer claimed to fix it.

 Sorry, this DOES depend on #5128 after all!
 Rebased unchanged onto updated #5128 
 > I feel that `FindChannelGroup` is a bit confusing, but I can't think of a better name anyway.

Elsewhere I have use the convention that “Find” functions can return null pointers (as stl containers may give you end iterators) but “Get” functions can’t fail and return references.

Any better idea? Tested:
- #5127 fix
- Realtime effects stickiness, persistency
- Rendering with realtime effects
- Playback with RT effects
- Undo/Redo for RT effectsI feel that `FindChannelGroup` is a bit confusing, but I can't think of a better name anyway.","I feel that `FindChannelGroup` is a bit confusing, but I can't think of a better name anyway.","Resolves: #5127

Depends on
- #5128

Store the real-time effect stack in `ChannelGroup` attachments, just as
we do for name, rate, solo, etc.

`WideSampleSequence` no longer needs to be another `ClientData::Site`.

Some changes result in library dependencies, and `WaveTrack` now has one
fewer member function to explain.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5385,2023-10-17T10:42:09Z,2023-10-17T11:15:46Z,crsib,0,0,1,2,1,1,1,[],,0,2021.0,0,0,0,0,28463022.095749,,1,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4353,2023-02-23T12:21:51Z,2023-10-17T08:54:50Z,agguzman,0,3,2,49,2,2,1,[],,0,20377980.0,0,0,0,0,28471481.75285,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2530

Special case added to AudioIO::StartPortAudioStream() to solve Issue #2530 by enabling WASAPI automatic Sample Rate Conversion for the playback device. Automatic SRC is enabled only for bidirectional audio streams if there is no supported sample rate common to input and output devices.

Small fix in AudioIOBase::GetSupportedPlaybackRates() and GetSupportedCaptureRates() when a valid rate parameter is provided (different than 0).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This correctly makes the `#include` directive conditional on the platform. This type is not known except when compiling for Windows.  So `#ifdef __WXMSW__` and `#endif` should surround this line too, and other lines below that do things with this variable.
 The constant `paWASAPI` is defined even when not compiling windows, so you will not need a change here to fix the build.
"
5380,2023-10-14T00:06:38Z,2023-10-16T13:59:41Z,Gootector,2,0,1,80,1,1,1,[],187302.0,0,244288.0,0,0,0,0,28518089.249681,,0,1,0,False,['Gootector'],@LWinterberg Ready for merge. @crsib Thank you!,,"Update Polish from Transifex
A few things I missed and better translations.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5308,2023-10-04T12:42:10Z,2023-10-16T17:06:24Z,Paul-Licameli,4,2,1,65,10,2,2,['performance'],165177.0,2,1052658.0,0,0,0,0,28528387.559755,,1,1,1,False,"['Paul-Licameli', 'crsib', 'chinakov', 'saintmatthieu']","Looks fine to me, but I'd refer to @crsib to verify that the changes are worthwhile. If we want to upstream changes - probably we probably shouldn't merge this PR. `alloca` is frowned upon, probably StaffPad guys won't like it either. Rebased and redrafted without `alloca`

Please review again.
 Tests returned no difference between master and this branch with stretching. Tested. I see no performance improvement and I do have doubts that SP guys would want this change, but I have nothing to say against this PR","I see no performance improvement and I do have doubts that SP guys would want this change, but I have nothing to say against this PR","Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Some sanity checks that mNumChannels <= 2 won't hurt, `assert` will do Done
"
5383,2023-10-16T14:00:21Z,2023-10-16T17:02:03Z,crsib,0,0,1,1,1,1,1,[],,1,10905.0,0,0,0,0,28528651.800984,,0,1,0,False,[],,,"Resolves: #5327 

QA: the only thing to verify is that AppImage launches, no changes otherwise

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5370,2023-10-12T17:17:15Z,2023-10-16T10:49:53Z,crsib,3,0,7,1488,23,1,1,[],54874.0,0,322362.0,0,0,0,0,28550980.831061,,0,7,0,False,"['crsib', 'LWinterberg', 'petersampsonaudacity']","@LWinterberg would be nice if you can check the new strings, please strings look good Testing On W10 with @crsib 's latest branch build for this:  audacity-win-3.4.0-alpha-20231013+3fad59f-x64

The Opus export works properly

And the ""VBR"" is properly capitalized.",,"Resolves: #443 (yes, a three digits issue!)
Resolves: #4709 (probably)
Resolves: #5364

This PR introduces built-in support for Opus files. 

Opus is a peculiar codec, always encoding 48kHz sample rate. Opus allow to store the ""original"" sample rate in the header, but recommends not to resample to that rate whenever possible. 

Despite that Opus encodes at fixed sample rate - it allows to feed the data at few other sample rates and allows to set the cutoff frequencies independently.

Opus allows to select from a fixed list of frame sizes. Audacity will never create larger frames, but at the end of the file smaller frames can be used.

Please note, that while the options list has a bit different values compared to `Opus (OggOpus) Files (FFmpeg)`, this is intentional and better reflects the codec setup.

* Importing uses `libopus` and `opusfile`.
* Exporting uses `libopus` and `libogg`.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5376,2023-10-13T13:18:28Z,2023-10-16T09:01:52Z,crsib,0,0,1,12,1,1,1,[],,1,243810.0,0,0,0,0,28557462.546791,,0,1,0,False,[],,,"Selection is baked into the track bitmaps, so we must repaint them

Resolves: #5309

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5374,2023-10-13T11:42:51Z,2023-10-16T10:26:31Z,Paul-Licameli,0,0,1,14,2,1,1,[],,1,254626.0,0,0,0,0,28552384.042397,,2,1,0,False,[],,,"Resolves: #2386

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5358,2023-10-11T08:59:02Z,2023-10-13T15:56:12Z,DavidBailes,0,0,1,13,1,1,1,[],,0,197830.0,0,0,0,0,28791810.715614,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5344

Bar formats in time controls have been changed so that the size of the first field can automatically increase. This enables bar numbers greater than 999.

Problem:
NumericTextCtrlAx::GetName() uses the position of the focused digit from the start of the digits to determine whether the focus has moved to a different digit. However this doesn't work if extra digits are added at the start of the first field, and can cause screen readers to read the wrong value as described in issue #5344.

Fix:
Use the position of the focused digit from the end of the digits to determine whether the focus has moved to a different digit.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5373,2023-10-13T10:50:21Z,2023-10-13T13:22:16Z,crsib,0,0,3,194,5,2,2,[],,0,9121.0,0,0,0,0,28801041.319203,,0,3,0,False,[],,,"Resolves: #5262 

This PR is surprisingly more complex than expected. During the refactoring HelpText was moved out to a library, `HAS_WHATS_NEW` definition was not propagated into it.

The Splash Screen text is now moved to SplashDialog. The ""version check"" URL is much simplified - we no longer support the formatted link anyway. 

Additionally ""Check Online"" link is removed from the about dialog - we provide different way to check versions now.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5368,2023-10-12T11:09:00Z,2023-10-13T13:01:07Z,vsverchinsky,0,0,1,11,1,1,1,[],,0,93136.0,0,0,0,0,28802309.249071,,0,1,0,False,[],,,"Resolves: #5268 

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5345,2023-10-10T10:35:56Z,2023-10-13T13:00:41Z,vsverchinsky,0,4,1,20,1,2,1,[],,0,267894.0,0,0,0,0,28802336.444085,,0,1,0,False,[],,,"Resolves: #5297 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`std::abs` should be enough I wonder if we need the same `eps` here? Or, probably `numeric_limits<double>::epsilon() * std::max(a->GetTrimRight(), b->GetTrimRight())` Yes, I think it could be `epsilon * max`, but not `0.5 * rate` because trim are no longer aligned with sample grid. Thanks"
5277,2023-09-28T21:36:59Z,2023-10-13T13:00:08Z,vsverchinsky,0,0,1,18,3,1,1,[],,0,1265010.0,0,0,0,0,28802358.085593,,0,1,0,False,[],"I approve, but I think the commit comment does not correctly state all of the intent?

Should it say Cut (not Copy) no longer auto-selects?
","I approve, but I think the commit comment does not correctly state all of the intent?

Should it say Cut (not Copy) no longer auto-selects?
","Resolves: #5263 

Copy does not support auto-select option any more
Cut, Copy commands are made available only when audio data or label text selected
Paste command is made available when clipboard not empty

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5352,2023-10-10T15:53:10Z,2023-10-13T11:41:25Z,Paul-Licameli,0,0,1,41,5,1,1,[],,0,244098.0,0,0,0,0,28807100.842152,,2,1,0,False,[],,,"Resolves: #5286

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5356,2023-10-10T20:04:30Z,2023-10-12T07:27:19Z,Gootector,0,7,1,48,1,1,1,[],,0,178481.0,1,0,0,0,28857638.699758,,1,1,0,False,[],,,"Update German from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Geräuschen

That said, I don't think it's the correct word here: A Geräusch is a non-tonal sound (like noise, a footstep or something similar), a Klang is a tonal sound (anything an instrument produces, really), Ton is a tone (ie a pure sine wave), but is sometimes used as a translation to ""sound"" in the context of computers.

Windows 11 just used ""Sound"" as the translation to sound in the settings.

Since Audacity is an audio editor, I'd also say that just saying ""Audio"" here makes sense. We could also refer to audio content = Audioinhalt. 

If I had to rank the options, I'd put them 
1. Audio
2. Audioinhalten
3. Tönen
4. Sounds

for the translation here.   Aufgezeichnetes Audio... grammatically correct, but feels weirder than what was before Geräusches

You could also simplify to ""... mit dem zu verarbeitendem Geräusch"" to port it to Dativ, I can't make much sense of the Genitiv-inside-Dativ construct currently.  umgebendes Sämtliches ausgewähltes Audio Sämtliches Audio"
5359,2023-10-11T10:50:30Z,2023-10-11T14:42:17Z,LWinterberg,1,0,2,2,1,1,1,[],11574.0,2,13913.0,0,0,0,0,28969048.941277,,0,2,1,False,['chinakov'],"![image](https://github.com/audacity/audacity/assets/139755141/1bba94fb-6713-4c96-87f7-387d0961580b)
Looks great on 1440p 27-zolle display! ",,This scales down the splash screen just a tad,
5351,2023-10-10T14:37:23Z,2023-10-11T18:33:52Z,LWinterberg,1,4,5,54,7,2,1,[],82762.0,2,102683.0,0,0,0,0,28953066.110414,,0,5,1,False,['Paul-Licameli'],"I found no grammar or spelling typos
",,"
Updates changelog
","The %% here creates a linebreak and is somehow tied to some accessibility object. I placed it where the resulting linebreak works well, and accessibility seems to work still as well.  Do we want a thank-you mention of ""dofuuz""?  (Myungchul Keum, already credited in the ""About Audacity"" dialog)
 Especially for import/export.  And some other reorganizations.

 @dofuuz thanks again!
"
5357,2023-10-10T21:06:58Z,2023-10-11T10:57:22Z,Paul-Licameli,0,0,1,1,1,1,1,[],,0,49827.0,0,0,0,0,28982549.379755,,2,1,0,False,[],,,"Resolves: #5325

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5355,2023-10-10T19:02:26Z,2023-10-11T13:29:36Z,Gootector,0,0,1,792,1,1,1,[],,0,66430.0,0,0,0,0,28973419.109135,,0,1,0,False,[],,,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5320,2023-10-06T09:31:29Z,2023-10-10T14:13:27Z,Paul-Licameli,5,0,1,2,1,2,2,['performance'],349.0,2,362522.0,0,0,0,0,29057186.386995,,0,1,1,False,"['crsib', 'chinakov', 'Paul-Licameli']","That is pretty cool, `lagrange6` was pretty costly. I will check the result This does give measurable improvement in performance > This does give measurable improvement in performance

Can you share some numbers?
 I would say 10% on Windows, I will recheck later, when my PC is idle again Yes, comparing Master and this branch's build via 'Invert, mix two tracks into new track' yields results of 0 on upstretching and downstretching. Tested, ready to merge! LGTM, now let QA confirm @Paul-Licameli 's bit-exactness claim.","LGTM, now let QA confirm @Paul-Licameli 's bit-exactness claim.","Resolves: *(direct link to the issue)*

This one-line change skips a calculation that is needed only when shifting pitch as well as time.

QA can confirm exactly 0 difference in before and after calculations of time stretch.

This may be worth testing for further performance improvement.  My own preliminary, rough tests suggest it might save a few percent in a macOS release build.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5338,2023-10-09T13:47:11Z,2023-10-10T11:51:43Z,DavidBailes,0,0,1,7,2,1,1,[],,0,79473.0,0,0,0,0,29065694.037116,,0,1,0,False,[],"Awesome, thank you, David","Awesome, thank you, David","…crash

Resolves: https://github.com/audacity/audacity/issues/5337

With a screen reader running, in one of the the built in generators, for example chirp, changing the format of the duration can crash Audacity.

Problem:
NumericTextCtrlAx::GetName(), uses NumericTextCtrl::GetFocusedField() to get the focused field. It then uses that as in index for a vector. However, NumericTextCtrl::UpdateAutoFocus() does not update the value of mLastField, which is returned by NumericTextCtrl::GetFocusedField(). So after a change of format, GetFocusedField() can return a value which does not exist in the new format. This can cause Audacity to crash. This happens from Audacity 3.3.0, and I don't know why it didn't in versions before this.

Possible fixes:
1. Change NumericTextCtrl::UpdateAutoFocus() so that it updates mLastField.
2. Given that NumericTextCtrl::GetFocusedField() is only used by the accessibility object, and that the focused field can be derived from NumericTextCtrl::GetFocusedDigit(), remove NumericTextCtrl::GetFocusedField() and NumericTextCtrl::mLastField.

The second fix was implemented, as it will reduce the chance of errors in this area in the future.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5315,2023-10-05T15:24:41Z,2023-10-09T13:39:15Z,Gootector,1,0,1,6,3,1,1,[],277911.0,0,363488.0,0,0,0,0,29121430.775966,,0,1,0,False,['Gootector'],"@LWinterberg In Audacity:

Sche&me to Sche&me: - No. 1:
Edit -> Preferencs -> Tracks -> Spectogram: Sche&me to Sche&me:

Sche&me to Sche&me: - No. 2:
- View -> Enable Extra Menus
- Extra -> Scriptables I -> Set Track Visuals: Sche&me to Sche&me:

File -> Export Audio... -> Sample Rate -> Other...: New Sample Rate (Hz) to New sample rate (Hz):
like: Tracks -> Resample... -> New sample rate (Hz):",,"Fix: missing colon

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5314,2023-10-05T15:08:08Z,2023-10-09T13:25:18Z,Gootector,0,0,1,2,1,1,1,[],,0,364474.0,0,0,0,0,29121438.55396,,0,1,0,False,[],,,"Fix: unnecessary space

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5336,2023-10-09T07:11:55Z,2023-10-09T09:07:47Z,ksoze95,0,0,2,21,4,1,1,[],,0,6957.0,0,0,0,0,29161930.765005,,1,2,0,False,[],,,"Resolves: #5335 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5334,2023-10-09T06:59:31Z,2023-10-09T09:51:33Z,ksoze95,1,0,1,24,1,1,1,[],9498.0,0,10326.0,0,0,0,0,29159306.016113,,1,1,0,False,['ksoze95'],Rebased onto latest qt branch.,,"Resolves: #5333 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5317,2023-10-05T16:06:18Z,2023-10-06T15:32:08Z,Paul-Licameli,0,0,1,9,1,1,1,[],,1,84353.0,0,0,0,0,29398076.138228,,0,1,0,False,[],,,"Resolves: #5282
Resolves: #5255

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] **-->**

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5043,2023-08-15T16:28:49Z,2023-10-06T17:46:13Z,saintmatthieu,30,30,17,1017,20,2,0,['Music'],685209.0,2,4497444.0,0,0,0,0,29390034.262145,,0,17,1,False,"['dozzzzer', 'saintmatthieu', 'chinakov', 'Paul-Licameli']","The first commit in this branch fails to build.
 > The first commit in this branch fails to build.

Squashed the branch to something more sensible. Each commit builds now. I reset this PR to draft because I have to make a bigger effort at preserving the old behaviour where appropriate. Will update the QA checklist for use are reference. Please review and approve this new commit https://github.com/audacity/audacity/pull/5138/commits/1372b859c9c2db198da93129729d8fba0f0371a6 at #5138 

-- and then make similar fixes for this branch
 Added a QA checkbox about sync lock
 @Paul-Licameli addressed your comments, with [this](https://github.com/audacity/audacity/pull/5043#discussion_r1322887539) as yet unresolved question. I am beginning another round of review, checking that each commit builds.

The first fails to build but it is easily fixed.
 > IIUC, the `+` overload works like an ""&&"", and your proposal would yield another condition: `playable && (IsSynCLockSelected || notLocked)`. I think what could work is
> 
> ```
> const auto range = tracks.Any<Track>() + [&](const auto pTrack) {
>       return SyncLock::IsSyncLockSelected(t) ||
>              (notLocked && dynamic_cast<const PlayableTrack*>(pTrack) != nullptr);
>    };
> ```
> 
> but that's not so important.

Please reconsider that, I find it more elegant to read it.
 My review so far.

The last things I don't fully understand are the implications of the changes in `PasteOverPreservingClips.cpp` and the changes in `WaveTrack::PasteOne`.

About the changes to remove duplication with progress indicators -- you can just remove those three commits and leave the duplication of code for now.  We can make the code nicer later.
 I have completed a round of review!

I was dreading `WaveTrack::PasteOne`, remembering the huge complications in earlier drafts that I had only skimmed over, but now the changes are easier to comprehend and I see nothing seriously wrong there.
 A note for myself: check if the resulting clip gets shifted a few samples rightwards after having merged the two stretched adjacent clips:

https://github.com/audacity/audacity/assets/70063970/025fe2d4-2190-4f74-9eff-8dd39cb1113f

 There's a crash when joining clips with contrasting stretch ratios. I verified that the [More standard-conform SplitProgress](https://github.com/audacity/audacity/pull/5043/commits/3d0ba5ae52150a11564272ab476aec01bc4c937d) commit isn't responsible, but couldn't investigate any further at this time. The commit ""WaveClip::Paste handles stretch ratio differences"" no longer builds.  This call has too few arguments:

```
      GetClip(channel)->ApplyStretchRatio(
         [&reportProgress, channel, channelsCount](double progress)
         { reportProgress((channel + progress) / channelsCount); });
```
 Approved for QA testing, but I want to continue with my own open-box testing too, exploring edge cases
 I see the additional commit, and it mostly looks good, but one question...
 Found issues @saintmatthieu 

- when joining 3 or more clips having different stretch ratios, the resulting clip has wrong length and has gaps of silence that aren't supposed to be there:

https://github.com/audacity/audacity/assets/70063970/72dfc1c5-81c0-40eb-a59f-68ced3ea9a4a

- when having multiple clips with different stretch ratios across multiple tracks, selecting them all and trying to Join, Audacity freezes. [This project ](https://www.dropbox.com/scl/fi/0sziskbfz13g35uhjyrhl/buggy-proj.aup3?rlkey=fwls04x70ebv8dk6x8m7myat4&dl=0)can be used for reproduction.

https://github.com/audacity/audacity/assets/70063970/3679e8b2-d1aa-4d75-806e-97056a77dbef

(to be continued)


 I realize that the commit I just pushed, [Fix potential crash when joining stereo clips](https://github.com/audacity/audacity/pull/5043/commits/fe8331d3bd3089c2c346a0f21352f59a3596bf87), while fixing the problem when joining two clips, is insufficient when joining more ... Bug found by @Tantacrul is fixed, thank you! Reflected in the checklist.  @saintmatthieu In the updated branch, previously logged issues are now fixed 👍 
New issues found:

### When generating audio into a clip, the resulting clip is shifted left to zero and the waveform is incorrect:

#### Expected:

https://github.com/audacity/audacity/assets/70063970/151c7d1f-7314-48f2-abb6-28f417d5821c

#### Actual:

https://github.com/audacity/audacity/assets/70063970/732c98eb-7a7c-4f1b-a88e-93ddcdb4fbf6


### When joining two stretched clips with envelopes, the resulting clip's amplitudes don't match the pre-rendered ones:


https://github.com/audacity/audacity/assets/70063970/8dc2f2c0-b16f-4b9f-8e92-daf8647d7094

#### Before `Audio Clips > Join`:

<img width=""450"" alt=""Screenshot 2023-10-02 at 18 34 34"" src=""https://github.com/audacity/audacity/assets/70063970/0ceda231-f803-4172-8897-10293d11dfe9"">

#### After `Audio Clips > Join`:

<img width=""450"" alt=""Screenshot 2023-10-02 at 18 34 50"" src=""https://github.com/audacity/audacity/assets/70063970/1870a4c1-2afe-4bd5-b96c-79f1d578d0ef"">

 Thanks @dozzzzer.
I noticed yet other problems: at the end of a clip,

![image](https://github.com/audacity/audacity/assets/22740106/3f6212cb-8383-4010-9c8d-38384ddd3a6b)

generate a chirp. You get this ugly result:

![image](https://github.com/audacity/audacity/assets/22740106/722a5e14-39e2-44ae-8734-2b589cdac7ba)

Unfortunately I didn't manage solving this before my day off tomorrow. @Paul-Licameli if you have the capacity to look into this. Clue: the `PasteTimeWarper` is causing problems when restoring the splits in `ClearAndPasteOne`.

 @saintmatthieu in the updated PR:

- the issue with generating audio at the end of the clip (see previous comment) is now fixed
- the issue with generating audio over a stretched clip is now fixed
- the issue with joining clips with different stretched ratios and envelopes remains **unfixed**
- there's another issue with generating audio (only in case of Nyquist generators, such as e.g. Pluck) over an interval selected on a stretched clip:

https://github.com/audacity/audacity/assets/70063970/4190430c-cb00-4057-964d-9a4b81678c87



 > * the issue with joining clips with different stretched ratios and envelopes remains **unfixed**

Sorry I oversaw that. Commits between your comment and now address this. > there's another issue with generating audio (only in case of Nyquist generators, such as e.g. Pluck) over an interval selected on a stretched clip

Actually I also hit some assert if the length of generated audio is greater than the selection - doesn't have to be Nyquist. (Don't know how it looks in a Release build.) Looking into this ... Intermediate step “WaveClip::Paste handles stretch ratio differences” now fails to build  The build failure is fixed three commits later > there's another issue with generating audio (only in case of Nyquist generators, such as e.g. Pluck) over an interval selected on a stretched clip:

I found the issue, which indeed didn't concern Nyquist only but also some generators (e.g. tone generator). Generating audio over a selection for a duration greater than the selection was buggy. (Haven't checked if it was also buggy for durations less than the selection.)

With the tone generator, the duration is set per default to the selection duration, but not with the Nyquist generator, and that got you to notice the bug.

For what it's worth, the fix didn't involve modifying that complicated `ClearAndPaste` method, but usages of it, so I'm optimistic that this change won't break other things. > Thanks @dozzzzer. I noticed yet other problems: at the end of a clip,
> 
> ![image](https://user-images.githubusercontent.com/22740106/272072568-3f6212cb-8383-4010-9c8d-38384ddd3a6b.png)
> 
> generate a chirp. You get this ugly result:
> 
> ![image](https://user-images.githubusercontent.com/22740106/272072621-722a5e14-39e2-44ae-8734-2b589cdac7ba.png)
> 
> Unfortunately I didn't manage solving this before my day off tomorrow. @Paul-Licameli if you have the capacity to look into this. Clue: the `PasteTimeWarper` is causing problems when restoring the splits in `ClearAndPasteOne`.

I attempted no debugging of this.  Have you fixed it?
 My review of new commits is complete
 > > Thanks @dozzzzer. I noticed yet other problems: at the end of a clip,
> > ![image](https://user-images.githubusercontent.com/22740106/272072568-3f6212cb-8383-4010-9c8d-38384ddd3a6b.png)
> > generate a chirp. You get this ugly result:
> > ![image](https://user-images.githubusercontent.com/22740106/272072621-722a5e14-39e2-44ae-8734-2b589cdac7ba.png)
> > Unfortunately I didn't manage solving this before my day off tomorrow. @Paul-Licameli if you have the capacity to look into this. Clue: the `PasteTimeWarper` is causing problems when restoring the splits in `ClearAndPasteOne`.
> 
> I attempted no debugging of this. Have you fixed it?

Yes. @Paul-Licameli finished addressing your comments.Please complete the fixes for exception safety.
","Please complete the fixes for exception safety.
","Resolves: #4850 
Resolves: #5273

Copying a clip of a given stretch ratio onto a clip of another stretch ratio cannot work as it has been so far. Instead of rendering the time stretching, we create new clips.

Note that this PR also changes the behavior if clips have equal ratios, since this was an ask from Product (@Tantacrul @LWinterberg ) and a low-hanging fruit for this PR.

Also note that this PR removes the feature whereby clicking the junction of two clips merges them, as a provisional step towards https://github.com/audacity/audacity/issues/2330.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

## QA

Please try a myriad of copy, paste and join operations, including trimmed clips, stretched clips, ...
Copy-paste operations should be tried with the ""Editing a clip can move other clips"" preference both on and off.
- [x] Cross-project copy-paste with difference of project tempo; observe time selection after paste, and stretching of the insertion which plays back at the new tempo
- [x] ~~Pasting a smart clip at the exact end of another clip preserves right-hand hidden data, loses (doesn't paste) left-hand~~ (The behaviour should be kept as in current release, that is, trimmed data should remain recoverable by untrimming).
**Peter 05Oct23 testing with latest 4 of 6 branch:**  The entire smart clip appears to be pasted. I had  30 second chirp and smart clipped it  by 10 seconds each side .  Then pasted it adjacent to  the right end of a 30 second tone.  in situ I could re-expand the chirp on the right.  I could expand it on the left in situ, but if I moved it rightwards away from the  tone I could re-expand it on the left too.  I absolutely think this is correct/desired behavior, the entire smart clip should be retained,
- [x] ~~Vice-versa, when pasting at the exact start of another clip~~
**Peter 05Oct23 testing with latest 4 of 6 branch:**  similarly so
- [x] Join stretched audio clips with equal stretch ratios doesn't render stretching
**Peter 05Oct23 testing with latest 4 of 6 branch:**  it still does render to 100%
- [x] Join audio clips with different stretch ratios shows progress bar
 **Peter 05Oct23 testing with latest 4 of 6 branch:**  Progress bar is properly shown
- [x] `Edit > Labeled Audio > Join` on project with several tracks of varying stretch ratios. (#5246)
 **Peter 05Oct23 testing with latest 4 of 6 branch:**  Can't test as labelled audio commands are FUBAR
- [x] Likewise with another label-based editing command of your choice, such as `Labeled Audio > Delete`.
 **Peter 05Oct23 testing with latest 4 of 6 branch:**  Can't test as labelled audio commands are FUBAR
- [x] Sync-lock when a wave track with stretch lengthens, inserting silence into a clip
- [x] Generating audio over a stretched clip yields expected result, be it silence, an Audacity or a Nyquist tone.
**Peter 05Oct23 testing with latest 4 of 6 branch:**  This looks to work properly in the branch - the generated audio is 100%, but the audio clips either side retain their stretch % factor (and are not rendered).  Expected and desired behavior I think.
- [x] Envelope still working, also when drawing. Please make sure the end samples are correctly scaled and editable.
- [x] Fixes https://github.com/audacity/audacity/issues/4984 and https://github.com/audacity/audacity/issues/5145 (please close if it does)
**Peter 05Oct23 testing with latest 4 of 6 branch:**  note the cliplet/""invisible"" clip syndrome.
- [x] Any chance it fixes https://github.com/audacity/audacity/issues/4297 ?
**Peter 05Oct23 testing with latest 4 of 6 branch:**    Looks to be fixed in the 4 of 6 branch
- [x] Paste a clip A onto a portion of a clip B. Now move A out of the way. The data in B that was under A is recoverable by un-trimming.
**Peter 05Oct23 testing with latest 4 of 6 branch:**    I can't see how to do the paste-over, so can't test this.
- [x] ""Silence Audio"" command over several tracks and stretched clips shows a convincing progress bar
**Peter 05Oct23 testing with latest 4 of 6 branch:**   I get a ""convincing progress bar"" with both stretched and unstretched clips - each clip was a one hour chirp and I had four of them.  The silent audio was properly rendered to 100%
- [x] Same for the AutoDuck effect, with stretch in the control track.
**Peter 05Oct23 testing with latest 4 of 6 branch:**   I get a ""convincing progress bar"" with both stretched and unstretched clips - each clip was a one hour chirp and I had four of them.  The ducked audio was properly rendered to 100%
- [x] Equalization effects (such as Graphic EQ) on unstretched tracks have the same behavior as before (i.e., merging begin and end of output when possible, preserving clip boundaries within the selection, etc.)
**Peter 05Oct23 testing with latest 4 of 6 branch:**   Seems to work properly. But if I have a gap between clips I get an unwanted additional silent clip between the separated clips (which of course impacts on clip movements)
- [x] Verify that this PR fixes #5265
**Peter 05Oct23 testing with latest 4 of 6 branch:**    This looks to work properly in the branch
- [x] Check if this PR fixes #4250
**Peter 05Oct23 testing with latest 4 of 6 branch:**    This looks to work properly in the branch
- [x] [Bug found by @Tantacrul on master](https://www.dropbox.com/s/0hlb011cx0rx4wr/Pasting%20Mutliple%20clips%20next%20to%20other%20clips.mov?dl=0) is fixed
- [x] Implements #5273
**Peter 05Oct23 testing with latest 4 of 6 branch:**    This renders the clips but I get glitches/clicks - see bug thread for details
- [x] Insert silence on stretched clip with non-trivial envelope behaves as expected
- [x] Cutline-cutting stretched region with envelope and expanding back restores the envelope
- [x] Paulstretch on both unstretched and stretched clip
**Peter 05Oct23 testing with latest 4 of 6 branch:**    seems to work fine with both stretched and un-stretched.","Replicated in another PR -- again, wrong number?
 Please edit the commit comment.  Put breaks in the very long line that is the third paragraph, and remove the last line.
 ""Adequate"" Do I understand the intention:  If I cut from a project with 60 bpm tempo, and paste into a project with 120 bpm tempo, it is not meant to play back the same, but play twice as fast?  And so the selection change too? A test of the branch tells me I have described how it behaves.  Whether that is as design specified, I don't know, but assuming so, I update the QA checklist.

 `mProjectTempo` can be private and this branch still builds.  Please do that.

Is there a commit I didn't review yet in another branch that needs `mProjectTempo`?  If so, rewrite that to use `Track::GetProjectTempo` which as you see is not a simple accessor.  Remember I rewrote it that way to fix the uninitialized variable that made the error drawing stereo clips.
 This one line:  I think in an earlier version you duplicated this unnecessarily in `WaveTrack` at places where `Init` had already been called, which was why the member was protected, but I pointed out the redundancy.
 It builds for me without this inclusion and without Prefs.h
 Does this added line, with the other at 630, fix a known bug in copy-paste?  Strictly speaking that's not the scope of the PR or the stretching project.  Is there an issue number that it fixes?
 I will add to the QA checklist anyway
 The function might be more understandable if you do that stretch only when `!stretchOtherBeforeResampling`

But I understand that if `stretchOtherBeforeResampling`, then the line does nothing because the stretch ratio is already unit.
 Did experimentation with larger numbers might find an easy way to improve performance?
 I like this swap for better exception safety, but it is still imperfect.

Now it is set up to happen if an exception occurs before `newSequences` were fully filled, which is also possible because of a dB failure.

So really you need another boolean for a stage of partial success.

That is, `bool swappedOnce = false;` above.  Make the `swap` in the Finally only if `swappedOnce`.  Assign `swappedOnce = true;` after the other swap below.

 Why this exception?
 1. What happens inside a `Finally` may happen during stack unwinding, so the called functions should be `noexcept`.  (I don't believe in adding `noexcept` just because you can; but only when there are certain strong reasons for it like here.)

2. This might not restore the state of the other track exactly.  `mRawAudioTempo` in a clip may go from empty to non-empty and not back again.

 I wonder if instead this should be an assertion that is stated as a precondition.  But then the precondition may need to be repeated for the functions that call this, and so on up the stack until somewhere you can give some convincing argument that the condition is guaranteed.

 The two places that use this function also use `const_cast`.  I feel some unease.  I might approve reluctantly.
 Move this to a `default:` case of the `switch` to remove a compile warning.
 This overload is not used
 The definition of this function is better now, but it is still not used Spot on. Still unresolved I reverted this change - wrong since `mProjectTempo` became part of `ChannelGroupData`. Yes, that's correct. It's a simple UX rule: preserve the length in beats rather than in seconds. The reason is obscure, but there is one.
`copy->ClearSequence(playEndTime, sequenceEndTime)` clears the trimmed data. If we don't call `copy->SetTrimLeft(0)`, one may still think the hidden data is valid.
Further down I call `newClip->ApplyStretchRatio()`. This provisionally sets left and right trim to 0, to reduce the ramping in/out of the effect if possible ...
Note that, in 5-of-6, I remove that call on `newClip`, but this is a healthy change in any case, making changes in the lines below safer. I didn't experiment with larger numbers, no. This number is the hop size for either the analysis or the synthesis (depending on the stretch direction), so it might spare iterations. Agreed. Cherry-picked your fix-commit d15f03a1c4ca0b6f59d286ac59862635b3d27457. Now I think this throw behaviour is too strict. This method is used so far in `WaveTrack::PasteWaveTrack` and `WaveTrack::ClearAndPaste`. I cannot think of a reason for either of them not to be callable before they are made part of a project, but maybe I'm not thinking hard enough.
A more pragmatic approach would be for this method to assert and return without doing anything instead of throwing, without stating a pre-condition. The assert might reveal a concrete example where this doesn't hold in the future, yet there might not be any consequence at all (e.g. if no stretching occurred), in which case bothering the user with it would just be annoying to everyone.
Ok for assert without pre-condition ? >  the called functions should be `noexcept`

I never used that keyword before. I notice, though, that
```
void foo() { throw std::runtime_exception(""""); }
void bar() noexcept { foo(); }
```
doesn't yield a warning, which would make even more tedious checking that all nodes of the call tree of `OnProjectTempoChange` also are `noexcept`. Or am I missing something ? > This might not restore the state of the other track exactly.

I hadn't thought about that, but looks like I'm a lucky guy: `track.GetProjectTempo().has_value()` if and only if `track.OnProjectTempoChange` was called at least once. If it wasn't, then this method doesn't proceed. If it was, then all clips have `mRawAudioTempo` set."
5243,2023-09-26T10:04:43Z,2023-10-06T11:17:27Z,vsverchinsky,2,12,1,174,5,3,1,[],693628.0,0,868364.0,0,0,0,0,29413363.003751,,0,1,0,False,"['vsverchinsky', 'Paul-Licameli']","I dismissed my request for changes, but before approval I will await an answer from @LWinterberg about a new question, and maybe @vsverchinsky will eliminate duplicated logic.

Also, correct the spelling in the commit comment please.
 Corrected the spelling and duplicated logic extracted.
Also loop that fixes consistensy has changed a bit - now it continues to remove effect stacks from unlinked tracks even if error has been found.
RebasedShould give the user information about fixes, just as if upgrading an .aup3 project from 3.x
 Good to see elimination of duplicated logic
","Should give the user information about fixes, just as if upgrading an .aup3 project from 3.x
 Good to see elimination of duplicated logic
","Resolves: #5211
Resolves: #5304

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:  Might want to wait until this is rebased onto #5260 
   - [x] Save 2.4.2 projects with misaligned stereo, mismatched channel formats, mismatched channel rates
   - [x] Open them in 3.4, seeing similar warnings and same splitting, as when opening 3.x legacy projects with similar
   - [ ] 2.4.2 projects without those problems open with no warnings
","Commit comment:  ""consistency""
 I'm convinced that this is correct to repair the track consistency, but there is also new logic in `ProjectFileManager::ReadProjectFile` to warn the user about the change, and that function is not reached.

It should not be difficult to make that reusable.
 My guess that the main reason to show this dialog is to warn about possible effect stack loss, when you import AUP with mismatched channels nothing gets removed But you are also changing it in #5260 to give other warnings about mismatched rates and formats
 The warning is about effect stacks that can be removed as we split channels, we don't change sample format or rate And existing texts do not fit in that case I think the warning contains two pieces of information: 
1. your project will look different to what you last saved because we migrated some stereo tracks to mono tracks
2. realtime effect stacks may be lost. 

In the case of legacy importers, part 2 is not relevant but part 1 is, so I'd still want to see the message box.  Strings, @LWinterberg  ?

This function causes only the first applicable message to be shown.  Possibly more that one might apply in an old project.  Maybe all applicable messages should be shown.  Or maybe we don't care about this edge case of an edge case.


 However, I see that in case of opening a 3.x file, not importing .aup, the warning about possible loss of stacked effects is always given, in addition to whatever other message is reported by the function.  That is unchanged behavior compared with master.
 Delete the second line of the comment too
 This looks correct but it's all duplication of a part of `ProjectFileManager::ReadProjectFile`.  Can there be just one function to do this?
 strings look good!"
5310,2023-10-05T10:43:43Z,2023-10-06T12:44:25Z,crsib,0,6,4,142,12,2,1,[],,0,93646.0,0,0,0,0,29408141.682823,,0,4,0,False,[],,,"Resolves: #5270
Resolves: #5232

This PR addresses issues introduced when the `bar:beats` formats were allowed to resize to always fit the number of bars needed.

Fixes implemented:

* Format can only ""grow"", simplifying the keyboard interaction. This helps to address 5270 cases A and C. Case B is intentionally kept so the behavior matches the one Audacity has now.
* In the selection bar, we always use the widest format, addressing 5232.
* Both toolbars now correctly adapt to the Time Control size.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","should it reset even if `mFocusDigit - (newBoxesCount - boxesCount) >= 0`? Always `true` argument? So it never shriks? I mean all calls to that function pass `false` Great catch! Never indeed I would say no. 0 <= mFocusDigit < boxesCount, and we only add the difference, never subtract"
5307,2023-10-04T11:50:17Z,2023-10-05T15:12:04Z,saintmatthieu,8,0,3,110,4,1,1,"['Enhancement Request', 'P4']",103.0,2,158025.0,0,0,0,0,29426170.576655,,1,3,1,False,"['Paul-Licameli', 'dozzzzer', 'Tantacrul', 'saintmatthieu']","@vsverchinsky just augmenting the tolerance from 1 to more pixels had the drawback that the clip tended to be inserted to the left of the overlapping clip. I couldn't find an easy way to adapt the code you wrote. I hope this new implementation makes sense. All looks good to me
 I agree with the new, third commit.
 Tested @Tantacrul Damn! I'll test this a little later. That's awesome if it works as expected! 

Is this slated to go in the 3.4 release (it looks like it from the milestone)? Haven't exhaustively tested this but I'm not having the same issues I was having before. Seems good, thanks! > Is this slated to go in the 3.4 release

Absolutely!",,"Resolves: #5264 

Please see ticket for detailed description.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5289,2023-09-29T16:52:22Z,2023-10-05T10:54:18Z,crsib,3,11,3,437,9,3,2,[],414179.0,0,496919.0,0,0,0,0,29501152.561073,,1,3,1,False,"['crsib', 'chinakov', 'saintmatthieu']","I'd give this PR the thumbs up, but I'm incompetent to review the SSE optimization part, and I understood that this was going to be expected from @vsverchinsky. Thank you, @vsverchinsky! Your suggestions are now implemented Tested and discussed with @crsib - we've come to the conclusion that the performance is satisfactory. ",,"This is an attempt to improve the performance of the time stretcher on MSVC. The problem was noticed due to extreme duration required to run the time stretching test.

MSVC, especially when targeting 32 bit Windows has the following problems:

* `rintf` is not inlined. This function is approximately 2 CPU instructions. Replacing it with `int(x + 0.5f)` results in 2x performance improvement.
* Math functions are not inlined either. `void TimeAndPitch::_process_hop` first converts a large array of complex numbers (2049 were observed during the tests) to polar coordinates, manipulates the result and converts back to cartesian coordinates. This conversion turned out to be extremely slow on MSVC.

On top of that, Audacity build system only enabled SSE2 support for `SBSMS` and `soundtouch`.

As the result of this PR, the following improvement was observed on Ryzen 5800x:

* Win64: 938 seconds -> 215 seconds
* Win32: 5489 (!) seconds -> 354 seconds

This result is quite close to M1-powered MacBook Pro, where the test runs in around 200 seconds.

Checking the samples used for unit tests showed that the difference is below -90 dB.

### For QA

This PR changes how trigonometry functions are calculated: `sin`, `cos` and `atan`. The difference between the ""reference"" implementation and implementation is relatively small, however, the error accumulates. I have observed a difference of around -90 dB, I expect that something similar will be observed during the testing.

------------------

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`assert(std::rint(x) == int(x + 0.5f)` fails for values such as `x = -0.7`, i.e., expected is -1, actual is 0.
I think the following would work:
```
  const auto x = arg * 0.15915494309f;
  const auto rounder = x < 0.f && int(-x * 2) % 2 == 1 ? -0.5f : 0.5f;
  return arg - int(arg * 0.15915494309f + rounder) * 6.283185307f;
```
I wonder, though, how this mistake didn't lead to greater errors in your output comparisons 🤔 Maybe now you'd have bit-exactness ? To convince myself I tried the following:
```
inline float _unwrapPhase(float arg)
{
  const auto x = arg * 0.15915494309f;
  const auto rounder = x < 0.f && int(-x * 2) % 2 == 1 ? -0.5f : 0.5f;
  return arg - int(arg * 0.15915494309f + rounder) * 6.283185307f;
}

inline float _unwrapPhaseNaive(float arg)
{
  const auto x = arg * 0.15915494309f;
  const auto rounder = 0.5f;
  return arg - int(arg * 0.15915494309f + rounder) * 6.283185307f;
}
```
and then
```
  assert(_unwrapPhase(twoPi * -0.2) == twoPi * -0.2f);
  assert(_unwrapPhase(twoPi * 0.2) == twoPi * 0.2f);
  assert(_unwrapPhase(twoPi * 0.7) == twoPi * 0.7f - twoPi);
  assert(_unwrapPhase(twoPi * -0.7) == twoPi - twoPi * 0.7f);

  assert(_unwrapPhaseNaive(twoPi * -0.2) == twoPi * -0.2f);
  assert(_unwrapPhaseNaive(twoPi * 0.2) == twoPi * 0.2f);
  assert(_unwrapPhaseNaive(twoPi * 0.7) == twoPi * 0.7f - twoPi);
  assert(_unwrapPhaseNaive(twoPi * -0.7) == twoPi - twoPi * 0.7f);
```
The last assert fails. > Maybe now you'd have bit-exactness ?

No You raise a valid point, though. I will make sure that `_unwrapPhase` satisfies the post-condition. This is **not** the same as the exact value, though; `rint` results depend on the global state of the application.  I've pushed a commit that makes `_unwrapPhase` and `_unwrapPhaseVec` to use exactly the same set of instructions > `rint` results depend on the global state of the application

Would that explain why your comparison tests only showed a -90dB difference, i.e., on your system it was doing the rounding properly ?
 I'm not sure what you mean. There are three arguments in that lambda I tried a `__mm_load_ps` in pair with `_mm_shuffle_ps` and it gives a more compact and a bit more performant code `_mm_store_ps` + `_mm_unpacklo_ps`/`_mm_unpackhi_ps` same could be here`_mm_load_ps` + `_mm_shuffle_ps`"
5305,2023-10-03T13:37:43Z,2023-10-04T19:07:01Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,106176.0,0,0,0,0,29557975.90406,,0,1,0,False,[],,,"Resolves: #5302 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5296,2023-10-02T12:18:07Z,2023-10-04T13:12:50Z,LWinterberg,0,0,1,6,1,1,1,[],,1,176095.0,0,0,0,0,29579234.466352,,0,1,1,False,[],,,"This makes multi-track (Logic, Audition, Reaper, Bitwig, Hindenburg) style soloing default, over the current simple style (Ableton).",
5306,2023-10-03T13:38:21Z,2023-10-04T13:12:14Z,Paul-Licameli,0,0,1,9,1,1,1,[],,0,84838.0,0,0,0,0,29579278.205061,,2,1,0,False,[],,,"Resolves: #1606

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
7310,2024-09-10T23:23:38Z,2024-09-11T12:31:24Z,JoeS209,2,0,5,42,1,1,1,[],37696.0,0,47266.0,0,0,0,0,-18171.537387,,0,5,0,False,"['chinakov', 'petersampsonaudacity']","Testing on W10 with @JoeS209 's latest branch build for this:  audacity-win-3.7.0-alpha-20240910+9ae3cfd-x64

I now get **NO** crash reports on editing without saving in any of the three STR use cases in #7131

1. I tested the latest use case I reported yesterday following a Forum report.  Change the temp directory to my large onboard HD D: drive, import a WAV file, Amplify it and then Exit without saving.

2. Bill's simple use case: generate silence and then exit without saving.  Tested both with temp files on the default C: drive and then switched to the HD D: drive.

3. My original use case: import 3 audio files and exit without saving. Tested both with temp files on the default C: drive and then switched to the HD D: drive.

4. I repeated test 1. but without switching the temp files to D:, leaving them on the C: default drive.

All worked fine with no crash dialogs on exit - and no recovery offered on restart and no crash reports in the appdata folder.

**Looks to be fixed to me.**

Thanks Joe for finding the time to work on this so quickly. Yes, @kryksyh - this issue seems to be fixed within this PR. ",,"Resolves: #7131

Add check for window being deleted in addition to the existing NULL check, before calling related scroll bar functions, etc.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5303,2023-10-03T11:01:07Z,2023-10-04T11:07:38Z,Paul-Licameli,1,0,1,1,1,1,1,[],9808.0,0,86794.0,0,0,0,0,29623604.202698,,1,1,0,False,['vsverchinsky'],Also fixes #5284,,"Resolves: #5253
Resolves: #5284

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5288,2023-09-29T16:49:41Z,2023-10-04T10:13:02Z,Paul-Licameli,4,5,2,65,2,2,2,[],239879.0,2,408206.0,0,0,0,0,29626880.800249,,0,2,1,False,"['saintmatthieu', 'chinakov', 'Paul-Licameli']","`std::norm` is now used instead of `std::abs` and so I made changes of variable names throughout.

The algorithm would compute the same thing using the ideal mathematical functions, but experiment showed tiny differences below -140 dB.

Besides the polar to cartesian step, the magnitudes were used in comparisons only, to identify peaks in the spectra.  So the norm, which varies monotonically with the magnitude, can be used just as well.

Then instead of polar to cartesian, the original cartesian coordinates are simply rotated in the complex plane by the difference between old and new phases.

Not only does this eliminate the many square root calculations in computing polar coordinates, but also, the norms of the side channel are not needed at all.

Observe too the elimination of an an unnecessary temporary array and the copies into it.
 Looks like a very smart way of avoiding the need of `abs`. There's yet one thing I'm unclear about that I'll add an inline comment for. This makes two things from me that I hope they take upstream
 Tried many stretching scenarios. 

Stretched and shrunk complex audio on macOS and Windows, inverted one of the tracks and mixed and rendered to a new track. Never got a bigger difference than ~-155dB in the resulting 'silence' mix. 

Thank you, ready to merge. ... nope, nothing unclear anymore, LGTM.
I would have kept the naming, and add a comment that `mag` isn't really `mag` to keep the diff smaller. But sure, there are also arguments for the renaming.
Very smart indeed.","... nope, nothing unclear anymore, LGTM.
I would have kept the naming, and add a comment that `mag` isn't really `mag` to keep the diff smaller. But sure, there are also arguments for the renaming.
Very smart indeed.","Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

QA:  Try some time stretching and shrinking examples in master and in this branch.  Do the invert and mix test and get near-zero differences.  Use the Contrast analyzer.  I don't expect exact zero, but in one example I tried, differences were less than -140 dB.

Observe speed improvement.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Hi,
What motivated this change of name? At first sight I don't like this. ""Magnitude"" was correct and usual in DSP. ... is this actually all motivated by a mathematical shortcut to avoid `abs` ? Would you care to explain ? `std::abs` uses `hypotf` which was a significant bottleneck on Windows. It was rewritten in a very straightforward way using SIMD. I haven't measured it on different compilers, so I can say for sure if this change is much needed.  Did you mean you _can't_ say for sure ? Yep, sorry. I'm just about rebasing these commits on top of my branch, but judging by the time tests take, I don't expect any significant difference."
5299,2023-10-02T15:38:49Z,2023-10-04T07:58:55Z,crsib,0,0,1,2,1,1,1,[],,1,145210.0,0,0,0,0,29634931.067358,,1,1,0,False,[],,,"Resolves: #5258 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5290,2023-09-30T15:12:42Z,2023-10-03T09:38:36Z,LWinterberg,1,0,1,4,1,1,1,[],237364.0,0,239160.0,0,0,0,0,29715350.140718,,0,1,1,False,['dozzzzer'],"TestedDunno why we need it, but it's so minor, that probably not worth discussing :-)","Dunno why we need it, but it's so minor, that probably not worth discussing :-)",just makes time tracks a little bit more versatile by default,
5294,2023-10-02T08:04:25Z,2023-10-02T15:44:24Z,Gootector,1,0,2,156,1,1,1,[],90008.0,0,90009.0,0,0,0,0,29717400.352696,,0,2,0,False,['Gootector'],@crsib Thanks for merge. One more PR: https://github.com/audacity/audacity/pull/5301. With #5301 - translation status: gold+.,,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5285,2023-09-29T13:22:04Z,2023-10-03T08:55:35Z,vsverchinsky,0,0,1,23,2,1,1,[],,0,329631.0,0,0,0,0,29717921.424249,,1,1,0,False,[],,,"Resolves: #5267

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5261,2023-09-27T10:26:02Z,2023-10-03T08:54:51Z,vsverchinsky,1,0,2,51,3,1,2,[],128574.0,0,512961.0,0,0,0,0,29717955.491853,,0,2,0,False,['vsverchinsky'],"Menu command renamed
Join command made available conditionally",,"Resolves: #5242

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5278,2023-09-28T21:38:40Z,2023-10-02T15:42:15Z,Gootector,0,0,1,2,1,1,1,[],,0,364475.0,0,0,0,0,29739685.624512,,0,1,0,False,[],,,"Fix: dot not here

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5269,2023-09-28T08:23:40Z,2023-10-01T15:10:51Z,pafri,0,0,1,1456,1,1,1,[],,0,295833.0,0,0,0,0,29856029.792884,,0,1,0,False,[],,,"I've updated my work on Audacity Czech localization file. Please commit it.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5260,2023-09-27T09:41:31Z,2023-09-29T09:42:35Z,vsverchinsky,6,0,1,73,2,1,1,[],1141.0,1,172893.0,0,0,0,0,30060700.984137,,1,1,1,False,"['LWinterberg', 'Paul-Licameli', 'chinakov']","strings look good to me Approved.  I assume this PR should be on the main board with 3.4 milestone?  I made it so.
 @vsverchinsky has mentioned that he'd like to advise someone in regards to the splitting of tracks to L-R channels, waiting for info regarding this, and then will close this ticket.

@vsverchinsky suggests that the split stereo tracks should be sent to Left and Right channels respectively on each resulting mono channel.   Yes, the resulting mono tracks should be hard panned L/R I re-approve.
 Yes, the panning works now. Thanks!",,"Problem description: user cannot open project that has stereo tracks with mismatched sample format/rate.
Solution: unlink channels, preserving rate/format for individual channel and remove the effect stack. Changes should not be applied unless project is explicitly saved by user, user should be warned about changes.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA list is similar to one in #5202, but here mismatch can be either by clip boudaries, sample rate or sample format, or any combination of them (but it will be enough to check each of them separately):
 - [x] Verify opening of a properly saved project that contains mismatches:
   - [x] Shows warning dialog with the message explaining the reason to split tracks
   - [x] Stereo wave tracks that has mismatches are split into two mono tracks
   - [x] These tracks have empty effects stack
   - [x] Splited tracks preserve their initial rate and sample format
   - [x] Other tracks are not affected (mono wave tracks, label tracks etc.)",
5276,2023-09-28T16:07:59Z,2023-09-28T21:38:01Z,Paul-Licameli,1,0,1,21,2,1,1,[],17885.0,1,19810.0,0,0,0,0,30104198.083523,,2,1,1,False,['RyanMetcalfeInt8'],Thank you @Paul-Licameli! It works now.,,"Resolves: *(direct link to the issue)*

@RyanMetcalfeInt8 needs this to rebase the AI source separation module.

QA:
nothing.  Straight to merge.  Release 3.4 will contain no calls to this new function.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5274,2023-09-28T13:44:46Z,2023-09-28T17:54:26Z,vsverchinsky,0,0,1,11,1,1,1,[],,0,14992.0,0,0,0,0,30117611.180567,,0,1,0,False,[],,,"Resolves: #5266

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5230,2023-09-22T00:47:04Z,2023-09-28T15:08:48Z,ksoze95,0,0,1,261,26,1,1,[],,0,570111.0,0,0,0,0,30127556.671486,,0,1,0,False,[],,,"Resolves: #5229

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5272,2023-09-28T11:41:37Z,2023-09-28T14:58:19Z,Paul-Licameli,0,0,1,12,1,1,1,[],,1,11807.0,0,0,0,0,30128189.962507,,2,1,0,False,[],,,"Resolves: #5244

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5215,2023-09-19T11:53:58Z,2023-09-28T13:32:58Z,LWinterberg,1,0,5,25,9,1,1,[],772346.0,1,783544.0,0,0,0,0,30133314.348051,,0,5,1,False,['chinakov'],"Tested, thanks!No changed hot keys this time
","No changed hot keys this time
","- [x] Resolves https://github.com/audacity/audacity/issues/5209
- [x] removes the last `(on/off)` string afaict
- [x] Renames Change Speed effect as per https://github.com/audacity/audacity/discussions/5248
- [x] minor string things",
5245,2023-09-26T10:42:40Z,2023-09-27T12:11:20Z,saintmatthieu,1,0,1,53,3,1,1,"['bug', 'regression', 'Music']",91122.0,2,91720.0,0,0,0,0,30224618.591719,,0,1,1,False,['chinakov'],"Tested, good to go!Lot's of whitespace changes, but to hell with that","Lot's of whitespace changes, but to hell with that","… project is started in minutes-and-second mode.

Resolves: #5235 

Please see #5235 for a detailed description.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5190,2023-09-12T13:13:57Z,2023-09-27T11:45:57Z,crsib,2,3,7,217,8,2,2,[],764737.0,1,1290723.0,0,0,0,0,30226141.064362,,0,7,0,False,['crsib'],"Spelling fixed, rebased on the latest master Two new commits added, rebased on master",,"Resolves: #5039
Resolves: #4560

This PR fixes two issues with the beat formatter:

* Formatter was unable to handle more than 998 bars (little over half an hour with 120 BPM 4/4)
* `StringToValue(ValueToString(str)) == str`

To fix the keyboard navigation when snapping time clamping was tweaked a bit: `MoveWhenAudioInactive` updates the screen boundaries, but was breaking the snapping needlessly. 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","~~fir~~ -> fit 🎄  Or some would think, finite impulse response 😄 "
5247,2023-09-26T12:35:04Z,2023-09-27T11:44:14Z,vsverchinsky,2,0,1,8,1,1,1,[],83269.0,0,83380.0,0,0,0,0,30226219.100229,,1,1,0,False,"['crsib', 'vsverchinsky']","@crsib I gues this PR can be merged without testing? I would say so, yes",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5241,2023-09-25T13:45:20Z,2023-09-26T19:59:01Z,saintmatthieu,6,0,7,6880,18,1,1,['Music'],76787.0,2,108821.0,0,0,0,0,30282964.446166,,1,7,1,False,"['dozzzzer', 'saintmatthieu', 'Paul-Licameli']","@crsib approved but I really want to take a deeper look before this gets merged.  However @dozzzzer can surely proceed to try it out to see of the small time shift is fixed.
 But what is NOT in scope of this is the experiment with higher order cosine windows that might reduce the problem of pre-echoes of transients.
 @Paul-Licameli it really only is the last two commits that bring something new, and they are simple. Maybe double-checking that I haven't omitted any commit for cherry-pick after the un-formatting commit, but that'd be it, really. A lot of whitespace changes, just so that we don't have gratuitous differences from the upstream of the library.  The modifications we made before to it are re-applied in this commit sequence.  Some of them have my name on them.
 > But what is NOT in scope of this is the experiment with higher order cosine windows that might reduce the problem of pre-echoes of transients.

It isn't part of this PR either. That was a provisional experimental state of this branch before I opened the PR. You shouldn't see a trace of this anymore. Rendering expanded/shrunk clips now indeed shows better alignment than previously, both for mono and stereo audio.

### Shrinking

#### Before (observe the rendered clip goes ahead of the pre-rendered one):

<img width=""450"" alt=""before (shrunk)"" src=""https://github.com/audacity/audacity/assets/70063970/05dc3fd8-c9e7-4499-a1b9-bccafaa87092"">

#### After:

<img width=""450"" alt=""after (shrunk)"" src=""https://github.com/audacity/audacity/assets/70063970/f28c7565-998c-4015-81bc-07ab31f7b160"">

### Expansion

#### Before (observe the rendered clip lags behind the pre-rendered one):

<img width=""450"" alt=""before (expanded)"" src=""https://github.com/audacity/audacity/assets/70063970/b61edc8d-84b4-4595-bf80-b7b98143ab8a"">

#### After:

<img width=""450"" alt=""after (expanded)"" src=""https://github.com/audacity/audacity/assets/70063970/4829b4dc-a90d-400c-a39d-5ff3f4adfd05"">

Also, as far as the ramp-up issue described in #5126, this PR also fixes this, both when stretching and shrinking:

<img width=""450"" alt=""Screenshot 2023-09-26 at 16 03 05"" src=""https://github.com/audacity/audacity/assets/70063970/d84e143c-c0d9-4aaf-b751-ba981fdbd9bc"">

Thanks, @saintmatthieu, great job!

",,"Resolves: #5206

See #5206 for a detailed description.

Please note that this PR also undoes the formatting that took place in the early integration days of the StaffPad library. This was done by copying the library again as-is and cherry-picking the few changes that followed.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Rendering of shrunk or expanded clips to a new track now shows better alignment. (Please test for both mono and stereo.)
- [x] This ticket should alleviate the problem reported in #5126, or maybe even fix it completely? Please close if that's the case.

Also please refer to the detailed description in #5206 - this may give you testing ideas.",
5251,2023-09-26T14:58:39Z,2023-09-26T18:13:25Z,RyanMetcalfeInt8,4,0,1,6,3,1,1,[],8896.0,0,12799.0,0,0,0,0,30288189.567167,,0,1,0,False,"['LWinterberg', 'RyanMetcalfeInt8', 'Paul-Licameli']","Can this skip QA? > Can this skip QA?

I think so
 > > Can this skip QA?
> 
> I think so

And, done!
 Thank you guys!",,"

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5249,2023-09-26T13:39:26Z,2023-09-26T18:22:05Z,vsverchinsky,0,0,1,12,2,1,1,[],,0,16986.0,0,0,0,0,30288757.67102,,0,1,0,False,[],,,"Resolves: #3524

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5239,2023-09-25T11:47:18Z,2023-09-26T12:53:53Z,crsib,22,8,11,451,14,3,2,[],50.0,1,90399.0,1,0,0,0,30308475.418818,,0,11,0,False,"['chinakov', 'saintmatthieu', 'crsib', 'LWinterberg', 'DavidBailes', 'Paul-Licameli']","@LWinterberg @DilsonsPickles quick design review won't hurt :-) I only skimmed this PR.

I have mentioned that the Pan and Gain sliders show a dialog when you double-click on the slider thumb and that maybe that code could be reused, but I see this didn't happen.

Maybe they should be unified, replacing that old stuff with the new dialog, if it is in some way better?
 > I have mentioned that the Pan and Gain sliders show a dialog when you double-click on the slider thumb and that maybe that code could be reused, but I see this didn't happen

In the original design, this dialog was quite a bit more complex:

1. It had ""Apply Destructively"" button, which is now a menu entry instead
2. There was a check box ""Adjust clip when changing project tempo"", but it is not a priority now. So, probably the dialog will be extended even for 3.4, if UX testing proves that this feature is important. 

I would've done it using the dialog used now, but there was some miscommunication with the design team and I have implemented the ""Apply Destructively"" button before I was told it should be done differently. Some feedback: 

* Render Clip Stretching should be greyed out when the clip isn't stretched yet
* When selecting partial or multiple stretched clips, the render option appears inoperable. In the case of multiple selected clips, I'd expect all to be rendered, in the case of a partial selection, I'd expect it to apply the stretching within the selection. As a fallback, having them greyed out when it can't apply works as well.  > When selecting partial or multiple stretched clips, the render option appears inoperable

This is the same issue as with the ""rename clip"", I'm happy to discuss it after the SU @crib. Thanks for the new commands on Audio clips submenu.
Just a few minor points:
1. In the change speed dialog, the text box doesn't have an accessibility name. Easily fixed.
In void ChangeClipSpeedDialog::PopulateOrExchange(ShuttleGui& s), just add the lines:
```
         s.Name(XO(""Clip speed""));
         s.NameSuffix(XO(""%""));
```
before the line s.TieNumericTextBox(......
(though I'm not sure whether ""%"" needs translating.)

2. In the Change speed dialog, there is no visual indication of which is the default button (and the Jaws screen reader doesn't know which button is the default). 
3. The new entries on the Audio clips submenu all need access keys.

David. Really looking forward to enjoying all this on master! If I have clips A and B one next to another, and slow-down A, I'd expect B (and all subsequent clips) to be shifted backwards if the ""Editing a clip can move other clips"" preference is checked, right? Currently I get the not-enough-room message. > I'd expect B (and all subsequent clips) to be shifted backwards if the ""Editing a clip can move other clips"" preference is checked, right?

This wasn't specified anywhere; probably you are right (@LWinterberg)

>  I'd expect it to apply the stretching within the selection. As a fallback, having them greyed out when it can't apply works as well

If you want ""Render selection"", not ""Render clip"" - I will just drop that part from the PR. I'm not sure if we will include it in 3.4 (or ever).

There was a bug in a predicate that controls menu visibility, it is corrected now. Two minor commits were added @vsverchinsky  Hi!
Trying to change a clip's speed to 200%, nothing happens. I see there's a shortcut to rename clips, I'm jealous `:P` Could we get one for speed changes, too? Not necessarily in this PR, although that'd be convenient for testing. @LWinterberg  I think you can assign the shortcut in preferences  I'm getting weird results: 

![image](https://github.com/audacity/audacity/assets/22740106/05482b63-5a13-45ad-b649-2cf29846e41f)

then press enter and the clip gets 600%: 
![image](https://github.com/audacity/audacity/assets/22740106/97fa984b-58e5-4a95-9750-33718dd94c28)
 I will take a look.  First review iteration complete. Please let me know when the speed-change not taking clip offset problem has a fix.
As for the possibility of moving clips right when expanding, I hope @LWinterberg gets back to us soon, but I won't block QA if he doesn't. Oh well, it's an easy fix, let's prevent disturbance during my pizza break :D A fix is added, rebased on the latest master unchanged otherwise Just an update on how 'Render clip stretching' works with multiple stretched clips and selection within stretched clips. 

If a User has selected multiple stretched clips, and then accesses the Clip Menu - only one of the clips will be selected. 

If a User has selected a region within a clip, but not the entire clip, the User is forbidden from pressing 'Render clip stretching'.

Hope this helps, somehow. @LWinterberg - please advise if this is fine, and this functionality can be considered to be behaving correctly.  Advised with @crsib - he has said that the acceptance criteria is fulfilled as defined. Moving [#5238](https://github.com/audacity/audacity/issues/5238) to Ready to Merge. Thanks! Checks for this MR has been completed, you can merge it! I haven't looked at the code yet but I have identified a problem while testing: https://github.com/audacity/audacity/pull/5239#issuecomment-1735004644",I haven't looked at the code yet but I have identified a problem while testing: https://github.com/audacity/audacity/pull/5239#issuecomment-1735004644,"Features implemented in this PR:

- [x] Resolves: #5196

- [x] Resolves: #5238

Bugs additionally fixed:

- [x] Resolves: #2884 

- [x] Resolves: #5236

According to the agreement with QA, these issues are addressed in a single PR, not in 4 PRs, since they are closely related.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] Undo history is correctly updated.","Thanks for catching this! I think this is the reason for the problem I found. It should be something like `interval.Begin() + (interval.End()-interval.Begin())*mOldSpeed/mSpeed;` Yes, you are totally right  `ApplyStretchRatio` has so far meant rendering time-stretching. It took me some time to realize, though, that this is not this method's intent. Please consider something else, something like `DoChangeClipSpeed` ? Reusing the `ProgressReporter` alias would be better for consistency. I haven't used it ... for consistency sake :-)

I was just copying the WaveClip interface, where ApplyStretchRatio is defined as

```c++
   /*!
    * @brief Renders the stretching of the clip (preserving duration).
    * @post GetStretchRatio() == 1
    */
   void ApplyStretchRatio(
      const std::function<void(double)>& reportProgress);
``` Thank you 😬  Oh really 😅 Well, do as you please, maybe I'll fix it up in some future PR."
5240,2023-09-25T13:35:10Z,2023-09-25T17:52:27Z,vsverchinsky,0,5,1,24,1,2,1,[],,0,15459.0,0,0,0,0,30376945.653344,,0,1,0,False,[],"NIce, thanks!","NIce, thanks!","Resolves: #5207

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Can `mTempo` possibly still be zero? Minor: To be consistent with the way `mTrackList` is obtained, I'd have opted for adding a `mViewInfo` member variable and called `ViewInfo::Get` from the outside. I don't think that this is the possible case right now, but won't harm to check that. Non-positive tempo doesn't make sense, right? Good idea Sure, I just wanted to know if you were aware of a situation where it wasn't."
5234,2023-09-22T18:42:03Z,2023-09-25T17:50:46Z,vsverchinsky,1,5,2,71,5,2,1,[],250599.0,0,256158.0,0,0,0,0,30377036.140029,,0,2,0,False,['vsverchinsky'],Rebased,,"Resolves: #5202

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","In the commit comment, fix spelling, ""aligned""
 Again, spelling in the commit comment.

Here, I think you miss the case that an old enough legacy file, with well aligned tracks, still has the legacy value of 1 which must be upgraded to `Aligned`.  Which did happen before this change.

 This, then, should become the stricter test that the new link type is None and the old was not.  Otherwise the legacy case of type 1 will warn unnecessarily.
 I think this is incomplete.

Because `SetLinkType` with argument `None` caused duplication of the effect stack into what was the right channel before it returned.

But this erases the effect stack only on one of the resulting mono tracks.
 Yes, thanks"
5214,2023-09-19T07:51:39Z,2023-09-25T14:41:38Z,vsverchinsky,4,10,2,174,5,3,1,[],103818.0,0,543036.0,0,0,0,0,30388384.794601,,0,2,0,False,"['vsverchinsky', 'Paul-Licameli']","Still I would like to see the test moved to WaveTrackUtils.cpp if you need to reuse it in another commit.

This commit does not fully implement the idea in issue #5203.  To do that, something like the deleted lines would need to be restored as an alternative path to doing `MixAndRender`.

However this pull request does eliminate a call to `MakeMultiChannelTrack` which is what I want to see at this stage of refactoring.  Some other, not yet implemented method of a future wide `WaveTrack` must be invented for this future enhancement.
 Dialog text change > Dialog text change

I see and reapprove
 RebasedThis looks substantially correct.  Let's move it along to testing.  But please remember:
- Comment in MixAndRender.h
- Change the string as Leo specified
","This looks substantially correct.  Let's move it along to testing.  But please remember:
- Comment in MixAndRender.h
- Change the string as Leo specified
","Resolves: #5200

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I would change the order of the terms of `||` and put ""`"" characters around it so that it can really be cut and pasted unchanged as an assertion expression at the top of the function definition.
 The header comment could explain the behavior of this case This extra checking and the message are not specified in the Issue.  Did designers specify it?

I would write ""be"" not ""get"" twice on this line.  Also, are the embedded newlines really needed, or does the text wrap?

@LWinterberg 
 You rely on `MixAndRender` using instead the minimum start and maximum end times of the range, when it is given an empty interval of times.

I had forgot that behavior and stepped in the debugger to convince myself this call works.

The header file for `MixAndRender` should comment this behavior.
 Why are the tests for sameness of rate and format removed?
 I think it was implied that these checks are not needed any more
![изображение](https://github.com/audacity/audacity/assets/20165230/e6c88220-3313-498d-8870-5b2641155d8e)
 This big lambda that decides whether to query before proceeding might need reuse elsewhere, when we fix opening of 3.3 files or importing of 2.x files.

It might move to the recently added WaveTrackUtilities.cpp I put out a message in https://www.figma.com/file/YiOF6yUQS466Fob7bD0vaW/21_WX---Modals?type=design&node-id=2-5&mode=design yes. 

I agree that be is better than get here and I think we can clarify further: 

`""This causes any realtime effects to be applied to the waveform and hidden data to be removed. Additionally, the entire track will become one large clip.""` We're doing a destructive mix and render which resamples on the way anyway, don't we? Yes.

The past work to disallow mismatched rates or formats was not wasted because other deduplicarion in the data structures was the important accomplishment in those PRs."
5193,2023-09-13T13:43:41Z,2023-09-25T14:39:46Z,vsverchinsky,9,30,20,1176,30,2,0,[],439006.0,0,1040214.0,0,0,0,0,30388487.85355,,0,20,0,False,"['vsverchinsky', 'Paul-Licameli']","Windows build errors:
`D:\a\audacity\audacity\src\import\ImportRaw.cpp(224,1): error C2440: 'initializing': cannot convert from 'int' to 'size_t &' [D:\a\audacity\audacity\.build.x32\src\Audacity.vcxproj]`
`D:\a\audacity\audacity\src\import\ImportRaw.cpp(229,1): error C2440: 'initializing': cannot convert from 'int' to 'size_t &' [D:\a\audacity\audacity\.build.x32\src\Audacity.vcxproj]`
`D:\a\audacity\audacity\src\import\ImportRaw.cpp(221,26): error C2664: 'void ImportUtils::ForEachChannel(TrackList &,const std::function<void (WaveChannel &)> &)': cannot convert argument 2 from 'ImportRaw::<lambda_cd67ecb3f9410bfd47f9bd99446097e3>' to 'const std::function<void (WaveChannel &)> &' [D:\a\audacity\audacity\.build.x32\src\Audacity.vcxproj]`
 Finished a round of review
 I would also like to see a rebase that squashes my last two commits as fixups on earlier ones.

""Fix Windows Build"" fixes ""Eliminate `ImportUtils::MakeTracks`""

""Fix recording into stereo"" fixes ""Don't assume correspondence of channels and RecordableSequences""
 All the builds are failing Rebased onto fixed master Please rebase and reword one of my commit comments
""RecordableSequences are really wide and correspond with channels""
Should say channel groups, not channels
 OGG Import crash fix & rebase  Attempted to fix recording to stereo fix Rebased",,"Resolves: #5180

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I might say ""channels"" not ""tracks"" in this name
 If you rebase onto my fixup commit https://discord.com/channels/@me/840616766099161088/1151545897302360105, and resolve the conflict, then you will understand that the `push_back` above should be pulled out of the loop.  `captureSequences` must contain leader tracks only, and each one only once.  Then test that recording to stereo tracks still works.
 That completes review of this one commit of the draft.
 Indent That should be `track->GetName()` Just to make no assumptions about the continued validity of the old track pointer Your commit comment suggest that you think this is redundant. I think you are right after all.  I overlooked other details.  But the extra insurance is harmless. Thank you for making me look up this standard algorithm and refresh my memory of it. Ah, overlooked that merge conflict, thanks! Keep this TODO comment please, to remind me later to remove the line below
 Still unresolved -- don't use `mpData->pTrack` after `SwapChannels` but use `track`
 return what?
 Very good:  we start to eliminate `MakeMultiChannelTrack` except as an implementation detail of Track.cpp.

I would declare a variable to eliminate repetition of `*tracks.rbegin()`
 You copy-pasted an old mistake in the words of the comment.  Should be ""new"" not ""changed""
 I made a mistake here at 03c68afc55b2020b0e8086aa288090b4e5ea8ca2, neglecting the provisions for more than two channels (maybe in future).

Correct my mistake.  Change the condition back to
`if (baseTrackName.empty())`
 The comment before this deletion should be deleted too now
 You did what I asked, removing this and instead creating a ""wide"" track (as a TrackList) through the factory.

But now I see that this makes an unintended change of behavior.  The call of `WaveTrack::Init()` in `EmptyCopy` doesn't happen, and so certain information of `first` is no longer copied into the new track -- things such as the color, and whatever else in future might be attached to the `ChannelGroup` client data site.

So the new `Create` function should take `first` as another argument, which could default to nullptr, and from which it copies information as in `EmptyCopy`.

Or instead of that -- I think it's nicer -- add `std::optional<size_t> oNChannels = {}` as an argument in `EmptyCopy` and call that.

 This no longer needs to be a loop.  Just do this once on `mix`.
 In the present transitional state of the source tree, this needs to be `ReallyGetChannelIndex`, I think Duplicate these comments before the overload defined above.
 Duplicate this assertion in a `@pre` comment.
 Don't delete the comment!
 Move the `MonoToStereo` call after the `reset`, consisntently with the comment.

Did you hit a breakpoint here in the debugger?  I think you need to do what I wrote to avoid putting the `TrackList` objects into an inconsistent state.
 It should also be asserted, and commented with `@pre`, that `this` has null for `GetOwner()`.
 ""Builds a WaveTrack and places"" ""Flushes"" and ""moves"", consistent verb forms
 ditto
 Why do you make bounds checks on this unsigned index variable only in ImportFFmpeg.cpp but not in the other place that use `ForEachChannel`?  Should there be checks in the other places?
 You are right, the problem is that `WaveTrack::Duplicate` copies both channels into new list, but we need only left Then `//! @pre !GetOwner()` only is enough precondition as it implies that `NChannels() == 1`"
5225,2023-09-21T09:30:07Z,2023-09-25T11:24:28Z,crsib,1,12,1,98,9,3,2,[],3464.0,1,352464.0,1,0,0,0,30400254.327245,,0,1,0,False,['crsib'],"Cosmetics are addressed @saintmatthieu In any case, please use your .clang-format for the new code.
I think moving that new `protected` method to an anonymous namespace is worthwhile trying out, too.
As for the comment about the simpler flow, there I'm much less certain, and would like to hear your thoughts.
Otherwise I tested the behaviour. LGTM just from user experience, but it'd be interesting to check early with @LWinterberg .","In any case, please use your .clang-format for the new code.
I think moving that new `protected` method to an anonymous namespace is worthwhile trying out, too.
As for the comment about the simpler flow, there I'm much less certain, and would like to hear your thoughts.
Otherwise I tested the behaviour. LGTM just from user experience, but it'd be interesting to check early with @LWinterberg .","Resolves: #5195

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","trailing whitespaces on line 30 This method is only used in AffordanceHandle.cpp and AFAICS doesn't refer to member variables. If that's correct it'd be better in an anonymous namespace. trailing whitespaces here too three-space indent - what's your .clang-format doing ?? :D I see that this is called from `WaveChannelSubView::GetMenuItems` when clicking the body of a clip, and from `WaveTrackAffordanceControls` when clicking the header of a clip. I wonder if there isn't a way of achieving a simpler flow where whether body or header is clicked, the same code is executed, only with an additional step toto select all clip if the header is hit ? Nothing, I used Xcode Unfortunately, they are separate, unrelated objects. I want to keep this PR as simple as possible; I don't see much point in complicating stuff here FWTIW this code won't survive the replatforming It seems that it is no longer needed indeed. I used it when I was trying to get stuff to work I will move it to `private` then, it still improves readability quite a bit. The method does refer to `this` ok Oh, didn't notice. Please check if it could be const, too."
5042,2023-08-15T16:28:42Z,2023-09-25T07:17:28Z,saintmatthieu,13,30,1,539,6,2,0,['Music'],146204.0,2,3509327.0,0,0,0,0,30415079.214435,,1,1,1,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","This morning I came to remember maybe my very first experience of Audacity. It was at the National University of Ireland, Maynooth, in the computer music introductory module. I remember the lecturer saying ""and you can even draw the samples with the pencil"". I must have been impressed to still remember it - it was in 2005-2006. Great educational tool. @rbdannenberg @Paul-Licameli  > This morning I came to remember maybe my very first experience of Audacity. It was at the National University of Ireland, Maynooth, in the computer music introductory module. I remember the lecturer saying ""and you can even draw the samples with the pencil"". I must have been impressed to still remember it - it was in 2005-2006. Great educational tool. @rbdannenberg @Paul-Licameli

Would you believe I hadn’t heard of, less used it, before December 2012? @Paul-Licameli just pushed [05c4f37](https://github.com/audacity/audacity/pull/5042/commits/05c4f37a53ec2ebe42ddfbfd2b478d4cd1e6eb01), addressing all your comments. `GetSamples` (not a new function) should also comment that `start` is relative to play start
`GetFloatAtTime` should comment that `t` is relative to play start
 Done with this round of review!

I await a rebase onto #5138 and conflict resolution.
 @Paul-Licameli finished addressing your comments. Finished this review round
 I was wrong about the first use: if `t` is past the end boundary of the clip, `effectiveEnd` can indeed be greater than `effectiveStart`. I couldn't reproduce this situation by trying even drag-drawing across several minuscule clips, but changing the value of `t` in the debugger showed it was possible. Thank you. Will push a safety check. Unit-testing would have been useful to find out I was wrong earlier. I see and approve the latest three commits.  Correct spelling of ""rectangle"" in the last commit comment.

But there are conflicts with master.
 Thanks for the speedy review. Tested.
Found issues: #5231 
Also, I've discovered that when using the Pencil tool on adjacent clips, then stretching them and mixing and rendering the track, it produces a waveform that looks different from the pre-mixed-and-rendered state:


https://github.com/audacity/audacity/assets/70063970/ef7b7985-c065-4685-aefb-114d07f5c879


https://github.com/audacity/audacity/assets/70063970/5bea899e-e5bd-4690-aa6f-540e658fea20


https://github.com/audacity/audacity/assets/70063970/b7988d7e-1cc1-494a-9439-919869604cb0


In some cases, it looks like it simply gets inverted, while the other examples don't quite look like it. Despite this mismatch doesn't look particularly good to me, this might be insignificant and I reckon should not delay the merge.

 I agree that the rendering doesn't look great. There are two upcoming fixes that could improve this: a more accurate delay estimation #5206, and solving the indeterministic behaviour you found #5210.
But I'm confident that this limitation isn't related to drawing. Drawing modifies the samples as expected. Only the rendering of the result isn't necessarily as expected :D",,"Resolves: #4850

This PR repairs drawing operations on stretched clips.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

## QA
- [x] editing one sample at a time by clicking with pencil,
- [x] editing many samples by dragging pencil across clips, some stretched, others not, some mono, others stereo.
- [x] same exercise with brush tool (select pencil then press alt)
- [x] trying to draw samples when individual samples are not visible (because zoomed out) issues the usual error message.
- [x] (Paul) test all in the pencil tool mode and again in multi-tool mode
- [x] (Paul) hit-testing on samples in multi tool with nontrivial envelope (this doesn’t work quite right in last release, but be sure it is not worse)
- [x] (Paul) include paintbrush cases where there is hidden smart clip data, and where clips (maybe with hidden data, maybe with different stretches) are touching or nearly touching
- [x] (Paul) I think we're also fixing an old misbehavior:  click and drag with the pencil sometimes did nothing but made a vacuous undo/redo item
- [x] (Paul) also remember (I had forgot!) that a drag with Ctrl key down adjusts only one pixel
- [x] Clicking or dragging edits nearest sample (not previous or next - nearest)
- [x] Drag-drawing on a clip's rectangle (not out-of-bound) always updates the nearest sample, not just when the pencil crosses its x-location
- [x] Works as well for stereo

","“Access” “Rules” Please comment that the new setting functions will succeed with out-of-bounds requests, only changing what is in bounds.
 Is this description really what we want?

To be REALLY strictly conservative of program behavior, in the case of not time stretching, it's possible two clips were separated by a tiny gap of one or two sample intervals, but the paint brush might affect both.

And maybe nobody in the history of Audacity actually ever did this.
 `backward` seems surprising as the default value.  But you never call it with the default.
 ditto, default argument
 This function is used in two places, and this change, while avoiding that pop-up when you click between clips, also will change the hit test to return a handle in the case that it did not do so before.

Does clicking and dragging in the empty space between clips make any vacuous undo/redo items?
 Aha, I tried the build.  Yes it does!

So instead the hit testing function should also be changed to return null when there is no clip.
 Actually... that's an old defect, which you might fix.

I just tried released Audacity.  When the magnification does show samples, but you click and drag outside of a clip, still you do get a bogus undo/redo item.
 Actually an old problem, and I was confused about something.  `HitTest` only happens with the * tool button.  With the pencil tool button, you can click anywhere and it has always been like that.

 `SampleHandle::HitAnywhere` is also used in WaveformView.cpp in this case.
 I think that's not the right issue number
 Omitting You need more comments to clarify:

When direction is backward, the buffer of given samples is not reversed, and `t` rounds to the time of the clip sample corresponding to the past-the-end position.
 Clarify that the resulting samples are not reversed when direction is backward.
 Now that clips can be stretched, we have to choose between constant time or constant sample-count brush radius. The approach I took is the latter. But then, samples of a clip 10 seconds away should not be taken into account. So I went for the simple rule that they have to touch each other, or nothing happens.
I also reckon we won't run into trouble because of this subtle change of behaviour. Right, makes no particular sense - removed it (and moved this method to `private`). > Actually... that's an old defect, which you might fix.

Each time `SampleHandle::Release` is called (when letting go of the mouse with pencil tool activated), a history item is pushed. The easiest solution to this I can think of would be to create a `bool mSampleMoved`, whose value is set to true whenever a sample is modified, checked when releasing, and then set to false again. That'd be something totally new, and not completely trivial to review.
 Moved those to `private` and made comments a bit more precise. ""excluding""
 As always, I see `as_size_t` and think, what's the proof of satsifaction of the assertion?

Here, ""it's easy to prove that the expression is bounded by numFloats"".  So just say that in a comment.
 likewise
 Please comment in the header that the function may rewrite only a subrange of `[buffer, buffer + nFloats)`, leaving unchanged the buffer positions not corresponding to part of the clip play region.
 Please comment that `[buffer, buffer + 2 * numSizeSamples + 1)` is assumed to be a valid span of addresses, and likewise that only a subrange may be overwritten.

In other words zero-filling is not promised for the rest.
 ""effective""
 `WaveClip::SnapToSample` analogous to the `WideSampleSequence` member function might be nice
 I might simplify all that with 
`#include <type_traits>`
and
`template<typename T> using BufferCharType =
   std::conditional_t<std::is_const_v<std::remove_pointer_t<T>>, constSamplePtr, samplePtr>;`
 I think the template argument can be omitted, nicely deduced from arguments here too
 `GetSamples` (not a new function) should also comment that `start` is relative to play start
`GetFloatAtTime` should comment that `t` is relative to play start
"
5228,2023-09-21T23:05:12Z,2023-09-22T11:59:53Z,Paul-Licameli,6,1,1,4,1,2,1,['bug'],37329.0,1,253520.0,0,0,0,0,30450298.445977,,0,1,1,False,"['crsib', 'Paul-Licameli']","Straight to merge?

What symptoms could have been fixed?

Maybe incorrect progress bar update during upload. Straight to merge. I think nothing has changed, `memory_order_release` is not zero > Straight to merge. I think nothing has changed, `memory_order_release` is not zero

We don't know whether `memory_order_release` might be zero in some other standard library implementation, and besides one of these is `std::atomic<double>` in which some unchanging converted integer was always stored.
 The error would not have compiled if `std::memory_order` had been an enum class... oh well.

Use strong typing when you can to help the compiler help you!
 I think it is in c++20 > I think it is in c++20

Indeed",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",🙈 
5213,2023-09-19T04:03:23Z,2023-09-22T13:13:50Z,saintmatthieu,7,8,2,132,5,3,1,[],50729.0,2,292227.0,1,0,0,0,30652902.975614,,1,2,1,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","There was agreement during stand-up that this could be part of a follow-up, 3.x ticket. I think there is envy to get rid of this strange vertical line and the associated behaviour, but making it up for in the clip menu is considered not so important UX-wise.
I'll spend some time-boxed time tomorrow to experiment and see how much more work that would entail. If not much, I'll make it part of this PR. Else, I'll create a follow-up ticket. Good, the cutline actions are restored.

You can simplify CutlineHandle further by removing `Merge` from `enum Operation`.
 Still this pull request is incomplete for addressing the issue description, and I'm not sure I understand the implications for drawing.
 Follow-up issue: #5221 > Follow-up issue: #5221

Then the description of the issue linked to this PR should be edited to remove mention of context menus.
 I see the new commit, it's ok
 TestedIsn't this PR also supposed to
> put the option to merge clips in a context menu (""Join Clips"") instead

? I disapprove for several reasons, to follow. No reason to block this.  I hope you rebase and squash to one commit.  Also, I repeat:

You can simplify CutlineHandle further by removing Merge from enum Operation.","Isn't this PR also supposed to
> put the option to merge clips in a context menu (""Join Clips"") instead

? I disapprove for several reasons, to follow. No reason to block this.  I hope you rebase and squash to one commit.  Also, I repeat:

You can simplify CutlineHandle further by removing Merge from enum Operation.","Resolves: #2330

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Does this PR fix https://github.com/audacity/audacity/issues/2263 ? If so, please close.
- [x] Bold vertical line between adjacent clips is not visible anymore, whether at sample-zoom level or not.
- [x] Clicking at junction of adjacent clips doesn't merge them anymore.
- [x] `Edit > Audio Clips > Join` still works (not with stretched clips, though - will be fixed by #5043
- [x] Cutlines still work
","There are changes to WaveTrackLocations and the drawing of clip edges.  The bold lines will not be drawn when magnification resolves samples — I understand that this is wanted, from the issue description.   But drawing will change at lesser magnifications too.  I don’t think this was specified.
 If the issue is ever fully satisfied (and it is not in this PR), then the merging of clips will still be available as a context menu command, and I think you will still need what is deleted here. This eliminates the left click action to expand cut lines, but that was not in the scope of the issue. Suppress drawing of clip edges only at close magnifications. Ouch - thanks. I don't understand. The only remaining possibility is for `loc.typ` to equal `WaveTrackLocation::locationCutLine`, and the remaining code is what was executed in that situation. This is a member function of `CutlineHandle`. The functionality, when presented over the clip menu, will live someplace else. And since it is of the simple sort, I opted for not leaving dead code behind. I thought there was an agreement that there should remain nothing of merge lines anymore. The track panel looks good without them at lower magnification. Maybe I don't understand your concern."
5217,2023-09-19T18:10:57Z,2023-09-22T10:56:48Z,Paul-Licameli,0,0,1,30,2,1,1,[],,0,233155.0,0,0,0,0,30661123.154048,,2,1,0,False,[],Much smaller change than I expected judging by the problematic commit. Awesome!,Much smaller change than I expected judging by the problematic commit. Awesome!,"... Regression happened at cfbd0b06

Resolves: #4995

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5197,2023-09-15T09:46:00Z,2023-09-21T06:26:35Z,Gootector,1,0,2,24,1,1,1,[],466931.0,0,506435.0,0,0,0,0,30763742.505614,,0,2,0,False,['Gootector'],@LWinterberg Could you merge my PR? Thanks.,,"Update Polish from Transifex
'Sync-Lock(ed)' fix.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5212,2023-09-18T18:26:07Z,2023-09-20T12:58:31Z,Paul-Licameli,2,0,1,26,1,1,1,['refactoring'],146557.0,2,153148.0,0,0,0,0,30826624.803009,,0,1,1,False,"['chinakov', 'Paul-Licameli']","Tested, the Compressed/Uncompressed AUP files from 2.4.2 open accordingly in 3, with the tracks still misaligned, but silence insterted to make both 'clips' aligned. 

<img width=""1185"" alt=""Screenshot 2023-09-20 at 14 08 23"" src=""https://github.com/audacity/audacity/assets/139755141/a9dde0d1-99b8-42fc-874d-93831d47dac6"">


Track height is reset if the project is open in 3.4.

 > Tested, the Compressed/Uncompressed AUP files from 2.4.2 open accordingly in 3, with the tracks still misaligned, but silence insterted to make both 'clips' aligned.
> <img alt=""Screenshot 2023-09-20 at 14 08 23"" width=""1185"" src=""https://user-images.githubusercontent.com/139755141/269263226-a9dde0d1-99b8-42fc-874d-93831d47dac6.png"">
> 
> Track height is reset if the project is open in 3.4.

In other words, it's not real clip misalignment.  Clip boundaries agree across channels.
",,"... This function only restored track properties that are now all de-duplicated and never varied independently between channels -- with one unimportant exception -- so visiting leader tracks only is all we need.

The exception is that wave channel view heights might vary independently. But experiment with 2.4.2 shows that wave channel view height differences were lost anyway when File > Save Lossless Copy or Save Compressed Copy commands were used.

Only files saved with those commands can cause this function to be visited when importing into 3.4.

Resolves: *(direct link to the issue)*

QA: First follow steps in #5211.  (This PR is NOT the fix for that issue.)
Then verify that opening the compressed and lossless 2.4.2 projects still makes good 3.4 projects.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4494,2023-04-05T10:26:06Z,2023-09-20T11:04:46Z,SteveDaulton,6,7,14,1615,25,2,1,[],13312442.0,1,14517521.0,0,0,0,0,30833455.170942,,1,14,1,False,"['chinakov', 'SteveDaulton', 'petersampsonaudacity', 'dozzzzer']","@SteveDaulton please rebase this branch onto `master` @dozzzzer  

@SteveDaulton Steve is offline for a couple of weeks with no access to GitHub - he says he'll deal with it when he gets back home I have recieved a list of all the .ny plugins that are affected by changes within this task. 
I will go through each one of them separately and verify that nothing got broken. 

![image](https://github.com/audacity/audacity/assets/139755141/95b7db74-bb7b-43d6-b840-a8f887e55769)
 Added checklist.  Tested all of the .ny plug-ins in the list, no issues noticed, checked on Windows 11 22H2, stereo and mono tracks where applicable.  > @SteveDaulton please rebase this branch onto `master`

Why does it require rebasing? GitHub says that there's no conflicts, so can't you just squash and merge?
I went through this and saw the promised style changes. I also saw some workarounds removed only relevant for old versions and some reshuffling of where things are declared.

What I don't understand is why some functions gain or lose arguments, seemingly out of the blue. I've marked some instances of that in the comments. I'm obviously no lisp developer, so I'm curious why that is.","I went through this and saw the promised style changes. I also saw some workarounds removed only relevant for old versions and some reshuffling of where things are declared.

What I don't understand is why some functions gain or lose arguments, seemingly out of the blue. I've marked some instances of that in the comments. I'm obviously no lisp developer, so I'm curious why that is.","Resolves: #4438

*(Upper case widget ""constants"")*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior

What should be tested:

- [x] ShelfFilter
- [x] SpectralEditParametricEQ
- [x] SpectralEditShelves
- [x] Adjustable-fade
- [x] Beat
- [x] Clipfix
- [x] Crossfadetracks
- [x] Delay
- [x] Eq-xml-to-txt-converter
- [x] Equalabel
- [x] Highpass
- [x] label-sounds
- [x] Limiter
- [x] Lowpass
- [x] Noisegate
- [x] Notch
- [x] Niquist-plug-in-installer
- [x] Pluck
- [x] Rhythmtrack
- [x] RIssetdrum
- [x] Sample-data-export
- [x] Sample-data-import
- [x] Tremolo
- [x] Vocalrediso
- [x] Vocoder
","why can `filename` be omitted here? Why can these arguments now be omitted? Why does this one gain arguments? (Nyquist is case insensitive)

> why can `filename` be omitted here?

Because `FILENAME` (previously `filename`) is a global variable, so can be read directly from the global scope. It is not being modified anywhere, so we are correctly treating it as a global constant, as indicated by the capitalisation of the name.

Previously, `filename` within the function `sound-from-file` redefined the variable name from the outer scope as a variable with local scope. This is generally considered bad practice as it can be unclear that `filename` within the  function is a different variable than `filename` from the outer scope. In the new code, it is explicit that we are using  `FILENAME` as a global constant. > Why does this one gain arguments?

The function `make-labels` was previously defined as: `(defun make-labels (&aux labels)`
The `&aux labels`  parameter defines an auxiliary variable that is local within the function.

`num-before-text` was previously defined with global scope in the line:
```
(setf num-before-text (<= zeros 3))
```
It is generally better to avoid global variables unless absolutely necessary (as is the case with `;control` lines).
By passing `num-before-text` as an argument, we maintain encapsulation rather than littering the code unnecessarily with globals.

In the case of `zeropad`, it was even worse as not only were we previously using `zeros` with global scope, but we were also modifying it within the function `make-one-label`. In the new version, we explicitly pass the value of `zeropad` and maintain encapsulation, which not only improves readability, but is also a lot safer. > Why can these arguments now be omitted?

Because the function `crossfade` does not need them.
`TYPE`, `DIRECTION` and `CURVE` are all global variables. They have to be global because they are defined by the controls:
```
$control TYPE (_ ""Fade TYPE"") choice (
    (""ConstantGain"" (_ ""Constant Gain""))
    (""ConstantPower1"" (_ ""Constant Power 1""))
    (""ConstantPower2"" (_ ""Constant Power 2""))
    (""CustomCurve"" (_ ""Custom Curve""))) 0
$control CURVE (_ ""Custom curve"") real """" 0 0 1
$control DIRECTION (_ ""Fade direction"") choice (
    (_ ""Automatic"")
    (""OutIn"" (_ ""Alternating Out / In""))
    (""InOut"" (_ ""Alternating In / Out""))) 0
```

The point of this pull request is that since we **must** use global variables in Nyquist plug-ins that have controls, then it is safer and more readable to implement a convention where we treat them as global constants, and mark them as such by using upper case. thanks for the explanations!"
4928,2023-07-19T11:34:36Z,2023-09-20T10:33:29Z,ksoze95,0,8,1,1590,30,1,1,[],,0,5439538.0,0,0,0,0,30835330.503454,,1,1,0,False,[],I have concerns about the approach used to create toolbars,I have concerns about the approach used to create toolbars,"Resolves: #4927

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think we tend to define functions in `.cpp` files (at least I'n constantly asked to move them to cpp :) ), also please use `std::move` on `QString` parameters passed by value `const QString&` `std::move` `const QString&` `const QString&` ~~`virtual`~~ `override` Is it OK to have two `ApplicationWindow` instances within same hierarchy? I have a very strong feeling that things should not be like that. Toolbar model provides all neccessary data to create controls in the layout using factory method.  Also I'm almost sure that workspace configuration should be remembered, instead of being hardcoded."
5204,2023-09-16T18:06:02Z,2023-09-19T11:21:31Z,dofuuz,7,0,2,1494,2,1,1,[],153337.0,0,317076.0,0,0,0,0,30836708.718743,,0,2,1,False,"['LWinterberg', 'dofuuz', 'Paul-Licameli']","Pleased to see you contributing again!

Who originated the name Roseus?
 Maybe before and after comparisons, selected and unselected, of exponentially decaying level tones would make the differences clear across the whole palette.  An easy way to make such is with the ""Pluck"" generator.

 @LWinterberg did you notice the string change too, the name ""Roseus""
 yes, and it is clarified for translators as well.  I named the colormap Roseus after popular colormap [Viridis](https://sjmgarnier.github.io/viridis/). (Viridis is default colormap of [Matplotlib](https://matplotlib.org/).)
Viridis is a Latin word means green, young. Roseus is a Latin word means pink, rosy.

If you have opinion about the name, it's last chance to change it! Actually, I'm not sure about how it feels in western culture. Nice! I'll look forward to 3.4 release! > Actually, I'm not sure about how it feels in western culture.

It's hard to go wrong naming a thing something latin, unless you want to convince someone that [*disco* has something to do with learning](https://latin-dictionary.net/search/latin/disco) :) Here's a pluck - ![image](https://github.com/audacity/audacity/assets/87814144/c09f5206-1562-40b3-aac8-8d8987611ef0)
and here the old/current pluck - 
![image](https://github.com/audacity/audacity/assets/87814144/6973f179-59e8-4245-8c8d-52307281918a)


The selected color is less green than before, which IMHO is a big plus, even if the rest of the changes are subtle compared to the previous version

![image](https://github.com/audacity/audacity/assets/87814144/1e60065f-7495-4840-b0b5-5b0653d77c45)

Overall this has my blessing, thanks dofuuz!
","Here's a pluck - ![image](https://github.com/audacity/audacity/assets/87814144/c09f5206-1562-40b3-aac8-8d8987611ef0)
and here the old/current pluck - 
![image](https://github.com/audacity/audacity/assets/87814144/6973f179-59e8-4245-8c8d-52307281918a)


The selected color is less green than before, which IMHO is a big plus, even if the rest of the changes are subtle compared to the previous version

![image](https://github.com/audacity/audacity/assets/87814144/1e60065f-7495-4840-b0b5-5b0653d77c45)

Overall this has my blessing, thanks dofuuz!
","Previous PR: #830 (merged)

I made some improvement to the color scheme of spectrogram.
Details: https://github.com/dofuuz/roseus

![audacity-roseus](https://github.com/audacity/audacity/assets/8174871/5076dec1-0f7b-49c0-beac-1f5be3af20a5)
↑ To-be
[As-is for comparison](https://github.com/audacity/audacity/assets/8174871/f3aca440-b91e-42c2-ad66-d42337c98393)

- It was perceptually smooth, but wasn't perceptually uniform. Now it is.
- The colormap is named 'Roseus'. (inspiration from Viridis)

Further readings about perceptually uniform colormaps:
https://bids.github.io/colormap/
https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html

TL;DR: The wrinkles in the color scheme were ironed out.

----
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5177,2023-09-09T13:32:39Z,2023-09-19T16:22:08Z,Paul-Licameli,0,0,1,5,1,1,1,[],,1,874173.0,0,0,0,0,30900816.925195,,0,1,0,False,[],,,"Resolves: #5176

Depends on:
- #5138

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4894,2023-07-10T17:38:07Z,2023-09-19T13:03:22Z,LWinterberg,2,0,1,2,1,1,1,[],60240.0,0,6118036.0,0,0,0,0,30912628.307031,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @LWinterberg 's latest branch build:   audacity-win-3.4.0-alpha-20230710+0db5d81-x64

This fix works fine on Leo's latest branch:
![image](https://github.com/audacity/audacity/assets/50205984/e78f7d48-335b-4b13-9d3f-d05b4de2de0a) This hardly needs a code review - it is a trivial string change:
![image](https://github.com/audacity/audacity/assets/50205984/e6643cab-0386-4602-b585-b878bba5ee3b)

_Whilst I have the privileges to review this, I don't feel I have the authority to do so ..._",,"Resolves: #4889
",
5205,2023-09-18T09:56:57Z,2023-09-19T12:25:39Z,crsib,3,6,2,45,2,3,1,[],3712.0,1,95339.0,0,0,0,0,30914997.793144,,0,2,0,False,"['crsib', 'Paul-Licameli']","I approved it.  I think you can just squash all as one commit.
 There is a conflict to resolve with master, but it will be easy
 PR was rebased, and the two last commits were squashed.",,"Resolves: #4954 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","You don't need this function.  Instead use `End` inherited from `ChannelGroupInterval`. `ChannelGroupInterval::mStart` and `ChannelGroupInterval::mEnd` are immutable, whereas `WaveClip::GetPlayStartTime` and `WaveClip::GetPlayEndTime` always return actual clip borders, though the difference may not be relevant in this particular PR I've addressed it in a way @Paul-Licameli suggested, but that can be undone easily. This works.

Maybe `WaveTrack::Interval` should instead implement `WideSampleSequence` and reduce that to a single call.

Not in this PR.
 Yes `mStart` and `mEnd` are immutable, but now I dislike that choice I made and may change it so that a virtual function reports start and end.

That is what bothers me when I consider #5159 which I have not approved yet but isn't actually critical for release now.

For the short-lived usage of intervals in Disjoin, it doesn't matter.
 > That is what bothers me when I consider https://github.com/audacity/audacity/issues/5159

I think Vitaly has addressed the issue you asked. It would be great if that PR is reviewed, not thrown away. "
5165,2023-09-07T16:07:42Z,2023-09-18T12:11:46Z,vsverchinsky,5,2,1,153,5,1,1,[],438438.0,2,936313.0,1,0,0,0,31002181.157597,,0,1,1,False,"['chinakov', 'vsverchinsky', 'Paul-Licameli']","I reviewed the rest of it, and have nothing more to comment about, except this:

You store `ChannelIterator` objects, and those have plain C-pointers to `GroupType` in them.  But I don't think there is anything in the contracts of these classes giving good enough lifetime guarantees against that becoming a dangling pointer.

I think nothing wrong will happen and I have no specific rewrite to insist that you do, but it bothers my mind a little.
 So, consider this round of review complete, with just one easy request for changes.
 > I reviewed the rest of it, and have nothing more to comment about, except this:
> 
> You store `ChannelIterator` objects, and those have plain C-pointers to `GroupType` in them. But I don't think there is anything in the contracts of these classes giving good enough lifetime guarantees against that becoming a dangling pointer.
> 
> I think nothing wrong will happen and I have no specific rewrite to insist that you do, but it bothers my mind a little.

Alternatively I could use indices > > I reviewed the rest of it, and have nothing more to comment about, except this:
> > You store `ChannelIterator` objects, and those have plain C-pointers to `GroupType` in them. But I don't think there is anything in the contracts of these classes giving good enough lifetime guarantees against that becoming a dangling pointer.
> > I think nothing wrong will happen and I have no specific rewrite to insist that you do, but it bothers my mind a little.
> 
> Alternatively I could use indices

Maybe, but I will approve it now.
 Tested Fixing the `GetClip` is a minimum to complete this refactoring task.

It should be done easily.  But my review isn't complete yet.
 I approve, conditional on successful CI
","Fixing the `GetClip` is a minimum to complete this refactoring task.

It should be done easily.  But my review isn't complete yet.
 I approve, conditional on successful CI
","Resolves: #5076 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Indentation
 I want only constant `0` as an argument of `GetClip` and later I will remove the argument.

But the outer `if` justifies `assert(GetChannelIndex() == 0);` because, as you can comment,
`// Only left or mono channels show affordances`

So write that assertion, then change the argument of `GetClip`.

Actually `GetChannelIndex()` still always returns 0, unlike `ReallyGetChannelIndex`

The problem of unifying those two functions (keeping the name of the first, and the behavior of the second) is another box on my checklist for later.

"
5091,2023-08-25T15:53:15Z,2023-09-18T12:10:19Z,vsverchinsky,2,19,6,556,7,2,1,[],1100812.0,2,2060277.0,1,0,0,0,31002286.76741,,1,6,0,False,"['chinakov', 'vsverchinsky']","Rebased onto master, last commit that changes handle hit test area was removed Tested, no issues found. Thank you!All the transformations look correct to me.  But eliminating the call to `GetClip` where the argument is not constant 0 is needed, to complete the intent of of my checklist item.
","All the transformations look correct to me.  But eliminating the call to `GetClip` where the argument is not constant 0 is needed, to complete the intent of of my checklist item.
","Depends on:
 - #5031
 
 Eliminates `TrackList::Channels` is in adjust border handle, simplifies `TrackPanel` drawing code, typos fix

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA: 
  Validate that there are no regressions when trim or stretch applied to mono and **aligned** stereo clips :
  - [x] Clip boundary change
  - [x] Snap points detected
  - [x] Boundary movement limits are detected correctly (no true-zero-clips, no clip overlapping)","Good, just comment that it uses start times only
 But was there an intention to use this?  Was the design not completely realized?

Was the intention to drag the line between touching clips, and shrink one and grow the other together?
 Your guess is correct. Eventually, design team decided that we don't need that feature. Later `GetClip` will not take an argument because clips will really be wide in stereo tracks.

New calls of that function with constant 0 argument are acceptable now.  I don’t want more calls with nonzero. Can you rewrite this as an interval major, channel minor iteration, adding member functions to WaveChannelnterval, and eliminating the use of GetClip ? You can eliminate this ugly `dynamic_cast`, if above in the outer loop, you use `.Any<const WaveTrack>()` Maybe the comment should be kept to explain `* 2`
 A very pleasing deletion
 Thank you for catching this
 Maybe this change isn't needed.  It rules out cases where `static_cast` below would not work but `dynamic_cast` would work.

Note too that there is a `const` overload that you did not similarly change.
 Not sure that I understand that correctly as there are no iterations over intervals in this function, and there is no need to iterate over intervals because we already have a pointer to the interval.
Having an interface that allows trimming of intervals in individual channels would be wrong thing to do, `WaveTrack::Interval` is more appropriate place for this, right? That will change the behavior as we are searching for all interval boundaries, not just in wave tracks. But it could be simplified in other way - check for track and interval equality shortens to simple track pointer comparison, as we now always iterate over leader tracks and misalligned clips is not a valid case any more I think it's a leftovers I forgot to remove when we disabled adjacent clip border adjustment, added a new commit that simplifies hit testing `const` version resolves to non-const, which could be SFINAE'd, but I removed this change from PR completely Right, there is only one level of looping.

What I do mean is, hide the use of `GetClip` and making the loop internal to a new member function of `Interval` would be good.
 Should this test be lifted out of this inner loop?

This behavior change ignores all intervals of the current track, unlike the previous version which ignored only one interval, but this makes sense:  other clips would limit the movement of the selected clip and their boundaries would not be useful snap positions.

 Does this slightly change the hot zone for the clip boundary so that you can only hit inside the clip, not nearby and outside?

It may simplify the logic for hitting near the boundary of touching clips, but maybe it will be considered less convenient for hitting an isolated clip.

But I will let testers judge that.
 You are right, I didn't consider such case to be possible > Should this test be lifted out of this inner loop?

Yes, thanks!"
4827,2023-06-22T19:14:39Z,2023-09-18T10:28:00Z,vsverchinsky,5,9,2,640,9,4,2,[],1209602.0,1,7571603.0,0,0,0,0,31008479.123169,,1,2,0,False,"['crsib', 'vsverchinsky', 'Paul-Licameli']","Moved `ProjectQMLEnvironment` to `lib-project-qml`
`TimecodeControl` -> `NumericTextControl`
MacOS compilation fixes Will this be merged soon into the Qt branch?

But I don't want to accumulate divergence in libraries/ between that and master if that can be avoided.

Can there be a separate pull request against master, and after merge it, merge master into the qt branch, then do the rest of this PR?
 I don't see any libraries in this PR that should go into the master, so I strongly disagree. The only thing is the FileConfig, which should be done differently later. > I don't see any libraries in this PR that should go into the master, so I strongly disagree. The only thing is the FileConfig, which should be done differently later.

I see one new library special to qml, but many changes to existing libraries.  True, mostly minor things, changing `#include` directives.  Still I would rather not accumulate divergences.  Are all the little changes incidental to fixing FileConfig?  Then I hope to see a PR for just that.


 > Are all the little changes incidental to fixing FileConfig

They are, indeed :-)

We will have to prepare a separate pull request to master fixing the FileConfig, as I don't exactly like the implementation proposed here. I see little reason to block this PR; there will be a similar amount of work. We are discussing it with Vitaly now :-)I do want to see a different approach to how Audacity works with config, but I would rather make it a task for the Audacity `master` first. ","I do want to see a different approach to how Audacity works with config, but I would rather make it a task for the Audacity `master` first. ","Contains few commits that do some necessary refactoring.

Depends on:
 - #5046

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This looks like a proper hotfix, but I would instead push it further. 

1. I would like it to use Audacity specific interface. Much smaller one, only providing the functionality Audacity needs. `SetPath` is redundant as well.
2. I don't quite get the need for `SetImpl`, especially because it expects to implement the same interface. I think something like `GlobalHook` should be used to initialize `gPrefs` (or anything else really). Probably `GetSlotsCount` or `GetNumFactories`? This should go to a `lib-project-qml` or `lib-qml-support` or whatever. `lib-project` should remain green for all build configurations Generally, it's not a TimecodeControl, it's really a NumericTextControl. It is suitable right now to display Time, Duration, Frequency and Bandwith This raises a good question about where to put Qt-related modules. Personally I would just put in under `modules`, but with `qt-` as prefix > I don't quite get the need for SetImpl, especially because it expects to implement the same interface

It used to create `wxFileConfig` inside `FileConfig` which was performing all the actual job. Now it injected instead. This refactoring made it clear that the only purpose of `FileConfig` is prevent redundant disk writes, which is actually what `wxFileConfig` do as well... 🤷 I thought that it would be better to preserve original code style, but if I do so then, I guess, `size()` should be also renamed? I still feel that this library should be under `libraries`, not under `src`.

Probably under `libraries/qt`. > This raises a good question about where to put Qt-related modules. Personally I would just put in under `modules`, but with `qt-` as prefix

Note that I have begin using a `lib-wx-` naming convention.
"
5191,2023-09-12T18:21:29Z,2023-09-15T14:17:28Z,saintmatthieu,4,6,5,188,8,2,2,[],15365.0,0,244559.0,0,0,0,0,31253915.646533,,0,5,0,False,"['dozzzzer', 'saintmatthieu', 'Paul-Licameli']","Build is succeeding only for Windows Moved to draft state while @LWinterberg is trying it out. Got end-user approval by @LWinterberg .  Tested.
- whitespace before the colon should be removed:
<img width=350 src=https://github.com/audacity/audacity/assets/70063970/8f53ac6e-c88f-47ba-b2d5-fa95ad56f6c3>

Compare with the design:
<img width=350 src=https://github.com/audacity/audacity/assets/70063970/0a92b08a-af56-4121-8d8c-47ae535bf97b>

- In Hebrew locale, the speed denotation overlaps the clip's name:

<img width=350 src=https://github.com/audacity/audacity/assets/70063970/a4efbaa4-ea43-4d76-b47f-71330170bcdd>


@saintmatthieu 
I approve, but I added a QA checkbox.

Right-to-left languages should be tested too.

Is the geometry computed correctly so the number does not overlap the text?
","I approve, but I added a QA checkbox.

Right-to-left languages should be tested too.

Is the geometry computed correctly so the number does not overlap the text?
","Resolves: #5053

Add a stretch indicator to the clips.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [x] Create a new clip with reasonable width: no stretching hence no indicator.
- [x] Change project tempo: the indicator appears
- [x] Restore original project tempo: the indicator disappears
- [x] Stretch the clip: the indicator re-appears
- [x] When the clip becomes too small, the indicator should get truncated (E.g. ""100% sp..."") or completely disappear
- [x] The indicator disappears if there isn't enough room for the ""%"" symbol. In other words, you never see a number without the % symbol, e.g., ""123%"" is possible, but not ""123"".
- [x] There is always a little space between clip title and speed indicator.
- [x] When `101 < speed < 99` %, either no indicator because there is no stretching, or the indicator shows a value with 1 decimal place, e.g. 100.7, or 99.4 %.
- [x] When `speed < 1%`, the indicator shows a value with 1 decimal place, e.g. 0.4 %. It never goes to 0%, and stays at least at 0.1%.
- [x] Renaming a clip is still ok. Giving an empty string to the clip title is also ok.
- [x] Try Arabic or Hebrew locale and verify the numbers don't overlap text with right-to-left languages","unused Was specified 12 by @LWinterberg  Truncating was not specified by @LWinterberg , but only having it disappear completely if not enough space. Isn't it better this way ? Are you commenting on your own PR?  I’m confused As reminders for things I myself noticed after having pushed. This new file and its older companion should have banners at top
"
5174,2023-09-08T19:42:27Z,2023-09-13T20:22:26Z,LWinterberg,4,12,10,64,15,2,1,[],240457.0,0,434404.0,0,0,0,0,31404815.277583,,0,10,1,False,"['Paul-Licameli', 'LWinterberg', 'dozzzzer']","strings got reviewed earlier, though it seems like I screwed up the rebase onto master. I wonder what happened there. 

Edit: Pulling master before rebasing onto it would've been smart Tested > Tested

Including tests of the accelerator keys?
 > Including tests of the accelerator keys?

Yes",,"* Resolves: #5092
* Renames several other features: 
    * Overdub -> Hear other tracks during recording
    * Time-Shift -> move clip
    * Sync-Lock -> keep tracks synchronized
    * Software playthrough -> input monitoring
    * Keyboard (on preferences) -> Shortcuts
* Adds undo messages to trimming","It’s a toggling menu item, with a check mark.  Are you sure of these words? Sometimes the click disabled the pin. Ditto? Again Noch einmal  a) I'm not sure about most of the words in this PR, but wanted to get a build for @Tantacrul @DilsonsPickles et al. to see it in context
b) ""Enable..."" items are usually quite clear: When you click the menu entry with nothing next to it, clicking it enables it. When you revisit it, it's got a checkmark next to it, indicating it's enabledness, and clicking it again disables it. This is mostly consistent with how checkboxes in the preferences work,  it's just that the empty box is missing.  As you like Did you check that there is no conflict in this menu for the m shortcut? No shortcut key now Another changed shortcut, conflict? re-added it yes, no conflict no conflict"
5172,2023-09-08T15:53:17Z,2023-09-12T14:41:55Z,Paul-Licameli,1,0,1,7,1,1,1,['recording'],64308.0,1,341321.0,0,0,0,0,31511650.470637,,2,1,0,False,['petersampsonaudacity'],"Testing on W10  with @Paul-Licameli 's branch build for this:  audacity-win-3.4.0-alpha-20230908+a06ae83-x64

This looks to be fixed in your branch Paul - bit I do note your recent ancillary issue #5173",,"Resolves: #5115

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5066,2023-08-22T08:39:15Z,2023-09-11T18:03:29Z,DavidBailes,3,0,1,7,1,1,1,[],1298516.0,0,1761855.0,0,0,0,0,31585961.013686,,1,1,1,False,"['DavidBailes', 'chinakov']","@crsib . I've requested a review from you for this PR. Is that OK, or would it be better to request a review from someone else? @crsib . Thanks! Tested",,"Resolves: https://github.com/audacity/audacity/issues/4991

Problem:
In commit 67aad3504, the accessibility of AButtons when set to be toggle buttons was improved for all screen readers and for Narrator in particular. This involved both the role and state being included in the accessibility name. However, because the accessibility state no longer indicated the state of the toggle button, this made it difficult for screen reader scripts to robustly determine the state of the toggle button.

Fix:
Add the character '\a' to the end of the accessibility name when the toggle button is in the pressed state. Screen reader scripts can then check for this character.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5169,2023-09-08T08:16:57Z,2023-09-11T12:07:44Z,vsverchinsky,0,0,1,17,1,1,1,[],,0,273079.0,0,0,0,0,31607277.395753,,0,1,0,False,[],,,"Resolves: #5125

Clips use `WaveTrackData` during deserialization process, which itself is not yet properly initialized. `WaveTrack::SetClipRates` called at the end of deserialization in case of mismatched default clip's rate and actual track rate could cause erroneous reevaluation of clip's parameters.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x]  There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

QA:
- [ ] Check that it also fixes https://github.com/audacity/audacity/issues/5171, and please close https://github.com/audacity/audacity/issues/5171 if it does.
",
5167,2023-09-07T21:52:56Z,2023-09-07T22:04:56Z,Gootector,1,0,1,2,1,1,1,[],732.0,0,2402.0,0,0,0,0,31915397.457352,,0,1,0,False,['Paul-Licameli'],Thank you,,"Fix: combinedinto -> combined into
Should be a single space after 'combined', because both words are combined into one.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5140,2023-09-04T16:46:46Z,2023-09-07T15:23:51Z,vsverchinsky,0,4,1,37,4,2,1,[],,0,254331.0,1,0,0,0,31941040.820215,,0,1,0,False,[],,,"Resolves: #5131

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think that should be SetRate to make the side effect on clips Also correct typo in the commit comment: “iteration” `WaveClip::Resample` already does that You're right
"
5097,2023-08-28T16:20:43Z,2023-09-07T13:18:57Z,vsverchinsky,0,0,1,22,2,2,2,[],,0,853095.0,0,0,0,0,31948641.97887,,0,1,0,False,[],"I like it too
","I like it too
","Resolves: #5073

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5109,2023-08-29T17:52:14Z,2023-09-06T16:23:27Z,vsverchinsky,5,6,3,91,3,2,1,[],74203.0,0,743545.0,1,0,0,0,31966303.405363,,0,3,0,False,"['vsverchinsky', 'Paul-Licameli']","macOS build is failing
 > macOS build is failing

Fixed Done reviewing.  Just fix one initialization.
 Rebased onto recent master that has fix for misalligned channel, to avoid bugs that are already fixed from being observed  This is approved for merge.  I rebased it onto recent master and made the needed conflict resolutions.
",,"Resolves: #5101 
Resolves: #4752

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","@LWinterberg  Please duplicate the comment
 Uninitialized in the default constructor?  Make it `floatSample`
 @LWinterberg wording?
 looks good to me looks good to me"
5100,2023-08-28T22:09:12Z,2023-09-06T12:33:13Z,RJVB,4,0,1,21,3,1,1,[],312.0,1,743042.0,0,0,0,0,32037790.670232,,0,1,1,False,"['LWinterberg', 'RJVB', 'dozzzzer']","FWIW, I'd also like to propose to change the ""pointing finger/hand"" SelectHandle cursor by something where the hot point is a little more clear, like `wxCursorCross`.

That's a usability tweak too in my book but I wasn't certain it'd be a good idea to include it without bringing it up first - it's a user-visible change. https://github.com/audacity/audacity/issues/5018 may be the relevant bug to item 2 > #5018 may be the relevant bug to item 2

Sounds like it and if `ProgressDialog::Beep()` is what is/was called after long operations then indeed the feature hasn't been working for a long time on Mac. Tested:
- #5108 is fixed now
- FFmpeg is discovered
- Import/Export audio also works as expected",,"- make src/AudacityApp.mm build on pre-10.14 systems which either don't have `@available()` or don't have the 10.14 SDK installed. (`@available` is a runtime operator.)
- make `ProgressDialog::Beep()` beep instead of printing an invisible failure message.
Use `NSBeep()` instead of calling a non-implemented wxWidgets method. (may fix https://github.com/audacity/audacity/issues/5018)
- Wrapper.c : change the process name (as it appears in `ps`) after forking, exit with an error if `execve()` fails and provide an env.var switch to preserve `DYLD_LIBRARY_PATH` for advanced users.
Contrary to comments in the code, setting `DYLD_LIBRARY_PATH` may also be what the user wants, and setting it doesn't necessarily interfere with loading the FFmpeg libraries just as it doesn't do that on Linux.

Committed from host : Portia.local

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5031,2023-08-14T12:23:31Z,2023-09-05T16:05:39Z,Paul-Licameli,11,9,18,798,28,2,2,"['refactoring', 'Music']",95075.0,2,1914132.0,0,0,0,0,32111444.479827,,2,18,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased unchanged into updated #5027 
 I have rebased onto the updated dependency #5041.  Some conflict resolution was needed in the first two commits.
 Pushed again, with one simplification fix-up commit inserted into the sequence, and more commits at the end.

I have not yet addressed the comments of the first round of review.

I am updating the description at top.  I'm no longer changing only the waveform view implementation in this branch.
 Added dependency #5082;
Rebased onto #5041 with a cherry-pick of #5082;
Squashed some commits;
Added another one-line FIXUP change analogous to #5082 for spectrograms
 Thanks for the re-review @vsverchinsky 

now get some sleep! @Paul-Licameli recording on a mono/stereo track with Spectrogram view enabled crashes @Paul-Licameli The updated PR fixes the issue with recording in Spectrogram view. > @Paul-Licameli The updated PR fixes the issue with recording in Spectrogram view.

This branch is based on #5041.  I think you will find it was that branch, not this, that introduces the bug in spectrogram.  So the extra one-line fix should be cherry-picked onto that one.
 Rebased onto updated #5041 and resolved conflicts
 @Paul-Licameli moving back to In Progress:

- When merging mono tracks into stereo, right channel clip handles are still shown and draggable

![image](https://github.com/audacity/audacity/assets/70063970/8ce78801-762a-49c2-9259-ca04023bf2f6)
 Please disregard my previous comment, I wrongly interpreted the description of the task. All good to be merged then.",,"Resolves: *(direct link to the issue)*

Depends on:
- #5027
- #5041
- #5082

The WaveChannelInterval interface, introduced in the previous pull request, is extended,
sufficient to rewrite the details of waveform and spectrogram view painting in terms of it,
rather than assuming a ""narrow"" WaveClip is given.

Right channel affordance areas are no longer painted.

Waveform and spectrogram caches are now attached to the left channel clips only, but
contain the information for the right channel too.

QA:
- [x] Intentional behavior change: right channel clip handles are no longer shown or draggable after merging mono to stereo
- [x] Left channel clip handles work as before
- [x] Verify waveform and spectrogram and split views work as before, mono and stereo tracks
- [x] Magnified views showing individual samples, edit samples (only without stretch)
- [x] No recurrence in either kind of view of: #5082
- [x] Display and editing of envelopes, with and without stretch
- [x] Editing of clip names
- [x] Correct enabling of Edit > Rename Clip... in menus according to the time selection

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","There is a code path in `SubstitutePendingChangedTrack()` that may return null, not the case right now though ~~`virtual`~~ -> `override` No need to introduce new variable, the whole block could be moved out from the loop (with few changes), or `WaveChannelView::GetAffordanceControls()` could be changed like this:
```
std::shared_ptr<CommonTrackCell> WaveChannelView::GetAffordanceControls()
{
    auto track = FindTrack();
    if (track->IsLeader())
        return DoGetAffordance(track);
    return {};
}
``` Could it be:
`return mWideClip->GetEnvelope()`
? In that case `Envelope&` parameter in constructor becomes redundant I'm not worried about this.  `SubstitutePendingChangedTrack` was written with more generality than it needs and is something I may reimplement.  The reason for it is that while recording, the track that really gets painted is a temporary with extra sample data in it that it not yet committed to the TrackList.
 The path that could return null is only in the case that the track we are trying to paint is not part of any TrackList.  That is never the case.
 thanks
 True
 I might have done it that way, but I will let it stand for now.

In fact, what you propose would eliminate a call to `IsAlignedWithLeader`

And that made me consider removal of the other calls to that, which are all in `WaveClipAdjustBorderHandle.cpp`

And maybe that can be a task for you.

Also in that task, eliminate the `TrackList::Channels` call in that file.

Rewrite things instead in terms of the `WaveTrack::Intervals` function -- as I have also rewritten `SpectrumView::DoDraw` and `WaveformView::DoDraw`
"
5048,2023-08-17T03:07:09Z,2023-09-05T00:57:08Z,ksoze95,1,1,7,472,10,1,1,[],1633740.0,0,1633807.0,0,0,0,0,32165953.730483,,0,7,0,False,['ksoze95'],Rebased off latest qt branch,,"Resolves: #5037

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Why not use layouts?
5067,2023-08-22T12:51:09Z,2023-09-04T18:15:27Z,vsverchinsky,0,1,4,1298,20,1,1,[],,1,1142688.0,0,0,0,0,32190035.005092,,0,4,0,False,[],,,"Depends on:
 - #5046 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Possibly add a break after calling action?
5046,2023-08-16T13:02:03Z,2023-09-04T15:52:38Z,vsverchinsky,0,0,2,271,11,1,1,[],,1,1651836.0,0,0,0,0,32198635.192579,,1,2,1,False,[],,,"Depends on: 
 - #5056

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5056,2023-08-18T18:31:02Z,2023-09-04T11:56:15Z,vsverchinsky,0,2,3,375,24,2,1,[],,1,1445144.0,0,0,0,0,32212790.626196,,0,3,0,False,[],,,"Introduces cmake helper function `audacity_qml_module` that transparently wraps `qt_add_qml_module` and adds project-specific per-module routines (the list isn't complete and likely to be extended in the future): 
1) Groups linked generated projects together
2) Unifies module qml import path
3) Fixes project dependencies when using Visual Studio generator, that sometimes caused build errors for BUILD_ALL target
 


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should this be re-enabled? I think no, as I understand *.qml should be added either to qrc or via `qt_add_qml_module` not both. As I explained in the commit comment I reverted it because right now this is the only source for deploy script where it can scan for imported qt qml modules"
5120,2023-08-31T13:44:33Z,2023-09-01T14:32:20Z,vsverchinsky,2,1,2,63,2,1,1,[],14909.0,0,89271.0,0,0,0,0,32462654.965904,,0,2,0,False,['vsverchinsky'],Rebased onto recent master Rebased,,"Resolves: #5116 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",The same fix is in the #5041 branch too
5041,2023-08-15T16:28:29Z,2023-09-01T10:56:01Z,saintmatthieu,27,30,20,2118,50,2,0,['Music'],158715.0,2,1457421.0,0,0,0,0,32467072.373069,,0,20,1,False,"['dozzzzer', 'saintmatthieu', 'Paul-Licameli']","I just bisected a bug to the commit ""Make waveform display work again"", but don't fully understand it yet.

- empty project
- Make stereo track
- select some range of time later than 0
- Generate > noise

Observe:  the channels appear misaligned.
 That appears to be only a display problem.  Real playback is correct.
 > I just bisected a bug to the commit ""Make waveform display work again"", but don't fully understand it yet.
> 
> * empty project
> * Make stereo track
> * select some range of time later than 0
> * Generate > noise
> 
> Observe: the channels appear misaligned.

@Paul-Licameli I cannot reproduce it. If you could figure it out that'd be great. > `t1` is not used outside this constructor, so it might be a local variable

You might do this still, or not
 Now THAT is my complete round of review!

I think the points raised will be easy to resolve and the repeat round will be fast.
 Approved!  Please squash all commits after 560bc7dfcb903c393e03f2580fedb33b9ea1be9b into one.
 I have combined the QA checklists from two PRs.
 Found issues @saintmatthieu :

- When time-stretching from the left side (the beginning) of the clip, then dragging the new, time-stretched clip back to the zero time mark and playing the clip, it freezes for a few seconds before starting the playback. The subsequent attempts to play resulted in no stuttering. It also seems that the higher the stretch ratio is, the longer it waits before actually playing the track:

https://github.com/audacity/audacity/assets/70063970/06425b5a-636f-441c-b3dd-f273a38ea948

(a non-related to this PR issue logged as #5088)

- When shrinking a 1-minute clip to the minimum length, playback also starts after a short pause a couple of seconds long. Also, when shrinking a 1-minute mono clip to the minimum length, duplicating it, making it into a stereo track, and hitting Play, the pause time seems to double in time
- Deadlock when placing two clips with different stretch ratios next to each other and then pressing Z on the keyboard (= at zero crossings):

https://github.com/audacity/audacity/assets/70063970/d6a36e11-6c00-4e8b-8379-ab2b78eb318a

- When mixing-and-rendering a time-stretched clip (to a new track) and then measuring the contrast (_Analyze > Contrast_) or the RMS value (_Analyze > Measure RMS_) on both, the mixed-and-rendered one always appears to be a few dB quieter than the original time-stretched one:

https://github.com/audacity/audacity/assets/70063970/73228ef7-162d-48d3-9ef9-8d77cef0f3df

- Also noticed that when playing from the cursor immediately after stretching a clip, playback starts with a slight delay of maybe half a second as opposed to regular playback as well as all subsequent playbacks on the stretched clip that start immediately

- When importing a stereo file (wav/mp3) and adding some envelope points, visually only the left channel seems to be affected, even though in fact both left and right channel amplitudes are affected:
![image](https://github.com/audacity/audacity/assets/70063970/01f48b94-71c0-4044-abf4-ce151abfac1b)

- When stretching a clip using some extreme stretch ratios (e.g. stretching a 30-second mono chirp up to 12 hours), attempting to play the clip causes deadlock. We perhaps should introduce upper boundaries for the stretch factor
- Stretching a clip on a track that is part of a sync lock group doesn't cause other tracks of this group to shift in time as well; this is gonna be logged as a separate issue and is yet to be discussed with the design team, so please disregard this one
- Beat Finder analyzer fails on a time-stretched clip, e.g. a shrunk rhythm track:

https://github.com/audacity/audacity/assets/70063970/bf26683a-d801-4450-a789-dc5eb7d9892d

- Beat Finder may cause deadlock when applied on a clip that is stretched by changing the Tempo to a lower value:

https://github.com/audacity/audacity/assets/70063970/5278d67d-3b85-4f8e-8981-040af13570a3

- Poor processing of synthetic tones, such as chirp. When stretched and then mixed and rendered, it has louder peaks than the original: 
<img width=300 src=""https://github.com/audacity/audacity/assets/70063970/dd74a537-6bad-469f-a0c6-f777bb0cdc85"">
<img width=300 src=""https://github.com/audacity/audacity/assets/70063970/73b1d08a-1a0e-42c6-9cc0-acf610970cbd"">

- In a sync-locked track group, time-stretching a clip doesn't cause other tracks of the group to shift in time. Logged as https://github.com/audacity/audacity/issues/5090

- Occasionally, the uploaded to audio.com version of the stretched file would have a different length than the one in the project; this happens rarely and under certain specific circumstances that I'm yet unable to figure out

- When copying a shrunk clip and pasting it alongside, then rendering the sequence of two clips, the left and the right halves of the resulting clip look differently (see the images below); the issue is fixed now in the most recent version of the branch though.

Before:
<img width=""400"" alt=""Screenshot 2023-08-29 at 11 31 22"" src=""https://github.com/audacity/audacity/assets/70063970/5c9764f0-7f9f-45a8-bca4-46552073d7b1"">
After:
<img width=""400"" alt=""Screenshot 2023-08-29 at 11 36 35"" src=""https://github.com/audacity/audacity/assets/70063970/26171ee7-9092-4968-966b-921b992f0de6"">
 @dozzzzer Thanks a lot for your findings so far.

> When time-stretching from the left side ...

This is already in 3.3.3 😬 Please try the exact same on the current release, using trimming instead of stretching.
The reason : before trimming, you select the entire clip. During trimming, the selection stays the same. When you shift the clip left, it also shifts the selection to the left, past the zero mark. And when you press play, it plays the selecting region, i.e. starting at second -10 ...

IMO this _is_ a strange behaviour, that _could_ be acceptable if the option to see past the zero mark is checked, but probably not if it isn't, right? Hasn't anyone complained about that so far? @LWinterberg? @dozzzzer 
> When shrinking a 1-minute clip to the minimum length, playback also starts after a short pause a couple of seconds long. Also, when shrinking a 1-minute mono clip to the minimum length, duplicating it, making it into a stereo track, and hitting Play, the pause time seems to double in time

StaffPad's time stretcher doesn't seem to like the way we configure it and extremely low stretch ratios. It may be a simple fix. WIP. > This is already in 3.3.3

👌 Logged as #5088  Perhaps I should examine the problem with envelope display.  Recently I merged to master some changes in envelopes.  Are you sure nothing was wrong already in master? > Perhaps I should examine the problem with envelope display. Recently I merged to master some changes in envelopes. Are you sure nothing was wrong already in master?

Yes, current `master` isn't affected, i.e. envelopes of both channels of a stereo track can be edited simultaneously. I re-approve this branch with the new commits, to the extent I understand it (this excludes changes inside the StaffPad library)
 > When mixing-and-rendering a time-stretched clip to a new track and then measuring the contrast (Analyze > Contrast) on both, the mixed-and-rendered one always appears to be a few dB quieter than the original time-stretched one

Time stretching will modify the samples, and so we cannot expect the exact same contrast before and after rendering.

Then the follow-up question is: should we display the value for the raw data (as now) or the stretching-rendered result ? I'm not sure that the former would be preferrable. Something similar happens with real-time effects: select e.g. Bass & Treble, reducing both bands by several dBs. The contrast-command result is that of the raw audio. If you mix and render, and run contrast again, you get a different result.

So I'd leave it as it is. @LWinterberg ? > > When mixing-and-rendering a time-stretched clip to a new track and then measuring the contrast (Analyze > Contrast) on both, the mixed-and-rendered one always appears to be a few dB quieter than the original time-stretched one
> 
> Time stretching will modify the samples, and so we cannot expect the exact same contrast before and after rendering.
> 
> Then the follow-up question is: should we display the value for the raw data (as now) or the stretching-rendered result ? I'm not sure that the former would be preferrable. Something similar happens with real-time effects: select e.g. Bass & Treble, reducing both bands by several dBs. The contrast-command result is that of the raw audio. If you mix and render, and run contrast again, you get a different result.
> 
> So I'd leave it as it is. @LWinterberg ?

I'm not sure.  Maybe we have discovered a subtle bug for the StaffPad guys to figure out.

I think you could prove that transforming one FFT window, changing phases only, and then doing IFFT, should leave RMS unchanged.

But that does neglect the complications of windowing functions, overlap-add, etc.

Still I would hope that time stretching of a sustained tone should at least preserve RMS with some cancelling-out of these effects over many windows.


 That's correct, modifying the phases of the components of a signal doesn't change its RMS.

Also, I shared pictures on Discord of the effect of the time stretcher on a square wave. The waveform is greatly affected, but the RMS stays the same - roughly. Looking closer you can see it oscillating. That could be one reason.

The other reason could be delay. SP's stretcher reports a delay value that should be reviewed. We discard that many samples at the beginning of the output, but I've seen, for strong stretch ratios, signs that this may be an underestimate or overestimate, depending on the stretch direction. This could lead to discarded samples, affecting the analysis result - and other more critical problems, like truncated boundaries. Seems not be noticeable at typical ratios and we may get away with it for now, though. @dozzzzer 
> Also noticed that when playing from the cursor immediately after stretching a clip, playback starts with a slight delay of maybe half a second as opposed to regular playback as well as all subsequent playbacks on the stretched clip that start immediately

I'm not sure how to reproduce that. A quick attempt didn't succeed. The number of tracks, sample rate, length, stretch ratios, all could play a role. Maybe make a project available for me? @dozzzzer 
> When importing a stereo file (wav/mp3) and adding some envelope points, visually only the left channel seems to be affected, even though in fact both left and right channel amplitudes are affected:

@Paul-Licameli provided a fix with commit 1468879. Just tested it, works fine. > When stretching a clip using some extreme stretch ratios (e.g. stretching a 30-second mono chirp up to 12 hours), attempting to play the clip causes deadlock. We perhaps should introduce upper boundaries for the stretch factor

Since
* the need for such drastic outward stretching is very, very unlikely,
* a fix in the StaffPad library isn't easy (it'd mean supporting analysis hop sizes of less than 1 sample),
* setting up limits would take some, if so not much, development time,

we agreed together with @LWinterberg eventually to let it come as a bug if it ever gets reported. > Poor processing of synthetic tones, such as chirp. When stretched and then mixed and rendered, it has louder peaks than the original:

When a waveform's components' phases relationship change (which is inherent to pitch-preserving time stretching), the shape of the waveform changes, too. For synthetic, complex waveforms with distinctive shapes such as square, triangle or sawtooth waves, this is very noticeable. It comes with a change of peak values (but RMS should be preserved, at least roughly), which is partly what we observe here.

That said, we've identified with @dozzzzer and @LWinterberg a pattern, whereby compressing a clip lowers its RMS, and expanding it, increases its RMS. For typical, musical usage of time stretching this is probably small enough not to be noticeable, but an improvement here would be welcome, possibly as patch release.

The fact that louder peaks may cause clipping upon playback is something we decided not to do anything about. Clip indicators are there to make the user aware of it. Doing anything ourselves proactively would change characteristics of the waveform in likely unwanted ways. Like @Paul-Licameli said, it's the maths of it - let the user decide how to deal with it. > synth

You know that there is a checkmark item in the View menu that paints the track red wherever it clips?  This is useful and I have wished it were the default.

If the stretch algorithm calculates sample values out of the [-1, 1] bounds, still those numbers are preserved if in 32 bit float format, and even persist in the .aup3 file.  It is still possible to normalize or compress or limit the result to get back a track that does not clip.

Experienced users may just have to learn this and be aware.
 Yes, Leo showed the clipping markers. Normalizing or even just lowering the gain, and, for display, zooming out vertically on the level ruler. @dozzzzer Beat finder problems are effect-related, and will be fixed in 5-of-6. Please ignore for now. I tested on that other branch, and it works. @dozzzzer all your boxes are checked. Comments to some of those:

> Stretched clips are quieter

... or louder, depending on the stretch direction (squeezing -> quieter, expanding -> louder). As we agreed together with @LWinterberg , this will probably be subject for a patch release and should not block this release.

> Beat Finder fails when analyzing a stretched (shrunk) clip
> Beat Finder may cause deadlock

Please ignore for now, will be fixed with the PR that fixes destructive effects.

> Insignificant lag when playing a stretched clip not from the zero mark

Could not reproduce this.

> Lag when playing a clip shrunk to extreme minimum

Comes with the pre-processing of clips stretched to large amounts : squeezed and a lot of input has to be analyzed to output just a few samples, expanded and the synthesis will first output lots of near-zero values that must be discarded. This takes time, nothing we can do about it without delving in the StaffPad algorithm and risk breaking things while optimizing. I expect this lag for ""normal"" ratios not to be noticeable. Thanks @Paul-Licameli for contributing and pushing this forward ! Tested:

- All checklist items
- Plot Spectrum applied to an extremely stretched-out clip now doesn't cause the freeze
- The freeze when using At Zero Crossings is now fixed
- The mixer Board issue is gone
- The right channel of a stereo track ignoring the envelope points is fixed as well

Out of scope of this PR:

- Stretched clips are quieter (logged as #5123) and clipping (https://github.com/audacity/audacity/issues/5122)
- Beat Finder issues (will be addressed in ""5 of 6"" PR)
- Extremely shrunk clip causes delay and stutter when played back (the ""limitation"" of the algorithm; see @saintmatthieu 's comment above)
- https://github.com/audacity/audacity/issues/5118
- https://github.com/audacity/audacity/issues/5119
- https://github.com/audacity/audacity/issues/5112
- https://github.com/audacity/audacity/issues/5113
- https://github.com/audacity/audacity/issues/5088
- https://github.com/audacity/audacity/issues/5090
- https://github.com/audacity/audacity/issues/5124
- https://github.com/audacity/audacity/issues/5126",,"Resolves: #4850

This PR enables the time-stretching of audio clips!
Changing the project tempo _will_ play the clips slower or faster. Clips can also individually be stretched using the stretch handle (like trimming, but with alt depressed).

Depends on
- #5040
- #5095

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

## QA:
This is a big change, with many consequences, please plan some time to play around and do all sorts of crazy things with it. I'd be surprised if you don't find bugs, other than those underneath that will get fixed in follow-up PRs:
* drawing tools won't work on stretched clips
* copy/paste/join actions involving stretched clips
* applying effects on stretched clips.
* generating sounds on stretched clips

Checklist:
- [x] No regression of the fix for this bug https://bugzilla.audacityteam.org/show_bug.cgi?id=2288
- [x] Playback works in all directions (also backward by scrubbing)
- [x] Various spectrum displays (standard, autocorrelation, reassignment, ...)
- [x] Reassignment algorithm of spectrograms especially -- stretch clip while in that view, see that the display updates properly.  Use an example where the difference between Reassignment and the default algorithm is noticeable.
- [x] Playback of stretched clips
- [x] Scrubbing including backward and forwards, and at ends of stretched clips
- [x] Correct playback with an envelope in a stretched clip (edit the envelope before you stretch)
- [x] Contrast tool:
  - Make two clips on a track with different stretch
  - Select all, note RMS values
  - Mix and render to new track
  - Repeat, observe the same RMS
 - [x] Playback stops correctly when it is started from a position other than 0.
 - [x] Persistency of stretches in the saved project file
 - [x] Rendering and exporting of stretches
 - [x] Rebase onto #5095 and confirm that the problem does not recur
 - [x] Change project tempo with a stereo track present, then split it to mono, observe correct stretch in new track
 - [x] Undo and Redo of changes to project tempo with all types of tracks present

## Issues  that need to be addressed within this PR:

- [x] Deadlock when using ""At Zero Crossings""
- [x] Stretched clips are quieter
- [x] The right channel of a stereo track seems to ignore the envelope points
- [x] Beat Finder fails when analyzing a stretched (shrunk) clip
- [x] Beat Finder may cause deadlock
- [x] Insignificant lag when playing a stretched clip not from the zero mark
- [x] Deadlock when playing extremely stretched-out clips
- [x] Poor processing of synthetic tones resulting in high peaks (TBD)
- [x] Lag when playing a clip shrunk to extreme minimum","Should this comparison use discrete sample counts?
 Non-ascii mathematical notation in comments, nice
 See uses of `@name` with `@{` and `@}` elsewhere in the source tree, so that Doxygen can associate a comment with multiple class members.

The generated pages will have nicer information and just looking at the source code makes clearer the intended ""scope"" of your comment.
 Here you can simply use `//!` for a Doxygen comment on one member.
 I think this function should use `TimeToLongSamples`
 No, just delete the function!  It is defined but not used anywhere in these six PRs
 Delete this comment please
 Isn't it too much to have private members show up in Doxygen? The playtime boundary getters return sample-rounded values, but results can be different whether we round `t` or not, so it's an important question.

Mathematically it is correct as it is. Someone can use the method to check whether the cursor splits the clip visually. But we also use this method to decide whether a clip should be split or not, in which case it's a headache to figure out what should be done when splitting a clip a fraction of a sample before its play end time.

I'm thinking now that these boundary-check methods should take `sampleCount` arguments. Then it's the responsibility of the users to decide what rounding they want. The internal variables (`mSequenceOffset`, etc) must stay `double`s because of stretching.

I haven't seen a problem related to that, though, perhaps because the places that use this already pass rounded values. For the sake of time, would you agree to leave it as-is for now and keep this in mind if problems are reported? It's deleted. It is used, in `WaveTrack::ApplyStretchRatio`, in PR 5. I'll remove it from this PR, and rebasing will force me to re-introduce it. Then I'll use `TimeToLongSamples`. All might help someone needing to understand the implementation, not just interface.

There is the notion of “representation invariant” for instance — invariant conditions involving private member variables.  Might as well follow conventions with `@invariant` There too I think I wrote this elsewhere, bug again:  `0.5` should change to `true` at the commit ""Make waveform display work again"" to match the change of argument type.
 near the end of this function `findCorrection`, clean up two things please:  use `std::clamp` and `assert`
 I see this change in `DrawIndividualSamples`.  I wonder whether it's complete.  I see another use of `clip->GetRate()` that is not corrected for stretch later.  But it's only fetching one value from the envelope and passing a time-step value for successive samples that doesn't matter and could be 0.
 The domain of the Envelope (viewed as a curve or function) is always updated with ration changes to be real time, correct?  So `time` given to `GetValue` is right?

Did you test display of individual samples with an envelope too?
 As I wrote on the closed PR, the commit ""Make waveform display work again"" doesn't completely do what it says.  Instead the next commit ""Spectrum display..."" completes the work for waveform display too.

So properly, these two commits should be squashed into one (plus the fixup I pushed).  Maybe that commit would be too large and you might find a nice way to separate small steps like changes of arguments of functions or construction of `ClipParameters`

But then I see the next commit ""WaveChannelView clean-up ..."" does yet more things that correct the calculations, which comes after ""Spectrum drawing does not need a WideSampleSequence ..."" but that one is easy, just deletions.

I have to look at the diff of a sequence of four commits to understand the whole transformation and be confident it's right.  This isn't easy.
 Is this comment in commit ""Spectrum Display..."" correct?
 If 0 is an excluded value, maybe the member doesn't need to be `std::optional` but instead you would test the value wherever it is used.
 I spent a surprising amount of time studying this small commit to convince myself it was correct.  Rereading the whole class led me to push one more commit for an possible undiscovered problem.  I think backwards scrubbing with stretch applied might be wrong.
 I found this small commit difficult to understand because `durationToDiscard` is multiplied by the clip's rate only in one place, but then also divided by stretch ratio in another place.

I think the members `mLastReadSample` and `mTotalNumSamplesToProduce` should be commented.

`mLastReadSample` counts raw samples but `mTotalNumSamplesToProduce` counts stretched.

Also, what should have made the bug ""obvious"" in earlier reviews -- is that the clip's rate should always be divided by the stretch ratio, never multiplied by it.
 You've fixed a bug indeed, thank you. Added the missing unit test that would have caught it. I considered some time ago already providing a class only for the implementation of `TimeAndPitchSource` and let `ClipSegment` use it. It could have avoided this confusion. Now `mLastReadSample` is a member of the source, and represents a sample index before stretching. `mTotalNumSamplesToProduce` is a member of `ClipSegment` and represents a sample count after stretching. Now I did it. The commit ""review comments: extract TimeAndPitchSource from ClipSegment ..."" only just does that - no change in logic. One advantage of `optional`: the compiler will tell you if you are not de-referencing when you should. A bare double won't warn against unchecked uses. It's outdated, stemming from the time when spectrum display did not account for stretching. Thanks. I tried to demonstrate backwards scrubbing going wrong without this fix, but I could not.

Maybe `samplesPerChannel` is never greater than `remainingSamplesInClip` because of other tests elsewhere, but the class `ClipSegment` should not depend on that pattern of usage.
 Right. I did not a good job with my interactive rebase for this part. I may mistakenly have attempted to re-order and squash the ""WaveChannelView clean-up ..."" into ""Make waveform display work again"", but actually it should have been squashed into ""Spectrum display ..."" (and then squashing that into ""Make waveform display work again"" as you suggested). I don't mind doing it, but is now a good time, since you've reviewed this already?  > The domain of the Envelope (viewed as a curve or function) is always updated with ration changes to be real time, correct?

Correct. The x-position of the samples is scaled by the stretch ratio because the audio samples are stored in stretched state. The envelope is, though.

> Did you test display of individual samples with an envelope too?

I did, yes, and that works to the extent I tested it. Not so confident about the corner cases, though. Change “pps ” in the comment"
5085,2023-08-25T08:26:31Z,2023-09-01T09:16:25Z,LWinterberg,1,0,1,3,1,1,1,[],11268.0,0,607798.0,0,0,0,0,32481615.698206,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @LWinterberg 's branch:  audacity-win-3.4.0-alpha-20230825+3264d5b-x64

This now looks fine to me Leo - many thanks for that.
![image](https://github.com/audacity/audacity/assets/50205984/3e987570-0a02-4255-b495-62654cd6b5b4)
",,Resolves: https://github.com/audacity/audacity/issues/5079,
5111,2023-08-30T17:41:38Z,2023-08-31T17:43:13Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,86498.0,0,0,0,0,32537610.925997,,0,1,0,False,[],,,"Resolves: #5098

When clips are added to `TrackList::mPendingTracks` attemp to access `ChannelGroupData` of the (right)track results in a new instance of `ChannelGroupData` being created with default sample rate that could be different from the sample rate of the original track. Not the case for the first track's copy as it already contains a copy of `ChannelGroupData` originated from the source track.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5074,2023-08-23T08:20:01Z,2023-08-31T15:37:27Z,DavidBailes,0,0,1,4,1,1,1,[],,0,717446.0,0,0,0,0,32545161.944411,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/5072

Issue #5072. In the commit https://github.com/audacity/audacity/pull/4825, the two instances of the string ""TrackView"" used in the accessibility object for the TrackPanel were accidentally changed to ""ChannelView"".

Fix:
Change the strings back to ""TrackView"".




<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5110,2023-08-29T19:09:01Z,2023-08-30T11:54:22Z,Paul-Licameli,1,0,1,17,1,1,1,[],55479.0,1,60323.0,0,0,0,0,32644947.134273,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @Paul-Licameli 's branch build for the fix for this:  audacity-win-3.4.0-alpha-20230829+22fb39b-x64

I can no longer replicate this, so it looks to be fixed in Paul's branch build.

I tried 25 repeats of stop-start record in Spectrogram view - formerly somewhere in the rage of 3-7 would cause the crash.",,"Resolves: #5108

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5095,2023-08-28T13:37:29Z,2023-08-29T17:28:14Z,Paul-Licameli,0,0,1,6,2,1,1,[],,1,100249.0,0,0,0,0,32711315.264615,,0,1,0,False,[],,,"... Don't violate precondition of Sequence::GetFloatSampleView().

Sometimes the crash doesn't reproduce and I think that's because of small roundoffs when choosing whether or not to add the second clip to `intersectingClips`

Resolves: #5094 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5075,2023-08-23T08:50:50Z,2023-08-29T10:36:45Z,vsverchinsky,1,0,1,6,1,1,1,[],4027.0,0,524760.0,0,0,0,0,32736005.358403,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build for this fix:  audacity-win-3.4.0-alpha-20230823+888f9ac-x64

This appears to properly fix #4448",,"Resolves: #4448 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4900,2023-07-11T11:54:48Z,2023-07-12T10:45:07Z,LWinterberg,8,0,1,26,1,1,1,[],2787.0,0,4184462.0,0,0,0,0,32780467.652704,,0,1,0,False,"['LWinterberg', 'RJVB', 'Paul-Licameli']","Thanks for doing this for me, saves me some time :) I would probably have thrown in the other patches I made to get Audacity running on 10.9, though. Will try to put up a PR for those when I get around to it.

> @RJVB can you sign the [CLA](https://www.audacityteam.org/cla/)?

> [x] I signed the CLA
> [x] There are no behaviour changes unnecessary for the stated purpose of the PR
> [x] Each commit compiles and runs on my machine without known undesirable changes of behaviour > Are these changes complete?
> 
> RearrangeCursorXpm is mentioned in other places. There is a hand cursor for the drag bar at the top of clips, for the bar in a label, and to rearrange the split waveform/spectrum view.
> 
> Are there similar problems to fix for those?

I'm guessing now that there are no problems, because in those places, static variables are inside functions and not at file scope.
 >I'm guessing now that there are no problems, because in those places, static variables are inside functions and not at file scope.

They're not even static variables, are they? AFAICT these instances get created when a class instance is created. That's safe as long as it only happens when the graphics context is set up correctly.
 @RJVB FYI: We're nearing code freeze for 3.4, if you want to get the other changes in for that version, please open a PR soon. >@RJVB FYI: We're nearing code freeze for 3.4, if you want to get the other changes in for that version, please open a PR soon.

Next couple of days are going to be tough for that for me, so how soon is soon? And how much interest is there anyway in keeping Audacity buildable and/or runnable on OS X 10.9?
 > Next couple of days are going to be tough for that for me, so how soon is soon? 

2 weeks approximately

> And how much interest is there anyway in keeping Audacity buildable and/or runnable on OS X 10.9?

there's a surprising number of people still using Audacity on legacy OSX versions, so having it runnable probably has interest of a couple hundred to a few thousand people. Having it buildable probably is less important. OK, 2 weeks leaves me a little more time to breathe.

>there's a surprising number of people still using Audacity on legacy OSX versions

Probably a predictable effect of Apple making (or having made, in the past) computers that don't break down but that they don't support anymore. My system is officially limited to 10.13, which is probably considered ""legacy"" too by now...

>so having it runnable probably has interest of a couple hundred to a few thousand people. Having it buildable probably is less important.

I can only do both, sorry ;)
 On Monday August 21 2023 03:44:12 LWinterberg wrote:

>2 weeks approximately

Still in time I hope: #5100
Are these changes complete?

RearrangeCursorXpm is mentioned in other places.  There is a hand cursor for the drag bar at the top of clips, for the bar in a label, and to rearrange the split waveform/spectrum view.

Are there similar problems to fix for those?
","Are these changes complete?

RearrangeCursorXpm is mentioned in other places.  There is a hand cursor for the drag bar at the top of clips, for the bar in a label, and to rearrange the split waveform/spectrum view.

Are there similar problems to fix for those?
","Resolves: #4872

PR-ifies the patch provided in that issue. 

@RJVB can you sign the CLA?

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5089,2023-08-25T10:43:41Z,2023-08-28T11:23:59Z,LWinterberg,1,3,4,14,4,3,2,[],251393.0,1,264184.0,0,0,0,0,32817015.122539,,0,4,1,False,['dozzzzer'],Tested,,"* Resolves: #4972
* Updates an FFmpeg link
* Updates the help box for the project rate
* Updates credits",Mix down is understood to include export? Export now has a sample rate setting on its own and no longer needs to be included here. 🤩 
5082,2023-08-24T16:41:19Z,2023-08-28T11:24:31Z,Paul-Licameli,1,3,1,12,3,2,1,[],325842.0,1,326596.0,0,0,0,0,32819547.52399,,1,1,0,False,['dozzzzer'],"The PR fixes the issue #5080 
However, there's still a crash when recording in the Waveform view initially and then resuming recording in the Spectrogram view; it is logged separately as #5094",,"Resolves: #5080

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this the line that was crashing? To my wobbly understanding, `GetOwner()` and `GetHolder()` return a pointer to the same object, only the former a the lock of a weak pointer and the latter, a raw pointer. But that wouldn't explain why this change would fix the crash. There is some complication during recording.  RegisterPendungChangedTrack sets up one or two tracks for which owner and holder differ. Ok."
5078,2023-08-24T08:07:59Z,2023-08-25T09:50:37Z,Gootector,0,0,2,36,1,1,1,[],,0,102502.0,0,0,0,0,33074443.6115,,0,2,0,False,[],,,"Update Polish from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5071,2023-08-22T15:40:27Z,2023-08-23T10:58:19Z,Paul-Licameli,1,0,1,4,1,1,1,[],67255.0,1,69475.0,0,0,0,0,33253124.667006,,1,1,0,False,['dozzzzer'],Tested,,"Resolves: #5070

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5027,2023-08-13T18:12:26Z,2023-08-22T13:27:03Z,Paul-Licameli,11,30,8,303,12,3,1,"['refactoring', 'Music']",160432.0,2,760482.0,0,0,0,0,33330601.367833,,1,8,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased unchanged onto updated #5008  @Paul-Licameli an issue when using the Noise Reduction effect:

- have a stereo/mono track
- select a short region of ~100ms
- Effect > Noise Reduction
- click ""Get Noise Profile""
- observe

Act. result:
![image](https://github.com/audacity/audacity/assets/70063970/e45f88c3-c096-4394-898b-b71c4888aa29)
 @dozzzzer @chinakov See this comment in the other PR that this one depends on: https://github.com/audacity/audacity/pull/5008#issuecomment-1680511643
 So I already fixed this in #5008 which is under test still.

But this branch was not rebased onto that updated branch.

When I do that and rebuild, the problem should disappear.
 @Paul-Licameli Moving back to In Progress:

- when swapping stereo channels, the clip name disappears

**before:**
<img width=""220"" alt=""Screenshot 2023-08-21 at 12 58 25"" src=""https://github.com/audacity/audacity/assets/70063970/87add0ac-4b73-482b-916a-a2ec3487ebd5"">

**after:**
<img width=""220"" alt=""Screenshot 2023-08-21 at 12 58 33"" src=""https://github.com/audacity/audacity/assets/70063970/91f001f3-4cc4-47e2-91f4-87622f04517f"">

- when copying a region of the clip with some envelope points and pasting it into the same clip, envelop points get messed up

**before:**
<img width=""500"" alt=""Screenshot 2023-08-21 at 13 28 23"" src=""https://github.com/audacity/audacity/assets/70063970/96d99149-87b7-49d3-8a30-c63df316f5e9"">

<img width=""300"" alt=""Screenshot 2023-08-21 at 13 30 58"" src=""https://github.com/audacity/audacity/assets/70063970/16c83915-7120-45fd-9e60-0957216c9680"">


**after:**
<img width=""500"" alt=""Screenshot 2023-08-21 at 13 28 33"" src=""https://github.com/audacity/audacity/assets/70063970/6f5ac347-7062-4a65-9121-97c886d60783"">

<img width=""300"" alt=""Screenshot 2023-08-21 at 13 31 05"" src=""https://github.com/audacity/audacity/assets/70063970/b046d8a3-ceb6-43fc-bfc2-114baa4fd173"">

 > @Paul-Licameli Moving back to In Progress:
> 
>     * when swapping stereo channels, the clip name disappears
> 
> 
> **before:** <img alt=""Screenshot 2023-08-21 at 12 58 25"" width=""220"" src=""https://user-images.githubusercontent.com/70063970/262009261-87add0ac-4b73-482b-916a-a2ec3487ebd5.png"">
> 
> **after:** <img alt=""Screenshot 2023-08-21 at 12 58 33"" width=""220"" src=""https://user-images.githubusercontent.com/70063970/262009280-91f001f3-4cc4-47e2-91f4-87622f04517f.png"">
> 
>     * when copying a region of the clip with some envelope points and pasting it into the same clip, envelop points get messed up
> 
> 
> **before:** <img alt=""Screenshot 2023-08-21 at 13 28 23"" width=""500"" src=""https://user-images.githubusercontent.com/70063970/262009705-96d99149-87b7-49d3-8a30-c63df316f5e9.png"">
> <img alt=""Screenshot 2023-08-21 at 13 30 58"" width=""300"" src=""https://user-images.githubusercontent.com/70063970/262010267-16c83915-7120-45fd-9e60-0957216c9680.png"">
> 
> **after:** <img alt=""Screenshot 2023-08-21 at 13 28 33"" width=""500"" src=""https://user-images.githubusercontent.com/70063970/262009740-6f5ac347-7062-4a65-9121-97c886d60783.png"">
> <img alt=""Screenshot 2023-08-21 at 13 31 05"" width=""300"" src=""https://user-images.githubusercontent.com/70063970/262010312-b046d8a3-ceb6-43fc-bfc2-114baa4fd173.png"">

Please make your own checklist of problems at the top.  Anton and I have found this practice useful.

I think you fill find the problem with clip names should be mentioned at PR #5008 but is not the fault of new commits proper to this branch.
 Rebased onto updated #5008.  The problem with track names should be fixed.
 > @Paul-Licameli Moving back to In Progress:
> 
>     * when swapping stereo channels, the clip name disappears
> 
> 
> **before:** <img alt=""Screenshot 2023-08-21 at 12 58 25"" width=""220"" src=""https://user-images.githubusercontent.com/70063970/262009261-87add0ac-4b73-482b-916a-a2ec3487ebd5.png"">
> 
> **after:** <img alt=""Screenshot 2023-08-21 at 12 58 33"" width=""220"" src=""https://user-images.githubusercontent.com/70063970/262009280-91f001f3-4cc4-47e2-91f4-87622f04517f.png"">
> 
>     * when copying a region of the clip with some envelope points and pasting it into the same clip, envelop points get messed up
> 
> 
> **before:** <img alt=""Screenshot 2023-08-21 at 13 28 23"" width=""500"" src=""https://user-images.githubusercontent.com/70063970/262009705-96d99149-87b7-49d3-8a30-c63df316f5e9.png"">
> <img alt=""Screenshot 2023-08-21 at 13 30 58"" width=""300"" src=""https://user-images.githubusercontent.com/70063970/262010267-16c83915-7120-45fd-9e60-0957216c9680.png"">
> 
> **after:** <img alt=""Screenshot 2023-08-21 at 13 28 33"" width=""500"" src=""https://user-images.githubusercontent.com/70063970/262009740-6f5ac347-7062-4a65-9121-97c886d60783.png"">
> <img alt=""Screenshot 2023-08-21 at 13 31 05"" width=""300"" src=""https://user-images.githubusercontent.com/70063970/262010312-b046d8a3-ceb6-43fc-bfc2-114baa4fd173.png"">

So the channel names are explained.  To reproduce other misbehavior of pasting envelopes may require certain precise time selections.  I determined that with a careful example, I can reproduce the problem in versions back to 3.2.0 but not in 3.1.3.

 I suspect commit 33318a421544fcadbf753271500d3bb5b238ba99 introduced the bug.
 Rebase unchanged onto recent master
 TestedNo comment from me that should prevent moving forward, only suggestions and curiosity questions.","No comment from me that should prevent moving forward, only suggestions and curiosity questions.","Resolves: *(direct link to the issue)*

Depends on:
- #5008 

Use only the Envelope stored in the leader channel (while we don't yet have proper wide wave clips),
for drawing, hit-testing, all details of Mixer, and the Set Envelope command.

There are still useless Envelopes in clips of the right channel, but they are ignored.

This eliminates one use of TrackList::Channels outside WaveTrack.cpp or Track.cpp.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

Test checklist:
- [x] Display and editing of envelopes in stereo tracks; click and drag works in either channel, curves are same in each
- [x] Pencil tool (and alt-key paintbrush) works in both channels, when there is nontrivial envelope
- [x] Test envelope and pencil also with the ""*"" multi-tool
- [x] Swap stereo channels
- [x] Mix-and-render and playback with nontrivial envelope is correct in both channels
- [x] ""Set Envelope"" macro command

","Love the naming :-) Still reviewing? `mClips` are not necessarily in order. I'd expect `GetInterval` to be consistent with the visual experience. Why not sorting first? Is `right->mClips.size() == mClips.size()` not necessarily true? `GetTrack().mClips`, similarly to `GetTrack().Intervals()`, is destined to return possibly stereo data. Here we are in a single-channel context. Wouldn't it spare future changes if we used `WaveChannel::Intervals()` right away ? `WaveClip` is in practice still mono but soon to become stereo-capable. It'd be wrong for a `WaveChannelInterval` to return data that belongs to another channel. Are there plans to have a mono API ? Renaming this `GetChannelRMS` would make it less confusing. Not used (and hence `stepsPerWindow` too) Here - some British spelling ;) Does this really cast to `false` ? I'd rather see `false`. Hm. `EffectRepeat` seems unused. Are we aware of that ? Consider placing these four lines in a scope, so as to reassure the reader that `iter` is only used for that. Interesting. Here's an effect that requires joint-stereo processing. But it doesn't care about clip boundaries ... So calling `SetSelected` on each channel was redundant because `tracks.Any<WaveTrack>()` already returns all tracks, leader or not? This nested iteration could well have been interval-then-channel, which is what the code before this change was doing. Any particular reason why you chose this order? What's the track shifter? `WaveTrack` will not be a `WaveChannel` anymore, is that correct ? It might be nicer that way, but for now, the correctness of these transformations does not depend on sorting.

Sorting with each access may be too expensive and keeping sortedness as an invariant would need too much other review to be sure of its completeness. Wherever clips are iterated before, they will be iterated in the same sequence through this new layer of API.  That is more conservative, and one less source of surprising behavior changes. It is still possible to make such tracks, but consider it “undefined behavior” as this huge code restructuring is happening in stages.  I have told QA not to test such cases and not to worry about preserving behavior.

Ultimately, there will be just one WaveTrack with “wide” clips each storing a vector of sequences, possibly more than one.  No longer any correspondence of WaveClips between two WaveTracks.
 Maybe.  Indeed the next PR changes this again. Or rather the next planned pR WaveChannelInterval IS the mono API for the rest of the world that uses WaveTrack.

The next draft PR gives it a GetFloats member function and eliminates some calls of GetClip.  Look ahead at it if you wish. I thought there was already too much diff but I might add a commit to rename that Default construction of built in integral types is always the zero Think again.  Each effect class has a header file that isn’t included anywhere else but its  implementation.  So how do any of them work?  Put a breakpoint in the constructor and figure it out. There is post processing to restore clip boundaries, remapped by the time stretch.

The logic for this is unfortunately replicated in SBSMSEffect, Nyquist, and EQ rather than having a unified implementation applied to all effects.

I became aware of this problem in other refactoring but decided not to address it.  The scope of the restructuring is already big enough. See the Finalize member function The Selected boolean was in Track but is now instead in the channel group Info  structure.

This was accomplished much earlier in this release cycle.

But Vitaly’s great import export refactoring, which I never did review completely, developed somewhat independently of my work and so it reintroduced one of the unnecessary loops that I had eliminated. Track names were another thing formerly duplicated in channels of a stereo track. I eliminated the duplicate data and the need to keep channels consistent.

Likewise rate, gain, pan.  Things really to be associated with the stereo track as a whole, not with one channel of it."
5008,2023-08-07T14:10:35Z,2023-08-22T10:38:41Z,Paul-Licameli,11,3,28,1641,57,3,3,"['refactoring', 'Music']",338865.0,2,1283290.0,0,0,0,0,33340707.114164,,1,28,1,False,"['chinakov', 'Paul-Licameli']","Rebased unchanged onto master, now that the two dependencies are merged.
 > mOutputTracks

Yes there is.

Some stuff is rewritten so that the result of `WideEmptyCopy` and other functions is a single object.

Those objects can't yet be wide wave tracks.  Transitionally, they are track lists.  This isn't the first commit to introduce this sort of thing.

When wide wave tracks are real, the temporary track list objects won't be needed.
 Rebased to recent master with the suggested style changes.
 Rebased onto recent master, and a conflict resolved in StereoToMono.cpp
 Error message while 'getting noise profile' in Noise Reduction effect. 
<img width=""708"" alt=""Screenshot 2023-08-16 at 14 51 59"" src=""https://github.com/audacity/audacity/assets/139755141/4a553dd2-8dac-4261-8cee-abd1ec5fe706"">
 Rebased again without changes onto recent master
 I've found a new issue that I couldn't reproduce on release 3.3.3 and latest master. 
If the User uses the 'Split Stereo to Mono' in the tracks context menu, the tracks are split, but the last (right) channel no longer has it's original audio clip name.

Here is how it should be **(Master, 3.3.3)** after splitting a stereo track to mono track via 'Split Stereo to Mono':
<img width=""1450"" alt=""Screenshot 2023-08-21 at 17 32 32"" src=""https://github.com/audacity/audacity/assets/139755141/3baed0c2-0bb2-426b-bc31-979873b2105a"">

Here is how it **actually** looks in this branch:
<img width=""1450"" alt=""Screenshot 2023-08-21 at 17 33 32"" src=""https://github.com/audacity/audacity/assets/139755141/8eaa9642-2ec5-4c1f-a7d8-6c26c7d2d0e8"">
 Rebased unchanged onto recent master
 > I've found a new issue that I couldn't reproduce on release 3.3.3 and latest master. If the User uses the 'Split Stereo to Mono' in the tracks context menu, the tracks are split, but the last (right) channel no longer has it's original audio clip name.
> 
> Here is how it should be **(Master, 3.3.3)** after splitting a stereo track to mono track via 'Split Stereo to Mono': <img alt=""Screenshot 2023-08-21 at 17 32 32"" width=""1450"" src=""https://user-images.githubusercontent.com/139755141/262055077-3baed0c2-0bb2-426b-bc31-979873b2105a.png"">
> 
> Here is how it **actually** looks in this branch: <img alt=""Screenshot 2023-08-21 at 17 33 32"" width=""1450"" src=""https://user-images.githubusercontent.com/139755141/262055392-8eaa9642-2ec5-4c1f-a7d8-6c26c7d2d0e8.png"">

I don't observe this for newly created tracks.  I think it will only happen for imported tracks, or for clips that are made by the Repeat effect.  I can fix it by just reverting one of the commits.


 Rebased onto #5060, permuted the assertion fix commit to first place, and reverted one of the other commits
 Checklist is complete, all issues fixed. I don't want to block this PR, but I sincerely hope that there are plans to remove code like `(*mOutputTracks->Any<WaveTrack>().begin())->Channels().begin()` repeated all over the place","I don't want to block this PR, but I sincerely hope that there are plans to remove code like `(*mOutputTracks->Any<WaveTrack>().begin())->Channels().begin()` repeated all over the place","Resolves: *(direct link to the issue)*

Depends on:
- #4974 
- #4987 
- #5060

Begin to eliminate the uses of TrackList::Channels outside Track.cpp and WaveTrack.cpp,
including all except one (Repeat) in src/effects.

Instead use WaveTrack::Channels which return objects of the new WaveChannel class,
which does not inherit Track but has a sufficient interface for many purposes, including
getting and setting and appending of sample data, and queries of minimum, maximum,
and RMS values, which are used by effects and analyzers and display.

QA: test stereo and mono cases
- [x] Bug since commit 7d179623: changing track rate shifts track incorrectly
- [x] Recording & playback
- [x] Split stereo (track context menu); correctly panned resulting tracks
- [x] Chirp, tone, silence generation
- [x] EQ
- [x] Change Speed
- [x] Noise Reduction
- [x] Paulstretch
- [x] Change Pitch (high and low quality)
- [x] Sliding time scale (ditto)
- [x] Amplify
- [x] Auto Duck
- [x] Click Removal
- [x] Contrast
- [x] Find Clipping
- [x] Loudness
- [x] Normalize
- [x] Repair
- [x] Truncate Silence
- [x] Compressor
- [x] Any one Vamp plug-in (they make label tracks; see that track naming doesn't change)
- [x] Some Nyquist effects and generators, stereo and mono
- [x] Mixer board sliders and output meters
- [x] Our friend Stereo To Mono, again; cases of multiple selected tracks, some of them already mono, which should be unchanged, and each stereo track correctly mixed down
- [x] Dragging of clips from one track to another
- [x] Export, split-by-tracks
- [x] Compare Audio macro command
- [x] Set rate in the track context menu (not resampling from the Track pull-down menu)
- [x] Keystrokes to edit clip names (including Ctrl+A, C, V, X)
- [x] Correct naming of clips by Import
- [x] Correct naming of multiple new clips by the Repeat effect


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

**Noticed Issues:**

- [x] Setting a different sample rate in the track context menu results in misaligned audio clips in stereo tracks.
- [x] Splitting a Stereo track to Mono via the Track Context menu results in the last channel being 'unnamed'. 
","Completely unreadable. Please at least use parenthesis to clarify the meaning. 

Original code was bad, but this is just esoteric.  I'll make it `(* ++ channels.first).get()` and similar wherever I wrote `&**`
 Thank you, Paul!"
5060,2023-08-20T14:17:06Z,2023-08-22T10:31:46Z,Paul-Licameli,2,1,1,6,1,1,1,[],64840.0,1,159283.0,0,0,0,0,33341125.069858,,1,1,0,False,['petersampsonaudacity'],"**UPDATE**
somehow I had the wrong branch downloaded before - all now seems well in @Paul's branch

Testing on W10 with @Paul-Licameli 's latest branch build:  audacity-win-3.4.0-alpha-20230820+9d21d5c-x64


This does  appears to fix #5055 and #5058  - in Paul's branch build

_I haven't had time to test #5054 yet_


 Testing on W10 with Paul's branch build:  audacity-win-3.4.0-alpha-20230820+9d21d5c-x64

@chinakov 

#5054 Autoduck also appears to work fine:

**Before**
![Spectral test project](https://github.com/audacity/audacity/assets/50205984/6ca4b324-29be-434a-b2f2-99a5877e5895)

**After**
![image](https://github.com/audacity/audacity/assets/50205984/35e2f021-76c8-45dc-9c9c-006cfed07b18)
",,"... AutoDuck was affect too, but differently.  Right channel ended up with left channel's contents, with the fading applied twice.

Resolves: #5054
Resolves: #5055
Resolves: #5058

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",What if `Get` is called on a leader track with `iChannel == 1` and `nBuffers == 1` ? It seems to me that this would still get the left-channel samples. My best guess is that `iter.emplace(ppLeader.advance(IsLeader() ? iChannel : 1)`.
4887,2023-07-08T17:08:23Z,2023-08-21T14:21:27Z,Paul-Licameli,0,0,1,28,4,1,1,[],,0,3791630.0,0,0,0,0,33413703.331115,,0,1,0,False,[],,,"Resolves: #4885

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5006,2023-08-07T13:46:17Z,2023-08-17T20:15:30Z,DavidBailes,0,2,1,17,1,2,1,[],,0,887353.0,0,0,0,0,33738108.695655,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4988

Prior to Audacity 3.3.0 the time controls in the Selection toolbar had Window IDs which were used by scripts for both the Jaws and NVDA screen readers. There were different IDs for each of start, length, center and end. These IDS were ommitted in Audacity 3.3.0

Fix:
Set the Window IDs for these controls

Resolves: https://github.com/audacity/audacity/issues/4988


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Generally you can just write `WindowIDs[modeName.first]` > Generally you can just write `WindowIDs[modeName.first]`

I was unsure whether the range checking you get with at() was needed here or not.
Thanks for the speedy approval."
5040,2023-08-15T16:28:08Z,2023-08-17T16:03:44Z,saintmatthieu,1,9,5,338,24,2,1,['Music'],167209.0,2,171345.0,1,0,0,0,33753208.133814,,0,5,1,False,['dozzzzer'],Tested,,"Resolves: #4850 

QA:
- [x] Test smart clip dragging (hidden data at ends)
- [x] Test that trim handles turn into stretch handles when pressing ALT

Small intentional behavior change:
- [x] dragging of smart clip boundaries allows 2 samples minimum, not 1 as before

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Maybe binary search by time?  But maybe the asymptotic advantage doesn't save  time with typical numbers of clips.
 Can use `as_const` once more
 Declared but not defined in any of the six PRs.

 Beware the difference of `min` and `lowest` for floating-point types!
 Was this little change from a 1 sample minimum to 2 asked for by anyone?

Are you sure it always works as intended?  Maybe somewhere there is some roundoff of the inexact sample time to a discrete sample count that goes off by one.
 Ok, then it's not used. I'll remove. Thanks. No, it wasn't, but in current release, if you trim so far that the visible part is only one sample and you release the trim handle, you cannot trim back (unless you Undo.) Let's ask @LWinterberg.

I think it should always work. The clip's start time is always displayed on a sample position. Great catch, thank you! Please elaborate the comment I added at the top for the QA checklist.
"
5051,2023-08-17T10:24:37Z,2023-08-17T11:43:15Z,vsverchinsky,0,0,2,130,32,1,1,[],,0,4720.0,0,0,0,0,33768846.30428,,0,2,0,False,[],,,"Removes `PROHIBITED` keyword and fixes compilation issue in Qt branch caused by name conflict with Qt keyword

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5004,2023-08-07T11:31:57Z,2023-08-17T11:42:14Z,vsverchinsky,2,10,6,2185,49,2,1,[],611033.0,1,864621.0,1,0,0,0,33768908.154232,,0,6,1,False,"['vsverchinsky', 'dozzzzer']","@chinakov 
At least three cases are worth checking:
1) Start stable/release version, make changes in preferences *and* plugin manager, start version from this PR and make sure that changes are preserved.
2) Start fresh audacity with no config, check that both audacity.cfg and pluginregistry.cfg exist
3) Install and run old version (maybe pre 3.0.0), close it and run version from this PR, make sure that UI is OK.

Also I found few bugs in commit history that were addressed earlier and probably it worth checking that there are no regressions

[Bug 2135](https://bugzilla.audacityteam.org/show_bug.cgi?id=2135) - Audacity crashes if launched with a locked pluginregistry.cfg file
[Bug 2651](https://bugzilla.audacityteam.org/show_bug.cgi?id=2651) - If pluginregistry.cfg gets locked while Audacity is active the Plug-in Manager is blocked - with no help
[Bug 2650](https://bugzilla.audacityteam.org/show_bug.cgi?id=2650) - Virgin launch fails with no pluginregistry.cfg file created
[Bug 1264](https://bugzilla.audacityteam.org/show_bug.cgi?id=1264) - Writing to locked audacity.cfg not reported to user
[Bug 2649](https://bugzilla.audacityteam.org/show_bug.cgi?id=2649) - Launching Audacity with a locked audacity.cfg file gives not one but three error messages - and no help
[Bug 2652](https://bugzilla.audacityteam.org/show_bug.cgi?id=2652) - User is not warned if they launch Audacity with a locked pluginsettings.cfg file TestedThere is some feedback I would like to see addressed ",There is some feedback I would like to see addressed ,"
This PR removes explicit dependency on `wxFileConfig` that sometimes require `wxApp` instance. That should ease ongoing replaforming.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Some Doxy comments? Move to CPP? No need, nested class is always a friend IsSame? This scares me a lot, as I don't see how it can be safe. I think this is the case where shared_ptr shines.  Probably it's worth commenting that complex Flush implementation is hidden in mConfig now. ```c++
for(auto& group : GetChildGroups())
   ...
```
would simplify the code a lot, removing unnecessary nesting Mark `explicit` please `unique_ptr` makes a lot of sense here, as you express that SettingsWX takes the config ownership from the caller. However, I think `mConfig` should be a shared pointer. Luckily, shared_ptr has a constructor that consumes `unique_ptr`.

Also, I vote for marking the constructor `explicit`. Not sure if I understand that, but I attempted to change ownership policy in a new separate commit"
4994,2023-08-04T10:57:31Z,2023-08-15T14:30:23Z,crsib,0,2,10,989,27,1,1,[],,0,963172.0,0,0,0,0,33931625.253776,,0,10,0,False,[],,,"Resolves: #4931

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`mTimeSigUpper > 0`? It has become redundant indeed since raw pointers are eliminated
5024,2023-08-11T15:34:18Z,2023-08-15T12:00:25Z,Paul-Licameli,0,0,1,50,3,1,1,[],,0,332770.0,0,0,0,0,33940622.244771,,2,1,0,False,[],,,"Resolves: #4998

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5023,2023-08-11T13:38:09Z,2023-08-15T11:52:55Z,Paul-Licameli,4,1,1,6,1,1,2,[],72746.0,1,339289.0,0,0,0,0,33941074.601009,,2,1,0,False,"['petersampsonaudacity', 'Paul-Licameli']","Testing on W10 with @Paul-Licameli 's latest branch fix for this:  audacity-win-3.4.0-alpha-20230811+2294b4e-x64

First I get this:
![image](https://github.com/audacity/audacity/assets/50205984/1bb0af08-f410-4e41-b7f1-0c707551aafd)

Then after pressing the OK button I get:
![image](https://github.com/audacity/audacity/assets/50205984/750ea32a-1462-4a8f-909e-a84fa71d5971)

Then after pressing the OK or Cancel buttons Audacity crashes

--------------------------------------------------------------------------------------------------

I am very curious as to why the error message refers to an issue at **D:\a\audacity ...**

I do happen to have a D: drive on this particular PC - but it is my onboard 1TB spinning metal drive.

Audacity (including this branch) is always installed on the SSD 250GB  C: drive .

And all my active projects and temp files for audacity and audacity settings folder are on the C:drive too. > Testing on W10 with @Paul-Licameli 's latest branch fix for this: audacity-win-3.4.0-alpha-20230811+2294b4e-x64
> 
> First I get this: ![image](https://user-images.githubusercontent.com/50205984/260219176-1bb0af08-f410-4e41-b7f1-0c707551aafd.png)
> 
> Then after pressing the OK button I get: ![image](https://user-images.githubusercontent.com/50205984/260219211-750ea32a-1462-4a8f-909e-a84fa71d5971.png)
> 
> Then after pressing the OK or Cancel buttons Audacity crashes
> 
> I am very curious as to why the error message refers to an issue at **D:\a\audacity ...**
> 
> I do happen to have a D: drive on this particular PC - but it is my onboard 1TB spinning metal drive.
> 
> Audacity (including this branch) is always installed on the SSD 250GB C: drive .
> 
> And all my active projects and temp files for audacity and audacity settings folder are on the C:drive too.

This happens only when recording to stereo, not to mono?

I pushed another commit that I think will complete the fix.
 > This happens only when recording to stereo, not to mono?

No it also crashes when I record in Mono - but with mono I get an  error message but it is immediately overwritten with the debug report, the red recording cursor dances along - and then just crashes with no further input from me.

Shift+Record also crashes.

_I'll try the fresh commit/build later._ Testing with @Paul-Licameli 's latest branch build:  audacity-win-3.4.0-alpha-20230812+6ad372f-x64

This now appears to work fine on W10 - tested

1. stereo and mono
2. Play button
3. R shortcut key
4. Transport > Recording Record command
5. Shift modified recording
6. Timer Record

All work fine in this branch build",,"Resolves: #4996

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I've tried to say during the standup ""Oh, wait, I saw the fix in a different PR"", but I was muted.

So...

Oh, wait, I saw the fix in a different PR :-)"
5034,2023-08-14T20:41:23Z,2023-08-15T11:44:06Z,ksoze95,0,0,3,26,4,1,1,[],,0,54167.0,0,0,0,0,33941604.716146,,0,3,0,False,[],,,"Resolves: #5033

The text and icons looks particular incorrect under Mac OS.  The icons are too small and the text are too large.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5036,2023-08-14T20:51:37Z,2023-08-15T10:57:56Z,ksoze95,0,0,1,2,1,1,1,[],,0,50785.0,0,0,0,0,33944375.204995,,0,1,0,False,[],,,"Resolves: #5035 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4802,2023-06-16T14:16:33Z,2023-08-14T14:37:24Z,ksoze95,0,2,2,746,38,2,0,[],,0,5120046.0,0,0,0,0,33996420.700798,,1,2,0,False,[],,,"Resolves: #4800 

The hover highlight over the track control, on the side bar, does not behave correctly when in dark mode.  Raised #4801 to track this issue.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I would much prefer to see themes loaded from the QML, not from C++. We want custom themes, so this must be supported anyway.  Done."
5022,2023-08-11T10:05:58Z,2023-08-14T11:28:31Z,Paul-Licameli,1,0,1,3,1,1,1,[],269244.0,0,269244.0,0,0,0,0,34023859.723423,,2,1,0,False,['petersampsonaudacity'],Tests fine on W10- with latest 3.4.0 alpha:  audacity-win-3.4.0-alpha-20230814+8bf108e-x64-msvc2022,,"Resolves: #5020

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5014,2023-08-08T11:16:50Z,2023-08-11T13:54:06Z,LWinterberg,0,0,1,376,5,1,1,[],,0,268650.0,0,0,0,0,34279403.990861,,0,1,0,False,[],,,"Resolves: #5009

* Thickens the vertical bars of ] [
* Angles the I-beam more to make it less similar to the trim cursors",
5019,2023-08-10T02:38:42Z,2023-08-11T10:41:32Z,Gootector,0,0,3,692,1,1,1,[],,0,115370.0,0,0,0,0,34290974.039339,,0,3,0,False,[],,,"Update Polish from Transifex
Many fixes.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4987,2023-08-02T18:14:12Z,2023-08-11T10:33:22Z,Paul-Licameli,4,3,8,327,30,2,2,"['refactoring', 'Music']",505304.0,1,749953.0,0,0,0,0,34291463.474858,,1,8,1,False,"['chinakov', 'Paul-Licameli']","Rebased onto updated #4974 and inserted one new commit
 Benchmark Tool crashes Audacity, but it is also present in Master. Just adding this for visibility. 

#5021  One new one-line commit to fix Benchmark
 Benchmark fixed, entire ticket tested. Thank you! ",,"Resolves: *(direct link to the issue)*

Depends on:
- #4974

The next transformation calls Flush() after appending on leader tracks only.

This eliminates only one call to TrackList::Channels outside WaveTrack.cpp
(in Generator.cpp) but also eliminates many loops over channels in Import,
where those channels were not yet grouped into TrackLists.

However the work is incomplete because some exception safety guarantee
must still be implemented to maintain consistency of pairs of channels, as
in the case of exhausting drive space while recording.

The title of this branch suggests that rewriting of the appending before flushing
will be needed too, but this isn't done yet.

QA:  For each of these operations, make a stereo track, save the project, reopen, and don't see mismatched clip end times:
- [x] Recording
- [x] Mix and render
- [x] At least one built-in generator (e.g. Chirp)
- [x] Importing with FFmpeg, FLAC, MP3_MPG123, OGG, WAV, WavPack, Import Raw
- [x] Effects:  Change Speed, EQ (just test one UI), Silence generator, Paulstretch, Change Tempo (high quality and low), Stereo To Mono, Compressor, and any one Nyquist effect or generator

Also:
- [x] Benchmark diagnostic

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`startSample` is now different, should it be `mpSpectralData->GetCorrectedStartSample()` instead? Repeats what's in the base class implementation You're right
"
4974,2023-07-31T12:29:31Z,2023-08-11T00:02:50Z,Paul-Licameli,5,0,22,1965,120,1,2,"['refactoring', 'Music']",16613.0,2,905604.0,0,0,0,0,34329295.736131,,0,22,1,False,"['chinakov', 'Paul-Licameli']","Two more commits, leaving only one more call to `Selected` to clean up, in TwoPassSimpleMono.cpp.

But that remaining one is still not easy.
 Rebased unchanged onto #4961 which was rebased onto master after the merge of import/export refactoring
 Rebased, unchanged onto updated #4961  If a User chooses to generate 'Silence' in any selection in a Stereo Track, the Right channel won't be silenced, even though it's selected. 
Silence not applied:
<img width=""1873"" alt=""Screenshot 2023-08-08 at 14 43 35"" src=""https://github.com/audacity/audacity/assets/139755141/cf2131a8-1e59-450c-85ad-a7ff53fd92dd"">

Silence applied:
<img width=""1873"" alt=""Screenshot 2023-08-08 at 14 44 02"" src=""https://github.com/audacity/audacity/assets/139755141/e0bffbf3-2bd3-4e0d-b0e0-be43fffb829b"">


- [ ]  Generate Silence into a selection in a stereo track Rebased onto recent master;  added a one-line commit to fix generation of silence",,"Resolves: *(direct link to the issue)*

Depends on:
- #4961

This very hopefully titled pull request is not complete but review may begin on the early commits.

When all is done, the last remaining uses of TrackList::Any, Selected, Find, and direct range-for
outside of class Track itself will be gone.

Then might follow renaming of Leaders, SelectedLeaders, and FindLeader back to Any, Selected, Find.

But after that still remains a large task:  Review all the uses of TrackList::Channels (many of them
recently introduced), and make them disappear except inside classes Track and WaveTrack.

QA:
- [x] Persistency of projects with stereo tracks
- [x] Ctrl+A, C, X, V keys, or corresponding menu commands, when there is an edit cursor in a clip title
- [x] Very old code in ""Compare Audio"" macro command was changed (so it really works on mono and stereo tracks) but maybe nobody cares
- [x] Append-record, and do Ctrl+B to add labels, and make some display changes (like track height), while recording; then stop and test Undo and Redo (All of the recording should be sequenced in undo history after the other changes)
- [x] Change Speed effect on a stereo track
- [x] A Nyquist generator
- [x] Find Clipping done with and without a label track called ""Clipping"" already present
- [x] Import mono, stereo, (and examples with more than two channels if you can find them??) using FFmpeg, FLAC, MPG 123 (How?  I don't know, ask Dmitry), OGG, WavPack; check correct muting when a solo track was already in the project; check numbers added to track names, in case more than one new track is made by one import
- [x] Import Raw making a stereo track (I'm not sure how you do this, but data-bending can be fun)
- [x] Recording dropout detection into stereo track (there is an alpha item in Tools to enable simulation of droupout errors)
- [x] FFmpeg import example with stream delay (how?)
- [x] Generate Silence into a selection in a stereo track
- [x] Compressor in stereo track
- [x] High quality Change Pitch on stereo
- [x] Save mono and stereo tracks in Audacity 2.4.2, then open the project in 3.4 (this crashes in master! but not in 3.3)
- [x] Cross-paste copy-paste with hidden data on stereo tracks, and long enough to cause progress dialogs, with appropriate scales; try with all the different ""Pasted Audio"" choices in the Tracks Behaviors preferences
- [x] Change format of a long mono or stereo track, with appropriate progress indicator
- [x] Opening of projects with mono and stereo tracks that were saved in 3.3
- [x] Compressor in a stereo track, again

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

**Noticed issues:**

- [x] Generate Silence into a selection in a stereo track
",
5017,2023-08-09T11:42:57Z,2023-08-09T12:59:27Z,crsib,0,0,1,2,1,1,1,[],,1,4593.0,0,0,0,0,34455502.88194,,1,1,0,False,[],,,"Resolves: #3778

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5016,2023-08-08T14:47:35Z,2023-08-09T12:57:28Z,Paul-Licameli,0,0,1,6,1,1,1,['Effects (EGATs)'],,1,79797.0,0,0,0,0,34455622.874795,,2,1,0,False,[],,,"Resolves: #5010

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4989,2023-08-03T10:15:43Z,2023-08-08T10:53:39Z,DavidBailes,1,0,1,23,4,1,1,[],13558.0,0,434276.0,0,0,0,0,34549458.1002,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 (and Mac macOS 12.6.7) with @DavidBailes 's latest branch build:  audacity-win-3.4.0-alpha-20230803+43a29d1-x64

1) this now works properly on Windows with this branch build with the initial dialog entry **Filename** having the focus on calling up the Export Audio dialog.

2) On Mac **Filename** remains the initial focus so remains working properly _(as was that case in earlier 3.4.0 alphas)_",,"Resolves: https://github.com/audacity/audacity/issues/4960

Problem:
This appears to be caused by a bug in wxWidgets 3.1.3, and only affects Windows. Issue #1561 is probably caused by the same bug.

Fix:
For Windows only, explicitly set the initial focus.




<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
5012,2023-08-08T09:06:03Z,2023-08-08T09:37:43Z,crsib,0,0,1,17,3,1,1,[],,0,1904.0,0,0,0,0,34554012.045871,,0,1,0,False,[],,,"This PR only affects ""system-only"" Linux builds, it can't be tested.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4992,2023-08-03T15:08:02Z,2023-08-04T18:42:38Z,DavidBailes,0,0,1,6,1,1,1,[],,0,99276.0,0,0,0,0,34866923.161305,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4955

Problem:
In the Export Audio dialog, if the format is set to Custom FFmpeg Export, then the Current format and Curren Codec text boxes have empty accessibility names.

Fix:
Set the accessibility names.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4961,2023-07-27T11:08:30Z,2023-08-04T12:11:44Z,Paul-Licameli,11,2,17,998,55,3,3,"['refactoring', 'Music']",577.0,2,698429.0,0,0,0,0,34886944.974356,,0,17,1,False,"['dozzzzer', 'crsib', 'chinakov', 'Paul-Licameli']","I have found that this problem can be demonstrated with shorter tracks, and it may influence other effects when sample rate is not default.

Even creating a stereo track, setting its rate to 48k, and generating noise makes wrong results.
 Rebased without changes onto the updated #4945 Rebased onto #4668 too, and the branch now duplicates the commits of #4945

Conflicts needed resolution with import export refactoring at the commits

""Replace Channel::GetOffset() everywhere with GetStartTime()..."" (Export.cpp was deleted; the modified lines no longer exist anywhere)

""Rewrite and comment TrackList::GetStartTime and GetEndTime..."" (only whitespace in TimerRecordDialog.cpp)

""In various places, call GetStart/EndTime only on leader tracks..."" (change ExportAudioDialog.cpp instead)



 Have you pushed, though? > Have you pushed, though?

Sorry, yes now
 > I'm not sure, that this PR will be merged before there exporter PR is complete

Exactly, I want this one based on that.  That other one may still change more, but I have done the known work of conflict resolution.

My next PR in the queue #4974 needs a rebase onto this one and other conflict resolutions with the import/export branch.
 > > I'm not sure, that this PR will be merged before there exporter PR is complete
> 
> Exactly, I want this one based on that. That other one may still change more, but I have done the known work of conflict resolution.
> 
> My next PR in the queue #4974 needs a rebase onto this one and other conflict resolutions with the import/export branch.

And the import export branch just had its last commit amended, and I rebased my branch again to keep up to date, this time with no more changes needed. @Paul-Licameli issues found:

- crash when mixing stereo down to mono

- **Align tracks > Align Together** produces incorrect result: 

https://github.com/audacity/audacity/assets/70063970/9ae37057-4fe7-4eef-8f53-9dc90a843594

Expected result:

https://github.com/audacity/audacity/assets/70063970/450504fe-1617-4d79-b385-d8c8688cef35


 A two-line fix for the problem in alignment.
 @Paul-Licameli - issue with Align Tracks has been fixed. Is it true that the crash on mixdown to mono also got fixed? I couldn't reproduce it - but I am not sure if it's because it got fixed.  Acceptance criteria fulfilled, and checklist tested. This is ready for merge, thank you!
I'm not sure, that this PR will be merged before there exporter PR is complete ","I'm not sure, that this PR will be merged before there exporter PR is complete ","Resolves: #4941

Depends on:
- #4945
- #4668

Eliminate the confusing, unexplained, and wrongly implemented distinction
between start time and ""Offset"" of tracks.

Define track start time in terms of ChannelGroup's Intervals -- not with
independent virtual functions.

Reviewed all uses of GetStartTime and GetEndTime; changed them to use
the leader track only and ignore misaligned clips.

Also simplified cursor movement and selection by clip boundaries in
ClipMenus.cpp, ignoring misalignments.

Also changed SyncLock::Group to return a range of iterators over leader
tracks only.

*(short description of the changes and the motivation to make the changes)*

QA:
- [x] Effect preview plays correctly (in case selection does not start at time 0; and the effect is linear (such as Amplify))
- [x] Behavior change as in #4941 (e.g. Ctrl + A when the only track is a label track; selection starts at leftmost label's start, not 0)
- [x] Likewise for Ctrl + J, and Select button of a track
- [x] Select button for other kinds of tracks
- [x] Display and dragging of MIDI track
- [x] Duplication, and undo/redo of dragging, in MIDI, Wave, Label tracks that don't start at 0
- [x] Mix-and-render to stereo where start time is not 0
- [x] LOF import of stereo track with nonzero offset
- [x] Cross project cut and paste of stereo with nonzero start time
- [x] Split New of stereo with nonzero start time
- [x] Test at least one edit-by labels command, again, with at least two labels
- [x] Track alignment commands, stereo cases included
- [x] Sync-lock adjustment of label tracks for alignment commands is better than in master
- [x] Sync-lock adjustment where bottom, unselected track is stereo
- [x] Truncate Silence correctly refuses to work when multiple members of a sync lock group are selected
- [x] Sync lock adjustment for paste
- [x] Correct bounds of motion for Horizontal scroll bar and Shift + mouse wheel
- [x] Horizontal scrollbar thumb changes correctly for magnification or editing change of longest track's length
- [x] Select Time macro command, using end of tracks
- [x] Shift+Left/Right, Ctrl+Shift+Left/Right keys
- [x] Generate tone into a stereo track selection, changing its length; cutlines right of selection move correctly (enable cutlines first in preferences)
- [x] Append-record onto a stereo track begins at the correct time
- [x] Contrast tool for selection in a stereo track
- [x] Paulstretch changes selection correctly
- [x] Stereo to Mono where track begins later than 0
- [x] Export uses correct start and end times of stereo track (even when not 0)
- [x] Transport > Cursor To commands on stereo tracks
- [x] Select > Audio Clips commands with stereo tracks and Trasport  > Cursor > clip boundary commands
- [x] Note:  behavior may change in case of tracks with misaligned clips, while we still don't prevent creation of such tracks; ignore these cases


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should it be simply `.0`? Or if time is allowed to be negative should it be `std::numeric_limits<double>::lowest()`?
> For floating-point types with denormalization, min() returns the minimum positive normalized value Thanks!  You are right.  I remembered this in other commits of this pull request but forgot it here.
"
4945,2023-07-23T17:58:05Z,2023-08-03T13:54:35Z,Paul-Licameli,8,1,27,1432,25,1,1,[],175535.0,2,935794.0,0,0,0,0,34970607.283575,,0,27,1,False,"['chinakov', 'Paul-Licameli']","Rebased onto #4937; added commits to rewrite Loudness; no changes in earlier commits.

Consider the branch complete now.
 #4937 needed another rebase to resolve a conflict, and so this branch was rebased again onto it.
 One more rebasing to keep up to date with bug fixes added to #4937 I rebased onto the updated #4943 and corrected the commit comment, and otherwise no changes.
 Rebased onto updated #4937
 Dependency #4937 is now merged, so this was rebased without changes
 Rebased unchanged onto recent master after import/export refactoring was merged.
 @Paul-Licameli  - tested, no regression is noticed. Everything seems to be in order, thank you!",,"Resolves: #4943

Depends on
- #4937

Rewrite more iterations over tracks without Any() or Selected() in src/effects.

Still not done removing Selected() in TwoPassSimpleMono.cpp which is used by Compressor.
That will wait until a later PR.

Fix a minor problem with AutoDuck and a missed internationalization in FindClipping (strings in generated labels).

- [x] Amplify
- [x] Auto Duck
- [x] Click Removal
- [x] Equaliazation
- [x] Find Clipping
- [x] Repair
- [x] Compressor
- [x] Zoom-to-fit behavior when generating the first track in an empty project
- [x] Reverse (test with label tracks; multiple clips and silences between; selection boundaries inside clips or inside silences)
- [x] Normalize
- [x] Loudness (with and without the process-independently checkbox)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Typo in commit message: `Lower the loop over channels in EffectProgress` instead of `Lower the loop over channels in EffectReverse` 
4896,2023-07-10T21:15:38Z,2023-08-02T20:16:41Z,vsverchinsky,5,12,4,532,12,3,1,[],10679.0,0,1983668.0,1,0,0,0,35034082.72311,,0,4,0,False,"['saintmatthieu', 'vsverchinsky', 'Paul-Licameli']","Can this be rebased onto 36f6e6f9b2238a777704d034cef786059eec7da8 or later, so that there are fewer un-merged commits from Matt in it?
 > Can this be rebased onto [36f6e6f](https://github.com/audacity/audacity/commit/36f6e6f9b2238a777704d034cef786059eec7da8) or later, so that there are fewer un-merged commits from Matt in it?

This branch is on top of Matthieu's branch, not master. @saintmatthieu Commented out `Stretch*To` lines and rebased on recent master Fantastic, thank you ! I locally rebased my https://github.com/audacity/audacity/pull/4881 onto this branch and tested stretching using these handles. Works beautifully, thanks @vsverchinsky !Only one requested change from me, that of using ALT instead of CTRL.","Only one requested change from me, that of using ALT instead of CTRL.","Resolves: #4851 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Thanks for adding `const`ness! Minor: curly initialization brackets would work. All these declarations could also be `const` it would seem. The previous formatting was the correct one. Your new code indents by 4 instead of 3. The way I do it is provisionally copy-paste one `.clang-format` (e.g. that in `lib-stretching-sequence`) in the root directly and format only my changes as I go. I know it's not perfect, but ... Important : The modifier agreed upon with @LWinterberg and @Tantacrul was `ALT`, in the end. This duplicates similar functions among other handles, in cases where I write something by-analogue I usually prefer to ""copy"" code-style as well. But this note is more about constness of copied-by-value argument, right? From what I see it's not a common practice in Audacity's code Unfortunately this file was created with 4-space intedentation, and later few lines got 3-space tab. May be you are right, and it would be better to continue replace 4-space tabs with 3-space tabs line by line, until entire file gets formatted correctly I don't understand what you mean by ""copied-by-value argument"".
I see, yes, that this non-const pattern is in other similar methods. Do as you please ;) I see. Up to you. ""whose"" not ""which's""
 Thanks!"
4668,2023-05-05T23:34:31Z,2023-08-02T12:26:16Z,vsverchinsky,24,30,89,26161,243,4,3,[],4469443.0,0,7649557.0,0,0,0,0,35062264.454004,,1,89,0,False,"['petersampsonaudacity', 'DavidBailes', 'LWinterberg', 'crsib', 'vsverchinsky']","Rebase on recent master, no other changes @petersampsonaudacity all issues from the [list](https://github.com/audacity/audacity/issues?q=is%3Aissue+is%3Aopen+%22New+Export%22+label%3Aimport-export) were addressed
@crsib I added constraints to ffmpeg and mp2 exporters, no other encoder seem to specify them
@LWinterberg if I didn't miss anything: options lineup, multiple metadata editing, new timer record dialog export > @petersampsonaudacity all issues from the [list](https://github.com/audacity/audacity/issues?q=is%3Aissue+is%3Aopen+%22New+Export%22+label%3Aimport-export) were addressed
> @crsib I added constraints to ffmpeg and mp2 exporters, no other encoder seem to specify them
> @LWinterberg if I didn't miss anything: options lineup, multiple metadata editing, new timer record dialog export

@vsverchinsky Have you had a look at: https://github.com/audacity/audacity/issues/4317#issuecomment-1571712895 ?

One possible solution to issue 1, would be to make the current selection radio button the last of the three buttons, though I guess that probably isn't the most logical order. (This is assuming the the current selection radio button is the only one that may be disabled.)

Issue 3 has been fixed. > Have you had a look at: https://github.com/audacity/audacity/issues/4317#issuecomment-1571712895 ?

Not yet, will try to fix issues you mentioned, thanks! @LWinterberg could you please also take a look at issue 6?

 @petersampsonaudacity #4819 fixed
@DavidBailes regarding https://github.com/audacity/audacity/issues/4317#issuecomment-1571712895 - I removed ""force export to mono"" as it now duplicates ""mono"" checkbox. Keys are assigned to major controls > @DavidBailes regarding [#4317 (comment)](https://github.com/audacity/audacity/issues/4317#issuecomment-1571712895) - I removed ""force export to mono"" as it now duplicates ""mono"" checkbox. Keys are assigned to major controls

@vsverchinsky 
Two of the access keys are difficult to see:
1. Folder: using d would be better than l.
2. Custom mapping: using a would be better than g.

In addition I'm still very concerned about the keyboard navigation of the radio buttons for the export range - see: https://github.com/audacity/audacity/issues/4317#issuecomment-1625363019
See also: https://github.com/audacity/audacity/pull/4668#issuecomment-1623608700
 > @petersampsonaudacity #4819 fixed

@vsverchinsky 

Testing on W10 with Vitaly's latest branch build:  audacity-win-3.4.0-alpha-20230713+e7f58dd-x64

#4819 is properly fixed:
a) the new dialog appears
b) there is NO crash when accessing the Export dialog(s) for the automated export
c) The Timer record works and exports properly > In addition I'm still very concerned about the keyboard navigation of the radio buttons for the export range - see: [#4317 (comment)](https://github.com/audacity/audacity/issues/4317#issuecomment-1625363019)
> See also: [#4668 (comment)](https://github.com/audacity/audacity/pull/4668#issuecomment-1623608700)

@vsverchinsky See also https://github.com/audacity/audacity/issues/4317#issuecomment-1635677467 - @LWinterberg is happy with changing the order of the export range radio buttons to get round this bug. > @vsverchinsky See also [#4317 (comment)](https://github.com/audacity/audacity/issues/4317#issuecomment-1635677467) - @LWinterberg is happy with changing the order of the export range radio buttons to get round this bug.

@vsverchinsky . Thanks for changing the order. Noticed that the accessibility name of the multiple files radio button is still ""Export split in parts"", and so needs changing to ""Export multiple files"". @DavidBailes 

Actually in @vsverchinsky 's latest branch build:  audacity-win-3.4.0-alpha-20230713+e7f58dd-x64

it is already **Multiple Files**
![image](https://github.com/audacity/audacity/assets/50205984/79730a9c-8ef0-4a36-b8ca-328e47b7914c)
 > @DavidBailes
> 
> Actually in @vsverchinsky 's latest branch build: audacity-win-3.4.0-alpha-20230713+e7f58dd-x64
> 
> it is already **Multiple Files**

@petersampsonaudacity 
By ""accessibility name"" of the radio button I was referring to the name of the radio button read by screen readers. Sometimes it's helpful if this name is different from the visible name. In this case the text ""export range"" is not automatically read by screen readers, so it's helpful to add the word export to the accessibility name. Just use narrator to see what's going on in this case (windows + ctrl + enter to start or stop). > Noticed that the accessibility name of the multiple files radio button is still ""Export split in parts"", and so needs changing to ""Export multiple files"".

@DavidBailes Thanks! fixed
 @vsverchinsky . Only just noticed that there are a couple of other accessibility names that need setting. When the format is set to Custom FFmpeg Export, there are two text controls: Current format and Current Codec. These currently have empty accessible names. WindowAccessible is automatically set as the accessible object for text controls in ShuttleGui, so all that is needed is to set the accessible name for these text controls (like you did for sliders). > I finished this round, I am quite concerned about loosing STEREO in MP3 export

Testing on W1- with @vsverchinsky 's latest branch build:  audacity-win-3.4.0-alpha-20230713+e7f58dd-x64

Using my clearly obvious wide-panned stereo track - tack 1 from Sgt. Pepper's Lonely Hearts club band.

I looks, and sounds, as though the stereo output from MP3 export is **true stereo** .
S0 it looks like we have lost the option for **Joint Stereo** that we da in the <P3 export dialog we had in earlier Audacity versions:
![image](https://github.com/audacity/audacity/assets/50205984/4cc337cb-cbd8-488a-a66b-0ae3caa6b550)
 In an earlier version of Vita;'s new export we has a field for **Channel Mode** which has now disappeared in the later versions:
![image](https://github.com/audacity/audacity/assets/50205984/5c89e8b5-d167-4626-b3db-255a68e46759)
 > S0 it looks like we have lost the option for Joint Stereo that we da in the <P3 export dialog we had in earlier Audacity versions:

It actually set to `JOINT_STEREO` now, there is a discussion on that topic above. It seems like lame can switch between M/S and stereo when it's set to `JOINT_STEREO` mode > > S0 it looks like we have lost the option for Joint Stereo that we da in the <P3 export dialog we had in earlier Audacity versions:
> 
> It actually set to `JOINT_STEREO` now, there is a discussion on that topic above.

In which case I am **_very_** concerned at the loss of proper stereo where the two channels are encoded separately and independently.

That is certainly the way I have always configured my many MP3 exports over the years. @petersampsonaudacity I've put up an explanation in #4940 @LWinterberg   ACK

I've updated the draft manual page for this. Discussion transferred to #4940 let's please continue this discussion in https://github.com/audacity/audacity/discussions/4940 and leave this thread for the code reviewy bits @dozzzzer @chinakov 
Few notes for testing:
1) Exporting via macro and cloud upload use same export routines
2) Transport->Record->Timer Record uses simplified export audio dialog (it's not mentioned in figma) New commit added that fixes #4959  Last commit approved.I don't see blockers; just a few comments to sum up:

1. Some exporters do not provide the rates list. We should carefully review them.
2. UI code is hard to read and understand. 
3. This needs to be rebased carefully on the recent master, especially after merging the mixer PR.

For this reason, I don't press approve exactly now, but I would like @dozzzzer to start checking the builds from this PR (please, coordinate with @vsverchinsky). Given that we are code review limited for now and this task's complexity, we can make an exception and start verifying it before completing and formal approval.  I finished this round, I am quite concerned about loosing STEREO in MP3 export Rebasing is needed, and there are some conflicts","I don't see blockers; just a few comments to sum up:

1. Some exporters do not provide the rates list. We should carefully review them.
2. UI code is hard to read and understand. 
3. This needs to be rebased carefully on the recent master, especially after merging the mixer PR.

For this reason, I don't press approve exactly now, but I would like @dozzzzer to start checking the builds from this PR (please, coordinate with @vsverchinsky). Given that we are code review limited for now and this task's complexity, we can make an exception and start verifying it before completing and formal approval.  I finished this round, I am quite concerned about loosing STEREO in MP3 export Rebasing is needed, and there are some conflicts","Resolves: #4317

Implements new export dialog UI, continues export refactoring

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Ideally (not critical now, though) we should ditch `m` prefix. This members are no longer private  :-) `final`? I wonder if it is safe No range checks are performed. I understand that it was the case in the original code, but some safety here won't hurt :-) We must describe what happens if the format index is not in `[0, GetFormatCount())`.

Should we return the default format? This generally happens in this commit but not for every plugin. Should we return empty format info, which will break the assumption that there is always at least one file extension? Should we throw? 

In any case, it needs to be decided and then uniformly followed.  LOL Do we really (like really) want to make the function non idempotent? I don't quite understand why  There are 9 places where such code is used in this commit. Should we give it a name? I would've called it something like `ProgressDialogProgressListener`or similar. Not Generic for sure :-) I believe that readabily would benefit from moving `ExportResult` out of the `ExportProgressListener` scope Looks like a typo to me. I think it worth documenting this flags Usually it doesn't return nullptr. For example `return wxDynamicCast(wxWindow::FindWindowById( miId, mpDlg), wxBitmapButton);` Early continue to reduce nesting? I wonder if we should find a way to populate this list from the module CMakeLists.txt Should the exceptions inherit AudacityException? (Or even MessageBoxException) I wonder if this is useful at all :-)

`FFmpeg for Audacity` doesn't ship executables for a long time, `Lame for Audacity` is long deprecated Should it be `mContext`? Should it be `lib-tags-interface`? static_cast or ""constructor"" cast? Why is this list empty? Ditto Should this be XO? Should there be an i18n-hint? It doesn't look exactly clean...

Nothing better really comes to mind now Early `continue`? Should this be moved out of the function into the anon namespace? I can do that in a separate commit Each implementation has non-empty list of extensions, so formally - yes, it's safe
```
FileExtension ExportPlugin::GetExtension(int index)
{
   return mFormatInfos[index].mExtensions[0];
}
```
 Isn't relevant any more, sorry for confusion :) Isn't relevant too, sorry again :)"
4937,2023-07-20T10:32:52Z,2023-07-31T15:39:56Z,Paul-Licameli,19,5,36,2954,67,2,3,"['refactoring', 'Music']",182462.0,2,968828.0,0,0,0,0,35223495.195735,,0,36,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased onto updated Rewrite-some-effects branch with no changes
 Rebased again onto recent master now that #4908 is merged
 Found an issue @Paul-Licameli:

- when generating a **Rhythm track**, **Pluck** or **Risset Drum** sounds (so only Nyquist generators) and only into a stereo track, Audacity crashes. No such issue when generating into a mono track or/and using the built-in generators. 

[Audacity_dbgrpt-6560-20230725T183911.zip](https://github.com/audacity/audacity/files/12163598/Audacity_dbgrpt-6560-20230725T183911.zip)


 Rebased onto recent master to resolve the conflict in NoiseReduction.cpp
 One new bug fix commit for review
 @Paul-Licameli There's an issue with the **Change Pitch** effect:

- with a **mono track** it crashes Audacity when applying OR previewing the effect (with high-quality stretching both ON and OFF):
[Audacity_dbgrpt-6613-20230726T123238.zip](https://github.com/audacity/audacity/files/12171307/Audacity_dbgrpt-6613-20230726T123238.zip)

- with a **stereo track** it crashes Audacity only when previewing the effect and only with high-quality stretching ON: 
[Audacity_dbgrpt-6940-20230726T124710.zip](https://github.com/audacity/audacity/files/12171400/Audacity_dbgrpt-6940-20230726T124710.zip)

_UPD: same behavior was observed when using Change Tempo effect_ I pushed the small fix for Zero crossings:  it should examine selected tracks only.
 > @Paul-Licameli There's an issue with the **Change Pitch** effect:
> 
>     * with a **mono track** it crashes Audacity when applying OR previewing the effect (with high-quality stretching both ON and OFF):
>       [Audacity_dbgrpt-6613-20230726T123238.zip](https://github.com/audacity/audacity/files/12171307/Audacity_dbgrpt-6613-20230726T123238.zip)
> 
>     * with a **stereo track** it crashes Audacity only when previewing the effect and only with high-quality stretching ON:
>       [Audacity_dbgrpt-6940-20230726T124710.zip](https://github.com/audacity/audacity/files/12171400/Audacity_dbgrpt-6940-20230726T124710.zip)
> 
> 
> _UPD: same behavior was observed when using Change Tempo effect_

Thanks.

Just tell me the symptoms -- I think these .zip files are not useful.
 @Paul-Licameli also a crash when applying **Sliding Stretch** on a mono track > @Paul-Licameli There's an issue with the **Change Pitch** effect:
> 
>     * with a **mono track** it crashes Audacity when applying OR previewing the effect (with high-quality stretching both ON and OFF):
>       [Audacity_dbgrpt-6613-20230726T123238.zip](https://github.com/audacity/audacity/files/12171307/Audacity_dbgrpt-6613-20230726T123238.zip)

I think this bug exists in master now, so there should be an issue, and is not introduced by this PR.  A bisection among recent merged branchess might help me.

> 
>     * with a **stereo track** it crashes Audacity only when previewing the effect and only with high-quality stretching ON:
>       [Audacity_dbgrpt-6940-20230726T124710.zip](https://github.com/audacity/audacity/files/12171400/Audacity_dbgrpt-6940-20230726T124710.zip)
> 
> 
> _UPD: same behavior was observed when using Change Tempo effect_

 Never mind bisection -- I figured out all the reported problems and pushed two more commits.
 @crsib review the last 3 commits please?  Then I will rebase with some squashing and await complete testing.
 > Last 3 commits reviewed!

Merci Rebased onto recent master with squashing of fixups, otherwise no changes.
 @Paul-Licameli some new issues were found:

- destructive application of the **Compressor** effect both on mono and stereo tracks causes Audacity to crash
- cutting/copying a region from a mono track and pasting it into a stereo track causes Audacity to crash
- recording into an existing mono/stereo track (also Punch and Roll recording) causes Audacity to crash
- **Plot Spectrum** always returns a blank frequency spectrum grid > @Paul-Licameli some new issues were found:
> 
>     * destructive application of the **Compressor** effect both on mono and stereo tracks causes Audacity to crash
> 
>     * cutting/copying a region from a mono track and pasting it into a stereo track causes Audacity to crash
> 
>     * recording into an existing mono/stereo track (also Punch and Roll recording) causes Audacity to crash
> 
>     * **Plot Spectrum** always returns a blank frequency spectrum grid

New commits to address all of these problems.  Please review again, @crsib 
 Rebased onto recent master (just one new commit there)
 One more small commit.  Please review again @crsib  Re-tested:

- destructive application of the Compressor effect both on mono and stereo tracks 
- cutting/copying a region from a mono track and pasting it into a stereo track
- recording into an existing mono/stereo track (also Punch and Roll recording)
- Plot SpectrumThere is one place that looks to be typo, otherwise no major blockers for me Last 3 commits reviewed!","There is one place that looks to be typo, otherwise no major blockers for me Last 3 commits reviewed!","Resolves: #4957

Depends on
- #4908

Some iterations with Any and Selected are changed to Leaders and SelectedLeaders,
by lowering looping over channels into member functions of WaveTrack.

Some member functions of WaveTrack and virtual member functions of Track that
produced other track objects are changed to return lists of tracks, and Paste is changed to
accept a list of tracks as an argument.  This change of functions signatures may be undone
in the future when this great transformation is completed, and wide wave tracks really exist
as single tracks.

See commits 56175dd3270c30ded5a69e48d8d94e9e642dcde6 and
ceb695e8576a1abfc9aae7b06729e205a2697ea1 which already made similar changes for
two member functions of WaveTrack.

QA: 
Known BUG introduced by this, to be repaired when we really have ""wide"" Wave clips:
- #4954

Test effects, specifically selecting only a part of a mono or stereo track, including multiple clips, with and without gaps between:
- [x] Change Speed
- [x] Noise or tone or chirp generator
- [x] Noise Reduction
- [x] Change Pitch (high and low quality)
- [x] Change Tempo (high and low quality)
- [x] Sliding stretch
- [x] Any Nyquist effect
- [x] Equalization (test either of the two UI)
- [x] EQ and Compressor applied to tracks that are not in 32 bit float format
- [x] PaulStretch
- [x] Stereo To Mono
- [x] Truncate Silence
- [x] Repeat

Also these editing operations, on mono and stereo tracks:
- [x] Cut (all kinds of tracks, and with cutlines enabled in Preferences)
- [x] Copy (all kinds)
- [x] Split Cut
- [x] Split New
- [x] Split Delete
- [x] Paste (of all kinds of tracks, and of multiple copied clips)
- [x] Cross-project paste (all kinds of tracks, and including hidden smart clip data, and into an empty project)
- [x] Trim (Ctrl + T)
- [x] Duplicate (Ctrl + D) (all kinds)
- [x] Delete (Ctrl + K)
- [x] All the edit-by-labels commands (see #3679; only preserving behavior, not fixing the bugs; you may need sync lock on)
- [x] Detach at Silences
- [x] Silence (Ctrl + L) (not the generator)
- [x] Split
- [x] Join
- [x] Effect preview
- [x] Sync-lock adjustment of tracks of all kinds, to shorter or longer length
- [x] Select in a wave track, then generate Silence of 0 duration
- [x] Punch and Roll recording
- [x] Recording into existing or same track; with view changes and Ctrl + B to drop labels during recording; then undo and redo
- [x] Undo and redo of changes to all kinds of tracks
- [x] Make a stereo track; pick in it and run a Nyquist generator
- [x] Recording to new track that would be off-screen correctly scrolls the view vertically
- [x] File > Export as ... commands correctly make mono or stereo files depending on the tracks in the project
- [x] Persistency of mono and stereo tracks
- [x] Find Zero Crossings in mono and stereo
- [x] Plot Spectrum for mono and stereo (just use default settings)
- [x] Changing WaveTrack color (in the context menu); and mix and render preserves color; mono and stereo
- [x] Set Track Visuals macro command to change color
- [x] Conversion of track sample format (mono and stereo)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should this be SelectedLeaders? I vote this for the best commit of this PR :-) I don't have a strong opinion, but probably two breaks would improve this code a bit  Ouch yes
 Curious, why this one in particular?
"
4962,2023-07-27T12:20:10Z,2023-07-27T13:58:21Z,Paul-Licameli,0,0,1,9,1,1,1,[],,1,5895.0,0,0,0,0,35575192.419805,,1,1,0,False,[],,,"Resolves: #4868

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4948,2023-07-24T09:52:05Z,2023-07-26T11:53:27Z,Gootector,0,0,1,4,1,1,1,[],,0,180082.0,0,0,0,0,35669092.649808,,0,1,0,False,[],,,"Changes:
- ""the [license file]"" like ""the [Audacity website]"" and ""the [XXX]"" in the MuseScore's README.md (https://github.com/musescore/musescore/#readme)
- deleted unnecessary space

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4953,2023-07-25T12:54:42Z,2023-07-25T16:17:51Z,Paul-Licameli,1,0,1,16,1,1,1,[],11356.0,2,12192.0,0,0,0,0,35739627.84937,,0,1,1,False,['chinakov'],"The crash has been fixed, thank you!",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4949,2023-07-24T12:21:36Z,2023-07-25T12:28:42Z,Paul-Licameli,2,0,1,12,1,1,2,[],1460.0,2,86829.0,0,0,0,0,35753379.034429,,0,1,1,False,"['chinakov', 'Paul-Licameli']","Sorry, the fix was incomplete.  Please review again.
 This is fixed, thanks! ",,"Resolves: #4930

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4908,2023-07-13T11:40:30Z,2023-07-25T12:19:32Z,Paul-Licameli,9,1,33,1418,32,1,2,"['refactoring', 'Music']",4329.0,2,1039146.0,0,0,0,0,35753930.497816,,0,33,1,False,"['chinakov', 'Paul-Licameli']","lib-channels was rebased onto recent master, and this was rebased with no changes onto that.
 lib-channel branch was rebased onto more recent master;  this was rebased onto that with no conflicts; and some commits were added for the Truncate Silence effect.
 Cherry-picked #4911 which must be included to test behavior of this branch
 Rebased onto recent master.

Add one one-line change in Repeat.
 @Paul-Licameli  - if the User enables the Sync-Lock Track feature, and decides to move audio clips around in any pattern with more than one Track, Audacity crashes. 

Hardware/OS: iMac 2017, i5 - macOS 13.2.1 Ventura

**Steps to reproduce:**
1. Launch Audacity
2. Enable Sync-Lock Tracks
3. Create a Mono Track
4. Create a Stereo Track
5. Generate a Tone or import an audio file to the Mono Track
6. Click-and-drag the newly added audio of the Mono Track
7. Observe result

This has been also tested on **Master,** and this issue has not been reproduced. 
Here are debug logs:
[Audacity_dbgrpt-45812-20230721T154356.zip](https://github.com/audacity/audacity/files/12123718/Audacity_dbgrpt-45812-20230721T154356.zip)

 > @Paul-Licameli - if the User enables the Sync-Lock Track feature, and decides to move audio clips around in any pattern with more than one Track, Audacity crashes.
> 
> Hardware/OS: iMac 2017, i5 - macOS 13.2.1 Ventura
> 
> **Steps to reproduce:**
> 
>     1. Launch Audacity
> 
>     2. Enable Sync-Lock Tracks
> 
>     3. Create a Mono Track
> 
>     4. Create a Stereo Track
> 
>     5. Generate a Tone or import an audio file to the Mono Track
> 
>     6. Click-and-drag the newly added audio of the Mono Track
> 
>     7. Observe result
> 
> 
> This has been also tested on **Master,** and this issue has not been reproduced. Here are debug logs: [Audacity_dbgrpt-45812-20230721T154356.zip](https://github.com/audacity/audacity/files/12123718/Audacity_dbgrpt-45812-20230721T154356.zip)

I observe a problem only if attempting to drag the clip from the mono to the stereo track, not when just dragging it horizontally.
 The problem is that master contains the fix for this at commit aa59545651dd7b88c87b6bb87a38ad1332c1361a, but this branch is not yet rebased onto most recent master.
 Rebased onto recent master, with some squashing but no changes.
 Tested, all is well. Thank you!I can approve this round, in case anything else is added I will resume the review Last commit is approved as well","I can approve this round, in case anything else is added I will resume the review Last commit is approved as well","Resolves: *(direct link to the issue)*

Depends on
- #4876
- #4911

Some of the built-in effects are restructured with outer loops over
leader tracks.

Looping over channels for Sync Lock adjustment is now hidden
inside the Track and WaveTrack overrides, which must be passed a
leader track.  Future pull requests will similarly lower other loops
over channels.

Ignore misalisgnment of clips;  Track::GetStartTime and GetEndTime
are called in fewer places on right channels.  All such calls should be
eliminated in future pull requests.

QA:  test these destructive effects with mono and stereo tracks, and also with sync lock adjustment of other tracks, and
also observing whether the preservation of clip boundaries in the selection works as before
(for each effect; there isn't consistency now among effects about clip boundaries, and fixing that is not in scope of this)

- [x] Equalization
- [x] Change speed
- [x] Generating sound into selection, with sync lock adjustment of another track
- [x] Paulstretch
- [x] Repeat
- [x] Change Pitch (high and low quality)
- [x] Change Tempo (hight and low quality)
- [x] Silence, Noise, Chirp, Tone generators
- [x] Sliding stretch
- [x] Truncate Silence
- [x] Any one Nyquist effect that causes a sync-lock adjustment
- [x] Sync lock after paste
- [x] Noise reduction


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Awesome :-)
4938,2023-07-20T12:57:39Z,2023-07-21T13:24:57Z,LWinterberg,1,0,1,2,1,1,1,[],955.0,0,89366.0,0,0,0,0,36094283.570935,,0,1,0,False,['LWinterberg'],"(Given the issue this fixes doesn't have a STR, I'm not sure if this really is meaningfully QA-able. This PR probably stands and falls with just the code review determining whether this actually is a typo)",,"Resolves: #4410

PRified the fix provided in the issue by @jfroyall

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4932,2023-07-19T13:23:12Z,2023-07-19T16:47:57Z,Paul-Licameli,0,0,1,2,1,1,1,[],,0,12288.0,0,0,0,0,36256230.66418,,1,1,0,False,[],,,"Resolves: #4930

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4933,2023-07-19T15:44:27Z,2023-07-19T16:33:15Z,crsib,0,0,1,2,1,1,1,[],,1,2935.0,0,0,0,0,36257110.700529,,0,1,0,False,[],,,"This PR does not require QA

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4510,2023-04-07T00:08:00Z,2023-07-19T11:30:02Z,aniruddhJo,5,0,1,4,2,1,1,[],61392.0,0,8940123.0,0,0,0,0,36275311.764178,,0,1,0,False,"['crsib', 'LWinterberg', 'petersampsonaudacity']","Testing on W10 with @aniruddhJo 's branch build:

This change looks fine to me .

@LWinterberg can we possibly get it pulled into master or even 3.3.0?

![image](https://user-images.githubusercontent.com/50205984/230649171-ee833d75-f84d-494f-ace6-90120bca793d.png)
 We are already receiving translations, so I would say no. This one is targeted at master, not release. It definitely doesn't go into 3.3. BUMP @LWinterberg @crsib 

Can we get this pulled for the 3.4 alpha by any chance ?

As it says in #4487 
>The entry in Warnings Preferences labelled Saving Projects is confusing to many users as experience on the Forum over time shows.

This PR fix addresses this issue
 Further BUMP

@LWinterberg @crsib 

Any chance we can get this pulled into master for 3.4.0 please?

_It is a mere couple of very straightforward string changes ..._

Back in April Leo said:
>no objection from me

And Dmitry said back then that it was only held up by incoming translations _(and right now we should be a fair way off finalizing translations, as the new Export cjanges will need to be dealt with)_no objection from me",no objection from me,"Resolves: #4487

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

Image For Changes:-

![image](https://user-images.githubusercontent.com/29252878/230515033-c5132e96-7052-429c-b728-accf00202473.png)
",
4925,2023-07-18T18:20:17Z,2023-07-19T09:23:43Z,crsib,0,0,266,21484,411,1,1,[],,0,54210.0,0,0,0,0,36282890.352908,,0,266,0,False,[],,,"
- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4922,2023-07-16T12:18:39Z,2023-07-18T13:07:48Z,Paul-Licameli,0,0,1,3,1,1,1,[],,1,175753.0,0,0,0,0,36355847.49384,,1,1,0,False,[],,,"Resolves: #4921

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4906,2023-07-13T11:06:48Z,2023-07-14T15:44:05Z,Paul-Licameli,0,0,1,2,1,1,1,[],,0,103040.0,0,0,0,0,36692073.630806,,1,1,0,False,[],,,"Resolves: #4902

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4876,2023-07-05T20:37:03Z,2023-07-14T15:39:18Z,Paul-Licameli,6,0,12,2028,34,1,1,"['refactoring', 'Music']",151602.0,1,759739.0,0,0,0,0,36692361.509076,,1,12,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased onto recent master after merging two dependencies.
 Rebased again.  All the dependencies are now merged

 Rebased onto #4887 which fixes a recent regression and changes Track.*
 More self-review of the time-shifting stuff to my own satisfaction now.

Rebased onto recent master.

Not dependent on bug fix #4885, which still has other blocking problems still to be figured out.
 Rebased onto more recent master, resolving unimportant conflict in comments
 Tested",,"Resolves: *(direct link to the issue)*

Depends on
- #4825
- #4844
- #4797

Split lib-channel from lib-track.

Define interfaces to iterate over a Track (or ChannelGroup, its new base) by
significant time intervals, alternatively to the iteration over Channels.

Define abstract ChannelInterval as the intersection of the information of a Channel
and a ChannelGroupInterval;  and Channel and ChannelGroupInterval each define
an iterator over those.

Thus these are somewhat like rows, columns, and cells of a matrix, and convenient
striding by either.

QA:
- [x] Known behavior changes to ignore:  In case of misalignments, right channel clip boundaries are ignored for snapping.
- [x] Briefly test display & interaction with the four kinds of tracks; and mono and stereo
- [x] Painting of track (not clip) names (a preference turns them on)
- [x] Resizing of track height and channel height
- [x] Time Shift Left and TimeShiftRight (under Extra > Edit), applied to selections within each of the four kinds of tracks (bind them to keystrokes to make repeated trail easy; these are important for accessibility)
- [x] Punch and roll recording
- [x] Dragging clips (left, right, and between tracks)
- [x] Undo and redo of channel height and minimization changes

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4911,2023-07-14T12:25:21Z,2023-07-14T15:32:22Z,Paul-Licameli,0,0,1,5,1,1,1,[],,0,11226.0,0,0,0,0,36692778.70007,,1,1,0,False,[],,,"Resolves: #4909

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4912,2023-07-14T13:36:26Z,2023-07-14T15:31:11Z,Paul-Licameli,2,0,1,6,1,1,1,[],3879.0,0,6888.0,0,0,0,0,36692854.058421,,1,1,0,False,"['LWinterberg', 'dozzzzer']","I don't think they should be consolidated per clip. If you take two steps to trim a clip, undoing can well show these two steps. > But is it the desired behavior?

Yes, the fix looks good to meBut is it the desired behavior? I think that they should be consolidated per clip. (@dozzzzer @LWinterberg)",But is it the desired behavior? I think that they should be consolidated per clip. (@dozzzzer @LWinterberg),"Resolves: #4892

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4886,2023-07-08T15:15:38Z,2023-07-14T11:36:49Z,Paul-Licameli,1,0,21,890,68,1,1,"['refactoring', 'Music']",437288.0,1,505275.0,0,0,0,0,36706917.217589,,1,21,1,False,['dozzzzer'],Tested,,"EdResolves: *(direct link to the issue)*

All uses of TrackList::Any(), Selected(), and Find() need to be replaced, ultimately,
with Leaders(), SelectedLeaders(), and FindLeader().

This cleans up many of the easier uses.

Known minor changed behavior:
- text of progress dialog in resampling
- When misaligned tracks exist, the hit area for the separator between channels is smaller top to bottom

QA: verify unchanged behavior
- [x] Play with time track
- [x] Label editing dialog
- [x] I changed Karaoke too?  ha ha ha. what didn't change?
- [x] Mixer board, with mono, stereo, and MIDI tracks
- [x] ""Set Label"" macro command
- [x] Find Clipping, and Nyquist analyzers, reuse existing label track if present
- [x] Export MIDI
- [x] Export multiple by labels
- [x] Cut, copy, paste, select-all of text in focused label of label track
- [x] Export labels
- [x] Edit > Labeled Audio > etc. commands; and when no tracks are selected, then they apply to all wave and MIDI tracks
- [x] Edit > Labels > Paste Text to New Label
- [x] Extra > Selection > Move to previous or next label
- [x] Multiple tracks:  click in one changes label selection; but ESC before button up, restores label selection
- [x] More than one time track cannot be created
- [x] Muted or not-solo track in mixer board has inactive meter
- [x] Exactly when wave or MIDI tracks exist: View > MixerBoard available, playback available, 
- [x] Warning when attempting to save a project with no tracks
- [x] When there is a solo track, new imported audio or MIDI tracks are mute
- [x] Timer Recording diallowed when there are any tracks
- [x] When any track is solo, other MIDI and wave tracks are colored as mute
- [x] Import macro command, into empty project, selects all tracks afterward
- [x] Start and end times update in Contrast when you measure foreground or background
- [x] Export (including Export Mixer dialog and Export Multiple) correctly applies solo button
- [x] Select > Clip menu items, when some wave tracks were selected, and when none
- [x] Paste anything into a project when nothing was selected
- [x] Transport and play-at-speed toolbar buttons enable and disable for presence or absence of wave or MIDI tracks
- [x] Recording or timer recording into selected tracks disallowed when their rate doesn't match recording rate
- [x] Top of available spectral selection toolbar values is 1/2 of greatest rate of any of the tracks
- [x] EQ and classic filter effects disallowed when tracks of different rates are selected
- [x] First track is focused when file opens, or after undo or redo
- [x] First selected track, or first of all tracks when none selected, is focused after import
- [x] After destructive effect is applied, first selected track scrolls into view if it was offscreen
- [x] Noise reduction, compressor, loudness effects
- [x] Edit > Labels > Paste New Label uses the first seledcted label track or if none, then the first one after the first selected track of any kind
- [x] Ctrl + Home navigates focus to the first track
- [x] Ctrl + End focuses last track
- [x] Showing and hiding of stackable effect sidebar, including when undo and redo make the track disappear
- [x] When you click a label bar, and no tracks were selected, then all become selected
- [x] Select > Spectral > Next higher and next lower (might want to bind to keystrokes)
- [x] Correct progress dialog scale when doing Normalize or a Nyquist effect, with mono and stereo tracks
- [x] Persistency of non-empty mono and stereo track data
- [x] Resampling of mono and stereo tracks... there may be a small change in progress dialog text (numbering the tracks) and I don't care
- [x] Track selection changes: Shift + Click on track control panel (range of tracks), also in Mixer board, also Ctrl + click
- [x] Select None menu command
- [x] Up and down arrow keys to change track focus, including ""Move track focus cycles repeatedly through tracks"" preference, mono and stereo tracks present
- [x] Track is selected after dragging affordance handle
- [x] Shift + Click inside a track extends set of selected tracks; test Ctrl + click too
- [x] Sync lock grouping rules are unchanged (a group is maximal range of wave and/or note tracks plus one or more label tracks below)
- [x] Make Stereo command in Track's drop-down menu

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4883,2023-07-07T09:46:48Z,2023-07-13T11:08:51Z,saintmatthieu,0,2,1,14,1,1,1,[],,1,523323.0,1,0,0,0,36795001.561131,,0,1,1,False,[],"Make the suggested change to avoid narrowing.
","Make the suggested change to avoid narrowing.
","Resolves: #4882

Fix in recent caching refactoring code, where the calculation of number of samples for readout wrongly compared absolute with relative times.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","You might use `limitSampleBufferSize`
 In fact that would be more correct.  The narrowing to size_t here might sometimes make a small number.  Better to widen `length` before taking `min`
"
4897,2023-07-11T05:18:40Z,2023-07-13T07:16:46Z,Gootector,0,0,1,8,1,1,1,[],,0,179886.0,0,0,0,0,36808928.961427,,0,1,0,False,[],,,"Update Polish from Transifex
Changes: 'again' translated as 'ponownie'.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4870,2023-07-04T13:40:19Z,2023-07-11T15:55:06Z,saintmatthieu,5,10,2,43,4,2,2,[],252.0,1,612887.0,1,0,0,0,36950631.758002,,0,2,0,False,"['Paul-Licameli', 'saintmatthieu']","@Paul-Licameli the lightweight version you proposed to the project tempo sync problem.
I guess I caught all places where `mClips.push_back` was used, but still don't feel so good about it. The `WaveClipList` diff was bigger, but I felt safe.
To get the best of both worlds - safety and small diff - we'd need an `std::vector<WaveClipHolder>` decorator. I have never tried it before, though, and suspect that to be a fair piece of work. The vector of clips is still private to WaveTrack so there is still only one source file to review to be sure that the change is complete.

I didn’t see the case for reuse of a separate class 
WaveClipList. But there are unit test failures @Paul-Licameli I'd like to be given a reason why it is wrong to keep the clips in sorted order now already. It may not be strictly necessary for this PR, but I guess it will never be and I can't see how it hurts. Don’t complicate this pull request.

Your attempt was incomplete anyway because you didn’t sort tracks when deserializing a saved project, and I’m not sure what else is needed to maintain the invariant in case clips are modified.  Reasoning about the completeness is more review burden on me that I don’t want just now.

I see build failures because unit tests don’t pass.  Figure this out first.
",,"Resolves: #4869 

A small PR for a private method in `WaveTrack`, `InsertClip`.
This method inserts clips in order -> various places where the list was sorted are now obsolete.
The method also maintains project tempo information on a `WaveTrack`'s clips.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

Things to test:
Changes are rather limited, and so could be testing. Checked should nevertheless at least be
- [x] Creating clips on a track in random places should not break
- [x] Reordering them by means of copy-paste
- [x] Export and mix-and-rendering after the previous two steps.","This duplicates the member in base class Track.  Perhaps define a const accessor function instead I’d like a different name for this function, like `InsertClip`

I may want to strengthen the internal invariant, so that clips are in fact maintained in sorted sequence.

The function name should not suggest something about the position of the clip in the list. Good idea. Good idea. Don’t add this commits!  I said I may strengthen the ordering guarantee in future.  That work is not done yet.
 Don’t do this.  Just push back as in what I reviewed before.
 Don’t remove this. Don’t over promise in the comment.
 Still unresolved:  don't delete this sort
 Ah crap. Thanks."
4867,2023-07-03T16:23:34Z,2023-07-10T21:54:48Z,saintmatthieu,12,27,1,175,15,2,1,[],8879.0,0,624674.0,0,0,0,0,37015452.485944,,1,1,0,False,"['dozzzzer', 'saintmatthieu', 'Paul-Licameli']","First round of review is done.  Not approved yet. I've noticed a problem.

1. I create a label track, add a label at time t=1.
2. I half the project tempo, the label goes to t=2, as expected.
3. I undo with ctrl+Z : now the label is at time t=0.5.

Haven't verified this, but I guess this is because the label track is copied for undo purposes. When undoing, it replaces the track modified in the last step. That would fit:

1. I create a label track, ...
2. I half the project tempo, ... => and ""undo-list"" label track is created beforehand, with label at t=1.
3. I undo ... => the track in the undo list replaces the project's track, with label at t=1, but then the time-signature restorer calls OnProjectTempoChange. So the original label position is restored, but then time-stretched.

Don't know the solution yet.

 Looks like I solved it, but it'll be worthwhile reviewing with care. > Looks like I solved it, but it'll be worthwhile reviewing with care.

I am more confident now. Is there now only one commit?
 > Is there now only one commit?

Yes. Now that ProjectTempoListener.h is gone, you might also put all of that class inside the anonymous namespace, making the symbol tables a tiny bit smaller and link time a tiny bit less.

Remembering this in similar cases might have some cumulative effect.  Don't ask me to quantify.
 It's good enough to merge now.  Compilation is fixed.

Suggestions only to use the anonymous namespace, and skip the needless construction step.

Update the PR or issue description with what QA should test.

The expectation is that three of the four track types update themselves correctly for changes of project tempo, and also that undo and redo work -- and also, cut-copy-paste, even between projects.

 Persistency too should be on the QA checklist
 @Paul-Licameli could you please rebase this PR on the more recent `master` (containing the fix for that error of having mismatched sample rates when opening a project) so that I could make sure that persistency works? > @Paul-Licameli could you please rebase this PR on the more recent `master` (containing the fix for that error of having mismatched sample rates when opening a project) so that I could make sure that persistency works?

I did that, and resolved its conflicts with my recently merged work.

Persistency of project tempo in the clips is not yet implemented in this pull request.
 What is expected to work, is that note, label, and time tracks correctly adjust how they are drawn as project tempo changes.

The work for wave tracks isn't yet here.
",,"Resolves: #4849 

Propose a publisher of project tempo changes. `Track` has an abstract method for `WaveTrack`, `LabelTrack`, `NoteTrack` and `TimeTrack` to implement.
Add the implementation in `WaveTrack`. `WaveClipList` is proposed as wrapper of `WaveTrack`'s `mClipList` to make sure that newly-added clips get the most up-to-date project tempo information.

This PR is a fresh start for https://github.com/audacity/audacity/pull/4853.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

Things to test:
- [x] Project tempo change now affects all tracks except the audio tracks. For non-audio tracks, changing the project tempo should result in the track's horizontal scaling staying in sync with the beats-and-measure ruler. 
- [x] Audio tracks should still stay in sync with the time ruler
- [x] Change project tempo for all track types, and make sure that this is correct.
- [x] Copy/paste between the projects
- [x] Undo/Redo
- [x] Save, close and reopen projects should work

... and everything else you deem worthwhile testing of course.
","As I said before:  this entire class could be eliminated, and instead you can write

`using ProjectTempoListener = std::function<…>;` You mean `oldTempo = mTempo`? The extra indirection of WaveClipList serves no purpose.  I say remove that class and simplify. Supply this before my approval.  I think it’s very easy. Not in principle difficult either, but I won’t demand it Again I don’t see why the publisher must be a member of ProjectManager.

I would just make it an independent attached object on the Project’s ClientData::Site.

And then it really needs only a .cpp file, no .h file, because it does all its magic by registering its factory at startup. … if in fact there remains any need to define this interface, but I doubt even that  Again:  I think you can eliminate this class, and even eliminate the std::function alias, and make all of it implementation detail of the Publisher.

And new criticism:  you need to iterate all tracks now, not just Wave tracks. > And new criticism: you need to iterate all tracks now, not just Wave tracks.

Silly me. Looks like it works. Coming up. You know it gets annoying when you're (probably) right for the 10th time in a row? Now I remember why this is needed.

If a clip is cut from project A and pasted in B, it needs to know immediately what the tempo of B is to be painted and played back correctly. The clip copy constructor cannot rely on that information from the other clip.

When do we know for sure when a clip becomes visible in a project? I can only think of this moment, when the clip is pushed into a track's clip list. This class is here to make sure that this doesn't happen without a tempo update.

But it doesn't have to be part of this very PR, we'll have time to debate over this. `WaveClipList` only added a `std::optional<double>` data member, which could just as easily become part of `WaveTrack.`
 Pleased to see you figured this out.  I had forgotten the details of using the allegro library.

So you have completely implemented this new virtual for all except the WaveTracks!
 No, if you call `WaveClipList::PushBack`, it sets the project tempo on the clip.

```
void WaveClipList::PushBack(WaveClipHolder clip)
{
   if (mProjectTempo.has_value())
      clip->SetProjectTempo(*mProjectTempo);
   mClips.push_back(std::move(clip));
}
``` Expect a small conflict if you rebase this onto my Clip-views branch.  I eliminate `Track::vrulerSize`.
 As I said, this header file isn't needed.  Just put all in the .cpp file.

There are many examples already of .cpp files without companion .h files, when registration at startup time is enough to cause the code to be visited.

For instance in src/export
 Compilation failed for me becuase ""Observer.h"" was not included
 Compilation failed for me because ""float.h"" was not included
 I think this step of construction is not needed.  There will not yet be any tracks.
 Yes - which leaves Audacity in an inconsistent state : change project tempo and all tracks shrink or expand except for the most important one :D Thanks. The previous solution remembered old project tempo in ProjectTimeSignature.  Now you store last known tempo in each track.

I think I understand what justifies this.  It's not always duplicated everywhere.  A track could be duplicated into an undo state or in the clipboard.  It remembers what project tempo was at the time the duplicate track was created.  We don't want to normalize it to some tempo value, because we want to delay the time when we must compute the time stretch, which is not perfectly invertible, and so, lossy.



 Good to start testing.  I think copy and paste will work fine for MIDI and label tracks.  The TrackList listener was all you needed.  (TimeTrack does not copy and paste.)

 Still unresolved
 Still, you might simply change every `push_back` in WaveTrack to use instead a new private member function of WaveTrack that does this.
 This, and also to reduce cognitive load when trying to figure out what happens when tracks in the undo stack miss out on project tempo updates and later get inserted into the list. Now it's easier."
4866,2023-06-30T12:24:24Z,2023-07-10T10:19:28Z,SoapGentoo,2,0,1,40,15,1,1,[],4297.0,0,887727.0,0,0,0,0,37025951.671014,,0,1,0,False,"['crsib', 'SoapGentoo']","@crsib I went ahead and replaced all occurrences of `%hs`, since they're invalid under C99 Thank you for your contribution! ",,"Bug: https://bugs.gentoo.org/909201

Resolves: #4847

gettext 0.22 is more pedantic with validating the destination string and ensuring that it represents a valid format string.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4797,2023-06-16T12:07:56Z,2023-07-07T16:07:49Z,saintmatthieu,13,30,8,2513,68,2,0,[],202.0,0,1828793.0,0,0,0,0,37295476.952936,,2,8,0,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","As mentioned in the description, this PR is based on @Paul-Licameli 's current #4746; you may (should) ignore his commits.

Before going through the commits, I recommend taking a look at `./libraries/lib-stretching-sequence/readme.md`, which presents the rationale for the newly introduced methods in `WideSampleSequence` as well as the `lib-stretching-sequence` implementation. I don't understand all but here are some things to change.

- The internal cursor, if really necessary, should be a hidden implementation detail of `StretchingSequence`.
   - `ResetCursor` is called (outside `StretchingSequence`) only in `MixAndRender.cpp` immediately after construction.  Eliminate that.  If it isn't needed for Export, I think it is also not needed here.
   - `WaveTrack` has no need to override the new functions for the cursors.  Those overrides are unreachable.
- `lib-mixer` should not be changed at all.
   - The remaining change there after doing the previous is to add `ClipInterface`.  Instead put that in `lib-stretching-sequence`.  Let `lib-wave-track` depend on that -- in other words, inverting the dependency from what the first attempt did
- Don't deprecate the overload of `Get` taking channel number and buffers.  I think it will still be needed for painting code which will still need that pattern of ""channel-major, clip-minor"" access to the data going ""against the grain"" of the new data organization.
 Thanks Paul for your timely review.
> The internal cursor, if really necessary, should be a hidden implementation detail of `StretchingSequence`

Although possible for this PR, I'd rather not. `MixerSource` will need to call this to change position or direction of play when looping (in `MixerSource::Reposition`) and scrubbing. > Let lib-wave-track depend on that

Works for me. Done. >  I think it will still be needed for painting code which will still need that pattern of ""channel-major, clip-minor""

I still don't imagine that, after `SampleTrackCache` is removed, anything other than `MixerSource` will need a continuity of samples across clips. Waveform as well as spectrum painting look like they do (or at least could) access data from the clips directly. But I may be wrong, I don't mind removing the deprecation and later remove that method altogether if I turn out to be right. (If I'm right we might not need a `WaveTrack` at all anymore. Except for some `StretchingSequence` methods that only forward calls to `mWaveTrack`, `WaveTrack` isn't an interface `StretchingSequence` needs.) > Thanks Paul for your timely review.
> 
> > The internal cursor, if really necessary, should be a hidden implementation detail of `StretchingSequence`
> 
> Although possible for this PR, I'd rather not. `MixerSource` will need to call this to change position or direction of play when looping (in `MixerSource::Reposition`) and scrubbing.

I dislike any disturbance of lib-mixer interfaces.  Is it possible to avoid that by letting the decorator instead deduce the need for a change of its cursor from the pattern of access in the `Get` calls?

But I also dislike the very notion of an internal cursor, unless there is a very strong reason for it.

I have not yet reviewed in enough detail to understand the reason.  Is it because the time stretching algorithm has to maintain some internal state that depends on previous samples?
 Yes, the mere action of reading out some output of the time stretcher modifies its state. (Hence `GetNext` is a non-const method.)
I explained the need for a cursor to the best of my ability in this [readme.md](https://github.com/audacity/audacity/pull/4797/files#diff-db4c5a9d199bbfe619baa64ed0283e6f7d3f7bd94d1232ca928640ff72b3dc84). I hope this helps convincing you. (Hint: look for the ""Display the rich diff"" button for that file in Github to see the pictures :) ) > I dislike any disturbance of lib-mixer interfaces. Is it possible to avoid that by letting the decorator instead deduce the need for a change of its cursor from the pattern of access in the Get calls?

It is possible, and this is how `StretchingSequence` implements legacy `Get`.

`GetNext` does the maintenance of the read position for the client, so this is done in one place, clients simply cannot use it wrongly and it can be tested once and for all (see call in `SECTION(""ResetCursor"", ""reconstructs segment sequence when expected"")`, StretchingSequenceTest.cpp).

For this reason, after `SampleTrackCache` is removed, I'd like `MixerSource` to use `GetNext`, even if it possibly still could use legacy `Get`, and one way or another have the possibility to indicate a change of direction.

My hope was that we could also remove legacy `Get`, but spectrum display code uses it. (I am skeptical that this is a good thing, though : that code draws spectra clip by clip, and so first asks for clip boundaries before querying the corresponding samples onto the track. I can't see why this wouldn't be possible by just asking samples from the clips themselves, but it's not the time for me to check.) Most pragmatic is, at least for now, to leave this API, too. Now reconsidering the long commit.
 Okay, I see my critiques of yesterday mostly resolved to my satisfaction; I reiterated two still unresolved; I added more comments about what was rewritten.

I am glad to see you did the work to accomodate the ""channel-major"" access pattern to caches as needed.

Intermediate commits are not all compilable and free of known bugs (the backwards scrubbing).  I won't hold you to the rule.

I see nothing yet to delay approval, with just suggestions that you can implement as you wish with a rebase.

I still must finish a complete review of the big commit, then likely will approve it.

 Comments addressed in squashed commits. Hoping for a green build and QA round ... Moving back to `To Do` @saintmatthieu for two reasons:

- **Wrong mixing-and-rendering behavior**: when duplicating a piece of a mono clip, then making these two mono tracks into a stereo track, mixing-and-rendering it, the resulting track's right channel has wrong data. Compare:

https://github.com/audacity/audacity/assets/70063970/b454a7c5-7523-4dea-83ef-e33757c77c0d

vs recent `master`:

https://github.com/audacity/audacity/assets/70063970/b6b2f59c-22cb-4961-859b-7d71f815f424

- **crash when duplicating a tiny portion of a mono track** surrounded by silence > merging two mono tracks into a stereo track > mixing-and-rendering:

https://github.com/audacity/audacity/assets/70063970/edaf37ef-d73f-4278-9d3c-552c6877e323

[Audacity_dbgrpt-20167-20230705T132231.zip](https://github.com/audacity/audacity/files/11957375/Audacity_dbgrpt-20167-20230705T132231.zip)


 Tested:

- all bullet points on the list of things to be checked;
- the fix of the previously discovered crash with mixing-and-renderinig.

@saintmatthieu 
",,"Resolves: [#4791](https://github.com/audacity/audacity/issues/4791)

Introduces `StretchingSequence`, a `WideSampleSequence` decorator with stretching capability.

It decorates a `WaveTrack` object, which it has a const reference to. It accesses the track's clips to do time stretching at clip level, to be able to have different stretch ratios for different clips.

Based on still unmerged [#4746](https://github.com/audacity/audacity/pull/4746), which introduced `WideSampleSequence`.

Exporting as well as mix-and-render now use a `StretchingSequence` instance. Since clips cannot be stretched yet, the internal stretching algorithm will not yet be used, but all the mechanics above will, which should be tested.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

Things to test (not exclusive):
- [x] mix-and-render and exporting, for a variety of tracks, made up of more than one clip, very short ones (a few samples) as well as long ones (more than 10 seconds), with silence in between. The result must be bit-identical to what it was before these changes. The time it takes must not have noticeably increased.
- [x] playback in various modes (normal, scrubbing, etc.)
- [x] code related to envelopes was modified, verify that that works
- [x] benchmarking (if you know what that is - I don't)
- [x] mute & solo
","My first comment on this PR.

I did not review the PR that added this library, so I must become familiar with that first.

I see `libraries/lib-time-and-pitch/CMakeLists.txt` lacks a long-form CMake comment at the top, which is the convention with other libraries.

Please supply that comment, about the general purpose of the library.
 I see this header file changes in the second commit in the sequence, and nothing else changes in lib-mixer thereafter.

You know I dislike the notion of an internal, stateful cursor leaking out of the abstract interface, and I would think it more elegant instead to change the `Get` function to take a direction argument, and also to specify the reversal of samples is done in the result.

But I think I will not insist on this if the schedule presses.
 Some breaks in this very long comment line
 Good, now please add to the Doxygen comments above, explaining the argument, and the expectation that the outputs are reversed.

And likewise for `GetEnvelopeValues`
 I would rather not see this ugly cast.  I would rather see `WideSampleSequence::GetFloats` take `bool backwards = false` as the first optional argument.  The ""narrow"" overload in `SampleTrack` may simply supply false instead of exposing that argument to its callers.
 I see reversal of the envelope values.  But I was expecting to see `ReverseSamples` too, restoring the removed call in MixerSource.

I think this means the first commit breaks backward scrubbing, and that should not be.  I haven't yet reviewed later commits, which might make it work again, when the WaveTrack has its stretching decorator, but logically, shouldn't the proper place to apply reversal be here in WaveTrack?

 Library header comment, please
 If you really want to include this in the tree, the CMakeLists.txt comment can refer the reader to it for more explanation.
 I'm skipping the rest of this big commit for now, I will return and review it in detail last
 `override` is still missing for `GetRate` and that makes clang give warnings
 You should also delete the `@pre` mentioning `ii`
 This call no longer needs to satisfy the removed precondition, but must now not index the array out of bounds, and so `ClipInterface::GetSampleView` should have a `@post` or `@return` comment guaranteeing the size of the result equals the width.

And `ClipInterface::GetWidth()` should replicate the promise of `WideSampleSequence::NChannels`:

```
   //! A constant property
   /*!
    @post result: `result > 0`
    */
```
 However, I'm not yet sure I agree that `ii` should be removed as an argument.
 You are assuming here that all channels will be needed in the cache.  But remember what I explained about drawing code, including spectrogram, needing to stride ""channel-major"" but ""clip-minor"".

The caches for spectrogram drawing might now be doing wasteful duplicated work?  Creating a left and right side cache, but only using one side, destroying that cache, then repeating for the right channel?

. Might `move` the shared pointers
 I think you really mean: 
```
`left` is not null, and `right` is null, or else etc.
``` You handle un-owned tracks anyway, so weaken the `@pre`.

Now remember too, that clips are not necessarily stored, sorted by start time.  But are you assuming that where you use the results of this function?
 This line, and the one in src/CMakeLists.txt, are unnecessary for the build, and I would prefer you omit them so that the generated library graph does not have unnecessary edges.
 Oh, never mind.  The caching for spectrum view will not include the stretching decorator.
 The stretching decorator re-implements ::Get, where the clip samples are reversed before being passed to the stretching algorithm. As a result scrubbing does work when injected that decorator, but you're right, `WaveTrack::Get` should reverse the samples, even if no other code has use for it. `WaveTrack::GetSampleView` isn't a virtual function and `backwards` could/should be removed from its arguments, leaving `CachingPlayableSequence::Get` do the reversal. I have to update this, thanks for reminding. Not the stretching decorator, but `CachingPlayableSequence` also uses `WaveClip::GetSampleView`.
Currently it calls it on two separate tracks each with mono clips, so there's no unnecessary work. When we do use wide clips, though, there'll be only one stereo track, `WaveTrack::GetSampleView` will call `GetSampleView` on clips, and yes, doing unnecessary work if it stays at that.
Looks like I indeed need to preserve the `ii` argument ... Ok for the `@pre`.
The stretching decorator sorts the clips this method returns, so we're good. Done. In the interests of progress I will not block the PR if this is left unfinished, and scrubbing works in the end result, but you are aware of a need to come back and clean it up.

Really you should make sure that the sample reversal is part of the stated contract of `WideSampleSequence` and that all overrides of `Get` do it correctly -- whether it's the undecorated or the decorated WaveTrack.  Maybe some overrides of `Get` won't be directly called in 3.4, but you should not assume it will always be so.  The classes should make sense in isolation and in test harnesses, fulfilling the base class contract.  That's what the L of SOLID is all about.

 Then perhaps the lack of promise of sortedness should be mentioned in a header comment.
 If you just make a `// TODO` note to revisit the efficiency problem in a later PR, I would accept that.
 This interface looks strange -- I don't see what tells it how many `buffers` are there. Class comments? I would define `AudioSegment.cpp` just to define the destructor non-inline -- so that the linker can avoid de-duplication of the definition of the destructor and the virtual function table of the class; also so that ""AudioSegment.h"" is included in at least one translation unit before any other header, and we can be sure the header does not require any earlier #include for it to compile.
"
4844,2023-06-26T18:59:39Z,2023-07-07T14:41:13Z,Paul-Licameli,4,0,9,1127,46,1,1,"['refactoring', 'Music']",67039.0,1,934899.0,0,0,0,0,37300670.116204,,0,9,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased without change onto the recent rebasing of the approved Channel-views branch
 Rebased again without change onto #4825, which has added more commits
 Tested on macOS 13.0, Windows 11 VM, Ubuntu 22.04 VM:

- all bullet points in QA notes section (NB: Vamp analyzers work for me only on Windows)
- cases like rendering, sorting by start time, etc. when L/R channels' start times are different
- moving tracks up/down, resizing, expanding/collapsing Rebased again onto updated Channel-views branch.  Not merging until that one is merged.
",,"Resolves: *(direct link to the issue)*

Depends on:
- #4825

Mainly redoing the TrackList interface for removing or permuting tracks.

Fewer calls to TrackList::Channels, and hiding of underlying stl iterators of
TrackList.

Also taking some unnecessary state out of EffectBase.

Also cleaning up an unused function of TrackFocus, and tests for difference
of channel sample rates that are no longer needed.

Not completely neutral behaviorally:  sorting of tracks by start time now
ignores the right channel's time.

QA:
- [x] some destructive effects and generators, mono and stereo cases
- [x] at least one Vamp analyzer
- [x] Sorting of tracks by name or time
- [x] If recording to a new track, which would be off-screen, auto vertical scrolling happens
- [x] Deleting tracks with the X button, Extra > Track Close, Tracks > Remove Tracks
- [x] Mix-and-render to new track, when last track is not among the selected ones:  new track is inserted in the correct place
- [x] Stereo To Mono

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4825,2023-06-22T11:21:24Z,2023-07-07T14:38:50Z,Paul-Licameli,11,5,32,3657,104,2,2,"['refactoring', 'Music']",14356.0,1,1307850.0,0,0,0,0,37300816.488856,,0,32,1,False,"['dozzzzer', 'Paul-Licameli']","I have rebased onto the merge of #4795 with no other changes.

I must still fix the link failure on Windows.
 I have completed some self-review, and I added one missing piece, to remove one more `TrackList::Channels` in TrackPanel.cpp.  Now, un-drafting this.
 Rebased onto recent master, squashed some fixups, and added a checklist for QA
 Rebased onto recent master, resolving a conflict that was only from whitespace changes in SpectrumView.cpp
 @Paul-Licameli Moving back to To Do: when changing the height of a stereo track by holding the LMK and dragging the bottom edge of the track up/down, the left channel doesn't resize.

Compare: the most recent master – both channels of the stereo track resize equally

https://github.com/audacity/audacity/assets/70063970/45133b57-7951-4804-8a29-720438eb32c9

vs PR #4825 – only the right channel resizes while the left channel shows almost no changes to its height

https://github.com/audacity/audacity/assets/70063970/7d8704be-f9fd-4691-91f3-154d63429c1c

 I'm unhappy to see that unintended regression.  I meant to make a conservative transformation that didn't change behavior.

However the design question might be asked, whether the ability to size the channels differently is really valuable.

(Meanwhile, did you know that double click on the separator re-centers it?)
 > (Meanwhile, did you know that double click on the separator re-centers it?)

Yes, I know about that  New commits to fix the problem @dozzzzer  found, and other subtle ones I found.
 Rebased again to recent master, with some permutation of the commit sequence, but nothing new.
 @Paul-Licameli

Tested:

- all items in the QA section; a small issue with the ""Screenshot"" dialog was found and is logged as #4884 

Not tested:

- persistency of heights and minimization of tracks in the project file (due to this PR being based on an earlier version of `master` which doesn't yet have #4855 merged in)

 UPD @Paul-Licameli :

Now that the PR is rebased on the more recent version of `master`, I've checked the persistency of track heights and collapsed/expanded state. Testing shows that it **doesn't work as expected**, namely track's collapsed/expanded states as well as the track's height get reset to default (expanded and of the default height) after saving and re-opening the project. This, however, shouldn't be a blocker for merging this PR into `master`.

The discovered issue is logged as #4885 I don't see any blockers for this PR, just a few minor questions. ","I don't see any blockers for this PR, just a few minor questions. ","Resolves: *(direct link to the issue)*

Depends on
- #4795

This draft may have a few more commits added to it.  Notably `TrackPanelResizerCell`
still needs a rewrite.

Introduce a Channel abstraction (no useful member functions of it yet). Track exposes its
own iterators of Channels.  All types besides WaveTrack just inherit Channel and report
themselves as the unique channel.  WaveTrack alone might report two channels.

The storage scheme of the TrackList is not yet ready to be changed so that right channels
are no longer Track objects.  But certain places, mostly related to display, use this new
interface.

Eliminate all but two uses of `TrackList::Channels` in TrackPanel.cpp (to do, eliminate one more).

`ChannelView` replaces `TrackView` terminology, and the view must be constructed with
a track and a channel number.

Not in the scope of this PR, but in the likely next step:  Move sufficient member functions
into Channel and a subclass WaveChannel so that the drawing and mouse interaction in
WaveformView and SpectrumView can be rewritten using that interface and not WaveTrack.
Also rewrite other iterations over channels elsewhere than in display code to use these new
interfaces.

QA:
- [ ] Display and at least one mouse interaction in all four track types, and in stereo and mono tracks; vertical rulers, control panels, clip handle drag and name editing too
- [ ] Changes of track height and expand/collapse, persistency of heights and minimization of tracks in project file; including case of stereo channels of unequal height
- [ ] Split waveform & spectrogram views (including the ""hand"" cursor that rearranges them, and changes of height)
- [ ] Expand-all and collapse-all view menu items
- [ ] Undo/redo changes of appearance
- [ ] Context menus pop up at the correct place
- [ ] Screenshot dialog, big tracks and small
- [ ] Cut, copy, paste, select all of text in wave clip titles
- [ ] Split stereo track
- [ ] drawing of track (not clip) names (a preference)
- [ ] Set Track Status, Set Track Audio, Set Track Visuals, Set Track macro commands with mono and stereo and (as applicable) non-wave
- [ ] Correct automatic vertical scrolling, such as when tracks already fill the screen, and you mix-and-render to new track which would be off-screen
- [ ] Correct updates of widths of vertical rulers of stereo channels to be the same, as track height is dragged

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What is the reason to use `stingstream` instead of, say, `std::to_string`?  It is very unusual to see std::forward without the [forwarding reference](https://en.cppreference.com/w/cpp/language/reference#Forwarding_references). I have never seen such usage before.

Can you please provide more details about the problem you are trying to solve?  No reason except that I'm actually not very familiar with `std::string`, using it so infrequently!
 Without this change, the next commit didn't compile, unless I changed the new template parameter to `const size_t &`.  But I should be able to specify a by-value argument.

`Arguments` is not (a pack of) deduced forwarding references, but of class template parameters, which may be given reference types or not, and either way need to be perfectly-forwarded to the lambdas that supply implementations.


 > It is very unusual to see std::forward without the [forwarding reference](https://en.cppreference.com/w/cpp/language/reference#Forwarding_references). I have never seen such usage before.
> 

Oh yes you have!  You reviewed this recently https://github.com/audacity/audacity/pull/4623#event-9421746913 (but didn't finally approve it, @vsverchinsky did)

That also has examples of forwarding of class template parameters, which are not deduced forwarding reference function template parameters.
"
4772,2023-06-07T05:50:58Z,2023-07-07T11:58:07Z,ksoze95,0,4,4,221,4,2,1,[],,0,2614030.0,0,0,0,0,37310464.86113,,0,4,0,False,[],,,"Resolves: #4613 

Implemented QML Waveform control POC.  Note, this initial version does not support actual waveform data.

A single instant of the control is hardcoded onto the QML canvas.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I wonder if this should be called WaveClipView instead I can change it to that.  Its probably a better name.  :) Actually, there is already file WaveClipView which will in future draw the wave form data.  I can change this file to WaveClipView, any ideas what to rename the current WaveClipView.qml file to? I have renamed WaveClipView to WaveClipBody and Waveform to WaveClipView."
4855,2023-06-28T16:57:12Z,2023-07-05T17:51:14Z,Paul-Licameli,1,0,1,7,2,1,1,[],160569.0,1,608048.0,0,0,0,0,37462074.934866,,0,1,0,False,['saintmatthieu'],This seems to fix https://github.com/audacity/audacity/issues/4848 ; was this the intention?,,"Resolves: #4808
Resolves: #4848

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4854,2023-06-28T14:31:52Z,2023-07-05T11:20:43Z,crsib,5,2,9,957,19,2,1,['Build / CI'],67232.0,1,593337.0,0,0,0,0,37485508.264622,,1,9,1,False,"['crsib', 'LWinterberg', 'dozzzzer']","This was surprisingly painless, after a `pip install --upgrade conan` and deleting the old build folder, it just worked, including has_audiocom_upload and has_asio_support builds. 

However, in this build it seems like realtime effects are just always bypassed, whether they be internal, LV2, VST or VST3. It seems like they don't receive any data at all. Also, WASAPI recording seems broken to me, it alternates between ""invalid sample rate"" and ""insufficient memory"". I'm not sure if these issues got introduced here though, all I know is that it's a regression against stable.  Let me take a look.  I can observe both in the latest master. I have no VST3 effects available in realtime too. 

Small note about WASAPI:
1. Only recording fails for me.
2. The first time I press record - Audacity succeeds, but subsequent calls fail.

@dozzzzer appears that master is badly broken; please help with bisection. - As for the non-working effects: this was introduced by https://github.com/audacity/audacity/commit/35a0869c240631d235f05c0063f340ba3d1feee8, the corresponding issue is https://github.com/audacity/audacity/issues/4859
- As for the WASAPI recording issue, I can reproduce it; it's tracked in https://github.com/audacity/audacity/issues/4860 and it was introduced by the same commit as the previous one. Tested:

- Import/Export and playback of Audio (all supported formats + selected audio and multiple tracks), MIDI, Labels
- VST3: playback with an RT effect, destructive application, loading presets, import/export of presets, non-GUI mode, mixing-and-rendering
- Crash report dialog pops up when Audacity crashes
- Plugin scanning, recording in stereo/mono, changing sample rates of tracks, resampling

Not tested:

- plugin settings persistence (due to the https://github.com/audacity/audacity/issues/4848 which won't allow to re-open a project after it was saved)
- crash reports sending",,"This PR introduces the support for Conan 2, inherently breaking the support for Conan 1. The upgrade should happen automatically for ""managed"" Conan installation users.

Most of the work related to Conan 2 support happened within https://github.com/audacity/conan-recipes; the corresponding PR will be created after Qt is fully ported to Conan 2.

One of the key ideas behind the rework is to stop using `conan-center` remote. This remote is somewhat fragile because the required Conan version is handled on the client side only, which randomly breaks local builds if Conan is not fresh enough. For this reason, all required recipes are now served using the channel `audacity/stable`

The following libraries were updated:

* `zlib` to 1.2.13
* `libpng` to 1.6.39
* `expat` to 2.5.0
* `mpg123` to 1.31.2
* `wavpack` to 5.6.0
* `ogg` to 1.3.5
* `flac` to 1.4.2
* `libsndfile` to 1.0.31
* `vst3sdk` to 3.7.7

The update also has affected `breakpad` and `crashpad`.

From the Audacity side, the user can now specify the host and build profiles manually, effectively addressing #4672.

@dozzzzer this PR need some smoke testing, focusing on Import/Export, VST3, and crash reports.

---

Resolves: #4360 
Resolves: #4672
Resolves: #4156
Resolves: #4270

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","👀  I've tried to stick to a ""real"" tag for breakpad, so it is clear what we get :-)"
4852,2023-06-28T13:06:12Z,2023-06-29T21:11:44Z,DavidBailes,0,0,1,2,1,1,1,[],,0,115534.0,0,0,0,0,37968453.258114,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4846

If you are holding down one of the keyboard scrubbing keys, U and I, you can change the direction of scrubbing, without stopping the scrubbing, by also holding down the other key and sometime after that releasing the original key. However this no longer works correctly, the wrong audio is scrubbed.

In commit e0acd57, there is the following change:
```
void MixerSource::Reposition(double time, bool skipping)
 {
-   for (size_t j = 0; j < mnChannels; ++j) {
-      mSamplePos[j] = GetChannel(j)->TimeToLongSamples(time);
-      mQueueStart[j] = 0;
-      mQueueLen[j] = 0;
-   }
+   mSamplePos = GetChannel(0)->TimeToLongSamples(time);
```

Fix: add the new equivalents for  mQueueStart[j] = 0;, and mQueueLen[j] = 0;


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4861,2023-06-29T10:57:03Z,2023-06-29T16:00:30Z,saintmatthieu,8,0,3,71,7,1,1,[],3992.0,0,18209.0,0,0,0,0,37987129.473089,,1,3,1,False,"['Paul-Licameli', 'petersampsonaudacity', 'saintmatthieu']","Testing on W10 with @sahilsekr42 's branch build:  audacity-win-3.4.0-alpha-20230629+0feda0a-x64

I confirm that the realtime effects now work again with this branch build.

But I uncovered a further associated regression when adding a further realtime effect while the audio is playing - I will add this as a new issue. Follow-up problems described in https://github.com/audacity/audacity/issues/4864 and https://github.com/audacity/audacity/issues/4865, as well as the broken-recording problem https://github.com/audacity/audacity/issues/4860 have a similar root cause. Since this is a small PR, I choose to fix them all here. I haven't come up with a good solution. If I could find a way of getting compilation errors wherever `WideSampleSequence` pointers are compared that would count as a better fix.

Alternatively letting `WaveTrack` own the sample views for caching, instead of using a `CachingPlayableSequence` for that, that wouldn't be too bad. The stretching decorator, though, is more complex, and it's nice to keep that logic separate.

Or don't inject `CachingPlayableSequence` _in place of_ `WaveTrack` but _besides_. Added @Paul-Licameli to this review to contribute to this discussion. I'm watching this PR and I have no strong objections.

I don't like disturbing the WideSampleSequence interface, but something like this is really needed.

I may have ideas about making it more elegant, but I'll propose my own PR after all the bugs are found and fixed.
 Testing on W10 with @saintmatthieu 's latest branch build for this:  audacity-win-3.4.0-alpha-20230629+9e1333a-x64

All seems to be well now with regards to #4859 and #4864 / #4865 in this branch build.

a) RT effects work properly from the effects stack
b) an initial  RT effect can be successfully added to audio that is already playing
c) an additional  RT effect can be successfully added to audio that is already playing with other RT effects applied
 @dozzzzer ready for merge ? @petersampsonaudacity thank you!I can approve it as a hotfix, but I am really confused with the approach, where decorator masks vital parts of the decorated objects. I can see it as a source of a lot of bugs in the future. How long would it take to do a proper fix, that doesn't expose `GetDecorated` in all the places around the code?","I can approve it as a hotfix, but I am really confused with the approach, where decorator masks vital parts of the decorated objects. I can see it as a source of a lot of bugs in the future. How long would it take to do a proper fix, that doesn't expose `GetDecorated` in all the places around the code?","Resolves: #4859 

Realtime effects work by AudioIO getting the realtime-effect list attachment onto its playback sequences.

Problem : those are now injected, attachment-less `CachingPlayableSequence`s, which decorate the `WaveTrack`.

Quick fix : we give `WideSampleSequence` a method to return it's decorated version, which can then be used by AudioIO.

Longer term fix (maybe) : this is another incarnation of the problem we had with `GetMute/GetSolo`, also implemented as `WaveTrack` attachments. The solution was to find the right place for an abstract API, which internally is implemented by `WaveTrack` through query of its attachment. Now it's an abstraction for `RealtimeEffectList` that is needed, at least the part of it needed by AudioIO to apply real-time effects.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4842,2023-06-26T12:56:49Z,2023-06-27T13:29:27Z,Paul-Licameli,0,0,1,3,1,1,1,[],,1,88362.0,0,0,0,0,38168992.689567,,2,1,0,False,[],,,"Resolves: #4841

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4771,2023-06-06T21:33:14Z,2023-06-27T10:19:41Z,saintmatthieu,15,30,11,1230,26,3,0,[],1440.0,0,1773988.0,0,0,0,0,38180384.894102,,2,11,0,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","If my reviewers think this is worthwhile pursuing, the next steps would include:
* Let all clients of `WaveTrack` adopt this new API,
* Remove `SampleTrackCache` and all related code,
* Consider unit-testing @crsib @vsverchinsky @Paul-Licameli I rebased that branch onto Paul's `Mixer-does-not-use-Track` branch. Maybe there was a smarter way but, to keep the diff to my own changes, I opened a new PR from my branch onto Paul's. Here's the link : https://github.com/Paul-Licameli/audacity/pull/9 . @Paul-Licameli I guess you could add Dmitry and Vitaly as reviewers - I couldn't. > @crsib @vsverchinsky @Paul-Licameli I rebased that branch onto Paul's `Mixer-does-not-use-Track` branch. Maybe there was a smarter way but, to keep the diff to my own changes, I opened a new PR from my branch onto Paul's. Here's the link : [Paul-Licameli#9](https://github.com/Paul-Licameli/audacity/pull/9) . @Paul-Licameli I guess you could add Dmitry and Vitaly as reviewers - I couldn't.

Don't make pull requests against my fork please.  That will only make more confusion.

Make all pull requests against audacity/audacity and we can have just one Conversation page like this one in which we find all related comments all have made.

I do not object to force pushes of this evolving project.

I still need to change the foundations for you to build on correctly.
 General remarks about the new commit ""CachingWideSampleSequence decorator"".  I like it better now but still don't want to review it completely.  I still think I should continue preparing other foundational work for you to review, and you should rebase onto that, and only then should I do a complete review.

At first I was very displeased to see lots of change in AudioIO.* which will only conflict with the next refactoring I need to do, adding lots of changed lines of code, before I had completely understood the first commit.

But now I see the commit comment says that all the changes in MixerSource.cpp are reverted.  That may be good.  I had not yet understood all those changes but I thought it would be better to find a solution that does not change lib-mixer.

So really if I haven't understood the first commit fully, I can forget about it, but should instead look at the squash of the two commits.

There is now no need for `SampleTrackStuff` to be defined in lib-mixer.  It can instead be defined in Sequence.h.

That leaves lib-mixer almost unchanged, but not quite:  still you add `GetSampleTrack` to `WideSampleSequence`.

I don't like that -- lib-mixer mentioning a class defined in lib-sample-track, which is not one of its dependencies.  It compiles, because there is only a forward declaration of the class, but still it is questionable for lower level libraries to mention types defined in higher level libraries.

You make lib-audio-io accept the decorated `WideSampleSequence` objects constructed at higher levels without needing to know the implementation details.  That is goo.

But lib-audio-io still depends on `SampleTrack`, and therefore, this questionable workaround of `GetSampleTrack` is needed, to let it find that interface from `WideSampleSequence`.

Remember what I have said: really I want to make lib-audio-io have no dependency on lib-track at all.

Let me first complete that, so you can review it, then rebase this work onto that.  No changes to lib-audio-io should be needed after what I do.





 > Don't make pull requests against my fork please. That will only make more confusion.

I admit that it didn't prove helpful. @crsib @vsverchinsky this PR is based on #4795. If you wish to review please only those commits with me face :D  I compared some aspects of performance before and after this PR:
* Real-time performance : can play an Audacity project with as many as 1024 stereo, 146-second-long tracks without glitches, both before and after this PR.
* Memory usage : Audacity project with 4 stereo., 146-second-long tracks in spectrum display mode. Memory requirements decrease by 10% with this PR, from 231 to 212MB. I have now completed a round of review.
 > I have now completed a round of review.

Thanks a lot! I'm done with addressing comments to @Paul-Licameli 's first round of review. Awaiting round 2. > I actually found an alternative implementation, where it is obvious that `written < bufferSize`, and which does not unnecessarily iterate over segments after if `written` already `== bufferSize`.
> 
> But I'd have complied.

The proof relies on `AudioSegmentSampleView::Copy` returning not more than its `bufferSize` argument.
The comment on that function is sufficient, if you look for it.
It's enough.
 > Comment it at least because the class is meant for use outside the library that defines it. I don’t think you must comment every type defined in anonymous namespaces.
> 
> If many classes don’t have DOxygen, that’s not an excuse for improving practice now.

Of course I meant to say... it's not an excuse for NOT improving practice!
 > Good catch! But I'm fixing it in `WaveClip::GetSampleView`, accounting for `mTrimLeft` like `GetSamples` does.

A sufficient fix for a real bug; so now, please comment in the header that the origin of the argument for `WaveClip::GetFloatSampleView` is in fact the play start.
 I make a number of suggestions in this round, to improve documentations and (in one place) proper argument types.  I left two boxes un-resolved from the previous round.

Clean it up for final merge if you like, but I none of this is important enough to delay the movement of the card right on the board.
 Tested.",,"Resolves: [4717](https://github.com/audacity/audacity/issues/4717)

Revisit caching strategy so as to allow `SampleTrack` clients to query small amount of samples at a time yet keeping the need for underlying SQLite queries low.

Further requirements:
- [x] cached data only held in memory the time it is needed (or not much longer)
- [x] is thread safe, and ideally allows concurrent reading from the **same** cache
- [x] any client of the same `WaveTrack` object can acquire data from anywhere in the track without affecting the risk of cache misses by other clients

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

Things to test:
- [x] spectrograms of stereo tracks, in which there is some obvious difference of content between the channels, to be sure the correct channel's stuff is drawn in each rectangle.
- [x] spectrum viewing, zoom in, zoom out, play around with it : it should feel at least as smooth as before.
- [x] find largest project that plays without hick-ups in previous Audacity version. Playback should also be hick-up-less with this version. (If it is, you may try to increase the number of tracks to see if this PR improves performance.)
","also for debugging I wrote that debugging code to make sure that 
> cached data is released soon after last needed

Playback of a 20s mono track yielded for me
```
0 00000250D1D69EE0: Hello!
5315 00000250D1D68EE0: Hello!
5357 00000250D1D69EE0: Bye!
10765 00000250D1D68F60: Hello!
10808 00000250D1D68EE0: Bye!
16209 00000250D1D69A60: Hello!
16262 00000250D1D68F60: Bye!
20354 00000250D1D69A60: Bye!
```
Columns are `elapsed time (ms) / object address / ctor-dtor message` (See implementation of `LibSampleTrack::Block` for more detail). Sorry for the inadvertent formatting ... Oj, one `clip->GrabFloats(start, len);` too many ; useless but doesn't break anything. I haven't tried this yet, but now we should be able to query not more than the amount of samples required by the playback buffer (2400 for me on Windows). I would prefer a solution that does not require “polluting” the interface of SampleTrack with any mention of caching, but instead, lift the creation of caching scope up to places where WaveTrack is known, and we also construct the “decorator” tracks.

And that must wait on my other refactoring work, part of which I asked for review yesterday. You are thinking of “double checked locking” but that is considered an anti pattern now because of our-of-order execution possibilities.

https://en.cppreference.com/w/cpp/memory/shared_ptr/atomic

I think a proper solution must use these functions instead somewhere, but they are for shared pointers not weak.

Even the check of the weak pointer before the lock is not thread safe.  The standard library requires different shared and weak pointers to maintain the managed objects control block with thread safety, yes.  But races on the pointers themselves can cause undefined behavior.

So really you must put a lock scope around the weak pointer.  You might use the spin lock class that is already in out libraries.

You might also use two, more limited lock scopes by constructing the cache outside of the lock, and only then locking and assigning.

money thread might lose the race to assign non null, in which rare case, it can just release what it allocated.
 I misplaced my comment— modifying this class in lib-wave-track is acceptable.  But the new types it uses should also be defined in this library and not in the lower one. No.

This will conflict seriously with other refactoring I want you to review which introduces the wide sample sequence abstraction into the mixer.

And I repeat, we should seek a solution where cache maintenance is entirely internal to lib-wave-track, and control of cache lifetime is upstairs in Audacity, and it is all completely non-intrusive in lib-sample-track. This holds shared pointers to blocks, so there is no dangling pointer problem.   But this might construct a cache that becomes out of date with changing sequence contents.

Maybe it won’t matter in actual uses but comments should explain the limitation.

Or maybe a complete redesign of caching with have Sequence maintain more state and keep consistency. > we should seek a solution where cache maintenance is entirely internal to lib-wave-track

Currently cache maintenance is in your to-be-introduced `lib-mixer`, through still persisting `SampleTrackCache`. So this proposal wouldn't be worse than what we have now (with respect to your concern).

Giving responsibility of cache maintenance to the consumers of `SampleTrack` (e.g. `MixerSource`, `SpectrogramCache`) makes the problems of eviction and cache miss avoidance easy. I cannot think of a solution that easy if this responsibility were to be that of `WaveTrack`. I have looked into the spinlock implementation, and it calls `yield` every other time, so it's not better. I think we need extend it with a policy, that does not `yield` at all. Yielding make the spinlock at least as expensive as the `mutex`, it should be avoided in threads that have latency guarantees.  > This will conflict seriously with other refactoring I want you to review which introduces the wide sample sequence abstraction into the mixer.

I wouldn't mind so much rebasing my draft on top of your branch. > we should seek a solution where cache maintenance is entirely internal to lib-wave-track

If that's of concern, we could define an abstract wrapper for `SampleTrack` (to become `WideSampleSequence`), whose implementation (in `lib-wave-track` or a new lib only `lib-wave-track` would depend on) is injected in consumers of ´WaveTrack` and does the cache maintenance. A shared pointer to a structure containing the weak pointer may seem weird but then it could be updated using the standard, non-member functions specialized for `atomic<shared_ptr<T>>`
 > > we should seek a solution where cache maintenance is entirely internal to lib-wave-track
> 
> Currently cache maintenance is in your to-be-introduced `lib-mixer`, through still persisting `SampleTrackCache`. So this proposal wouldn't be worse than what we have now (with respect to your concern).
> 
> Giving responsibility of cache maintenance to the consumers of `SampleTrack` (e.g. `MixerSource`, `SpectrogramCache`) makes the problems of eviction and cache miss avoidance easy. I cannot think of a solution that easy if this responsibility were to be that of `WaveTrack`.

The not-worse organization should become a positively better one.
 Maybe. If not I don't imagine this would get in the way of time stretching, meanwhile our current caching problem is. What could be executed out of order here? According to https://en.cppreference.com/w/cpp/memory/weak_ptr/lock, the creation of the shared ptr is executed atomically, and all other variables before the mutex are local. > I think a proper solution must use these functions instead somewhere, but they are for shared pointers not weak.

You shared a link to a solution for the case where multiple threads access the _same shared_ptr object_. Here a new `shared_ptr` object is created each time - in which case ""All member functions (including copy constructor and copy assignment) can be called by multiple threads on different instances of shared_ptr without additional synchronization"". (https://en.cppreference.com/w/cpp/memory/shared_ptr) Remove this unnecessary line; then, this revision of the pull request makes no changes in `lib-sample-track`, which is very good.
 Just replacing `//` with `//!` on a brief comment line before a member variable allows
Doxygen to extract the comment.  Do that with each member of this structure and also explain `usefulLength`.

 I had to read Sequence.cpp to understand that `usefulLength` is a span of sample positions not necessarily covered by the blocks.  Better that I could have read a comment explaining that here.
 Slow down.

You are only setting yourself up for more conflict with stuff I have to do.
 This solution no longer intrudes in SampleTrack but still does intrude in lib-mixer.

I am not yet decided whether I like it.
 > What could be executed out of order here? According to https://en.cppreference.com/w/cpp/memory/weak_ptr/lock, the creation of the shared ptr is executed atomically, and all other variables before the mutex are local.

""Effectively returns expired() ? shared_ptr<T>() : shared_ptr<T>(*this), executed atomically.""

Okay, I learned something -- `lock()` on a `std::weak_ptr` is thread safe.  My memory though is that you can't have unsynchronized usage of a `shared_ptr` object.

 There were more naive implementations of the double checked locking pattern in older days before C++11 that were later understood to be an anti-pattern.
 Other related and interesting C++ things to know are the thread safety guarantees in the language specification for the first time construction of static variables inside functions, and the related `std::once_flag` defined in `<mutex>`.
 As we have discussed:  the decorator should also remap envelope values on the time axis, and also remap the end time, and not just pass through the calls.
 If you say it's a precondition, then it should be commented where the member function is declared in the header file, preferably with the `@pre` Doxygen comment convention
 Yes, why not instead
```
blocks[i] = std::move(newBlocks);
```"
4650,2023-05-03T11:11:57Z,2023-06-26T15:14:18Z,Paul-Licameli,2,7,20,1388,35,2,1,['code quality'],4159743.0,1,4680146.0,0,0,0,0,38249106.043164,,3,20,1,False,['dozzzzer'],"While testing the PR, I discovered the old sync lock bug which was previously fixed and closed by @Paul-Licameli. The STRs are the same as in the original ticket - #4713 - and they go as follows:

### Steps to reproduce

1. New project
2. Add Mono track
3. Generate 30s chirp in it
4. Add Stereo track
5. Generate 30s chirp in it
6. Turn on Sync Lock (Tracks Menu)
7. Drag-select from 10s to 15s in the Mono track only
8. Apply
- Change Tempo, to 110%, with High Quality stretching off, OR
- The same but with High Quality stetching on, OR
- Sliding stretch with defaults (0 and 100%), OR
- Sliding stretch with initial 100% and final 100%, OR
- PaulStretch

(Note, ChangeSpeed has no problem)

### Expected behavior
After step 8, both channels of the stereo track are shortened to maintain sync with the stereo track

### Actual behavior
Either no change in the stereo track, or (worse!) only the left channel shortens Tested on macOS 13.0, Windows 11 VM and Ubuntu 22.04 VM.",,"Resolves: *(direct link to the issue)*

Use TypeList, Tuple, and Callable to clean up some old metaprogramming implementing Track::TypeSwitch.

It's not simple -- there are three levels of TypeList folds now -- but the intent of the recursions is more clearly expressed that way.

A previous mutual recursion (!) of templates goes away.

Type switch case functions accept references, not pointers. Some std::function overhead can be eliminated for type switches that use fallthroughs, after their call sequence changes too.  Optional extra arguments can be passed (not needed for existing uses that visit tracks).

Still to do: add unit tests.

I expect to re-use this in other improvements to the Registry system, to make visitation code simpler and type-checked.

QA: Make a project with various track types (audio, label, MIDI, time) and briefly exercise these things, where possible selecting tracks of all different kinds:
- [x] A per-track effect or generator, and verify sync lock adjustment of unselected tracks -- see below
- [x] Project persistency
- [x] Making stereo track from monos
- [x] Pasting label and MIDI data
- [x] MIDI playback
- [x] Import audio
- [x] ""Get Info"" macro command (with all choices)
- [x] ""Set Clip""
- [x] ""Set Envelope""
- [x] Effects and generators (and verify sync lock for generators):  AutoDuck, ChangeSpeed, Silence, Repeat, Reverse, ChangeTempo (both checkbox settings), Truncate Silence, any Nyquist effect
- [x] Paste in the Edit menu
- [x] Cut, Split Cut, Split Delete, Trim, Split New in Edit menu
- [x] In Label sub-menus of Edit: cut, split cut, split delete, silence, copy, split, join, disjoin
- [x] Track and Extra > Track menus:  sort, pan, pan left, pan right, gain, gain up, gain down, mute, solo
- [x] Envelope editing (both audio and time tracks)
- [x] Dragging time selection and box spectral selection, double click clip selection

More explanation of steps for the first checkbox:
- Generate some sound
- Turn on sync lock, and make other audio and label tracks below
- Select a portion of the first track only, and Gererate > Tone or Chirp
- Change duration from the default (the selection length), either longer or shorter
- OK, and observe correct generation and sync lock adjustment

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It's good to see that supporting code is moved out from `Track`, but still, as I can see, type-switching requires some preparations to be made before you can actually use it. Is it correct to say that constructing a default-constructible is a no-op? How would caller interpret such value? I'm not sure what you mean.  Explain more?
 In case the type switch is not exhaustive, and the actualy type of the track is not accepted by any function -- then some value must be returned and that is it.
 I really do mean to apply TypeSwitch in another pull request, to simplify registry visiting code so that it needs fewer casts.
 See commit 30ae1c61aa2eea131e080373b61b6f372590335e
 > I'm not sure what you mean. Explain more?

I mean that to make type switch work you need to write something similar to `Track::TypeSwitch` first, is that correct?"
4833,2023-06-23T13:59:33Z,2023-06-26T13:11:39Z,Paul-Licameli,0,1,1,84,1,1,1,[],,0,256329.0,0,0,0,0,38256469.33371,,0,1,0,False,[],,,"Resolves: #4769

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","could be just:
`for (auto waveTrack : src.Any<const WaveTrack>())`"
4823,2023-06-21T13:17:33Z,2023-06-23T16:54:01Z,Paul-Licameli,3,0,1,9,2,1,1,['Clips'],6376.0,1,185794.0,0,0,0,0,38502326.682925,,2,1,1,False,"['petersampsonaudacity', 'Paul-Licameli']","Testing on W10 with @Paul-Licameli 's branch build:  audacity-win-3.4.0-alpha-20230621+140ef2c-x64

I confirm that this now works fine once again with this branch build on Windows 10 > `mLegacyRate`

That would be a one line fix and I will do it
 Rebased onto recent master, and added the suggested additional check for zero.
This obviously fixes this bug, but I still have a bad feeling about `mLegacyRate` also used as argument to `SetClipRates` without this greater-than-zero check. Please review that place and consider adding this check there too.","This obviously fixes this bug, but I still have a bad feeling about `mLegacyRate` also used as argument to `SetClipRates` without this greater-than-zero check. Please review that place and consider adding this check there too.","Resolves: #4808

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4795,2023-06-15T17:51:13Z,2023-06-22T15:08:23Z,Paul-Licameli,1,30,15,1556,39,2,1,"['refactoring', 'Music']",536863.0,1,595034.0,0,0,0,0,38595069.331351,,0,15,1,False,['Paul-Licameli'],"Rebased onto recent master, with only minor changes for review feedback
Haven't noticed any defect. Congratulations on removing `lib-track` from `lib-audio-io`!",Haven't noticed any defect. Congratulations on removing `lib-track` from `lib-audio-io`!,"Resolves: *(direct link to the issue)*

Depends on
- #4746

Break dependency of lib-audio-io and lib-realtime-effects on lib-track.

Instead, use only the interfaces defined in lib-mixer, which WaveTrack implements,
and caching or time-stretching decorators of WaveTrack might reimplement.

AudioIO::StartStream accepts an array of PlayableSequence objects (which inherit
WideSampleSequence), which know their stereo width; instead of taking inputs
each of mono, left, or right channel data only.

Decorators can be constructed elsewhere than in the libraries, where more
implementation detail of WaveTrack and its division into clips is available.

QA:
- [x] playback and rendering of stackable effects
- [x] Changes of pan, gain, mute, solo of tracks while playing
- [x] Same with Micro-fade option enabled (Playback preferences)
- [x] Recording, including Punch-and-roll


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If `pLeader` is a raw pointer, then you don't need the conditional operator, just pass `pLeader`. Oh, I'm surprised here to see a per-project effect list. Is it here in anticipation of the future master effect stack? I vaguely remember you saying that `WaveTrack` might at some stage not be a `Track` anymore. Maybe I'm remembering wrongly or you were not serious, else would this line become a problem then? Excellent, just what my `StretchingSequence` will need. (Github wouldn't let me ""Comment on this file"" for some reason.)
It's a little bit more work but not useless work to have one header per abstract class. Seeing `AudioIOSequences.h` I thought ""What could be a `class AudioIOSequences` ?..."" I never saw abstract interfaces being used for classification like that before. Wouldn't simply adding a `IsPlayable` interface to `Track` have done the job? If so I'd prefer that, to spare readers like me some eyebrow lifting. The indent is awkward, it took me longer than necessary to make sure that `result.otherPlayableSequences.push_back(pSequence);` resulted from the `if`. To be kept in mind, but nothing to address in this PR: the `StretchingSequence::Get` requiring a modification of its state, I'd like at some stage to have these `ConstPlayableSequences` become non-const. Right now I'm using a const_cast. Thank you! `mPlaybackBuffers.clear()` ? You have something against `std::min_element` ? In any case, thanks for the clean-up. `t` is only used to index `mPlaybackSequences`, hence a range loop would be appropriate and make this code a wee bit easier to understand. You've called this `nChannels` elsewhere, better stay consistent to ease reading. Can probably be `const`? or `std::copy_if` Exactly! In fact, the global effect list was a thing before 3.2, in the limited implementation of real-time effects then.  It is now hidden but may be revealed again. WaveTrack will remain a kind of Track but WaveChannel will be a thing representing a part of the track.

But RealtimeEffectManager will still know WideSampeSequence objects which will still correspond to Trakcs, not Channels. I do not agree to any rule classes should correspond one to one with header files.

Sometimes the atomization is excessive.  That’s a judgment, not a precise criterion.

Sometimes too it is proper to have closely cooperating classes in one header file if the alternative is cyclic dependency, though that does not apply in this case.
 No.

Track is a dirty legacy class with too many duties, which I am trying to remove from lob-audio-io. A matter of taste.  I find that I like indentation styles in which the variation of the leftmost column helps me to scan it and separate the parts.  In this case, separating a long condition expression that doesn’t fit on one line, from the consequent statement. I’m still not persuaded.

I still feel like this abstract interface should be stateless, and any dependency on the history of the pattern of access in the concrete class justifies the use of mutable members. True, no difference for changes of capacity and for whatever small performance advantage. min_element returns an iterator, not a value Good idea, that was not true before the transformation but it is now But there is a distinction to make, between the sample sequences of project data, and the number of device channels.  They may go many to one. Maybe, small advantage to readability, and I strongly doubt it makes any difference in performance Good But there is a distinction to make, between the sample sequences of project data, and the number of device channels.  They may go many to one."
4746,2023-05-30T07:12:03Z,2023-06-21T20:11:52Z,Paul-Licameli,18,30,23,1594,40,2,0,"['refactoring', 'Music']",17026.0,1,1947727.0,0,0,0,0,38663129.316799,,0,23,1,False,"['Paul-Licameli', 'dozzzzer', 'saintmatthieu']","Some questions :
* `MixerSource` already used to be a collection of tracks, one per channel,
* Iteration over the channels used to be done in `::Acquire`, now it is one stack level below, in `MixSameRate` or `MixVariableRates`,
* In the future, `SampleFrameSequence` will provide multi-channel audio data, and the channel iteration in `MixerSource` can be removed. > Some questions :
> 
> * `MixerSource` already used to be a collection of tracks, one per channel,
> * Iteration over the channels used to be done in `::Acquire`, now it is one stack level below, in `MixSameRate` or `MixVariableRates`,
> * In the future, `SampleFrameSequence` will provide multi-channel audio data, and the channel iteration in `MixerSource` can be removed.

Names changed since you wrote this, otherwise its a correct summary.
 In anticipation of the merge of #4742 soon, I have rebased this branch onto that one, and made only the changes needed for conflict resolution.

The commit ""Segregate WideSampleSequence from the SampleTrack interface..."" is still the first one proper to this new branch, and only that one and later ones should be reviewed.
 Force pushed again, with some NEW and FIXUP commits inserted to address your comments.
 The latest force-push only squashes the fixup commits and edits some commit comments.
 Pushed back to ""In Progress"" because export is broken : 
![image](https://github.com/audacity/audacity/assets/22740106/d1b65f06-ccc2-49d0-87a3-9152172da3dc)

The mono track was exported to stereo, and a 4-second chunk is clipped to -1. Here is the problem I see during mix-and-render: 
![image](https://github.com/audacity/audacity/assets/22740106/3644dadb-ffc0-41e1-95e5-9094842a01a4)
The lower track is the rendering of the upper track.
I was debugging this because I have a branch based on this one (for the stretching decorator) and thought I was doing a mistake, but by reverting I could verify that the problem came from elsewhere. I suspect the `SampleTrackCache` to be passing incorrect pointers to the WaveTrack.
I also verified that it is not on current master (0ec7ab2908f2acb5759323e1f5b5f345698e3d1b) https://github.com/audacity/audacity/pull/4746/commits/0101fcfcc7f10f411a8c62b428399d3cbd0e2cf3

Was it this commit that you built?

Describe exact steps to reproduce.

Probably the bug is in SampleTrackCacke.

i confirmed that I could reproduce the bug in export and that it was fixed. Rebased once more after #4792 was merged, so now only 23 commits
 A second fixup corrects the error in rendering
 Rebased onto more recent master, and squashed
 Moving back to In Progress.
When mixing-and-rendering a stereo track with any built-in or third-party effect in the sidebar, Audacity freezes (macOS) or crashes (Windows). No issues with exporting.
@Paul-Licameli  > Moving back to In Progress.
> When mixing-and-rendering a stereo track with any built-in or third-party effect in the sidebar, Audacity freezes (macOS) or crashes (Windows). No issues with exporting.
> @Paul-Licameli

I observe that mixing and rendering crashes even with no effect stack.  Was that bug introduced by this branch or by an earlier merged PR?
 > Was that bug introduced by this branch or by an earlier merged PR?

If you refer to the wide wave clip PR #4742 – no, it shows no issues with mixing-and-rendering both with and without effect stack. So it seems that the problem was introduced by this branch. > > Was that bug introduced by this branch or by an earlier merged PR?
> 
> If you refer to the wide wave clip PR #4742 – no, it shows no issues with mixing-and-rendering both with and without effect stack. So it seems that the problem was introduced by this branch.

I observe not only a crash, but the recovery file is also somehow corrupted to cause a crash if you restart and try to recover.
 > The recovery file is also somehow corrupted to cause a crash if you restart and try to recover.

I don't see the crash when trying to recover, but weirdly enough in addition to the stereo track I also have a mono track in the recovered project which isn't supposed to be there.

<img src=""https://github.com/audacity/audacity/assets/70063970/c6c3b034-1f64-456f-9d13-3b06619fad9c"" width=500>
 @saintmatthieu  Rebased onto recent master, with a new FIXUP that removes a mistaken assertion from an earlier PR, which was violated when you Mix Stereo to Mono.

I am still investigating the bug in rendering.

 Tested on macOS 13.0, Windows 11 VM and Ubuntu 22.04 VM.
What was tested:
- all bullet points on the list of things to be checked
- cases with mismatched left and right channel lengths, such as mixing-and-rendering, export, playback
- made sure that all previously found bugs introduced by this PR were fixedHaven't absorbed everything, but made progress. Finished for this iteration.","Haven't absorbed everything, but made progress. Finished for this iteration.","Resolves: *(direct link to the issue)*

Depends on
- #4742

An abstraction, which WaveTrack will implement concretely, that reports how many channels it has, and can fetch (non-interleaved) data simultaneously from all channels.

It will not inherit Track, so it will have a smaller interface, making it simpler to implement decorators such as might add
caching or time stretching.

SampleTrackCache, while not yet eliminated, will be reimplemented in terms of it, as will MixerSource and Mixer.

AudioIO should also be rewitten to expect TransportTracks (input for its calls) to point to such objects, and not use Track or TrackList.

Then, where TransportTracks are constructed, outside of libraries/, it will be possible to make use of the details of WaveTrack, and implement the correct scope for caching.

QA:

Note that this code was written assuming channels have the same rate, though pull request https://github.com/audacity/audacity/pull/4739 guaranteeing that is not yet merge3d.

Known changes of behavior: In unusual tracks with mismatched clip boundaries, it is possible for start or end times to differ, or envelope values. Now, only the left channel's values are used. So this can make a difference in some playback. We intend to make such unusual stereo tracks impossible, but that is not yet.

Another subtle change:  If either of two Mono tracks requires dither in re-exporting, then the joined stereo track dithers (both channels) on exporting.  (I could make the distinction finer again, per-channel, but I don't feel like it)

- [x] playback, recording, mixing-and-rendering, export, spectrograms (including horizontal scrolling and mouse wheel magnification), including mono and stereo tracks and tracks with envelopes
- [x] Stereo-to-mono
- [x] playback with a time track
- [x] Rendering of effect stacks, including mono effects on stereo tracks (like the Blue Cat chorus effects)
- [x] Project recovery in case of exhausted drive space during recording (at most 5.9 seconds lost)



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`const auto sequence =` `const auto sequence =` Am I correct in understanding that this commit doesn't change any behaviour? `SharedPointer<const SampleFrameSequence>()` ? Looks like both branches of this `if` do the exact same... `const auto &input` (below too) Why not using `const std::optional<size_t>`? Reading usages with `-1` is puzzling. Could be const, right? Shouldn't _all_ tracks be leaders now? I don't understand why we have to make this check here. It seems to me that this implementation would result in `TrackList::NChannels(rightChannelTrack) != rightChannelTrack.NChannels()`. So until we have the real deal, the leader will be the one iterating over all channels. Nice. No, track objects are not leaders only yet.

That is a farther refactoring goal. That is intended.

A non-leader track will count only itself and later channels and give access through the wide sample sequence interface to those channels only.  (I wrote that in general terms anticipating future more than stereo tracks).

I expect track painting code will use the WideSampleSequence abstraction too, and will require objects that only view one side. `leftChannelTrackOfStereoTrack.NChannels()` must equal 2, and it will, that's fine.
`rightChannelTrackOfStereoTrack.NChannels()` now equals 1. What code needs to do such check? Unless there really is a need for it, I'd at least assert false for the time where we still have the concept of leaders. Looks unused. Here as well: why not `optional<size_t>` Referring to [this comment](https://github.com/audacity/audacity/pull/4746#discussion_r1223988858): trying to figure out whether `sequence` is expected to be a leader or not.
Given `channel < 0`, if it is a leader, it will return as many instances as the track has channels. If not, it will return only one instance.
Then I suppose that clients of this function must take care not to call it with `channel = -1` and iterate over all tracks, else there would be more than one instance for the right channel of a stereo track.
Disclaimer: I probably still miss some context around this function. Side note :
Now debugging splitting a stereo track to mono, as this is an ""multichannel"" effect.
It hit `assert(!partner->mpGroupData);` in Track.cpp, line 216. Might be related to the work you did on having tracks share mute, gain and other properties. I guess this assert could be removed, but it will require your attention. Oops: always false if `channel = -1`, due to the implicit conversion from signed to unsigned. Looks like this function, when used by `PerTrackEffect`, takes care that `sequence` is always a leader. I wonder if this actually always must be true. If it must, please assert. I'm giving up on reviewing that part, at least for now, I can't grasp all possible situations. Please assert in this lambda that `input.pSequence` is a leader. const Just realized that `Mix.cpp` also uses this function, I reckon for the real-time effects. In this context `channel == -1`, but it's only called with leader sequences. So looks correct in that case too. It's unfortunate that ""width"" here is used for bit depth when we're introducing ""wide"" sequences. I can't do that.  Nothing in `WideSampleSequence` mentions the notion of ""leader"" any more.

Nor do I want to add some virtual functions to it just so I could make the assertion.
 Why not getting the envelope values once and then iterate over the channels to apply it on the entries in `mSampleQueue` ? Same here, I think `GetEnvelopeValues` can be factored out of the loop. Would be nice to access const references `mT0` and `mT1` . The conceptual difference in `WaveClip` between ""play"" and ""sequence"" start times is the former accounts for trimming, the other not. I find this naming fairly sensible.
Now `Track` has `virtual double GetStartTime() const = 0`, `SampleTrack` has this `GetSequenceStartTime`. `WaveTrack` implements `GetStartTime` by calling `GetPlayStartTime` on its clips. As a reader used to the `WaveClip` convention, I first thought it was a bug for `MixerSource` to call `seq->GetSequenceStartTime()` to decide where to start getting the samples from.
This PR looks like a good opportunity to rename these two. I still haven't figured out the need for queuing in this class. Isn't the caching provided by `SampleTrackCache` sufficient?"
4799,2023-06-16T13:38:03Z,2023-06-21T13:07:54Z,Paul-Licameli,0,0,1,43,3,1,1,[],,1,430195.0,0,0,0,0,38688703.392935,,0,1,0,False,[],,,"Resolves: #4798

Fix crash in Extra > Scriptables II > Get Info, when the choice is Preferences


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4759,2023-06-01T23:47:38Z,2023-06-07T17:25:42Z,Paul-Licameli,3,6,11,532,27,2,1,"['refactoring', 'Music', 'Tracks']",297926.0,1,1248110.0,1,0,0,0,39130215.943738,,0,11,0,False,"['saintmatthieu', 'Paul-Licameli']","I must fix build failure too.  I did not build with upload enabled. Pan, gain, mute, and solo were notions that didn’t belong in lib-track.  They are not useful for all track subtypes.

Likewise the channel type.

lib-track is still messy for historical reasons.  It should be just about maintaining the list of tracks of heterogeneous types.

Another pull request will move the TypeSwitch metaprogramming into lib-utility. > Pan, gain, mute, and solo were notions that didn’t belong in lib-track. They are not useful for all track subtypes.
>
> Likewise the channel type. 

That's reminding me that not all tracks are sample tracks. Makes sense.I guess this PR can be summarized as crossing two hurdles with one leap : fixing the regression, as well as factoring our the channel type from `Track` into `AudioGraph::Channel`. Is there something else?
(I'll ask you to remind me why it is a good thing that such methods are removed from `Track`.)","I guess this PR can be summarized as crossing two hurdles with one leap : fixing the regression, as well as factoring our the channel type from `Track` into `AudioGraph::Channel`. Is there something else?
(I'll ask you to remind me why it is a good thing that such methods are removed from `Track`.)","Resolves: #4756

Remove another nuisance in the way of the restructuring for wide wave clips: a three-state distcintion among mono tracks.

Also makes lib-audio-graph not dependent on lib-track.

Besides fixing the recent regression issue 4756, it's not completely neutral behaviorally, as noted in commit comments.

The Track controls always say ""Mono"", not ""Left"" or ""Right"" when you make a hard pan in one direction.  Copy and paste of
hard-panned mono tracks no longer makes tracks with the legacy three-state set differently.

Phaser and WahWah might compute slightly different results for hard-right panned mono tracks, or
Loudness for hard left or right.

I don't care about those subtleties and I hope you don't either.

QA: besides the bug fix, exercise these things to be sure of no unintended changes of behavior
- Test export (especially ""Export Multiple...""), mixing and rendering with some stacked effects in mono and stereo tracks
- Test all the above and also playback with changes of the pan slider
- Test the obscure Export Mixer dialog (""Use advanced mixing options"" in Import/Export preferences)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This is a bug : the second iteration will pan **both** channels hard right. This is because channels of one track now share the same `GainAndPan` sample track attachment. I'm not convinced of the usefulness of these `PlaysLeft` `PlaysRight` functions. It hides a simple check, letting the reader of usages of these functions suspect a more complex logic. For example, `if (PlaysLeft(*vt))` replacing
```cpp
         if (vt->GetChannelIgnoringPan() == Track::LeftChannel ||
               vt->GetChannelIgnoringPan() == Track::MonoChannel )
```
makes it look nicer at first, but one might wonder if `PlaysLeft` takes gain in consideration.

 Also, there are places where e.g. `PlaysLeft` is actually only used for its `type == LeftChannel` branch (wherever `IsMono` is checked first).
 
 I reckon that only keeping `Channel::GetChannelType()` and use this explicitly would improve intelligibility. (This is almost the exact same as previous `Track::GetChannel()`, but I'd keep `Type` in the name 😉) Let this stand.  The header comments explain what the functions do.  What is important is to reason that I preserve behavior in all places using the function instead of the enumeration.  That conservatism does require tests for IsMono moved first in some places. I found the old functions confusing because SetChannel stored a value retrieved by GetChannelIgnoringPan but not necessarily by the simply named GetChannel.
 Right, I should unlink channels first Works now."
4730,2023-05-24T11:02:02Z,2023-06-09T09:19:27Z,Paul-Licameli,5,1,4,419,1,2,1,"['refactoring', 'Music']",39379.0,0,1985215.0,0,0,0,0,39130249.254114,,2,4,0,False,"['LWinterberg', 'Ryan-Miller-Audacity', 'Paul-Licameli']","Rebased onto master, resolved conflicts with my other recent PR, and force-pushed.

One fewer commit because TrackList::NChannels is now already defined.
 In playing around with this build, it felt sensible overall, though the error messages ended up more annoying than I had anticipated. Can we make it so that in cases where the error pops up currently, it instead creates a new track? In the case of multiple selected tracks, any ""overflowing"" pasted contents would go immediately after the last selected track, in case of a single selected track, it would go at the end of the project. Tested PR build and confirmed the new paste details as outlined in each of the attached tickets. Did some brief testing of the paste function as a whole and confirmed no new issues identified. Tested on Windows, MacOS, and Linux builds.

During testing I did notice one crash which has been logged in #4769. This issue is not due to these changes and is reproducible back to Audacity 3.3.0.

There is one use case that I'd like to get clarification on after talking with Paul. 

1) When I have a mono track and a stereo track, copy my stereo track, and attempt to paste by clicking within my mono track then pressing Ctrl+V, it doesn't paste within that mono track (to be expected); however, it does paste that data into my stereo track even though I do not have my stereo track selected at all. 

In the Issue ticket you mention ""In case a stereo track of the copy corresponds to a mono track in the attempted paste -- the operation fails with an error message, probably correctly so"", this message no longer displays which I believe would be the desired behavior in this case right? Certainly shouldn't have data being pasted where I am not current working in a seperate track.

You can see the behavior I'm describing pretty easily in this video with a couple of chirps.

[Untitled_ Jun 6, 2023 7_50 AM.webm](https://github.com/audacity/audacity/assets/88568755/f0bc3aa9-d2aa-4729-beee-b3ec869219ff)

After talking with Paul, it was noted that this behavior was discussed (Point 4 from #4720), but in use this just doesn't feel correct. Focusing and making a selection in a different track, but audio is being pasted into a completely uninvolved track from my actions seems like bad behavior in general.

@LWinterberg do you have any additional thoughts to add this? I mean this is largely an edge case since most people would not be attempting to paste stereo audio into a mono track in the first place; however, if discovered it would/could make a user think something is wrong. I would think that the selected track would return an error rather than placing the audio into the unrelated track (when a single track is selected). I would say this is fine behavior if the user uses a select all and then makes the attempt, but expect different results when isolating a single track. > Focusing and making a selection in a different track, but audio is being pasted into a completely uninvolved track from my actions seems like bad behavior in general.

The ideal behavior would be to mix down the stereo track you have selected into the mono track and tell you about it, but I understand this is out of scope for the purpose of this refactor. And between the next-best options (giving you an error, or pasting into the nearest available slot), I prefer this version. > > Focusing and making a selection in a different track, but audio is being pasted into a completely uninvolved track from my actions seems like bad behavior in general.
> 
> The ideal behavior would be to mix down the stereo track you have selected into the mono track and tell you about it, but I understand this is out of scope for the purpose of this refactor. And between the next-best options (giving you an error, or pasting into the nearest available slot), I prefer this version.

In the general case, maybe I select a label track which is followed by a mono track, and I'm pasting one mono track.  Mix-down doesn't matter here.  In that example the question is whether to succeed quietly pasting into the following track or not.
",,"Resolves: #4720
Resolves: #4714
Resolves: #4718

Rewrite the logic for pasting into tracks, fixing strange corner cases that sometimes pasted a copied track multiple times, sometimes never, and sometimes omitting needed sync-lock adjustments.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If we keep this message (and end up deferring #4734 until later), we probably should point out both the problem and the solution. So: 

`""The content you are trying to paste will span across more tracks than you currently have available. Add more tracks and try again.""`

and

`""There are not enough tracks selected to accommodate your copied content. Select additional tracks and try again.""`"
4739,2023-05-26T20:52:14Z,2023-06-09T16:06:07Z,Paul-Licameli,30,2,11,447,9,4,8,['Music'],47117.0,1,1776966.0,0,0,0,0,39130288.973262,,2,11,0,False,"['petersampsonaudacity', 'saintmatthieu', 'crsib', 'rbdannenberg', 'Tantacrul', 'Paul-Licameli']","Testing on W10 with @Paul-Licameli 's branch build:  audacity-win-3.4.0-alpha-20230526+4a8eda0-x64

I confirm that the behavior reported in #4737 is now blocked in this branch build:
![image](https://github.com/audacity/audacity/assets/50205984/ff43a2e2-426b-4835-80e2-a0590d1a0f53)

**Track Format**
But note carefully that this fix does not block the creation of a stereo track from two single tracks each with a different **Sample Format**.

I tried with a 16-bit track and a 32-bit track - they could be merged into a single stereo track at 16-bit _(the 16-bit track was the upper track)._  And when split again they both reverted to their original bit formats 16-bit and 32-bit.
 > Testing on W10 with @Paul-Licameli 's branch build: audacity-win-3.4.0-alpha-20230526+4a8eda0-x64
> 
> I confirm that the behavior reported in #4737 is now blocked in this branch build: ![image](https://user-images.githubusercontent.com/50205984/241379278-ff43a2e2-426b-4835-80e2-a0590d1a0f53.png)
> 
> **Track Format** But note carefully that this fix does not block the creation of a stereo track from two single tracks each with a different **Sample Format**.
> 
> I tried with a 16-bit track and a 32-bit track - they could be merged into a single stereo track at 16-bit _(the 16-bit track was the upper track)._ And when split again they both reverted to their original bit formats 16-bit and 32-bit.

Thanks.  Yes, I should do other work to disallow mismatch of sample widths.

Did I do the right thing for rates?  An alternative to the prohibition might be a quiet resampling of the lesser rate to the greater.

Likewise for widths:  the narrower might quietly change to match the wider.  No dither would be needed, but storage requirements of the saved project might increase.

So should a join of channels with mismatched formats fail too with an error?

A third possibility (with either rates or channels) would be to ask the user.
 > Did I do the right thing for rates? An alternative to the prohibition might be a quiet resampling of the lesser rate to the greater.

Well I like it throwing the error - but I'm no expert in such matters.

_I have written to Dominic to ask if he allowed this deliberately for some reason._


> Likewise for widths: the narrower might quietly change to match the wider. No dither would be needed, but storage requirements of the saved project might increase.

Folk already complain a lot about storage requirements increasing ...


> So should a join of channels with mismatched formats fail too with an error?

I would have thought so

 
> A third possibility (with either rates or channels) would be to ask the user.

That could also work - but would be complex if both rate and format were mismatched.  

But I would suggest that as a first step simple error trap(s) and error report(s) are fine.
But you may need a third message for where both the rate and the format are mismatched.


@LWinterberg @Tantacrul @DilsonsPickles 
_**The preferred approach is really a decision for the Muse design team, deciding if they prefer the simple error(s) or a corrective dialog.**_  

 @LWinterberg @DilsonsPickles - can we investigate a little bit what we should do here to be as gracefully and friendly to the user as possible? I feel we should try to make a decision about this.

> Did I do the right thing for rates? An alternative to the prohibition might be a quiet resampling of the lesser rate to the greater.

A part of me thinks that we should just do this and not ask the user any questions. However, there's going to be more to it than that methinks. A discussion for our design meeting, I feel! 
 Resampling is generally lossy, I'm not sure that implicit resampling is a good idea > Resampling is generally lossy, I'm not sure that implicit resampling is a good idea

@crsib a VERY good point Dmitry
 > @LWinterberg @DilsonsPickles - can we investigate a little bit what we should do here to be as gracefully and friendly to the user as possible? I feel we should try to make a decision about this.
> 
> > Did I do the right thing for rates? An alternative to the prohibition might be a quiet resampling of the lesser rate to the greater.
> 
> A part of me thinks that we should just do this and not ask the user any questions. However, there's going to be more to it than that methinks. A discussion for our design meeting, I feel!

Remember the user might attempt to make a stereo track interactively, or there might be files saved before 3.4 that the user tries to load into new Audacity.

Whatever the resolution (disallow, fix quietly, or ask), the work of detecting the condition is necessary and I put that effort in for the rates, but not yet for the formats.

Actually, format mismatch between channels, with no rate mismatch, might be a tolerable thing with all the data restructuring, not presenting significant trouble for the time stretching calculations we need to do, but it's all the same a weird thing to do.
 > ... or there might be files saved before 3.4 that the user tries to load into new Audacity.

A good point Paul.

So would you error trap that and offer to fix it by up-sampling to the higher of the two rates?

 I'm coming to the conclusion that I cannot solve this with a single sentence :)

Thanks all. We'll need to give it some proper thought. Perhaps explicit prompts are the way to go. > Resampling is generally lossy, I'm not sure that implicit resampling is a good idea

Is that really so?

If there is in fact no frequency content above 1/2 of the lesser sample rate (the lesser of two Nyquist frequencies), I think the Sampling Theorem tells us that theoretically you could down-sample from the from the higher rate to the lower, then up-sample again, without loss.

Practical calculations would truncate the tails of sinc functions though.
 There's no inherent loss, but calculation is expensive. An old Smith and Gossett paper did an error analysis and said you need something like 50 multiply/adds and 50 accurate estimates of the sinc function to get 16-bit resolution (so even more for 20 or 24 bits). You can estimate the sinc function with interpolated table lookup, but that's two memory accesses, a float to int conversion (usually this is expensive) and additional float operations (times 50 or however many points you use) so it's much worse than just 50 multiply/adds. I don't think there are any tricks to do fast interpolated lookups. On the other hand, I think macOS uses implicit sample rate conversion in core audio so that you can open  an output device at any sample rate even while the device is playing a stream at some other rate. I wouldn't be surprised if they cut corners on conversion, and I strongly believe software sampling synthesizers do not do such high-quality conversion since the worst case numerically (e.g. full amplitude at 20kHz) is not something you'll find in listenable audio, so you can normally get away with fewer points (i.e. a more truncated sync function). I don't know what's common practice, and people I've asked told me the details were trade secrets. Thanks, Roger!

So, there is theory but then there is practice… and so quiet resampling is probably not a thing we should do and it isn’t what I did in this pull request. Not to mention that it would further increase the storage requirements! My guess on how most users would feel about the negative side effects of the various solutions :
* Quality loss: unaware, indifferent
* Memory increase: unaware, understanding
* Error pop-up: perplexed, annoyed, clueless

I therefore would favour the silent conversion (both sampling-rate and bit-depth wise). Whatever user is aware of the quality loss is probably tech savy and will find a way around it, or look a default behaviour she could change. > Memory increase: unaware, understanding

They are most certainly frustrated by the storage requirements, so definitely aware and not so understanding. Resampling a track will effectively keep the old track on your drive before you close Audacity (or even after, if you are unlucky), followed by a slow (and storage space demanding!) compaction. 

Trying to join two tracks with different sample rates sounds like a very rare corner case. I would much prefer to have a descriptive error message here, probably coupled with ""Resample to xxx"" button.  > > Memory increase: unaware, understanding
> 
> They are most certainly frustrated by the storage requirements, so definitely aware and not so understanding.

Dmitry is right here :  we see many cases/complaints on the Forum (and here on GitHub) about the ballooning sizes of projects - so to add to this with hidden automatic resampling seem absolutely not the right thing to do.


>Trying to join two tracks with different sample rates sounds like a very rare corner case. I would much prefer to have a descriptive error message here, probably coupled with ""Resample to xxx"" button.

And in the light of @rbdannenberg  Roger's comments _(and @crsib Dmitry's earlier comments in this thread - and @Tantacrul 's too)_ - I **_fully_** support Dmitry's approach here - which is basically the approach that @Paul-Licameli  was originally pursuing with this PR ""fiix"".

 > Resampling a track will effectively keep the old track on your drive

True, but if a user wants to do this, gets the error message and knows how to solve the problem, she will probably proceed with resampling manually, resulting in the same memory increase, no? > I see no issues with the proposed solution. I think design issues could be solved in a follow up pull requests.

A good decision.

But note that we also have to deal with mis-matched Formats - but @Paul-Licameli  is already aware of that.

And consideration needs to be given to Paul's earlier point about old projects already containing such stereo tracks with mis-matched rates and/or formats.
 > resulting in the same memory increase, no

But it won't be implicit. On top of that, the user may want to resample to a lower rate, not to a higher one. Or just to pan tracks accordingly (in case there are no plans to apply a stereo effect) I like the panning idea, and suggest that the error message one way or another indicates this workaround.  I've been discussing this with Dominic Mazzoni, the Godfather of Audacity.

His basic view
>Oh, that's definitely just a bug!   ...   I'm pretty sure I just never thought about that possibility. Testing on W10 with @Paul-Licameli 's branch build the use case of ""attempting to load a project (made previously) with mismatching rates in a stereo track"".

I confirm that this is indeed blocked by Paul's branch build as @Ryan-Miller-Audacity reported in #4737 

But, the error message I get is:
![image](https://github.com/audacity/audacity/assets/50205984/26aa0577-655f-4809-996e-4a94a9a090ef)

This message is not helpful at all to the user:

**A) they would need to guess that they could manually fix this:**
1. open it in an earlier version of Audacity
2.  examine each stereo track in turn by splitting to mono, examining the TCP
3. resample requisite tracks to match sample rates
4. rejoin the mono tracks as stereo tracks
5. save the project
6. reopen project in latest Audacity

**B) Audacity offers no repair help**

Most folk are going to struggle to guess or even implement the A) manual fix.

So while we seem to have agreed we should just block such mismatched stereo track creation in 3.4.0 onwards with no automatic resampling - I think a _**good**_ case can be made for offering automatic resampling of channels in stereo tracks as part of the above error message.

Not many users are going to guess/intuit the step required for the A) manual fix - and I'm pretty sure we wouldn't want to put those manual steps in an error message.

 Rebased onto recent master; one commit added to change error messages; otherwise unchanged.
 Added one commit to fix the first of two problems described at https://github.com/audacity/audacity/issues/4737#issuecomment-1570799693
 Should I wait a bit for review this time?) Two more commits.  One more review, please.

Addressing the other problem in Ryan's comment.

The work to make higher-level file consistency checks work properly, incidental to disallowing the sample rate mismatch -- it wasn't complete.  Thanks @Ryan-Miller-Audacity , and I don't agree with leaving the problem to be fixed later.
 > One more review, please.

Absolutely no problem with that :-) I was just joking a bit, sorry :-) Please note the build failures. I think the fix is trivial - TentativeConnection should be exported Sorry >  I think that it could be more helpful, and point users towards Tracks > resample (rather than the rate sub menu on a track's context menu) ...

@DavidBailes  these are the revised error messages that @Tantacrul and Team discussed and agreed on  
and are in @Paul-Licameli 's latest branch build

>So after discussing this with the team, we think this PR is good to go in terms of functionality.
>
>However, we need some copy improvements for the dialogs.
>
>Dialog 1: **Mono tracks must have the same sample rate in order to be combined into a stereo track**
>
>Dialog 2: **This project cannot be opened because it contains a stereo track with different sample rates. This functionality is no longer supported since the release of Audacity version 3.4**


Note that neither method of resampling is discussed here in these messages - it is up to the user tro decide whetherbtoi use te TCP dropdown or Resample Tracks from the menu, nor any other workaround like panning

And I think that is a good and right decision as otherwise the error messages become too long an overburdened and end up being TL;DR.I see no issues with the proposed solution. I think design issues could be solved in a follow up pull requests. I agree with @crsib 's comment ""I see no issues with the proposed solution. I think design issues could be solved in a follow up pull requests.""
The comment that I made was to do with the design of the ""error"" message - I think that it could be more helpful, and point users towards Tracks > resample (rather than the rate sub menu on a track's context menu) , and mention @crsib 's suggestion of just using panning if stereo effects are not required.
So I'm quite happy to approve this pull request.","I see no issues with the proposed solution. I think design issues could be solved in a follow up pull requests. I agree with @crsib 's comment ""I see no issues with the proposed solution. I think design issues could be solved in a follow up pull requests.""
The comment that I made was to do with the design of the ""error"" message - I think that it could be more helpful, and point users towards Tracks > resample (rather than the rate sub menu on a track's context menu) , and mention @crsib 's suggestion of just using panning if stereo effects are not required.
So I'm quite happy to approve this pull request.","Resolves: #4737

Store sample rate nonredundantly for the stereo track pair.

Don't allow joining of mono tracks into stereo when rates differ. 
(Don't try to use one or the other rate, but let the user first resample.)

Disallow the opening of legacy files that might have been stored with such a mismatch.

Incidentally fix the failure to abort opening of files when inconsistency checks fail -- which was a bug introduced in 3.0.0

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This sentence will probably let the user think that she now has to convert one of the tracks to the sample rate of the other. As @crsib pointed out, an alternative worth considering would be panning - simpler, no memory usage increase, lossless. Please consider suggesting this in your sentence. There is also the danger that the user changes the sample rate of one of the tracks by using the rate sub menu on the track's menu, rather than Tracks > Resample."
4767,2023-06-05T15:12:16Z,2023-06-15T13:08:35Z,vsverchinsky,3,0,1,2,1,1,1,[],430393.0,0,856579.0,0,0,0,0,39207076.09652,,0,1,0,False,"['petersampsonaudacity', 'dozzzzer']","Testing on W10 with @vsverchinsky 's branch build:   audacity-win-3.4.0-alpha-20230605+3df662a-x64

And using that branch it all works fine with both my on-board D:\drive a spinning metal 1TB disk and my external G:\ exFAT USB stick.

So Vitaly's branch looks to fix this issue (on Windows at least) I can try to test later on Mac - _it's a shame this didn't get tested in time to be pulled for the recent 3.3.3 release_ @Ryan-Miller-Audacity 

Testing on macOS 12.6.3 Monterey with @vsverchinsky 's branch Universal Mac build

1) still fails with 3.3.3 0 BUT does not crash on Mac - instead gives an error message:
![image](https://github.com/audacity/audacity/assets/50205984/72615313-7895-42aa-8ac4-65c8c42e43ca)
which is nonsense as I can indeed write to it - the above image was transferred to my PC via that same USB stick


2.  On Mac too with Vitaly's branch Universal build all works fine 
I get  a macro-output folder created on Black 32 DT (the USB stick top level directory) - and the result of the MP3 Conversion macro is sent to that macro-output folder.


So Vitaly's fix for this works fine on Mac as well as Windows The issue seems to be properly fixed now.

### Before the fix:

https://github.com/audacity/audacity/assets/70063970/bf95e0a4-d137-4ef8-9e5e-73dfac90a6d7

### After the fix:

https://github.com/audacity/audacity/assets/70063970/5da19a7d-617d-4408-87c3-ac212be5280f


",,"Resolves: #2471 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4624,2023-04-27T11:36:36Z,2023-06-14T15:49:40Z,Paul-Licameli,3,5,8,1254,34,3,2,['code quality'],86493.0,1,4162389.0,0,0,0,0,39283808.516051,,0,8,1,False,"['dozzzzer', 'Paul-Licameli']","I need to fix CI failures before this is reviewed
 > I don't agree that this could be called a ""simplification"". This PR does some clean up. I have no objections.
> 
> NumericTextCtrl should be tested carefully.

I want to avoid rewriting variadic template constructors and std::forward a lot.

I want it to be easy to write more classes like those for menu trees, so it is easy to express other trees declaratively instead of building them up with procedural code.

If you review the other pull requests that follow, you can see registries also getting smarter about type checking the trees as they are constructed.
 TestedI don't agree that this could be called a ""simplification"". This PR does some clean up. I have no objections. 

NumericTextCtrl should be tested carefully.","I don't agree that this could be called a ""simplification"". This PR does some clean up. I have no objections. 

NumericTextCtrl should be tested carefully.","Resolves: *(direct link to the issue)*

Depends on
- #4623

Use the Composite utility to simplify definitions of menu registry classes,
and simplify the registration of numeric format conversions and snap functions,
so they too can enjoy syntactic simplicity like menu descriptions.

QA:  Mostly checking the continued presence of menu items (don't click every item)
- [x] Snap and selection format choices
- [x] Invidual track pull down menus
- [x] Context menus (Right clicks on a label, or the background, or vertical rulers (all track types), or wave track either in or outside a clip)
- [x] Apply Macros menu finds all of your own defined macros
- [x] Effect choice menu opened from sidebar
- [x] Extra menu and sub-menus
- [x] Effect, generator, analyzer menus
- [x] Choices for export format
- [x] Preference panel pages; contents of Library preference page in particular
- [x] Scrubbing submenu of Transport



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Publicly constructible `*Base` is quite uncommon approach, maybe `BasicInderectItem` would fit better here? Sorry :) Function doesn't return item, it returns function that returns item... I'm not quite sure what is the benefit of having one more type, I don't have any strong opinion though There is [evidence](https://www.zverovich.net/2023/04/10/cxx20-modules-in-clang.html) that extern templates do not really work on Clang, the code is quite spooky on CL. Do we need them here? What is the measured effect of this? I needed special code for Windows to link.  I might make it compile nothing otherwise."
4793,2023-06-13T15:21:18Z,2023-06-14T12:51:37Z,Paul-Licameli,0,2,1,38,2,1,1,[],,1,77422.0,0,0,0,0,39294495.749696,,0,1,0,False,[],,,"... there were uninitialized member variables, now they are removed.

Resolves: #4792

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`const` please So I suppose this will initialize `mNumSelected` to 0 and `mMono` to false? I prefer explicit assignments.
4742,2023-05-29T02:48:06Z,2023-06-14T10:28:09Z,Paul-Licameli,2,26,15,1270,23,2,2,['refactoring'],1007922.0,1,1410008.0,1,0,0,0,39303104.435576,,0,15,1,False,"['Ryan-Miller-Audacity', 'dozzzzer']","Testing this on MacOS it appears that at the very least recording is broken within this build. You can see the input meters react to the input, but no wave form is drawn and no audio data is present. Tested.
`WaveClip` load from XML should be fixed.
`#include <optional>` is missing in `WaveClip.cpp`","`WaveClip` load from XML should be fixed.
`#include <optional>` is missing in `WaveClip.cpp`","Resolves: *(direct link to the issue)*

WaveClips can be ""wide,"" spanning multiple channels.

Make WaveClip capable of storing multiple Sequences, and maintaining consistency of their sizes, formats, etc., though
they do not yet ever store more than one.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

QA:
- [x]  smoke-test playing, recording, generating, applying effects with mono and stereo tracks
- [x] Waveform, spectrogram views scroll and magnify as before
- [x] pasting into mono and stereo wave tracks, also with hidden smart clip data
- [x] Saving, reopening of mono and stereo tracks

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","There are more than 1 sequence now and function name has become a bit ambiguous  `this->GetWidth() == other->GetWidth()` could be stated as a precondition for this function and all checks and error reporting then would happen on the calling side, or exception could be thrown similarly to the ""not enough room available"" case below  what is `the correct width`?  Doesn't seem to access any of private members of `WaveClip`, so this function could be moved out from class definition and completely hidden inside `cpp` `WaveTrack::Append` could also accept `buffer[]` Hm, I may have overlooked excpetion safety guarantees and added trims that will not roll back on failure Same here: exception safety guaranty violated by `SetTrimRight`  `@excsafety{Strong}`? Turned out that `WaveClip::HandleXMLEndTag` could be called twice, second call happens in `WaveTrack::HandleXMLEndTag` But the class invariant will rule out any possibility of a difference between start sample positions of the channels.  So no real ambiguity.  Do you agree?
 Yes!

I have pushed one more commit to fix this part.

The commit is common with #4739 where it was also necessary to address a problem Ryan found in testing.

But this is not a complete response to your review yet.
 I can't strengthen the precondition -- because the function is used by `WaveClip::Paste()` which overrides `Track::Paste()`.  Overriding functions can't strengthen preconditions (that violates the L principle of SOLID), and to state the precondition in `Track` would require the notion of width to be general for Tracks.  I don't want that.

I could make `Track::Paste` return an error code and check it -- but I thought that would be too much trouble.

So really by elimination, I should throw an exception.

You may have noticed many `TODO wide wave tracks` comments.  A later PR making wide wave clips really happen in wide wave tracks should eliminate and address all of those.  But it's not in scope of this PR yet.

 I will change that comment to refer to `GetWidth()` of the track and the clip.
 But as part of the class contract, the invariant should be available in public so it could be asserted elsewhere.
 That will be addressed later when wide wave tracks exist.
 So, I should change my Transaction class to save and restore the state of trims too.  That's a good point.

Some years ago I made a very thorough examination of places where saving a new block (then, separate files, now, rows in the Sqlite database) might fail because of limited drive space.  These places can throw exceptions.

Most exceptions are handled in `AudacityApp::OnExceptionInMainLoop()` which uses the last undo/redo state to restore the state of the project in memory.  So inconsistencies of the trims would be corrected.

But there is also `AudioIO::DrainRecordBuffers()` which does its own exception handling, in case space runs out during recording.  It keeps as much recording as possible from the last successful autosave.

There are other places where `GuardedCall` stops exceptions.
 The issue I mentioned is solely about the naming. By the way, I've reread the comments and didn't find any stating such behaviour) > I can't strengthen the precondition -- because the function is used by WaveClip::Paste() which overrides Track::Paste(). Overriding functions can't strengthen preconditions (that violates the L principle of SOLID), and to state the precondition in Track would require the notion of width to be general for Tracks. I don't want that.

Right, I wasn't realizing that this is actually an overridden function But it's declared as private function. Then I will fix that. What would be a better name? To my taste I'd called it `GetSamplesOrigin` for example, but I do not insit on the name change. What's bothers me more now is that if it's a class invariant that all sequences should start at same position then it should be mentioned in the comment to `mSequences` among other invarants, isn't it? I don't understand that:  `Sequence` itself is always zero-origin, and doesn't know its rate or position on the time axis.  `WaveClip` stores `mSequenceOffset`, just singly, as always.  So there is no consistency condition to state for that.
 Ah, you are right, I apologize I thought that most of `std::vector` implementations do perform out-of-range check in debug. MS does for sure. Maybe so, but this would fail a little faster.

if I state a precondition in a way formal enough to be coded, and the test is not expensive at run time, then I also assert it in the function body for completeness.

I think assertions properly used are not only for detecting bugs.  They are also for documenting assumptions and for assisting the reasoning of someone reading the code.
"
3165,2022-06-30T08:20:43Z,2022-07-01T08:02:06Z,LWinterberg,0,0,1,48,1,1,1,[],,0,29653855.0,0,0,0,0,39810502.544715,,0,1,0,False,[],,,"Resolves: #2964 

provided by Adam Fontenot, changes released as CC0. https://github.com/audacity/audacity/issues/2964#issuecomment-1170598695

The problem was that KDE/Qt doesn't support the full SVG spec.
https://doc.qt.io/qt-5/svgrendering.html


Related bugs further upstream:
* https://bugs.kde.org/show_bug.cgi?id=448234
* https://bugreports.qt.io/browse/QTBUG-12588",
2616,2022-03-03T14:02:29Z,2022-03-29T12:50:01Z,LWinterberg,0,0,1,4,2,1,1,[],,0,39914895.0,0,0,0,0,39810558.762594,,0,1,0,False,[],,,"Resolves: #2028

as these menus do various things with audio clips and not just their boundaries, they should be named accordingly. ",
3111,2022-06-20T10:04:31Z,2023-01-24T18:55:50Z,LWinterberg,0,0,1,2,1,1,1,[],,0,30511562.0,0,0,0,0,39810572.127302,,0,1,0,False,[],,,"Resolves: #3103

but only the capitalization",
4779,2023-06-08T13:12:24Z,2023-06-08T13:17:03Z,LWinterberg,0,0,1,6,1,1,1,[],,0,572.0,0,0,0,0,39811091.414624,,0,1,0,False,[],,,,
3577,2022-09-08T13:53:57Z,2022-09-08T17:04:12Z,LWinterberg,0,0,1,16,3,1,1,[],,0,23584916.0,0,0,0,0,39811456.599329,,0,1,0,False,[],,,"Resolves: #3568

NB: Updates code & comments aside from just the strings. I believe this doesn't affect any functionality though. ",
4184,2023-01-15T20:08:02Z,2023-01-16T12:38:35Z,LWinterberg,0,0,1,2,1,1,1,[],,0,12416836.0,0,0,0,0,39811494.090332,,0,1,0,False,[],,,Resolves: #4183,
4466,2023-03-29T13:52:41Z,2023-03-30T08:56:53Z,LWinterberg,1,0,1,1,1,1,1,[],11009.0,0,6132121.0,0,0,0,0,39811532.130054,,0,1,0,False,['petersampsonaudacity'],"Testing on @LWinterberg 's latest branch:  audacity-win-3.3.0-alpha-20230329+17fd087-x64

This works fine in Leo's branch build:
![image](https://user-images.githubusercontent.com/50205984/228604492-2b33a714-8972-4890-9917-099aa91ecde6.png)
",,"Resolves: #4465 
",
4712,2023-05-20T00:55:37Z,2023-06-02T12:29:47Z,LWinterberg,4,6,1,45,6,2,1,['non-code'],1123770.0,0,1685937.0,0,0,0,0,39811542.763046,,0,1,0,False,"['LWinterberg', 'Ryan-Miller-Audacity']","Reviewing links within the App and they appear to be working as expected and point to the correct locations.

Was this question mark tooltip ever clickable? Or is it just meant to be a hovered tooltip? It looks the same as the other help links seen throughout the preferences pages, but looking back all the way to 3.3.0 (when it was introduced) it is not clickable. 

![image](https://github.com/audacity/audacity/assets/88568755/4fd70e2a-8001-46c8-b11e-1c60fd8a8b0a)

Besides that one note things seems to operate as expected. Also took a few minutes to review some of the updated links in contributing.md and readme.md as well and the links there look good. > Reviewing links within the App and they appear to be working as expected and point to the correct locations.
> 
> Was this question mark tooltip ever clickable? Or is it just meant to be a hovered tooltip? It looks the same as the other help links seen throughout the preferences pages, but looking back all the way to 3.3.0 (when it was introduced) it is not clickable.
> 
> ![image](https://user-images.githubusercontent.com/88568755/242757810-4fd70e2a-8001-46c8-b11e-1c60fd8a8b0a.png)
> 
> Besides that one note things seems to operate as expected.

I went ahead and approved this since I'm pretty certain when we implemented this that it was the intention to be a hover only tooltip. If I misremember we can retrack and fix. > Was this question mark tooltip ever clickable?

It may have been in design, but the implementation never was",,,"[Nitpick] I think adding the verb “help” would facilitate a more collaborative working environment for this project.
```suggestion
If you want to help develop Audacity:
``` [Proofreading]
```suggestion
Bugs **must** be reproducible. If you can't find steps to reproduce one, try posting about your experience [in the Audacity forum](https://forum.audacityteam.org/) instead. 
``` [Proofreading]
```suggestion
Got some ideas on how to improve Audacity? Share them at [the relevant section in the forum](https://forum.audacityteam.org/c/feedback-and-discussion-forum/adding-features-to-audacity/22). If you have a very concrete idea like something in the code which should be added or changed, you can also  [make an enhancement request in the issue tracker](https://github.com/audacity/audacity/issues/new/choose).
``` [Nitpick] Hyperlinking the title of the forum section would make it easier for users to get the page.
```suggestion
You can ask for help with compilation problems in the [Programing and Development section of our forum](https://forum.audacityteam.org/c/programming-and-development/compiling-audacity/18)
``` [Typo]
```suggestion
* Building instructions can be found in the BUILDING.md
``` [Proofreading]
```suggestion
Audacity is mostly coded in C++. You'll need to be at least somewhat comfortable with using this programming language to start contributing code.
```"
4776,2023-06-07T15:39:51Z,2023-06-08T12:57:33Z,crsib,2,5,1,60,3,2,1,[],5641.0,0,76670.0,0,0,0,0,39812558.337472,,0,1,0,False,"['crsib', 'Paul-Licameli']","Thanks for fixing the bug I introduced.  Do I need to wear a paper bag on my head tomorrow?
 I missed it during the code review, so in some way, I fixed my bug :-)",,"Resolves: #4618 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Might be in anonymous namespace  oops Why is the second base class needed? Citing `DefaultEffectEditor` - `Inherit wxEvtHandler so that Un-Bind()-ing is automatic in the destructor`. I haven't tested that claim, I want minimal possible changes considering that we (possibly) want to target 3.3.3. I think it's unnecessary, because Bind() wasn't used, but let it stand if it is urgent and you have any doubt.
"
4743,2023-05-29T14:10:14Z,2023-06-07T13:03:56Z,crsib,2,1,3,154,6,1,1,['audio sharing'],72532.0,2,773627.0,0,0,0,0,39898580.786071,,0,3,1,False,"['Ryan-Miller-Audacity', 'dozzzzer']","Tested. A new issue was found: https://github.com/audacity/audacity/issues/4747 Tested and confirmed the following to the Audio.com upload flow: track title field is added and required for upload, track title field is focused upon opening the dialog, Anonymous uploads are not allowed, linking audio.com account works as expected (auto and manual), and audio.com link is opened immediately upon upload.

Tested the above in Windows, MacOS, and Linux.",,"1. Track Title field is added
2. After the upload is completed URL is opened in the browser immediately

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`this` isn't used
4765,2023-06-04T07:54:49Z,2023-06-07T11:59:18Z,Gootector,1,0,2,2,1,1,1,[],102448.0,0,273870.0,0,0,0,0,39902465.131631,,0,2,0,False,['Gootector'],"@LWinterberg What do you think about this fix?
Or should be:
Help with using Audacity is available at [Audacity website](https://audacityteam.org/help/).",,"There is missing dot at the end of this sentence; because other sentences in this file are ""dotted"".
Link update.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4641,2023-05-01T03:35:14Z,2023-06-06T15:08:12Z,ksoze95,2,4,4,286,6,2,1,[],2793466.0,0,3151983.0,1,0,0,0,39977529.741541,,0,4,0,False,['ksoze95'],Rebased off latest audacity qt branch Rebased off latest qt branchPlease address the comments,Please address the comments,"Resolves: #4640
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Should it be something like TranslationManager? Ideally it should be `ChangeLanguage(const QString& code)` Done Done
4770,2023-06-06T13:33:22Z,2023-06-06T14:11:21Z,carlo-bramini,0,0,1,3,1,1,1,[],,0,4533.0,0,0,0,0,39978693.868497,,0,1,0,False,[],,,"MSVC supports `std::hardware_destructive_interference_size`, but MinGW uses libstdc++, which it does not.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4623,2023-04-27T11:32:17Z,2023-06-03T15:57:19Z,Paul-Licameli,1,2,4,424,5,3,1,[],88300.0,1,3212705.0,0,0,0,0,40233789.255278,,2,4,1,False,['Paul-Licameli'],"Rebased to fix conflicts, and so I squashed the small build fix commits too
",,"Resolves: *(direct link to the issue)*

Utility class templates that can simplify some Registry code

Implement the Composite pattern of a container of nodes that is also of the node type.

Variadic and range constructors can take many components, also interposing type checks.

A template for easy definition of extensions that inherit the variadic and range constructors.

QA:  Nothing to do.  This introduces utilities but uses them nowhere yet but in unit tests.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","So probably we can call it `ComponentPtr` or `PointerType`? Easily done, if you like, only affecting the template parameter locally.

Inside the class, it's aliased to `value_type`, named that specifically to make it work with `std::back_inserter`.
"
4748,2023-05-30T11:28:45Z,2023-06-02T11:15:13Z,ksoze95,1,0,1,69,5,1,1,[],257301.0,0,258399.0,0,0,0,0,40337109.629911,,0,1,0,False,['ksoze95'],Rebased off latest audacity qt branch,,"Resolves: #4729

Known issues
1. The setup button alignment to the right edge is current broken, this will be addressed when we integrate kddockwidgets.
2. There are missing horizontal toolbar separators between each row.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4606,2023-04-25T17:23:42Z,2023-06-02T10:42:02Z,ksoze95,1,0,5,626,18,1,1,[],3256442.0,0,3259229.0,0,0,0,0,40338984.823724,,0,5,0,False,['ksoze95'],Rebased off latest audacity qt branch.,,"Resolves: #4578 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4516,2023-04-07T16:06:27Z,2023-06-02T09:06:19Z,ksoze95,0,7,18,1125,17,2,1,[],,0,4813192.0,0,0,0,0,40344859.347571,,0,18,0,False,[],I wonder if this should be squash merged ,I wonder if this should be squash merged ,"Resolves: #4454

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","TBH I prefer `#pragma once` exactly for this reason 1. I would prefer the standard `assert`
2. Asserting should not replace the checks I dunno why we need this, but no objection for now Replaced with pragma. Done. We will need to figure out how to make it open ended. No assumption should be made about the available track types... I have made the Qt sidebar now use DelegateChooser with multiple delegate type choices.  There is currently a lot of duplicated code between the different control panel types, this will be address on issue #4707

To support fully open-endedness, the different delegate choices should me not hardcoded in Sidebar.qml.  Issue #4706 has be raised to track this."
4738,2023-05-26T17:08:31Z,2023-06-02T08:33:27Z,Paul-Licameli,3,8,2,79,10,2,1,['refactoring'],511267.0,1,573900.0,0,0,0,0,40346829.934044,,2,2,1,False,"['Paul-Licameli', 'Ryan-Miller-Audacity', 'dozzzzer']","Tested (except for the fix for #4716, is to be checked by @Ryan-Miller-Audacity). No regression to the existing functionality. Tested fix for #4716. Notes are located here: https://github.com/audacity/audacity/issues/4716#issuecomment-1572968508 One of the lesser problems solved, for fixing iterations over tracks:
Outside Track.h, do not use the position of a channel in the total track list; but only use position of a leader track
among leaders.

Do not use the total number of channels (except for some initial array capacities). Use the number of leader tracks.
",,"Resolves: #4716 

One of the lesser problems solved, for fixing iterations over tracks:
Outside Track.h, do not use the position of a channel in the total track list; but only use position of a leader track
among leaders.

Do not use the total number of channels (except for some initial array capacities).  Use the number of leader tracks.

QA:  besides verifying #4716, verify no changes in these things, when stereo tracks are present in the project:
- [x] Shift-click in track control panels to extend the range of selected tracks works, upwards and downwards.
- [x] Adding a label during playback (Ctrl + B) restores focus to the correct track after RETURN key.
- [x] If an Analyzer adds a label track that would have been off the bottom of the screen, vertical scrolling of it into view still happens

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Code duplication Code duplication Compensates change of index calculation in `DoAddLabel` I don’t understand you What is duplicated?  There are similar but not duplicated lines. Right.  Maybe not obvious.  This change requires the others in handling mRestoreFocus You are suggesting a small function to return a pair of iterators, used twice. Yes, function could check whether track A is before track B or not:
`if(IsBefore(tracks, eTrack, sTrack)) swap(...)`
`if(!IsBefore(tracks, &track, pFirst)) pExtendFrom = ...` "
4757,2023-06-01T13:14:37Z,2023-06-01T16:40:56Z,LWinterberg,1,0,1,3,1,2,2,['non-code'],7659.0,0,12387.0,0,0,0,0,40403979.108999,,0,1,0,False,['petersampsonaudacity'],"Testing on w10 with @LWinterberg 's branch:  audacity-win-3.4.0-alpha-20230601+fbe2798-x64

The message is now unambiguous, much better.

![image](https://github.com/audacity/audacity/assets/50205984/9d611158-87cb-4d71-bff1-3b57bbcfefbf)

But as I noted earlier could be much improved, much more helpful to the user, if the size of the selection was also shown. 

This would help them in deciding which to paste.
",,"Resolves: #4344 
",
4754,2023-05-31T12:19:13Z,2023-06-01T11:44:20Z,Paul-Licameli,6,0,7,650,24,1,1,[],20231.0,2,84311.0,0,0,0,0,40421781.320051,,1,7,1,False,"['saintmatthieu', 'crsib', 'dozzzzer', 'Paul-Licameli']","Please fix the build :-)  > Please fix the build :-)

Sorry, forgot to turn off precompiled headers locally.

It only needs one forward class declaration. So this PR removes the preview functionality from `lib-effects` because the preview functionality needs the creation of `TransportTracks`, which in turn need `TrackList`. So now `lib-effects` doesn't need `TrackList` for that purpose.
That's a couple of pieces of the puzzle, still missing the bigger picture. We can talk about it later. Don't wait for my approval. Tested: playback, recording, effects preview from the destructive dialog > So this PR removes the preview functionality from `lib-effects` because the preview functionality needs the creation of `TransportTracks`, which in turn need `TrackList`. So now `lib-effects` doesn't need `TrackList` for that purpose.
> That's a couple of pieces of the puzzle, still missing the bigger picture. We can talk about it later. Don't wait for my approval.

You rightly understand the motivation for this step.  I paused to make a PR of one coherent piece of work, preferring not to accumulate PRs that are too large.
 But it is also nice that lib-effects loses one dependency, on lib-audio-io.  I didn't like that dependency.  I really should have thought of all this extra work when lib-effects was extracted.  But that was itself already a large and difficult thing to do, requiring a lot of other tough untangling of some confused control flow involving UI with internals.
",,"Resolves: *(direct link to the issue)*

A preliminary before lifting wave track caching scope out of lib-sample-track.

Move the previewing for Effects out of lib-effects, back up into Audacity.

This also makes lib-effects independent of lib-audio-io, which is nice.

(There may be a future ""lib-effects-ui"" for this layer, though it might not be toolkit neutral.)

- [x] QA:  Test playback, recording, effects preview from the destructive dialog.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4701,2023-05-17T13:16:40Z,2023-06-01T10:22:48Z,saintmatthieu,10,30,4,6009,32,3,0,[],5730.0,0,1285569.0,0,0,0,0,40426679.449328,,1,4,0,False,"['Paul-Licameli', 'crsib', 'saintmatthieu']","Windows builds are failing, don't know why, it compiles locally and there is no apparent error message. Hopefully someone will recognize the error ? - [x] test in stereo GitHub says there is a conflicting file, but it's easily fixed.
 The commits in this branch are not all buildable.  I'm doing my own rebase onto master locally, and squashing the build fixes for myself, so each builds, then I will examine more closely.
 I wonder why no jobs were run for the PR I guess because of this, sent to me over email : ""[GitHub] You've used 100% of included services for the saintmatthieu account"" That is odd, I can see that your fork is public, and Audacity itself is public. GitHub has no limits for open-source projects. Ah, I think I know. I made a private fork of something public that had jobs. Maybe now it's disabling it for all my repos, public ones included. I don't need that private repo, will delete it and see what happens. @crsib Just rebased and jobs are running now. @crsib just rebased my time-stretching PoC branch onto the head of this one. Still integrates and works fine. Just awaiting your green light now.",,"Resolves: #4700

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","@crsib I don't know the consequences of this, but that'd be the easiest fix for me :D So tentatively proposing it. Does that mean users with MacOS < 10.15 wouldn't be able to run newer Audacity releases ? This will break macOS. We cannot have a target greater than 10.13.

Also, raising a target requires a lot of thought and discussion. We have plenty users on older macOS versions  That's all right, I gave up on using (experimental/)filesystem to fix this. I repeat my previous suggestion:  add the .h files to this list please.  It may not be necessary to build, but I will make the headers known to the IDE file browsers as part of the project, and that is more convenient. I agree, just forgot.  `final` would be much appreciated.  Why the function is not `const`? Maybe?
```
auto channelData = vectorVector.emplace_back(numSamplesPerChannel).data();
pointerVector.push_back(channelData);
``` More descriptive names would be much appreciated Generally we don't use such prefixes Generally, we always use CamelCase for methods.  I don't think that we should reformat a 3d party library. I would prefer to have it as is while it is included as a part of Audacity, so updating the library will generate sane diffs It is advisable to always have a new line at the end of file. At least it would remove annoying red mark from the reviews :-)

If you use VSCode, please install the EditorConfig extesnsion, it will handle this issue for you. I wonder if we want this to be globally visible to all tests. Also, please at least prefix new files with 

```/*  SPDX-License-Identifier: GPL-2.0-or-later */``` 
and, ideally, with a longer comment with author and file name I would much prefer relying on working directory here Let's avoid using legacy CMake. `target_compile_definitions` is a cleaner way to achieve the result. 

However, I would prefer a different approach, without the hardcoding of the path. For example, `add_unit_test` can be extended to accept the working directory of the test. Do we need this factory method here at all though? Should we check that ratio has really changed?  I think `static_cast<double>` is redundant here I wonder if we should make this value to be configurable Hmm, it looks a bit odd that this function does not return the number of samples that were written to the output. If it is expected, that the tail is always zero-filled - it should be stated in the docs. I think that output buffers should be allocated only once. Allocation is not free, especially in multithreaded environments, and provided that you ask for a few kilobytes it won't be noticeable.  This looks like a UB to me. GetSamples provides no way for a caller to know if the output was modified at all. Given that AudioSource is never copied in StaffPadTimeAndPitch, I think that `numPulledFrames = 0ULL` is sufficient here `target_compile_options` and only on Windows please But I would rather define something like ""USE_EXPERIMENTAL_FILESYSTEM"" only on macOS to avoid the potential compilation breakdown when some newer compiler decides to drop this headers from the stdlib Or this way, yes :-) Well, the problem is resolved now :-) I'm not sure I understand this condition."
4725,2023-05-23T17:36:19Z,2023-05-31T10:47:31Z,Paul-Licameli,1,0,2,59,3,1,1,[],102204.0,1,666676.0,0,0,0,0,40511596.794926,,1,2,0,False,['Paul-Licameli'],"Rebased onto recent master and force-pushed with no conflicts or other changes.
",,"Resolves: #4713

Fix errors in sync lock for some time stretching effects:

PaulStretch wasn't doing it at all; Change Tempo (really two effects, depending on the high-quality checkbox) and Sliding Stretch sometimes omitted sync lock (depending on settings), and sometimes applied sync-lock only to the left channel of a stereo track.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2805,2022-04-12T01:39:33Z,2023-05-24T21:53:07Z,Paul-Licameli,14,21,18,1494,60,3,2,[],35102344.0,1,35237619.0,1,0,0,0,41076462.561443,,2,18,0,False,"['Paul-Licameli', 'saintmatthieu']","- [ ] There are track selection commands whose implementation were modified by `264ea9f`. I couldn't find them anywhere in the UI so don't know how to test this but I suppose it is testable. @Paul-Licameli in the test list you mention
> Splitting stereo track to mono replicates name, pan, gain, mute, solo*

- [ ] Why specifically to mono? Selectness should also be replicated. Thanks for the `PlayableTrack.h` clean-up. - [x] I built `a95e16c` and crashed it by opening a mono wav file.

![image](https://github.com/audacity/audacity/assets/22740106/9042ce8f-c1eb-492a-91ff-ede2582f2772)

It's 100% reproducible but I can't hit any of the breakpoints I set over writings of `mStates` before it crashes.
Also happens just creating a new empty track. Set status to ""request changes"" essentially for the crash. There's not much I can test until it's fixed. Not sure if the rest of my comments should result in changes yet, awaiting your replies for that. > @Paul-Licameli in the test list you mention
> 
> > Splitting stereo track to mono replicates name, pan, gain, mute, solo*
> 
> * [ ]  Why specifically to mono? Selectness should also be replicated.

I updated the top comment to mention selected state too.

""Why specifically to mono?""  I don't understand, what other kind of splitting is there?
 > Set status to ""request changes"" essentially for the crash. There's not much I can test until it's fixed. Not sure if the rest of my comments should result in changes yet, awaiting your replies for that.

We know the fix for the crash now.  I pushed it, and also some of your less important suggested changes.
 > ""Why specifically to mono?"" I don't understand, what other kind of splitting is there?

I meant ""Split Stereo Track"" as opposed to ""Split Stereo to Mono"", but actually the former looks just like the latter, with hard left-right panning. Please ignore. There remains a `WaveTrack::Attachments::RegisteredFactory`, namely in `WaveTrackLocation`. Just glancing at it looks like it has to do with cut lines and merge points. Still not sure what that is and if it makes sense to still have this data on a per-channel basis or if it also should be grouped in `ChannelGroupData`. There remain calls to
* `TrackList::Channels(track).size()` in Normalize.cpp, line 177,
* `TrackList::Channels(pTrack).size()` in WaveTrackControls, line 1031. Sorry, I thought ""Close with comment"" would finalize my review, not close the PR 😅  > There remains a `WaveTrack::Attachments::RegisteredFactory`, namely in `WaveTrackLocation`. Just glancing at it looks like it has to do with cut lines and merge points. Still not sure what that is and if it makes sense to still have this data on a per-channel basis or if it also should be grouped in `ChannelGroupData`.

That is a different attachment place, unlike the group data.

Cut line locations are still inherently per-channel rather than per-track, until I really do the reorganization of clips to contain multiple sequences.  Until then, it is possible that cut lines in opposite channels are at different times.

The time to reorganize this is not yet now.
 > There remain calls to
> 
> * `TrackList::Channels(track).size()` in Normalize.cpp, line 177,
> * `TrackList::Channels(pTrack).size()` in WaveTrackControls, line 1031.

Done.
 Interactively rebased onto latest master, squashing some fix-ups.  Not expecting anything to behave differently in the next build.
I stopped before the ""Don't loop"" commits, but there's already comments I'd like you to look at. Looks like we're on the right track :D Please check my comment about remaining calls to `Channels(...).size()` before merging.","I stopped before the ""Don't loop"" commits, but there's already comments I'd like you to look at. Looks like we're on the right track :D Please check my comment about remaining calls to `Channels(...).size()` before merging.","Resolves: #2790 
Resolves: #2804

Move many things into ChannelGropuAttachments, so they are not duplicated between channels.

This simplifies code that formerly had to maintain consistency of channels.  There are fewer uses of TrackList::Channels
and fewer iterations over all tracks when iteration over leaders only is enough.

Remove some other calls to TrackList::Channels() that were needed only to count the channels.

Also fixes an issue related to correctness of Mute and Solo settings when copying and pasting or duplicating MIDI or
audio tracks.

Also a new small library lib-playable-track to lift the mute and solo logic out of lib-track.

To test:
- [ ] Macro commands ""Set Clip"", ""Set Envelope"", ""Set Track Status"", ""Set Track Audio"", ""Set Track Visuals"", ""Set Track""
- [x] copy and paste preserves mono or stereo track name, pan, gain, mute, solo
- [x] Changing mono or stereo track name, pan, gain, mute, solo
- [x] Splitting stereo track to mono replicates name, pan, gain, mute, solo*
- [x] ""Solo Button"" setting in TracksBehaviors works as before
- [x] Importing mono or stereo into a project with a Solo track still makes all new tracks mute
- [x] Shift+click on Mute and Solo buttons works as before
- [x] Pan, gain, mute, solo in the Mixer Board window
- [x] Pan, gain, mute, solo affect playback and mix-and-render as expected
- [x] Changing spectrogram scale type with right-click in either channel's vertical ruler affects both channels
- [x] Changing spectrogram bounds with zooming commands, or scroll wheel, or click and drag (turn on Advanced Vertical Zooming in Tracks Behaviors preferences), in either channel's ruler affects both
- [x] Similarly for changes of Waveform scale type or bounds (including changes of bottom of dB range with scroll wheel)
- [x] For split wave/spectrum view, changing which is on top (the hand cursor), or proportion of the split view (dragging the separator), in either channel, changes both
- [x] Changing among Waveform, Spectrum, Multi view using drop-down menu, mono and stereo
- [x] Track pan, gain, solo and mute states are preserved upon save, close & re-open
- [x] Mixing of tracks create new tracks with expected pan, gain, solo and mute states

* Possible non-uniqueness of the solo track may be considered a bug to fix, but not a regression caused by this pull request

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Old implementation is a bit confusing, now it looks ok `bIsSecondChannel` didn't change before  If I understand correctly the meaning of `mChannelIndex` this check won't yield same results as before, because `j` now  increments only inside the new inner loop  Could be `wxString::Lower`
https://docs.wxwidgets.org/3.0/classwx_string.html#aaacf7a99a2674bc3f462d54181c40f4f Can you get the number of leaders and call `mInitialTrackSelection.reserve(numLeaders)` ? const Would you mind explaining what this select command modes represent ? A quick exploration of Audacity's UI didn't bring an answer. I couldn't even find the command ""Select Tracks"".
I'd like to understand this as it might be something to be tested. const
 I wouldn't mind a type specifier here, i.e. `for (Track* channel : ...)` ; would spare readers like me wondering if we're unnecessarily increasing a smart pointer ref count. I also don't see how I can excite this code, I don't find a ""Set Track Status"" command. (Two lines below) Was moving `pNewLeft->SetSelected(!toNewTrack);` downwards necessary? Else the diff could have been kept lower by just deleting this line. 👍  👍  Using a binary `enum class AllChannels { yes, no }` instead of a bool would be more work but ease the reading where it's used. I'd be glad for an explanation of this setting. I found it in the preferences but couldn't observe any effect. ... in fact I can't see a place in the code where the enum value is changed 🤔 Either we have a bug or this preference could be removed altogether. I could, though I doubt this would bring much advantage.
 The added argument in Notify is only for transitional states of the big code transformation.  Ultimately it will be removed again, though not in this pull request.
 See this line in TracksBehaviorsPrefs.cpp:
```
         S.TieChoice( XXO(""Solo &Button:""), TracksBehaviorsSolo);
```
The second argument is by reference.  That code constructs a dialog that may modify the setting.
 Thanks to your explanation yesterday I could debug that. Looks good. Found out, cool stuff."
4724,2023-05-23T13:24:07Z,2023-05-24T21:03:35Z,crsib,4,3,1,74,13,2,1,[],15495.0,2,113971.0,0,0,0,0,41079438.965044,,0,1,1,False,"['crsib', 'Ryan-Miller-Audacity', 'Paul-Licameli']","It's still incomplete.  USE_VST is still mentioned in src/AboutDialog.cpp and in src/CMakeLists.txt.

About the latter file -- my error, when I extracted lib-vst.  I made a mistake of not deleting lines no longer needed that refer to source files that no longer exist at paths under src/ .
 I disagree. I have left it in `src/AboutDialog.cpp` as there is no other way to appropriately fill the dialog. However, `AboutDialog` does not rely on `target_compile_definitions`, instead it relies on `config*.h`, which is forcibly included in all translation units by `audacity_append_common_compiler_options`.  > I disagree. I have left it in `src/AboutDialog.cpp` as there is no other way to appropriately fill the dialog. However, `AboutDialog` does not rely on `target_compile_definitions`, instead it relies on `config*.h`, which is forcibly included in all translation units by `audacity_append_common_compiler_options`.

OK -- and I was confused about src/effects/VST, I didn't move all of it to libraries
 Tested.

Launch checks and quick VST2 sanity checks performed in MacOS, Windows, and Linux.",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this complete?  `USE_VST` occurs in 15 files.
 This is enough to fix the build, I can remove the rest though I have force pushed the updated version."
4722,2023-05-22T14:33:13Z,2023-05-23T16:02:24Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,91754.0,0,0,0,0,41183911.87887,,1,1,0,False,[],,,"Resolves: #4721

A one-line fix for a crash in one of the copy-paste edge cases

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4678,2023-05-08T14:49:47Z,2023-05-11T12:32:08Z,DavidBailes,3,0,1,2,1,1,1,[],58573.0,1,250941.0,0,0,0,0,42233333.068913,,0,1,1,False,"['petersampsonaudacity', 'dozzzzer']","Testing on W11 with @DavidBailes 's branch build: audacity-win-3.4.0-alpha-20230508+812a9a6-x64

David's branch build fixes this issue #4677 I confirm issue #4677 is fixed by this PR both on macOS and Windows Tested",,"Resolves: https://github.com/audacity/audacity/issues/4677

Problem: in commit 8b58069, the condition for the appropriate dialog was not updated to reflect the prior changes in the function.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4572,2023-04-18T17:48:51Z,2023-04-21T09:59:46Z,Paul-Licameli,4,2,7,681,18,1,2,['code quality'],148424.0,1,1624288.0,0,0,0,0,42577244.814198,,4,7,1,False,['Paul-Licameli'],"> I think this can go straight to master

Recall, it will conflict with your recent changes, but the fixes for that will be simple.
 @crsib please review again.

Changes needed after merging latest release into master were nontrivial.

You may or may not like the simplification of SnapUtils.cpp now.  You can tell me to remove those commits and let you do it yourself later.
 Other changes were needed in the new lib-s for effect families, and a mistaken added but unused file was removed
 It was agreed that this can go straight to merge, so I will do that.

I will omit the changes in SnapUtils.cpp, which are not such obvious wins for simplification, and lead to compromised encapsulation.

I will let you decide how you would like to do it, after reading my examples.

A complete class definition does need to be in scope to use UniqueMaker.  Maybe you could use the `namespace detail` convention?
I think this can go straight to master I left some comments about the Snapping commits. Either way I do not have any strong feelings to request specific changes to this PR.",I think this can go straight to master I left some comments about the Snapping commits. Either way I do not have any strong feelings to request specific changes to this PR.,"Resolves: *(direct link to the issue)*

Move some existing utilities into a new file and namespace. 

Rename Variant::Visitor as Callable::OverloadSet.

Add unit tests.

Add UniqueMaker utility and tests.

Apply UniqueMaker to eliminate a lot of boilerplate code involving `...` and `std::forward`.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Neat! I would much prefer the way it is done in previous commit. This still exposes details outside the translation unit (and in case we will want to add `SnapRegistryItem`s in different libraries - we will have to expose it outside the library too). However version with two classes express intention clearly and avoids (very small) storage and branching overhead.

I do not have any strong opinion on that though, so it is up to you."
4643,2023-05-02T16:44:54Z,2023-05-03T14:27:38Z,crsib,5,0,1,21,2,1,1,[],87189.0,0,275973.0,0,0,0,0,42719799.048047,,0,1,0,False,"['haleba-hotmail', 'applecuckoo']","@crsib

Where can the fixed AppImage be downloaded?

Thanks Buildfile is at https://github.com/audacity/audacity/suites/12648574392/artifacts/677785394. Hi @applecuckoo

Thanks, but that link returned a 404 HTML error. Might as well wait until 3.3.2 is released .. didn't really want to try compiling it.

Thanks again. No, it's an automatically built AppImage from GitHub Actions. You should be able to go [here](https://github.com/audacity/audacity/actions/workflows/build.yml), click on anything from `release-3.3.2`, then just scroll all the way down until you find the third file in the artifact list. Hope this helps! @applecuckoo 

Thanks.

Looks like Audacity 3.1.3 is the last version that can run in Ubuntu 18.04: still getting the glibc errors. Glibc versions 2.29+ are not available from the Bionic repository.

I was able to compile glibc 2.29 from source and installed it to /opt so it wouldn't step on anything that used an older version, but don't know how to ""point"" Audacity at it, since it is hared-coded to look in /lib/x86_64-linux-gnu:

    ./audacity-linux-3.3.2-x64.appimage     
    /usr/lib/x86_64-linux-gnu/libatk-1.0.so.0
    /usr/lib/x86_64-linux-gnu/libatk-bridge-2.0.so.0
    /usr/lib/x86_64-linux-gnu/libcairo-gobject.so.2
    /usr/lib/x86_64-linux-gnu/libcairo.so.2
    /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0
    /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
    /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0
    /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0
    /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0
    /usr/lib/x86_64-linux-gnu/libjack.so.0
    findlib: libportaudio.so: cannot open shared object file: No such file or directory
    /home/barry-u/AppImages/audacity-linux-3.3.2-x64.appimage: Using fallback for library     'libportaudio.so'
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/bin/audacity)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/lib-project-file-io.so)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libgtk-x11-2.0.so.0)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/lib-audio-io.so)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/lib-track.so)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/lib-numeric-formats.so)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/lib-math.so)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libmpg123.so.0)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libsndfile.so.1)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libvorbis.so.0.4.9)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libFLAC.so.8)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/fallback/libportaudio.so/libportaudio.so)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libpng16.so.16)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libopus.so.0)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libpixman-1.so.0)
    /tmp/.mount_audaciJ1jYnn/bin/audacity: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.30' not     found (required by /tmp/.mount_audaciJ1jYnn/lib/libselinux.so.1)

Look like I needed glibc 2.30 anyway.

Audacity 3.1.3 is working OK, so guess I'll just have to stick with that until I get around to upgrading to 22.04 LTS.",,"Resolves: #4629 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4243,2023-01-27T14:51:38Z,2023-02-07T12:54:39Z,LWinterberg,15,1,1,2,1,1,2,[],18392.0,1,8476762.0,0,0,0,0,42733808.956861,,1,1,1,False,"['petersampsonaudacity', '1schlick', 'Ryan-Miller-Audacity', 'SteveDaulton', 'LWinterberg', 'Tantacrul', 'Paul-Licameli']","I'd like a test from the @Tantacrul to see if this feels better to him This feels worse for me as it  makes zooming much slower. For example, to zoom from a 30 second view to sample level view requires three mouse scrolls with previous version, and 10 mouse scrolls (tedious) with this patch.

Personally I have no problem with the mouse zoom in previous versions, and due to the absence of feedback to the contrary, I suspect that the vast majority of users agree.

**If** mouse zoom is too coarse for some users (I guess that is the case for [LWinterberg](https://github.com/LWinterberg)), then it may be worth making this a user preference. Personally I'd opt for the same zoom scrolling as Audacity has had for the last decade. > This feels worse for me as it makes zooming much slower. For example, to zoom from a 30 second view to sample level view requires three mouse scrolls with previous version, and 10 mouse scrolls (tedious) with this patch.
> 
> Personally I have no problem with the mouse zoom in previous versions, and due to the absence of feedback to the contrary, I suspect that the vast majority of users agree.
> 
> **If** mouse zoom is too coarse for some users (I guess that is the case for [LWinterberg](https://github.com/LWinterberg)), then it may be worth making this a user preference. Personally I'd opt for the same zoom scrolling as Audacity has had for the last decade.

A user preference is always a possibility.

Just lately I was using CTRL plus mouse wheel (or actually, pinch and spread on my touch pad instead of a wheel), while the pointer was in the vertical ruler of the spectrogram view.  Maybe little known, but you can pan (with Shift) and zoom vertical scales too.  And the defaults were too coarse for my liking. I wonder if we could even experiment with some kind of accelerating zoom?  Small steps (logarithmically that is) at first, but larger if the next mouse wheel click arrives in less than some elapsed time?  Complicating the implementation of course. Anyway if the multiplier should be some constant but not 2, I suggested it should be a root of 2 so you get the exact twofold multiplier with a few wheel clicks.  It’s now the fourth root, but maybe the cube or square root is a compromise. https://github.com/audacity/audacity/actions/runs/4027212455 - 4th root (4 scroll ticks = 1 current scroll tick)
https://github.com/audacity/audacity/actions/runs/4038643540 - 3rd root (3 scroll ticks = 1 current scroll tick)

The current behavior is definitely too sensitive. It takes a single scroll to go from default zoom to half a day. With a free-spinning mousewheel, I can zoom from one extreme to the other faster than I can put my finger down to stop the scroll midway. With a trackpad, taking off the fingers from the pad can cause a tick (rarely two) of zooming, which throws off the zoom level by up to an order of magnitude. 

With the 3rd root, a single scroll goes from default zoom to about a song length. With a free-spinning wheel I now have hope of catching it at a reasonable level, and the trackpad errors are nowhere near as significant.  @LWinterberg - they're both quite good. I marginally prefer: https://github.com/audacity/audacity/actions/runs/4027212455

As for hiding this change behind a setting. I think that will unfortunately do two undesirable things

- It won't solve the quite poor performance of the mouse wheel when zooming (this PR - responsiveness - is only part of the issue)
- New settings just introduce more complexity that 95% of our audience will never discover

You can't make changes of any kind without _someone_ being unhappy with it. As with the copy & paste toolbar, if enough audience members complain, then we'll possibly add the setting then - and allow them to set the responsiveness to whatever they want. However, the change is hardly drastic as it is. It simply just means you are less likely to under/overshoot > As for hiding this change behind a setting.

Adding a preference does not in any way ""hide"" the change if you make your preferred setting the default. It just acknowledges that some users may prefer mouse zoom the way that it has been for the last decade.

> You can't make changes of any kind without _someone_ being unhappy with it.

Surely, when some users prefer a feature one way, and other users prefer it another, then it makes sense for it to be a user preference.
 I think the simplest summary I can give is:

- I doubt too many people will object (or even notice) a slightly less responsive setting for zoom.
- If I'm wrong, we can create a setting for it
- Regardless, the revised version should be the default (unless my finger is completely off the pulse and most users totally hate it) Testing on W10 with @LWinterberg 's latest branch:  audacity-win-3.3.0-alpha-20230129+20dfd68-x64

I find myself liking the less sensitive mouse-wheel scrolling, it takes me 3 wheel moves to get to half or double.   
_And I had also been testing Leo's previous branch builds for this so have tried it a fair amount._

I do note that the old zoom factor of 2x still applies to Audacity's zoom in/out buttons and commands - and I think I like that this zoom factor is retained for the menu commands and Edit toolbar buttons - but I would **_not_** be unhappy if the new less aggressive zoom factor used for the mouse-wheel zoom was also used for the commands and buttons zooms.

---------------------------------------------------------

And I do note that Reaper seems to have a similar zoom factor for mouse-wheel zooming - there two wheel moves get you to half or double.  So theirs is slightly more aggressive than Leo's current build - but less aggressive that Audacity's current setting.  Reaper's zoom menu items and their associated shortcut zooms _(plus and minus keys)_ are also less aggressive than Audacity's 2x zoom)
_So far I haven't found a setting in Reaper to change the sensitivity.  We may think that Audacity has complex preferences settings, but Reaper's are far, far, more complex and extensive._

 > This feels worse for me as it makes zooming much slower. For example, to zoom from a 30 second view to sample level view requires three mouse scrolls with previous version, and 10 mouse scrolls (tedious) with this patch.

This only takes me (with Leo's branch build) 5 mouse scrolls to go from 30secs to sample level view at full screen size - and only 4 mouse scrolls at default window size,  where a mouse scroll is a full push of the wheel i.e. multiple mouse-wheel clicks and not a single click.

Reaper is similar in this regard.

I also note that if I spin the mouse-wheel forward fast with Ctrl held down the it zooms straight to maximum zoom individual sample level.  Is this an easter-egg?  I certainly see nothing in the manual regarding this.

 I've just run this past my ""Mystery-Shopper"" - she too thinks the less aggressive mouse zoom is much better ... We're getting dangerously close to unanimous agreement here. I feel weird. Tested on Windows and MacOS and confirmed that Zoom factor when zooming with mouse wheel has been reduced and features a much higher degree of usability for general users.  Zooming is unusable on MacOS if using a pinching/spreading motion with fingers on the trackpad. It takes what feels like forever of doing this carpal-tunnel-inducing motion over and over again. I'm having to use keys instead, which are much more complex and don't offer as much versatility as simply having one definitive way to scroll on the part of the track that my eyes are looking at. Please add the option to change zoom sensitivity.Even better now.
","Even better now.
",Part 1 of #4212,"Or simply `pow(2.0, steps/4.0)` "
4649,2023-05-03T10:23:30Z,2023-05-05T12:59:21Z,crsib,0,0,1,20,2,1,1,[],,0,182154.0,0,0,0,0,42750107.125217,,0,1,0,False,[],,,"Resolves: #4646 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4661,2023-05-04T10:51:52Z,2023-05-05T10:12:49Z,crsib,0,2,2,151,4,2,1,[],,1,84060.0,0,0,0,0,42760101.418829,,0,2,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`tempoSigSize` values are same in both branches, is that correct? Yep"
4374,2023-03-01T09:54:56Z,2023-03-01T13:04:43Z,crsib,0,0,3,35,4,1,1,[],,1,5616965.0,0,0,0,0,42760214.655646,,0,3,0,False,[],,,"Resolves: #4373 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4666,2023-05-05T08:54:09Z,2023-05-05T10:09:57Z,crsib,0,0,1,2,1,1,1,[],,0,4550.0,0,0,0,0,42760278.808755,,0,1,0,False,[],,,"Resolves: #4665 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4644,2023-05-02T18:21:17Z,2023-05-05T08:03:17Z,crsib,0,0,1,177,27,1,1,[],,0,222127.0,0,0,0,0,42767875.977619,,0,1,0,False,[],"Ouch

Makes me wish for C++2020 with more constexpr-able things","Ouch

Makes me wish for C++2020 with more constexpr-able things","Resolves: #4637
Resolves: #4639 

Changes are trivial, despite being quite extensive.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4647,2023-05-03T08:56:15Z,2023-05-05T08:01:24Z,DavidBailes,0,0,1,2,1,1,1,[],,0,169510.0,0,0,0,0,42767997.122132,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4626

Problem:
When pasting a label track to a different project using the ""selected audio only"" option, the label track can be time shifted.

Fix:
In DuplicateDiscardTrimmed(), in the call to trackCopy->SetOffset(), which restores the start times after the copy, pass track->GetStartTime(), rather than track->GetOffset(). For tracks other than a label track, GetOffset() and GetStartTime() return the same value. (So these tracks are not affected by this fix.) However, for a label track, GetOffset() return 0.0.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4664,2023-05-04T18:04:00Z,2023-05-04T21:07:14Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,10999.0,0,0,0,0,42807245.368933,,0,1,1,False,[],,,"Resolves: #4663

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4654,2023-05-03T19:10:44Z,2023-05-04T10:35:03Z,crsib,0,0,2,739,62,1,1,[],,0,55463.0,0,0,0,0,42845180.020919,,1,2,0,False,[],,,"Resolves: #4652

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4657,2023-05-04T07:06:19Z,2023-05-04T08:04:18Z,Gootector,1,0,1,8,1,1,1,[],235.0,0,3479.0,0,0,0,0,42854230.83935,,0,1,0,False,['Gootector'],@crsib Please merge to [release-3.3.2](https://github.com/audacity/audacity/tree/release-3.3.2). Thanks.,,"Update German from Transifex - 3.3.2
Translation imported from Transifex.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4634,2023-04-29T12:18:46Z,2023-05-04T08:01:29Z,nekopsykose,8,0,1,1,1,1,1,[],466.0,0,416563.0,0,0,0,0,42854401.94429,,0,1,0,False,"['crsib', 'nekopsykose']","Hmm, I've built on Fedora few days ago without any issues  might be a slight difference in even what c++ headers are there when built against musl. this is specifically with gcc13 at 20230429 on a -linux-musl system.

even if it is that specific though, seems correct to include it for the sized ints anyway Absolutely  Can you please rebase your branch on `release-3.3.2` and force push? that then contains the version bump commits too, unless you mean to also target a different branch other than master; i assume this is what you want however Yeah, I just need a single commit with the fix on top of 3.3.2 branch :-) sure thing :) Awesome, thank you a lot!",,"needed now with gcc13, not there by default

*(short description of the changes and the motivation to make the changes)*

fixes

```
lib-src/portsmf/allegro.h:125:9: error: 'int64_t' does not name a type
  125 |         int64_t i;  // integer -- 64 bit for 32/64-bit compatibility
      |         ^~~~~~~
lib-src/portsmf/allegro.h:52:1: note: 'int64_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'?
   51 | #include <assert.h>
  +++ |+#include <cstdint>
```

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4593,2023-04-24T09:35:23Z,2023-04-28T11:45:50Z,Paul-Licameli,1,15,1,270,5,3,2,[],347513.0,1,353431.0,0,0,0,0,43359339.342808,,2,1,1,False,['saintmatthieu'],No need for QA.Ok.,Ok.,"... The omission of these very useful things from the standard library seems rather surprising.

One could easily multiply utilities but I won't yet take it far beyond immediate needs to simplify Track::TypeSwitch.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What was your motivation to add the `[[nodiscard]]` attribute ? Code calling `Empty(my_tuple);` without evaluating the return value would just look pointless by itself, I wouldn't have felt the need for a warning. `is_tuple` and `Empty` are only used in `TupleTest.cpp`, and do indeed sound like test helpers. Wouldn't that source file be a better place for them ? Alternatively `std::numeric_limits<size_t>::max()` You could inline your implementation of Projection here, i.e., `return Project<detail::increment_each<std::make_index_sequence<Length - 1>>{}>(std::forward<Tuple>(tuple));`. That would spare the need for `Projection`. Looks like this could go in `namespace detail` ; or do you have future plans for it ? Doesn't look like `Projection` is doing much anyway. Nice. I didn't realize this was enforced just by looking at the tests. Consider adding commented-out demos of this in TupleTest.cpp, e.g.
```
// Project<1>(std::tuple<int>{1});
// Project<1, 1>(std::tuple<int, int>{1, 2});
```
Like any documentation may quickly go out of date, but sure ... No tests for `Next` ? :.( It's conventional in the C++ standard library to add that attribute to members named `empty`.  I think it is because of the English ambiguity between the adjective and the imperative verb.  One might mistakenly call `empty` when one means to call `clear`.
 No.  The uses of them just don't exist yet in other PRs.  A utility can be written with more generality that for immediate needs, anticipating future needs.

 Again, anticipation of more generality.  I foresee the need for selection of subsequences of tuples that are not always tails, such as, after filtering the type list by a predicate to select certain indices.

I didn't write all of that yet but I did write `Projection`.
 Future.
 Good idea
 Sounds plausible. Ack."
4621,2023-04-27T09:43:27Z,2023-04-27T09:47:55Z,LWinterberg,0,0,1,9,1,1,1,[],,0,1141.0,0,0,0,0,43451947.421714,,0,1,0,False,[],,,,
4588,2023-04-21T15:34:04Z,2023-04-27T09:53:20Z,Paul-Licameli,1,0,2,133,3,1,1,['Effects (EGATs)'],374922.0,1,497961.0,0,0,0,0,43452492.571009,,3,2,1,False,['dozzzzer'],The original issue is still reproducible **on macOS**; moving back to In Progress.,,"Resolves: #4323
Resolves: #4307
Resolves: #4587

Fix bugs related to progress dialogs when previewing effects, and a minor inconsistency in button tooltips.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4615,2023-04-26T12:49:34Z,2023-04-27T08:09:26Z,crsib,1,0,1,4,1,1,1,[],2504.0,0,69595.0,0,0,0,0,43458730.881932,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build:   audacity-win-3.3.1-alpha-20230426+7b5ab99-x64

This looks to be properly fixed in this branch build - I can now set both the **Project Sample Rate** and the **Default Sample Rate** to arbitrary values using the ""**other**"" settings.

![image](https://user-images.githubusercontent.com/50205984/234590839-f4acc719-1767-49f9-90b2-6b44eefe0c9f.png)
",,"Resolves: #4612 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4551,2023-04-16T14:03:36Z,2023-04-24T11:25:28Z,Paul-Licameli,1,7,4,656,43,3,1,['code quality'],677824.0,1,879466.0,0,0,0,0,43508420.320392,,2,4,1,False,['crsib'],"I think it can go straight to masterMuch better naming indeed! The code is unfortunately too dense for me to make sense of in a half a day. If more attention is requested from me to this PR please let me know, otherwise I might leave it at that and leave only these superficial comments.","Much better naming indeed! The code is unfortunately too dense for me to make sense of in a half a day. If more attention is requested from me to this PR please let me know, otherwise I might leave it at that and leave only these superficial comments.","Resolves: *(direct link to the issue)*

Clarify one of the larger confusions about how the Registry system is meant to be used,
about so-called ""Transparent"" items.

Some other changes of terminology too.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Not for you to address, but what's the purpose of these empty if checks ? Has the idea of systematic use of some `.clang-format` been discussed ? @crsib  Could be const Why the prefix `p` ? I imagined this was reserved to pointers. Have you considered using `enum class` ? One wouldn't get false positives searching the code for 
e.g. `Ordering::Strong` as opposed to just `Strong`, for example. It was confusing to find the declaration of this guy not in Menus.h but CommandManager.h Yes:  Menus and CommandManager are tangled up badly, and there is another big pull request in progress to sort that out.
"
4610,2023-04-26T09:20:54Z,2023-04-26T16:36:55Z,crsib,1,0,1,8,1,1,1,[],5475.0,1,26167.0,0,0,0,0,43514683.493269,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build:  audacity-win-3.3.1-alpha-20230426+89b40ab-x64

clicking on the ""**Snap**"" label now toggles the snapping state in this branch build",,"Resolves: #4586 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4609,2023-04-26T08:41:00Z,2023-04-26T16:36:15Z,crsib,0,0,1,27,1,1,1,[],,0,28519.0,0,0,0,0,43514727.545045,,0,1,0,False,[],,,"Resolves: #4114 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4605,2023-04-25T15:15:46Z,2023-04-26T16:35:03Z,crsib,0,0,2,189,7,1,1,[],,1,91161.0,0,0,0,0,43514801.603591,,0,2,0,False,[],,,"Resolves: #4234 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4611,2023-04-26T11:15:31Z,2023-04-26T15:22:11Z,vsverchinsky,1,0,1,10,1,1,1,[],5972.0,0,14823.0,0,0,0,0,43519156.841588,,1,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build audacity-win-3.3.1-alpha-20230426+634928e-x64

1) the size no longer doubles after the 15 Cuts

2) I experience no slow editing with the 15th and subsequent Cuts

Looks like a good improvement to me",,"Resolves: #4600

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4071,2022-12-16T05:54:56Z,2022-12-23T17:50:37Z,ksoze95,1,21,7,791,39,2,1,[],294231.0,1,11277240.0,1,0,0,0,43594377.581725,,0,7,0,False,['Paul-Licameli'],"No more to say in this round of review.
",,"Resolves: #3693 

Provide cut, copy and paste functionality from a toolbar.

This PR have the following couple of issues.

1. The paste toolbar button is enabled on the application starts up, it should be disabled until a copy action has first been preformed.
2. The new toolbar should be hidden by default.  When ToolManager.cpp was modified to hide the toolbar, audio setup and both meters toolbars are moved to above all the other toolbars.
 
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","After this is merged, remember to tell @LWinterberg to update the ""sprite sheet"" in documentation for users who customize the theme.
 For the fourth argument -- an internal identifier the user doesn't see, which may be used as a key in the configuration file -- do not use the '/' character.  I think it might get misinterpreted as multiple config file path components.  Just omit those characters.
 Make a literal instead of repeating the string constant
 This entire file is a cut-and-paste of EditToolBar with some modifications.

These two beg to be unified into a common base class, simply parameterized by a table of buttons and commands.

Such a simple, table driven toolbar might even become a useful toolkit neutral facade if it is done right.

None of this comment is a request for changes now.

 This new source file should have comments at top about its purpos
 I suggest an OrderingHint to control the position of insertion of this menu item.  Did design specify it?  Maybe it should come after the edit toolbar, not at the bottom of the menu.
 Two integers are passed into this function, just so they can be added.

Why not simplify, passing in just the sum?
 I prefer member initializations where possible instead of mutations inside the constructor body.

But beware, it should be
`mButtons(size)`

not the curly-bracket form!  Because `vector` has constructors taking `initializer_list` and you don't want overload resolution to one of those.


 The sequence of intializers should match the sequence of member declarations, because it is the latter that really determines the sequence of execution.

It is unimportant in this case but I think this is one of the warnings we should elevate to errors in our build.  In some cases there may be surprises.
 Please avoid unnecessary movements of functions and tables within files.  It makes review more difficult.  You could instead leave them where they were, so that the diff contains fewer lines.
 OK, a later commit changes this
 ""command"" I like the effort to unify repepetious code into a utility class.

It might go farther (in 3.3 development).

The `Populate()` routines might also become completely table-driven if `Entry` could indicate a separator and also what the initial enabled state should be.

The `_EVENT_TABLE` macros might be removed and instead `ToolBarButtons` could `Bind` an event handler to each button as it is made.  (The preferred thing in newer wxWidgets code)

It might even be not too difficult to devise a platform-neutral facade class to unify these two simple toolbars, and also use a registry of button entries so that an add-on might insert buttons.

 I don't like a simple bland name like `Entry` in the global namespace.  This might be a nested type in `ToolBarButtons`.
 I think we should stop that practice and stick just to SPDX license identifiers I am not quite sure what do you mean I was reviewing the commits sequentially.  My comment applies to a step of the code transformation that is not the last.  The final version uses only one id argument. Still misspelled
 I thought these lines should be unnecessary, that you could just add this ID to ""Hide some bars"".  But I tried that modification and it doesn't work.  I wish I understood why and could make it work more simply.
 This is required, so we can properly setup the whole chain of neighbors. 
 You rewrote my proposal with more generality.  Very well.

But as you might guess, I don't really like `DefaultConfigEntry` because it is a failure of open-endedness of the set of toolbars.  I would rather take the time fo make a new Registry that scatters the definition of the default configuration.

Each toolbar should decide where to insert itself.

For that, each toolbar's .cpp file would need to refer to another toolbar, but only the weak for of dependency that mentions a textual id, and if the toolbar module isn't present, there is no harm.

My pull request Open-ended-toolbars does what is needed to eliminate the centralized enumeration and identify toolbars by strings instead.  It doesn't yet go further to build up the default configuration by collecting registry items.

"
4554,2023-04-17T08:45:11Z,2023-04-25T11:10:49Z,ksoze95,0,0,10,569,25,1,1,[],,0,711916.0,0,0,0,0,43608688.749267,,0,10,0,False,[],"A good starting point, but a huge rework will be needed to integrate it with `lib-numeric-formats`","A good starting point, but a huge rework will be needed to integrate it with `lib-numeric-formats`","Resolves: #4346

Implemented initial version of the TimeControl for the QML/Qt port.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4604,2023-04-25T09:24:01Z,2023-04-25T10:14:21Z,vsverchinsky,0,0,2,72,15,2,2,[],,0,3057.0,0,0,0,0,43624019.937509,,0,2,1,False,[],,,"Fixes crash&error reporting 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4545,2023-04-14T15:41:11Z,2023-04-24T15:14:48Z,LWinterberg,0,1,1,17,1,1,1,[],,0,862423.0,0,0,0,0,43692426.061147,,0,1,0,False,[],Quickly looking into the Nyquist internals (and trusting Steve) let's call it a safe change,Quickly looking into the Nyquist internals (and trusting Steve) let's call it a safe change,"Resolves: #1607 

based on the changes in #3051",This assertion is a no-op really.
4581,2023-04-19T18:23:34Z,2023-04-22T21:13:57Z,Paul-Licameli,1,0,4,298,6,1,1,['code quality'],148804.0,1,269427.0,0,0,0,0,43843681.278249,,3,4,1,False,['Paul-Licameli'],"Crazy stuff, you think?
",,"Resolves: *(direct link to the issue)*

Some of the metaprogramming tricks of Track::TypeSwitch, moved to a utility, with tests

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4338,2023-02-20T15:56:50Z,2023-04-21T18:51:36Z,Paul-Licameli,1,0,6,1407,18,1,1,"['Effects (EGATs)', 'refactoring', 'libraries & modules']",5165653.0,2,5194490.0,0,0,0,0,43938624.551316,,2,6,1,False,['dozzzzer'],Tested,,"Resolves: *(direct link to the issue)*

Depends on
- [x] #4304
- [x] #4395

A toolkit-neutral library for AudioUnit discovery and effect processing.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4589,2023-04-21T17:08:06Z,2023-04-21T17:29:52Z,Gootector,0,0,2,44,1,1,1,[],,0,1306.0,0,0,0,0,43943534.788828,,0,2,0,False,[],,,"Update German from Transifex - 3.3.0
Translation imported from Transifex.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4584,2023-04-20T14:10:25Z,2023-04-21T10:47:23Z,crsib,0,0,1,2,1,1,1,[],,1,74221.0,0,0,0,0,43967683.132607,,0,1,0,False,[],,,"Resolves: #4583 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4579,2023-04-19T12:04:10Z,2023-04-20T20:59:38Z,crsib,2,4,2,15,3,2,1,['Build / CI'],92555.0,2,118531.0,0,0,0,0,44017350.435779,,0,2,1,False,"['crsib', 'Paul-Licameli']","I think this go straight to merge, an I right @Paul-Licameli ? > I think this go straight to merge, an I right @Paul-Licameli ?

Agreed
",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Write to Roger, recommend this for upstream
 Really, the argument expected by DiscoverPluginsAtPath could be changed to a `std::function` returning void.  (But don't). I was surprised no crashes happened because of this error -- but the return value from the callback is always discarded, in all overrides of `DiscoverPluginsAtPath`.
 This works only for C++11 compilers, I'm not sure if it is ok for Roger :-) Then it could be changed to
```
#if defined(__linux__) && !defined(__cplusplus)
```"
4577,2023-04-19T09:32:15Z,2023-04-20T13:07:15Z,DavidBailes,1,0,1,21,3,1,1,[],6336.0,0,99300.0,0,0,0,0,44045698.696569,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @DavidBailes 's branch build:  audacity-win-3.3.0-alpha-20230419+b742aa7-x64

This branch build appears to properly fix this issue for both the **[** and **]** shortcuts

![image](https://user-images.githubusercontent.com/50205984/233058586-1b959eff-67fd-4869-9b16-46d09caae42a.png)
",,"Resolves: #4568 

Problem: The set/left selection boundary dialogs cannot display positions in any of the bar formats.

The NumericTextCtrls in the TimeDialog use the SampleRateContext, rather than the ProjectContext. The bar formats are not available in the SampleRateContext.

Fix: Change the NumericTextCtrls in the TimeDialog to use the ProjectContext (like they do in the Selection toolbar).
Note: TimeDialog::SetSampleRate() was removed as being no longer applicable, and it was not called by any existing code.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4564,2023-04-17T20:19:35Z,2023-04-19T16:50:38Z,crsib,1,9,5,799,11,2,1,[],45289.0,1,160267.0,0,0,0,0,44118694.307051,,0,5,0,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build for this fix:  audacity-win-3.3.0-alpha-20230417+90bbe68-x64

This issue #4556 appears to be properly fixed in Dmitry's branch build.

I tested:
a) left/right arrows  -  moves the cursor by the snapping format
b) Shift + left/right arrows  -  expands the selection by the snapping format
c) Ctrl + Shift + left/right arrows  -  shrinks the selection by the snapping format",,"Resolves: #4556

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Assertion in the constructor, and constancy of the member, should make the null check unnecessary
 My latest PR ""namespace-Callable"" will conflict, but once this is merged into master, I will rebase, and this bit of new annoyance code will also simplify
 Good to see this; now, you can remove ""ProjectNumericFormats.h"" and ""NumericConvert.h"" from inclusions.
 We have very different view on assertions. There are very little cases where I would agree that assertion without a corresponding `if` is not a programming mistake. done If that is your opinion, then make the other  constructor consistent. I meant to say, the other unchecked use of mMultiplierFunctor is inconsistent Great catch, sorry for missing it in the first place 
I don’t like to review a new assertion that has zero comment with it.  The minimum here would be a ‘@pre’ at the declaration of the constructor."
4580,2023-04-19T12:18:53Z,2023-04-19T16:48:33Z,crsib,0,0,2,10,2,1,1,[],,0,16184.0,0,0,0,0,44118821.45683,,0,2,0,False,[],,,"1. CPack will strip binaries before packing (reduces build size twice)
2. Build process adopted to the new `linuxdeploy` blacklist

Resolves: #4563 
Partially fixes #4562 

The stickiness of Share and Audio Setup buttons is not fixed, it seems that this bug is unrelated to AppImages

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4566,2023-04-17T20:48:33Z,2023-04-19T16:46:02Z,crsib,0,0,1,88,1,1,1,[],,1,158254.0,0,0,0,0,44118973.490767,,0,1,0,False,[],,,"Resolves: #2427 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4337,2023-02-20T15:06:19Z,2023-04-19T15:58:31Z,Paul-Licameli,1,4,18,4259,17,2,1,"['Effects (EGATs)', 'refactoring', 'libraries & modules']",5010469.0,1,5014336.0,0,0,0,0,44121827.84255,,1,18,1,False,['dozzzzer'],Tested,,"Resolves: *(direct link to the issue)*

Depends on
- [ ] #4304

A toolkit-neutral library for Ladspa plugin discovery and effect processing.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Eliminates dependency loop and need to type cast at the same time! Explain, I don't follow you
 There was a dependency loop between `LadspaEffect` and `LadspaInstance`, and `LadspaInstance::GetEffect` was used to cast `mProcessor` to get `LadspaEffect`. @vsverchinsky of course I remember now.  The second commit, which I wrote two months ago already.

First making a properly acyclic graph of files before extracting the library -- isn't strictly needed if the cycle is only within the library and not across its boundaries, but still it's just good organization.
"
4400,2023-03-10T21:07:48Z,2023-04-19T15:11:23Z,Paul-Licameli,1,0,9,1363,34,1,1,"['Effects (EGATs)', 'refactoring', 'libraries & modules']",3424300.0,1,3434620.0,0,0,0,0,44124657.069317,,1,9,1,False,['dozzzzer'],Tested,,"Resolves: *(direct link to the issue)*

Depends on
- [x] #4395

Toolkit-neutral library for LV2 effect discovery and processing, minus user interface

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4403,2023-03-11T22:13:41Z,2023-04-19T11:22:49Z,Paul-Licameli,3,0,3,9,3,2,2,[],3242647.0,2,3330554.0,0,0,0,0,44138372.433021,,1,3,1,False,"['dozzzzer', 'Paul-Licameli']","I want @LWinterberg to approve too that these minor design changes are as intended
 > lgtm

Even the second bullet?  I thought I recalled you did not want ""dB"" drawn repeatedly in the vertical ruler.
 Testedlgtm",lgtm,"Resolves: *(direct link to the issue)*

Extends
- [x] #4394 

Three commits from @micpap25 that this reviewer was unsure of.  They would have some visible side effects on other rulers than the beats and measures.  Are they really part of the intended scope?

- Fix an off-by-one error (was it an error?) drawing ticks at extremes
- Add ""dB"" after each number on the old logarithmic vertical ruler
- Don't draw negative time.  (But in #4394 already, there are no negative beats.)

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4359,2023-02-25T19:08:21Z,2023-04-18T15:43:12Z,Paul-Licameli,1,0,29,9500,28,1,1,"['Effects (EGATs)', 'refactoring', 'libraries & modules']",4386769.0,2,4480495.0,0,0,0,0,44209153.583332,,1,29,1,False,['Paul-Licameli'],Thanks again @vsverchinsky .  This one next? #4338 ,,"Resolves: *(direct link to the issue)*

Depends on
- [x] #4304
- [x] #4395

A toolkit-neutral library for VST2 plugin discovery and effect processing.
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4567,2023-04-18T02:02:18Z,2023-04-18T15:39:27Z,Paul-Licameli,2,0,1,11,1,1,1,[],26345.0,1,49033.0,0,0,0,0,44209380.829019,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @Paul-Licameli 's branch build:  audacity-win-3.4.0-alpha-20230418+aa2a373-x64

This now appears to work properly in Paul's branch build - I tested 24-bit and 16-bit projects:
a) there was no crash
b) the projects opened successfully with the tracks remainin at 16-bit and 24-bit with Audacity set to 32-bit default before opening the projects:
![image](https://user-images.githubusercontent.com/50205984/232733456-300401d3-8d02-4213-8068-8a4008a431f6.png)
 Testing on W10 with @Paul-Licameli 's branch build:  audacity-win-3.4.0-alpha-20230418+aa2a373-x64

This now appears to work properly in Paul's branch build - I tested 24-bit and 16-bit projects:
a) there was no crash
b) the projects opened successfully with the tracks remainin at 16-bit and 24-bit with Audacity set to 32-bit default before opening the projects:
![image](https://user-images.githubusercontent.com/50205984/232733456-300401d3-8d02-4213-8068-8a4008a431f6.png)

I also tested opening a project with both 16-bit and 24-bit tracks into Audacity set at 32-bit - it opened fine with the tracks left at 16-bit and 24-bit:
![image](https://user-images.githubusercontent.com/50205984/232734489-3f462ed9-a5a1-415f-8819-aba6cf81c367.png)",,"Resolves: #4552

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4534,2023-04-12T10:56:42Z,2023-04-18T14:47:52Z,crsib,0,0,2,12,1,1,2,[],,1,532271.0,0,0,0,0,44212480.9985,,0,2,0,False,[],,,"Resolves: #4457

An excellent proposal by @DavidBailes

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4571,2023-04-18T09:55:45Z,2023-04-18T14:46:11Z,crsib,0,0,1,1,1,1,1,[],,1,17430.0,0,0,0,0,44212581.21309,,0,1,0,False,[],,,"Resolves: #4570

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4557,2023-04-17T10:38:00Z,2023-04-18T10:14:18Z,Gootector,1,0,1,10,1,0,0,[],29.0,0,84979.0,0,0,0,0,44228899.50136,,0,1,0,False,['Gootector'],@crsib The last patch :D,,"Update German from Transifex - 3.3.0
Translation imported from Transifex.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4546,2023-04-14T16:40:41Z,2023-04-18T09:58:16Z,crsib,0,0,2,57,3,1,1,[],,0,321458.0,0,0,0,0,44229861.612999,,0,2,0,False,[],,,"Resolves: #4542 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4547,2023-04-14T21:34:23Z,2023-04-17T09:24:17Z,Gootector,0,0,1,1599,1,0,0,[],,0,215394.0,0,0,0,0,44318305.641802,,0,1,0,False,[],,,"Update Polish from Transifex - 3.3.0
Translation imported from Transifex.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4548,2023-04-14T21:34:29Z,2023-04-17T09:23:41Z,Gootector,0,0,1,2016,1,0,0,[],,0,215353.0,0,0,0,0,44318342.877524,,0,1,0,False,[],,,"Update German from Transifex - 3.3.0
Translation imported from Transifex.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4535,2023-04-12T11:26:35Z,2023-04-16T16:07:07Z,Paul-Licameli,3,3,7,549,6,1,2,['code quality'],6312.0,2,362436.0,1,0,0,0,44380536.280928,,2,7,1,False,['Paul-Licameli'],"> I'll like the proposed changes, but GCC does not :-)

It may be GCC isn't doing CTAD correctly and a `make_visitor` function like `make_pair` may be needed after all
 This idea needed much more work than I thought to get all the details really right.

Please review the whole again from the beginning.

There are also now many more compile-time tests (so we know the cases don't violate the `static_assert`s) and run-time tests of various combinations of values in the visitor, and constness and reference types of the arguments and the expected return value type.
 > Looks fantastic!

It was frustrating, but educational, to get all the details right at last.  Using `decltype(auto)` properly is really new to me, and also a function requiring overloads on all combinations of `const` and `&` vs `&&`.

Pretty awesome! I'll like the proposed changes, but GCC does not :-) Looks fantastic!","Pretty awesome! I'll like the proposed changes, but GCC does not :-) Looks fantastic!","Resolves: *(direct link to the issue)*

Variant::VariantVisitor is a useful utility template for defining visitors of variants, uniting any
number of callables into one set of overload resolution candidates.

Variant::Visit() now simulates the one-visitor case of C++17 std::visit more exactly according to the standard.

This includes perfect forwarding of return values, the requirement that all alternatives return exactly the same type,
allowing the variant argument to be a proper subclass of a std::variant specialization, and sfinae to exclude other
calls to Visit from overload resolution.

Also, the performance guarantee of the standard, that dispatch is constant-time.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I wonder if `decltype(auto)` is needed here as well Or, sorry, I have missed the `->` arrow Pretty cool!"
4540,2023-04-13T12:32:27Z,2023-04-16T12:59:13Z,Paul-Licameli,14,1,3,655,9,1,1,"['refactoring', 'code quality']",2240.0,1,260809.0,0,0,0,0,44391813.878714,,4,3,1,False,"['crsib', 'saintmatthieu', 'Paul-Licameli']","I'm labelling this as ""code quality"" because it also contains a little bit of simplification of older code that isn't really needed for other refactoring
 It certainly is an interesting read. The example (static unit-tests) are helpful not only to test but also to understand the code.
I'm having a hard time figuring out the motivation behind `TypeList`s, though. @Paul-Licameli could you shed some light on this ? Tell me if you find any errors, or think anything could be more clearly commented.

Code review is also for knowledge sharing.  You should understand what I did well enough, that you can explain back to me what I was thinking.

(Those remarks apply generally to code reviews.)

Meanwhile if you found this entertaining, try this.  https://github.com/audacity/audacity/pull/4535
 These pull requests for new utilities are cherry picked from a growing branch that I have not yet shared.  It will clean up the registry system so it is more convenient to use, and also better type checked.

See how the type-erased Registry.cpp uses only four subclasses of BaseItem, assuming they are an exhaustive partition of cases.  But there is not now check of this assumption when groups are built.  I want to make a compile time check and will find TypeList convenient to express this in a `static_assert`.

But also, each different re-use of Registry for special purposes will define its own concrete subclasses.  For instance `CommandItem`, etc. just for the menu registry, which are not known types in Registry.h.  I also want a way to pass a type list to Registry.h as a template parameter, and so express more static checks of types.

TypeList will find other applications too.  There is yet another branch. https://github.com/audacity/audacity/pull/4290/files

I did some other metaprogramming there that could have been simplified if I had invented TypeList earlier.  I want to redraft that other one.

There is also some older stuff in Track.h, implementing `TypeSwitch` and `Visit` in a generic way so that Track.h does not depend on the subclasses of Track.  There are opportunities to use TypeList there, and maybe separate a general utility for such type switching and otherwise clean it up.

This pull request also contains one small application of TypeList in the second commit.




 When I first read `Modern C++ Design`, which introduces Type Lists I though ""OMG, it is so cool, I need to use it right now"". And you know - I failed. Some 15 years later I am still not convinced that Type Lists have a lot of practical applications. Unless, of course, you want to have a lot of free time during your day while your compiler tries to crunch. 

And looking through this PR I can see, that C++11 made type lists even more complex!  

The way it is used right now is the most insane and unreadable way to simply define `std::variant<wxString&, int&,...>` and `std::variant<const wxString&, const int&,...>`. I don't agree that this types should be used in the first place, but this is something of an ancient history. However the way it was done before was much shorter and easier to understand. 

Instead of relying  on standard library you imply that someone who runs into this code has a lot of understanding of some very Audacity specific implementation of Loki/Boost MPL. This complicates further Audacity development and I don't see any practical gain from it. 

In general, while I have pretty much nothing to say about the first commit (and we can even put it into the Audacity source tree), I have strong feelings about the second one. > When I first read `Modern C++ Design`, which introduces Type Lists I though ""OMG, it is so cool, I need to use it right now"". And you know - I failed. Some 15 years later I am still not convinced that Type Lists have a lot of practical applications. Unless, of course, you want to have a lot of free time during your day while your compiler tries to crunch.
> 
> And looking through this PR I can see, that C++11 made type lists even more complex!
> 
> The way it is used right now is the most insane and unreadable way to simply define `std::variant<wxString&, int&,...>` and `std::variant<const wxString&, const int&,...>`. I don't agree that this types should be used in the first place, but this is something of an ancient history. However the way it was done before was much shorter and easier to understand.

Don't you know, std::variant cannot contain reference types?  Check that at cppreference.com, and look closer at PluginManager.h.  The type alias is actually for
```
std::variant<
   std::reference_wrapper<wxString>,
   std::reference_wrapper<int>,
   std::reference_wrapper<bool>,
   std::reference_wrapper<float>,
   std::reference_wrapper<double>
>
``` 
and another even longer type would describe the const version.

In PluginManager, using a metafunction to generate the type (whether implemented the old or the new way) reduces verbosity and improves clarity, if you just take the metafunction as given.  And indeed, maybe this metafunction ought to move into Variant.h for potential reuse.

What matters is parametrizing the type generation clearly by just mentioning the essentials, the contained types, and you could simply edit just that list of types if need arises.

Maybe this small example isn't compelling enough for applying TypeList, and the second commit is not essential to anything else I need to do.  I hope I will change your opinion when you see the larger applications of TypeList than this small example in Plugin manager.

There will be need to pass multiple packs of types around as template parameters, and rather than abuse std::tuple for that purpose I want something distinct.

> 
> Instead of relying on standard library you imply that someone who runs into this code has a lot of understanding of some very Audacity specific implementation of Loki/Boost MPL. This complicates further Audacity development and I don't see any practical gain from it.
> 

The standard library doesn't yet have an equivalent of what I do here, letting me do map, filter, and all the other familiar basic functional programming things.

One will not need ""a lot"" of understanding to use the TypeLists, guided by the examples in TypeList.cpp, without studying all the details of TypeList.h.  The notation in the examples is not really complicated.  If you are used to `std::conditional_t` and other `type_traits`, then this is not much stranger.

C++11 actually makes notation for a non-lazy type list easier, because you can just use a variable length parameter back, rather than something like `pair<int, pair<float, nil>>`.  I know from experience in the early 00s (when MPL and Loki were invented), when I also made my own typelists, that you had to define a Nil and then use iterated application of std::pair or similar.  It was uglier than this.

MPL, I understand, includes lazily generated typelists and the notion of a meta-iterator!  I'm not attempting that generality, but if you do then I think you do have to go back to the 1998 non-variadic style of lists as interated pairings of heads with tails.

> In general, while I have pretty much nothing to say about the first commit (and we can even put it into the Audacity source tree), I have strong feelings about the second one.

Even with the simplicity of variadics, always with a good library there may be complexity of implementation but the interface hides it.  The examples of use in `TypeList.cpp` are meant to look simple, really.  If you know a bit of Lisp, you should recognize this as like Lisp with just some notational change.

 I mention `map` and `filter`, but also `apply` is a great convenience.  From TypeList.cpp:

```
static_assert(is_same_v<tuple<int, double>, Apply_t<tuple, Example>>);
```

In other words `Apply_t<tuple, Example>` neatly generates a type for you, and you can easily vary the first argument, `Apply_t<variant, Example>`.

So -- just pass a pack of types around as a single thing, and combine it ad hoc with any other variadic template.

See the old version of PluginManager.h -- where, without Apply, you must first define a primary template, then a partial specialization, to generate the type.   Apply lets you avoid repetition of that pattern each time you do similar things.

 > Don't you know, std::variant cannot contain reference types?

Sure. I would push further and say that the need for variant of references is an indication of the problems with code. That is what I explicitly stated in my comment. 

> and another even longer type would describe the const version.

Which is much more clear BTW. However, I was comparing old vs new. I wasn't even mentioning the *explicit* way.

> reduces verbosity and improves clarity

I disagree. I've tried to read it - it is literally hard. So I fell back comparing the old approach to see if the new is equivalent. Surely I am not as brilliant as you are, but you have to live with me for now.

> One will not need ""a lot"" of understanding to use the TypeLists

I disagree. It is completely unclear what the code is doing.

>  If you know a bit of Lisp

So you expect every potential read of an open source code base to know Lisp?

> See the old version of PluginManager.h

I find the old version to be easier to understand. Verbosity is not something bad. Do not replace verbosity with complex magic just for the sake of reducing. The code should be easy to read and understand, not short.






 > > Don't you know, std::variant cannot contain reference types?
> 
> Sure. I would push further and say that the need for variant of references is an indication of the problems with code. That is what I explicitly stated in my comment.

See commit 3acbcb4c2d8ada1e74991be79ecb3844568bcc0a where it began.  See how much repetitious code was eliminated with variants and visitors.  I prefer it this way.

> 
> > and another even longer type would describe the const version.
> 
> Which is much more clear BTW. However, I was comparing old vs new. I wasn't even mentioning the _explicit_ way.
> 
> > reduces verbosity and improves clarity
> 
> I disagree. I've tried to read it - it is literally hard. So I fell back comparing the old approach to see if the new is equivalent. Surely I am not as brilliant as you are, but you have to live with me for now.
> 
> > One will not need ""a lot"" of understanding to use the TypeLists
> 
> I disagree. It is completely unclear what the code is doing.
> 
> > If you know a bit of Lisp
> 
> So you expect every potential read of an open source code base to know Lisp?

Frankly, yes, everybody should have a little bit of exposure to the ideas of basic list manipulation with one notation or another.  They don't need to read the whole Common Lisp HyperSpec.

And this is just a slightly different notation, for compile-time manipulation of types.  And I expect C++ programmers not to find compile time manipulation of types a strange idea.  Everybody uses `vector` and from there you advance.

> 
> > See the old version of PluginManager.h
> 
> I find the old version to be easier to understand. Verbosity is not something bad. Do not replace verbosity with complex magic just for the sake of reducing. The code should be easy to read and understand, not short.

Please see the new commit.

PluginManager.h just invokes a utility with a descriptive name.  You can read it, just trusting the implementation to do what it describes, to understand the intent.

It's just like using `std::binary_search`.  A descriptive name hiding details elsewhere that you don't need to study.
 And provided that it builds xD I will withhold the changes to PluginManager.h, saving them for a later pull request.

You don't yet sound convinced of the value of this @crsib.  I hope to provide more powerful examples soon.
 And if I don't even use TypeList.h anywhere, I think we can agree this one can bypass QA.  It's just then the new files plus the little movement of the bit of Obj-C++.

 > I will withhold the changes to PluginManager.h, saving them for a later pull request.

You can include them, with the VariantOfReferences_t approach. I am totally fine with that. 

Given that it only affects the way the variant with code I am good with bypassing QA even if you choose to keep PluginManager.h changes. Also, the MaybeConst metafunction will be so frequently needed, I should add it to TypeList.h, and also the mapping of a given type list by it.  Then TypeListVisitor.h wouldn't mention `conditional_t` and it could look like

```
template<bool Const, typename TypeList> using VariantOfReferences
    = Apply<variant, Map_t<Fn<reference_wrapper>, MapConst_t<Const, TypeList>>>;
```With the latest two commits I can approve this PR, after some squashing. ","With the latest two commits I can approve this PR, after some squashing. ","Resolves: *(direct link to the issue)*

A small metprogramming library for typelist manipulations

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I'd love to see `using namespace std` removed here, but no string feelings about it"
4537,2023-04-12T13:42:09Z,2023-04-14T09:19:49Z,crsib,1,0,2,94,4,1,1,[],9979.0,0,157064.0,0,0,0,0,44577778.980535,,1,2,0,False,['petersampsonaudacity'],"Tested on W10 with @crsib 's branch:  audacity-win-3.3.0-alpha-20230412+296cab1-x64

This works fine in Dmitry's branch - it is obtainable from the **Extra** menu:
![image](https://user-images.githubusercontent.com/50205984/231517597-38647593-eeb3-4388-8943-1011f881a555.png)",,"Resolves: #4470 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4518,2023-04-07T17:37:09Z,2023-04-12T15:04:07Z,Patriccollu,1,0,1,266,1,0,0,[],257.0,0,426148.0,0,0,0,0,44726597.040121,,0,1,0,False,['crsib'],Thank you a lot!,,"Hello @crsib 

This is an update of **Corsican** localization for Audacity 3.3.0.

The three files on [Transifex](https://app.transifex.com/klyok/audacity/language/co/) are also 100% translated.

Best regards,
Patriccollu.",
4536,2023-04-12T12:55:35Z,2023-04-12T15:05:21Z,KissDaniGH,0,0,1,28,1,0,0,[],,0,7786.0,0,0,0,0,44729854.995986,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4528,2023-04-10T17:19:34Z,2023-04-11T21:48:31Z,Paul-Licameli,1,2,2,42,5,2,1,[],55733.0,1,102544.0,0,0,0,0,44792060.649524,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with @Paul-Licameli 's branch:  audacity-win-3.3.0-alpha-20230410+5721047-x64

Both #4517 and #4526 work properly with Paul's build.",,"Resolves: #4517
Resolves: #4526

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","How could I reach this branch?  Build this commit, not the last one, and do the steps to reproduce either issue.  It changes a crash to a quiet failure of the effects.
"
4529,2023-04-10T17:44:33Z,2023-04-11T15:54:10Z,crsib,2,9,3,195,14,2,1,[],12807.0,1,79780.0,1,0,0,0,44813328.062651,,0,3,0,False,"['crsib', 'petersampsonaudacity']","I have pushed fixes, I will squash them with the first commit before merging Testing on W10 with @crsib 's branch build:  audacity-win-3.3.0-alpha-20230410+431f64b-x64

This now works properly in Dmitry's branch build - see image below:
![image](https://user-images.githubusercontent.com/50205984/231110319-0fd822fe-dae0-4fcc-a75f-3d94782e3901.png)See my first comment in this conversation.  Please fix it, or explain why it is not an error.

","See my first comment in this conversation.  Please fix it, or explain why it is not an error.

","Resolves: #4501 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I understand this substitution, but then I wanted to check that it was done completely.

I see an omission in `ParsedNumericConverterFormatterFactory`.
 This function is called only from unit tests.  Is it easy and sensible to add some test cases?
 Not really related to this PR, but I scanned for all occurences of `NumericConverter` and notice mentions of it in `ParsedNumericConverterFormatter.cpp` in comments, which seem no longer correct. Also the comment in `NumericConverter.h` refers to the wrong place to find an explanation of the mini language.
 And `NumericTextCtrl.h` duplicates that comment
 This function shadows the base class function but does not override it.  Yet it does override other functions.

As you have mentioned, and I agree, ideally the control has-a converter, not is-a.  But, that's for future.
 Whoa, that's a great catch. And actually the condition used by the factory is wrong. So I have fixed the wrong condition instead. But now this means that frequency and bandwidth converters depended on sample rate before, but now they do not.  Is that correct?

 Yes I see it is correct, now that I reexamined all uses of `mSampleRate`.  It really is only those formats contianing `#` that have any dependency on it.

"
4523,2023-04-10T09:05:21Z,2023-04-11T15:53:02Z,crsib,1,0,1,11,1,1,1,[],4287.0,1,110865.0,0,0,0,0,44813397.288762,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build:  audacity-win-3.3.0-alpha-20230410+1552625-x64

This issue appears to be fixed (and improved)
a) there is no longer the colorway deformation when turning snapping off
b) as an improvement the time format now remains as the user set it (rather than reverting to ""seconds"")


![image](https://user-images.githubusercontent.com/50205984/230882414-cc851338-e7a5-4ebd-bd3a-b2f462f1f6ba.png)
",,"Resolves: #4427

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4527,2023-04-10T16:25:57Z,2023-04-11T12:16:46Z,Paul-Licameli,2,0,1,2,1,1,1,[],786.0,1,71452.0,0,0,0,0,44826376.365164,,0,1,0,False,"['petersampsonaudacity', 'Paul-Licameli']","Done
 Testing on W10 with @Paul-Licameli 's branch build:  audacity-win-3.4.0-alpha-20230410+83dfebf-x64

This works properly on Paul's branch build with the STRs - no crash and 10 labels produced:
![image](https://user-images.githubusercontent.com/50205984/230954791-3b303860-e826-46ed-928c-fe38d946e19a.png)Please change the target branch to `release-3.3.0`",Please change the target branch to `release-3.3.0`,"Resolves: #4498

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4515,2023-04-07T15:02:30Z,2023-04-11T10:02:33Z,crsib,2,0,1,7,2,1,1,[],177100.0,1,331932.0,0,0,0,0,44830105.578468,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build:  audacity-win-3.3.0-alpha-20230407+f4ef424-x64

This issue appears to be properly fixed:
a) there is no crash
b) clicking the link in the **Check for update**s dialog takes the user properly to **Application Preferences** Testing on latest 3.3.0 Beta

This issue is now properly fixed in the Beta build:
a) there is no crash
b) clicking the link in the **Check for update**s dialog takes the user properly to **Application Preferences**",,"Resolves: #4506 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4524,2023-04-10T09:33:07Z,2023-04-11T10:19:58Z,crsib,1,0,1,1,1,1,1,[],5325.0,1,89215.0,0,0,0,0,44833387.832934,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch build:  audacity-win-3.3.0-alpha-20230410+09bdf32-x64

This issue appears to be properly fixed in Dmitry's branch",,"Resolves: #4474

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4514,2023-04-07T14:36:45Z,2023-04-11T10:04:03Z,crsib,1,0,1,3,1,1,1,[],329197.0,2,329242.0,0,0,0,0,44834345.013521,,0,1,1,False,['dozzzzer'],Tested,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4531,2023-04-11T07:02:16Z,2023-04-11T09:15:49Z,Gootector,0,0,1,28,1,0,0,[],,0,8013.0,0,0,0,0,44837245.078726,,0,1,0,False,[],,,"Update German from Transifex - 3.3.0 (fixes)

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4496,2023-04-05T13:20:41Z,2023-04-05T13:31:44Z,LWinterberg,0,0,1,27,1,1,1,[],,0,438804.0,0,0,0,0,44902151.170537,,0,1,0,False,[],,,,
4511,2023-04-07T09:39:05Z,2023-04-07T10:15:43Z,mlocati,3,0,1,2458,1,0,0,[],2190.0,0,16508.0,0,0,0,0,45164945.314033,,0,1,0,False,"['crsib', 'mlocati']","Hi, Michele! Thank you a lot for the translation!

We have no formatting preferences for PO files format. I think that they are rarely edited manually, so it doesn't feel that having formatting preferences is needed much. @crsib do you mind if I submit another pull request that adds a script aimed to ""normalize"" the .po files?

I'd also make it so it's called by the `locale/update_po_files.sh` script (that way, I won't have to remember those `sed` commands, and any subsequent commit will contain only *actual* changes). Please do!",,"Here's the 100% translated strings for Italian.

Is there a standard formatting approach for .po files?

I mean, I translated those strings with Transifex, and I downloaded them.
But I don'l like the formatting they use.

For example, here's a section of the file generated by Transifex:

```po
msgid ""Cannot check mutual sample rates without both devices.\n""
msgstr """"
""Impossibile verificare le frequenze di campionamento reciproche senza ""
""entrambi i dispositivi.\n""
```

- Why the source string is right after `msgid` and the translation is on its own line?
- I don't want to break lines at random points: I'd like to break lines when the string contains `\n`.

So I reformatted the .po file this way:

```sh
cat downloaded-from-transifex.po \
    | sed -z 's/""\n""//g'  \
    | sed -z 's/\\n/\\n""\n""/g'  \
    | sed '/^""""$/d' \
    > fixed.po
```

Where:
- the first `sed` make it so that we have just one line for every `msgid`/`msgstr`
- the second `sed` splits the strings when they contain the `\n` string
- the third `sed` removes lines containing only `""""`

For example, let's consider this string (as downloaded from Transifex):

```po
msgid """"
""Running two copies of Audacity simultaneously may cause\n""
""data loss or cause your system to crash.\n""
""\n""
msgstr """"
""L'esecuzione contemporanea di due copie di Audacity può causare\n""
""perdita di dati o un blocco del sistema.\n""
""\n""
```

With the first `sed` we have:

```po
msgid ""Running two copies of Audacity simultaneously may cause\ndata loss or cause your system to crash.\n\n""
msgstr ""L'esecuzione contemporanea di due copie di Audacity può causare\nperdita di dati o un blocco del sistema.\n\n""
```

With the second `sed` we have:

```po
msgid ""Running two copies of Audacity simultaneously may cause\n""
""data loss or cause your system to crash.\n""
""\n""
""""
msgstr ""L'esecuzione contemporanea di due copie di Audacity può causare\n""
""perdita di dati o un blocco del sistema.\n""
""\n""
""""
```

With the final `sed` we have:

```po
msgid ""Running two copies of Audacity simultaneously may cause\n""
""data loss or cause your system to crash.\n""
""\n""
msgstr ""L'esecuzione contemporanea di due copie di Audacity può causare\n""
""perdita di dati o un blocco del sistema.\n""
""\n""
```

But everything seems rather arbitrary... I mean, it's ok for me, but others may have a different preference about formatting.

What about adding some specifics of the format of the .po files (or, even better, a script)?",
4505,2023-04-06T17:34:02Z,2023-04-07T10:16:14Z,KissDaniGH,0,0,1,258,1,1,1,[],,0,60132.0,0,0,0,0,45179226.420366,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4503,2023-04-06T13:49:51Z,2023-04-07T09:05:43Z,crsib,1,0,1,0,4,1,1,[],6057.0,2,69357.0,0,0,0,0,45183454.568582,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with @crsib 's branch:  audacity-win-3.3.0-alpha-20230406+dfed530-x64

I do like, and much prefer, the smaller Mr Coggy.",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4509,2023-04-06T21:12:14Z,2023-04-07T09:04:11Z,Gootector,0,0,1,6,1,0,0,[],,0,42717.0,0,0,0,0,45183553.742529,,0,1,0,False,[],,,"Update German from Transifex - 3.3.0 (fixes)
Wrong translation and untranslated string.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4507,2023-04-06T20:56:39Z,2023-04-07T09:03:59Z,Gootector,0,0,3,24,1,0,0,[],,0,43640.0,0,0,0,0,45183567.784964,,0,3,0,False,[],,,"Update Polish from Transifex - 3.3.0 (fixes)
Wrong translations and untranslated string.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4458,2023-03-28T18:46:27Z,2023-03-29T19:48:47Z,Paul-Licameli,0,0,1,3,2,1,1,[],,1,761843.0,0,0,0,0,45250779.005879,,1,1,0,False,[],Looks sensible to me,Looks sensible to me,"... And in principle, Sequence::Copy() also needs a fix for completeness; though in practice, that function is not used

Resolves: #4417

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4500,2023-04-05T23:00:52Z,2023-04-06T09:33:07Z,Gootector,0,0,2,254,1,0,0,[],,0,37935.0,0,0,0,0,45268224.079458,,0,2,0,False,[],,,"Update German from Transifex - 3.3.0

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4499,2023-04-05T21:36:28Z,2023-04-06T09:12:03Z,Gootector,1,0,3,264,1,0,0,[],41743.0,0,41743.0,0,0,0,0,45269482.0983,,0,3,0,False,['crsib'],Thank you a lot!,,"Update Polish from Transifex - 3.3.0

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4484,2023-04-03T20:44:56Z,2023-04-04T11:21:55Z,crsib,0,0,1,8,1,1,1,['Build / CI'],,1,152453.0,0,0,0,0,45334666.428726,,1,1,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4485,2023-04-04T08:51:45Z,2023-04-05T12:56:21Z,DavidBailes,0,0,1,5,2,1,1,[],,1,101077.0,0,0,0,0,45342435.527708,,0,1,1,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4478

Problem: controls in selection toolbar have an inconvenient and peculiar tab order - the setup button comes between the two numeric controls.

Fix: Change the tab order to: setup button, first numeric ctrl, second numeric ctrl.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4493,2023-04-05T08:53:59Z,2023-04-05T12:56:00Z,DavidBailes,0,0,1,10,1,1,1,[],,1,14521.0,0,0,0,0,45342459.699198,,0,1,1,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4477

Problems for users of screen readers:
1. drop down list box has no accessibility name.
2. it is read as being a text box.

Fix:
1. The focus is a text box within the wxComboCtrl, so set the accessibility name of this text box.

2. If an attempt to change the role of the text box is made by deriving a class from WindowAccessible, and overriding GetRole, then unfortunately, only NVDA reads the override, and Narrator and Jaws still read it as a text box. So include ""combo box"" in the accessiblity name. The control is then read as ""combo box edit"", which although its slightly confusing, is probably good enough.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4491,2023-04-04T16:58:18Z,2023-04-05T12:55:18Z,crsib,0,0,1,8,1,1,1,[],,2,71824.0,0,0,0,0,45342499.747706,,0,1,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4483,2023-04-03T18:01:01Z,2023-04-04T10:06:26Z,vsverchinsky,0,0,1,4,1,1,1,[],,1,57926.0,0,0,0,0,45439036.911826,,0,1,0,False,[],,,"Resolves: #4430 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4453,2023-03-27T21:21:49Z,2023-04-04T10:05:43Z,vsverchinsky,4,7,2,252,5,2,1,[],412727.0,2,650635.0,0,0,0,0,45439082.327277,,1,2,1,False,['Paul-Licameli'],"The older version adjusts `desiredSlideAmount` first to quantize, then for snapping, then for AdjustFit (small tolerances allowed by WaveClip, but depending also on zoom level -- time per pixel column), then for `AdjustOffsetSmaller`.

The new version adjusts `desiredSlideAmount` for quantization, then for AdjustFit, then for snapping, then for `AdjustOffsetSmaller`.

That was difficult to figure out, in all this logic I had forgotten about for long.

Maybe this makes a subtle change of behavior of clip moving in some cases?  But maybe this does not matter.

 > The older version adjusts `desiredSlideAmount` first to quantize, then for snapping, then for AdjustFit (small tolerances allowed by WaveClip, but depending also on zoom level -- time per pixel column), then for `AdjustOffsetSmaller`.
> 
> The new version adjusts `desiredSlideAmount` for quantization, then for AdjustFit, then for snapping, then for `AdjustOffsetSmaller`.
> 
> That was difficult to figure out, in all this logic I had forgotten about for long.
> 
> Maybe this makes a subtle change of behavior of clip moving in some cases? But maybe this does not matter.

I'm thinking it through more carefully.

In the old version, I think`AdjustOffsetSmaller` does not matter in case of moving between tracks, because all the other checks for fit already adjust the offset, so it will do nothing.  Only in case of sliding horizonally within track, does this matter.  `AdjustFit` does all the protection against overlapping clips.

But with this change, snapping may make another change of horizontal position of clips after those checks!

But then, `AdjustOffsetSmaller` really does work to prevent overlap.

So really it's just the composition of a correct vertical move and a correct horizontal move.

We won't get overlapping clips.  We might devise some test case where a drag between clips is permitted in one version but not the other.  Because the check for fit might give different answers at the snapped and unsnapped x coordinates.
 I tried this case:  make three clips in sequence that touch exactly.  Drag the middle one to another empty track below.  Then try to drag it back again into the gap that fits it exactly.

Actually it's hard to do in both versions, in neither one, just working simply.  It seems in the old version I must drag horizontally until snapping, then move vertically without any more lateral movement.

I'm not sure, maybe the new makes it slightly easier but still it doesn't always just work.

Maybe you can figure out an extra fix for this case.

But, as for exploring consequences, to find any reason to dealy this PR -- no, I haven't found one.
 I would just ask for some more comments in `Drag` making explicit what I said about the correctness of clip fit in all case.
",,"Resolves: #4285 

Also fixes wrong guidline positions when clips are moved between tracks

Currently adds to new commits on top of #4414

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Do you mean `!=`? Might omit `offset`
 Yes, thanks! In commit comment “guidelines” Initializers please Were the side effects on interval caused by move in the first branch important?  This branch omits them I suppose not, now I see they belong to expiring `remover`"
4416,2023-03-15T22:42:57Z,2023-04-03T11:08:51Z,SteveDaulton,12,1,1,155,1,2,1,"['plugins', 'Effects (EGATs)']",1347716.0,0,1624592.0,0,0,0,0,45497059.595358,,0,1,1,False,"['petersampsonaudacity', 'SteveDaulton', 'DavidBailes', 'LWinterberg', 'crsib', 'Paul-Licameli']","![image](https://user-images.githubusercontent.com/87814144/229127098-113d8343-66cd-40eb-9f70-0e92225d893f.png)

Unfortunately this crashes for me here

Edit: 
![image](https://user-images.githubusercontent.com/87814144/229128408-c80ffee4-7f72-4ec1-acdc-ad6de24a25ba.png)

here's a sample of what settings I used.

Additional info: 
* This happens both for stereo and mono tracks
* If you spam ""ignore"", you can get past this error (but the thing only appears in debug builds anyway)
* This happens for both previewing and applying > Unfortunately this crashes for me here

Yes that is unfortunate.
I assume that you are testing on Windows?

Does the problem happen every time?
(I've not been able to reproduce the crash, but I might only have tested in release builds of Audacity).

As the bug is in Audacity rather than in the plugin, have you logged the bug?
 Does the first button make a call stack trace? Testing on W10 with Steve's branch:  audacity-win-3.3.0-alpha-20230316+c72c661-x64

I can't get this to crash - not with @LWinterberg 's setings above, nor with other settings that I try. The problem of using an uninitialized variable is only detected in debug builds. It looks like the problem was introduced by this commit:

Author:		Steve Daulton <SteveDaulton@users.noreply.github.com>
Date:		2 years ago (29/09/2021 11:51:00)
Committer:	GitHub <noreply@github.com>
Commit hash:	72d72d120d29360c35d0b57af3dbd708696cd663
Child:		6750576b
Parent:		1fe4d70d

Issue 1642 Fix by rdb (#1672)

Apply upstream update to Nyquist library.

Fixes special case where the time warp function maps positive output times

to negative input times (negative input times are now handled by filling

with zeros).

Fixes improper handling of Nyquist's logical stop times and terminate times

which have to get mapped through the time warp function to the output.
 Ah, thank you David, you saved me a bunch of time - I was about to recompile this with different things turned on and off to figure out why peter can't repro it.  ![image](https://user-images.githubusercontent.com/87814144/229487460-98485271-535e-4a7a-92fe-901df804d343.png)
Testing with a release build and just a short tone impulse, the new option is absolutely an improvement. Pitch/Tempo looks rubbishy compared to the other two options.

@LWinterberg  I would suggest that it could benefit users to change the default setting to **High-quality Pitch Shift**

The High Quality Pitch Shift seems to operate in a rapid enough manner  - in fact testing on a 2 hour stereo project with the 3 options yields:
a) High-quality:  37 secs
b) Low-qualiry - 63 secs
c) Pitch/Tempo - 59 secs

Pitch/Tempo should be retained to avoid a regression, in particular existing Macros need to be protected. > Pitch/Tempo looks rubbishy compared to the other two options.

In practice, because the delay is usually at a much lower level than the original sound, the ""low quality"" pitch shift is often _good enough_, and in some cases may be preferable as it retains the attack on percussive sounds better than the ""high quality"" option.



> on a 2 hour stereo project with the 3 options yields:
> a) High-quality: 37 secs

Are you  sure about that? On my machine the ""high quality"" setting is _much_ slower than the other two options.
(Note that when the amount of pitch shift is set to zero, the pitch shifting code is completely bypassed). @SteveDaulton   -  OK _""it's a fair cop guvnor""_

Yes I was using the default settings (with zero pitch shift)  when I alter the pitch setting
a) High-quality: takes a very long time (dialog advise 14 mins or so
b) Low-qualiry - takes c, 2 mins
c) Pitch/Tempo - 35 secs

_So @LWinterberg  I now _**really**_ don't think that High Quality should be default ..._ I've now tested with a debug build on Linux, and I'm still not able to reproduce the ""crash"" issue. Maybe it's specific to Windows? You need to use some kind of a sanitizer, that prevents reads for uninitialized variables. It is unsafe, because in release builds such variables do contain random content.",,"Resolves: Poor quality pitch shift in Delay effect.

*(Nyquist now has a phase-vocoder which can provide much better quality pitch shifting than the old STK pitch shifter. 
This commit adds a ""High-quality pitch shift"" option, while retaining backward compatibility with the previous version.)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The ""force push"" was to fix a typo in a comment."
4414,2023-03-15T15:24:10Z,2023-04-03T17:48:42Z,crsib,30,30,63,8955,116,1,0,[],7395.0,0,1650276.0,1,0,0,0,45497705.895763,,0,63,1,False,"['petersampsonaudacity', 'dozzzzer', 'crsib', 'DavidBailes', 'Paul-Licameli']","That completes just an overview of the final state of the source tree.  I didn't yet study each commit.

Is this all, or will there be other pull requests for other parts of the project?
 My first round of review is complete.  There is a lot to fix.  I do not object if you force push onto recent master and resolve all the conflicts before the next round. I have composed a list of tasks based on your review comments and some leftovers TBD after rebasing onto the master branch. The branch is now in the following state. 

- [x] [final not override in RegistryVisitor](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1341961138)
- [x] [Add comment to lib-snapping CMake](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1342018838)
- [x] [Add @pre to auStaticText::ScaleFont](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1342905108)
- [x] [SetProjectCommand::Apply missing the SetRate](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1342921648)
- [x] [AUPImportFileHandle::Import misses SetRate](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1342922711)
- [x] [Fix second commit compilation](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1343688038)
- [x] [Use Pref for the `/SelectionToolbarMode`](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344519663)
- [x] [Missing SetName on pCtrl in SelectionBar.cpp](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344583092)
- [x] [Avoid repetition of `ProjectTimeSignature::Get(mProject)`](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344650397)
- [x] [Check `cassert` in SelectionBar.cpp](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344671484)
- [x] [Comment `bool snapped` in SnapUtils.h](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344701328)
- [x] [Remove the comment about AS_SetSnapTo](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344729708)
- [x] https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344731218
- [x] [Break TrackPanel dependency in project selection manager](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344739123)
- [x] [Relace NumericTextCtrl to ComponentInterfaceSymbol in Snap.h](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344766859)
- [x] [Fix `XO(""%d"")` in device prefs](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344840235)
- [x] [Fix L10n in SnappingToolbar](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344927775)
- [x] [Fix the comment in TimeSignatureToolbar.h/cpp](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344929149)
- [x] [Fix L10n in TimeSignatureToolbar](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344944377)
- [x] Remove beats and measures from interface preferences
- [x] Hook beats and measures with the time signature toolbar
- [x] Missing `window.RedrawProject();`
- [x] Undo/Redo for time signature
- [x] [Complete ReadSnapToSetting](https://github.com/audacity/audacity/pull/4414#pullrequestreview-1344675455)
- [x] Correctly handle the time signature in NumericConverter
- [x] Fix ProjectRate settings (final design TBD) Here's another thing I overlooked:  at the commit ""SelectionBarListener no longer controls snapping"", you delete the call to `SnapSelection()` in `AS_SetSelectionFormat()`.  I think this means that when you change selection format in the toolbar, the selection fails to update for the changed granularity of snapping. At ""Removes project rate from the selection toolbar"", you can remove `#include ""SelectionBar.h""` from ProjectFileManager, SetProjectCommand, ImportAUP
 At ""SelectionBarListener no longer controls snapping"" you can remove `#include ""ProjectSelectionManager.h""` from PluginMenus I have done the work of rebasing #4379 onto your latest draft and expect that if your branch still changes, there will be much less work to rebase again.
 > Here's another thing I overlooked: at the commit ""SelectionBarListener no longer controls snapping"", you delete the call to `SnapSelection()` in `AS_SetSelectionFormat()`. I think this means that when you change selection format in the toolbar, the selection fails to update for the changed granularity of snapping.

The point of this PR is to make snapping to be independent from the selection format, so I don't really get your point  > > Here's another thing I overlooked: at the commit ""SelectionBarListener no longer controls snapping"", you delete the call to `SnapSelection()` in `AS_SetSelectionFormat()`. I think this means that when you change selection format in the toolbar, the selection fails to update for the changed granularity of snapping.
> 
> The point of this PR is to make snapping to be independent from the selection format, so I don't really get your point

Rebasing my branch onto yours made me think something was missing.

You are right about the independence that we now want.

What should replace the deleted line is a subscription to `SnapChangedMessage` and re-snapping the selection in response.

And, that is indeed done.

 `mSnapModeChangedSubscription` is perhaps a misleading variable name -- the subscription will correctly fire either for change of mode, or change of snapping unit.
 > And, that is indeed done.

So why this comment? 

> mSnapModeChangedSubscription is perhaps a misleading variable name

I don't quite agree, but I will change that to `mSnappingChangedSubscription` on Monday. > > And, that is indeed done.
> 
> So why this comment?
> 
> > mSnapModeChangedSubscription is perhaps a misleading variable name
> 
> I don't quite agree, but I will change that to `mSnappingChangedSubscription` on Monday.

Sorry I got confused.  Ignore the suggestion if you wish. @crsib @Paul-Licameli 

I have been testing Dmitry's latest branch build with the updated bottom tooldock: audacity-win-3.3.0-alpha-20230317+745c285-x64

I have a couple of immediate observations:

### 1) the Selection toolbar is using **hh.mm.ss + milliseconds** as its default setting.  
This is a regression bug already reported:
 **Default time format in Selection toolbar (and Generators) changed to hh:mm:ss + hundredths** #4408 

This is fixed by a 3rd party pull request (that has not made it into master yet):
 **fix default time format and TimeAndSampleFormat index** #4413 

![image](https://user-images.githubusercontent.com/50205984/226114540-0ef47ab4-6973-4a72-941d-a0bfbefb6a5c.png)
----------------------------------------------------------
### 2)  The default time format for the Time toolbar has been changed from **hh:mm:ss** **xxx,xxx.xxx seconds**
Logged (so we can track this) as:
 **Reset Configuration does not use the proper time format for the Time toolbar** #4426 

This change results in a much smaller font display (for the same toolbar size) - and one that is probably a lot less useful to most users.

The oddity here is that if I clear the audacity settings folder then I still get the nice old **hh:mm:ss** time format for Timer toolbar.
**_BUT_** if I then use **Tools > Reset Configuration** it changes to the **xxx,xxx.xxx seconds**

**UPDATE**
Further testing shows this is a regression on 3.2.4 introduced in 3.2.5

Might this be related to the issue in 1) above?  I.e. introduced as a result of the new **seconds + milliseconds** time format.


---------------------------------------------------------------------------------
### 3) Display oddity with Snap
Logged (so we can track this) as:
 **Display oddity with Snapping toolbar when turning snapping off** #4427 

Also note if you turn **Snap** on with a chosen snap format and then turn it if you are left with a residual blue background the size of the text of the now defunct **Snap** format:

![image](https://user-images.githubusercontent.com/50205984/226114872-08cb49c5-d88a-447f-a265-2d3c60b84e79.png)



 I have set a raft of P1s in the Manual for the many changes that will be needed when this revised bottom tooldock makes it to master _(presumably for the upcoming 3.3.0)_

I will not work on this until the updated lower tooldock has stabilized. Some accessibility issues:

TIME SIGNATURE TOOLBAR

Screen readers do not read the names of the two wxSpinCtrls. I don't know of a quick fix for this. Normally the fix for being able to have an accessibility name where there is no visible label is setting WindowAccessible as the control's accessible object. Alas in this case, this doesn't work as it sets the accessible name of the spinner control rather than the text box which is the focus.
On Windows, by default, wxWidgets uses a native control for a wxSpinCtrl. From include\wx\msw\spinctrl.h:

// Under Win32, wxSpinCtrl is a wxSpinButton with a buddy (as MSDN docs call
// it) text window whose contents is automatically updated when the spin
// control is clicked.

(In contrast for a wxSpinCtrlDouble, on Windows wxWidgets uses a generic control. In this case, the structure is a window containing a text box and a spinner thing. With a visible label, the accessibility name of the containing window is automatically set to this label. This is no good, since again the text box is again the focus. However one can derive a class from wxSpinCtrlDouble, where one has access to the text control, and so make it accessible by setting a WindowAccessible as the text control's accessibility object, and overriding SetName to set the name of the text box.)

SNAPPING TOOLBAR

1. Was a check box chosen in preference to a toggle button because its state is clearer to see? (A toggle button could have been pressed using Enter, a standard keystroke for a button).

In the realtime effect dialogs, a keyboard user has to use a platform dependent keystroke to interact with controls which normally accept Spacebar. (On MacOs, for buttons and check boxes, Option + Spacebar;  On Windows, using either standard or full defaults, for check boxes, Ctrl + Spacebar; On Xubuntu, for check boxes, Enter.) Users of screen readers also have another alternative, but I'm ignoring this here, as the application needs to be keyboard accessible whether of not a screen reader is in use.

For the Snapping checkbox, I see that Enter can be used, without the need for a platform dependent keystroke. Is it intended that this can also be used in the realtime effect dialogs? (This would rely on them remaining without a default button.)

2. It would be better if the snapping interval drop down list had an accessibility name such as ""snapping interval"" or whatever the best name is for this, rather than an empty name.

SELECTION TOOLBAR

It would be more convenient if the two numeric controls were adjacent in the tab order (as they are in previous versions of Audacity) - ie a tab order of: setup button, first numeric control, second numeric control. @crsib It seems that snapping logic disregards the lower time signature value.
For example, let's set snapping value equal to **1 Bar** and look how snapping works when **4/4** time signature is set:
![2023-03-24_10-41-01 (1)](https://user-images.githubusercontent.com/70063970/227493269-4624be65-a4cd-4c2d-a5d7-5092c1c350dd.gif)

Now, let's change the lower time signature value to a half of the previous one, i.e. time signature now is 4/2. Observe how selection now snaps to half the value, i.e. 1/2 Bar while visually it remains the same as in previous example:

![2023-03-24_11-19-30 (1)](https://user-images.githubusercontent.com/70063970/227495172-3d6f110c-b77a-4883-b4c2-f5b1660db49a.gif)


 What exactly is Tempo is discussed right now :-) I have fetched the most recent force-push, and it only affects the commits I have not yet reviewed thoroughly.

A general comment.

The BeatsFormatter ends up in lib-numeric-formats anyway, despite the effort of making a registry.  And in the commit following that one, there is intrusion in NumericConverter.h to finish whatever is happening here.

The purpose of a registration system is open-endedness, but this does not completely realize it.

I don't say this problem must be completely cured for release but the organization could be reconsidered later.
 Why the location of the file affects open endianness? It can be moved into a different library with no effort.  The reason I have started the crusade against `NumericConverter` is it's extreme level of unreadability and heavy reliance on the global state. I could've modified the original implementation, but that would be similarly complex and likely more error prone. 

As you can observe, beats format cannot be represented within the current framework used by NumericConverter.
 And I had impression that we are doing a step-by-step work, not all or nothing. Otherwise I am confused about the amount of the UI details NumericConverter had after being split from the control. > And I had impression that we are doing a step-by-step work, not all or nothing. Otherwise I am confused about the amount of the UI details NumericConverter had after being split from the control.

Indeed we do incremental work, and you leave this code better than it was, although some dependencies among the green libraries still seem less than ideal to me.

If it is too difficult now to follow every suggestion to achieve what I think is better organization, it can be done later.  It won't be the first pull request just to reorganize libraries, as you surely know.

If UI details were still in lib-numeric-formats, it's because I wasn't pursuing perfection but I was doing sufficient to make a green library and unblock the extraction of lib-effects into the green, which was a very big prize.
 Regarding the doubts about the loss of the translatable string, when putting only the identifier part of `NumericFormatSymbol` into a wxEvent:

Really, `NumericFormatSymbol` is an unnecessary type, and formats should be identified simply by a `TaggedIdentifier` type.

See commit 0fb02a8024a442c571ed6e6dbd53c55da9f4a093 from 2017 where I changed `XO(""seconds"")` to `{ XO(""seconds"") }` and similar in the big table of formats, changing plain strings (`XO` expanded then just to `wxT`) with identifier-translatable pairs.  The commit comment explains that translated strings were getting stored in the .cfg file, but that was wrong:  locale-independent identifiers should have been used.

But in fact the `Msgid()` function is never used for those symbols.  This isn't very easy to prove, but I have prepared a few buildable commits transforming the code to prove it to myself.

Now I don't know whether the translations were otherwise used in 2017, but maybe they weren't -- in which case, the real ancient mistake, traceable to 2010, was that these strings were just marked for i18n unnecessarily.

I no longer want to add commits to your branch, but will prepare my own pull requests to make this simplification as a code quality improvement that isn't necessary for 3.3.
 We do use those strings for labels, so they have to be translated. We could've had 2 strings instead - one for id and the second for display purposes, but it is not how it works now. > We do use those strings for labels, so they have to be translated. We could've had 2 strings instead - one for id and the second for display purposes, but it is not how it works now.

Right, some of what I said was nonsense.

What's not nonsense is that NumericFormatSymbol requires much less widespread use.

The sole place where the translation does affect anything is where `NumericTextCtrl::OnContext` visits the registry.

In fact the type could be eliminated and `NumericConverterRegistryItem` could just expose an `Identifier` and a `TranslatableString` separately.

That's what I really proved to myself with the help of some code changes and the compiler.
 I have pushed a commit, just a small and unimportant fix for a bug that was prior to this pull request.
 AND I'M DONE WITH THIS ROUND.

I need to reread all my comments and decide which ones I must really insist on and which are only suggestions.  I may get to that Tuesday.  Between now and then you may force push a branch with any fixes you agree with, perhaps squashed into the history.
 Please read my replies as well  Sorry, pressed the re-review button by accident > Screen readers do not read the names of the two wxSpinCtrls. I don't know of a quick fix for this.

When there is a text label in front of wxSpinCtrls, screen readers read the label without any extra code - Windows automatically sets the accessibility name of the text box.

When there isn't a label, something along the lines of the following seems to work. This is part of my code that I wrote just to test the idea:
```
class MyNativeWindow : public wxNativeWindow
{
public:
    MyNativeWindow(wxWindow* parent,
        wxWindowID winid,
        wxNativeWindowHandle handle) :
        wxNativeWindow(parent, winid, handle) {}

    bool AcceptsFocus() const override { return false; }
};


class  MySpinCtrl : public wxSpinCtrl
{
public:
    MySpinCtrl(wxWindow* parent,
        wxWindowID id = wxID_ANY,
        const wxString& value = wxEmptyString,
        const wxPoint& pos = wxDefaultPosition,
        const wxSize& size = wxDefaultSize,
        long style = wxSP_ARROW_KEYS,
        int min = 0, int max = 100, int initial = 0,
        const wxString& name = wxEmptyString) :
        wxSpinCtrl(parent, id, value, pos, size, style, min, max, initial, name)
    {
        mNativeWindow = new MyNativeWindow(parent, wxID_ANY, m_hwndBuddy);
#if wxUSE_ACCESSIBILITY
        mNativeWindow->SetAccessible(new WindowAccessible(mNativeWindow));
#endif
    }

    ~MySpinCtrl()
    {
        mNativeWindow->Destroy();
    }

    void SetName(const wxString& name) override
    {
        mNativeWindow->SetName(name);
    }

private:
    MyNativeWindow* mNativeWindow{};
};
``` I'm working in the last big commit.  Meanwhile, of the unresolved things above, at least please add more i18n-hints for:

""Beats"" ""beats"" ""beats and 16th""

Be sure each comment has `i18n-hint` not `i18-hint`

And you can incidentally fix some other old similar errors in those comments in LibraryPrefs.cpp and UpdateNoticeDialog.cpp

And, as I look at new strings for i18n, now I wonder if we might improve appearance a bit with Unicode fractions for 1/2, etc. ?

See already in ChangeSpeed.cpp: `XO(""33\u2153"")`
Error in ProjectFileManager.cpp -- needlessly removing the setting of bandwidth selection format
","Error in ProjectFileManager.cpp -- needlessly removing the setting of bandwidth selection format
","Resolves: #4283
Resolves: #4284
Resolves: #4471 

This PR introduces the UI necessary for the Beats&Measures support:

 * A new library: `lib-snapping`, which provides a registry for snapping functions and a list of built-in functions
 * Project format extension to store the time signature
 * UI reorganization according (mostly) to the spec

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I see you have got used to the boilerplate for making new attached objects.

`ClientData::Site` is a great idea if I may say so immodestly, but I find this kind of repetition a bit painful.

I have some ideas for using a CRTP template to automate the writing of all this `Get` junk, requiring only that you supply the factory.

Please review my #4395 .  That, or something close to it, may be part of the solution.
 As we mentioned today, maybe we join this with lib-time-frequency-selection, just to avoid too many libraries.  That did not previously have the two dependencies above, while it also depends on lib-screen-geometry and lib-project-history.  All four of these are comparatively low level things -- screen geometry is even a leaf.
 Did I ever explain the PROHIBITED macro and why I don't still use it and sometimes remove it?

Wow, seven years ago. 9e5d31d347873f7e54f5a4b7e8528fa61490b792

While purging all the old naked news and deletes, I wanted easy text scans to see where remaining ones were that needed work.  `safenew` also dates from this time for certain news that are correctly unpaired and don't need smart pointers -- any construction of a wxWindow with a non-null parent, because the parent assumes deletion responsibility (and I think Qt works the same?). Did you also look at the examples of registry item subclasses in namespace `MenuTable`?  That incidentally was a focus of the cycle-busting I was doing yesterday.
 What you did here, to adapt one abstract visitor interface to another, might be more nicely done with a template convenience defined in Registry.h itself. ... because one can easily foresee much repetition of the pattern I would use `final` not `override` for these three functions All of which are defined below.  So, why a registry?  Do you anticipate more, and scattered add-on cases?
 That you for figuring out and reapplying the Registry system.

How would you rate your first experience?

- [ ] 😑 
- [ ] 🙄 
- [ ] 🥱 
- [ ] 🤯 
- [ ] 🤩 
- [ ] 🤮  The files-changed count looks less frightening to me now
 Good riddance As we mentioned today -- moving ALL of the persistency code into the green, if my other PRs for track subclasses are merged too.  Good milestone. I didn't see yet what happens to src/Snap.*

In a branch that I haven't shared yet, I made it the home of the new attached object, I moved the functions that draw yellow lines out into TrackArt.cpp, and I moved them to lib-time-frequency-selection

I also found a way to break dependency of ProjectSelectionManager on WaveTrack, and then I moved that too into lib-time-frequency-selection
 Good for you, I should do more like it
 A CMake long comment, please, as with other libraries
 We should just nuke this file and the other listener too
 Document the assertion with a @pre comment here I think it is wrong to delete this.  Instead change it to modify the ProjectRate object. Likewise here set ProjectRate Does As_SetRate become unused at this commit? Is that function unused now? Was all this per project persistency of signatures stipulated in design explicitly?  If not, be sure there is agreement Unless you agree to put it into an existing library not a new one Comment is wrong The second commit in the sequence breaks the build with this line, and the build is fixed but wrongly, at ""SelectionBarListener no longer controls snapping"", by deleting the line.
 Answer, no, but still the function just calls through to `ProjectRate::Get( project ).SetRate( rate );` and there is no need I see for that extra level of abstraction around it in the remaining place.
 I'm sure it's wrong -- the command parameter has no effect now
 When I build the commit that introduces this Button on my MacBook, the button fails to display and I don't know why.  There is just a blank space on the toolbar below the title.
 Ah, the commit comment mentions that visuals aren't all correct yet.

I didn't see the second line.  You know my habit of adding ellipsis... to the first line of a commit comment to direct the reviewer not to skip more explanation.  I recommend it
 I also observed at that commit that if you drag the toobar off the dock, it does not give you a resizer grip at the corner as other toolbars do.
"
4473,2023-03-30T10:32:56Z,2023-03-31T02:29:19Z,Paul-Licameli,0,0,3,129,3,1,1,[],,1,57387.0,0,0,0,0,45812070.975598,,0,3,1,False,[],,,"Resolves: #4421 
Resolves: #4423

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4352,2023-02-23T01:12:50Z,2023-03-29T12:25:56Z,SteveDaulton,5,3,1,36,3,2,1,['plugins'],31861.0,1,2997657.0,0,0,0,0,45929409.296147,,0,1,1,False,"['SteveDaulton', 'petersampsonaudacity', 'dozzzzer']","Testing on W10 with @SteveDaulton 's branch build: audacity-win-3.3.0-alpha-20230223+9066b72-x64

The **Shelf Filter** appears in the Effects menu - _**BUT**_ it appears in the below the line section and _**not**_ in the **EQ and Filters** section of the Effect menu _(which is where the High Pass and Low Pass filters properly reside)_:
![image](https://user-images.githubusercontent.com/50205984/220876143-e43a92da-5da9-4e1a-a1bb-9d661eb1c2f0.png)
 > _**BUT**_ it appears in the below the line section and _**not**_ in the **EQ and Filters**

In your `EffectsMenuDefaults.xml` file, you need to add `<Effect>Shelf Filter</Effect>` to whichever `<Group>` you want the effect to appear in.

When I built from source, the `EffectsMenuDefaults.xml` file was NOT copied into the build folder, so I'm guessing that menu sorting is a work  in progress, probably with a view to making it user configurable. The `EffectsMenuDefaults.xml` file was recently moved from `presets/EQDefaultCurves.xml` to `resources/EQDefaultCurves.xml`, which may be why it wasn't copied using the build steps given in `BUILDING.md`, but I'm only guessing what the development team are intending.

I agree that the `EQ and Filters` group would be a logical place to put this effect in the default grouping. > which may be why it wasn't copied using the build steps given in `BUILDING.md`,

I've asked Dmitry about this. He said: _""I think it is only copied on install""_

I've not set a default menu group - as it says in the pull request template: `There are no behavior changes unnecessary for the stated purpose of the PR`. Tested on Windows and macOS I have pre-prepared the documentation for this - including the zebra-table on the EGATs page in the Manual.

Once this gets pulled all I need to do is switch to the new Zebra-table",,"Resolves: *Absence of a shelf filter in Audacity*

*Audacity has High-pass, Low-pass, and a Notch filter, but notable by its absence there is no shelf filter. This pull requests adds the missing filter. The filter can be set for High-shelf or Low-shelf.*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this line correct? I'm not sure which line you are referring to, but lines 5 to 8 look fine.

The ""release"" version number refers to the plugin, not to the version of Audacity. It doesn't really matter what number is used so long as each subsequent update is higher than the previous. All of my plugins use the earliest Audacity version that I tested the plugin with as the initial ""release"" number, and then increments from that point. (I wrote Shelf Filter to be compatible with Audacity 2.4.0 and later). If there's any change to the plugin, the ""release"" number should be bumped. I meant line 8 and this satisfies me.
"
4347,2023-02-22T14:09:02Z,2023-03-29T13:51:11Z,SteveDaulton,0,0,1,24,24,1,1,['plugins'],,0,3034940.0,0,0,0,0,45931956.453757,,0,1,1,False,[],,,"Resolves: Obsolete headers in shipped plugins

*When the ""?"" help button was removed from effects, the "";manpage"" header became obsolete clutter.*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4354,2023-02-23T15:54:10Z,2023-03-29T13:55:00Z,SteveDaulton,2,0,1,2,1,1,1,[],7470.0,0,2942148.0,0,0,0,0,45932042.769598,,0,1,0,False,['SteveDaulton'],"I'm closing this for now as I'm not convinced that Sensitivity settings below 1.0 are useful.
If anyone is interested in testing, I'd be interested to hear if anyone can provide a test case where Sensitivity < 1.0 is useful. After more extensive testing, I've found that while Sensitivity values in the range 3 to 6 tend to be best in most cases, there are some situations where very low values (even as low as 0.01) can produce better, less damaging results.
A Sensitivity setting of zero is always a waste of time as it causes the effect to do nothing.

I'm therefore reopening this pull request.",,"When 'Sensitivity' is zero, the effect is unexpectedly a no-op. The solution is to limit the Sensitivity slider to a range that works. As the widget has (very reasonably) 2 decimal places, and a Sensitivity value of 0.01 has a very subtle effect, 0.01 is a good choice as the minimum Sensitivity.

Resolves: #4201 (https://github.com/audacity/audacity/issues/4201)*

*Set minimum Sensitivity to 0.01*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4437,2023-03-22T10:27:42Z,2023-03-29T13:51:37Z,Paul-Licameli,1,0,2,50,2,1,1,[],197250.0,3,617043.0,0,0,0,0,45943938.274676,,0,2,1,False,['dozzzzer'],"Testing this PR shows that:
- #4411 remains not fixed
- A part of #4412 - lack of 128th notes - is now fixed
- #4421 is partially fixed (see the comment on the issue page)I'm not a fan of c-casts in the first commit. I would much prefer `double(mTimeSigLower)` or `static_cast<double>(mTimeSigLower)`. I don't see it as a blocker though",I'm not a fan of c-casts in the first commit. I would much prefer `double(mTimeSigLower)` or `static_cast<double>(mTimeSigLower)`. I don't see it as a blocker though,"Resolves: #4411 (partially)
Resolves: #4412
Resolves: #4421

Various issues in labelling of linear dB scale and beats & measures ruler

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4419,2023-03-16T15:05:56Z,2023-03-24T15:29:05Z,crsib,0,8,3,5247,8,2,1,[],,1,692593.0,0,0,0,0,46370096.917776,,0,3,0,False,[],,,"Resolves: #4381 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","No top-of file banner, which analogous files for version 55 do have, but other versions don't have. 
 I see a mix of ""58"" and ""60"" here which I assume is intended
 But maybe this will surprise a future reader and a bit of comment might help 60 using 58 again, comment ?
 ditto ditto
 Or maybe not? ... maybe this difference of number is just frequent in all the other versions too.  I'm comparing with 55 for instance.
 This files are literally copied, none of the original files has a comment about different versions between avutil and the rest of the libraries. 

The difference between versions is due to the difference inside the FFmpeg itself. I wonder why it is, but I don't quite know :-)"
4443,2023-03-24T13:59:27Z,2023-03-24T14:57:56Z,crsib,0,0,1,15,1,1,1,['Build / CI'],,1,3513.0,0,0,0,0,46371967.924901,,0,1,1,False,[],,,"<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4432,2023-03-20T11:28:05Z,2023-03-24T12:12:52Z,ksoze95,0,2,4,721,16,1,1,[],,0,348292.0,0,0,0,0,46381873.356808,,0,4,1,False,[],,,"Resolves: #4345

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Probably lets `assert` as well, so it fails clearly in Debug? ditto"
4350,2023-02-22T20:00:13Z,2023-03-22T17:04:09Z,Paul-Licameli,1,0,5,669,27,1,1,"['Effects (EGATs)', 'refactoring', 'libraries & modules']",2395985.0,1,2408641.0,0,0,0,0,46537198.754523,,1,5,1,False,['dozzzzer'],"Tested on macOS and WindowsThe only suggestion is to move factory from `VST3EffectBase` to `VST3EffectsModule`, though it's very unlikely that there will be more than one descendant of `VST3EffectBase`","The only suggestion is to move factory from `VST3EffectBase` to `VST3EffectsModule`, though it's very unlikely that there will be more than one descendant of `VST3EffectBase`","Resolves: *(direct link to the issue)*

Depends on
- [x] #4304
- [x] #4395

A toolkit-neutral library for VST3 plugin discovery and effect processing.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4369,2023-02-28T15:07:39Z,2023-03-22T14:40:44Z,Paul-Licameli,2,5,4,135,15,2,1,"['refactoring', 'libraries & modules']",1116841.0,2,1899190.0,0,0,0,0,46545805.994919,,1,4,1,False,"['Ryan-Miller-Audacity', 'Paul-Licameli']","I fixed the mistaken null check, and I have added a comment, justifying the use of a temporary stack allocated Ruler.  Please review again.
 Verified in Build #3709 https://github.com/audacity/audacity/actions/runs/4405381265?pr=4369",,"Resolves: *(direct link to the issue)*

Toolkit-neutral library for TimeTrack

Depends on
- [x] #4393 

QA:  exercise all the time track functionality (display, interaction, persistency, effects on playback)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","One of these checks is redundant, or maybe something is missing here? I see that `Ruler` does some cacheing, wouldn't it be better to make `LinearUpdater` and `Ruler` a member variable of `TimeTrackView`?  Thanks I think I meant `!pList->GetOwner()` I debated this with myself.  But I think this ruler isn't saving any important state and the calculations are not large.  I may change my mind.

 I think I goofed while rebasing onto @micpap25's work and fixing conflicts
"
4413,2023-03-14T19:30:34Z,2023-03-22T13:16:23Z,Kirktopode,4,0,1,6,1,1,1,[],41757.0,0,668749.0,0,0,0,0,46550874.242577,,0,1,0,False,['petersampsonaudacity'],"> It appears that at some point, an additional time format was added ...

Ah that would be the new **seconds + milliseconds**  -  this was intended for 3.3.0, but somehow inadvertently slipped into 3.2.5 Testing on W11 with @Kirktopode 's branch build:  audacity-win-3.3.0-alpha-20230315+3deb3e7-x64

This branch build fixes the issue with the default time formats for the Selection and the Generators restored to **hh:mm:ss + milliseconds** > A PR even I understand :)

Indeed yes, so maybe that could be reviewer and if OK pulled into main

 **fix default time format and TimeAndSampleFormat index** #4413  It is possible that this issue is related to:

 **Reset Configuration does not use the proper time format for the Time toolbar** #4426 A PR even I understand :) ",A PR even I understand :) ,"Resolves: #4408

It appears that at some point, an additional time format was added before the default time format (hh:mm:ss - milliseconds), without updating places where the index of the hh:mm:ss - milliseconds format is used. I updated the references to this index and to the index for TimeAndSampleFormat referenced in NumericConverter.cpp.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4395,2023-03-07T18:20:52Z,2023-03-21T16:12:39Z,Paul-Licameli,3,0,3,102,4,1,1,[],273231.0,2,1207844.0,0,0,0,0,46620763.601913,,2,3,1,False,"['dozzzzer', 'petersampsonaudacity', 'Paul-Licameli']","Rebased without change onto recent master
 Tested. 

- Playback works as expected
- Recording (incl. Punch and Roll rec.) works as expected too
- Monitoring (click in the output meter), play-at-speed button, and scrubbing show now issues too Tested o W10 with latest alpha - using @Paul-Licameli 's recommended tests - all seems OK",,"Resolves: *(direct link to the issue)*

Redo the fix at 6a6b6d41961e24dd493aed8a621367088d4f0f72 with new template conveniences that simplify it, and will simplify many repetitions of the pattern to come in more refactoring.

QA: test starting and stopping of playback, recording (including punch-and-roll), monitoring (click in the output meter), play-at-speed button, scrubbing

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4425,2023-03-19T05:13:11Z,2023-03-20T09:47:07Z,Integral-Tech,0,0,4,698,1,1,1,[],,0,102836.0,0,0,0,0,46736234.957621,,0,4,0,False,[],,,"Update zh-CN translation
Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4409,2023-03-13T21:06:04Z,2023-03-20T09:46:00Z,Gootector,0,0,1,18,1,1,1,[],,0,563997.0,0,0,0,0,46736303.179919,,0,1,0,False,[],,,"Update German from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4266,2023-02-03T16:34:00Z,2023-03-20T09:44:45Z,Leaumonte,2,3,7,202,1,3,1,[],847476.0,0,3863446.0,0,0,0,0,46736380.667236,,0,7,0,False,"['crsib', 'Leaumonte']","Something got wrong

```
fr.po:70: number of format specifications in 'msgid' and 'msgstr' does not match
``` > 

Sorry I didn't run the job check, only a local check...

It's done now 

https://github.com/Leaumonte/audacity/actions/runs/4165786772

I fix the two issues in locale/fr.po

> Something got wrong
> 
> ```
> fr.po:70: number of format specifications in 'msgid' and 'msgstr' does not match
> ```

",,"Resolves: Some untranslated messages, fix or update of messages

To translate the new amazing features for real time effect for French people, like me ;-)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior => only the last commit compiles sorry
","I wonder why this got empty :-) Because the guys that receive this email, doesn't speak french ;-) Well, we can use Google Translate. 

On top of that - Crash Reporter sends out a binary with a stack trace, no user input is allowed"
4394,2023-03-07T13:46:22Z,2023-03-16T15:37:52Z,Paul-Licameli,7,0,13,627,32,1,1,[],590666.0,2,784294.0,0,0,0,0,47060792.908942,,1,13,1,False,"['Paul-Licameli', 'micpap25', 'dozzzzer']","@Paul-Licameli 
Re-opening: the current implementation of the beats denotation is not as per design: the second beat of a bar is .1, the third is .2, the third is denoted as .3:
<img width=""450"" alt=""image"" src=""https://user-images.githubusercontent.com/70063970/224963008-02568586-f342-4af8-8733-cdea3895d30c.png"">

While actually, it should be shifted one digit forwards, i.e. _.2, .3, .4_, which is how any DAW would have it:

<img width=""235"" alt=""image"" src=""https://user-images.githubusercontent.com/70063970/224962586-3013755d-099f-4b8d-8e2e-b683b109160a.png"">

Take a look at the specs:
<img width=""500"" alt=""image"" src=""https://user-images.githubusercontent.com/70063970/224961137-d87fac97-7f8a-47a7-8d5b-b9671aef092b.png"">

While the **desired state** is what should've been implemented, I'm seeing beats denotation as shown in the **current implementation** of the screenshot.
 @micpap25 see previous comment
 @dozzzzer Are you certain you used the newest version? It is working correctly on my machine.  @micpap25 I used the build from[ this job](https://github.com/audacity/audacity/actions/runs/4394381938), as per @Paul-Licameli 's request I now see that the branch has been updated and the new build doesn't have this problem anymore. Moving back to In QA. Some inaccuracies in zoom levels were found: https://github.com/audacity/audacity/issues/4412
@Paul-Licameli @micpap25  A new enhancement regarding validation of the BPM and  Upper Time Signature values: https://github.com/audacity/audacity/issues/4418",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4334,2023-02-19T20:07:35Z,2023-03-15T15:01:12Z,Paul-Licameli,7,7,6,1653,288,2,2,"['refactoring', 'libraries & modules']",160136.0,2,2055223.0,1,0,0,0,47149393.539476,,1,6,1,False,"['crsib', 'Paul-Licameli']","The dependency #4313 required rebasing onto recent master and conflict resolution in `#include` directives, and then this one did too, onto that rebasing.
 And rebased again.
 Sorry guys, I made mistakes rebasing this one, and did not clean up the intermediate commits correctly.  Expect another force push and I will invite review again.
 Rebased onto recent master and resolved conflicts
 A difficult conflict resolution with e892cea70e50e24dd168a6c13966b4a007761bca

Review again, see new inserted commit
 The branch requires conflict resolution now I have rebased and resolved conflicts with the vertial ruler project.  Just a lot of `#include` lines and the list of files in src/CMakeLists.txt.
",,"Resolves: #3482 
Resolves: #3492 


Extract libraries that are not toolkit neutral but encapsulate what is behind the BasicUI facade and will need corresponding reimplementation against Qt

QA:
- [ ] Test the file picker message box, including on Linux; test the error dialogs when opening non-existent file, confirmation when overwriting a file on save
- [x] Test screen readers on Windows 
- [x] Test text entry dialog, such as when making a new label with the Edit > Labels > Edit Labels... dialog
- [x] Test controls of different kinds in any effect dialog
- [x] Test some progress dialogs
- [x] Test the plugin registaration dialog
- [x] Test the Log window (Help menu)
- [x] Test the Error dialog -- as with the alpha-only crash-me buttons in Help menu

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Not sure that I understand what this is for Ah, so this was indeed committed by mistake. I guess that this change should be squashed lib-foo is still with us? I think we need lib-bar to, so it doesn't feel lonely xD And now it's gone :-) This diff shouldn't be there Is it expected? Here it is removed, but would be better to squash as we always do"
4343,2023-02-21T14:43:01Z,2023-03-15T08:31:59Z,ksoze95,0,0,2,1501,34,1,1,[],,0,1878723.0,1,0,0,0,47172569.602434,,0,2,0,False,[],"I think that on C++ side we should maintain the ""code style"" common to Audacity: that's it ""CamelCase"", not ""camelCase"".

Otherwise everything looks just fine","I think that on C++ side we should maintain the ""code style"" common to Audacity: that's it ""CamelCase"", not ""camelCase"".

Otherwise everything looks just fine","Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4393,2023-03-07T02:49:25Z,2023-03-10T12:28:15Z,Paul-Licameli,1,0,27,4039,53,1,1,[],293178.0,1,325342.0,0,0,0,0,47559168.890158,,2,27,1,False,['dozzzzer'],Tested,,"Resolves: #2683

Part of the GSOC 2022 project.  Refactoring of ruler formatting code to support more cases; a new vertical waveform scale showing non-uniformly spaced dB values.

QA:  If the new feature is sound but details of spacing and numbering and formatting are imperfect, then open issues but do not block merge of this.

However what should prevent merge is detection of any unintended changes of behavior of the ruler code elsewhere, such as when windows resize, or when scale types change from linear to log for rulers supporting that.  The exhaustive list of those places:

- [x] Horizontal timeline
- [x] Frequency analysis window (horizontal and vertical)
- [x] File > Print draws a timeline
- [x] Vertical and horizontal rulers of Time track
- [x] Horizontal and vertical rulers in Compressor effect dialog
- [x] Horizontal and vertical rulers of Curve EQ
- [x] Horizontal and vertical rulers of Classic Filters effect
- [x] Vertical ruler of MIDI track (just check the sizing)
- [x] Spectrogram vertical ruler, with various scale choices
- [x] Waveform vertical ruler (of course) with the old scale choices
- [x] Meters in Mixer board and meter toolbars

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4329,2023-02-18T07:16:54Z,2023-03-09T11:37:26Z,mashinsp,0,0,1,2,1,1,1,[],,0,1657233.0,0,0,0,0,47680031.031846,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4357,2023-02-25T12:11:22Z,2023-03-09T11:01:17Z,terrytw,0,0,1,2015,1,1,1,[],,0,1032596.0,0,0,0,0,47682202.216395,,0,1,0,False,[],,,"Updated zh-CN translation

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4392,2023-03-06T19:21:45Z,2023-03-09T10:59:37Z,pafri,0,0,1,2777,1,1,1,[],,0,229073.0,0,0,0,0,47682304.359103,,0,1,0,False,[],,,"Czech localization file update of Audacity. Improving my previous work.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4203,2023-01-18T11:09:08Z,2023-03-09T10:58:12Z,DavidBailes,0,0,1,44,4,1,1,[],,1,4319345.0,0,0,0,0,47682391.436758,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3482
Resolves: https://github.com/audacity/audacity/issues/3492

Problem: The state of the power toggle buttons in realtime effects dialogs are not accessible for users of screen readers.

Fix: A wxBitmapButton was previously used for the power toggle button. However it's not possible to imitate a toggle button for all the Windows screen readers using this control. So use an AButton instead. This is already used for the power buttons in the realtime effects panel, and has already been made to imitate a toggle button for all Windows screen readers.

Notes:
- Using an AButton means that it probably won't be easily possible to assign an access key to this button. But this is a minor issue compared to the state of the button not being accessible.
- The accessibility name of the toggle button was changed from Enable to Power to make it consistent with the power toggle buttons in the realtime effects panel.
- In EffectUIHost::InitializeInstance(), a line updating the state of the toggle button was removed, as it was immediately prior to a call to UpdateControls() which updates the state of the toggle button.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4385,2023-03-03T17:36:35Z,2023-03-08T14:14:53Z,Paul-Licameli,1,0,10,562,36,1,1,"['refactoring', 'libraries & modules']",417068.0,2,419903.0,0,0,0,0,47756988.701125,,1,10,1,False,['dozzzzer'],"Tested on Windows and macOSPlease, fix the Linux build first!","Please, fix the Linux build first!","Resolves: *(direct link to the issue)*

Almost no code moved into libraries, but reorganizations so that the graph of the present libraries makes more sense.

- Files removed from lib-screen-geometry, which becomes a leaf like lib-utility, not even using wxBase
- New higher level lib-time-frequency-selection can be the future home of snapping logic
- Invert former dependencies of lib-project-histories on track lists and time selection
- Move MixAndRender up the graph into lib-effects, so lib-wavetrack doesn't use lib-realtime-effects
- Remove an extra arc from the diagram and make some third party library dependencies private
- The one movement of code into libraries: serializers for realtime effect stacks are now in lib-effects (and comments there about indepencence of lib-wave-track and lib-realtime-effects are correct now)

QA:
- [x] Test undo/redo of track changes (including abandonment of redo items) also with attention to behavior of time and spectral selection
- [x] Check mix-and-render
- [x] Check persistency of effect stacks
- [x] Hit-testing of clip drags bars; clip left and right edges; samples (in the pencil tool mode)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4304,2023-02-11T11:28:29Z,2023-03-06T15:33:41Z,Paul-Licameli,2,0,4,301,56,1,1,"['Effects (EGATs)', 'libraries & modules']",1302383.0,2,2001919.0,0,0,0,0,47925061.211232,,0,4,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased these four new commits onto the bug-fixed #4313, and fixed an error in the third commit.
 Tested on Windows 11 & macOS Ventura",,"Resolves: *(direct link to the issue)*

A library for the ui-less part of effect processing

QA:  test some effects.
- [x] Do destructive application of built-in effects
- [x] Do rendering of built-in effects -- both with stackable, and with macros (wider choice available)
- [x] test at least one error message box, such as trying EQ on two tracks with different sample rates
- [x] Get progress dialogs on long tracks, and cancel

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4171,2023-01-11T14:04:21Z,2023-03-03T19:02:30Z,vsverchinsky,5,28,17,3016,18,2,1,[],1141819.0,0,4424605.0,1,0,0,0,48171426.524072,,0,17,0,False,"['petersampsonaudacity', 'vsverchinsky', 'Paul-Licameli']","I have finished a round of review.

The Windows builds are still failing, so you must fix that.

The question above about `SetTrack` and `ResetTrack` are the only unresolved doubt I have.

Otherwise all else is just suggestion and so this is *almost* approved.
 The windows build failure is because of a duplicate symbol:

```
wxmsw31u_core.lib(wxmsw313u_core_vc_custom.dll) : error LNK2005: ""public: virtual __thiscall wxNavigationEnabled<class wxWindow>::~wxNavigationEnabled<class wxWindow>(void)"" (??1?$wxNavigationEnabled@VwxWindow@@@@UAE@XZ) already defined in ListNavigationPanel.obj
```

... which I think you can fix just with one more `extern template` declaration at the second commit.
 Branch was rebased and few new commits were added, starting from [Effects preferences strings change](https://github.com/audacity/audacity/pull/4171/commits/537cecaaeac188f2d514e73ecd12394d9dde180e) Testing on W11 with @vsverchinsky  Vitaly's latest branch build: audacity-win-3.3.0-alpha-20230303+0edee49-x64

I note that the default setttings for the **Effect Menu** and the **Realtime effects** are different.   Is this intentional, by design, or are they supposed to be the same by default?

The functionality of setting various options seems to work, though I have very few additional plugins, just VST and VST3 versions of iZotope Vinyl.

I do like that you can now acess the **Plugin Manager** from this prefs pane.

And I also like the nomenclature change from **Default** to **Category** in the display options list.

_I have added a P1 to the Manual for when this gets pulled into master - but I won't be able to do this over the next 8 days or so as I'm off-grid skiing away from t'interweb mostly._

![image](https://user-images.githubusercontent.com/50205984/222758826-0d06fc71-01cc-4e3a-8137-8ace62f66ff6.png)

 > I note that the default setttings for the Effect Menu and the Realtime effects are different. Is this intentional, by design, or are they supposed to be the same by default?

Yes, they are different by designThere are link failues on Windows to fix before merge, and there are conflicts in PluginMenus.cpp to resolve in rebasing

","There are link failues on Windows to fix before merge, and there are conflicts in PluginMenus.cpp to resolve in rebasing

","Resolves: #3866

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If I wrote this, I would do the extra work to define a .cpp file, so that (1) at least one .cpp file in the system includes the header file before any other, guaranteeing that the header is self-sufficient for compilation; and (2) making out-of-line functions doing most of the work that doesn't depend on the template type parameter, leaving only small template functions in the header to be inlined.

See for instance Observer, which separates an out-of-line, ""type erased"" part.

I don't insist that you follow the suggestion for this PR.
 It would also make sense to put this file in src/wrappers.  The class resembles `wxPanelWrapper` for instance.  But I don't insist.  Library extractions might soon upset the folder organization anyway.  Although a library for src/wrappers would definitely be a non-toolkit-neutral part of the program until we figure out better abstractions.
 Ditto, suggestion about folder placement.  I don't insist.
 And this file.

But whatever the folders they are in,  it is good to see RealtimeEffectPanel shrink to its essentials.
 This comment got lost in the cut and paste.
 And if restored, it should also be more complete, describing what the event handlers accomplish.
 Do all these #include directives compile on all platforms?  I thought ../ would be needed in some of them.
 Maybe a more suggestive name?  PluginMenuBuilder?
 Not reachable with default Experimental.cmake but it's good you noticed it
 I see one use of Save() not followed by the publication, and that is in `PluginManager::InitializePlugins()`.  Is that right or wrong?
 Not wrong, I see, because the only subscriber is RealtimeEffectListWindow which cannot possibly be constructed earlier than that initialization.
 ""its"" not it's
 The constructor makes subscriptions.

`ResetTrack()` destroys both subscriptions.

`SetTrack()` restores the old subscription to non-null, but not the new one.

Is that right or wrong?

 I am glad to see you figured out the usage of MenuVisitor!  I hope it did not seem unnecessarily difficult.  If you gained some more understanding of Registry.h and Registry.cpp that is good -- they need some re-work which will need careful review by someone.

 This repeated lambda might be a local variable defined once
 I checked the function again to see what these two {}s are -- and I discovered, `realFlags` is passed around among many functions in MenuHelper.cpp but never used!

I don't know where in source code history it became unused -- but you have an opportunity to simplify with one more commit.
 I believe so, yes. If I remember correctly `src` folder is added to include directories somewhere in cmake It used to provide macros menu helpers too. And it doesn't build menus `mPluginsChangedSubscription.Reset()` shouldn't be here, thanks! Had to spend some time to figure out how it works, yes :) Yep Tracked it down to c3db93c . I guess that was removed intentionally. You made the suggested simplification to remove duplication.

Amusingly:  you could even simplify this more to:

```
      static auto realtimeEffectPredicate = &PluginDescriptor::IsEffectRealtime;
```

The implicit constructor of `std::function` used when you call `MenuHelper::PopulateEffectsMenu` works even when the template parameter is of type pointer-to-member-function.
 The definition of `IsRealtimeNotActiveFlag` is in this file.  It becomes unused, so may be deleted too.
 Maybe you could use composition instead of inheritance:  a member of a type inheriting PrefsListener.  Then you would not need to play with type traits to pass through to the base.  Instead UpdatePrefs is directly invoked directly on this member and on the base class to do different unrelated things that can happen in either sequence.
 This variable is not longer used, so remove it too
 A wise comment.  I like it that you are aware of dependencies you add.

But I checked that this does not add a dependency cycle.

True, it may still be an undesirable dependency, but we can figure out some trick to break it if we need that later.
 ... or maybe, even without composition, all you need is:
```
if constexpr(std::is_base_of_v<PrefsListener, WindowBase>)
   WindowBase::UpdatePrefs();
```"
4365,2023-02-28T04:05:56Z,2023-03-02T15:37:22Z,Paul-Licameli,4,0,7,675,19,2,2,"['refactoring', 'dependency breaking', 'import-export']",28341.0,2,214291.0,0,0,0,0,48270447.849778,,0,7,1,True,"['Ryan-Miller-Audacity', 'Paul-Licameli']","I had expected @vsverchinsky to review this, or perhaps he already did mostly as part of #4336
 Rebased onto more recent master.  No conflicts, no changes.
 Confirmed on both windows and Mac. Some dependency breaking before other import and export refactoring into modules
I'm not sure if we need MP3 panel, but let's keep the behavior for now","I'm not sure if we need MP3 panel, but let's keep the behavior for now","Resolves: *(direct link to the issue)*

Some dependency breaking before other import and export refactoring into modules

QA:  Test that all works as before in the Libraries page of the Preferences dialog.

Verify that the error message shows as before, when you try to import a file type that requires FFmpeg, but that is not installed on the system.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4375,2023-03-01T10:43:31Z,2023-03-01T13:56:30Z,crsib,0,3,1,4,1,2,1,[],,1,11585.0,0,0,0,0,48362901.245096,,0,1,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Simple enough, but then, delete the comment that precedes. Hmm, one sec Force pushed without a comment"
4313,2023-02-14T23:31:20Z,2023-02-28T17:55:50Z,Paul-Licameli,12,10,10,3939,79,2,2,"['refactoring', 'libraries & modules']",58126.0,2,1189474.0,0,0,0,0,48434945.936537,,1,10,1,False,"['dozzzzer', 'crsib', 'Paul-Licameli']","Now that you have reviewed it, do you think there is applicability to export?  You may need to define something similar.

But maybe you will define something better and it can replace this and be reused.

If you examined WrappedType -- essentially it's just a variant.
 I've refreshed my memory and I don't think I understand how exactly WrappedType is a variant. See to this old commit where I renamed ShuttleParams as SettingsVisitor 35456c6aee9d9b75c36f406aa933c1920272eb84 and also later I split the const and non-const visitors.

SettingsVisitor and ConstSettingsVisitor are mentioned as forward declarations only in lib-components, but this suggests that those classes should also be separated to another file that goes into that existing library.  This split of the file does not make dependency on ""Shuttle.""

This would be more satisfactory.

So I think I have a lot of good redrafting to do here.
 Actually now, rather than split Shuttle.cpp, I think I'll just move it down to lib-components
 @vsverchinsky please review again.

I changed my mind about some things and didn't always do what you or I wrote above.

I just eliminate class Shuttle and define its only subclass ShuttlePrefs without virtual functions.  This class is used only in ShuttleGui, but really should be considered a doomed class -- I have another monster branch of some ShuttleGui rewrites that eliminates it.

I don't try to fix the naming of classes after all.

 Rebased onto recent master just to resolve small conflicts.
 Rebased again onto recent master with some conflict resolution;  make sure not to lose the recent addition of seconds + ms time format
 Rebased again to resolve minor conflicts.
 Testing this PR revealed that:

- The Time toolbar UI is broken in the macOS and Windows builds:

Windows: 
<img width=""267"" alt=""image"" src=""https://user-images.githubusercontent.com/70063970/220639982-657e8ddf-20f8-4f89-869b-014f59f03e19.png"">
macOS: 
<img width=""243"" alt=""image"" src=""https://user-images.githubusercontent.com/70063970/220640186-88c6ac66-a2fd-4141-a1c9-839f4d4f52e9.png"">

- Selection toolbar works just fine, also when changing time formats
- Spectral Selection toolbar also shows no issues
- All dialogs look fine, compared to master build

 I added a commit to fix the problem @dozzzzer reported.
 Verified on macOS Ventura and Windows 11 > I've refreshed my memory and I don't think I understand how exactly WrappedType is a variant.

It's like a variant anyway.  It has one field that is like a discriminator for a union, though it does not literally use a `unioin` for the other members.  It's a single type that really holds some piece belonging to one of a short, closed-ended list of other types.  It also provides operators to interconvert whatever it is holding to any of the other types.
Artificial dependency on `lib-preferences` could be removed by further splitting `lib-command-parameters` into `lib-shuttle` and `lib-command-parameters`, and moving `ShuttlePrefs` class definition to `lib-preferences` I still think that dependency on `lib-preferences` is quite odd, but if you're telling that `ShuttlePrefs` is to be removed I have no objections then","Artificial dependency on `lib-preferences` could be removed by further splitting `lib-command-parameters` into `lib-shuttle` and `lib-command-parameters`, and moving `ShuttlePrefs` class definition to `lib-preferences` I still think that dependency on `lib-preferences` is quite odd, but if you're telling that `ShuttlePrefs` is to be removed I have no objections then","Resolves: *(direct link to the issue)*

Two toolkit-neutral libraries that a later toolkit neutral lib-effects will depend on.

One for visiting effect or command parameters, which the macro system uses.

Another for the small language used by NumericTextCtrl for number formats, and for the
per-project format preferences.

QA:  Opening and using controls of almost any plain dialog in Audacity will sanity check this.

Also, check the working of changes of time format displays in the selection bar.  (And perhaps also frequency format changes in the spectral selection toolbar which is hidden by default.)

Also verify that the recently added seconds + milliseconds time format still works

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This forward declaration is not used and could be removed This library could become `lib-shuttle` not depending on  a `lib-preferences`. `lib-preferences` instead could depend on `lib-shuttle` and contain a `ShuttlePrefs` `lib-command-parameters` could contain only these two files and depend on `lib-shuttle` What was the motivation of this change? The only consequence I see is that after extraction you have to make sure not to violate `mBoxes.size() == mDigits.size()` invariant `lib-command-parameters` is the name of the new library.

I think I like this suggestion of a dependency inversion, though it is not needed for the present purpose of getting a `lib-effects`.

I will do this!

 I see, there is no `lib-shuttle` yet but you think and even finer library subdivision is justified.
 I don't like the term ""Shuttle"" and I think ""ParameterVisitor"" would be more descriptive.
 `wxRect` is a class not available when there is dependency on `wxBase` so for that reason alone I had to do something to get toolkit neutrality.  Besides, the NumericConverter object should only deal with conversions between numbers and strings of digits, and not involve geometry.
 If libraries should be multiplied this way, I would name them `lib-effect-parameters` depending on `lib-command-parameters`.  Effects are a special case of commands, from the point of view of macro programming.
 Dependency on `lib-preferences` still remain"
4217,2023-01-20T21:29:33Z,2023-02-28T14:22:18Z,Paul-Licameli,3,0,6,269,24,1,2,"['refactoring', 'libraries & modules']",1971840.0,2,3343970.0,0,0,0,0,48447759.209202,,0,6,1,False,['Paul-Licameli'],"Force-pushed to rebase onto update extract-lib-wave-track on which it depends Rebased onto recent master and resolved minor conflicts Rebased after merging #4366 which made a conflict for this (it also did PIC for sqlite but only conditionally on the platform; just removed that commit).

Reminding @crsib that the last commit is new since first round of review, to fix a bug @Ryan-Miller-Audacity found.  The rest are unchanged.  The new commit needs review but it is short and should be easy.
",,"Resolves: #1134 

Toolkit neutral library handling all project file persistency and encapsulating all
usage of SQLite

QA:  test saving and loading of files.  Observe progress indicator when saving a large project behaves as before.  Observe that the title of the window changes (or does not change) to match the saved (or saved-as) project name, correctly and as before.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4366,2023-02-28T04:36:40Z,2023-02-28T11:53:21Z,Paul-Licameli,2,0,1,52,7,1,1,['Build / CI'],26064.0,1,26206.0,0,0,0,0,48456698.455029,,0,1,1,False,"['crsib', 'Paul-Licameli']",Should this skip QA? I think so,,"... so that they can be linked into MODULE type libraries, when later we make extractions.

But following the example of 824ffe95, just do it for all platforms, though not needed to make modules on macOS or Windows.

(Also improve some CMake code to assign, not append list variables so that they aren't contaminated by the calling environment.)

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4362,2023-02-27T08:58:41Z,2023-02-27T09:54:11Z,crsib,0,0,1,12,2,1,1,['Build / CI'],,1,3335.0,0,0,0,0,48550250.588018,,0,1,1,False,[],,,"Re: #4360

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4222,2023-01-23T00:35:38Z,2023-02-22T01:16:20Z,Paul-Licameli,3,0,4,370,54,1,1,"['refactoring', 'libraries & modules']",1936905.0,2,2594446.0,0,0,0,0,49013324.851777,,1,4,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased without changes onto more recent master.
 Tested on macOS Ventura and Windows 11 Rebased and resolved minor conflicts before merging, but I'm waiting for the present CI problems to be cleared.  The previous merge into master has not built successfully yet.
",,"Resolves: *(direct link to the issue)*
Includes all commits of #4211 which awaits QA approval and merge

This is another step in unblocking the extraction of a toolkit neutral
library for destructive effect application and the registry of effects.

A library for changes in binary selection states of tracks in a project,
and for project sync-lock state and the sync-lock grouping logic.

TrackFocus would make sense as a part of this too, but more untangling
work must be done first before that can be toolkit-neutral, not dependent
on wxWidgets' interface for accessibility.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4033,2022-12-07T10:42:54Z,2023-02-20T19:20:51Z,vsverchinsky,14,19,7,551,10,3,2,[],8630.0,0,6586303.0,1,0,0,0,49045834.720753,,0,7,0,False,"['petersampsonaudacity', 'JohnColket', 'DavidBailes', 'LWinterberg', 'vsverchinsky', 'Paul-Licameli']","Tested this on W10 with @vsverchinsky vVitaly's latest branch build:  audacity-win-3.3.0-alpha-20221206+9c91e83-x64-msvc2022
This works fine when you copy a clip from one project to another
![image](https://user-images.githubusercontent.com/50205984/206185599-6cb5beb9-e3d5-4762-a70e-4d772c11f0f9.png)

a) but can we **_please_** also have this dialog and option when copying clips within a project thereby helping to avoid the over-bloated projects that may users have complained about.

b) It is unclear to me whether or not the user's choice for ""**Selected only**"" or ""**Whole**"" is sticky and retained/remembered if they have ticked the ""**Don't show me this again**"" check-box.

c) if the user has checked the ""**Don't show me this again**"" check-box - then there appears to be no way for the user to set this dialog to be displayed again (except with a **Tools > reset Configuration** which may be way more drastic than the user requires).
_There appears to be no preference setting or command to control the display/hiding pf this dialog_

Flagging both these as UX/design issues to @LWinterberg @Tantacrul @DilsonsPickles 
 ### UPDATE

The message looks good - but the copy fails to work

If I copy a short selection to another project with this build choosing ""Selected only""

a) the length of the selection is OK for the copy

b) no audio is copied - just a selection 

![image](https://user-images.githubusercontent.com/50205984/206187822-1da8ac2c-50c7-4f2f-9a8e-5c7f94148b62.png)

The Copy works fine if I choose the ""**Whole**"" option
 > a) but can we please also have this dialog and option when copying clips within a project thereby helping to avoid the over-bloated projects that may users have complained about.

If you copy within a project, a ""shallow copy"" is created. The copy is still referencing the same data as the original, just displaying it a second time. Making a ""deep copy"" would actually duplicate the data and bloat the project. 

 There are some issues for users of screen readers:
1. Concerning the text for the radio buttons using both in preferences and the dialog. For each of the radio buttons, there needs to be a full stop at the end of the first line, otherwise screen readers read it without a pause between the end of the first line and the start of the second. eg it should be:
Selected audio only.
Only the selected portion of the source clip will be pasted.

2. In preferences, the text ""Paste audio from other Audacity project as"" is not automatically read by screen readers. My suggestion is to have this text as the text used by StartStatic (ie the group box), replacing Pasted audio. It will then be read by screen readers.

3. In the dialog box, the two radio buttons and text box need access keys, eg, m, S and R. 

4. In preferences, the three new radio buttons need access keys, eg, a, c, and k. Testing on W10- with @vsverchinsky Vitaly's latest branch build for this:   

a)  the copy properly honor's the user's request to either copy the whole smart clip ot just the selection

b) the displayed data size does _**not**_ change when toggling between the two copy forms - I would expect the smart clip data size to be much larger than the simple selection size.

c) the ""**don't ask each time**"" and the ""**ask each time**"" settings work as intended when used fro either the copy dialog or Tracks Behaviors preferences 

d) if Ask every time is ""on"" then the copy dialog properly remembers the users last-used choice for the copy.

e) I note that the default is to set to copy the whole smart clip - is that intentional?

f) At default settings the dialog for Tracks Behaviors preferences is now not quite long enough for the new text:
![image](https://user-images.githubusercontent.com/50205984/217879512-4bde58f4-b40a-472e-91ed-0be591136e4e.png)
 1 commit added that removes 'X' button from progress dialog when hide close and cancel button flags are used.
Accessibility improvements. Testing on @vsverchinsky 's latest branch build:  audacity-win-3.3.0-alpha-20230210+429a3c0-x64

I confirm that the Copy dialog no longer has the ""X"" to cancel the process

BUT consider this use case
1. Generate a five hour chirp to simulate a long recording project
2. select a three minute ""song""
3. Ctrl+N to open a new project
4. Ctrl+V to paste the entire smart clip in (the default setting in the dialog)
5. Observe: this takes 2min 24secs on my machine with _**NO**_ longer any ability to interrupt this 

If you make a mistake and intended only to copy in just the selection (which takes less than a second) 0t's like watching paint dry as you wait !

Removing the ""X"" cancel as a ""fix"" seems a very kludgy approach and poor UX. > Testing on @vsverchinsky 's latest branch build: audacity-win-3.3.0-alpha-20230210+429a3c0-x64
> 
> I confirm that the Copy dialog no longer has the ""X"" to cancel the process
> 
> BUT consider this use case
> 
> 1. Generate a five hour chirp to simulate a long recording project
> 2. select a three minute ""song""
> 3. Ctrl+N to open a new project
> 4. Ctrl+V to paste the entire smart clip in (the default setting in the dialog)
> 5. Observe: this takes 2min 24secs on my machine with _**NO**_ longer any ability to interrupt this
> 
> If you make a mistake and intended only to copy in just the selection (which takes less than a second) 0t's like watching paint dry as you wait !
> 
> Removing the ""X"" cancel as a ""fix"" seems a very kludgy approach and poor UX.

And it's been so before dialog was added. The major problem is that I can't suggest a solution that doesn't require deep changes in the code and those changes should be discussed with @crsib and @Paul-Licameli first, I guess  > And it's been so before dialog was added. The major problem is that I can't suggest a solution that doesn't require deep changes in the code and those changes should be discussed with @crsib and @Paul-Licameli first, I guess

@vsverchinsky 

For me the lack of a **Cancel** button or **X** is a relatively minor residual.

I will just be **_very_** happy that users who want to copy a small selection from a large clip in one project to a different project will now be able to copy just the selected audio data and _**not**_ the whole shebang of the ""smart clip"".

So I'm _**really**_ hoping that this fix gets pulled into master for 3.3.0

_And then later @Paul-Licameli anf @crsib can worry about how to provide cancel functionality._

 > > Testing on @vsverchinsky 's latest branch build: audacity-win-3.3.0-alpha-20230210+429a3c0-x64
> > I confirm that the Copy dialog no longer has the ""X"" to cancel the process
> > BUT consider this use case
> > 
> > 1. Generate a five hour chirp to simulate a long recording project
> > 2. select a three minute ""song""
> > 3. Ctrl+N to open a new project
> > 4. Ctrl+V to paste the entire smart clip in (the default setting in the dialog)
> > 5. Observe: this takes 2min 24secs on my machine with _**NO**_ longer any ability to interrupt this
> > 
> > If you make a mistake and intended only to copy in just the selection (which takes less than a second) 0t's like watching paint dry as you wait !
> > Removing the ""X"" cancel as a ""fix"" seems a very kludgy approach and poor UX.
> 
> And it's been so before dialog was added. The major problem is that I can't suggest a solution that doesn't require deep changes in the code and those changes should be discussed with @crsib and @Paul-Licameli first, I guess

See SqliteSampleBlockFactory::OnBeginPurge

Not directly applicable here, but `SampleBlock` has already exposed ways to hook some of its operations.

Perhaps we could temporarily inject a similar callback for creation of blocks, which could poll the cancel button of a progress dialog, then throw an exception.

 Can you rebase and resolve conflicts first, before I review again?
 Testing with @vsverchinsky 's latest branch build:  audacity-win-3.3.0-alpha-20230220+b954cc7-x64

I note that we still have the single word ""**anytime**"" in the clip copy dialog and in Tracks Behaviors prefs - and not ""**any time**"" or ""**at any time**"" as we (@Paul-Licameli ) discussed at the end of last week.


Also note that the Tracks Behaviors prefs dialog is till not long enough vertically:
![image](https://user-images.githubusercontent.com/50205984/220112740-2b3d0b78-6447-4a45-8ab1-36d65c7bada1.png)
 To all who worked on this issue - THANK YOU!  :smiley: I have updated the Tracks Behaviors preferences page with the new behavior
https://alphamanual.audacityteam.org/man/Tracks_Behaviors_Preferences#Pasted_audio

![image](https://user-images.githubusercontent.com/50205984/220399682-5fcf352e-4747-4510-9b07-a573ef9f9e32.png)


The only must-fix matters I see are the corrections in `ForEachCopiedWaveTrack`

 I reviewed again, even without the rebasing onto master.

The conflicts to be resolved are all easy ones involving `#include` directives or visibility macros added to classes by the extraction of lib-wave-track.

The question about wording can easily be decided and fixed later.
","The only must-fix matters I see are the corrections in `ForEachCopiedWaveTrack`

 I reviewed again, even without the rebasing onto master.

The conflicts to be resolved are all easy ones involving `#include` directives or visibility macros added to classes by the extraction of lib-wave-track.

The question about wording can easily be decided and fixed later.
","Resolves: #4004
Resolves: #3820 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This macro isn't needed and the named class doesn't exist
 These string literals are repeated in TracksBehaviorsPrefs.cpp.  Eliminating duplication might be nice but in this case is not very important.  No bug would result if they were differently modified.  The strings are not used as identifiers.
 What is now asserted instead of checked, should be commented above the function too as the precondition it assumes.
 The third commit has no errors, but I don't yet see what code duplication is removed as the commit comment says.  Or rather, this is allowing something to be reused?
 Here, assume negation of the while-condition:
`dstTrack == dstTrackRange.end() || srcTrack == srcTrackRange.end()` Therefore, `srcTrack == srcTrackRange.end()`
 But what about the other possibility, that destination tracks ran out before source tracks?  Don't you need to check that and visit extra source tracks?  You do that at the top of the function, only when there are zero destination tracks.
 Here and elsewhere that you call `f`, what proves that there is not a null dereference?  Track iterators are allowed to dereference an end iterator, getting a null, but then the second dereference might be unsafe.

The function would look better with a test for empty src and early exit.
 The algorithm in `ForEachCopiedWaveTrack` might visit one source track multiple times and count its space multiply in the estimate.

This isn't needed for copying and pasting within a project because of the sharing of data.

Rather than all this work, it suggests to me that cross-project copying and pasting needs a smarter algorithm to replicate the graph structure and pattern of sharing.

This could prevent explosion of file sizes in the first place without so much need to warn about it.
 Thanks! Agreed, though not very clear where exactly such strings could be placed Clipboard access and double checking on same condition (`!tracks.Selected()`) - `DoPasteNotingSelected` assumes that nothing is selected... but I agree that commit message isn't very clear, I'll change it to `Audio paste code simplification`  When copying tracks we consider two cases when pasting:
1) There is no selection
2) Not empty region is selected

In the first case we copy **all tracks** from `src` (used in simplified paste method `DoPasteNothingSelected`). When selection isn't empty `N = min(src.size(), dst.size())` tracks are copied from `src`, plus the **last track** from `src` could be duplicated `M = dst.size() - N` times more, if `M > 0` (corresponds to a paste logic after `!tracks.Selected()` condition in `OnPaste`). In both cases `ForEachCopiedWaveTrack` visits tracks that are to be copied according to behaviour described above.
Does that answers your questions? Not sure that understand your question. `dst` is allowed to be empty, `src` is expected to be not empty (and it can't have null tracks, right?). I don't see where null pointer dereference could happen in that case. I can comment about preconditions, but it's not a publicly available function which's purpose is to simplify implementation of another function. >The algorithm in ForEachCopiedWaveTrack might visit one source track multiple times and count its space multiply in the estimate.

Also it's possible that different source tracks can reference same blocks Yes, I accept this reasoning.  But then the new function should have a comment containing this explanation.  Reading the function in isolation made me question it.
 Right, to prove no null dereference happens, you must assume src is not an empty track list, and that is guaranteed at the call site.

It's all happening within one file, yes, so I won't be pedantic about stating preconditions.
 I assume all visible design and wording changes were prescribed by someone else, but I think ""any time"" is more proper English usage.  Although Grammarly just told me it's considered acceptable as one word now.  @LWinterberg 
 Grammarly says:
>A century ago, it was standard to write any time as two words in all contexts. But it’s now perfectly acceptable to write anytime as one word when you’re using it as an [adverb](https://www.grammarly.com/blog/adverb/). However, some readers still consider it a casualism, so you may want to stick to the two-word version for extremely formal writing.

And in a similar vein The Guardian Style Guide (my personal touchstone in such matters) somewhat jocularly says:
>**any more**
>Please do not say “anymore” any more

And here's the Microsoft guide:
https://www.microsoft.com/en-us/microsoft-365-life-hacks/writing/any-time-or-anytime-is-it-one-or-two-words

So, I'm minded to agree with @Paul-Licameli  that it would be better as ""any time"" with the space.

And I'm also minded to think that it would read better as ""allowing you to access trimmed data at any time"" - _with the ""added ""**at**""_"
4257,2023-02-01T22:30:11Z,2023-02-21T13:42:28Z,Paul-Licameli,10,13,33,3817,123,2,2,"['Effects (EGATs)', 'refactoring']",1005975.0,2,1696341.0,0,0,0,0,49054962.76729,,1,33,1,False,"['dozzzzer', 'Paul-Licameli']","Rebased and force pushed with no changes or conflicts
 Rebased onto recent master, with conflicts resolved in CMakeLists.txt files and in include directives
 Rebased without change onto more recent master.
 @Paul-Licameli 
Moving back to To Do: loading a VST effect causes deadlock in both real-time and destructive application

STR:
1. Have some audio
2. Select a VST effect from the main Effect menu OR
3. Select a VST effect in the sidebar and try to open its dialog

Act. result: Audacity hangs completely @crsib please see how the new commits first turn the stack overflow into a build failure, then fix VST effects.

Once these are understood I want to squash them earlier in the branch.
 @Paul-Licameli 
In some cases, when using effects like Amplify, preview progress dialog won't show up. It doesn't happen in 10/10 times but it's still somewhat easy to reproduce.

STR:
1. Have some audio and make a selection a few seconds long
2. Bring up the Amplify effect
3. Click in a random spot of the amplification slider to set a new amplification value
4. Click Preview button
5. Repeat steps 3 & 4 until the Preview progress dialog won't show up

![2023-02-16_14-50-56 (1)](https://user-images.githubusercontent.com/70063970/219384162-800638db-a8b2-42fb-8c59-3ad2601cf857.gif)
 The issue above bisects to https://github.com/audacity/audacity/commit/95b7997ebb56e914d185cc3ed07e2dc55b7d5699
@Paul-Licameli  > The issue above bisects to [95b7997](https://github.com/audacity/audacity/commit/95b7997ebb56e914d185cc3ed07e2dc55b7d5699)
> @Paul-Licameli

If so, then this branch is not the cause of it, but an issue should be opened about this recent regression and fixed as soon as I can.
 Rebased onto recent master to resolve small conflicts, but no other changes
 VerifiedA good step towards toolkit neutrality for the effect.",A good step towards toolkit neutrality for the effect.,"Resolves: *(direct link to the issue)*

Many steps toward extraction of the ui-independent parts of destructive effect
processing into a library.

One minor change in observable behavior:  certain modal dialogs may open while
an effect dialog is open (from sidebar or from the main menus).  These may now be
positioned differently, no longer centered as before above the effect dialog.  Preserving
the old behavior would add unnecessary bother to the implementation.

Also removes some, but not all, remaining state still carried in Effect objects that we
have called ""stateless"" (enough for realtime processing purposes) and so makes
more functions const (but adds some more const_casts in stateful effects).

Also improves terminology.  EffectUIValidator is renamed EffectEditor and
EffectUIClientInterface becomes EffectUIServices.

EffectUIServices is an interface of const member functions only, with one exception,
and they take const EffectPlugin & as context.  Just as a stateless Effect is a factory
for Instances, so now EffectUIServices is a factory for Editors.

Concrete effect classes inherit both EffectUIServices and EffectPlugin but EffectPlugin
now has no UI related functions in it.  The EffectUIEditor interface of an effect is
discovered where needed by a dynamic_cast.  Passing the effect again as the EffectPlugin
argument allows EffectUIServices not to be based on EffectPlugin, and enables some
common implementations of its methods to query the effect via EffectPlugin for some
other needed information.

For QA:  test these things
- Preview play of any effect in the destructive effect dialog -- including Amplify and Sliding stretch
- Showing and hiding of non-modal effect dialog; exist of program while it still shows
- Modal dialogs for effect options (from the manage menu) and for import/export -- as noted, positioning may be different, but let's not care about that change.  (Ladspa, AU, VST, VST3, LV2, and at least one built-in)
- Thoroughly testing dialogs of Echo; the Amplify effect; and Normalize
- 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If it is called only by Preview, why is it public? It feels that it should be protected instead.  Actually, this is a rare case where I don't disagree with `any` :-) Comment appears to be out of date I wonder why this branch is missing now Oh, nvm question about the branch I wonder if should revisit the modality of destructive dialogs though. It appears that we have broken a common workflow by making destructive application dialogs modal. 

This won't really matter when automation is introduced, so probably it doesn't really matters.  Minor suggestion - let's call it mUIServices maybe? Protected makes sense.

std::any is just type erasure for things that can copy and may have nontrivial destructors.

My type erased pipeline class also uses it.
 I think I removed it at some late commit in this long sequence?
 See the finally
 Ok It's quite unusual to see const member to be initialized in place :-) Isn't the `Effect` included on line 8?"
3937,2022-11-14T18:11:15Z,2023-02-21T09:09:59Z,vsverchinsky,0,0,4,544,23,1,3,[],,0,8521233.0,0,0,0,0,49071209.006037,,0,4,0,False,[],,,"Resolves: #3859 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3996,2022-11-30T11:00:25Z,2023-02-20T20:14:01Z,vsverchinsky,7,22,6,615,10,2,2,[],5623719.0,0,7118045.0,1,0,0,0,49117849.667059,,1,6,0,False,"['DavidBailes', 'p0nce', 'vsverchinsky', 'Paul-Licameli']","I'm done reviewing.  Mostly good.  But I had some questions.
 @vsverchinsky . It's great to see that this is being worked on so that keyboard users can access the factory presets of vst3 plugins:
https://github.com/audacity/audacity/issues/3414

I've tested the plugin mentioned by that issue: https://www.auburnsounds.com/products/Couture.html, and can confirm that the factory presets are now available.
However, I've also tested with TDR Kotelnikov  (https://www.tokyodawn.net/tdr-kotelnikov/), and TDR VOS SlickEQ (https://www.tokyodawn.net/tdr-vos-slickeq/), and the presets are still not available for these. (They are using Reaper.) All my questions are resolve now, BUT, the latest run failed to build for Ubuntu.

But those looked like spurious failures caused by intermittent network problems, so just started a rerun of the failed jobs.  If that passes, then this can be merge.
 > @vsverchinsky . It's great to see that this is being worked on so that keyboard users can access the factory presets of vst3 plugins: #3414
> 
> I've tested the plugin mentioned by that issue: https://www.auburnsounds.com/products/Couture.html, and can confirm that the factory presets are now available. However, I've also tested with TDR Kotelnikov (https://www.tokyodawn.net/tdr-kotelnikov/), and TDR VOS SlickEQ (https://www.tokyodawn.net/tdr-vos-slickeq/), and the presets are still not available for these. (They are using Reaper.)

Thanks! Turns out that according to spec there is a violation of call sequence, and also it seems like plugin do not fully initialize parameter info structures, I'll try to workaround this You can use Graillon free VST3 for VST3 program lists, we are actually getting support issues from Audacity users :) https://www.auburnsounds.com/products/Graillon.html (EDIT: oh, if Couture worked then Graillon will too) > @vsverchinsky . It's great to see that this is being worked on so that keyboard users can access the factory presets of vst3 plugins: #3414
> 
> I've tested the plugin mentioned by that issue: https://www.auburnsounds.com/products/Couture.html, and can confirm that the factory presets are now available. However, I've also tested with TDR Kotelnikov (https://www.tokyodawn.net/tdr-kotelnikov/), and TDR VOS SlickEQ (https://www.tokyodawn.net/tdr-vos-slickeq/), and the presets are still not available for these. (They are using Reaper.)

@DavidBailes I've updated PR and plugins mentioned should also list factory programs in the ""settings & presets"" menu. Though one issue remains - there could be more than one menu entry named 'Defaults', and moreover they could be same, but I'm not sure what to do about it right now (the problem is that for some plugins that may be not true, I think) > @DavidBailes I've updated PR and plugins mentioned should also list factory programs in the ""settings & presets"" menu. Though one issue remains - there could be more than one menu entry named 'Defaults', and moreover they could be same, but I'm not sure what to do about it right now (the problem is that for some plugins that may be not true, I think)

@vsverchinsky . Thanks, I can confirm that the problem with those two plugins is fixed.
The issue with entries for defaults and default is a minor issue (I notice that it also occurs for vst2 plugins).Still I must request one change, to pass the correct exception type and avoid unnecessary error reports.

Besides that, just one spelling mistake in a comment, and resolve the question whether `kOffline` is right.
 I have reviewed what is new since last review.  I have no comments.
","Still I must request one change, to pass the correct exception type and avoid unnecessary error reports.

Besides that, just one spelling mistake in a comment, and resolve the question whether `kOffline` is right.
 I have reviewed what is new since last review.  I have no comments.
","Resolves: #3860

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It's not obvious locally in the code here, but I understand a consequence of this is that changes of factory preset will ""dirty"" the project so you are prompted to save it when you close.  Am I right?  Is there another reason for this?
 I understand the second of the six commits, except for this unexplained change.  What does it accomplish?
 ""InitializeComponents"" Is `Internal` the right type for this and the other new exception, not `BadEnvironment`?  If this failure occurs, do we want Sentry data about it or not?

`FileException` does use `Internal` but see the comment in its constructor explaining that as an unusual decision.
 You assume here that `GetCache` never returns null.  If that is a correct and reliable assumption, make that clear with types:  return a reference instead of apointer.  If not, test for null.
 In fact `GetCache` is not now guaranteeing a non-null return, so please null check this.
 Why not simply combine the two functions ?  Just let `GetCache` return a reference to `sVST3PluginCache[key]` and that will create and default-initialize a member that isn't there already.

Then the assertion isn't needed, and you know I don't like assertions without comments:  when I review an assertion,. I'm not satisfied until I also review all uses of the function.  Less burden of review without it.
 To make my last suggestion work, defaulted `VST3PluginCache` must be distinguishable from one that was initialized as in the following code, so you can write another test here.
 ... and I think this assignment would make that distinguishability, if it is always reached, but it isn't.

 This is a change of a user facing string that I suppose you must tell design about, if there is any important opinion about string consistency.
 It is correct, though formally there could be other types of parameter that aren't automatable or hidden. For such parameters it is correct to ""dirty"" the project too I think. Some VST3 plugins can offer better processig quality in `kOffline` mode. I think it used to be `kOffline` some time before refactoring, but I've made a typo > Is Internal the right type for this and the other new exception, not BadEnvironment? If this failure occurs, do we want Sentry data about it or not?

Not sure how to answer the first question, but I don't think that it's a good idea to send preset loading failures to sentry. `LoadPresetFromStream(fileStream)` load preset file from disc, and user may attempt to load preset that was genrated by older version of same plugin, or even by another plugin. That would be mere formal check. Cache for the effect ID is created in the constructor and never erased. Changing return type to reference would require ""fallback"" cache variable to be introduced, whichs purpose is to replace `nullptr`. What should be done if cache can't be found? Throw an exception? I think it's overcomplication, considering that this is an implementation detail. The answer is in VST3Wrapper constructor - cache initialization process. If `GetCache` and `CreateCahce` were combined I had to add an initialization state. Reference type might have convinced you that return value isn't nullptr (though that can be violated too), and the code is formally correct, but you must make sure that the state of returned object is correct too. I don't think that it worth changing. Yes, and all other places should check that too. Not obvious what should happen if `GetCache` returns not initialized object Right, thanks! Yes, the meaning for `kNoProgramListId` is that plugin does not have program list parameter, which is fine.  So then, will you revert that change or comment that you are keeping it?
 If there should not reporting for this error, then Internal is the wrong choice.  See this other example:

```
throw SimpleMessageBoxException{ rc != SQLITE_FULL ? ExceptionType::Internal : ExceptionType::BadEnvironment,
      message, XO(""Warning""), ""Error:_Disk_full_or_not_writable"" };
```

If Sqlite fails but tells the program it's exhaustion of device space, then we don't need to collect a report.  Only if Sqlite fails for some other various reason do we want a report.
 No, I think `kOffline` fits better for destructive processing. `RealtimeInitialize` uses `kRealtime` mode. Reverted that line"
4322,2023-02-17T09:47:15Z,2023-02-20T09:08:36Z,carlo-bramini,4,0,15,2,1,2,1,[],8488.0,0,264980.0,1,0,0,0,49149707.067416,,0,15,0,False,"['carlo-bramini', 'crsib']","We can just squash it on merge  > We can just squash it on merge

I would really appreciate that... for doing this quick fix, I used GitHub web editor and those extraneous commits are made by the ""Sync fork"" button on the web interface. I'll do that, no worries Given that this change is not visible to out QA team, I'll go ahead and merge itPlease cherry pick the last commit onto recent master and force push this branch with only that commit.  There are 14 extraneous merge commits before it.",Please cherry pick the last commit onto recent master and force push this branch with only that commit.  There are 14 extraneous merge commits before it.,"Resolves: [*(direct link to the issue)*](https://github.com/audacity/audacity/issues/3137)

If NYQUIST is disabled when configuring Audacity, the build process hangs with an error because `nyq_reformat_aud_do_response()` is not found when linking, see issue #3137. Since `ExecForLisp()` is called only by `src\effects\nyquist\Nyquist.cpp` but this source is not compiled if Nyquist is disabled:

https://github.com/audacity/audacity/blob/ea8163f94e58899844a173c679f5a267b4252d1c/src/CMakeLists.txt#L637

it is worth to apply here the same test on `USE_NYQUIST` macro, as it has been already done elsewhere.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4260,2023-02-02T16:52:12Z,2023-02-17T16:30:20Z,JC3,5,0,1,12,1,1,1,[],72724.0,0,1303979.0,0,0,0,0,49381213.347275,,0,1,0,False,"['LWinterberg', 'petersampsonaudacity', 'JC3']","Just tested this on W10 with @JC3  Jason's branch:  audacity-win-3.2.4-alpha-20230203+0baa1bf-x64

This works fine for me in 
a) **Selection** toolbar
b) **Time** toolbar


![image](https://user-images.githubusercontent.com/50205984/216606231-66ba43f7-ad74-4193-ad5f-0e82ad40ab32.png)
 LTGM from a design point - we'll split this big list into sub-menus soon anyway wait why was this targeted for release-3.2.4? I screwed up merging this > wait why was this targeted for release-3.2.4? I screwed up merging this

Because I have no idea how the branches work here so I based my code off of the latest release, figuring somebody who knew what they were doing would catch it in review and/or merge it into the correct branch 😂. evidently not me then! : D",,"Resolves: https://github.com/audacity/audacity/issues/4258

Adds support for ""seconds + milliseconds"" time format to time widget.

![image](https://user-images.githubusercontent.com/5651184/216389232-7aaf14e7-061e-48cc-afbc-8043bb2b07e7.png)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4314,2023-02-15T00:10:15Z,2023-02-17T17:44:09Z,Paul-Licameli,1,0,2,359,10,1,1,"['refactoring', 'dependency breaking']",221856.0,2,236038.0,0,0,0,0,49386073.749582,,1,2,1,True,['dozzzzer'],Verified,,"Resolves: *(direct link to the issue)*

Break dependency of Effect on LabelTrack, for which there is not (yet) a library.

Even if there is such a library later, better not to have this extra dependency.

Extract utilities from Effect that are only used by some Analyzers.

QA:  things to test include Vamp analyers and the Find Clipping analyzer.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4294,2023-02-08T11:30:31Z,2023-02-14T13:56:53Z,vsverchinsky,1,0,1,11,1,1,1,[],19496.0,0,527550.0,0,0,0,0,49658548.109414,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build:  audacity-win-3.3.0-alpha-20230208+88d6d18-x64
which I assume is based on @Connorbub 's latest branch build.

This now looks to be working properly in this branch build",,"Resolves: #2846 

Original PR #2847. Unnecessary changes removed, rebased and squashed.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4226,2023-01-24T11:29:28Z,2023-02-14T10:31:34Z,Paul-Licameli,3,0,3,67,7,1,1,"['Effects (EGATs)', 'refactoring', 'dependency breaking']",1553412.0,2,1810931.0,0,0,0,0,49671232.383651,,0,3,1,True,"['dozzzzer', 'Paul-Licameli']","Force pushed only to rebase onto recent master while awaiting QA approval. Rebased onto recent master, resolved small conflict in include directives, force pushed again with no other changes
 Verified",,"Resolves: 

Another small step toward toolkit neutrality of EffectBase.cpp and later
movement of that to a library, by enlarging BasicUI abstractions to support the =
notion of the focused window.

Unchanged behavior for QA to check:

The Preview button of the destructive effect dialog makes a working progress dialog that can be stopped.
The keyboard focus is restored as it was, after either playing the preview completely or stopping the progress dialog (either with a click or a keystroke).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4263,2023-02-03T11:21:06Z,2023-02-13T17:43:01Z,crsib,5,14,2,54,2,2,1,[],66.0,1,886918.0,1,0,0,0,49731750.209591,,0,2,0,False,"['crsib', 'DavidBailes']","@SteveDaulton can you please check that the issue is for you? I don't have physical Linux installation right now.  @crsib . This change affects the keyboard scrubbing using the u and i keys on Windows.
In previous verisons of Audacity you can quickly change the direction of the scrubbing:
1. hold down the i key to scrub forwards.
2. hold down the u key. scrub immediately changes direction.
3. release the i key.

With this change, in step 2, the scrubbing does not change direction. To change direction you have to release the i key, and then hold down the u key. Thanks, David, I will check that out! > Thanks, David, I will check that out!

Thanks. Another problem is that changing the zoom level whilst either the u or i key is being held down no longer immediately changes the scrub speed. Thank you, @Paul-Licameli. I have updated the first commit detecting ALSA differently So the one thing to fix is `mUsingAlsa`

I don't feel like I understand all the intricacies but I see nothing wrong looiking and I trust the results of experiment.

","So the one thing to fix is `mUsingAlsa`

I don't feel like I understand all the intricacies but I see nothing wrong looiking and I trust the results of experiment.

","Resolves: #2427 

This PR uses the output latency reported by PortAudio as a hint about the ring buffer size and granularity. 


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This assignment happens only when `mSoftwarePlaythrough` is false.  I think it should be independent of that.
 Hmm, great catch! It happens too only when playing, not when recording only (without overdub).

Is there any similar issue with mixed up timing at the start of recording with ALSA?  But I am aware of no complaint.
 Did you see also in MIDIPlay.cpp
```

   // We use audio latency to estimate how far ahead of DACS we are writing
   if (info) {
      // this is an initial guess, but for PA/Linux/ALSA it's wrong and will be
      // updated with a better value:
      mAudioOutLatency = info->outputLatency;
      mSystemMinusAudioTimePlusLatency += mAudioOutLatency;
   }
``` ""its""
 I saw that, but estimation there happens too late to fix this bug.  Does this line cause no change on Mac and Windows?
 I have observed none, both usually report relatively low latency and report it correctly. This specific line cannot really hurt, there is huge inconsistency between `playbackBufferSize`  on different policies and I don't really think that provided ring buffer size matters that much if it is sufficient. 

`mPlaybackQueueMinimum` is different, but it must handle the reported output latency anyway. Simply using some random number is incorrect. Yet again - reported latency is usually lower than the one requested by playback policy. This PR does affect responsiveness of scrubbing on ALSA, but the bug itself makes Audacity **unusable** on ALSA, which is much worse.   To be fair, I do not understand the motivation behind the decision to calculate latencies for ALSA backend in the way PA does, nor why there is no public interface to retrieve any information about the buffer parameters. We can make a PR introducing that interface, but it will take few years before this PR will get merged into any Linux distro. 

I think that for 3.4 (or around) we stop relying on PortAudio that much instead.   This last assignment may make `mPlaybackQueueMinimum` still larger than `mHardwarePlaybackLatencyFrames`

Is that what you want?  Or should it be

`mPlaybackQueueMinimum -= mPlaybackQueueMinimum % mPlaybackSamplesToCopy`

 It should be `not less`, so larger definitely works, otherwise bug won't be fixed. Irrelevant to the bug fix, but I notice now that `mPlaybackRingBufferSecs` can be a local variable of this function only, eliminating a member variable
 Oh I was being silly Still, in two places, one thing is rounded to a multiple of another thing.  I don't yet understand the need."
4211,2023-01-20T04:37:41Z,2023-02-13T13:36:28Z,Paul-Licameli,2,27,9,1392,120,2,1,"['refactoring', 'libraries & modules']",1922798.0,2,2106001.0,1,0,0,0,49746475.260873,,0,9,1,False,"['Ryan-Miller-Audacity', 'Paul-Licameli']","Force pushed only to rebase onto recent master while waiting for QA approval.
 QA verified on MacOs and Windows the following: 
* Display and clicks on clip boundaries and cutlines
* Adjustment of vertical bounds and scale type in vertical spectrogram ruler
* Varying spectrogram settings of individual tracks (NOT the use of the Preferences dialog which affects defaults)
* Waveform view vertical bounds and scale type changes

All appears to be working as expected when compared to previous versions.There are few places in this PR that need clarification ",There are few places in this PR that need clarification ,"Resolves: 

A toolkit-neutral library for the WaveTrack class and supporting classes.

But it still depends on a start-up dependency injection of the implementation
of block files.  That is, SqliteSampleBlock and SqliteSampleBlockFactory are
not in this library.  Only their abstract base classes.

So this library has no dependency on sqlite.

Notes for QA:  should test some of the GUI related to track displays, because this separates display from core logic.

- Display and clicks on clip boundaries and cutlines
- Adjustment of vertical bounds and scale type in vertical spectrogram ruler
- Varying spectrogram settings of individual tracks (NOT the use of the Preferences dialog which affects defaults)
- Waveform view vertical bounds and scale type changes

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Why C-cast? Why C-cast? Something feels really wrong with this class. Judging by comment - it allows changing application global state. Following the real post effects is really hard here too.  Why setters are const? Why the fields are public?  All the comments from the previous class apply here. 

BTW, why cache? What does it cache exactly? Please use C++ header: cmath Invoke assignment only if the ClientData::Site base class to clone the attachments.  That conserves the effect of the deleted lines. Ditto I do not understand what exactly do you mean and how it justifies C-cast. More explicitly `this->Caches::operator=(orig)` with no cast but I don’t find that prettier.

This is an intentional slicing assignment.
 Which comment do you mean?

This is extra state, but not of the application.  Each WaveTrack has its own independently changeable cache.
 See that the corresponding deleted member functions of WaveTrack were also like that.  The members were mutable.

Mutability makes some sense -- the graphics code wants to decorate a track, that it can examine but not change, with some extra memos only for its own use.

Instead of making those members of WaveTrackCache mutable, I could do this:

```
WaveformSettings &WaveformSettings::Get( const WaveTrack &track )
 {
+   return Get(const_cast<WaveTrack&>(track));
 }
```

-- that is, overload the static function accessing the cache, so it can take a const track but give back a non-const cache.
 No good reason here.  I can change it.

Though I do not agree that whenever there is a structure, you must encapsulate everything with get and set functions.  Some things are simply bags of data with no important consistency constraints, no invariants, to be established and preserved by member functions.  Such for instance is the case with many structure names ending in `...Options` that are just meant to shorten long lists of arguments.
 See what member variables are removed from WaveTrack.

They were all mutable and in that sense ""caches.""  Mutables aren't always nice but it seemed preferable to me before to make all those things mutables, rather than to require non-const tracks as arguments in drawing functions.  Logically, mere drawing should not be able to mutate the data model.  These extra things aren't really part of the data model.

Display and interaction code can take a const wave track that it is not allowed to mutate, but use ClientData to associate extra information with each track for its own needs.

 I don't find this explanation convincing. This should be solved differently. Definitely not with a C-cast. 

I don't quite understand, why `static_cast` or some form of implicit conversion is not used here. 

I am not going to approve the code in the way it is now done.  Specifically this comment is really confusing.  `//! Get either the global default settings, or the track's own if previously created` I have a pretty strong opinion, that mixing POD-like objects and getters/setters is not a best idea. Also in most of the places `m` prefix in Audacity means some kind of encapsulation. It is frustrating to read and understand the code when naming conventions are violated. I don't see how making variable mutable makes it a `cache`.

 Okay then, will you be satisfied with:

`static_cast<Caches&>(*this) = orig;` ?

The reason C-cast didn't bother me is that this is an up-cast of the object to its base class, not the checked down-cast which is what `static_cast` is usually for with pointers and references.  In other words this also works with no casts:

```
Caches &caches = *this;
caches = orig;
```

In fact I even like that better.  No casts, just a reference binding.

 As to what the line actually DOES, never mind the style matters -- there is no complaint?  It does no more nor less than the deleted lines it replaces.
 That comment may be extraneous, yes.  By mistaken analogy with the Spectogram settings code where that comment makes more sense.
 Arguably this is not a POD because there should be an ordering constraint on mins and maxes.

However I have my equally strong opinion that one should not be slavish about the `m` convention.  Some PODs really are PODs.  A structure with no invariant conditions it needs to protect is just a bunch of stuff and not properly a class.
 ""memo"" then?  Not in the sense of memo-izing an expensive computation, but it is some piece of associated attached data.  Or, if this helps, I guess in LISP world it would be something like a property list entry that you can stick onto a symbol.

""attachment""?

""decoration""?

other suggestions welcome
 The fact that something does NOT use the `m` conventions should be its own recognized convention too.  That, this structure is meant to be just a POD.
 Implicit conversion, as with two lines you proposed, works just fine for me. > Arguably this is not a POD because there should be an ordering constraint on mins and maxes.

Public access to members removes any constraints. "
4306,2023-02-13T11:45:25Z,2023-02-13T12:22:35Z,crsib,0,0,1,4,1,1,1,[],,1,2234.0,0,0,0,0,49750980.449257,,0,1,1,False,[],,,"* `zlib` is already correctly added on top of the list
*  Use correct threading library detection instead of  hardcoding `pthread`

Resolves: #729 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4119,2022-12-27T14:57:27Z,2023-02-10T12:17:09Z,vsverchinsky,0,0,1,10,2,1,1,[],,0,3878568.0,0,0,0,0,50010326.577437,,1,1,0,False,[],,,"Resolves: #3783
Resolves: #3669 

Some plugins (like meters/analyzers) expect playback state to be reported to work properly.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4191,2023-01-16T13:32:35Z,2023-02-10T12:17:54Z,vsverchinsky,1,5,1,64,3,2,1,[],1545614.0,0,2155656.0,1,0,0,0,50010332.851456,,0,1,0,False,['Paul-Licameli'],"I understand how this fixes the original report.  I fear it might not be the last bug that is found and fixed, involving floating point durations that are not exact multples of the sample period.  Maybe some future fix will be more comprehensive.

The only objection I have, as I explained, is slight misuse of assertions.  There is a duty to add some comments when you add assertions, and offer some informal proof in comments that the assertions can't fail at least now when you add them.
Better assertion discipline, that's all I'd like to see
","Better assertion discipline, that's all I'd like to see
","Resolves: #4134

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If you add this assertion, you must add a `@pre` comment in the header file, and you must reexamine all uses of this constructor and prove that the assertion violation can't happen.

There are two uses of the constructor.  In one, you do guarantee the condition with the new test of CountSamples.

The other is in WaveClip::ClearAndAddCutLine but there is no guarantee of the precondition there.

```
   const double clip_t0 = std::max( t0, GetPlayStartTime() );
   const double clip_t1 = std::min( t1, GetPlayEndTime() );

   auto newClip = std::make_unique< WaveClip >
      (*this, mSequence->GetFactory(), true, clip_t0, clip_t1);
```

In case the clip has zero length, the copy might be called without guarantee of the condition.  Is there some other proof then that `ClearAndAddCutline` is never called for an empty clip?  It might in turn need and assertion and a `@pre` and checks where it is used.  Or it might test and return and do nothign to the clip in this boundary case.

 Now I think you just need the first assertion because you want to prove this other assertion, but if the first assertion is violated, nothing really bad happens except that you make an empty clip.

Could there just be one asserion then?

`assert(!(orig.CountSamples(t0, t1) >= 1) || GetPlaySamplesCount() > 0)`
 > you must reexamine all uses of this constructor and prove that the assertion violation can't happen.

I did that

> If you add this assertion, you must add a @pre comment in the header file ...

I don't understand, do you mean that `assert` is essentially useless and we should use `@pre` instead? Not instead, but also. I mean that an assertion at the top of the function means the function assumes a precondition, and that should be part of its documentation, at least as a doxygen comment in the header file. > nothing really bad happens except that you make an empty clip.

True, that means actually that requirement `orig.CountSamples(t0, t1) > 0` isn't necessary, it's enough to make sure that empty clips can't appear on the track, as they are causing troubles."
4303,2023-02-10T11:21:45Z,2023-02-10T11:56:30Z,crsib,0,0,1,2,1,1,1,[],,1,2540.0,0,0,0,0,50011300.894256,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4246,2023-01-27T20:06:04Z,2023-02-07T16:15:31Z,nekopsykose,2,2,3,8,3,3,2,[],3228.0,0,936567.0,0,0,0,0,50255417.371026,,0,3,1,False,"['crsib', 'nekopsykose']","Windows build has failed, there is no select.h under Windows  > Windows build has failed, there is no select.h under Windows  

right, good point. guarded with not _WIN32Approved with one small suggestion",Approved with one small suggestion,"fixes various issues compiling under musl libc:

- u_short isn't a standard typename and doesn't exist
- <sys/select.h> is needed for fd_ functions
- assigning to stdout/err is invalid, but freopen already does this so there is no need to

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`IPCChannel.h` is a public interface file, please move this include to `internal/ipc-types.h` good point, adjusted into the existing block in there"
4282,2023-02-06T12:46:56Z,2023-02-07T09:13:40Z,boomboss200,0,0,1,2,1,1,1,[],,0,73605.0,0,0,0,0,50280729.436207,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/4279

*(short description of the changes and the motivation to make the changes)*
Updated the src/AboutDialogue.cpp to the expected behaviour mentioned in the issue#4279

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4261,2023-02-02T18:32:47Z,2023-02-06T11:59:13Z,Paul-Licameli,1,0,1,2,1,2,2,[],71364.0,1,321990.0,0,0,0,0,50357195.624703,,0,1,1,False,['petersampsonaudacity'],"Testing on W10 with  @Paul-Licameli 's branch build:  audacity-win-3.3.0-alpha-20230202+5ac1890-x64

This now has the former correct order in the Tools menu in Paul's branch builld
![image](https://user-images.githubusercontent.com/50205984/216626705-f2189c50-ac22-4d50-800f-5cba4e51b301.png)
",,"... This fixes it, because registry merge treats named and unnamed groupings differently

Resolves: #4172

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4264,2023-02-03T11:44:28Z,2023-02-06T09:22:04Z,crsib,1,0,1,8,2,1,1,['Build / CI'],250647.0,1,250659.0,0,0,0,0,50366627.746508,,0,1,1,False,['crsib'],"This only affects single option in the build system, not used on CI. No QA is required",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4239,2023-01-26T18:57:05Z,2023-01-30T14:40:21Z,Paul-Licameli,0,0,1,7,1,1,1,['Build / CI'],,1,330200.0,0,0,0,0,50952332.340431,,0,1,1,False,[],,,"Resolves: *(direct link to the issue)*

Commit dc5718cefe8f8099c1878b5f757bbd19a128563a unintentionally increased the require CMake minimum version, but this corrects that while still preserving the advantages of that commit.

This small change should bypass QA confirmation, as having no effect at all on the built program.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4221,2023-01-22T21:51:58Z,2023-01-27T13:22:33Z,Paul-Licameli,1,10,2,213,16,2,1,"['refactoring', 'dependency breaking']",399175.0,2,401439.0,1,0,0,0,51216202.510654,,1,2,1,True,['Ryan-Miller-Audacity'],"Sanity checked the following items: starting and stopping of playback, recording (including punch-and-roll), monitoring (click in the output meter), play-at-speed button, scrubbing and observed no issues/unwanted behaviors. I would like to see more descriptive names, please","I would like to see more descriptive names, please","Resolves: *(direct link to the issue)*

Break dependency of EffectBase on ProjectAudioManager by demoting a piece
of the latter into lib-audio-io.

The untangling of the rest of ProjectAudioManager so it can go into a toolkit
neutral library is a difficult and still unsolved problem.  But this much will
remove one of the blocks in untangling a toolkit neutral library for destructive
effect application, which includes the logic behind the Preview button of the
Effect dialog.

QA:  test starting and stopping of playback, recording (including punch-and-roll), monitoring (click in the output meter), play-at-speed button, scrubbing

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Please specify the type explicitly.  Please specify the type explicitly. Please specify the type explicitly. Please specify the type explicitly. Should this be `final`? I really don't find this syntax to be any more readable, specifically here The naming is very wrong, `DefaultDefaultOptions` sounds like typo, not a name. It does not represent the intention of the function at all. Should it be `GetDefaultOptionsFactory`?  yes It saves the small bother of qualifying `OptionsFactory` but I will rewrite it
 ok
"
4232,2023-01-25T14:36:38Z,2023-01-27T08:48:05Z,crsib,0,0,2,8,3,1,1,['Build / CI'],,0,151890.0,0,0,0,0,51232673.595503,,0,2,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4176,2023-01-12T13:26:29Z,2023-01-27T08:47:08Z,crsib,8,4,4,43,2,2,1,[],97882.0,1,1279240.0,0,0,0,0,51232735.03488,,0,4,1,False,"['crsib', 'petersampsonaudacity', 'Paul-Licameli']","> Peter has his ways of timing things with macros, but this enhancement could help us get more precise information.

@Paul-Licameli  more accurately @lllucius  (Leland) provided the tools (macro trace) in version 3.0.0 - he even made me a special 2.4.2 build post-release so that I could test AUP versus AUP3 timings.

So the timing tools are there in Audacity for anyone to use - I think it is an easter egg and not documented though ... I think @crsib wants to try reducing the frequency of polling of the progress indicator dialog for button presses as one way to get even better performance, and this new change will provide more information about whether that is so.
 > We have a willing performance tester of parallel EQ in @petersampsonaudacity .

**_reasonably willing_** I should say (time permitting) - don't forget I'm not on the payroll, just a willing volunteer  ;-) > > We have a willing performance tester of parallel EQ in @petersampsonaudacity .
> 
> **_reasonably willing_** I should say (time permitting) - don't forget I'm not on the payroll, just a willing volunteer ;-)

@petersampsonaudacity @crsib I've been thinking it over, and I have a different theory of how we might further improve performance for Peter's 2-core machine or even my 6 core machine.  (4 vs 12 logical processors, with hyper threading.)

I think the yielding of the main thread to the event loop has little effect on performance, contrary to Dmitry's speculations.

Rather we should try to saturate the disk utilization, because it is the contended resource that is the sequential bottleneck that sets the limit on the speedup that we can realize.

EQ was compute-bound when sequential.  More threads make it less compute-bound.  Still the disk isn't saturated, which means the task subdivision is still too coarse.  (Even on my MacBook, where I did get a several-fold speedup, not just tens of %.  Evidence described below.)

Oversubscription is in general a good idea -- more threads than available logical processors.  I simply added 2 to `std::thread::hardware_concurrency()` but that was just a poor guess.

Windows Performance Monitor or the Xcode debugger, even attached to a release build, can yield interesting data.  With Xcode I see the highest spike in disk utilization AFTER the EQ is done, which I think is the background thread doing checkpointing.  During the EQ calculation, disk utilization still didn't go that high in my branch.  Suggesting, time is still spent with all threads computing, not reading or writing.  So my oversubscription just wasn't enough!

Maybe multiplying by 2 would be better!

Maybe adding a control to the effect dialog, just in alpha builds, to vary the number of threads, would enable experiments to gather data to make a more intellligent decision about how much oversubscription is best.

Beyond some point I would expect adding threads would give diminishing and then even negative returns.
 It's a shame we don't have any **_usage monitoring_** to let the devs know which effects and other functions are most-used and in particular most-used on large projects/large selections.  ;-)

My key ones are Amplify and Export with my 2-2.25 hour weekly projects. > contrary to Dmitry's speculations.

Measurements shown that my speculations were wrong. That's why we do measurements!

> Rather we should try to saturate the disk utilization

I don't agree with this. I don't think that our goal is to ""freeze"" the user PC. What is also missing here is that you have a very fast NVMe drive in your MacBook. I can easily get 100% utilization of my HDD for extended periods of times simply by using Audacity. 

> Oversubscription is in general a good idea 

It is not. Measurement is. Lets dive in a bit. 

I have and 8C/16T Ryzen 5800x paired with a high end X570 chipset. I have tested with 3 different drives:

1. NVMe 2 Tb 980 Pro 
2. SATA3 SSD 4 Tb 870 Evo
3. SATA3 HDD 6 Tb IronWolf

On disk 1 I observe little under 4x improvement when 18 threads are used. Roughly  8 secs is reduced to 2 secs with 2 hour chirp. Using 6 threads yields the very similar result. Using 4 threads is a little bit slower. Speedup looks very good, but clearly - adding more threads probably won't really help. However, I have noticed that disk kicks in almost at the end of the calculation and is used intensively (even **before** checkpointing) after the dialog is closed. It appears, that we close the dialog **before** the result is written to the disk.

So I have generated 6 hour-long chirp. For this case I have only compared 18 threads vs 1 thread and I have measured roughly how long does takes to settle down all writes **after** the disk has started writing. This **includes** checkpointing, There is an impact on operations performed during the checkpointing. I wonder, why current approach for checkpointing was chosen instead of a write queue of some kind.

| Scenario     | CPU Time (s) | Disk time (s) |
| --- | :---: | :---: |
| Disk 1/18T | 21 | 36 |
| Disk 1/1T | 41 | 50 |
| Disk 2/18 T | 21 | 40 |
| Disk 2/1T | 41 | 60 |
| Disk 3/18T | 21 | 90 |
| Disk 3/1T | 42 | 95 |

During the processing Disk 1 is heavily underutilized, both in terms of write speed and IOPS. But there is only 2x speedup here, so it appears that we are **not limited** by the disk performance at all. What exactly is limiting the performance is a very good question, we will have to find it out later.  My current speculation is that we are limited by SQLite MT performance. This is just a speculation, likely it is wrong.

For the history, SATA SSD had 50% load on average **during** the processing, HDD was at 100%.

 > > Rather we should try to saturate the disk utilization
> 
> I don't agree with this. I don't think that our goal is to ""freeze"" the user PC.

I agree - not least because the user may be using the computer for other work too (with Audacity processing in the background).

_Note that when Dave Cutler (at DEC, Digital Equipment) was designing RSX, the design objective was not for the OS to get itself into a busy state, bur rather it's ""desired"" state was actually quiescence._ I approve the changes.  I think they are few enough to squash into one commit.

We need to talk another time about the other data you have gathered in these comments.
We have a willing performance tester of parallel EQ in @petersampsonaudacity .

Peter has his ways of timing things with macros, but this enhancement could help us get more precise information.

Can you instruct Peter in how to gather these numbers?
","We have a willing performance tester of parallel EQ in @petersampsonaudacity .

Peter has his ways of timing things with macros, but this enhancement could help us get more precise information.

Can you instruct Peter in how to gather these numbers?
","This is a minor change, that logs the time an operation with a ProgressDialog took.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Either say ""took"" or ""finished in""
 Shoot, my bad, changed the text sometime in the middle xD

It was `completed` initially, by I felt that this is not quite right, because this message will be shown for cancelled tasks as well Perhaps the total duration of yield time, within polling time, could be accumulated too?
 I think it will match precisely the Poll time, but this can be easily done (and might be quite educative!)"
4238,2023-01-26T12:35:40Z,2023-01-26T12:38:09Z,LWinterberg,0,0,1,6,1,1,1,[],,0,156.0,0,0,0,0,51305270.282417,,0,1,0,False,[],,,,
4192,2023-01-16T13:35:23Z,2023-01-26T09:23:24Z,vsverchinsky,0,2,1,15,1,2,1,[],,0,848905.0,0,0,0,0,51316940.567882,,0,1,0,False,[],,,"Resolves: #4190 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","So is it a consequence of this change:

I can make a clip; make a cutline; drag the smart clip boundary to hide the cutline; copy a part of the clip; paste to a new track; drag the boundary of the new clip -- and find the duplicated cutline too?
 For some reason cutlines aren't copied with regular copy-paste, but they should be copied when part of a clip that contains a cutline is duplicated. But in general what you said is correct."
4193,2023-01-16T13:37:16Z,2023-01-26T09:17:47Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,848452.0,0,0,0,0,51317282.914658,,0,1,0,False,[],,,"Resolves: #4189 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4207,2023-01-18T19:39:51Z,2023-01-26T09:16:20Z,vsverchinsky,1,0,2,49,2,1,1,[],491572.0,0,653820.0,0,0,0,0,51317362.145133,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build from 5 days ago:  audacity-win-3.3.0-alpha-20230118+616d02c-x64

#3796 now works fine on WindowsI reviewed, and saw nothing wrong with the changes, but wondered if they were complete.

I thought I recalled Nyquist effects had some unsual clip splitting and merging logic.

Apparently not, for most effects.

There is one unusual effect, Crossfade Clips, which does behave a bit oddly.  That may merit a separate but low priority issue.

","I reviewed, and saw nothing wrong with the changes, but wondered if they were complete.

I thought I recalled Nyquist effects had some unsual clip splitting and merging logic.

Apparently not, for most effects.

There is one unusual effect, Crossfade Clips, which does behave a bit oddly.  That may merit a separate but low priority issue.

","Resolves: #3796

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4056,2022-12-12T12:52:23Z,2023-01-26T09:06:13Z,vsverchinsky,4,8,3,311,7,3,3,[],14326.0,0,3874466.0,2,0,0,0,51317966.942333,,0,3,0,False,"['DavidBailes', 'vsverchinsky']","Thanks! Though I can't reproduce issue 1 > Thanks! Though I can't reproduce issue 1

If it works for renaming the second clip, then press Alt + comma to select the first clip, and press ctrl + f2 and see if that works.
(And I've got only one clip visible at once, as in the steps to reproduce.)

Had a look at the new code:
After pressing Alt + comma/period, WaveTrackAffordanceControls::Draw() gets called, but mFocusClip has not been updated, and so:
if(mFocusClip.lock() == clip)
                        mFocusedClipNameVisible = !titleRect.IsEmpty();
does not correctly update mFocusedClipNameVisible.

So when you try to rename a clip, in WaveTrackAffordanceControls::StartEditClipName():
            if(!mFocusedClipNameVisible)
                //Clip name isn't visible, there is no point in showing editor then
                return false;
an incorrect value of mFocusedClipNameVisible can be used.
 > This looks a lot better, however it introduces a bug for keyboard users. Prior to the fix, when the option ""Use dialog for the name of a new label"" was enabled, there were no problems. This is now not the case, when the start of a clip is visible, but its name is not. For example:
> ![image](https://user-images.githubusercontent.com/11887021/208079641-4b2adcf6-d9a7-4f24-a2a7-ceb8717a55e1.png)
> When you use alt + period to select the second clip in the example, the name of the clip remains invisible, because the select next clip command only ensures that the start of the clip is visible (it was written before there were clip names). So when you press ctrl+f2 to edit the clip name, nothing happens regardless of the ""use dialog for the name of a new label"" setting.
> In the case when the dialog setting is enabled, this is a new bug, and I think needs to be fixed in this pull request. One solution would be to not check for visibility of the name when this setting is enabled, as was done prior to this fix. This would ensure that it always worked.
> In the case where the dialog setting is not enabled, this is an existing bug, and maybe it could be treated as a separate bug.

Hm, behavior change is a bug, but it may also be a question to a design team @LWinterberg. Also there is another case to be considered when editing via dialog is enabled: select a clip by clicking on the clip's title and the scroll Track Panel so that selection is out of view, then press Ctrl+F2. Dialog appears though clip isn't visible
Thanks! > Also there is another case to be considered when editing via dialog is enabled: select a clip by clicking on the clip's title and the scroll Track Panel so that selection is out of view, then press Ctrl+F2. Dialog appears though clip isn't visible

I would expect the dialog to open, regardless of whether the clip name is visible. Examples in other programs:
1. In file explorer in Windows, select a file, scroll so that it's no longer visible, press Alt+Enter, the properties dialog opens.
2. In Reaper, select and item, scroll so that it's no longer visible, run a command which opens a dialog for the item, such as show media item source properties, or any of the renaming commands, and a dialog opens.

In Audacity, when the dialog option is not enabled, then the current design appears to be that if the clip name is not visible, and the user presses Ctrl+F2, nothing happens. I think it would be a lot more user friendly if in that case pressing Ctrl+F2 caused the name of the clip name to be scrolled into view and then name could be changed. See for example in File Explorer in Windows: select a file, scroll so that it's no longer visible, press F2 to rename it, the file is scrolled into view, and the file can be renamed.

Obviously, for users of screen readers, a command silently failing because the clip name is not visible is very unhelpful. Currently screen readers need the dialog option enabled for the renaming to be accessible, but when Audacity moves to Qt that hopefully will no longer be the case.This  fix introduces slightly different bugs when interacting using the keyboard.
Issue 1:
1. place the cursor just before the first clip.
2. Press Alt + period to select the first clip.
3. Press Ctrl + F2 to edit the name. Type in a new name and press Enter.
4. Press Alt + period to select the second clip.
5. Press Ctrl + F2 to edit the name. The name is NOT opened for editing. But pressing Ctrl + F2 again does open it for editing.

Issue 2.
Having selected a clip using the keyboard pressing Ctrl + F2 repeatedly keeps toggling whether or not the name is open for editing. It shouldn't - once opened, Ctrl + F2 should not close it. This looks a lot better, however it introduces a bug for keyboard users. Prior to the fix, when the option ""Use dialog for the name of a new label"" was enabled, there were no problems. This is now not the case, when the start of a clip is visible, but its name is not. For example:
![image](https://user-images.githubusercontent.com/11887021/208079641-4b2adcf6-d9a7-4f24-a2a7-ceb8717a55e1.png)
When you use alt + period to select the second clip in the example, the name of the clip remains invisible, because the select next clip command only ensures that the start of the clip is visible (it was written before there were clip names). So when you press ctrl+f2 to edit the clip name, nothing happens regardless of the ""use dialog for the name of a new label"" setting.
In the case when the dialog setting is enabled, this is a new bug, and I think needs to be fixed i this pull request. One solution would be to not check for visibility of the name when this setting is enabled, as was done prior to this fix. This would ensure that it always worked.
In the case where the dialog setting is not enabled, this is an existing bug, and maybe it could be treated as a separate bug. This now looks fine. If the dialog option is enabled, you can rename a clip regardless of the visibility of the clip name.
The behaviour when the dialog option is not enabled, and the clip name is not visible is a separate issue (and I think could be made more user friendly).","This  fix introduces slightly different bugs when interacting using the keyboard.
Issue 1:
1. place the cursor just before the first clip.
2. Press Alt + period to select the first clip.
3. Press Ctrl + F2 to edit the name. Type in a new name and press Enter.
4. Press Alt + period to select the second clip.
5. Press Ctrl + F2 to edit the name. The name is NOT opened for editing. But pressing Ctrl + F2 again does open it for editing.

Issue 2.
Having selected a clip using the keyboard pressing Ctrl + F2 repeatedly keeps toggling whether or not the name is open for editing. It shouldn't - once opened, Ctrl + F2 should not close it. This looks a lot better, however it introduces a bug for keyboard users. Prior to the fix, when the option ""Use dialog for the name of a new label"" was enabled, there were no problems. This is now not the case, when the start of a clip is visible, but its name is not. For example:
![image](https://user-images.githubusercontent.com/11887021/208079641-4b2adcf6-d9a7-4f24-a2a7-ceb8717a55e1.png)
When you use alt + period to select the second clip in the example, the name of the clip remains invisible, because the select next clip command only ensures that the start of the clip is visible (it was written before there were clip names). So when you press ctrl+f2 to edit the clip name, nothing happens regardless of the ""use dialog for the name of a new label"" setting.
In the case when the dialog setting is enabled, this is a new bug, and I think needs to be fixed i this pull request. One solution would be to not check for visibility of the name when this setting is enabled, as was done prior to this fix. This would ensure that it always worked.
In the case where the dialog setting is not enabled, this is an existing bug, and maybe it could be treated as a separate bug. This now looks fine. If the dialog option is enabled, you can rename a clip regardless of the visibility of the clip name.
The behaviour when the dialog option is not enabled, and the clip name is not visible is a separate issue (and I think could be made more user friendly).","Resolves: #3704 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""Container""
 It would be nice to keep the comment
 This adds detection of changes in the selected interval of time, but removes detection of changes of the binary selection state of tracks.

Why don't we do both, with two subscriptions?
 Should analogous changes be made for note tracks?  It might make sense but there would be less demand for such corrections.
 Reverted it back. Case which can't be covered with `ViewInfo::selectionRegion` is when you click on an empty space of the `TrackPanel` Not sure if I understand your question correctly, but there is no midi clip name editing feature yet. Will do Thanks!"
4179,2023-01-13T02:15:17Z,2023-01-25T11:52:03Z,Paul-Licameli,2,4,7,842,68,2,1,"['Effects (EGATs)', 'refactoring']",515556.0,2,1071411.0,0,0,0,0,51394450.58955,,0,7,1,False,"['Ryan-Miller-Audacity', 'Paul-Licameli']","I have rebased onto recent master, which had no conflicts.

I added a commit to fix the Windows build, and another to answer the suggestion to move two static member functions out of Effect.
 Completed sanity checks of mix and rendering of effect stacks, exporting audio, and applying built in/Ladspa effects.Few suggestions, there is a build error that should be fixed","Few suggestions, there is a build error that should be fixed","Resolves: *(direct link to the issue)*

Some reorganization of effect code, before those that have an ""Init()"" might also become ""PerTrackEffects""
(such as EQ and Noise Reduction), and thus possible to put into the sidebar.

UI-related abstract base classes are moved out of the lower-level libraries that should be concerned only with
calculations.

There is still some state in the Effect objects (even in so-called ""stateless"" effects) related to the overall context
of tracks and open windows.  This begins to eliminate some of that other state.

QA:  please sanity-check:

Rendering of effect stacks
Destructive application of built-ins and Ladspa effects (don't need many variations of settings)


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Not sure that I understand what's the point of this change, considering that all (or many of them) effects are descendant from `Effect`, so leaf classes now have two `mUIParent` variables (and the one that is from `Effect` class isn't used?) As a members those functions make sense here, but not much sense as a statics. I'd suggest to move them out from these class completely I want to eliminiate Effect::mUIParent.  This pull request does not complete that.  It does remove direct uses of it in subclasses, which instead shadow it.  Stateless subclasses store it in the Validator object instead of the effect, which is even better, eliminating some state.

To eliminate it entirely requires rewriting of Effect::MessageBox and its many uses.  That is to be done later.
 I don't know why it's so bad to make them statics, but as functions related specially to user interface, they might make more sense as static utility members of EffectUIValidator."
2696,2022-03-21T02:06:21Z,2023-01-24T16:12:01Z,MridulTi,1,0,1,3,1,1,1,[],27157.0,0,26748341.0,0,0,0,0,51465258.787075,,0,1,0,False,['LWinterberg'],remember to sign the CLA and check the relevant boxes above,,"Resolves: #2586

removed Vari-Speed Play option from the Preferences-> Playback

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior",
4228,2023-01-24T12:29:23Z,2023-01-24T13:07:25Z,Paul-Licameli,2,0,3,26,2,1,1,['Build / CI'],652.0,1,2286.0,0,0,0,0,51476334.108342,,0,3,1,False,"['crsib', 'Paul-Licameli']","Straight to merge, agreed?
 Yeah, but please let the CI to pass first ",,"Resolves: *(direct link to the issue)*

A little more helpfulness in the modules graph by-product of the build system.

No change in the built program.  Nothing for QA to test.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4216,2023-01-20T15:19:22Z,2023-01-20T16:04:58Z,crsib,0,0,1,1,1,1,1,[],,0,2743.0,0,0,0,0,51811280.369063,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4208,2023-01-19T11:33:19Z,2023-01-20T12:37:26Z,vsverchinsky,1,0,1,9,2,1,1,[],6586.0,0,90289.0,0,0,0,0,51823699.367827,,1,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build: audacity-win-3.3.0-alpha-20230119+ab9ad53-x64

This now works fine on W10 
a) with resized meters docked
b) with resized meters un-docked

_Thanks for fixing this Vitaly, it's been annoying several Forum users- and me too, as I record with an enlarged recording meter._",,"Resolves: #4057 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4200,2023-01-17T19:28:59Z,2023-01-17T20:15:38Z,Giermann,0,0,1,4,1,1,1,[],,0,212908.0,0,0,0,0,51845342.493519,,0,1,0,False,[],,,"The german ""Rechners"" refers to a computer. All other instances of ""host"" or ""audio host"" are kept as ""Host"", so use it in Audio Setup tool bar as well. Further the keyboard shortcut ""A"" was used twice, although I was not able to us keyboard navigation in Windows in that toolbar.


- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4199,2023-01-16T23:28:34Z,2023-01-17T19:52:52Z,Paul-Licameli,2,1,4,186,32,1,1,['Build / CI'],65300.0,1,73462.0,0,0,0,0,52056815.681873,,0,4,1,False,"['crsib', 'Paul-Licameli']","> This PR makes very hard to understand the library dependencies **from the code**. Relying on additional tools does not seem particularly useful to me. TBH, I've never done that personally besides the times you've shown me it during the call.
> 
> I don't have very strong opinion on this, so I will approve PR anyway.

Thank you . Do you also agree to merge it at once without pausing for QA? > Do you also agree to merge it at once without pausing for QA?

Sure!This PR makes very hard to understand the library dependencies **from the code**. Relying on additional tools does not seem particularly useful to me. TBH, I've never done that personally besides the times you've shown me it during the call.

I don't have very strong opinion on this, so I will approve PR anyway.","This PR makes very hard to understand the library dependencies **from the code**. Relying on additional tools does not seem particularly useful to me. TBH, I've never done that personally besides the times you've shown me it during the call.

I don't have very strong opinion on this, so I will approve PR anyway.","Resolves: *(direct link to the issue)*

Make fewer edges in the graphviz output in modules.dot.svg by allowing inherited
dependencies on wxBase from any library, or module, or Audacity and removing some
other unnecessary edges.

This will aid understanding as libraries and modules become more numerous.

Color what is not toolkit-neutral red, and what is, green.

Before:
![modules dot](https://user-images.githubusercontent.com/11670369/212779547-ac56c452-dff4-47c7-bd09-17e4cfd6547b.svg)

After:

![modules dot](https://user-images.githubusercontent.com/11670369/212915594-a2193cdc-e08c-42c0-b1bd-ea9fc622099b.svg)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",I wonder if `define_property` is needed. But probably not
4104,2022-12-23T09:31:41Z,2023-01-17T08:35:37Z,vsverchinsky,0,1,1,4,1,1,1,[],,0,2156670.0,0,0,0,0,52097423.030792,,1,1,0,False,[],"Just one unused variable to delete
","Just one unused variable to delete
","Resolves: #3877

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Unused variable
"
4099,2022-12-22T12:46:20Z,2023-01-16T18:39:41Z,vsverchinsky,3,4,1,31,1,2,1,[],2103.0,0,2181254.0,0,0,0,0,52147562.532106,,1,1,0,False,"['LWinterberg', 'SteveDaulton']","Is there an AppImage available?
I'm no longer building Audacity, so I can only test when an executable is available for Linux. > Is there an AppImage available? I'm no longer building Audacity, so I can only test when an executable is available for Linux.

https://github.com/audacity/audacity/actions/runs/3757871172#artifacts It works for me.
I can't comment on code correctness.Approved but with some questions about a possible old bug, not introduced by this PR
","Approved but with some questions about a possible old bug, not introduced by this PR
","Resolves: #2196 

Fixes issue when original clip names are lost due to name transformations applied at the end of a `WaveTrack::Paste`

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What is the reason for the correction by a sample duration?
Might it be better to substract one-half of that amount?
 I could ask the same here.

But, I see this only preserves old logic, whether that treats the boundary condition right or wrong.

Maybe there is a bug to discover here, but not one introduced by this commit.
 Yes, correct, that could be one-half
Thanks! Or, not... it is possible that there could be 1 sample-length clip that has a beginning at `oldT1 - 1/rate`, and at such clip should not be moved (this is guaranteed by `>`), but considering that clips aren't bound to be aligned to a track's sample grid (and cursor position/selection too), it is actually possible that some clip starts somewhere between `oldT1 - 1/rate` and `oldT1 - 0.5/rate` and such clip should be adjusted"
4120,2022-12-27T15:31:33Z,2023-01-16T13:38:38Z,vsverchinsky,1,0,1,11,1,2,2,[],1138932.0,1,1721243.0,0,0,0,0,52165662.742149,,0,1,1,False,['dozzzzer'],Verified,,"Aux buses aren't supported yet, set speaker arrangement to kEmpty for both input and output aux bus types

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4158,2023-01-08T16:20:24Z,2023-01-13T13:39:23Z,Paul-Licameli,3,0,2,259,17,1,1,"['refactoring', 'dependency breaking']",173934.0,2,422361.0,0,0,0,0,52424815.86428,,0,2,1,True,"['Ryan-Miller-Audacity', 'Paul-Licameli']","Force push onto recent master required some conflict resolution but only in the #include lines.

 @dozzzzer @Ryan-Miller-Audacity just some sanity checking of behavior of menus and toolbars.
 Verified sanity checking of menus/toolbars on Windows and MacOS via build: https://github.com/audacity/audacity/actions/runs/3885277388Refactor looks good.",Refactor looks good.,"Resolves: 

The strongly connected component of six files:
   CommandFlag
   CommandManager
   Menus
   ToolBar
   ToolDock
   ToolManager

-- is broken up.  Two cycles of two still remain:
   ToolBar
   ToolDock

and
   CommandManager
   Menus

<img width=""127"" alt=""image"" src=""https://user-images.githubusercontent.com/11670369/211207416-4cd46af4-0613-4639-a96d-e52db57aba3d.png"">



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4173,2023-01-12T07:23:16Z,2023-01-13T13:11:19Z,Paul-Licameli,2,3,14,1251,76,2,1,[],21721.0,0,107287.0,0,0,0,0,52426520.216813,,0,14,0,False,['Paul-Licameli'],"A force push only to add, at the proper commit in the sequence, a missing #include 
 Sorry for the force push.  Only minimal changes to rebase onto latest master, resolve a simple conflict in include directories of AudioIO.cpp, and fix the Windows link with visibility of the structure `RealtimeEffectManager::AllListsLock`A very welcome PR! Please fix the link failure before merging.",A very welcome PR! Please fix the link failure before merging.,"Resolves: #1136 

GUI Toolkit-neutral library for the audio engine; and a subset of that, just for the realtime effect management, can
be turned into another small library that it depends on.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I wonder why playback tracks should be writable Later commit addressed that, yes? Yes!"
4178,2023-01-12T15:34:27Z,2023-01-12T15:36:19Z,crsib,0,0,1,1,1,1,1,[],,1,117.0,0,0,0,0,52504221.250437,,0,1,0,False,[],Cheers for this PR.  Just what I needed.,Cheers for this PR.  Just what I needed.,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4166,2023-01-10T12:53:12Z,2023-01-12T14:38:55Z,Paul-Licameli,0,0,6,402,180,1,1,"['refactoring', 'code quality']",,1,179147.0,0,0,0,0,52507668.545805,,0,6,1,False,[],Possibly clean up the header includes in ImportMP3_MPG123.cpp as well.,Possibly clean up the header includes in ImportMP3_MPG123.cpp as well.,"Resolves: *(direct link to the issue)*

Remove various things in the source code that have become unused.

This includes many #include directives, some of which are incompatible with certain module extractions to come.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4155,2023-01-07T10:16:43Z,2023-01-11T14:02:20Z,RayAsh37,4,0,1,4,1,1,1,[],199884.0,0,407529.0,0,0,0,0,52547877.614642,,0,1,0,False,"['dozzzzer', 'LWinterberg', 'petersampsonaudacity', 'Paul-Licameli']","Testing on W10 with @RayAsh37 's branch build:

1)  This works fine for a Virgin install of this (3.3.0) branch build.

2) When upgrading from an earlier version 
a) any settings that the user made and (expected to keep) in the earlier version use of Noise Reduction are properly _**not overwritten**_  by the new 6, 6, 6 default.
b) However 
**IF**  the user has not made any changes to the default settings in Noise Reduction when using it in earlier Audacity versions
**THEN** Audacity overwrites the old 12, 6, 3 default with the new 6, 6, 6  default
_Both a) and b) are quite cunning, as users who have always used Audacity's default will now get Audacity's new default - but users who have carefully changed settings to suit them will get to retain their previous settings._

So this looks functionally good to me.


@crsib @Paul-Licameli   @LWinterberg  do I assume correctly that this will also need a code review before it can be pulled into master ? The code change is trivial.

It only needs a decision whether this is right to do.

Do we want our QA to do ear testing to decide whether they agree with the change?  Not merely to verify that the settings do change as specified.
 Verified After a bit more testing and research, I found the softer approach of 6,6,6 slightly beneficial. Especially when ramping the reduction amount, the wider smoothing felt better, particularly on spoken content. I wasn't able to form a strong opinion either way for musical content.

Overall, I think 6,6,6 is a somewhat ""safer"" starting point for noise reduction than 12,6,3 is. ",,"Made the required changes as mentioned in issue  #4147 to update the values from 12, 6, 3 to 6, 6, 6

Resolves: #4147 

*(short description of the changes and the motivation to make the changes)*
This is the requested change as mentioned in the Issue to change the default values for the Noise reduction effect

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4152,2023-01-06T13:57:02Z,2023-01-11T16:43:12Z,Paul-Licameli,5,2,19,988,23,2,1,"['refactoring', 'menus']",256528.0,2,441974.0,0,0,0,0,52586616.143317,,0,19,1,False,"['dozzzzer', 'ksoze95', 'Paul-Licameli']","There are quite a few menu items that are not in the same order as they were pre-refactoring.

### Scriptables I
Before
![before_scriptables_i](https://user-images.githubusercontent.com/101076697/211315842-0b1392e3-3fe6-4ed5-8de5-31013914bec0.png)
After
![after_scriptables_i](https://user-images.githubusercontent.com/101076697/211315874-b1c64454-220f-4f0c-aeb5-43e1d8b5bc3b.png)

### Scriptables II
Before
![before_scriptables_ii](https://user-images.githubusercontent.com/101076697/211315844-20895ebc-eb53-4f2e-a24b-510d3bb027a9.png)
After
![after_scriptables_ii](https://user-images.githubusercontent.com/101076697/211315877-5a7496aa-7471-4af4-92f5-414b274c3f98.png)
 I have pushed a commit that fixes the ordering.  To observe the fix, you must first remove audacity.cfg.
 Latest force push rebases onto recent master, resolving a simple conflict in PluginMenus (Recent a5be6e4781a22430665a7341d1150de090994544 also deleted some lines), and squashes the fixup commit for the ordering of scriptables.  Now it is ready for QA to test.
 @dozzzzer :  sanity checks on the two Scriptables sub-menus of Extra

Also in the Tools menu: Macro Manager, Apply Macro, Palette..., inidividual named macros,
 VerifiedRefactoring looks good.  Verified that both the Scriptables I and II menu items are in the same position as they were before the refactor.",Refactoring looks good.  Verified that both the Scriptables I and II menu items are in the same position as they were before the refactor.,"Resolves: 

More scattering of registered menu items, all related to macros.

This is required macro handling to be separated into a module.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The position of the ""Import..."" and ""Export..."" menu items moved from in between the ""Help"" and ""Open Project..."", now moved to the end of ""Extra/Scriptables II"" submenu.  Is this okay? Changes in orderings are not intended.  So I should fix it.
"
4161,2023-01-09T16:21:52Z,2023-01-11T16:41:07Z,Paul-Licameli,3,0,1,56,20,1,1,[],77490.0,0,173959.0,0,0,0,0,52586744.02343,,0,1,0,False,"['dozzzzer', 'Paul-Licameli']","Force pushed just to squash the two commits and rebase onto recent master; no other changes
 Sanity checks then on the editing of project metada.
 Verified",,"Resolves: #1099

Extract a library for audio file metadata, which is used in import and export

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4162,2023-01-09T17:04:37Z,2023-01-11T12:07:55Z,crsib,0,0,1,4,2,1,1,['Build / CI'],,1,155001.0,0,0,0,0,52603139.251007,,0,1,1,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4149,2023-01-05T13:26:03Z,2023-01-10T01:16:22Z,Paul-Licameli,0,3,12,1644,26,2,1,"['refactoring', 'menus']",,2,388223.0,0,0,0,0,52728633.694678,,0,12,1,False,[],,,"Resolves: 

Some dependencies that block some future module extractions are broken;
to do that, more menu items are registered.

So this is mostly just boring cutting and pasting.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This submenu has moved from Extra->Play-At-Speed to now Extra->Play-At-Speed->Play-At-Speed.  Is this intentional? Actually this is not a mistake:  the sub-menu, and then the items within the sub-menu, are registered separatedly, each with a correct path, and when I run the program, the menu is correct.

The code might be simpler with one registration, but it is not wrong.
 Apologies, it looks like that I might have cut and paste (with a bit of further fixup) incorrectly applied the code transformations for the commit on my local machine."
3870,2022-10-28T16:02:05Z,2023-01-06T10:40:47Z,Paul-Licameli,1,4,16,1247,42,2,1,[],5981931.0,2,6028726.0,0,0,0,0,53040371.081583,,1,16,1,False,['dozzzzer'],Verified,,"Resolves:

To prepare for extraction of individual toolbars into separate modules, leaving the
general toolbar system itself open-ended: eliminate the enumeration of toolbar types.

There is still mention of toolbar types, but only by string identifiers describing the default
configuration, and it is allowed for the lookup of one of the names to fail.

There was already a registration of toobar types but not yet complete open-endedness.
This isn't really complete yet either -- ideally toolbars should register their own preferred
placements with hints, as do the menu items.

But review is invited for the existing commits which are not likely to change.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Could we make this and IsVisible const
 Should the GetToolBar call ScrubberToolBar::ID() instead of wxT(""Scrub"")? No:  that would make an undesirable dependency cycle.

The Scrubbing toolbar (and each other toolbar) should be easily extractible as a module.  Such a cycle would prohibit that.

Lookups by string, which may fail, are a weaker sort of dependency.

Notice the null check on toolbar and also my new comment.

A lot of old scrubbing code (which I wrote, years ago) makes some difficult tangling in the core application that I must still figure out.
 Done
"
4145,2023-01-04T01:48:11Z,2023-01-05T20:03:57Z,Paul-Licameli,0,0,1,48,5,1,1,[],,1,152150.0,0,0,0,0,53092983.42867,,0,1,0,False,[],,,"Resolves: #4106

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4052,2022-12-12T07:20:30Z,2023-01-05T13:08:31Z,Paul-Licameli,5,0,16,385,2,1,1,[],22681.0,2,2094485.0,0,0,0,0,53117911.735409,,0,16,1,False,"['ksoze95', 'Paul-Licameli']","> There seems to be a regression with this refactoring. Under windows, when I chose the audio device host as ""Windows DirectSound"" the Playback device menu item is disabled, however the ""Audio Settings..."" shows that the playback device is ""Primary Sound Driver"".
> 
> This regression seems to happen with commit [42ca39b](https://github.com/audacity/audacity/commit/42ca39b5abd50a8309a0b849dc5a8ae4b011ed4b)
> 
> Could [4e3a7ab](https://github.com/audacity/audacity/commit/4e3a7ab9e7f7040f0e2256f16e51ee89881fab4b) be fixup/squash with an earlier commit so that the later commits also build under Windows.

That is ""Don't use hidden menu to track chosen output device"" @ksoze95 I squashed the Windows build fix as you asked.  Now the bad commit is at a different hash.
 Only tested on Windows, the latest commit seems to have made the ""Playback Device"" menu item behaviour worst.  Starting without a audacity.cfg file, the ""Playback Device"" menu option is always disabled, no matter what I choose as the host. I squashed the small bug fix commit into its proper place in the commit sequence.  There is no new net change in the source tree after the force push.
 Rebased again onto more recent master but unchanged.
There seems to be a regression with this refactoring.  Under windows, when I chose the audio device host as ""Windows DirectSound"" the Playback device menu item is disabled, however the ""Audio Settings..."" shows that the playback device is ""Primary Sound Driver"".

This regression seems to happen with commit 42ca39b5a

Could 4e3a7ab9e7f7040f0e2256f16e51ee89881fab4b be fixup/squash with an earlier commit so that the later commits also build under Windows.","There seems to be a regression with this refactoring.  Under windows, when I chose the audio device host as ""Windows DirectSound"" the Playback device menu item is disabled, however the ""Audio Settings..."" shows that the playback device is ""Primary Sound Driver"".

This regression seems to happen with commit 42ca39b5a

Could 4e3a7ab9e7f7040f0e2256f16e51ee89881fab4b be fixup/squash with an earlier commit so that the later commits also build under Windows.","Resolves: *(direct link to the issue)*

QA:  sanity checking that behavior of the Audio Setup toolbar has not changed

Use of wx/menu.h should be limited to just one place in the whole source tree, behind a
facade interface.

This rewrite of AudioSetupToolBar.cpp does not yet remove wx/menu.h but is a step toward
that.

The toolbar was using the checkmark sates of items of hidden wxMenu objects to track
the state of choices the user has made.  But that can be done instead with vectors of
strings and indices into them.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4133,2023-01-01T02:06:17Z,2023-01-04T18:21:07Z,abhi-kr-2100,15,0,2,12,10,2,2,[],204.0,1,317691.0,0,0,0,0,53185561.140361,,0,2,1,False,"['abhi-kr-2100', 'petersampsonaudacity', 'crsib', 'LWinterberg', 'Tantacrul']","While .png icons for cut, copy and paste exist inside [libraries/lib-theme-resources/classic/Components](https://github.com/audacity/audacity/tree/master/libraries/lib-theme-resources/classic/Components), `Delete.png` and `DeleteDisabled.png` need to be added. The source for these icons can be found at https://github.com/musescore/MuseScore/blob/master/fonts/mscore/MusescoreIcon.ttf,  is the glyph in question (it's inside a private use area and won't render outside the musescore icon font)

you'll need to color them manually in an image editor though. Be aware that the four themes (classic, light, dark, high contrast) each need their own versions. I've added the icons for the delete button. However, I ran into something weird, so the reviewers might want to pay special attention to it:

At first, I tried to obtain the colors for `DeleteDisabled.png` by color picking from `CutDisabled.png`, but in the running app, the disabled delete button ended up looking almost as bright as the enabled delete button. So, I've color picked from the running app. This worked as expected but inside Windows Explorer, `CutDisabled.png` and `DeleteDisabled.png` look quite differently colored. Testing on W10 with @abhi-kr-2100 's   branch build:  audacity-win-3.3.0-alpha-20230101+c23548e-x64-msvc2022

This looks good to me in this branch build:
a) The Delete button does indeed delete the selection - and properly does _**not**_ replace the clipboard contents
b) the Cut button deletes the selection - and properly **_does_** replace the clipboard contents
c) the Delete button icon is as @DilsonsPickles specified in the Figma spec

![image](https://user-images.githubusercontent.com/50205984/210176037-0ebe279f-b7e9-48b5-8606-844c3c2f6583.png)
 I have one suggestion. When there is no audio selected, the delete button should be disabled.
<img width=""645"" alt=""image"" src=""https://user-images.githubusercontent.com/21022311/210268775-a706fe5e-eaba-4f92-b2ce-eae484845bcf.png"">

There is no reason why we should need to show this message:
<img width=""617"" alt=""image"" src=""https://user-images.githubusercontent.com/21022311/210268801-5a261814-67bf-47fc-8522-b2b74bceb155.png"">

I'm aware you see the above message when you use a shortcut to delete but that's a slightly different case, considering that there's no way we can stop people using those shortcuts. However, we can prevent people pressing this new **delete** button and it'll be better UX anyway. One other little comment, although I'm not sure if it is relevant to this PR or not.

When I first opened this, the **cut, copy, paste** toolbar was moved to a second row under the main toolbar. Resetting my configuration fixed this. I only mention it to make sure we don't accidentally revert our changes that make the **cut, copy, paste** toolbar hidden by default, and when one does enable it, that it appears in the right place. @petersampsonaudacity, let me know if you spot this.

Thanks @abhi-kr-2100 ! > I have one suggestion. When there is no audio selected, the delete button should be disabled.

@Tantacrul   Same then should also be true for Cut and Copy when there is nothing selected - and for Copy when there is nothing on the clipboard.

1. clear Audacity settings folder
2. launch the branch build
3. enable the Cut/Copy/Paste toolbar
4. Observe: the Paste button is bold/enabled - but there is nothing on the clipboard
5. import some audio
6. Observe: now the Cut, Copy and Delete buttons are bold/enabled too - though nothing is selected

BTW this erroneous button behavior is a regression introduced somewhere between 2.0.0 and 2.4.2 _(I don't have time to bisect right now, sorry - will do so later, tomorrow)._

**Do we need to log a separate regression bug for this?
Making the buttons inactive/disabled when they should be disabled would avoid the error message in the buttons use-cases**

 Enabled ""Paste"" is an older bug of Audacity. It was not fixed. > When I first opened this, the **cut, copy, paste** toolbar was moved to a second row under the main toolbar.

I don't see that

1) when I pseudo-upgrade from 3.2.2 to this branch and then enable Cut/Copy/Paste I see:
![image](https://user-images.githubusercontent.com/50205984/210273048-c6ed8157-ee9e-42a8-8d0c-f4dfd8d99fc2.png)


2) If I pseudo virgin install this branch and then enable Cut/Copy/Paste I see:
![image](https://user-images.githubusercontent.com/50205984/210273207-9598f1d5-571f-44f2-87e7-6d4d5be77162.png)
 > Enabled ""Paste"" is an older bug of Audacity. It was not fixed.

@crsib Is it a logged bug Dmitry? I have no idea. But the toolbar buttons reflect the state of the ""Edit"" menu. > Enabled ""Paste"" is an older bug of Audacity. It was not fixed.

@petersampsonaudacity - is it a bug? I saw you mention it a week or so ago and I forgot to respond. The problem you identified, IIRC, was that if you copied text on your clipboard somewhere else, then the Paste button is active.

I'm wondering if that is wrong, bearing in mind you could paste that into a label?
 > > Enabled ""Paste"" is an older bug of Audacity. It was not fixed.
> 
> @petersampsonaudacity - is it a bug? I saw you mention it a week or so ago and I forgot to respond. The problem you identified, IIRC, was that if you copied text on your clipboard somewhere else, then the Paste button is active.

I no longer think this is entirely true

1) If I reboot my PC (so there is no data on my Windows clipboard) and then launch Audacity i observe that the Paste button is active/enabled even though there is no data to post.

2) The other thing to bear in mind is that there are two clipboards
a) the Windows clipboard that normally contains alphanumeric text
b) the Audacity clipboard that contains chunks of audio track or chunks of label track

The Paste command and button is a little odd in that it can:
i) Paste chunks of audio track  from the Audacity clipboard into audio tracks
ii) Paste chunks of label track  from the Audacity clipboard into label tracks
iii) but _(surprisingly, to me anyway)_ paste alphanumeric text from the Windows clipboard into a label

In contrast to iii) what the Paste command **_cannot_** do is to paste alphanumeric text from the Windows clipboard into other alphanumeric fields in Audacity:
iv) Directories prefs
v) Keyboard prefs
vi) Edit > Metadata
vii) Import and Export dialogs
For all these only the Windows shortcut **Ctrl+V** will work 

As with the Copy and Cut buttons issue (and the commands, as @crsib has pointed out) the Paste button also appears to be a regression created somewhere between 2.0.0 and 2.4.2.  I will try to find some time later today to test in which version the regression occurred and then I will log the bug.

@Tantacrul @petersampsonaudacity 
Meanwhile since this residual issue also affects Cut, Copy and Paste too. maybe we could just allow this pull request to be pulled into master for 3.3.0 - and deal with the residual for all buttons as a separate logged issue?

_That would enable me to then get on with updating the Reference Manual._ **ARGH**  -  now I'm totally mindblown ...

If I clear my Audacity settings folder and then launch @abhi-kr-2100 's branch and enable the Cut/Copy/Paste toolbar
I now see the Cut, Copy and Delete buttons alll grayed out and the associated commands grayed out too:
![image](https://user-images.githubusercontent.com/50205984/210340330-80e1bd36-cf84-4c4b-b87e-8e5ba3e77fb4.png)

The only difference between yesterday and today is that I rebooted my PC this morning - so go figure ...


This means that:
a) I do not see the active Delete button that @Tantacrul saw
b) the only issue is the active paste that should not be active - are we bothered about that?
 I think you might be right that if this PR is not introducing issues (ie: if they were already there), then we should fix them separately. I'll leave it up to @crsib to determine if this is the case. Thanks @petersampsonaudacity !",,"Signed-off-by: Abhishek Kumar <abhi.kr.2100@gmail.com>

Resolves: #4131 

Add a delete button to the Cut/Copy/Paste toolbar

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior",
4108,2022-12-23T16:29:16Z,2023-01-04T15:33:48Z,pietro68,0,0,1,84,3,1,1,[],,0,1033473.0,0,0,0,0,53195602.30613,,0,1,0,False,[],,,"Resolves: #4107 

Some of the parameters do not require a full re-initialization of the reverb when changed.
When taking advantage of this, users will be able to hear the reverb when tweaking one of them.


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4095,2022-12-21T17:45:21Z,2023-01-04T13:11:02Z,pietro68,0,16,6,946,3,2,1,[],,2,1193141.0,0,0,0,0,53204172.089534,,0,6,0,False,[],"My suggestions for improvement are all minor.
","My suggestions for improvement are all minor.
","Resolves: #3702

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Replace 50.0 with the named constant `mDefaultParam2` consistently with the other parameters
 I don't understand the comment
 ID_TYPE and other constants become unused, so may be removed from the header
 Oh, I see they are still used in `UpdateUIControls`.  That made me fear a bug -- that there was code still finding controls by id.  But no, there is a switch on ID that then just uses the pointers to controls saved in the validator.

So it is OK
 But ID_Type at least can go
 I'm not satisfied that this is not explained Maybe that can be debugged later
 But at this commit, as with BassTreble, you can change the effect base class to `PerTrackEffect` and also change the #include above.  Then this is not needed
 Now that the lambda's body shrinks to nothing, just remove it.  `parameters` needs no constructor arguments at all.
 indentation You can remove this TODO comment
 good catch, done It was deleted later, just a reminder for me to do something and I forgot it there. ok, removed ok, done ok"
4016,2022-12-05T12:20:47Z,2023-01-03T22:36:31Z,Paul-Licameli,0,12,48,7854,21,2,3,[],,2,2542549.0,0,0,0,0,53256640.662025,,1,48,1,False,[],,,"Resolves: *(direct link to the issue)*

Split up one of the largest single source files in Audacity into several smaller ones with non-cyclic dependencies.

This should make this complicated effect clearer and more maintainable.  It is a starting point before attempting the further problems of statelessness, real-time capability, and faster rendering with multiple cores.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This doesn't seem to be a UI stuff. Why not remove `EffectEqualization48x` too? What the second argument is for? `mCurves` is a local variable name, suggest to remove `m` prefix to avoid confusion More of confusing names All of that 48x stuff will be removed too.  It was an attempt at vectorizing the calculations someone wrote years ago but it doesn't compile on all machines and besides, I think there are better ways to exploit parallelism.
 See explanation in ShuttleAutomation.h.  It isn't a pure virtual function, but something like the compile-time equivalent -- an informal ""concept.""  Certain template expansions expect to pass that argument list.

Compare with other built-in effects.  Those that have been made stateless do not ignore the second parameter.  But these all now generate `FetchParameters` using the template `EffectWithSettings`
 You know I believe strongly in preparing pull requests to be reviewed, understood, and convincingly free of mistakes, and that sometimes means overriding some style conventions if in return, I can made the diffs smaller and easier to review without a lot of extraneous changes.

Are you convinced that this sequence of commits achieves a splitting up of files but without any unintended changes of behavior?  That is what I want to know.

But if you like, I can restore more conventional variable names.  I do that now in a new commit.  Please review that too.
 > Are you convinced that this sequence of commits achieves a splitting up of files but without any unintended changes of behavior? That is what I want to know.

Pretty much I'd expect that entity called Task is a callable object or at least have `Run` or `Execute` or similar named method Isn't `WaveTrackUtils.h` suitable for utility functions like this one? Wait for further developments... ;-)

 True
"
4110,2022-12-23T18:05:57Z,2022-12-29T11:51:14Z,AdventurerRussia,0,0,1,2,1,1,1,[],,0,495917.0,0,0,0,0,53727364.837015,,0,1,0,False,[],,,"grammatical error

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4129,2022-12-28T16:32:43Z,2022-12-29T11:40:33Z,crsib,0,0,3,1482,27,1,1,['Build / CI'],,1,68874.0,0,0,0,0,53728004.064049,,0,3,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4130,2022-12-29T03:42:37Z,2022-12-29T10:39:46Z,Gootector,0,0,1,6,1,1,1,[],,0,25029.0,0,0,0,0,53731657.154724,,0,1,0,False,[],,,"Update Polish Translation from Transifex
Restored 'limiter' (https://pl.wikipedia.org/wiki/Limiter).
This is the last update for Polish. In the next year, I'm going to 'from version to version' updates.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4122,2022-12-27T19:04:33Z,2022-12-28T22:18:22Z,Ariel-M,0,0,1,1,1,1,1,[],,0,98030.0,0,0,0,0,53776142.273081,,0,1,0,False,[],changes understood and tested,changes understood and tested,"Resolves: https://github.com/audacity/audacity/issues/3932

added Classic Filters to EQ and Filters menu

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4128,2022-12-28T14:20:16Z,2022-12-28T14:24:41Z,crsib,0,0,1,5,1,1,1,[],,0,269.0,0,0,0,0,53804562.348328,,0,1,0,False,[],,,"
- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3918,2022-11-11T13:19:58Z,2022-12-28T10:37:47Z,crsib,2,9,5,9627,76,4,3,['Build / CI'],332185.0,2,4051073.0,0,0,0,0,53818178.695183,,1,5,0,False,['crsib'],"@ksoze95 I've pushed the fixes in a separate commit. Can you please review? >Does this changeset also cleanup the rpath handling on Linux builds? 

It sets rpath to `$ORIGIN` for libraries, `$ORGIN:$ORGIN/..` for modules, similar to what @bdrung proposed. It works for the Conan enabled case as well.Does this changeset also cleanup the rpath handling on Linux builds? In the past we have seen the rpath pose (e.g. https://github.com/audacity/audacity/issues/3289, https://github.com/audacity/audacity/pull/3671). I haven't had a chance to run this through the Fedora build system yet (and I have actually been a bit busy so I haven't had a chance to try 3.2 with it yet), but in the past we have had to strip the rpath from the private libraries and modules (https://src.fedoraproject.org/rpms/audacity/blob/rawhide/f/audacity.spec#_206).","Does this changeset also cleanup the rpath handling on Linux builds? In the past we have seen the rpath pose (e.g. https://github.com/audacity/audacity/issues/3289, https://github.com/audacity/audacity/pull/3671). I haven't had a chance to run this through the Fedora build system yet (and I have actually been a bit busy so I haven't had a chance to try 3.2 with it yet), but in the past we have had to strip the rpath from the private libraries and modules (https://src.fedoraproject.org/rpms/audacity/blob/rawhide/f/audacity.spec#_206).","**This PR introduces breaking changes to the build system**
**The old build directory must be removed!**

This commit addresses the following problems of the build system:

* Shared libraries management is very complex - libraries are copied as a post build step to the desired location.
  This easily breaks, if library modification does not result in the executable file relink. *macOS* still requires a custom
  build step to set the  portable library names inside a bundle. This step will be dropped after Conan 2.0 is released.
* conan-cmake likely will not gain the support for Conan 2.0
* Dependency managements is quite complex and knows too much about Conan
* At the same time - the approach taken is not configurable enough to properly support Qt
* Instead of using `find_package` for all the dependencies, we sometimes use `pkg-config`. 
  This further complicates the CMake code.

In this PR:

* `conan-cmake` is removed
* `AudacityDependencies` now generates the list of dependencies based on `DependenciesList.cmake`
* Added a much simplified `audacity_find_package` function
* Conan recipe is now written in Python. This allows much more customization to the `imports` section
* Much of the Conan invocation logic  is moved to a python script. This is much more readable and maintainable than the
  CMake script
* Missing Find* modules are added


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think you should reduce cyclomatic complexity by returning early rather than constant nesting. I think you should reverse the logic of this condition and raise the exception instead, then remove else and left indent the rest of the code. Could we replace these preceding spaces with tabs so that they are consistent with the other -D defines?  Or replace all the other with same amount of spaces. Is there a reason JACK is handled differently here than the other packages (e.g. using standard `find_package` instead of the new `audacity_find_package`)? Why did you remove the Fedora preference for system libraries in this CI spec? Keeping this preference is very useful for matching the downstream builds we do on the Fedora infrastructure and repos because we prefer system libraries when possible (and only do local if truly needed). Is there a reason you need to keep the source permissions? In the Fedora build we actually want the libraries to be executable, so permissions of 755 would be appropriate. I haven't looked into why it isn't getting the 755 permissions at build time, but this has been an issue in the past because without the executable bit, the debug info extraction doesn't run and there are no symbols for any of the libraries. Yes, we never build Jack. This keeps the old behavior actually.  `audacity_conan_enabled=Off` implies that system libraries are used for all the Conan managed dependencies. However, you are correct, that this changes the behavior for LV2, so I should put this line back I'm pretty sure that without it will copy the files with 0666 permissions. This should not be an issue for Fedora though - without Conan this step is effectively an no-op, as all the libraries are installed in the previous step."
4123,2022-12-27T21:34:37Z,2022-12-27T23:56:51Z,Gootector,1,0,2,16,1,1,1,[],108.0,0,8535.0,0,0,0,0,53856639.871136,,0,2,0,False,['Gootector'],@petersampsonaudacity Update.,,"Update German Translation from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4118,2022-12-27T11:50:54Z,2022-12-27T11:53:35Z,Gootector,6,0,1,59,1,1,1,[],1881.0,0,37150.0,0,0,0,0,53863049.989002,,0,1,0,False,"['petersampsonaudacity', 'Gootector']","Thanks, but with typo in the title and ""Last-Translator: Grzegorz Pruchniakowski <gootector@o2.pl>, 2020-2022\n"" - 2022 only😆 @Gootector  - my German speaking wife queries (for consistency) wht you have used ""du"" rather than ""Sie"" at line 6122.

She says she has no objection to being duzed by an app - but she does like consistency.   ;-)) @petersampsonaudacity This line is translated by guy who approved and merged this PR. @petersampsonaudacity And I made this PR at the last moment before the release of version 3.2.3. @petersampsonaudacity So... I like consistency also. Polish is ""consistency"" in 100%. German... is no ""consistency"", at this moment, but should be better in the near future. Nice to meet you too 😉 https://github.com/audacity/audacity/pull/4123",,"Update German Translation from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4116,2022-12-27T11:12:29Z,2022-12-27T11:16:48Z,LWinterberg,2,1,1,11,1,1,1,[],24220.0,0,24397.0,0,0,0,0,53878110.246814,,0,1,0,False,"['crsib', 'petersampsonaudacity']",@LWinterberg   shouldn't there also be a note about the new Cut/Copy/Paste toolbar? There is one,,,I wonder if always should start with a capital letter (or otherwise) for consistency sake
3941,2022-11-15T10:56:34Z,2022-12-27T12:44:36Z,LWinterberg,2,0,6,303,9,1,1,[],9157.0,0,3635287.0,1,0,0,0,53896977.618051,,0,6,1,False,"['LWinterberg', 'Paul-Licameli']","Did you mean to base this on the master or the release-3.2.2 branch?
 Not really, no. Some of these changes update strings and IMHO none of them are high-priority enough to warrant an inclusion in the patch releasePlease do an interactive rebase to remove ""[revert] align Light theme on macOS with Win/Lin"" commits ","Please do an interactive rebase to remove ""[revert] align Light theme on macOS with Win/Lin"" commits ","Resolves: #3677
Resolves: #3774
Partially resolves: #3922

This PR does  a handful of oddjobs: 
* It removes some mentions of the wiki and offline manual in favor of the online manual and gitbook
* It adds some new folks to the credits and undoes a separation of exmusers and contributors as requested by the tantaman
* It removes the readme.txt and any of its mentions in the installers (replacing it with the readme.md)
* It removes some bits of Dark Audacity-specific help stuff
* (and apparently is also took in a test I made on a different branch because I didn't pay attention from where I branched and now there's a test commit and its revert in here

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR
- [x] I figured out how to get rid of those bad commits

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4115,2022-12-26T16:51:57Z,2022-12-26T17:48:39Z,crsib,0,0,1,8,1,1,1,"['P1', 'Build / CI']",,1,3406.0,0,0,0,0,53965137.704203,,0,1,1,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4113,2022-12-26T10:01:48Z,2022-12-26T14:20:30Z,crsib,0,0,1,2,1,1,1,[],,1,15525.0,0,0,0,0,53977629.997716,,0,1,1,False,[],,,"
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4112,2022-12-26T09:07:48Z,2022-12-26T14:19:11Z,crsib,0,0,2,14,2,1,1,[],,1,18686.0,0,0,0,0,53977710.748409,,0,2,1,False,[],,,"<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4077,2022-12-16T18:41:58Z,2022-12-23T14:49:23Z,pietro68,0,21,8,327,3,2,1,[],,0,590846.0,2,0,0,0,54235103.6654,,0,8,0,False,[],"Wrong approach to fixing the crash; and more needed to ensure the calculations are the same as in the original
","Wrong approach to fixing the crash; and more needed to ensure the calculations are the same as in the original
","Resolves: #3155 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Would `one_pole_init` be a better name?
 The block of code above might instead be inserted into a new override of RealtimeProcessStart, to be more consistent with how other effects receive notifications of changes of settings, and also later to allow this to be rewritten to use EffectMessage instead.

For now it is not a blocker to merge this.
 This change will conflict with PR #4064 which is still awaiting QA approval and merge.  That will be resolved easily.
 This comment seems to be an undecided point about sound quality.  I haven't yet given it an ear-test.

Did you have other more elaborate ideas about ramping the changes in settings gradually?

Is the Room Size slider perhaps the only one for which it would be very importatn?
 Comment it here, that you pass the numbers that will cause the maximum possible allocation of the buffer just once, even if it is in excess of what is required by the settings passed in initialization after the allocation.
 Is it correct to clear the FIFO whenever you reinitialize?

Or should this be done only when you also use `filter_t_resize_resetting`? If it is correct, maybe write a new function that overwrites the fifo with zeroes, instead of reassigning `fifo.allocation` which would cause an unnecessary `realloc` later.
 ""wraps"" not warps
 DANGER -- mixing unsigned and signed arithmetic.

I think `newSize` and `p->size` which are both `size_t` should first be each cast to `ssize_t` before the subtraction,  which may make a negative value.
 unused variable
 yes, done I have done the rebasing on it. Basically the story is: I started doing the more complicate thing (i.e. preserving as much as possible of what is in the comb/allpass filters) and that ended up having sound artifacts, whereas the simple solution had no artifacts (but then users will hear no reverberation as long as they move the slider).

About more elaborate ideas: we could cross-fade between an instance running with the last settings before a slider was moved, and an instance with the settings currently set by the sliders. But that requires double processing and further complications, I doubt that it would be worth.
 > Is the Room Size slider perhaps the only one for which it would be very importatn?

I think so. done Yes, I found out that if I did not do fifo_clear when I reinitialize, then the output would not sound right (specifically: when dragging the room size slider from 100% to 0% while playing, what I would get would not sound as if I would have started the reverb at 0% from scratch)

And it is true, there is no need to also set .allocation to FIFO_MIN - not doing that, can avoid later allocations. I changed that.
 I always get this mixed up. Totally right - done it. ok, removed No.  Something is wrong here.  This change makes the crash go away but changes the calculations.

We thought we allocated sufficient capacity for the largest size required by any parameters.  The fact of the crash tells us our reasoning was wrong somewhere.  Look closer to see where.

Here it is:  in `filter_array_allocate` is this line (twice):
```
   for (i = 0; i < array_length(comb_lengths); ++i, offset = -offset)
```

So as `offset` (a double between 0 and 1) becomes larger, the size of odd-numbered comb and allpass filters becomes *smaller*.

The alternation of offset between positive and negative should be preserved in `filter_array_init` so it computes the same results as before, but should be removed from the allocation function, being instead constantly equal to the maximum possible value, so that all the filters have sufficient capacity for the size that is computed for any stereo depth value.

(Or really it could alternate between the maximum value and 0 and still make sufficient capacity, if you really want to allocate just sufficient space.)

Please make that change instead.

And make the other changes I suggested too, which are not necessary to fix the crash perhaps, but should be done to be sure the same results are computed.

That is:  `reverb_t` should remember whether `depth` was 0 when `reverb_init` was done, and test that, and not whether `p->out[i]` is null, in `reverb_process`.
 ok, all done now"
4105,2022-12-23T12:03:43Z,2022-12-23T12:20:04Z,KissDaniGH,0,0,1,29,1,1,1,[],,0,981.0,0,0,0,0,54244065.72704,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4075,2022-12-16T11:42:12Z,2022-12-22T19:35:17Z,vsverchinsky,0,8,1,9,1,3,1,[],,0,546812.0,1,0,0,0,54304328.250466,,1,1,0,False,[],,,"Resolves: #3216 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This string should not be empty, for consistency with the other static text boxes in the dialog.
 There is no new code in `OnOK` as for the other options, to save a change of `mHideMIDICC` to the configuration file so that it is used again after restarting the program.
 Is this a reliable naming convention in all effects, or is this only a special case fix for one or a few problematic effects from one vendor?

Is there no other reliable way to decide this from the information in ParameterInfo?
 What does ""CC"" abbreviate?  I still don't know.  Would an uninstructed user know?
 Thanks! > Is this a reliable naming convention in all effects, or is this only a special case fix for one or a few problematic effects from one vendor?

JUCE framework uses such naming template. 

> Is there no other reliable way to decide this from the information in ParameterInfo?

I've spent some time reading the documentation and Steinberg forums and didn't find one. MIDI Control Change.
I'll put that into quotes, in that case ""MIDI CC"" relates to parameter title rather than a term.
On the other hand, considering that we don't support VSTi yet, it might be better remove that option at all. @LWinterberg  I'd say you can safely hide all the MIDI stuff in plainUI mode for the time being, yeah."
4086,2022-12-19T11:43:40Z,2022-12-22T14:30:53Z,Paul-Licameli,0,0,1,35,3,1,1,[],,0,269237.0,0,0,0,0,54322617.440873,,0,1,0,False,[],,,"Resolves: #4062

Simpler proposal to fix issue #4062, checks the vendor of the plug-ins, and if so,
compensates the dangling pointer references that they can do, at the expense of
an unbalanced CFRetain (leaking memory) on the NSView object.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4097,2022-12-22T10:23:20Z,2022-12-22T11:04:11Z,mlocati,0,0,1,1581,1,1,1,[],,0,3048.0,0,0,0,0,54334428.765389,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
686,2020-11-01T18:33:32Z,2020-11-01T18:56:40Z,mlocati,1,0,2,4,1,0,0,[],1395.0,0,67448156.0,0,0,0,0,54338310.806817,,0,2,0,False,['JamesCrook'],Thank you.,,"Commit 748aa05495819660384998ecc182c207c97de7a6 allows people to easily update the `audacity.pot` file, without touching the `.po` files.

This can be done by calling
```sh
AUDACITY_ONLY_POT=y ./update_po_files.sh
```

If the `AUDACITY_ONLY_POT` environment variable is not set, or if its value is not `y`, nothing changes.

I also added commit 9e8618dd880455ece8b1e62295415ace61a9d99f: with that change the script exits as soon as an error occurs (for example, if the gettext tools are not available).",
4091,2022-12-21T03:46:24Z,2022-12-21T12:20:28Z,Gootector,0,2,2,45,1,3,1,[],,0,30844.0,0,0,0,0,54416853.172619,,0,2,0,False,[],,,"Update Polish Translation - 3.2.3

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It seems like this is causing the compilaiton error: 

> D:/a/audacity/audacity/locale/pl.po:6088: 'msgid' and 'msgstr' entries do not both end with '\n' Done."
4089,2022-12-20T17:50:11Z,2022-12-20T20:53:16Z,Patriccollu,0,0,1,154,1,1,1,[],,0,21446.0,0,0,0,0,54462026.335427,,0,1,0,False,[],,,"Hello @Paul-Licameli 

This is an update of **Corsican** localization for Audacity 3.2.3.

Best regards,
Patriccollu.",
4064,2022-12-13T13:08:48Z,2022-12-20T14:15:10Z,Paul-Licameli,1,0,1,35,10,1,1,[],83113.0,1,608786.0,0,0,0,0,54496371.635645,,1,1,0,False,['petersampsonaudacity'],"I tested this on w10 with @Paul-Licameli 's branch build:  https://github.com/audacity/audacity/actions/runs/3685700498.

The four Audacity RT effects seem to action in the Effects Stack  _(I have not tested their efficacy or accuracy)_

As Paul requested I tested subsequently launching 3.2.2 and 3.2.1 and there I observe that the four Audacity RT effects are _**not**_ available in the Effects Stack.Code changes ok for me, and tested","Code changes ok for me, and tested","... Though Reverb has known problems with adjustment of controls, to be fixed.

Also bump REGVERCUR so that you don't need to delete an old pluginregistry.cfg first, and also, the effects will not be in the sidebar if you then downgrade to Audacity 3.2.2 or earlier.

Also renamed one enumeration constant to be clearer about its meaning.

Resolves: #4063

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4087,2022-12-19T12:17:23Z,2022-12-20T01:14:48Z,Paul-Licameli,0,0,1,13,2,1,1,[],,0,46648.0,0,0,0,0,54543196.725145,,1,1,0,False,[],,,"Resolves: #3807

Fix a data loss in crash recovery after completion of recording, which affected 1MB of samples at most in each channel.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3801,2022-10-12T15:42:46Z,2022-12-19T13:32:39Z,ksoze95,0,11,2,192,8,4,3,[],,1,5867397.0,2,0,0,0,54585327.54426,,1,2,1,False,[],"Dialog message text needs translation  A few suggestions to improve it, but nothing that should block it.
","Dialog message text needs translation  A few suggestions to improve it, but nothing that should block it.
","Resolves: #3719 #3817 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Please make these strings translatable Same Done. Done. Use ::AudacityMessageBox
 Use ::AudacityMessageBox
 Or better, use BasicUI::ShowMessageBox in both places.
 Replaced wxMessageBox with BasicUI::ShowMessageBox as suggested below. Let's do
> Window title: Missing Plugins
> This project contains some realtime effect plugins that cannot be found on this system.
> The project may sound different than intended. [Learn more](https://audacityteam.org/errors#missing-plugins)
> [OK]

with the ""learn more"" having an accessible link to https://audacityteam.org/errors#missing-plugins You can write `for (auto track : trackList.Leaders<WaveTrack>())` and then don't need the `dynamic_cast` below
 Should this message be shown also in case `plug` is null?
"
4072,2022-12-16T09:38:19Z,2022-12-19T10:39:01Z,vsverchinsky,0,0,1,12,2,1,1,[],,0,262895.0,0,0,0,0,54595698.767986,,1,1,0,False,[],,,"Resolves: #2620

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4073,2022-12-16T09:49:23Z,2022-12-19T10:29:19Z,vsverchinsky,0,0,1,4,1,1,1,[],,0,261781.0,0,0,0,0,54596151.016238,,0,1,1,False,[],,,"Fixes assertion issue similar to on described in #3413, but for other parameter types

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3873,2022-10-29T12:14:23Z,2022-12-17T13:40:11Z,Paul-Licameli,1,0,7,797,34,1,1,[],4061493.0,2,4238752.0,0,0,0,0,54757682.228135,,2,7,1,False,['Paul-Licameli'],"@dozzzzer @Ryan-Miller-Audacity Things for sanity checks:

- Dropout detection (use ""Simulate recording errors"" under Tools, or else overload your CPU somehow with other programs!)
- Update of ""Clipboard space used"" in undo history dialog
- Karaoke and Mixer board update their titles when new project is saved
- variable speed toolbar
- Checkpointing and reconnection failures with SQLite (test how? I'm not sure.  Abnormal cases I don't know how to provoke)
- Label track operations (adding, removing, dragging to change sequence) keeping correct label focus
",,"Resolves: *(direct link to the issue)*

Cherry picks from the ""monster"" extractions branch.

Eliminate remaining custom wxWidgets event subtypes and use Observer
utility instead.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4074,2022-12-16T11:07:42Z,2022-12-16T14:12:09Z,crsib,0,0,1,4,1,1,1,[],,1,11073.0,0,0,0,0,54842164.454401,,0,1,1,False,[],,,"The text better reflects the preferred name of the library

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4060,2022-12-12T18:18:01Z,2022-12-13T15:13:43Z,pietro68,1,2,1,49,2,2,1,[],66376.0,1,75342.0,0,0,0,0,55097679.049318,,0,1,1,False,['dozzzzer'],"#3112 cannot be reproduced in this build, verified both on macOS and Windows",,"Resolves: first point of #3155 

**Note for QA**: what needs to be verified here, is that issue #3112 does not happen anymore with the built-in reverb.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",There are two one_pole objects in an array.   Both must be cleared. good catch! now done
4059,2022-12-12T15:14:40Z,2022-12-12T16:23:26Z,crsib,0,0,1,6,1,1,1,[],,0,4129.0,0,0,0,0,55179895.130097,,0,1,0,False,[],,,"Resolves: #4058 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4013,2022-12-02T13:33:01Z,2022-12-12T10:24:09Z,crsib,2,0,3,132,5,1,2,[],6075.0,1,852671.0,0,0,0,0,55201454.297585,,0,3,0,False,"['DavidBailes', 'crsib']","The text of the radio buttons is not accessible for users of screen readers.
1. You are calling Name() with just part of the text. You need to call it with all of the text so that screen readers will read all of it, eg Name(XO(""Public. Anyone will be able to listen to this audio.""))
2. For screen readers to read any of this text, you'll need to set an accessible object which will pick it up e.g:
#if wxUSE_ACCESSIBILITY
   // so that name can be set on a standard control
   isPublic->SetAccessible(safenew WindowAccessible(isPublic));
#endif Thank you for your feedback, it is now addressed ",,"Resolves: #3884

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4020,2022-12-05T16:14:42Z,2022-12-12T10:23:05Z,crsib,0,0,1,12,3,1,1,[],,0,583705.0,0,0,0,0,55201521.335928,,0,1,0,False,[],,,"Resolves: #4019 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4043,2022-12-08T18:55:21Z,2022-12-09T17:45:22Z,Paul-Licameli,1,0,1,4,1,2,2,[],66962.0,1,82242.0,0,0,0,0,55434147.549002,,0,1,1,False,['dozzzzer'],Verified,,"Resolves: #4040

Remove button for Mixer toolbar from Screenshot dialog

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3628,2022-09-15T16:52:17Z,2022-12-09T14:21:58Z,pietro68,0,5,5,530,3,2,1,"['Task', 'Effects (EGATs)']",,0,7334981.0,1,0,0,0,55446395.055423,,0,5,1,False,[],"Minor suggestions.  This looks good.

Now, I think we should reenable BassTreble, Phaser, and Wahwah in the side bar.

So add a commit to do that.  Then let QA test those three effects before this is merged.

Echo is another effect that could easily join those three.  The transformation of a PerTrackEffect for realtime support should be a very familiar exercise now.  I suggest that as another near term task.

","Minor suggestions.  This looks good.

Now, I think we should reenable BassTreble, Phaser, and Wahwah in the side bar.

So add a commit to do that.  Then let QA test those three effects before this is merged.

Echo is another effect that could easily join those three.  The transformation of a PerTrackEffect for realtime support should be a very familiar exercise now.  I suggest that as another near term task.

","Resolves: #3626 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","extra ';'
 This can be a `static` function -- and I think the same might be done in the other built-in realtime effects.

Not very important to change.
 The three functions that follow can also compile as `static`.
 ok, done ok, done"
2441,2022-01-17T12:04:15Z,2022-12-09T14:21:06Z,Paul-Licameli,2,0,10,239,13,1,1,['Build / CI'],12884792.0,1,28174615.0,0,0,0,0,55446445.185997,,1,10,1,False,"['crsib', 'Paul-Licameli']","I think we should rebase it on latest master and see, if Linux packages build succeeds  Oh, this forgotten PR.  Okay, rebased now.  But this isn't urgent.
",,"... First, add some utilities to find and store argc and argv.

Then, rewrite main() and WinMain() to use them.  This removes the dependency
on wx/app.h from PluginHost.cpp.  That is needed before what comes next.

Finally, wxBase is no longer an alias target.  It is an interface target to wxWidgets
that adds some preprocessor definitions that restrict at compile time what
parts of wxWidgets may be used, to general wxBase utilities only.

No graphical interface is allowed, but also none of the main event loop.  So in
fact only a subset of wxBase is good to use, because even that includes an event
loop usable in console programs.  Restrict the use of certain headers by
pre-including their include guards, so that an attempt to include them skips
the definitions they contain and makes compilation fail.

The library targets that depend on wxBase must make it PRIVATE, for otherwise
the restrictions on use of wxWidgets would be propagated to users of those
libraries that do not need to be toolkit-neutral and break their compilation.

Restoring what was defined before at 1f71ef4 but was soon lost at f66381b with
the conan-izing.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4032,2022-12-06T16:22:50Z,2022-12-09T12:52:35Z,Paul-Licameli,2,0,2,1173,27,2,2,[],73024.0,2,246589.0,0,0,0,0,55451758.329255,,0,2,1,False,"['crsib', 'Paul-Licameli']","> Quite welcome cleanup

All reviewed, so soon?  Mostly repetitious stuff after the interesting first commit.

I don't often use union.

I hope @ksoze95 looks this over too.  Expect much more cleanup related to menus.
 Please define ""soon""Quite welcome cleanup ",Quite welcome cleanup ,"Resolves: *(direct link to the issue)*

Eliminate verbosity in the definition of most menu items, which can call a stateless
nonmember function.  The prior system was general enough to use member functions
of a stateful static object, but that requires more boilerplate that only a few callbacks need.

Let's do this simplification before other restructurings that will cut and paste many menu
items, so that more of them are scattered and use registries to put them in their places.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1874,2021-10-08T21:40:58Z,2021-10-13T22:56:55Z,vsverchinsky,1,4,2,127,3,2,1,[],42092.0,0,36677732.0,0,0,0,0,55635129.77658,,0,2,0,False,['petersampsonaudacity'],"Tested on W10 with Audacity_Windows_64bit_1321978882_0f475f9  - branch build by @vsverchinsky 

This fix by Vitaly looks good - the Clip name is highlighted (for editing) when you double-click on the clip.Approved, with a minor suggestion to make it better.  I will merge it.","Approved, with a minor suggestion to make it better.  I will merge it.","Resolves: #1835
Resolves: #1834 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","You reviewed, approved, and merged my commit ec258e0838601365b217c74eab235017758c30b2 where I added the function `ExitTextEditing()`.  Why not reuse it?  Do you not, because you think it is incorrect to call Finish() in this case?  Maybe it was arguably incorrect of me to call finish in case of losing focus too? As you said, `ExitTextEditing()` also calls `TextEditHelper::Finish` which cannot be used in `OnTextEditFinished` or should not be used in case of `OnTextEditCancelled`, but maybe it should be used in `OnAffordanceClick` to save any changes, as in other cases when the click happens outside the clips affordance. So now ExitTextEditing is called, so this is handled like a loss of focus, keeping the text edit before starting another edit.  That is more consistent.  The user can choose to undo if that is not the intent.  The alternative that always cancels the exit would not give this choice.  All good. This use of Skip() is a roundabout way just to pass a Boolean back to the caller. I would rather just return a pair of values.  Maybe all this event handling logic for drags will need to be rewritten platform neutrally.

But that is not important enough to block this PR."
3018,2022-06-02T11:44:28Z,2022-06-11T22:01:07Z,vsverchinsky,0,0,6,82,3,1,1,[],,0,16236627.0,0,0,0,0,55635227.05266,,0,6,0,False,[],,,"Resolves: #3019 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3517,2022-09-02T10:47:23Z,2022-09-02T12:55:12Z,vsverchinsky,0,0,1,4,1,1,1,[],,0,8291204.0,0,0,0,0,55635277.098395,,1,1,0,False,[],,,"Resolves: #3447

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3288,2022-07-25T12:17:44Z,2022-08-04T12:08:51Z,vsverchinsky,2,8,5,516,24,2,1,[],347969.0,0,11655345.0,0,0,0,0,55635317.629121,,0,5,0,False,['Paul-Licameli'],"This completes a round of review
 ""refactoring"" misspelled in first commit comment
",,"Resolves: #2965
Resolves: #3286

Not only Nyquist plug-ins are removed from the registry, but all other types of plug-ins are checked for existence as well.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","First commit fails to build on macOS
Fix with
```
#include ""PluginProvider.h""
```

in AudioUnitWrapper.cpp
 I think this could be more simplify defined just as `std::unique_ptr<PluginProvider, PluginProviderDeleter>` and just supply that deleter class
 Also need a `make_unique` in AudioUnitEffectsModule.cpp as for the other factories.

Also:  commit comment has a spelling mistake
 `CheckPluginExists` might be a better name.  This commit fails to build on macOS because `AudioUnitEffectsModule` needs to define an override.
 > First commit fails to build on macOS
> Also need a make_unique in AudioUnitEffectsModule.cpp as for the other factories.

Sorry, I completely forgot to fix that, will do soon I've attempted to replace `safenew` and `delete` with just std::make_unique<>. Though the first commit isn't neccessary part of this PR and I remove it Not new in this commit -- but PluginManager is doing some interpretation of the paths returned by `FindModulePaths`.  So the comment in PluginProvider.h about `FindModulePaths` is not correct.  It is expected paths can be partly interpreted in a way not specific to the provider, at least when there is a semicolon.
 And again, AudioUnitEffectsModule must update too, to keep this commit buildable
"
3177,2022-07-04T20:57:35Z,2022-07-11T12:56:05Z,vsverchinsky,0,1,1,74,5,1,1,[],,0,13438478.0,0,0,0,0,55635396.049038,,0,1,0,False,[],,,"Resolves: #2982

Fixes incorrect plugin registration when multiple providers associate themselves with same module path

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","There is no longer a check of IsValid().  The condition for considering a plug-in failed is instead that all descriptors for the path are stubs.

I had to study the code again to be convinced that the condition for considering a plug-in failed, in case of only one provider, is equivalent to the old criterion.  But, I believe it now.

Plugin destriptors deserialized from the IPC pipe are stubs if and only if they are marked invalid.  Otherwise they were successfully registered in PluginManager in the other process and marked valid.

"
2831,2022-04-18T14:55:06Z,2022-06-11T11:55:13Z,vsverchinsky,11,30,4,904,9,4,0,[],81200.0,0,20112955.0,1,0,0,0,55635471.606376,,0,4,0,False,"['petersampsonaudacity', 'vsverchinsky', 'Paul-Licameli']","> > Polarity
> 
> > rename the `Invert` effect to `Invert Polarity`, please.
> 
> As Paul wrote: ""why?"". What other kinds of waveform inversion are there? Yes there is such a thing as ""spectral inversion"" (which Audacity does not have), but if that's the distinction that you want to make then I don't think that ""invert polarity"" does it as well as ""invert waveform"".
> 
> Regardless of which wording is decided, please avoid changing the command name unless absolutely necessary as doing so will break custom macros that use the command. As Paul wrote: ""Only the localized name of the effect"" should be changed.

Steve agrees with me about not breaking macros, so changing localized names independently from internal names.

I reviewed how Nyquist parses names, and it does not make this similarly easy to do -- to update a localized name while not changing the identifier that macros might be using.

I intend to change Nyquist.cpp and I can push that commit onto Vitaly's branch.  Then the .ny files can update certain localized Nyquist effect names as Leo prefers them, but without the compatibility problem.

Meanwhile, exploring the source for Steve Harris' Ladspa plug-ins, I found this bit about the terminology of its simple inversion effect:

```
    <name>Inverter</name>
    <p>A utility plugin that inverts the signal, also (wrongly) known as a 180 degree phase shift.</p>

```
 Vitaly and I are disagreeing about the proposed implementation.  In this first attempt, the tree that Leo specified is essentially replicated in one place in the source code.

I don't find that acceptable.  Instead, I say category information should be associated with each individual effect in the code that defines that effect.

The code that builds the effect menu should iterate all effects and gather their category information in a generalized way according to some new extension of the effect interface, then sort them without special hardcoded information about any one effect.

I have pointed out that certainly in the case of Nyquist effects, some other Nyquist programmer wanting to extend Audacity should have means to specify in the .ny file how to categorize that effect, without rebuilding Audacity.  I say build into Audacity now the code that interprets a new kind of special Nyquist comment, then use that comment in .ny files.
 I think extra effort is needed for open-endedness.  If you really do want to go beyond my incomplete suggestion, I would encourage it.  The value returned by the new virtual function of Effect would not be of an enumeration type.  It would be a ComponentInterfaceSymbol pairing an Identifier and a TranslatableString.  Effect.h could have extern declaration of some ComponentInterfaceSymbol constants commonly used, including the ones specified in the issue.

But PluginMenus.cpp would not require the returned values to be from this limited set of choices.

What I described would not provide a way to order the categories extrinsically.  But if @LWinterberg agrees that a rule like major sort by the localization of the category name is acceptable, then that's enough.

 I'm done with this round of review.  There are some things to fix but the basic design is good.
 @petersampsonaudacity In the recent PR update I've also attemted to fix the issue metioned in the discrord channel about bundled effects being grouped by publisher, as well as other issues metioned by @Paul-Licameli in this thread earlier  > @petersampsonaudacity In the recent PR update I've also attemted to fix the issue metioned in the discrord channel about bundled effects being grouped by publisher,

@vsverchinsky  testing on W10 with you latest branch audacity-win-3.2.0-alpha-20220609+fa94517-x64

a) If I purge the audacity settings folder (for OOTB factory settings - new install)  then I no longer see ""Steve Daulton"" menu entries.

b) If I upgrade to your latest branch from 3.1.3 or latest 3.2.0 master then I **_do_** see the ""Steve Daulton"" entries in the Analyze and Tools menus.

c) if after b) I do a Reset Configuration then I _**still**_ see the ""Steve Daulton"" entries in the Analyze and Tools menus.

Given that **many** of the installers/users of 3.2.0 will be upgraders, it is probably important to fix b) Testing on W10 with @vsverchinsky 's latest branch build audacity-win-3.2.0-alpha-20220609+831286a-x64

### 1) Analyze Menu
Following an upgrade from 3.1.3 to this branch build there is no longer a ""Steve Daulton"" menu entry in the Analyze menu - but note that the two Steve Daulton plug-ins are duplicated in the Analyze menu:
![image](https://user-images.githubusercontent.com/50205984/173022515-ec307ddd-dd5a-4bf5-8b97-46c6b1186bfd.png)

### 2) Tools menu
Following an upgrade from 3.1.3 to this branch build the Tools menu still has a ""Steve Daulton"" menu entry - and here too the sub-menu items are duplicated:
![image](https://user-images.githubusercontent.com/50205984/173023263-86d98a1c-a504-411d-8a5a-2c18b840fefa.png)

 > I suggest @petersampsonaudacity should open another issue for what he observed in the case that multiple versions of Audacity are installed.

@Paul-Licameli  -  I could do that but at the moment this is only a developer branch build it is not in master yet.   Normally we only log bugs that are in the master builds.  

But if you really want I can break with _""tradition""_ and log this issue against @vsverchinsky 's branch build, please advise.


_BTW this may be an issue if multiple versions of Audacity are installed - but primarily it's an issue for anyone with a single version of Audacity upgrading from an earlier Audacity version to 3.2.0_ >primarily it's an issue for anyone with a single version of Audacity upgrading from an earlier Audacity version to 3.2.0

@petersampsonaudacity it happens even if there is only a single instance of Audacity installed at the same location as the older version? > > primarily it's an issue for anyone with a single version of Audacity upgrading from an earlier Audacity version to 3.2.0
> 
> @petersampsonaudacity it happens even if there is only a single instance of Audacity installed at the same location as the older version?

@vsverchinsky  - so I tested on my wife's PC simulating an upgrade from 3.1.3 to your 3.2.0 branch and all looks good when I do that. For the ""normal"" upgrading user with a single Audacity version all seems fine.

1. The existing and only version of Audacity on that PC was 3/1/3 installed in the default location C:\Program Files\Audacity
2. I upgraded to 3.1.3 - using the EXE
3. then installed your branch build (ZIP not EXE) 
4. Observe: the EGAT menus:

### Effect menu
![image](https://user-images.githubusercontent.com/50205984/173186226-08314b4d-3655-4594-a877-6088497df2a1.png)

### Analyze menu
![image](https://user-images.githubusercontent.com/50205984/173185771-82de39ee-928b-4ad5-8b5f-0af2a01a6c0a.png)

### Generate menu
![image](https://user-images.githubusercontent.com/50205984/173185802-94595251-fecc-4425-ab02-d32333a69d52.png)

### Tools Menu
![image](https://user-images.githubusercontent.com/50205984/173185826-40e90cb1-5595-4d77-a6d6-63ec0ee1d86f.png)


So no sign of ""Steve Daulton"" menu entries and no duplicate entries.

### Reversion
I also simulated a user who upgrades to 3.2.0, doesn't like it for whatever reason, and downgrades back to 3.1.3 (or earlier).  All is fine with the older menu structure for the EGATs
 Peter removed our last doubts.  I merged the branch, although I broke my usual rule that branches should be rebased first onto latest master.  Vitaly is taking time off for two weeks and I didn't want this to wait.Closed-endedness and magic string literals are problems.  See previous comment.
","Closed-endedness and magic string literals are problems.  See previous comment.
","Resolves: #2659 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I don't like the closed-endedness -- the violation of the ""O"", open-closed principle, of SOLID:  ""A design should be open to extension but closed to modification""

In other words, if we ever add a new effect that falls into one of these categories, then it won't be self-contained in one new implementation file, but instead this file will need modification to make the menu sorting continue to work as desired.

And we are also depending on long-distance coincidences of string literal values, between this file and each of the many effect implementation files, which is хрупкость.

So I suggest:

- A new enumeration EffectCategory, defined in Effect.h
- A table mapping EffectCategory to EnumValueSymbol (which pairs an identifier and TranslatableString), defined in Effect.cpp and accessible by a static member function
- MenuList is instead `std::vector<std::pair<EffectCategory, std::vector<TranslatableString>>>` and gets TranslatableString from that table
- A virtual function of Effect called GetEffectCategory, appropriately overridden in all the effects that matter
- Some of these effects are not built-ins, but Nyquist plug-ins. So NyquistEffect needs an override of GetEffectCategory that doesn't just return a constant, but computes an answer too.
  - Add a case in NyquistEffect::Parse to recognize a new special Lisp comment `$category`, which does reverse-lookup of the table of categories, by the Identifier (not by the TranslatableString), to find the enum value
  - Modify the plug-ins/*.ny files as needed to identify their categories
  - Ping @SteveDaulton when you do this, to review the changes at least in Nyquist.cpp, and recommend how to update documentation of Nyquist
- PreferredEffectsMenu does not return a static value, but computes its answer instead, by iterating the plug-ins and querying GetEffectCategory
- Maybe it can cache that computed answer, but invalidation of the cache would need to be done by the plugin manager dialog, or if the user changes the Language preference; see class PreferenceListener

Do all of this, and I will be less dissatisfied... but then the set of categories and the sorting of the categories themselves will still be closed-ended, and in a further future I might want to seek a fix for that too involving a registration of categories.

 1. EffectCategory is very likely to be extended/changed.
2. Not each effect has should have effect category assigned, effects can be added or removed from that list.
3. MenuList can be changed at any time, without modification of the effects source code, it's a resource object.

Considering that, I don't agree that my implementation violates ""O"". Ideally, there could be an external file describing the stucture of that menu, which can be changed without any code modification. rename the `Invert` effect to `Invert Polarity`, please.  Why?
 Ah, sorry, you copied my typo here. It should be ""Volume and Compression"" with a big C Same with these guys: 
* Spectral Tools
* Spectral Delete
* Spectral Edit Multi Tool
* Spectral Edit Parametric EQ
* Spectral Edit Shelves If it is agreed to make that name change, the correct change in Invert.cpp is:

```
const ComponentInterfaceSymbol EffectInvert::Symbol
{ L""Invert"", XO(""Invert Polarity"") };
```

because in case anyone uses the Invert effect in a macro, this will avoid breaking that macro when they migrate to a newer version of Audacity.  Only the localized name of the effect will be changed, not the English identifier that macro programmers use.

 @LWinterberg as Paul said in his comment above these are ""identifiers"", not names, but ""Spectral Tools"" is a group name and I'll fix that I VETO this change request as part of the same issue.

Make this change request a different, minor issue.

Changing the name while preserving macro compatibility turns out not to be as easy for Nyquist effects as it would be for Invert.  It needs more thought.
 Your implementation violates open ended ness for reasons I described.  You must change PluginMenus.cpp if in future a new categorized effect is added, rather than having all necessary new code self contained in the effect’s implementation.  I do not accept this. > 1. EffectCategory is very likely to be extended/changed.

How does that make me wrong?

It is something I admitted: that even if you do my steps, it is not a complete fix for the problem of closed ended ness.  Still the steps I described are necessary if not sufficient.

> 2. Not each effect should have effect category assigned, effects can be added or removed from that list.

Do you mean there should be another enumeration value for effects of undefined category?  That is easy enough.

“Effects can be added or removed from the list.”  Do you mean as future development, or do you mean that the composition of the lists can be changed at runtime?

> 3. MenuList can be changed at any time, without modification of the effects source code, it's a resource object.
> 

Do you mean that as a future development, we change our decision about the categorization of an individual effect?  But it is much more proper, if some source code must change, that is the source code of that effect only rather than PluginMenus.cpp.

> Considering that, I don't agree that my implementation violates ""O"". Ideally, there could be an external file describing the stucture of that menu, which can be changed without any code modification.

 ""MenuList can be changed at any time, without modification of the effects source code, it's a resource object.
Does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? But this implementation does none of that.""

So I do t understand what you mean by “resource object.” Sorry I edited your original comment by mistake.  I didn't mean to delete it.  But I think I quoted all of it in my replies.
 ""Maybe it can cache that computed answer, but invalidation of the cache would need to be done by the plugin manager dialog, or if the user changes the Language preference; see class PreferenceListener""

To clarify I mention this really to suggest you don't bother with it:  Do recalculate the list each time you need to repopulate the effects menus.
 >How does that make me wrong?

""A design should be open to extension but closed to modification""

>it is not a complete fix for the problem of closed ended ness

Please, let do not pollute interfaces with more constants that has some meaning for about 30 effects, it has nothing to do with OC.

>Do you mean there should be another enumeration value for effects of undefined category?

Why should prebundled effect, which isn't present in that menu, should be categorized as ""Undefined""? Or why should any other external effect have category which will never be used?

>Do you mean as future development, or do you mean that the composition of the lists can be changed at runtime?

During development ofcourse, and this is in fact points to the possibility to violate OC in future.

>Do you mean that as a future development, we change our decision about the categorization of an individual effect? But it is much more proper, if some source code must change, that is the source code of that effect only rather than PluginMenus.cpp.

Yes, we can add or remove effects to/from that list, even now there are prebundled effects that are not present in that list, the set of groups can change as well. Question: there are groups like ""Distortion and Modulation"", ""EQ and Filters"", should there be 4 emum values or only 2? What if effect provides both Distortion and EQ? It's not a problem from the implementation point of view, and it's not a bad idea in general, but there is no use for it right now.

>Does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? But this implementation does none of that.

There is a set of effects that should be put in a certaing menu groups, there is no need to ""categorize"" all effects. MenuLists can be put into separate cpp file (like AllThemeResources), or even external xml (json, txt,...) file. Not sure that we need to provide a way for user to change that list, but surely we can do that. In fact we can extend format with rules and filters and provide a way to make this menus very customizable, and your idea with effects category will make it more flexible for the user. > > How does that make me wrong?
> 
> ""A design should be open to extension but closed to modification""

That doesn't answer my question.

> 
> > it is not a complete fix for the problem of closed ended ness
> 
> Please, let do not pollute interfaces with more constants that has some meaning for about 30 effects, it has nothing to do with OC.

What ""interface"" is polluted?  Effect itself?  Well it's going through lots of necessary changes this release.  But it is quite simple to make effects un-categorized with a default implementation of the virtual function, and so most effects will need no modification for this.  Only the few that are categorized.

> 
> > Do you mean there should be another enumeration value for effects of undefined category?
> 
> Why should prebundled effect, which isn't present in that menu, should be categorized as ""Undefined""? Or why should any other external effect have category which will never be used?

This really isn't different in principle than IsHiddenFromMenus.

> 
> > Do you mean as future development, or do you mean that the composition of the lists can be changed at runtime?
> 
> During development ofcourse, and this is in fact points to the possibility to violate OC in future.

We are failing to understand ""OC"" to mean the same thing.

If there is a new effect, its categorization should be determined by the code of that effect alone.

The file that makes effect menus should be generalized, and should not make special mentions of any individual effects.  The interface offered by abstract Effect is extended now to be sufficient for the needs of the plugin menus.

Do you see there is special weird stuff in PluginMenus about noise reduction and the Nyquist prompt?  True.  But that is bad legacy, not good precedent.

> 
> > Do you mean that as a future development, we change our decision about the categorization of an individual effect? But it is much more proper, if some source code must change, that is the source code of that effect only rather than PluginMenus.cpp.
> 
> Yes, we can add or remove effects to/from that list, even now there are prebundled effects that are not present in that list, the set of groups can change as well. Question: there are groups like ""Distortion and Modulation"", ""EQ and Filters"", should there be 4 emum values or only 2? What if effect provides both Distortion and EQ? It's not a problem from the implementation point of view, and it's not a bad idea in general, but there is no use for it right now.

As I said, I am admitting to incompleteness of this solution for open endedness, but I do not accept your argument that therefore, let this PR stand and make no attempt to fix it.

Effects should have some virtual function reporting their category as some kind of value, and PluginMenus.cpp should use that value and not have a hard-coded list of effect names.

Start by making that value an enumeration.  Though this enumeration of categories is closed ended, the set of effects in any one category is not closed ended.

Let me see the redraft.  Then we can discuss the further step of changing the value type from enumeration to some other dynamically determined set of cateogires.

> 
> > Does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? But this implementation does none of that.
> 
> There is a set of effects that should be put in a certaing menu groups, there is no need to ""categorize"" all effects. MenuLists can be put into separate cpp file (like AllThemeResources), or even external xml (json, txt,...) file. Not sure that we need to provide a way for user to change that list, but surely we can do that. In fact we can extend format with rules and filters and provide a way to make this menus very customizable, and your idea with effects category will make it more flexible for the user.

 >That doesn't answer my question.

What question then? Using enum for entity like effect category is very likely to violate OC (until we agree that it will never change). So I don't see why your impementation violating OC is preferrable over my implementation which ""violates OC"" (which is not, because you don't have to change effect to change menu ordering, and you don't have to change anything in the menu to add a new effect, though you may want to change that too, but the problem here is that you cannot answer to the question ""how should I change that menu?"")

>If there is a new effect, its categorization should be determined by the code of that effect alone.

Effect placement in the menu should be determined by the menu. It can use properties of the effect to do that and using effect ID for that purpose isn't worse than using any other property of the effect. 

>The file that makes effect menus should be generalized, and should not make special mentions of any individual effects.

Effect ID and effect category are both properties of the same entity, there is no difference between them in sence that they both could to be used as a filter parameters.

This task does not specify that we should assign category to each effect, and build menu so that all effects grouped by these categories. This task requires to put **certain** effects into certain submenus, that's why there are references to the individual effects in the menu description, you cannot solve such task using generalization. > Polarity



> rename the `Invert` effect to `Invert Polarity`, please.

As Paul wrote: ""why?"". What other kinds of waveform inversion are there? Yes there is such a thing as ""spectral inversion"" (which Audacity does not have), but if that's the distinction that you want to make then I don't think that ""invert polarity"" does it as well as ""invert waveform"".

Regardless of which wording is decided, please avoid changing the command name unless absolutely necessary as doing so will break custom macros that use the command. As Paul wrote: ""Only the localized name of the effect"" should be changed.
 > > That doesn't answer my question.
> 
> What question then? Using enum for entity like effect category is very likely to violate OC (until we agree that it will never change). So I don't see why your impementation violating OC is preferrable over my implementation which ""violates OC"" (which is not, because you don't have to change effect to change menu ordering, and you don't have to change anything in the menu to add a new effect, though you may want to change that too, but the problem here is that you cannot answer to the question ""how should I change that menu?"")

One more time:  I admit the incompleteness of my suggestions, but still say it is a better organization than this first attempt.  If you are actually arguing to go beyond my suggestions and figure out open-endedness of categories, not just the members of categories -- great, do so!

If not, still I want some of the extra effort done now.

But the rest of what you say is unpersuasive to me.  Saying you only satisfy the issue in a looks-like-it-works way in the black box view is not acceptable.

The decision to categorize an individual effect one way or another way should be encoded in the implementation of that effect.  That is the open-ended solution in regard to the enlargement of the set of effects.

Ideally effects should be plug-ins, not baked into the executable.  In fact this is realized in the case of Nyquist effects, though we don't do this yet for effects in C++.

At least for Nyquist effects, a Nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled Audacity executable.


 >but still say it is a better organization

I say that they are orthogonal to each other.

>looks-like-it-works

What exactly does not work here?

>At least for Nyquist effects, a Nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled Audacity executable.

It's opposite to what is specified in the task:
>[any external plugins, whether it be nyquist, VST or LV2, arranged as thus:]
Author/Publisher
Effect, sorted alphabetically by name

 > > but still say it is a better organization
> 
> I say that they are orthogonal to each other.

I don't understand what is orthogonal to what.

> 
> > looks-like-it-works
> 
> What exactly does not work here?

Nothing.  BUT what I say from point of view of architecture is, it's not enough that it merely looks like it works.  It shoudl be properly designed for extension.

> 
> > At least for Nyquist effects, a Nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled Audacity executable.
> 
> It's opposite to what is specified in the task:
> 
> > [any external plugins, whether it be nyquist, VST or LV2, arranged as thus:]
> > Author/Publisher
> > Effect, sorted alphabetically by name

Then @LWinterberg should respecify the issue.

We can specify the interface of Nyquist programming as we can't for the other protocols.  We can and should make the effort to give Nyquist programmers the ability to categorize effects as they choose.

 I think @SteveDaulton would agree with the last point.
 Indentation? Maybe another type alias `EffectsMenuGroup` for the element, and reuse that below Add a null check on `textContent` Unused variable and type alias The first commit, introducing this enum and much else, is a very pleasing refactoring.
 Someone sould make the repeated '3.0.3' in this script an argument or take it from an environment variable and make it more current.  Not for this PR.

All it does it make a comment in the generated .pot file out of date.
 I understand this simple rule extracts all xml content as strings to translate, but only the <Name> strings really need it, as strings not already part of the program.

 I tested comment extraction and it works:  add to the .xml file
```
<!-- audio dynamics compression, not data compression -->
```

before the ""Volume and Compression"" line, ran the script, confirmed that it was extracted.

It seems I don't need ""i18n"".  The option to xgettext may be unnecessary.

Include at least one example of a comment in the final version.
"
3593,2022-09-09T12:35:13Z,2022-09-09T12:46:14Z,vsverchinsky,0,0,1,12,2,1,1,[],,0,7679320.0,0,0,0,0,55635901.833982,,0,1,0,False,[],,,"Resolves: #3591

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3646,2022-09-19T13:01:58Z,2022-09-20T17:20:27Z,vsverchinsky,0,2,3,105,9,2,1,[],,0,6813676.0,0,0,0,0,55635943.087155,,0,3,0,False,[],,,"Resolves: #3210

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This line is in a necessary catch block, but I would also define Validate to return bool, so that the failure paths in the overrides don't need to throw more exceptions.

This opinion isn't a blocker for this PR.
 That would be uninformative"
3667,2022-09-22T10:51:46Z,2022-09-22T16:16:07Z,vsverchinsky,1,0,3,112,3,1,1,[],6680.0,0,6562260.0,0,0,0,0,55635973.243187,,0,3,0,False,['crsib'],"I appears that with this fix ALL Waves plugins stop working, so not mergable as it is",,"Resolves: #3462

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3750,2022-10-03T10:23:40Z,2022-10-05T09:47:58Z,vsverchinsky,0,2,1,109,3,1,1,[],,0,5613533.0,0,0,0,0,55635988.395144,,0,1,0,False,[],"This class is still difficult to understand after discussing it and reading it.  Some difficulties are inherent, as with the need to `FlushParameters`, to compensate certain plug-in implementations.  But I think some of the complication can evaporate after my other changes are merged.

See for instance how the AudioUnit event handler changes:

https://github.com/audacity/audacity/pull/3753/commits/2877e4a6d31ad7c1ee47b99cdf4410074d8954de

The separation of concerns between one structure that reflects current settings state, and another that collects changes to be communicated inter-thread, makes the event callback branch-less.

Likewise I hope performEdit, the corresponding piece of VST3 implementation, will simplify and not depend on whether the plug-in is active, and BeginStateChange and EndStateChange will not be needed.

I hope the analogies among the several effect families will be more direct and understandable and easier for anyone else to maintain.

","This class is still difficult to understand after discussing it and reading it.  Some difficulties are inherent, as with the need to `FlushParameters`, to compensate certain plug-in implementations.  But I think some of the complication can evaporate after my other changes are merged.

See for instance how the AudioUnit event handler changes:

https://github.com/audacity/audacity/pull/3753/commits/2877e4a6d31ad7c1ee47b99cdf4410074d8954de

The separation of concerns between one structure that reflects current settings state, and another that collects changes to be communicated inter-thread, makes the event callback branch-less.

Likewise I hope performEdit, the corresponding piece of VST3 implementation, will simplify and not depend on whether the plug-in is active, and BeginStateChange and EndStateChange will not be needed.

I hope the analogies among the several effect families will be more direct and understandable and easier for anyone else to maintain.

","Resolves: #3694 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","One suggestion, if setProcessing fails after setActive succeeds, should the failure path setActive back to false?
 Likewise here
"
3767,2022-10-05T15:45:00Z,2022-10-06T09:49:48Z,vsverchinsky,0,0,1,8,1,1,1,[],,0,5421368.0,0,0,0,0,55636075.64055,,1,1,0,False,[],"Very simple fix to approve.  But this entire OnIdle may become unnecessary later.
","Very simple fix to approve.  But this entire OnIdle may become unnecessary later.
","Resolves: #3764 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3805,2022-10-13T12:48:33Z,2022-10-18T13:01:16Z,vsverchinsky,0,4,1,186,8,2,1,[],,0,4740696.0,0,0,0,0,55636137.077111,,0,1,0,False,[],"I am not expert in the details of X11 UI code but I have a general understanding that certain settings of window sizes need to happen earlier.  No serious objections, but one suggestion for clarifying the use of bitwise operations.
","I am not expert in the details of X11 UI code but I have a general understanding that certain settings of window sizes need to happen earlier.  No serious objections, but one suggestion for clarifying the use of bitwise operations.
","Resolves: #3233

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Bitwise XOR, to negate two bits, looks unusual.  Is the intent really to clear those bits always?  In which case the better expression is

`dialog.GetWindowStyle() &  ~(wxRESIZE_BORDER | wxMAXIMIZE_BOX)`

Or if your intent really is to turn a bit on if it was off, and off if it was on -- comment that.

 A deleted comment said
```
           //No need to accommodate the off-by-one error with Steinberg::ViewRect
           //as we do it with wxRect
```

Are you sure there are no implications of off-by-one errors here in the rewrite?

 Yes, it's not a correct expression, thanks! Where is that error? I think that there is no difference in interpretation of size measures between wx and ViewRect, i.e. `ViewRect::getWidth` has same meaning as `wxRect::GetWidth` or `wxSize.x`"
4029,2022-12-06T12:44:10Z,2022-12-06T14:24:44Z,Paul-Licameli,0,0,1,5,2,2,2,[],,0,6040.0,0,0,0,0,55705458.307754,,2,1,0,False,[],Code changes ok for me,Code changes ok for me,"Resolves: #4026

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4024,2022-12-05T22:00:48Z,2022-12-06T14:24:10Z,Paul-Licameli,2,6,1,33,7,3,2,[],49393.0,0,59006.0,1,0,0,0,55705496.684266,,0,1,0,False,"['Paul-Licameli', 'dozzzzer']","The fix looks good to me @crsib see #4030 
I don't think that the first commit is correct, I don't have any objections about the second one Fix verified on windows. Code changes are understood and ok for me.","I don't think that the first commit is correct, I don't have any objections about the second one Fix verified on windows. Code changes are understood and ok for me.","Resolves: #4021

Fix stickiness of AU and VST 2 parameter changes when dialog is closed during play.

Incidentally add some defensive code to VSTEffectMessage constructor

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","But is it correct? I don't really think so. It appears that we need to have `std::vector<std::pair<int, double>>` here Is it fair to blame a bad plug-in?

mAEffect->numParams is supposed to be a constant upper bound on param IDs that is just set for us by the plugin where pluginMain is called (line 1914) and not changed.

I don't understand why we need a vector of pairs unless you are suggesting a change to a sparse array data structure, which I will not do for a patch release fix, and as explained I don't think it is needed.

This simple defensive bounds check trades a crash bug for maybe some other milder misbehavior in one buggy plug-in that didn't honor a contract.
 I think it is correct: `mParamsVec` is a `ParamVector`, and we have `using ParamVector = std::vector<std::optional<double> >;` (if I am getting your objection right) @Paul-Licameli can you please show any evidence that numParams limits the ID? I will push the branch again without this commit.

I want you @crsib to open another issue for the crash mentioning which plug-in it is.

The small fix that is sufficient for the crash is what I wrote.  I would do this in a hurry for 3.2.2.  The extra effort to fix other behavior beyond that might be for 3.2.3.

 I expect this approach to result in random problems with persistency."
4028,2022-12-06T11:47:06Z,2022-12-06T13:49:31Z,vsverchinsky,0,0,1,20,1,1,1,[],,0,7465.0,0,0,0,0,55707461.869037,,1,1,0,False,[],,,"Resolves:  #4023 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4027,2022-12-06T10:19:09Z,2022-12-06T12:56:12Z,pietro68,0,0,1,15,2,1,1,[],,0,9423.0,0,0,0,0,55710782.954201,,0,1,0,False,[],,,"Resolves: #4014 

In contrast to what I commented on the issue, It turned out that when ordering a stop, the last movements would actually always be sent to the framework; the actual problem was this: if play was ordered too quickly after the stop, the framework would not have enough time to send the updated settings to `ProcessInitialize`.

Making the Validator call Flush() on its `mAccess` when stopping, fixed the problem: the `mLastMovements` sent to the framework would then always come back to `ProcessInitialize`.


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4022,2022-12-05T17:23:40Z,2022-12-05T17:24:36Z,LWinterberg,0,0,1,16,1,1,1,[],,0,100.0,0,0,0,0,55781037.083583,,0,1,0,False,[],,,"turns out, I merged the other thing into master, not the branch",
4018,2022-12-05T14:04:20Z,2022-12-05T17:09:45Z,LWinterberg,2,0,1,16,1,1,1,[],11908.0,0,12059.0,0,0,0,0,55781040.092935,,0,1,0,False,"['crsib', 'LWinterberg']","Wrong branch :-( @LWinterberg  just noticed, let's try again https://github.com/audacity/audacity/pull/4022",,,
4012,2022-12-02T12:51:34Z,2022-12-05T14:01:19Z,Paul-Licameli,0,0,1,1,1,1,1,[],,0,263388.0,0,0,0,0,55793279.420363,,0,1,0,False,[],Code changes understood.,Code changes understood.,"Resolves: #4003

Simply blacklist PTEq-X if we can't discover a better fix for why this black box crashes while other AU effects are just fine.

Plugin registry must be clean first.  It won't be excluded if it was already registered.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4005,2022-12-01T14:34:41Z,2022-12-02T17:54:41Z,Paul-Licameli,1,0,1,5,3,1,1,[],69137.0,1,98404.0,0,0,0,0,56038478.685705,,1,1,0,False,['petersampsonaudacity'],"Testing on W10 @Paul-Licameli 's draft branch:  audacity-win-3.2.2-alpha-20221201+e174945-x64

I confirm that this now works properly for the setting for **Editing a clip can move other clips** in **Tracks Behaviors** preferences, where changes of setting are now properly honored.

I do not have time to exhaustively test _**all**_ of the checkbox settings in _**all**_ preferences.  

One cannot be properly tested until a subsequent release is made and that is **Check for updates** in **Application** preferences.Glad to see you moved the fix from 3.2.3 to 3.2.2, as the bug with the moving clips setting could be very confusing to users.
I can confirm that both settings ""editing a clip can move other clips"" and ""enable scrolling left of zero"" now work as expected.
There wasn't a problem with the default sample rate setting before this fix, and there isn't one after the fix.
I haven't had a look at the code in any detail, but the need for these calls to Invalidate() doesn't seem ideal.","Glad to see you moved the fix from 3.2.3 to 3.2.2, as the bug with the moving clips setting could be very confusing to users.
I can confirm that both settings ""editing a clip can move other clips"" and ""enable scrolling left of zero"" now work as expected.
There wasn't a problem with the default sample rate setting before this fix, and there isn't one after the fix.
I haven't had a look at the code in any detail, but the need for these calls to Invalidate() doesn't seem ideal.","Resolves: #3998

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4011,2022-12-02T10:49:08Z,2022-12-02T16:58:30Z,pietro68,0,0,1,5,1,2,1,[],,0,22162.0,0,0,0,0,56041855.877479,,0,1,0,False,[],I understand the changes.,I understand the changes.,"Resolves: #4009 

I can attest that this PR fixes Scenario 1 described in #4009, but I can not do the same for Scenario 2, because I could never reproduce it in the first place. Paul, I know you could reproduce Scenario 2 and you also wrote this fix, so please could you tell in the comments if this fixes also Scenario 2?

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4006,2022-12-01T15:49:52Z,2022-12-02T10:39:23Z,pietro68,0,0,1,2,1,1,1,[],,1,67771.0,0,0,0,0,56064604.947802,,0,1,0,False,[],,,"Resolves: #3993 

The deferring of setting the chunk to idle time/main thread, uncovered something wrong in the vst2 implementation.
What happened was: in the situation described by the repro steps, the chunk coming in through `::RealtimeProcessStart` (i.e. contained in the incoming message) was always wrong - it would be always be equal to a default value, no matter how the knobs would have been turned.

What happens in non-melda plugins, is that in the remainder of `::RealtimeProcessStart`, the effects of this wrong chunk being set would be soon after overwritten by setting the values found in the message's `mParamsVec` - and those values would be right.

But for Melda plugins, setting the wrong chunk is deferred to later: so, values from `mParamsVec` would be set first, and _then_ the wrong chunk would be applied. This also explains why the wrong knob positions would happen sometimes even a second later.

But ultimately, why was the incoming chunk wrong? because the right value for it was never communicated back to the framework. A call to `ValidateUI()` at the end of `VSTEffectValidator::OnClose()` fixed that.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
4008,2022-12-01T17:49:00Z,2022-12-02T02:19:41Z,Paul-Licameli,1,4,1,11,1,2,1,[],30657.0,0,30660.0,0,0,0,0,56094570.643135,,1,1,0,False,['Paul-Licameli'],"Thanks.  We will sort out build details later I'm sure.
",,"... The configure-time variable CMAKE_BUILD_TYPE may be empty while the generate-time variable CONFIG is not.  Before commit b04d70a, that was the variable that governed whether stripping was skipped.

Resolves: #4007

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This should contain `:$<CONFIG:Debug,RelWithDebInfo>` too for consistency sake.

But I would rather just remove this `if`. If a user wants to strip the resulting binaries - it can be done using ""cmake --install --strip`. On CI - we perform strip manually as a part of the packaging process.  I don't know all the build system changes you intend for later, but given what we have, debugging in Xcode is broken (in master only) and this change will unblock my debugging.  Can you approve, and revise it later?

That is, approve after I just add the one more disjunct you have suggested.
 The `if` may now be redundant with the complete packaging process -- yes.

But I added this `if` in the first place when I was experimenting with extractions, and also watching what effects it had on build sizes.  For that reason it can still be a development convenience when not doing the complete CI with packaging.
 This change is inconsistent between single and multi config  generators, which is quite wrong. Please at least make it consistent by replacing $<CONFIG:Debug> with $<CONFIG:Debug,RelWithDebInfo>. 

>and also watching what effects it had on build sizes.

Audacity binary is never stripped so I expect incorrect results. In any case - it is preferred to use `cmake --install . --strip --prefix installed` to get the correct sizes.

"
4001,2022-12-01T10:45:12Z,2022-12-01T13:42:26Z,vsverchinsky,0,0,1,19,2,1,1,[],,0,10797.0,0,0,0,0,56139864.097558,,0,1,0,False,[],,,"Resolves: #3997

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3990,2022-11-28T13:50:37Z,2022-11-30T16:56:39Z,pietro68,0,0,1,95,3,1,2,[],,0,183962.0,1,0,0,0,56214776.263474,,0,1,0,False,[],"I will just write general comments instead of at every line:

1) The changes of the instance wrapper should be excluded from happening during the sequence of calls to RealtimeProcessStart, RealtimeProcess, RealtimeProcessEnd.  Therefore, it's time for the fix that locks a mutex in Start and unlocks it in End.
2) Do not add another mutex for this purpose.  Instead change mDispatcherLock to `std::recursive_mutex`
3) Add a member function to VSTEffectInstance that decides whether to change how chunks are applied to this alternative.  Make it do the ugly test of the version string for Melda.  If the fix does not apply, the mutual exclusion isn't necessary so the extra lock and unlock might be skipped.  This might avoid unnecessarily punishing the responsiveness of the user interface for other effects.  And other behavior should not then change.
4) The passing of chunk data is very round-about now!   It can be simplified.  Don't wait until idle time.  Instead, apply the chunk (for Melda effects only, and with the mutual exclusion) in `MakeMessageFS`.  Do not skip any of the behavior already in that function.
5) Passing the chunk through the message buffers is still needed to keep the logic of merging and assigning messages correct.
6) For a MeldaEffect, `RealtimeProcessStart` must still check whether there is a chunk in the message, but then only resize it to 0.


 Re-approved, but when this is merged, squash all into one commit because the first is incomplete and buggy without the second too.
","I will just write general comments instead of at every line:

1) The changes of the instance wrapper should be excluded from happening during the sequence of calls to RealtimeProcessStart, RealtimeProcess, RealtimeProcessEnd.  Therefore, it's time for the fix that locks a mutex in Start and unlocks it in End.
2) Do not add another mutex for this purpose.  Instead change mDispatcherLock to `std::recursive_mutex`
3) Add a member function to VSTEffectInstance that decides whether to change how chunks are applied to this alternative.  Make it do the ugly test of the version string for Melda.  If the fix does not apply, the mutual exclusion isn't necessary so the extra lock and unlock might be skipped.  This might avoid unnecessarily punishing the responsiveness of the user interface for other effects.  And other behavior should not then change.
4) The passing of chunk data is very round-about now!   It can be simplified.  Don't wait until idle time.  Instead, apply the chunk (for Melda effects only, and with the mutual exclusion) in `MakeMessageFS`.  Do not skip any of the behavior already in that function.
5) Passing the chunk through the message buffers is still needed to keep the logic of merging and assigning messages correct.
6) For a MeldaEffect, `RealtimeProcessStart` must still check whether there is a chunk in the message, but then only resize it to 0.


 Re-approved, but when this is merged, squash all into one commit because the first is incomplete and buggy without the second too.
","Resolves: #3853
Resolves: #3915
Resolves: #3992
Resolves: #3994

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3967,2022-11-21T15:47:55Z,2022-11-30T15:06:36Z,Paul-Licameli,0,0,7,245,7,1,1,[],,0,775125.0,0,0,0,0,56221377.372578,,0,7,0,False,[],Verified the fix and code changes are fine for me.,Verified the fix and code changes are fine for me.,"Resolves: #3889

This extends #3953

Settings for AudioUnits includes the last chosen factory preset, plus other parameter
changes accumulated after that.

This fixes stickiness and persistency of choices of factory presets for the Waves Studio
Rack plug-in.

However some things in that complicated interface do not yet stick, including maro button
assignments.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3975,2022-11-23T14:26:17Z,2022-11-30T12:47:10Z,vsverchinsky,0,0,1,31,1,1,1,[],,0,598980.0,0,0,0,0,56229622.507438,,1,1,0,False,[],"Add comments in the code explaining the motivation for the change.

Nothing wrong with the changes.
","Add comments in the code explaining the motivation for the change.

Nothing wrong with the changes.
","Resolves: #3883

It's a general improvement. 
Dialog show caused focus lose on `TrackView`, but dialog lifetime might be too short for it to be presented to the user.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3980,2022-11-25T13:00:32Z,2022-11-30T12:45:05Z,vsverchinsky,1,0,3,64,6,1,1,[],13357.0,0,431133.0,0,0,0,0,56229816.696247,,0,3,0,False,['Paul-Licameli'],"The changes in AudacityApp.cpp remind me that ideally the plugin host should be a different, smaller executable with its own main() that doesn't load so much other unnecessary code.  But that would be a future improvement.
",,"Resolves: #3256
Resolves: #3802

Disables breakpad handler in plugin host process. Presumably that can fix #3802 on MacOS/Linux.
Hides plugin host process icon from dock on MacOS and prevents native crash report dialog to appear #3256.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3984,2022-11-25T17:28:39Z,2022-11-29T14:37:19Z,abhi-kr-2100,3,0,2,11,1,1,1,[],5107.0,0,335321.0,0,0,0,0,56309543.982146,,0,2,0,False,"['abhi-kr-2100', 'vsverchinsky']","@abhi-kr-2100 Your branch still contains many commits from the master branch, you could try `git rebase -i release-3.2.2` when you are at the head of your branch (pull `release-3.2.2` branch first) dropping everything except your two last commits @vsverchinsky I'm working on a fork of this repo and I've access to `release-3.2.2` via `upstream/release-3.2.2`. If I do `git pull upstream release-3.2.2` while on local (and origin) branch `fix-3968`, git goes into merging mode, and I'm required to make a merge commit. I don't think that's what you meant. (I'm quite new to git).

EDIT: My bad below. No merge conflicts!
If I just do `git rebase -i release-3.2.2`, it goes into rebasing mode as expected. There are merge conflicts. I want to confirm — so as to not create a mess like last time — if I should accept incoming changes (these are the newer changes in `release-3.2.2`)?

PS: Spending tonight reading Pro Git page to page. And thanks a lot for your patience! :) @vsverchinsky I think I successfully did what you asked for this time.",,"Resolves: https://github.com/audacity/audacity/issues/3968

The Record Meter and Playback Meter buttons on the Meter Toolbar don't have tooltips. This PR adds said tooltips to them. Moreover, the grabbers on the two sub-toolbars where these two buttons lie have the same generic tooltip. A specific and more descriptive tooltip has been added to each as well.
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3713,2022-09-28T13:53:13Z,2022-11-09T08:37:25Z,bdrung,3,0,1,7,3,2,2,[],2605550.0,0,5356333.0,0,0,0,0,56312659.804506,,0,1,1,False,"['imciner2', 'paraseba', 'bdrung']","Looks reasonable to me from a Linux perspective, but I think it would be good to also add the new MIME type to the macOS plist file alongside the old one: https://github.com/audacity/audacity/blob/2e765a9a1a065d61bc89af0d44c9a952eb284c1b/cmake-proxies/cmake-modules/MacOSXBundleInfo.plist.in#L19 Thanks for the feedback. Added to macOS plist. It would be great to have this merged. Is there something I could to to help?Thanks. Looks good to me. @crsib can you review + merge?",Thanks. Looks good to me. @crsib can you review + merge?,"The new file extension `.aup3` is not recognized on Linux.

Add a new mime type `application/x-audacity-project+sqlite3` for the file extension `.aup3` and add this mime type to the supported mime types of audacity.

Ideally the Audacity team should register two mime types at IATA. These mime type should probably be named `audio/vnd.audacity.project+sqlite3` and `audio/vnd.audacity.project+xml`.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3983,2022-11-25T16:32:09Z,2022-11-29T13:34:13Z,Paul-Licameli,0,0,2,16,2,1,1,[],,1,334928.0,0,0,0,0,56313331.012937,,0,2,0,False,[],"I could not test this fix because the soundtoys iLok system on Mac complained that I had too many activations (probably because I activated it on Windows). Anyway, code changes are fine for me. I could not test this fix because the soundtoys iLok system on Mac complained that I had too many activations (probably because I activated it on Windows). Anyway, code changes are fine for me.","I could not test this fix because the soundtoys iLok system on Mac complained that I had too many activations (probably because I activated it on Windows). Anyway, code changes are fine for me. I could not test this fix because the soundtoys iLok system on Mac complained that I had too many activations (probably because I activated it on Windows). Anyway, code changes are fine for me.","Resolves: #3957

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3982,2022-11-25T15:42:59Z,2022-11-29T13:32:28Z,pietro68,3,0,1,27,2,1,1,[],3317.0,0,337770.0,0,0,0,0,56313441.106267,,0,1,0,False,"['pietro68', 'Paul-Licameli']","This fails to build on Linux.  Needs
```
#include <atomic>
```
in VSTEffect.h
 Otherwise it looks harmless.  I will approve after the commit is amended to fix Linux build, and force-pushed.
 > Otherwise it looks harmless. I will approve after the commit is amended to fix Linux build, and force-pushed.

ok, done that",,"Resolves: #3981

When a preset is loaded ::realtimeprocessStart will be called; however: 

- when the preset load is done **when playing is stopped**, it will be called in the main thread and then a call to UpdateUI() will follow; but

- when the preset load is done **when playing is on**, first we get the call to UpdateUI() and then the call to ::realtimeprocessStart, but the latter will be **in the audio thread** this time

So here we do this: take a ""note"" when the second case happens by means of an atomic bool, and act on it during idle time.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3956,2022-11-18T14:22:57Z,2022-11-28T11:07:38Z,vsverchinsky,1,5,1,3,1,2,1,[],429624.0,1,852316.0,0,0,0,0,56408499.685675,,0,1,1,False,['Ryan-Miller-Audacity'],"Unfortunately I wasn't able to reproduce the initial reported behavior in the previous build; however, I tested the [fix build](https://github.com/audacity/audacity/actions/runs/3498681045) on both Windows and MacOS with various VST3 effect plugins and observed no crashes around opening and closing (realtime and destructively) them.",,"STR:
1. Create track
2. Add VST3 effect to the stack
3. Open effect UI
4. Close effect UI

Observe: crash

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","mWrapper was a dangling reference?  How did that happen?  I thought the lifetime of the validator was guaranteed to be nested inside that of the instance.

This may be an easy fix, but then the destructor isn't complementing what happened in the constructor.  I want to understand why this line doesn't work.

 I can't reproduce the problem at e3d0b1ddf9a2363ff3ab65fa23e21e6289fd857d
 > mWrapper was a dangling reference?

Seem so, I'm experiencing the crash on Windows, 100% reproducible Try this alternative fix:  Move the member `EffectUIHost::mpValidator` after `mpInstance`.

If that fix works, I prefer it.
 Yes it works, thanks!"
3953,2022-11-17T12:49:34Z,2022-11-22T15:26:32Z,Paul-Licameli,0,0,7,239,7,1,1,[],,1,441423.0,0,0,0,0,56911397.754609,,0,7,0,False,[],Code changes understood and fine by me.,Code changes understood and fine by me.,"Resolves: #3752

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3912,2022-11-10T13:48:04Z,2022-11-22T13:31:31Z,DavidBailes,0,0,1,2,2,1,1,[],,0,1035807.0,0,0,0,0,56918305.962599,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3911

The Audio share and Audio setup buttons are set to be toggle buttons, which they are not. This affects both sighted users and users of screen readers.

Fix:
The buttons are no longer set to be toggle buttons. Note that with this fix the buttons are not shown as down at the point when they are clicked, which they ideally should be. However, the menu opening gives visual feedback that the button has been pressed, and there are a number of other ""menu buttons"" already in Audacity which have the same behaviour.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3961,2022-11-19T18:44:20Z,2022-11-22T13:27:12Z,Paul-Licameli,2,0,6,123,6,1,1,[],52.0,1,240175.0,0,0,0,0,56918564.150057,,0,6,0,False,"['pietro68', 'Paul-Licameli']","See also #3904 
 Repeated test matrix for top commit (fdc6b69) and all cases pass, for DeeGain/BlueCat Chorus/TAL reverb

[vst2-tests.pdf](https://github.com/audacity/audacity/files/10055280/vst2-tests.pdf)
Changes understood and tested ok.",Changes understood and tested ok.,"Resolves: #3902

Fix slow refresh rate while dragging sliders during playback of VST2 effects.

Mainly it works by not fetching settings from the instance in idle time, while still
presrving stickiness and persistency of sliders by other means.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3965,2022-11-21T11:51:11Z,2022-11-21T14:24:04Z,ksoze95,0,0,1,6,1,1,1,[],,1,9226.0,0,0,0,0,57001504.043453,,2,1,1,False,[],,,"Resolves: #3948

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3946,2022-11-16T11:17:43Z,2022-11-16T18:03:40Z,vsverchinsky,6,3,1,9,2,3,2,[],24340.0,1,440678.0,0,0,0,0,57004062.548682,,0,1,0,False,"['wpostma', 'vsverchinsky']","> I think the changes in Buffered IPCChannel.cpp are unnecessary for the fix but harmless to add. Am I right?

Yes Can still repro an endless hang of plugin scan (searching for plugins) at startup with build containing commit 2c77646
[ audacity-macOS-3.2.2-beta-20221116+2c77646-universal.zip ] Is the skip button new in 3.2.2?
 Also get Exception Code 0x5 on my M1 Mac Studio with the above build containing 2c77646 git rev.

--
[crash.zip](https://github.com/audacity/audacity/files/10026165/crash.zip)
 I have a feeling if a particular plugin takes more than 1 minute to finish it should be skipped and the next plugin should be scanned, and the failed one should be blacklisted.

A failed plugin sample may be https://audiomodern.com/shop/plugins/loopmix/ After removing LoopMix by AudioModern from my system, the build containing 2c77646 completes without a hang.

Not sure it's a bug still. You can get past the hang by clicking skip.
I tried the intial conditions again (plugins in the Audacity/Plugins folder instead of the standard vst2 one) and I confirm that the issue was fixed. I think the changes in Buffered IPCChannel.cpp are unnecessary for the fix but harmless to add.  Am I right?
","I tried the intial conditions again (plugins in the Audacity/Plugins folder instead of the standard vst2 one) and I confirm that the issue was fixed. I think the changes in Buffered IPCChannel.cpp are unnecessary for the fix but harmless to add.  Am I right?
","Resolves: #3944 
Resolves: #3802 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should this assert be here?  The case is handled anyway.  At line 143 of PluginHost.cpp, it appears that this is a case expected to be handled. What explains the hang?

I see at line 80 of this file, there is a wait on the condition variable for mOutputBuffer to be nonempty.  The variable was signalled while the condition wasn't yet true.  But that doesn't explain the bug.  It just meant the main thread woke up and went back to sleep again unnecessarily.

Maybe these lines aren't strictly needed for a fix?  I'm trying to understand.
 > Should this assert be here? The case is handled anyway. At line 143 of PluginHost.cpp, it appears that this is a case expected to be handled.

For debug purpose only. "
3955,2022-11-18T13:10:24Z,2022-11-19T13:12:30Z,Paul-Licameli,0,0,3,135,2,1,1,[],,1,86529.0,0,0,0,0,57178652.977904,,0,3,0,False,[],Code changes understood and fine by me.,Code changes understood and fine by me.,"Resolves: #3843

Do initial powering-on of VST Effect Instance whenever constructed, not only later when dialog opens.

This makes TAL reverb correctly store the desired settings, so a change of preset is heard correctly
at the first playback.

Also, not strictly needed to fix the issue: remove unused functions, and don't mutate the settings that are
the source of complete messages.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3954,2022-11-17T16:02:50Z,2022-11-18T12:50:41Z,vsverchinsky,1,1,2,33,3,1,1,[],81.0,0,74874.0,0,0,0,0,57266364.241272,,0,2,1,False,['vsverchinsky'],Another commit that fixes persistency issue with play/change parameter/stop sequence will follow,,"Resolves: #3839

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I see a new early exit, which also eliminates some unnecessary work, besides fixing the issue described.  That's good
"
3836,2022-10-24T10:19:51Z,2022-11-18T09:17:11Z,crsib,2,20,8,266,14,2,1,[],25288.0,1,2156243.0,0,0,0,0,57279177.740605,,1,8,1,False,['Paul-Licameli'],"I'm done reviewing this.

I understand it is incomplete, pending some solution for VST 2 statelessness.

The built-in effects that are real-time capable will also need changes in 3.3.
 Done, no more objections.

Fix the build and ask for the last round (we hope)
",,"Resolves: #3670 


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I might write `~size_t{}` instead
 This subscriber doesn't use the value inside the message.  Is there supposed to be another subscriber?
 Is this tolerance test necessary, and if so, is it correct?

""Returns the machine epsilon, that is, the difference between 1.0 and the next value representable by the floating-point type T.""

But possibly some control is scaled to an interval of small fractional values.

All the Ladspa sliders are graded to 1000 steps.  Maybe the epsilon should be 1/1000 times the difference of maximum and minimum values of the control.
 Similar concerns here.  Some controls are discrete -- toggles or choices.  Maybe the right epsilon for the control should be an argument of the function.
 Or rather, make that 1/2000 -- one-half of the interval.
 This line defends against a dangling pointer.  I would duplicate it also in the destructor of validator, just to be very certain it is never missed in exceptional situations.
 I think this variable isn't needed, and you can just use `mStateChangeSettings != nullptr`
 Another epsilon.  I don't know how to find the range of values for the control.
 `AudioUnitWrapper::ParameterInfo::mInfo`, as supplied to the lambda argument of `ForEachParameter`, has members minValue, maxValue
 Maybe one initial visit to this function can collect those once and reuse them
 After careful consideration I don't think that using sliders step as a delta is correct. For LADSPA machine epsilon appears to be a good approximation, but for consistency I will define it to match the one LV2. For LV2 epsilon should be larger (but still - it is unrelated to amount of steps we define for sliders), because we allow text input in the plain UI (and the epsilon is only used in plain UI). 

For VST3 I know plugins, that require epsilon around 10^-6 Still unresolved question?
 Wrong comment
 `std::abs(*it->second - value) > epsilon)` to fix the build
 I don't know what to say. I can make the structure empty if this will make you happier, I don't care  I am confused why it was building locally `dst` is now unused
 Might publish unnecessarily for output port changes
 Maybe `suil_port_write` is the function to change, not the idle handler?
 You had not rebased yet onto latest?
"
3943,2022-11-15T16:06:11Z,2022-11-17T12:08:18Z,Paul-Licameli,1,0,1,11,1,1,1,[],106004.0,1,158537.0,0,0,0,0,57355305.949028,,0,1,1,False,['dozzzzer'],"VerifiedFix verified on windows, changes understood","Fix verified on windows, changes understood","Resolves: #3935
(for IEM plugins only)

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3945,2022-11-15T19:38:50Z,2022-11-16T16:07:33Z,Paul-Licameli,1,3,1,8,1,3,1,[],61118.0,1,74935.0,0,0,0,0,57426150.965607,,1,1,0,False,['Paul-Licameli'],"Added another commit with similar precautions for VST3 and requested another review.
Code changes and reason for them understood.",Code changes and reason for them understood.,"Resolves: #3942

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`BeginStateChange` prevents `ModifySettings` from being called in the same callstack with `setState` You are right.

Do you recall why you wrote BeginStateChange?

Were you observing exactly the sort of dangling reference problem I described?
 I think that it was discovered in BlueCat Chorus"
3938,2022-11-14T19:25:37Z,2022-11-15T14:40:29Z,pietro68,0,0,1,2,1,1,1,[],,0,69292.0,0,0,0,0,57518989.16187,,0,1,0,False,[],,,"Resolves: #3916 

The TAL-* effects which trigger the issue above, report more parameters than there actually are; for instance TAL-flanger reports 22 parameters, but only the first 9 are of any use; parameters from 10 to 21 are all named ""parameter"" and always set to 0.

When building the message, because it is made using ForEachParameter and that scans all 22 parameters, we need therefore to size the parameters vector with 22 items i.e. what the effect reports.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3850,2022-10-26T08:05:46Z,2022-11-15T13:53:13Z,vsverchinsky,1,12,3,338,7,2,1,[],15963.0,0,1748899.0,0,0,0,0,57521775.782088,,0,3,0,False,['Paul-Licameli'],"Done with this round.  Nothing seriously wrong, but please comment some things and consider the other suggestions.
",,"Resolves: #3838

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Are you aware this function is an override of a wxWindow function?  Do you intend that?
 If the schedule were more relaxed, I would ask you to learn the use of ShuttleGui rather than making so many direct calls to wxSizer methods.  But the task of rewriting this will wait until another release and perhaps be someone else's problem.
 Maybe you can rewrite the time text update with this instead, binding a certain event type: https://docs.wxwidgets.org/3.0/classwx_update_u_i_event.html

But mayb it's not any simpler that way.
 I would add `{}` to the two members above
 Maybe wxWeakRef<> pointer members can allow simplification
 What's the activity check really doing if there is no else branch?  But I'm still reviewing the second commit, so let me see.
 I understand better now, I see where mRequestStartTime is assigned.
 This function is the most difficult thing to understand in the entire pull request.  I don't think I do, yet.

It should be commented that the `OnValidationFinished` call supplies what would otherwise be an idle-time callback if the Skip button was not pressed.
 I see that this call, also, simulates the asynchronous messages that are skipped.  So please comment that too.
 The last thing I'm reviewing.

Now I understand:  let the destruction of the old validator happen in parallel with construction of a new one.

Why was this necessary?  Was there a significant pause if otherwise it happened serially?

Please explain that with a comment too.
 Didn't notice that, thanks! ""deferred within""
"
3929,2022-11-14T12:33:04Z,2022-11-14T20:32:32Z,Paul-Licameli,1,0,1,1,1,1,1,[],38526.0,1,38526.0,0,0,0,0,57574512.764556,,0,1,1,False,['Paul-Licameli'],"Mistakenly I merged this to master.  Now I have also cherry-picked it back onto the release branch at commit ea8aec68444873520335910144336cb6d38bc81d
Change understood and confirmed it works",Change understood and confirmed it works,"Resolves: #3842

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3927,2022-11-13T13:14:27Z,2022-11-14T20:31:45Z,Paul-Licameli,0,0,1,47,3,1,2,[],,1,112641.0,0,0,0,0,57584316.960333,,0,1,0,False,[],,,"Resolves: #3857

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3913,2022-11-10T15:05:14Z,2022-11-14T13:31:39Z,Paul-Licameli,0,0,1,11,2,1,1,[],,0,339988.0,0,0,0,0,57609525.456915,,0,1,0,False,[],Understood and fine for me.,Understood and fine for me.,"Resolves: #3854

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3919,2022-11-11T13:20:47Z,2022-11-14T13:15:27Z,ksoze95,0,0,1,11,1,1,1,[],,1,258890.0,0,0,0,0,57610492.596759,,0,1,1,False,[],,,"Resolves: #3570 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3909,2022-11-10T11:41:54Z,2022-11-11T09:23:27Z,DavidBailes,0,0,1,24,1,1,1,[],,0,78094.0,0,0,0,0,57883623.676469,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3470

Problem:
Narrator doesn't read the pressed state at all, and Jaws and NVDA don't read the toggle buttons as expected.

Fix:
In MSAA, there isn't such a thing as a toggle button. So imitate one by including the role and the state in the name, and creating a name change event when the state changes.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3696,2022-09-27T00:29:16Z,2022-11-09T09:45:34Z,vsverchinsky,23,15,12,1092,14,3,2,[],34947.0,0,3779415.0,0,0,0,0,58024263.404079,,0,12,0,False,"['petersampsonaudacity', 'dozzzzer', 'DavidBailes', 'Tantacrul', 'vsverchinsky', 'Paul-Licameli']","I'm not sure what the current design spec is for this, but what is read by screen readers is different from my initial suggestion: https://github.com/audacity/audacity/issues/2779#issuecomment-1093835971
What I was expecting was that when you tabbed to the button containing the playback/recording icon and the slider, screen readers would read something like
""record meter peak -30db button"", and 
""recording volume slider -4db"",
respectively.

However, what gets read by nvda when tabbing to the button and slider is:
""Record  button"", and
""Record Meter  Peak -60 dB  slider  46""
respectively.
I think the current implementation is less clear and more confusing compared to what I was expecting.

There are also some issues to do which how the slider is read when its value is changed, but these are secondary to the above issue.


 @LWinterberg . Given that the scale for the recording volume slider presented visually is wrong (https://github.com/audacity/audacity/issues/3690),
I think it would be better if the values of the volume slider read by screen readers were in the range 0 to 100, rather than incorrect ones in the range -60db to 0db. I think that would be far less confusing. What do you think? EDIT: ignore my previous comment. Actually, I think we should still display the meter the way it is for recording. However, we should display a % value while dragging the slider - and I think this should be passed to the screen reader too. @DavidBailes @Tantacrul I've updated a PR, can you please tell if it's alright now? My days! I am really struggling to figure out how to tab to the record volume slider (using MacOS) in order to change it and hear a screenreader 😦.

Is it mainly a Windows thing? Need tutorial!

Apart from that two quick points:

When changing the slider I can see a colon before the %. So it says **:77%**. I suppose it should say **Recording volume: 77%**. The same with the play volume too.
<img width=""880"" alt=""image"" src=""https://user-images.githubusercontent.com/21022311/193874500-88738b99-6944-44ed-b3b0-124980fa977a.png"">

When I hover over the 'Add effect' button, Voice Over (MacOS) calls it a 'Taste'. (!) Are we aware of this strangeness? I guess This should be raised as a separate issue. I was just curious if anyone had any thoughts.
<img width=""632"" alt=""image"" src=""https://user-images.githubusercontent.com/21022311/193875281-05ee5bce-f58d-458e-83f4-96d603caad6f.png"">


 > @DavidBailes @Tantacrul I've updated a PR, can you please tell if it's alright now?

Just to let you know that I've started to have a look at this. It clearly isn't complete, and I'll add detailed comments soon. Some comments on the volume sliders:
1. The names of the sliders are currently ""record meter"" and ""play meter"". They are not meters! In 3.1.3 the names of the sliders in the mixer bar were ""recording volume"" and ""playback volume"". The current names should be changed to something similar to those in 3.1.3.
2. The step sizes for the arrow keys and page up/down keys are too big. They should be the same as in 3.1.3: step size of 1 percent for arrow keys, 20% for page up/down.
3. When as slider is the focus, the value of the slider is read by the screen reader periodically, for no good reason. This is caused by the value change event created in MeterPanel::UpdateSliderControl(). The creation of this event should be removed from this function.
4. When the sliders are changed using the keyboard, the new value is not read by screen readers. I presume that adding the creation of a value change event at some suitable point in MeterPanel::SetMixer() would fix that.

Comments on the class MeterAx:
1. This looks like it's only been partly changed to be appropriate to the sliders - for example, MeterAx::GetName() is still the code from when this was a meter, not a slider. (Code along these lines will be needed for the accessibility of the meter buttons ).
2. ASliderAx provides a good template for what MeterAx should be like. Note that ASliderAx::GetName() isn't actually needed, as WindowAccessible::GetName() does the same thing.
3. Currently the behaviour of some of the member functions of MeterAx depends on the value of MeterPanel::mAccSilent, however this no longer needs to be the case, now that MeterAx represents a slider. MeterPanel::mAccSilent  was introduced at commit 3d420e01, and  may well be needed for the accessibility of the Meter buttons.

I'll add some comments on the meter buttons shortly. I'm done with this round of review.
 Some comments on the meter buttons. The names of these buttons read by screen readers does not get updated to reflect the updated peak, whether their is monitoring, and whether there has been clipping.
One way of fixing this would be as follows:
- derive a class from Abutton, say called MeterButton, and use it instead of AButton in this toolbar.
- In the MeterButton class override the function wxString GetName() const, and in this function return a string with the same contents as the string produced by MeterAx::GetName(). (MeterAx now represents a slider, so MeterAx::GetName() should be removed).

With respect to fully transferring the fix in commit https://github.com/audacity/audacity/commit/3d420e019ceb7aa0d0d86b51fb44a17680eb34c4,  once the accessibility names of the buttons are correct, I can check whether anything further needs doing about this. There may need to be a minor modification to AButtonAx to give it a silent mode. > My days! I am really struggling to figure out how to tab to the record volume slider (using MacOS) in order to change it and hear a screenreader 😦.

Testing with commit 700256 on MacOS
- I can tab to the sliders
- After pressing VO+Shift+Down arrow to interact with one, I can use the arrow keys to change the value of the slider
- VoiceOver does not automatically read the new value of the slider when it is changed - don't think it's ever done this for sliders in Audacity.

> 
> When I hover over the 'Add effect' button, Voice Over (MacOS) calls it a 'Taste'. (!) Are we aware of this strangeness? I guess This should be raised as a separate issue. I was just curious if anyone had any thoughts. <img alt=""image"" width=""632"" src=""https://user-images.githubusercontent.com/21022311/193875281-05ee5bce-f58d-458e-83f4-96d603caad6f.png"">

Fortunately, I can't reproduce this.

 > Some comments on the meter buttons. The names of these buttons read by screen readers does not get updated to reflect the updated peak, whether their is monitoring, and whether there has been clipping.
> One way of fixing this would be as follows:

Another way of fixing it would be:
- Derive a class from AButtonAx, say MeterButtonAx, and set this as the accessible for the AButton in this toolbar.
- In the MeterButtonAx class override the function wxAccStatus AButtonAx::GetName, and in this function create a string with the same contents as the string created by MeterAx::GetName(). (MeterAx now represents a slider, so MeterAx::GetName() should be removed).

Again, there may need to be some minor fixes to fully transfer the fix in commit https://github.com/audacity/audacity/commit/3d420e019ceb7aa0d0d86b51fb44a17680eb34c4.

 @dozzzzer @LWinterberg 

Testing on W19 with @vsverchinsky Vitaly's branch:  audacity-win-3.2.2-alpha-20221018+915aba6-x64

In this branch build:

a) the sliders on the Meter Toolbars now have the value of the current position

b) the tool-tip nicely updates when the slider is moved

![image](https://user-images.githubusercontent.com/50205984/196938888-86539936-5718-4bd5-a1d9-d55668bb69c7.png)

@DavidBailes  David, are these readable by screen readers?  My tests with NVDA seems to indicate that this is OK, but I am no accessibility expert.
 Comments on the meter buttons in the latest commit:
- if the meter is clipped, this is not read by a screen reader. In bool MeterPanel::IsClipping() const, it should be mBar[c].clipping, not mBar[c].isclipping, as in the old MeterAx::GetName().
- when appropriate, the screen reader should read ""monitoring"" or ""active"", but not both, as in the old MeterAx::GetName().
- the accessibility name does not include the current peak level, as in the old MeterAx::GetName(). In MeterToolBar::Populate(), the accessibility names of the buttons should just be set to ""record meter"" and ""playback meter"", as the peak level should be included in MeterButtonAx::GetName().
- When the button is pressed by pressing Enter, there is an unwanted ""beep"" indicating an invalid action. See also https://github.com/audacity/audacity/issues/3484 @vsverchinsky  and @crsib 

since Vitaly's branch build audacity-win-3.2.2-alpha-20221018+915aba6-x64
https://github.com/audacity/audacity/actions/runs/3272357779

at least fixes:    #3810  Hovertext tooltips for recording and playback sliders no longer show the values
and this is a **_very_** useful improvement for users,

is there any chance that we could pull this fix right now (for 3.2.2) while the further important accessibility issues that @DavidBailes raises can be dealt with separately - leaving this PR thread and #3230 still open - while closing off #3810.

Bearing in mind that #3810 is a recent regression issue introduced in 3.2.0 with the new combined Meter/Mixer toolbars. ? > * When the button is pressed by pressing Enter, there is an unwanted ""beep"" indicating an invalid action.

You may well be aware of this already, but there's a comment in void MeterPanel::OnKeyDown(wxKeyEvent &evt) about avoiding a beep. >the accessibility name does not include the current peak level, as in the old MeterAx::GetName(). In MeterToolBar::Populate(), the accessibility names of the buttons should just be set to ""record meter"" and ""playback meter"", as the peak level should be included in MeterButtonAx::GetName().

@DavidBailes Do I understand correctly that button name should include **peak hold** value and the slider should include **peak** value (`DecibelScaleCutoff`)? > @DavidBailes Do I understand correctly that button name should include **peak hold** value and the slider should include **peak** value (`DecibelScaleCutoff`)?

- The slider should NOT include the peak value.

- The button name should include the peak hold value, as it did in the old MeterAx::GetName().  (And the order of phases that make up the name should remain the same.) Snippet of old code:

      float peak = 0.;
      bool clipped = false;
      for (unsigned int i = 0; i < m->mNumBars; i++)
      {
         peak = wxMax(peak, m->mBar[i].peakPeakHold);
         if (m->mBar[i].clipping)
            clipped = true;
      }

      if (m->mDB)
         *name += wxT("" "") + wxString::Format(_("" Peak %2.f dB""), (peak * m->mDBRange) - m->mDBRange);
      else
         *name += wxT("" "") + wxString::Format(_("" Peak %.2f ""), peak);

      if (clipped)
         *name += wxT("" "") + _("" Clipped "");
   } @Paul-Licameli . I know you're busy, but could you review this. I may want to submit a fix for another bug, and want to avoid conflicts when it's merged. > @Paul-Licameli . I know you're busy, but could you review this. I may want to submit a fix for another bug, and want to avoid conflicts when it's merged.

Very nearly done
 @crsib @vsverchinsky 

So now this has been approved by @Paul-Licameli  and @DavidBailes  - how does this get pulled so it can be tested in a 2.3.3 alpha or beta? @dozzzzer did yet complete testing it, right? > @dozzzzer did yet complete testing it, right?

Not yet. Note that latest 3.3.0 alpha:  audacity-win-3.3.0-alpha-20221109+fe50013-x64-msvc2022

does **_not_** yet have thus merged in.

Looks good on latest 3.2.2.beta:  audacity-win-3.2.2-beta-20221109+f0bb347-x64-msvc2022
The reading by screen readers of the meter toolbar is now fine.
Glad to see that you got rid of the unwanted ""beep"", and that your fix also fixes the issue: https://github.com/audacity/audacity/issues/3484","The reading by screen readers of the meter toolbar is now fine.
Glad to see that you got rid of the unwanted ""beep"", and that your fix also fixes the issue: https://github.com/audacity/audacity/issues/3484","Resolves: #3230
Resolves: #3810 
Resolves: #3484

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Did you confirm that the buttons reformat after the value is changed and the Preferences dialog is dismissed?

If that doesn't work, then I maybe commit 3598fe4 added enough calls to Invalidate().
 Does mWhichMeters still need to be a bitwise or of non-exclusive choices?

There was old, old code for an alternative combined play & record meter toolbar in one, instead of the separate ones.  I forget when that was removed, but it appears the program is still constructing this third, combined meter toolbar, and yet never showing it and giving you no user interface to turn it on!

 The commit that adds PERCENT_SLIDER for the play and record meters is perhaps incomplete.

I can double-click on the slider thumb and get a dialog to enter a value.  But it must be a fraction from 0 to 1, not a percentage value.  Is that acceptable?  A design question @Tantacrul 

 I also see that not all calls to SendUpdate() are followed by ShowTip()  -- the dialog has some of those calls.  Should ShowTip() be added?
 At this commit, at least in macOS, I do not yet get the hover texts over these two slider thumbs.  But I do get them for track pan and gain and the mixer board gain slider.  Maybe a later commit will fix this. I haven't built them all yet.
 OK, after another commit that changes this default, I do see tooltips, on macOS -- but only if I click the thumb, not when I just hover the mouse over it.  This is different from the pan and gain sliders.

The text I see is like  "": 47%"" suggesting something was supposed to be formatted before the "":"" but is left empty.

I think that is mName being empty at these lines of ASlider.cpp:

```
      /* i18n-hint: An item name followed by a value, with appropriate separating punctuation */
      label = XO(""%s: %s"").Format( mName, val );
```

With pan and gain sliders, I see a hover text, but when I press the mouse, I see the same text, but it moves and is drawn in a bordered, rounded rectangle.  That's a little strange.

 Okay, at another commit, now I see the problems of previous commits corrected.  Names before the :, and a nice hover text with a rounded border.

In fact, now the old behavior of the pan and gain sliders looks worse!  There should be a minor issue I think to fix them to be consistent with the volume sliders.  Which is not part of the scope of this PR. @LWinterberg @Tantacrul 


 It is still the case, however, that when double clicking the volume slider thumb to get a dialog, I'm still not entering a percentage value, but instead a fraction in the range 0.0 to 1.0.
 Why GetDefault() and not just Read()?

Now if I change interface preferences so the bottom of scale is not -60 dB, the drawing updates for it correctly, but the name spoken for the button still says -60, inconsistently with the display.
 `DecibelScaleCutoff.GetDefault()` also occurs in the constructor of MeterPanel.  I put it there at commit 01a53e7da9b616d26d1bb49f381180f04438504f.  As a behavior-preserving code transformation, it was correct as I did it, eliminating the use of the constant ENV_DB_RANGE.  But was old behavior correct?  Perhaps not, and that other line should also be corrected to use Read().
 Thanks, fixed Thanks, dialog now shows values in range 0..100 If you add the space yourself, for the special reasons explained in the comment, then do not include the spaces in the strings to be translated.
 This applies to five translatable strings in this function.
 I see the minor fault was in copy-pasted code and not introduced here.  So it's just a recommendation.
"
3900,2022-11-08T03:22:10Z,2022-11-09T14:29:09Z,Paul-Licameli,3,0,2,256,3,1,1,[],23363.0,1,126423.0,0,0,0,0,58038083.721433,,2,2,0,False,"['pietro68', 'Paul-Licameli']","I tried this with BlueCat Chorus and the two originally reported problems still persist. Maybe what happened is that you tested it using DeeGain, but I was wrong when I wrote that DeeGain is affected by this (I just corrected the original issue).

I tried some debug printing in VSTEffectInstance::ProcessInitialize, printing the settings that come in (that is what gets called when pressing play). With both this branch and the release branch (on which this branch is based) what gets printed are the settings for what was in effect before the loading of the preset; and this both in the chunk and in the params map. 

In other words, it looks as if the loading of a user preset is not remembered by the framework. > I tried this with BlueCat Chorus and the two originally reported problems still persist. Maybe what happened is that you tested it using DeeGain, but I was wrong when I wrote that DeeGain is affected by this (I just corrected the original issue).
> 
> I tried some debug printing in VSTEffectInstance::ProcessInitialize, printing the settings that come in (that is what gets called when pressing play). With both this branch and the release branch (on which this branch is based) what gets printed are the settings for what was in effect before the loading of the preset; and this both in the chunk and in the params map.
> 
> In other words, it looks as if the loading of a user preset is not remembered by the framework.

You did not specify which branch you tested when you reported the problem.

I think the problem with DeeGain is real at the previous commit 7616b89f9ea38f31a64631b36de3b727dd7d4248 and is fixed by this commit.
 > You did not specify which branch you tested when you reported the problem.

I was testing branch i-3877

> I think the problem with DeeGain is real at the previous commit [7616b89](https://github.com/audacity/audacity/commit/7616b89f9ea38f31a64631b36de3b727dd7d4248) and is fixed by this commit.

I confirm that the commit `Fix start of play of VST after loading preset...` fixed the problem reported in #3899, but for DeeGain only. The problem persists with BlueCat Chorus.

Changes understood and fine with me. Please disregard my above comment about BlueCat Chorus, let's keep it out of the scope of this PR.","Changes understood and fine with me. Please disregard my above comment about BlueCat Chorus, let's keep it out of the scope of this PR.","Resolves: #3899
Resolves: #3855

Fix play after switching to a user preset in VST effects

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3901,2022-11-08T09:17:31Z,2022-11-09T12:39:45Z,crsib,0,4,1,30,2,2,1,['Build / CI'],,1,98538.0,0,0,0,0,58044650.06421,,0,1,1,False,[],,,"Xcode >= 14 no longer allows to disable code signing. This limitation is overcame by enabling ""Sign to Run Locally by Xcode""

> This PR does not immediately change the behavior of CI builds, as CI uses Xcode 13

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""signing""
 ""we need to"" 2x
 Extra ""we need to"" ""re-sign""
(not ""resign"" which means something else)
"
3893,2022-11-03T21:02:27Z,2022-11-09T05:26:51Z,Paul-Licameli,0,0,2,218,8,1,2,[],,0,462267.0,0,0,0,0,58070627.297586,,1,2,0,False,[],,,"Resolves: #3892 

Possible fix for some crashes on Windows after closing project window.

Long but repetitious -- a lot of null checks in event handlers of ProjectWindow,
which now holds a weak pointer, not a reference, to its project.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3886,2022-11-02T13:45:35Z,2022-11-07T23:07:03Z,Paul-Licameli,0,9,20,1575,36,2,0,[],,1,465694.0,0,0,0,0,58179814.845448,,2,20,1,False,[],,,"Resolves: #2553
Resolves: #3830
Resolves: #3462
Resolves: #3864

VST2 statelessness and output monitoring

Joint work of Paul and Pietro

Identical source to the previously tested branch, but a cleaned up commit history

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What is the reason to add that line? Potentially this call leads to an infinite recursion (but something prevents it, right?)   Is there a specific neccessity to distinguish `nullptr` from `empty` then? Shouldn't be there a complimentary call to `RealtimeProcessEnd`? Considering `!pAccessState->mState.mInitialized` that also means that there is no preceding `RealtimeInitialize` call. May be `i += TrackList::Channels(vt).size();` Unreachable There is no infinite recursion when there is a qualified call through to the base class function.  Still I can remove this line to be more conservative about the consequences.
 By empty, you mean nullopt?

On the one hand, the virtual function has a signature that can indicate failure.  On the other hand, there is not any use of that by the dialog to inform the user of error.

That omission should be fixed but is not yet.
 `RealtimeProcessStart` should perhaps be renamed as `ConsumeMessage` and documented as not requiring a complementary end call.  It needs to change state of settings in the instance.  I examined all the overrides to be sure this is what happens.
 This was a solution to problems of stickiness of VST effect settings changes when not playing.
"
3882,2022-10-31T16:49:56Z,2022-11-03T12:45:44Z,pietro68,5,5,1,54,1,2,1,[],1368.0,0,244548.0,0,0,0,0,58562702.191344,,2,1,0,False,"['crsib', 'pietro68', 'Paul-Licameli']","Can you confirm that this really appears to correct the performance problem?
 > Can you confirm that this really appears to correct the performance problem?

To me it looks like when I move the sliders while playing, the play line advances much smoother now, but still not 100% smooth. Anyway, it has improved. This on Windows (using vst3 Bluecat Chorus) I still have to try it on OSx.
 > > Can you confirm that this really appears to correct the performance problem?
> 
> To me it looks like when I move the sliders while playing, the play line advances much smoother now, but still not 100% smooth. Anyway, it has improved. This on Windows (using vst3 Bluecat Chorus) I still have to try it on OSx.

I observe that the vst3 and AU versions of DeeGain behave very well.  VST2 is improved, but not as much.  My speculation (already on Friday) was that unnecessary Base64 encoding and decoding was the reason.  I wrote changes to remove that.  They are in vst2-fix-metering.  I have not yet tried the combination of both fixes. macOS has a pretty decent profiler. Why guess? > macOS has a pretty decent profiler. Why guess?

Why guess, when you can deduce?
The total change might be small enough to squash into just one commit now
","The total change might be small enough to squash into just one commit now
","Resolves: #3869 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This assertion is now obviously true from context, so you can remove it
 As it says here https://en.cppreference.com/w/cpp/thread/condition_variable/notify_one, it is not necessary to keep the mutex locked while signalling, and might even be worse for performancde.  It needs to be held for the duration of changes that make the condition the waiter waits on true.

So you might insert `{` before the declaration of `lk` and `}` before you call `noitfy_one`.
 yes, I had to remove it when I rebased on release-3.2.2 I based my choice (release lock after notify) on what this page says: https://embeddedartistry.com/blog/2022/01/10/remember-to-lock-around-all-stdcondition_variable-variables/  - search for this text: ""However, it seems that the [C](https://embeddedartistry.com/fieldmanual-terms/c/)++ Core Guidelines discussions on GitHub prefer [this general guideline](https://github.com/isocpp/CppCoreGuidelines/issues/925#issuecomment-302269850):"" but of course I will give your suggestion a try"
3848,2022-10-25T12:15:25Z,2022-11-03T12:20:07Z,Paul-Licameli,0,0,1,8,2,1,1,[],,0,777886.0,0,0,0,0,58564237.210083,,3,1,0,False,[],,,"Resolves: #3847

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3844,2022-10-25T10:27:26Z,2022-10-31T13:12:46Z,DavidBailes,5,0,1,8,2,1,1,[],8969.0,0,528320.0,0,0,0,0,58820284.375825,,0,1,0,False,"['DavidBailes', 'petersampsonaudacity', 'Paul-Licameli']","@DavidBailes please rebase this onto the release-3.2.2 branch and change the base branch of the pull request (the Edit button for the bug title does this)
 Testing on W10 with @DavidBailes 's branch build with the the fix for this:  audacity-win-3.3.0-alpha-20221025+77e4692-x64

This now works properly with
1. Play Cut Preview
and also
2. Play before selection start
3. Play after selection start
4. Play before selection end
5. Play after selection end.

So looks properly fixed to me

@crsib @LWinterberg 
And I agree with David's request in #3792 that if possible this fix should be pulled into 3.2.2 maintenance release > @DavidBailes please rebase this onto the release-3.2.2 branch and change the base branch of the pull request (the Edit button for the bug title does this)

@Paul-Licameli . I've done this.  @Paul-Licameli hi Paul - this appears to still need a Review before it makes it into a 3.2.2 build > @Paul-Licameli hi Paul - this appears to still need a Review before it makes it into a 3.2.2 build

I have reviewed and approved it, but procedures have changed a little.  I will merge it after our QA team confirm that it fixes the problem, not before.
",,"Resolves: https://github.com/audacity/audacity/issues/3792

This affects ""play cut preview"", and most of the play before/after commands on the transport sub menu of the extra menu.

Whether or not the commands exit play mode depends in some apparently random way on one or more values of selection start, selection end, and in the playback page of preferences: the values of cut preview before and after cut region.

Play cut preview:
In CutPreviewPlaybackPolicy::GetPlaybackSlice(), in the initialization of Samples2, the fractional part of mDuration2 * mRate is disregarded. This can result in CutPreviewPlaybackPolicy::Done() never returning true. The fix is to round the value of the float, rather than disregarding the fractional part. The initialization of Samples1 was also changed, just for consistency.

Play after/before commands.
A similar issue.
In PlaybackPolicy::GetPlaybackSlice(), assignment of toProduce was changed to include rounding, and the assignment of frames was changed for consistency.

Note that in NewDefaultPlaybackPolicy::GetPlaybackSlice(), rounding is already used: toProduce = frames = 0.5 + (realTimeRemaining * mRate) / mLastPlaySpeed;




<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3814,2022-10-15T11:57:01Z,2022-10-28T21:13:15Z,Paul-Licameli,3,3,3,197,8,2,1,[],1153016.0,0,1156584.0,0,0,0,0,59050647.699482,,0,3,0,False,['Paul-Licameli'],"> It seem like the roots of the problem are in `EffectUI.h` and access to `ProjectWindow` from `RealtimeEffectStateUI` where simple `wxWindow` would be enough to attach the dialog to the project window. I'd rather suggest to decouple `EffectUI` and `EffectUIHost` classes and pass `wxWindow* parent` to the `RealtimeEffectStateUI::Show`, instead of loosening encapsulation of `ProjectWindow`

I do not understand these comments.  EffectUI was not involved at all.

Elimination of `#include ""RealtimeEffectPanel.h""` from ProjectWindow.cpp is what is needed to break this dependency
cycle, so that RealtimeEffectPanel depends on ProjectWindow but not the opposite.

What do you mean, to say ""encapsulation"" of ProjectWindow is ""loosened""?  Its header now exposes fewer member functions than before -- that's less surface area, not more.

But, the return type of one function does become more specific -- wxSplitterWindow not wxWindow.  That was necessary to move the showing and hiding functions for the sidebar out of ProjectWindow.

This is still very wxWidgets dependent -- not toolkit neutral -- but it exposes the fact that ProjectWindow can support a sidebar.  Yet, ProjectWindow makes no special assumptions about what the sidebar is for.  That is supplied by RealtimeEffectPanel as the special purpose window that knows how to plug itself in.
 Invert dependency of ProjectWindow on RealtimeEffectPanel, breaking a cycle.

Dependencies on RealtimeEffectPanel are added in some src/menus files
but that is acceptably acyclic.
 Invert dependency of ProjectWindow on RealtimeEffectPanel, breaking a cycle.

Dependencies on RealtimeEffectPanel are added in some src/menus files
but that is acceptably acyclic.It seem like the roots of the problem are in `EffectUI.h` and access to `ProjectWindow` from `RealtimeEffectStateUI` where simple `wxWindow` would be enough to attach the dialog to the project window. I'd rather suggest to decouple `EffectUI` and `EffectUIHost` classes and pass `wxWindow* parent` to the `RealtimeEffectStateUI::Show`, instead of loosening encapsulation of `ProjectWindow`","It seem like the roots of the problem are in `EffectUI.h` and access to `ProjectWindow` from `RealtimeEffectStateUI` where simple `wxWindow` would be enough to attach the dialog to the project window. I'd rather suggest to decouple `EffectUI` and `EffectUIHost` classes and pass `wxWindow* parent` to the `RealtimeEffectStateUI::Show`, instead of loosening encapsulation of `ProjectWindow`","Resolves: #3803

Invert dependency of ProjectWindow on RealtimeEffectPanel, breaking a cycle.

Dependencies on RealtimeEffectPanel are added in some src/menus files but that is acceptably acyclic.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`RealtimeEffectPanel::Get` does not provide `noexcept` guarantees We disagree about `noexcept`.  I notice you add it often.  I do not.

I'm not very certain what is right for `noexcept`.  I have heard arguments in Cppcon talks that it is not right to add it everywhere you can, just because you can.  It is meant for more specific uses, and should be used only when that is conveying some such related intent.

`noexcept` can be of use inside templates that test the conditional noexcept expressions, as in `if constexpr`, to compile more efficient versions of containers that don't need to implement strong exception safety guarantees.  But this is nothing like that.

Myself, I add `noexcept` when a virtual function is meant to be used inside a destructor, therefore its overrides must definitely not throw.  This is a way of documenting subclass responsibility.

I do not use it much elsewhere.
 Anyway, as you know now from completing the review, this is only a line in a transitional commit, before eliminating this function.

Were you saying that in the transitional commit, a `noexcept` function was calling another that was not `noexcept`?  True.

But then my opinion is that the unnecessary `noexcept` on the calling function should not have been there.
"
3845,2022-10-25T11:06:15Z,2022-10-25T13:14:24Z,Gootector,0,0,1,18,1,1,1,[],,0,7690.0,0,0,0,0,59338589.769888,,0,1,0,False,[],,,"Update Polish Translation from Transifex - 3.2.2
A few fixes and 1 critical - 'to pipeline' should be 'do przetwarzania potokowego'.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3785,2022-10-08T11:33:09Z,2022-10-20T15:47:21Z,Paul-Licameli,0,0,1,21,1,1,1,[],,0,1052056.0,0,0,0,0,59761411.994675,,2,1,0,False,[],,,"... What should have been done at commit 98071dd

Resolves: #3784 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3822,2022-10-17T18:34:00Z,2022-10-20T09:47:30Z,Bixilon,0,0,1,4,1,1,1,[],,0,227611.0,0,0,0,0,59783008.104513,,0,1,0,False,[],,,"Fixes a typo where github workflows will be skipped on files named `.gitatributes`, but the file is acutally named `.gitattributes`.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3818,2022-10-16T02:18:32Z,2022-10-19T13:27:49Z,Gootector,0,0,1,4,1,1,1,[],,0,299358.0,0,0,0,0,59856190.6835,,0,1,0,False,[],,,"Update Polish Translation from Transifex - 3.2.2
niezgodne -> niekompatybilne; like original 'incompatible'

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3824,2022-10-18T12:38:15Z,2022-10-19T13:07:09Z,Paul-Licameli,0,0,1,8,1,1,1,[],,0,88138.0,0,0,0,0,59857429.770797,,0,1,0,False,[],,,"Resolves: #3823

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3772,2022-10-06T17:44:21Z,2022-10-18T13:12:58Z,Paul-Licameli,1,0,2,120,5,1,2,[],426682.0,1,1020525.0,0,0,0,0,59943479.204698,,3,2,0,False,['Paul-Licameli'],"@ksoze95 @dozzzzer Please re-review and re-test, that the EQ effects are also fixed now
",,"... Commit 35581fa4 caused calls to Effect::Init that had not happened before. Some of these overrides assumed the setting of EffectBase::mTracks was done in DoEffect and got null pointer crashes.

Fix this by supplying an empty TrackList.

Also clean up mTracks in the effect object after DoEffect to avoid a dangling pointer.

Resolves: #3769 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3797,2022-10-11T10:58:14Z,2022-10-18T12:50:03Z,dozzzzer,0,0,1,4,1,1,1,[],,0,611511.0,0,0,0,0,59944862.320239,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3788

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3809,2022-10-14T13:29:52Z,2022-10-17T12:37:37Z,Paul-Licameli,0,0,1,3,1,1,1,[],,1,256068.0,0,0,0,0,60032009.662493,,2,1,0,False,[],,,"Resolves: #3806

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3763,2022-10-05T11:16:44Z,2022-10-13T14:15:48Z,Paul-Licameli,1,0,5,243,17,0,0,[],103698.0,0,703032.0,0,0,0,0,60370635.755268,,3,5,0,False,['Paul-Licameli'],"I have force-pushed, fixing an error in Flush() that had broken the persistency of settings changes in the project file.
",,"Resolves: #3743

This redraft of #3744 makes even more simplifications of RealtimeEffectState::Access with another stronger assertion.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3765,2022-10-05T15:27:46Z,2022-10-13T14:31:47Z,Paul-Licameli,0,0,9,254,27,1,1,[],,0,687846.0,0,0,0,0,60370762.028461,,2,9,0,False,[],,,"Resolves: #3745

This redraft of #3746 does not use std::any to implement Message and does not require an EffectInstance to to its copy and merge.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3762,2022-10-05T11:13:38Z,2022-10-13T14:10:11Z,Paul-Licameli,1,0,4,128,7,1,1,[],45047.0,0,701798.0,0,0,0,0,60372059.678456,,2,4,0,False,['Paul-Licameli'],"This force-push adds overrides of EffectValidator::Disconnect for Ladspa and LV2 as precaution against dangling pointers (though I'm not certain whether there were such bugs before)
Code changes understood. I repeated tests with Ladspa fast lookahead limiter; metering, stickiness and serialization work.","Code changes understood. I repeated tests with Ladspa fast lookahead limiter; metering, stickiness and serialization work.","Resolves: #3737

This redraft of #3736 without std::any lets one EffectOutputs reassign itself from another without the help of an Effect object.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3761,2022-10-05T11:10:57Z,2022-10-13T13:55:47Z,Paul-Licameli,3,4,14,633,93,3,1,[],20154.0,0,701100.0,0,0,0,0,60372921.082766,,1,14,0,False,['Paul-Licameli'],"Latest force-push only changed commit comments.
 I have pushed again, this time adding to the implementations of `Disconnect` for the Ladspa and LV2 validator classes, to prevent use of dangling pointers in output meter update events when the dialogs are closing.
 Another push fixes one foolish mistake where I called `reserve` but meant `resize` in `LV2Effect::MakeOutputs`

Also fixed the `Assign` overrides
Changes are understood. I tried Steve Harris' fast lookahead limiter (a ladspa effect) on windows and I confirm that its metering now works. Settings stickiness and serialization works too.",Changes are understood. I tried Steve Harris' fast lookahead limiter (a ladspa effect) on windows and I confirm that its metering now works. Settings stickiness and serialization works too.,"Resolves: #3729

This redraft of #3735 avoids using std::any and also adds more const-correctness of arguments.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Isn't it `AddTrack` happen on the main thread? Correct me if I'm wrong, but effect writes `LadspaEffectOutputs` on the processing thread, here you bind control directly to the location of these outputs, what prevents data races in that case? Yes, the main thread establishes some connections from the plugins to memory locations, for input of control values and outputs of meter values, before the instance is running.

Later it will use the locations when `LadspaEffect::Instance::RealtimeProcess` calls run().  But then that is happening on a worker thread.

There is a worker's copy of settings for the input port connections, and all the stuff in RealtimeEffectState does a careful inter-thread communication of settings changes that is sure to reassign those locations only just before RealtimeProcessStart.

There should properly be similar care in moving output values to the main thread, then letting UI widgets use them.

This PR lazily does it wrong, and the next PR corrects it using two copies of Outputs in the state, as there are two copies of Settings.

So I'm knowingly introducing a subtle bug and then correcting it.  I don't like presenting a code transformation this way, but the bug will be subtle, and I thought this was helping make the whole more understandable.

EffectOutputs is introduced, so meter update does not depend on the sending of Settings back to the main thread.

The second PR fixes the race.

Then these PRs make the third PR possible, which eliminates the copy of settings.  And that PR helps implement the other effect families more simply.  Some workarounds you did to keep VST3 effect dialogs sticky was to work around the original bad idea of mine, the copy of entire settings back.

That was good enough for the Ladspa and LV2 cases but I now see it as the really fundamental error of the design, which I want to be fixed before VST2 statelessness can be completed, and more simply than we did for VST3.

 You are right.  I explained the bug I introduce knowingly here but then correct in the second PR.

The two should be merged as a whole -- or perhaps the whole sequence of four should be -- but I thought the first PR was big enough already.
"
3624,2022-09-15T13:48:47Z,2022-10-11T10:19:27Z,ksoze95,1,0,2,83,4,2,3,[],71483.0,1,2233844.0,0,0,0,0,60558709.365696,,2,2,0,False,['crsib'],Please do not merge it yetThis has string changes and cannot go into the release I'm afraid. No objections for master.,This has string changes and cannot go into the release I'm afraid. No objections for master.,"Resolves: #3622

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3728,2022-09-30T19:02:25Z,2022-10-04T14:56:27Z,pietro68,1,0,1,15,1,1,1,[],332565.0,2,418688.0,0,0,0,0,61059049.784072,,0,1,1,False,['pietro68'],"for QA: I created a branch in which this effect is realtime-enabled, at https://github.com/audacity/audacity/pull/3756 you should be able to find builds there in a few minutes.

Please bear in mind that the Reverb effect still has its original limitation i.e. it can not respond in realtime to slider changes (and it can not be fixed - it is due to how the core reverb library works).",,"Resolves: request from Paul

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3727,2022-09-30T18:43:40Z,2022-10-04T14:58:17Z,pietro68,1,0,1,16,1,1,1,[],333707.0,2,419792.0,0,0,0,0,61059073.012627,,0,1,1,False,['pietro68'],"for QA: I created a branch in which this effect is realtime-enabled, at https://github.com/audacity/audacity/pull/3756 you should be able to find builds there in a few minutes.

",,"Resolves: request from Paul to make slaves instances.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3759,2022-10-05T10:21:36Z,2022-10-05T10:43:03Z,LWinterberg,0,3,1,11,1,1,1,[],,0,1641.0,1,0,0,0,61075350.33251,,0,1,0,False,[],I think some changes are needed,I think some changes are needed,,"I would prefer simply `Fixed Audacity crashing on startup on some systems.`

The crash is not Windows specific, the EXCEPTION_ACCESS_VIOLATION_READ is. FFmpeg Building with VST3 support is now possible without Conan"
3755,2022-10-04T09:57:06Z,2022-10-05T09:35:20Z,crsib,0,0,2,24,2,1,1,[],,0,85097.0,0,0,0,0,61079766.358029,,0,2,0,False,[],,,"Resolves: #3747 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3721,2022-09-29T12:48:10Z,2022-10-04T08:59:05Z,crsib,1,2,1,22,2,2,1,[],85874.0,0,418259.0,0,0,0,0,61168342.672084,,0,1,0,False,['LWinterberg'],"I can no longer reproduce either freeze in this buildThis fix looks correct to me, thanks OK with some suggestions
","This fix looks correct to me, thanks OK with some suggestions
","Resolves: #3699 
Resolves: https://github.com/audacity/audacity/issues/3716

When rapidly mashing the spacebar, there is a chance that AudioThread will 
never change the internal state to `State::eLoopRunning`.

In this scenario, `StopStream` will wait indefinitely for the AudioThread to ACK.

Waiting in `StartStream` ensures, that AudioThread has entered an expected 
state before the `StopStream` is called.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Indent changed.

I see StartAudioThreadAndWait was introduced at 00a8f2a68b1418b2f5979a7f33dc8092eb63b95a but never used.  And that contains the only other call to WaitForAudioThreadStarted.  That was an oversight in my earlier review.  Sorry.

The starting of the stream and the waiting for the ack are split, which isn't wrong.  So remove the unused function.

StopAudioThreadAndWait is unused too.

Reconsidering correctness of memory orderings, I think too that to be very correct, mAudioThreadTrackBufferExchangeLoopActive should be stored with release by AudioThread and tested with acquire by the main thread.  But maybe no difference as compiled for Intel.

 I just made a careful re-read of all of AudioIO::AudioThread.  Nothing more to say.
"
3724,2022-09-30T12:06:26Z,2022-10-03T15:00:18Z,crsib,0,0,1,16,2,1,1,[],,0,269635.0,0,0,0,0,61233072.803171,,0,1,0,False,[],,,"Resolves: #3722 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3751,2022-10-03T11:44:49Z,2022-10-03T13:24:55Z,ksoze95,0,0,1,2,1,1,1,[],,1,6010.0,0,0,0,0,61238797.064203,,1,1,0,False,[],"Such a silly little mistake at commit 47f8d10de3d8188c6b42b073603763980c777a0f many years ago!
","Such a silly little mistake at commit 47f8d10de3d8188c6b42b073603763980c777a0f many years ago!
","Resolves: #3594 
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3749,2022-10-03T10:21:10Z,2022-10-03T10:40:39Z,SteveDaulton,1,0,1,2,1,1,1,[],2102.0,0,2102.0,0,0,0,0,61247726.109471,,0,1,0,False,['SteveDaulton'],Thanks Paul.,,"Resolves: https://github.com/audacity/audacity/issues/3748

*Fix error message*
(The length of sounds is not relevant in this plug-in, though it was relevant in its predecessor.)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3725,2022-09-30T15:45:38Z,2022-10-03T09:13:54Z,vedantmgoyal9,2,0,1,2,1,1,1,[],885.0,0,235696.0,0,0,0,0,61253866.320998,,0,1,0,False,"['crsib', 'vedantmgoyal9']",Can you please rebase on `release-3.2.1`? This will be released much sooner than the current master. @crsib done 👍🏻 ,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1321,2021-07-18T23:18:11Z,2021-07-18T23:55:09Z,SteveDaulton,0,0,1,5,1,1,1,[],,0,38057072.0,0,0,0,0,61334939.605147,,0,1,0,False,[],,,"Typo slipped in with commit d31db975ee

Resolves: error in pipeclient.py

Python 2 should use ""raw_input""


- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] I made sure the code compiles on my machine
- [x ] I made sure there are no unnecessary changes in the code
- [x ] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x ] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
3200,2022-07-08T11:50:37Z,2022-09-09T11:04:17Z,SteveDaulton,1,0,2,300,29,1,1,[],1843279.0,0,7426242.0,0,0,0,0,61335025.72125,,0,2,0,False,['SteveDaulton'],I guess that I need to request a review.,,"Removed obsolete ;action header.
Removed ;manpage header for plug-ins without GUI.
Bump ;release patch number.
Fix other minor consistency issues.

Resolves: Inconsistent capitalization of effect names.
Resolves: Obsolete headers.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1036,2021-06-21T00:09:42Z,2021-06-24T00:57:04Z,SteveDaulton,3,0,1,4,1,1,1,[],38140.0,0,40473051.0,0,0,0,0,61335074.023644,,0,1,0,False,"['SteveDaulton', 'petersampsonaudacity']","+1 for QuickFix for 3.0.3 This fix has now been tested by Peter.
Just waiting for someone to get round to ""reviewing"" and committing the obvious one character change. Given that this has been fixed and tested - can we please ensure this gets reviewed and pulled for 3.0.3I blackbox tested this fix of Steve's and it fixes the problem of Bug #2809  Fixes the problem of Bug 2809 when tested",I blackbox tested this fix of Steve's and it fixes the problem of Bug #2809  Fixes the problem of Bug 2809 when tested,"Fix incorrect equality comparison between int and float and
bump plug-in release number.

Resolves: https://bugzilla.audacityteam.org/show_bug.cgi?id=2809
Resolves: https://github.com/audacity/audacity/issues/1032

When sample rate is not divisible by 100, the low sample rate copy has a fractional sample rate, so the calculated minimum silence duration in samples is a floating point number. Replace equality comparison with greater or equal so that we don't miss adding the label.

Also bumped plug-in release number to signify that plug-in has been updated.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
3720,2022-09-29T12:33:31Z,2022-09-30T12:20:36Z,KissDaniGH,0,0,1,242,1,1,1,[],,0,85626.0,0,0,0,0,61501872.176804,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3692,2022-09-26T14:53:51Z,2022-09-28T12:57:59Z,pietro68,0,4,5,639,2,2,1,[],,0,165849.0,0,0,0,0,61672431.451003,,0,5,0,False,[],"All looks good.

Adapt the rest of the real-time capable built-ins to this same pattern in other pull requests.

Those may soon include Distortion and Echo.
","All looks good.

Adapt the rest of the real-time capable built-ins to this same pattern in other pull requests.

Those may soon include Distortion and Echo.
","Resolves: #3689 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I don't like the unexplained ""Temporarily needed"" functions.

Instead, change the base class to PerTrackEffect, then you don't need these two overrides.

Also, declare `MakeInstance` as override.
 Commenting on the whole PR, it appears to be a correct transformation.  But I want to add a requirement.

Make the objects in this array the same class as the instance -- as is done already for AudioUnits and VST2.

When that works, do the same when you transform other built-in effects to statelessness.  Write PRs to do the same retroactively for the Reverb and Wahwah transformations.

If time allows, make PRs to do the same for Ladspa and LV2.

The reason?

I don't like the duplicated interface for processing EffectInterface.h.  There is RealtimeProcess but also ProcessBlock.  I wabt them unified so the interface is simpler.

That means eliminating the group argument of realtime process.  More about that later:  but making every array of slaves an array of Instances is the beginning.  Then the ""array of slaves"" is exposed to RealtimeEffectState, not an internal detail of each Instance class.  The RealtimeEffectState will dispatch to the correct Instance object.


 Ok, both integrated into step 3 now. I implemented this in the last commit, please let me know if it is what you meant; if so, I will then integrate it in step 3."
3712,2022-09-28T10:25:45Z,2022-09-28T12:54:24Z,ksoze95,0,0,1,13,1,1,1,[],,1,8934.0,0,0,0,0,61672634.686768,,1,1,0,False,[],,,"Resolves: #3686

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3711,2022-09-28T08:10:34Z,2022-09-28T12:05:28Z,KissDaniGH,0,0,1,1915,1,1,1,[],,0,14094.0,0,0,0,0,61675587.909297,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3703,2022-09-27T15:02:02Z,2022-09-28T09:44:09Z,crsib,0,0,3,453,7,1,1,[],,0,67330.0,0,0,0,0,61684065.996624,,0,3,0,False,[],,,"Resolves: #3474 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3672,2022-09-22T23:24:24Z,2022-09-27T13:57:13Z,bdrung,0,0,1,4,1,1,1,[],,0,411861.0,0,0,0,0,61741395.078033,,0,1,0,False,[],,,"If `CMAKE_BUILD_TYPE` is set to `RelWithDebInfo` the debug information should not be stripped. Currently `strip -x` is called when `RelWithDebInfo` is set. A useless `echo` is called when `Debug` is set.

Skip `strip -x` when `CMAKE_BUILD_TYPE` is set to `Debug` or `RelWithDebInfo`.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3695,2022-09-26T20:34:42Z,2022-09-26T23:36:26Z,Gootector,0,0,1,4,1,1,1,[],,0,10904.0,0,0,0,0,61806936.06681,,0,1,0,False,[],,,"Update Polish Translation from Transifex
This important update fixes wrong translation.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3634,2022-09-16T14:00:00Z,2022-09-20T09:47:05Z,ksoze95,1,2,1,5,2,2,1,[],504.0,1,547528.0,0,0,0,0,62157996.774873,,1,1,0,False,['ksoze95'],"Replaced the slider with a spinctrl.  The control is constraint to values between 98-320 only via the up and down arrows.  The textbox is currently not validated yet, so you can enter a value outside this range.  However when you press save, it will constrain the desired target kps to the nearest value inside the valid range.

A later PR will be raised to have validation for the textbox as well.",,"Resolves: #1818

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Is changing this line necessary?  Nope.  Forgot to undo change.  Will fix it up now.
3664,2022-09-21T17:33:39Z,2022-09-22T16:07:52Z,Paul-Licameli,0,4,3,85,6,2,1,[],,0,81258.0,0,0,0,0,62179450.323705,,4,3,0,False,[],,,"Resolves: #3447

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I still observe this call during the playback. I had an impression that this is wrong? Playback?  Which steps to reproduce are you referring to? Hmm, looks like I've missed something. So this change is really about moving ProjectWindowDestroyedMessage? Updated steps to reproduce at https://github.com/audacity/audacity/issues/3663 explain that playback was not a necessary part
"
3668,2022-09-22T12:05:51Z,2022-09-22T14:39:09Z,Paul-Licameli,0,0,1,15,2,1,1,[],,0,9198.0,0,0,0,0,62184780.633863,,1,1,0,False,[],,,"Resolves: #3666 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3653,2022-09-20T14:57:54Z,2022-09-20T15:51:34Z,crsib,0,0,1,16,2,1,1,[],,1,92751.0,0,0,0,0,62263706.903789,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3662,2022-09-21T14:08:21Z,2022-09-21T15:02:42Z,Paul-Licameli,0,0,1,8,1,1,1,[],,0,3263.0,0,0,0,0,62269770.372759,,0,1,0,False,[],,,"Resolves: assertion violation when playing with AIIRADecoder

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3659,2022-09-21T12:05:04Z,2022-09-21T12:42:06Z,Paul-Licameli,0,2,1,18,3,2,1,[],,0,2225.0,0,0,0,0,62278207.257112,,1,1,0,False,[],,,"Resolves: #3658

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Not sure if it matters, but `Insert` and `Remove` could fix that as well... As it is, the publisher supplies a little more information, distinguishing types, which in this case isn't needed, but perhaps it will be useful later.
"
3654,2022-09-20T15:07:30Z,2022-09-20T16:02:10Z,LWinterberg,0,0,1,16,1,1,1,[],,0,68537.0,0,0,0,0,62287351.283021,,0,1,0,False,[],,,,
3655,2022-09-20T16:19:28Z,2022-09-21T06:02:11Z,Paul-Licameli,0,0,1,5,1,1,1,[],,1,49366.0,0,0,0,0,62302206.44756,,1,1,0,False,[],,,"Resolves: #3441

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3656,2022-09-20T17:44:42Z,2022-09-20T19:07:04Z,Paul-Licameli,3,0,1,4,1,1,1,[],164.0,1,5002.0,0,0,0,0,62341458.629396,,2,1,0,False,"['crsib', 'Paul-Licameli']","And my usual question - is the branch right? > And my usual question - is the branch right?

Yes.

But now it seems that if I make a PR first on master, and then correct the base branch -- that causes the linking of the PR with the issue card that I want to see!
 ... but still I must move the issue card by hand to the right column.
",,"... Capture correct pointers-to-members.  Mistake entered at commit 4dcc5ee

Resolves: #3520

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3649,2022-09-20T12:14:26Z,2022-09-20T16:52:41Z,crsib,0,0,3,38,3,1,1,[],,0,16698.0,0,0,0,0,62349580.861236,,0,3,0,False,[],,,"Resolves: #3083 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3142,2022-06-25T19:55:24Z,2022-07-08T12:21:29Z,LWinterberg,0,0,10,0,180,1,1,[],,1,7498746.0,0,0,0,0,62356677.068938,,1,10,0,False,[],,,"~~This PR is used to see how https://github.com/musescore/MuseScore/blob/master/fonts/mscore/MusescoreIcon.ttf looks inside Audacity and to generate testable builds.~~

Resolves part 1 of #3195

NB: Squash before merge",
2667,2022-03-11T16:24:56Z,2022-03-22T09:25:12Z,LWinterberg,0,0,1,5,1,1,1,[],,0,16669753.0,0,0,0,0,62356700.137114,,0,1,0,False,[],,,updating once more,
3136,2022-06-25T13:29:43Z,2022-07-11T11:48:57Z,LWinterberg,1,7,2,3,1,6,1,[],1225044.0,0,7521861.0,0,0,0,0,62356707.235564,,0,2,0,False,['Paul-Licameli'],"I am pleased to see the long overdue credit added for @Pokechu22 .
Although not directly about this pull request, ""Jean Claude Risset"" is not directly a contributor to Audacity. I suspect that his name was erroneously added to the credits because he is mentioned here: https://github.com/audacity/audacity/blob/5d10d6f2d1d636a1b267c5dcc45cb3da0421f01f/plug-ins/rissetdrum.ny#L13","Although not directly about this pull request, ""Jean Claude Risset"" is not directly a contributor to Audacity. I suspect that his name was erroneously added to the credits because he is mentioned here: https://github.com/audacity/audacity/blob/5d10d6f2d1d636a1b267c5dcc45cb3da0421f01f/plug-ins/rissetdrum.ny#L13",,"Are we okay with putting funny nicknames in the credits (instead of real names or at least pseudonyms)?  Does it look professional enough?  Should such handles be ""quoted"" Just asking an opinion @Tantacrul 
 And do these individuals know they are being credited and have they agreed to being identified exactly so?
 If the answers are yes to all of that, ask me about someone who deserves an overdue credit too, though never identified to us by a real name.
 @RuRo @Subhra264 can we please have your thought on this? I am okay with this. :) > And do these individuals know they are being credited and have they agreed to being identified exactly so?

Yup! My sense is that if a contributor would rather we use their alias and not their real name, we should. The exception would be anything particularly naughty-sounding 😀 "
3603,2022-09-12T11:46:07Z,2022-09-12T13:02:06Z,LWinterberg,0,0,1,37,4,1,1,[],,0,702465.0,0,0,0,0,62356721.476646,,0,1,0,False,[],,,Resolves: #3488,
3472,2022-08-29T14:05:04Z,2022-08-29T14:23:03Z,LWinterberg,0,2,3,44,1,1,1,[],,0,1903707.0,0,0,0,0,62356744.601805,,0,3,0,False,[],,,,"Not in the first alpha Probably ""Audacity binaries""?"
3602,2022-09-12T10:11:19Z,2022-09-12T13:03:12Z,LWinterberg,0,0,1,2,1,1,1,[],,0,708117.0,0,0,0,0,62356761.671585,,0,1,0,False,[],,,lmk if there's more things which go in there,
3629,2022-09-16T10:33:06Z,2022-09-20T10:10:18Z,LWinterberg,7,0,1,6,2,1,1,[],13284.0,0,361197.0,0,0,0,0,62356776.867821,,1,1,0,False,"['LWinterberg', 'petersampsonaudacity']","@LWinterberg 

I think you have made them slightly too large Leo - they now pop down in a third row in the top tooldock in your branch build.

![image](https://user-images.githubusercontent.com/50205984/190660504-5486b735-d5fc-4fc9-91d6-556c99749378.png)

Trying to relocate one of them to the top (at default window size) shows the overhang:
![image](https://user-images.githubusercontent.com/50205984/190660285-b71bbc7c-9d35-425c-bc52-97bb98e7a515.png)

They can fit nicely (at default window size) and with the improved numbering:
![image](https://user-images.githubusercontent.com/50205984/190661065-f5249e69-7f8f-4fa7-a545-b469ac1bb226.png)


 @LWinterberg 

Ahhhh, I note, Leo, that you have also made the Audacity default window narrower (which I really like).

a) on my PC with your branch build the window is 21.7 cm wide

b) on my PC with 3-2-0 Beta it is 3cm wider at 24.7 cm wide

So rather than reducing the new size of your meters maybe you just need to widen the default window by a small amount.
 oh, interesting: the default window widths are 1120 and 1060 (depending on whether the share audio button is present), but the actual width is 1106 for the audio sharing button version. I wonder where we lose the 14px @LWinterberg  testing your latest branch - that's much better Leo - nice  :-))

![image](https://user-images.githubusercontent.com/50205984/190683186-7837e75a-ee65-4683-bf0d-7b79c113d21e.png)

_And now still only 21.9 cm wide_
 I assume this is gonna make it into 3.2.0 ?
 @LWinterberg @crsib @Tantacrul 

Will this get pulled into the 3.2.0 release - looks much better like this with Leo's changes?

_I see that it's pending a review from Vitaly  @vsverchinsky_  Testing on W10 with latest 2.3.0 build (today's)

Looking good now in the release build
![image](https://user-images.githubusercontent.com/50205984/191245069-2260246f-f71d-4a13-a2b7-3bd5369303dc.png)
",,"Resolves: #3627
part 1 of it anyway.

looks like this to me: 
![image](https://user-images.githubusercontent.com/87814144/190619916-cfd794c5-580e-4b4a-811e-00d09adf5a0a.png)
",
3648,2022-09-20T12:11:07Z,2022-09-20T12:42:07Z,Paul-Licameli,3,0,1,8,1,1,1,[],68.0,0,1865.0,0,0,0,0,62364630.115094,,1,1,0,False,"['crsib', 'Paul-Licameli']","Hmm, have you intended to open it against `release-3.2.0`? Fixed

Why is there also a distinct alpha branch?
 I will delete it",,"Resolves: #3520

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3574,2022-09-08T12:38:37Z,2022-09-20T10:21:31Z,crsib,0,0,1,2,2,1,1,[],,0,1029606.0,0,0,0,0,62372041.281191,,1,1,0,False,[],,,"Resolves: #2498 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3647,2022-09-19T13:16:51Z,2022-09-19T13:53:54Z,crsib,0,0,1,17,1,1,1,[],,0,2226.0,0,0,0,0,62446729.364808,,0,1,0,False,[],,,"Resolves: #3324 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3645,2022-09-19T11:41:08Z,2022-09-19T12:33:21Z,crsib,0,0,1,4,1,1,1,[],,0,3136.0,0,0,0,0,62451564.378107,,0,1,0,False,[],,,"Resolves: #3585 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3644,2022-09-19T11:35:18Z,2022-09-19T11:44:57Z,vedantmgoyal9,2,0,1,7,1,1,1,[],382.0,0,579.0,0,0,0,0,62454473.636876,,0,1,0,False,"['crsib', 'vedantmgoyal9']","@crisb I forgot this update earlier since the PR had moved at the bottom in my notifications feed. No worries! Thank you for your help!

We will know if it works on Wednesday xD",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior

cc @crsib",
3643,2022-09-19T10:05:10Z,2022-09-19T11:17:10Z,crsib,0,0,3,254,11,1,1,[],,0,4323.0,0,0,0,0,62456139.73228,,0,3,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2899,2022-05-06T13:59:34Z,2022-09-19T11:15:34Z,vedantmgoyal9,6,0,2,12,1,1,1,[],2418769.0,0,11740560.0,0,0,0,0,62456241.007179,,0,2,1,False,"['crsib', 'vedantmgoyal9', 'Paul-Licameli']","cc @Paul-Licameli  > cc @Paul-Licameli

I’m not the best one to evaluate that idea, but @crsib maybe Hey @[vedantmgoyal2009](https://github.com/vedantmgoyal2009)!

Thank you for the PR and for keeping Audacity in WinGet repos before. The PR will merged quite soon, sorry for the delay Thanks for your reply. I hope it won't take much time :) @crsib please review and merge the pull request...  I will surely do that before we branch out release!",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

This action automatically generates manifests for WinGet Community Repository ([microsoft/winget-pkgs](https://github.com/microsoft/winget-pkgs)) and submits them.

Before merging this:
1. Please add a GitHub token with `public_repo` scope as a repository secret and rename the secret name in the workflow.
2. Fork [microsoft/winget-pkgs](https://github.com/microsoft/winget-pkgs) under @Audacity

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3638,2022-09-17T12:46:02Z,2022-09-19T11:06:34Z,Gootector,0,0,2,12,1,1,1,[],,0,166832.0,0,0,0,0,62456783.060389,,0,2,0,False,[],,,"Update Polish Translation from Transifex
The last patch for Audacity 3.2.x translation.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3639,2022-09-17T15:51:37Z,2022-09-19T08:45:16Z,vsverchinsky,0,1,1,70,9,1,1,[],,0,147256.0,0,0,0,0,62465226.272294,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Please mark `explicit`
3138,2022-06-25T13:51:17Z,2022-06-28T08:01:46Z,carlo-bramini,1,3,13,7,1,2,1,[],7406245.0,0,7406246.0,0,0,0,0,62471058.289702,,0,13,0,False,['Rossmaxx'],"hi i am trying to get audacium (a fork of audacity) compiled on mingw and saw 2 of your prs. if you don't mind, can you please help me.

here's my pr on audacium : https://github.com/Audacium/audacium/pull/119",,"I tried to build with MinGW-w64 and I got this error:

```
i686-w64-mingw32-g++: fatal error: cannot specify ‘-o’ with ‘-c’, ‘-S’ or ‘-E’ with multiple files
compilation terminated.
```

This happens because this line assumes to include configwin.h only to MSVC with /FI option:

https://github.com/audacity/audacity/blob/9000d4cb37dafa8d122bb696a80d56872623fa29/cmake-proxies/cmake-modules/AudacityFunctions.cmake#L230

Attached patch allows to recognize also GNUC and it fixed the build.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think `$<IF>` makes more sense here. This way we separate MSVC and GCC/CLANG > I think `$<IF>` makes more sense here. This way we separate MSVC and GCC/CLANG

Excuse me... I'm sorry but I have not understood very well how I should use the `$<IF>` expression here. Something like

```
$<IF:$<CXX_COMPILER_ID:MSVC>, 
    /FI${CMAKE_BINARY_DIR}/src/private/configwin.h,
    -include ${CMAKE_BINARY_DIR}/src/private/configwin.h
>
```"
3552,2022-09-06T12:58:22Z,2022-09-13T11:16:41Z,Paul-Licameli,0,3,7,295,8,2,1,[],,2,863830.0,0,0,0,0,62709451.907358,,1,7,0,False,[],"I can not honestly say that I fully understood the changes, but I get a sense of them - I do not know this part of the code well enough. Anyway, I verified that the fix works.","I can not honestly say that I fully understood the changes, but I get a sense of them - I do not know this part of the code well enough. Anyway, I verified that the fix works.","Resolves: #3221 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","So the meaning of the return value has changed; but it is difficult for me to understand what it is now. I suppose it is `@return how many samples to discard for latency` because that is the comment for the method which calls it more or less directly. maybe ""the"" should be deleted? Exactly.  The comments in header files are updated.

The sum of latencies of the effects must be discarded but the state object is responsible to report the count, only, not do the discarding.
"
3560,2022-09-07T11:31:20Z,2022-09-07T13:20:58Z,Paul-Licameli,0,0,1,3,2,2,2,[],,2,710180.0,0,0,0,0,62781926.108747,,0,1,0,False,[],Works for me.,Works for me.,"Resolves: #3500

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3589,2022-09-09T11:51:07Z,2022-09-09T12:43:25Z,Paul-Licameli,0,1,1,10,2,1,1,[],,2,534364.0,1,0,0,0,62783757.44352,,2,1,0,False,[],I expect that this PR will fail to compile. Please see mClosed definition.,I expect that this PR will fail to compile. Please see mClosed definition.,"Resolves: #3580

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",mClosed is conditionally compiled under `#if wxDEBUG_LEVEL`
3506,2022-09-01T13:11:49Z,2022-09-05T08:38:04Z,vsverchinsky,0,0,1,11,1,1,1,[],,1,1209180.0,0,0,0,0,62795301.809371,,1,1,0,False,[],,,"Resolves: #3423
Resolves: #3292

There are probably similar issues with commands names in macro editor

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3621,2022-09-14T21:43:59Z,2022-09-15T11:41:26Z,mlocati,1,0,1,2322,1,1,1,[],50920.0,0,52189.0,0,0,0,0,62798365.058577,,0,1,0,False,['crsib'],@Paul-Licameli can you cherry peak it to release-3.2.0 please?,,"Italian strings updated (using Transifex - resource `Audacity 3.2.0 Alpha [temporary]`).

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3620,2022-09-14T20:24:30Z,2022-09-15T11:45:11Z,Gootector,0,0,1,79,1,1,1,[],,0,55241.0,0,0,0,0,62800084.090698,,0,1,0,False,[],,,"Update Polish Translation from Transifex
Update translation file from Transifex - missing strings from resource Audacity 3.2.0 Alpha [temporary].

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3614,2022-09-13T17:44:57Z,2022-09-14T14:09:03Z,Gootector,0,0,1,2328,1,1,1,[],,0,73446.0,0,0,0,0,62877854.12216,,0,1,0,False,[],,,"Update Polish Translation from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3613,2022-09-13T16:19:33Z,2022-09-13T16:44:35Z,crsib,0,2,1,24,2,1,1,[],,0,1505.0,0,0,0,0,62954921.448575,,2,1,0,False,[],,,"Resolves: #3485

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Conditional check is not needed as StopPlayback returns early if mPlaying is not set. Same as above.  Conditional check is not needed.
3610,2022-09-13T10:46:26Z,2022-09-13T11:18:55Z,crsib,0,0,1,13,1,1,1,[],,0,1952.0,0,0,0,0,62974463.511503,,0,1,0,False,[],,,"Resolves: #3605

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3562,2022-09-07T11:50:28Z,2022-09-09T18:03:45Z,crsib,0,1,10,462,14,1,1,[],,1,465632.0,0,0,0,0,63025343.936343,,0,10,0,False,[],,,"Resolves: #3554
Resolves: #3551 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Another way to handle this is to assign `wxID_CANCEL` to cancel button. `wxDialog` already handles escape key
3588,2022-09-09T11:35:39Z,2022-09-09T12:34:36Z,crsib,0,0,1,7,1,1,1,[],,1,284476.0,0,0,0,0,63034591.059171,,0,1,0,False,[],,,"Resolves: #3585 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3571,2022-09-07T18:15:02Z,2022-09-09T11:03:55Z,crsib,3,0,1,6,2,1,1,[],146103.0,1,433302.0,0,0,0,0,63034604.06772,,0,1,0,False,"['crsib', 'LWinterberg']","While this fix seems to not apply the GTK theme properly (maybe it's some sort of fallback/default? Certainly isn't adwita-dark), it's way more usable now. Testing across the board of linux UI bugs, 

* #2279 is fixed
![image](https://user-images.githubusercontent.com/87814144/189324385-09d0774b-9fc6-4d94-afae-5da157dcffd2.png)
* #3543 is fixed
![image](https://user-images.githubusercontent.com/87814144/189325672-4eca7aef-3fb4-4205-827d-093226a48c13.png)
* #2222 and
* #2937 aren't really fixed: The scrollbar functionality appears invisibly as soon as its needed, but the visuals only update when the window is resized. This also applies the other way round, if you have scrollbars and then delete your tracks, white bars will stay around the edge where the scrollbars used to be.
* #2270 is fixed. While there is a single icon shown as an x, I believe this to be a case where my icon pack doesn't specify that icon, rather than something Audacity related. 
![image](https://user-images.githubusercontent.com/87814144/189327361-25c4159d-570b-40ed-a078-79be0fbfc610.png)
* #2624 is mostly fixed
![image](https://user-images.githubusercontent.com/87814144/189327844-9fb00fdc-5e08-44f4-80a2-813ee58c8e54.png)
* #1800 and 
* #1456 aren't really fixed - even at 100%, text gets cut off ever so slightly, compared to other dropdowns. At 200% it completely runs off (see below)
![image](https://user-images.githubusercontent.com/87814144/189328289-dc77e821-754c-4ce4-b79c-834f46659626.png)
* #1709 is fixed for me.
* #503 does not change (not that I expected that it would). Here's an example of Audacity inside a properly behaved app. 
![image](https://user-images.githubusercontent.com/87814144/189330654-7930989d-0430-4ad7-8bc0-0ed58ca909e1.png)
* #1536 appears fixed at 100%, at least I don't get the bugs listed inside it as examples (""some elements are malformed, notably the Device Toolbar appears to be empty, and text in the track's control panel is tiny."")
* #1609 is fixed (probably: never was broken) on 100%
![image](https://user-images.githubusercontent.com/87814144/189333001-25166a75-8c89-404b-a545-4a8a822df641.png)


I think that's all of them. I don't know how many of them should be marked as resolved by this PR :)  Whoa, that is quite a lot of feedback, thank you! I think #1536 is about GTK3 build, we are still building GTK2. So not fixed, I guess",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3575,2022-09-08T12:59:01Z,2022-09-12T10:46:10Z,vsverchinsky,0,0,1,42,2,1,1,[],,0,345724.0,0,0,0,0,63054745.195071,,1,1,0,False,[],,,"Resolves: #3564

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3604,2022-09-12T12:24:00Z,2022-09-12T12:59:33Z,vsverchinsky,0,2,1,11,1,3,2,[],,0,2136.0,0,0,0,0,63054836.276618,,0,1,0,False,[],,,"Resolves: #3581

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this intended by analogy with 1b095c80960e994152f8b4538bec85ca4abf9001 to fix Xfer Ott and other effects?

Unlike in the AudioUnits case, there was only this one place where the return of `setProcessing` (like `Bypass()`) was checked.

Did you also make sure powering the effect on and off during play works as expected?
 >Did you also make sure powering the effect on and off during play works as expected?

Yes, it works.

>Is this intended by analogy with https://github.com/audacity/audacity/commit/1b095c80960e994152f8b4538bec85ca4abf9001 to fix Xfer Ott and other effects?

It worked before, so I did a bisecting"
3546,2022-09-05T22:56:52Z,2022-09-07T20:55:23Z,Paul-Licameli,1,1,1,274,33,2,2,[],748.0,2,566570.0,0,0,0,0,63057232.423793,,0,1,0,False,['Paul-Licameli'],"@petersampsonaudacity @dozzzzer @Ryan-Miller-Audacity the complete list of effects changed by this PR, which may have had bugs that are now fixed -- I didn't take time to test every one.

Amplify
AutoDuck
BassTreble
ChangePitch
ChangeSpeed
ChangeTempo
ClickRemoval
Compressor
Distortion
FindClipping
Loudness
Noise
NoiseReduction
Normalize
PaulStretch
Phaser
Repeat
ScienFilter
TimeScale
ToneGen (tone and chirp)
nyquist
vamp effects
",,"... The data transfers to and from effect dialogs, for built-in effects (or
Vamp, or Nyquist) which are not yet part of the stateless system, were not in
all cases made superfluous, as seen from some known issues including #3353,
#2762, #3234, and others

So just put them back into all of them.  For other effects this may fix bugs we
haven't found or else it is harmlessly redundant.

Resolves: #3533
Resolves: #2762 
Resolves: #2701

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think this could simplified, not that I care much though"
3601,2022-09-12T08:58:34Z,2022-09-12T09:29:48Z,crsib,0,0,1,4,1,1,1,[],,1,1877.0,0,0,0,0,63067425.63227,,0,1,0,False,[],,,"Resolves: #3596 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3586,2022-09-09T10:19:51Z,2022-09-09T22:48:26Z,ksoze95,0,2,1,27,1,2,1,"['bug', 'P2', 'PluginManager']",,1,252800.0,0,0,0,0,63070827.887006,,0,1,0,False,[],,,"Resolves: #3576

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Suggest moving this logic to lambda, and do not change function signature  Correct but maybe ineffecient -- I would have looked up in a hash map instead of doing a linear scan of a vector.
"
3600,2022-09-10T04:35:38Z,2022-09-12T08:30:15Z,witwald,0,0,1,2,1,1,1,[],,0,186877.0,0,0,0,0,63071005.992551,,0,1,0,False,[],,,"Resolves: lint warnings caused by an if() statement.

Change bitwise & to logical && operator in a logical comparison to silence lint warning.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3597,2022-09-09T16:38:47Z,2022-09-09T18:52:41Z,Paul-Licameli,0,1,1,15,1,1,1,[],,0,8034.0,0,0,0,0,63292862.239564,,1,1,0,False,[],,,"... This allows Xfer OTT to work, and also to power on and off

Resolves: #3581 
(At least for Xfer OTT on macOS)

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Hmm, looks like if's can be removed, not critical"
3592,2022-09-09T12:24:46Z,2022-09-09T16:32:07Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,14847.0,0,0,0,0,63301292.367828,,0,1,0,False,[],,,"Resolves: #3447

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3590,2022-09-09T12:03:20Z,2022-09-09T12:43:54Z,Paul-Licameli,1,0,1,1,1,2,2,[],250.0,1,2437.0,0,0,0,0,63314990.532916,,1,1,0,False,['Paul-Licameli'],"> I approve this PR, I do not approve the previous one. You can rebase this one on alpha-3.2.0 though

Re-review the other please, build should be fixed
I approve this PR, I do not approve the previous one. You can rebase this one on alpha-3.2.0 though","I approve this PR, I do not approve the previous one. You can rebase this one on alpha-3.2.0 though","Resolves: #3521

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3545,2022-09-05T17:25:39Z,2022-09-07T12:51:28Z,Paul-Licameli,1,0,1,10,1,1,1,[],156364.0,1,328031.0,0,0,0,0,63315659.820472,,1,1,0,False,['SteveDaulton'],"There's a subtle change in behaviour from previous versions.

Previously, clicking the Debug button in the Nyquist Prompt would open the debug window after running Nyquist code in the Nyquist Prompt, and clicking the Debug button in a ""Nyquist  Worker"" (a GUI plug-in launched from the Nyquist Prompt) would open the debug window after running the code in the Nyquist Worker effect.

With this patch, the Debug button in the Nyquist Worker effect has no effect. To see the Debug window from a Nyquist Worker effect it is now necessary to click the Debug button in the Nyquist Prompt.

This ""fix"" is certainly an improvement, though it seems less intuitive than the old behaviour, and it's undocumented. I'd expect the Debug button in the Nyquist Worker effect to control the debug window for the Nyquist Worker effect.

(Tested on Xubuntu 20.04, with https://github.com/audacity/audacity/pull/3560 also applied.)",,"... Commit b221829 was at fault.

Do not change the ids associated with the buttons.  Other parts of the code
rely on those special values.

Resolves: #3544 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3587,2022-09-09T10:43:21Z,2022-09-09T11:27:39Z,Paul-Licameli,0,1,1,6,1,1,1,[],,1,2661.0,0,0,0,0,63319570.158757,,0,1,0,False,[],"Good enough as a quick fix, but definitely not good enough in the long run.  ","Good enough as a quick fix, but definitely not good enough in the long run.  ","... This simple fix corrects the crash.  Whether the resulting output is correct is a matter of definition.

GVerb takes one channel in and always writes two channels out.  When rendering the right channel then, supply an extra throw-away buffer.

What happens in the result is that the left output, only, of each channel is retained.

What really should be done?  It might make sense to mix the two pairs of output channels down to one pair, losing none of the output.

That is outside the scope of this simple fix.

Resolves: #3565

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Probably it makes sense to have `maxChannels` as constexpr somewhere, and reuse it in both places? "
3578,2022-09-08T14:39:38Z,2022-09-08T17:57:10Z,vsverchinsky,0,0,1,14,1,1,1,[],,0,11855.0,0,0,0,0,63382601.36891,,0,1,0,False,[],,,"Resolves: #3464

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3359,2022-08-09T16:20:07Z,2022-09-07T15:08:20Z,ksoze95,0,4,1,168,5,3,1,[],,1,2501305.0,1,0,0,0,63479124.698313,,1,1,0,False,[],,,"Resolves: #3279 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Incorrect loop.  Increment the iterator or erase it, not both.  Or else you skip some elements.  May crash if you erase the last element. Maybe you need to erase plugins with type `PluginTypeStub` as well Probably I was wrong when I said that effect should be erased from the `mLoadedInterfaces`. It may cause problems with effects being used in the project since they are unique ptrs. Removing description of the loaded plugin isn't good thing as well because there are code pathes that request plugin information from the `PluginManager`. Placing `PluginDescription` of the loaded plugins into special container in `PluginManager::ClearEffectPlugins` so that later calls to `PluginManager::GetPlugin`... could work Done.  Moved iterator increment to the body of the for loop, and when not erasing."
3557,2022-09-06T19:51:40Z,2022-09-06T20:32:00Z,crsib,0,0,1,24,2,1,1,[],,1,61781.0,0,0,0,0,63486757.730655,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3558,2022-09-06T20:03:41Z,2022-09-06T20:34:05Z,crsib,0,0,1,2,1,1,1,[],,1,61048.0,0,0,0,0,63486771.981636,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3563,2022-09-07T12:10:44Z,2022-09-07T12:46:04Z,crsib,0,0,1,3,1,1,1,[],,0,2133.0,0,0,0,0,63487666.474712,,0,1,0,False,[],,,"Resolves: #3561

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3548,2022-09-06T11:11:42Z,2022-09-07T12:44:33Z,LWinterberg,1,0,1,10,10,1,1,[],10195.0,0,92002.0,0,0,0,0,63487741.713069,,0,1,0,False,['petersampsonaudacity'],"@LWinterberg  Leo:  Testing on W10 with your branch build:
audacity-win-3.2.0-alpha-20220906+8e5d7bf-x64

No debug buttons with that build for EGATs listed in #3526  - except for **Nyquist Prompt**  -  and I'm guessing that may be a special case?",,"Resolves: #3526
",
3559,2022-09-07T09:45:01Z,2022-09-07T12:12:49Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,8873.0,0,0,0,0,63489673.783552,,0,1,0,False,[],,,"Resolves: #3464

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3475,2022-08-30T11:27:02Z,2022-09-06T11:16:45Z,vsverchinsky,3,2,1,233,8,2,2,[],278181.0,1,620816.0,0,0,0,0,63562812.270001,,1,1,0,False,"['vsverchinsky', 'Paul-Licameli']","Linux build didn't succeed yet.  I pushed another one line to fix it.
 > If my suggested simplifications preserve the bug fixes, I would like you to squash them. If they do not, then omit them.
> 
> I approve the rest

Thanks, but I will delete the first commit, previous comment explains that Approved, but, Git falsely credits me as author of the commit!  I don't want to take undue credit.
If my suggested simplifications preserve the bug fixes, I would like you to squash them.  If they do not, then omit them.

I approve the rest
","If my suggested simplifications preserve the bug fixes, I would like you to squash them.  If they do not, then omit them.

I approve the rest
","Resolves: #3469
Resolves: #3431
Resolves: #3480 
Resolves: #3530

More fixes for VST3 statelessness

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","For all other effect families, ValidateUI() and UI event handlers use ModifySettings to start the inter-thread message to the running instance, but UpdateUI() is supposed to move data the other way -- take changes of instance state, and update the appearance of a dialog to reflect that; not to change instance state.

But here UpdateUI is doing something to the wrapper immediately in this thread, but ALSO starting the inter-thread communication that later causes ConsumeChanges().

Is all of that really needed to fix the bug?

Or, was ModifySettings done for inessential reasons, because now FetchSettings takes a non-const argument?

See the suggested extra commit I pushed and please tell me if it is a simplification that preserves the fixes, and squash it, or tell me it's definitely wrong and force-push the branch to remove it.



 The problem is that some plugins use `IComponent::performEdit` to deliver the changes to the host (that should be followed by `IAudioProcessor::process`, for that I need `ModifySettings`) and do not update internal processing state during `IAudioProcessor::setState`"
3549,2022-09-06T11:15:18Z,2022-09-06T13:45:19Z,vsverchinsky,0,0,2,19,3,1,1,[],,0,9013.0,0,0,0,0,63570521.53849,,1,2,0,False,[],,,"Resolves: #3479

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3539,2022-09-05T12:29:17Z,2022-09-06T13:37:57Z,vsverchinsky,0,2,1,30,4,2,1,[],,0,90534.0,0,0,0,0,63570964.256152,,0,1,0,False,[],,,"Resolves: #3483

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should the default return true, to preserve old behavior except in cases where you override it?
 Right, thanks!"
3550,2022-09-06T11:32:16Z,2022-09-06T13:04:11Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,5520.0,0,0,0,0,63573001.494439,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3529,2022-09-04T11:42:27Z,2022-09-05T15:28:34Z,Paul-Licameli,3,0,23,3868,64,2,2,[],100283.0,1,127914.0,0,0,0,0,63622799.12975,,0,23,0,False,"['crsib', 'Paul-Licameli']","Is the branch right though @Paul-Licameli ? > Is the branch right though @Paul-Licameli ?

Oops, I based on master, and merged this plus all other recent alpha stuff to master.  No harm from that, and I also merged these changes to alpha.
 @dozzzzer @Ryan-Miller-Audacity Pay special attention to the checkbox in Amplify and the curves in equalization.
code changes understood and tested",code changes understood and tested,"Resolves: #2781
Resolves: #3520

If a dialog for a stateful effect is cancelled, then when next opened, restore the settings' initial not final state as in last dialog.
Remove some redundant code for persistency of Equalization curves
Fix error specific to Amplification from commit 4dcc5ee

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3534,2022-09-05T09:41:04Z,2022-09-05T13:47:48Z,vsverchinsky,0,0,2,182,6,1,1,[],,0,14841.0,0,0,0,0,63656757.233825,,1,2,0,False,[],,,"Resolves: #3516

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3528,2022-09-04T11:23:52Z,2022-09-05T11:31:12Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,86844.0,0,0,0,0,63664988.762157,,0,1,0,False,[],,,"... See commit c3db93c where the bug began

Resolves: #3525

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3499,2022-08-31T13:01:25Z,2022-09-05T08:29:25Z,crsib,0,0,1,26,1,1,1,[],,1,415682.0,0,0,0,0,63675900.043696,,0,1,0,False,[],,,"In case requested label length was longer than the provided audio range,
Audacity attempted to generate an infinite amount of labels.

Resolves: #3207

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3432,2022-08-25T19:32:37Z,2022-09-05T08:20:07Z,crsib,11,30,14,3679,53,2,0,[],509026.0,0,910053.0,0,0,0,0,63676459.83958,,1,14,0,False,"['crsib', 'Paul-Licameli']","My review of `lib-cloud-audiocom` and earlier commits is done.
 Done
 Another omission you might fix:  make a `AttachedToolBarMenuItem` in ShareAudioToolbar.cpp analogous with other toolbars, so that there is a new View > Toolbars menu item.
 There will be additional changes added > There will be additional changes added

OK, I'll merge my two little PRs rather than yield to you now
 The hidden dependency is broken, so mod-pcm etc. might still be extracted -- good.

The configuration of preferred types is stored in lib-cloud-audiocom and not in the UI layer.  OK.

Otherwise I'm not sure I understand the other objections to my draft solution, or why there is an essential difference.

Why would it be so wrong in principle to combine the two abstract interfaces if in future the ExportPlugin interface could be demoted into a library too?  The concrete implementations of ExportPlugin and associated CloudExporterPlugin end up side-by-side anyway.

And it's not even necessary, for cycle breaking, to demote the new CloudExporterPlugin interface into a library.  lib-cloud-audiocom depends on lib-cloud-upload -- but really only for MimeTypesList which is just a few type aliases.

I don't know quite what you mean about the existing exporter framework being so difficult to rewrite. It is true that it has its own ""statefulness"" problem much like effects.  Each particular exporter has a set of global variables for preferred settings.  Is there some great need for a menu of ""Presets"" for each exporter?  Would we store those in std::anys? ...

Finally my foolish question, why can't any file format you like be uploaded to cloud, then downloaded again to another Audacity executable that can interpret the same format?  Why can't we have open-endedness here?  I don't understand the technical limitation that the server would impose againt it.
 > Why would it be so wrong in principle to combine the two abstract interfaces

Well, this is wrong ... in principle. For example, it breaks ISP, which is I in SOLID. I do not like the implementation I proposed either, but provided the current framework it will have to stay for now. Hopefully, it would be removed one day.

 ExportPlugin should know nothing about the possibility of audio uploads. Uploading is an optional feature. Uploading depends on exporting, not vice versa. I can easily see how we need to extend those interfaces based on user testing, I do not want to change ExportPlugin interface to do that. You are correct, that implementations reside close to the plugins now, but that is not because I like it there. There is simply no other feasible options right now.

> std::anys

To be fair I had never seen usage of `any` that solved problems instead of introducing ones. Scripting language binding, commonly referred as a `good example`, are not using `any`. Scripting languages have a very well defined set of types and bindings must know how to map the specific host language type into a scripting language type. `any` has virtually no use there. Python has a stronger type system than C, so to speak.

Speaking of exporter configuration I am afraid that FFmpeg approach is the ""nessecary evil"". That is - we have a string identifier mapping a well defined variant, with values checked by a plugin for validity. Plugin, on the other hand, provides a list of supported options with the constraints on them, so the UI can be built.

Using `any` as a configuration will not allow interface clients to supply configuration to the plugin unless we link against a specific plugin. However, I like the presets idea very much.

> why can't any file format you like be uploaded to cloud

audio.com is an audio sharing service. That is - it needs to know how to play and how to transcode the uploaded audio . I'm not sure I understood all of the previous.  std::any is surely a dangerous escape into typelessness, unlike std::variant, and not to be overused, but it does allow open-endedness as variant does not.  I think it is the right tool for the job in the system of effects.

There are ""producers"" of anys (Effects doing MakeSettings) and ""consumers"" that can interpret them (instances) but in between a custodian that ""warehouses"" them (RealtimeEffectState).  The middleman needs to belong to a lower level of the dependency graph, and not need to know a closed-ended variant of possibilities, which would violate ""D"".  The middleman's job is to guarantee only that it gives the right anys back to the right parties that ask to use them and know how to interpret them.
 > but it does allow open-endedness

I do not agree, but I though we agreed to disagree here :-)

> I think it is the right tool for the job in the system of effects.

There are significant limitations that will make implementing certain features expensive or not possible. On top of that, it makes debugging hard. So we are not on the same page here as well. (Think of any feature that needs a list of parameters!)

 > which would violate ""D""

I'm not sure how D will be violated, but L is violated right now. D, as in dependency inversion, is very strict on L. Otherwise it is impossible to make the system safe.

> The middleman needs

I am not convinced yet that this middleman itself is needed and there is definitely no need for it in exporters :-) Using similar approach for exporters will not solve the issue we are discussing right now.



 I don’t understand what alternative you would suggest for the system of effects.

EffectSettings may have been stretched for too many purposes that should be separated — yes.  The inter-thread communication could be simpler.  I have ideas for that I would like to do next release.

Still see the need for Real-time Effect State to store some polymorphic data for the related stateless Effect object to interpret and serialize and deserialize. >  stateless Effect object to interpret and serialize and deserialize

This just means, that stateless Effect is not serializable, the statefull EffectInstance is. 

> I don’t understand what alternative you would suggest for the system of effects.

Quite a complex topic to discuss on a train using a phone. Can we discuss it sometimes later please?
",,"Resolves: #3394 

Implements a quick audio sharing feature [as previously announced](https://forum.audacityteam.org/viewtopic.php?f=68&t=126279).

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Don’t need second ‘#’ I prefer PRIVATE only before wxBase, otherwise allowing transitive dependencies Sent Synchronously Completedhandler Yeah, I keep copying it :-( A singleton object instead of a namespace for all these functions, but it is stateless, for now at least.  Will that need to change?  Will there ever be more than one ServiceConfig?

 Or to be cuter
```
using std::chrono;
return 3s;
``` I like seeing `string_view` and wish we could have C++20 soon, so we can also use `std::span` to pass ranges of constant data, instead of `const std::vector<T>&`, without some irrelevant allocator type as a template parameter. I have build lib-cloud-audiocom and I want to understand all that is in it, and I begin here at the bottom of the dependency graph of files.
 Incorrect comment
 Perhaps overload 3 might express it more clearly: https://en.cppreference.com/w/cpp/algorithm/mismatch
 That comment above makes me nervous.  `Observer.h` says `intended for single-threaded use only`.  Should you use `CallAfter` wherever you publish, and change the comment to say, ""Messages are received in the main thread in idle time"" ?
 No, I'd rather stop using Observer.  Or, should there be mutual exclusion around all `Publish` calls?  What might stil happen is that a Subscription is destroyed concurrently with a publication.  That might not have bad consequences, but I would have to reexamine Observer.h to be sure of that.
 What is this lock guard guarding?  Is it the static `refreshToken` ?

I also need to be convinced that you don't need a `std::recursive_mutex`.
 I thought so... it is possible, though unlikely, that the two-argument overload of `AuthorizeRefreshToken` holds the mutex, and calls the other overload, which calls this function, which sets the lambda as the callback -- and this lambda may be called at once before `setRequestFinishedCallback` exists, making a self-deadlock.  But `recursive_mutex` would eliminate the possibility.
 Shadowing of the static `refreshToken`
 If it is stipulated in the header file as a precondition that all functions that may use this global are to be called in the main thread only then there is no need for mutexes to guard it and you can avoid the recursive mutex.  I think that is true from inspection of the entire PR, but not obvious.  The functions would be `ValidateAuth`, `HasRefreshToken`, `UnlinkAccount`  This is equivalent to simply `!GetAccessToken().empty()`
 Do you want to defend against a string the defines one of the arguments more than once?
 `UnexpectedResponse`
 I think this is more like a future than a promise?
 If this is generally like `std::async`, then call the return object a future
 incorrect comment
 Four types recognized here, but only three in the enumeration in ServiceConfig.h?
I notice now, that enum is only for the return of `AudioFormat GetPreferredAudioFormat` and it's always the same.  Did you forget to define an `EnumSetting` to save it as a preference?
 `move` doesn't help with `wxString`, but no harm.
 Above four members can be `const`
 What should happen in case this ""promise"" (or future) is destroyed before completion, without any calls to `Abort` or `DiscardResult` ?  It could be that `UploadOperation` still occupies some resources unnecessarily because `mAborted` isn't true.

Should `UploadPromise` call `Abort()` in its detructor if not completed?  What are you crazy?  That would be a pure virtual function call!  The base class can't do that...
 ... so instead, the destructor of the concrete class could guarantee that one of completion, abort, or discard has happened, and then the lambdas should capture weak, not strong, references to self.

I think this would make better RAII guarantees on the main thread.  The ""leak"" in case there is no explicit abort on the main thread isn't until program exit, but it could mean the other thread works longer than needed before stopping.



"
2910,2022-05-10T13:10:47Z,2022-09-02T14:25:27Z,DavidBailes,2,0,1,7,1,1,1,[],11780.0,0,9940480.0,0,0,0,0,63913744.981172,,0,1,0,False,"['DavidBailes', 'petersampsonaudacity']","Tested @DavidBailes  branch audacity-win-3.2.0-alpha-20220510+97a6dc2-x64-msvc2022 on W10

This looks to be fixed David's changes, with initial focus on the folder location for export. @Paul-Licameli . This has been tested, so could this please be reviewed and merged?",,"Resolves: https://github.com/audacity/audacity/issues/2909

Problem:
When the Export Multiple dialog opens on Windows, the first control is not the focus.

This bug was introduced between Audacity 2.4.1 and 2.4.2. During this period there were no significant changes to the code of this dialog. However the version of wxWidgets changed from 3.1.1 to 3.1.3, so this is probably a wxWidgets bug.

Fix:
Explicitly setting the first control to be the focus, as a work around for the assumed wxWidgets bug.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3498,2022-08-31T12:58:26Z,2022-09-02T13:20:15Z,ksoze95,3,0,1,122,2,1,1,[],174698.0,0,176848.0,0,0,0,0,63914920.315024,,1,1,0,False,"['LWinterberg', 'petersampsonaudacity', 'ksoze95']","note this was merged into master, not the release branch > note this was merged into master, not the release branch

@LWinterberg @ksoze95 @crsib 

So is it gonna make its way into 3.2.0 alpha ? > note this was merged into master, not the release branch

It has now been pushed to the alpha-3.2.0 branch as well.",,"Resolves: #3496 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3513,2022-09-02T01:35:12Z,2022-09-02T10:31:23Z,Paul-Licameli,0,0,1,29,2,1,1,[],,2,35999.0,0,0,0,0,63923965.531511,,0,1,0,False,[],,,"... There was also a bug, that a click on Cancel during destructive effect
application didn't really cancel.  (Try generating 10h of noise, then
amplifying).

Also make sure remaining time shows a reasonable value.

This fix is quick and a bit inelegant -- it still does unnecessary fetches of
the source trak samples but ignores them.

Resolves: #3418 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3515,2022-09-02T03:59:05Z,2022-09-02T10:29:34Z,Paul-Licameli,0,0,1,3,1,1,1,[],,2,27352.0,0,0,0,0,63923981.607184,,1,1,0,False,[],,,"Resolves: #3508

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3478,2022-08-30T11:35:52Z,2022-08-31T15:44:42Z,Paul-Licameli,0,0,6,206,6,1,1,[],,2,114815.0,0,0,0,0,64068313.700752,,1,6,0,False,[],,,"Resolves: #3439

Fix playback, rendering, and destructive application of (for example) Blue Cat Chorus, Mono AudioUnit version, on stereo tracks


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3497,2022-08-31T12:56:50Z,2022-08-31T17:27:00Z,LWinterberg,0,2,3,5,2,2,0,[],,0,16234.0,0,0,0,0,64075639.010157,,0,3,0,False,[],,,This updates the what's new link and also the link in the realtime effect sidepanel. (the video thumbnail comes another time),"Hmm, probably we should have a different link (probably linking to the same page for now).

This will allow us to add RT specific tutorial, if we choose to do so. that's a good idea"
3398,2022-08-19T12:06:46Z,2022-08-31T15:23:44Z,SteveDaulton,0,0,2,4,1,0,0,[],,0,1052206.0,0,0,0,0,64079473.057796,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3383

*(short description of the changes and the motivation to make the changes)*
Allow more space in Device Prefs text boxes.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3490,2022-08-31T09:31:23Z,2022-08-31T15:14:20Z,crsib,0,0,1,20,2,1,1,[],,0,20580.0,0,0,0,0,64083624.05435,,0,1,0,False,[],,,"Resolves: #3445

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3436,2022-08-26T07:18:08Z,2022-08-29T12:55:28Z,vsverchinsky,3,5,1,225,4,3,1,[],3278.0,0,365599.0,0,0,0,0,64178602.411657,,1,1,0,False,['crsib'],"1. Generate chirp
2. Add Berzerk Distortion Mono
3. Open UI using cogwheel
4. Press play
5. Observe nullopt dereference

After opening UI I observe that settings have 40 changes, but `vst3settings->processorState == nullopt`

Without opening UI I observe no problems  @Paul-Licameli can you please have a look at this? I have checked and see not issues, but you are the expert in this area, so I'd like to know your opinion as well. Please merge, if you are ok with this PR",,"Resolves: #3427
Resolves: #3437 

VST3Wrapper now stores latest parameter values as a part of it's state that, presumably, would help avoid issues with consistency since `IComponent::setState` are applied immediately while parameter changes aren't applied until consumed on the worker side. Though for this reason it is possible that there could be audiable transition when preset is applied (see `VST3UIValidator::UpdateUI`) not caused by absense of interpolation.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this flush needed to fix the bug?

It used to be that there was no Flush, and every Get did what Flush does.  I thought this caused too slow updating of meters, at least for AudioUnits, because of frequent UpdateUI calls. so I made Flush a different thing called less often.

 Flush is called frequently in LV2 now without observable performance hit. Looking into debugger I can say it is called more frequently than UpdateUI does.  In VST3 UpdateUI called only on preset change. It shouldn't hit the performance but may freeze UI Maybe  not needed with idle time flushes now Disagree. This flush happens at a very specific time. Removing it may result in rare random bugs"
3481,2022-08-30T12:19:38Z,2022-08-30T12:30:40Z,witwald,0,0,1,2,1,1,1,[],,0,929.0,0,0,0,0,64179584.513908,,0,1,0,False,[],,,"Fixed spelling of the word Audacity towards the end of the file.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3406,2022-08-22T10:11:24Z,2022-08-30T08:52:11Z,NorwayFun,0,0,1,1506,1,1,1,[],,0,686447.0,0,0,0,0,64192962.746706,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3473,2022-08-29T14:16:35Z,2022-08-29T14:18:00Z,Paul-Licameli,1,0,1,3,1,1,1,[],96.0,0,97.0,0,0,0,0,64259803.978231,,1,1,0,False,['Paul-Licameli'],"That was quick
",,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3458,2022-08-28T19:00:41Z,2022-08-29T14:06:18Z,Paul-Licameli,2,0,6,323,9,1,1,[],60972.0,0,68740.0,0,0,0,0,64260517.385847,,3,6,0,False,['crsib'],"I observe a crash when applying VST3 to stereo tracks, so I withdraw approval status After discussion this PR is reapproved ",,"Resolves: #3456

Mixing-and-rendering or export of (for instance) BC Chorus mono (VST3 version) on a stereo track.

Just as EffectInstance::RealtimeAddProcessor sometimes must have multiple 
instance states to handle a stereo track, so too with EffectStage for rendering.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3461,2022-08-29T08:06:09Z,2022-08-29T08:12:51Z,witwald,0,0,1,2,1,1,1,[],,0,5919.0,0,0,0,0,64276212.457018,,0,1,0,False,[],,,"Fixed a minor typographical error.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3460,2022-08-29T08:04:48Z,2022-08-29T08:06:18Z,crsib,0,0,1,2,1,1,1,[],,0,93.0,0,0,0,0,64282121.694783,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3393,2022-08-18T10:26:30Z,2022-08-28T20:57:22Z,Paul-Licameli,3,0,1,89,2,1,1,[],718339.0,1,901855.0,0,0,0,0,64322259.873667,,0,1,0,False,"['crsib', 'Paul-Licameli']","It still doesn't build. I hope I will have enough time to try updating LV2 SDK past alpha 1 Let's try that once more...
 And once more, and rebased onto recent master
",,"Fix issue 3222 for macOS ...
    
 ... delay the destruction of an obj-C object

Resolves: #3222

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3457,2022-08-28T13:21:59Z,2022-08-28T18:39:44Z,Paul-Licameli,0,0,3,81,9,1,1,[],,0,19069.0,0,0,0,0,64330519.118663,,1,3,0,False,[],,,"Resolves: #3434 
Resolves: #3443

Fix playing of a mono VST3 effect like Blue Cat Chorus on a stereo track.  But it does not fix rendering of the track.

The fix is partly in the framework, fixing a bug in the allocation of effect instances to channels, and partly specific to VST3,
which now can have an array of extra processors in its Instance, analogous to AudioUnits instances.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3455,2022-08-28T12:45:36Z,2022-08-28T18:32:11Z,Paul-Licameli,0,0,1,3,1,1,1,[],,0,20798.0,0,0,0,0,64330975.424163,,0,1,0,False,[],,,"Resolves: #3454

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3449,2022-08-26T23:10:49Z,2022-08-27T10:34:52Z,Paul-Licameli,1,3,1,9,2,2,1,[],7952.0,0,41139.0,0,0,0,0,64445924.039743,,1,1,0,False,['Paul-Licameli'],"Alternative fix; and more steps to reproduce in the issue.
I like this solution most",I like this solution most,"... Not just AU.

Resolves: #3448

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should we distinguish between realtime and destructive processing here? Probably we should. I think not.  If you step through it, you will see that for destructive application, an EffectSettingsAccessTee flushes to a SimpleEffectSettings access -- which is no-op -- and to the side, an EffectSettingsAccess connected to a temporary RealtimEffectState which we don't need anyway.
 However, I may want to redraft this anyway.  It may be that one `Flush()` in an idle time handler of the `EffectUIHost` is all we need.
"
3446,2022-08-26T16:39:05Z,2022-08-26T19:13:53Z,crsib,5,0,2,43,6,1,1,[],1503.0,0,9290.0,0,0,0,0,64501279.355332,,1,2,0,False,"['crsib', 'Paul-Licameli']","I approve these simple changes, but are they sufficient?  What happens if you
- Remove pluginregistry.cfg
- Start Audacity 3.1.3
- Exit
- Open Audacity 3.2. alpha

Does it still correctly exclude non-processing plug-ins from the sidebar?  If not, then users upgrading to 3.2 won't have the intended behavior.

 Hmm, probably you are right and it should be `Since_3_2`. This will cause problems when downgrading, but we already have them. Can you give examples of plug-ins that are not processors?
 Here's one: https://www.maat.digital/gon/ in VST and AU versions, but VST is off the table for 3.2 alpha, and our AU code actually doesn't correctly report whether effects are processors!  (More about that another time)
 Plenty of generators, at least. 

https://soundsmag.com/top-generator-vst-plugins/

I have several LADSPA generators as well from the SWH",,"Resolves: #3416 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3442,2022-08-26T13:48:20Z,2022-08-26T16:55:33Z,Paul-Licameli,0,0,1,3,1,1,1,[],,1,11236.0,0,0,0,0,64509580.305023,,1,1,0,False,[],,,"Resolves: #3413

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3444,2022-08-26T14:26:17Z,2022-08-26T14:33:04Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,465.0,0,0,0,0,64518076.355018,,0,1,0,False,[],,,"Resolves: #3443

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3229,2022-07-13T22:13:53Z,2022-08-26T12:50:00Z,vsverchinsky,3,30,12,1281,86,3,1,[],1860910.0,0,3767771.0,0,0,0,0,64524317.330578,,0,12,0,False,['Paul-Licameli'],"Will you soon fix build failures? I'm done!
 I see you have force-pushed some changes, but this is not yet rebased onto recent master, and I understand there will be conflicts to resolve.
",,"Resolves: #3078 
Resolves: #3209

Effects stack UI can now handle navigation keys and available for screen readers (though reordering messages and toggle button state changes aren't delivered)
Changes in keyboard navigation: 'E' key opens effects panel for a currently focused track; effects panel also added to panel navigation loop sequence (Ctrl+F6, Ctrl+Shift+F6)
Fixes toggling AButton withih enter key

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Could this method be made const? Seems so, thanks! I'll fix that I think both ImageRoll files could be removed as there are no longer any references to them. Could this be changed to a 'const auto&'? Missing <wx/app.h> include for reference to wxTheApp I disagree.  Understand whether there are good ideas there worth revisiting before you say that.

And I have never myself studied these files closely enough to answer that.

 Possibly change to 'const auto'.  Just being pedantic. ImageRoll.h is used by AButton.  ExpandingToolBar.* are the unused files.  I suggest don't remove them, but maybe don't modify them except minimally to keep them compiling?
 This line can be removed as index is not referenced. I think begin/end could be replaced with cbegin/cend. How about adding a pre-condition assert check before this line, an assert(seq.size() != 0)?  If seq.size() is 0 and forward is false then increment will become a very large number as size_t is an unsigned number. Does this function need to verify that index is valid before calling theTheme.Bitmap? Can't be made const, it changes value later Right, thanks! It can't be zero-sized, though it may contain nullptrs There is a check inside theTheme.Bitmap, but I think it's not really neccessary since all bitmap indices have names in the code Ah, I missed that. This change makes a difference for windows that override `GetMainWindowOfCompositeControl`.  What are such windows?
 Combos and list controls I see, but no such are used in the sidebar.
 This deletion requires you insert the `#include` in `ExpandingToolBar.cpp` so that the commit ""AButton refactoring"" builds Comment, please
 Off by one mistake -- the third argument is not `dx2 - dx1` And dx2 - dx1 may be zero or negative, in which case, skip it The commit ""RealtimeEffectPanel wx*Button replaced with AButton"" doesn't build.  The next commit repairs that.  Make both build.

 You don't add any overrides in later commits.

But this change is harmless.
 See: https://bugzilla.audacityteam.org/show_bug.cgi?id=1564

I think this change may break that old bug fix, on Windows though not on Mac.  The first window in `seq` is not a `ToolDock` but the parent of one.  Drag all toolbars off the top dock so they float, and test it.

 See also #3419
 The changes in commit ""ImageRollPanel usage replaced with wxPanelWrapper"" are not necessary for this issue.  Not harmful either, as they remove and change two unused classes.  Why did you think you needed this?
 It seems that almost everywhere else the program handles `WXK_ESCAPE`, it's the key-down, not CHAR event.  Does this matter?  I don't know.  If it works, ok
 The power buttons are just `AButton` and not themable.  Does this matter?  Are the images really the same in all themes?
"
3426,2022-08-25T10:21:09Z,2022-08-26T11:12:56Z,Paul-Licameli,4,0,4,304,22,1,1,[],40877.0,1,89510.0,0,0,0,0,64530144.640979,,2,4,0,False,"['crsib', 'Paul-Licameli']","While looking into this PR I found a P1 in VST3 in master as it seems :-(
![image](https://user-images.githubusercontent.com/2660628/186773606-106923dc-f5bd-4f87-80ec-e32dcbd4de88.png)
 > While looking into this PR I found a P1 in VST3 in master as it seems :-(
> ![image](https://user-images.githubusercontent.com/2660628/186773606-106923dc-f5bd-4f87-80ec-e32dcbd4de88.png)

You may have discovered and example of a bug I suspected might happen, and I asked @Ryan-Miller-Audacity to find an example with free plug-ins.  And I think, @vsverchinsky , this example is why the implementation of VST3 statelesness can't just skip the problem of ""slave"" processors.
 @crsib besides this incidental discovery of a bug in VST3, do I have an approval of these preliminaries for the latency problem?
 Not yet, sorry. I stuck on the first commit around 1 am, found a bug and decided that it was quite enough for one day xD",,"First steps toward latency correction in realtime effects, change no behavior yet

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3435,2022-08-25T22:38:16Z,2022-08-25T23:03:12Z,Paul-Licameli,0,0,1,3,1,1,1,[],,1,1502.0,0,0,0,0,64573927.938858,,0,1,0,False,[],,,"... Default the argument of PopEventHandler so we don't double-delete the
validator.

That's not enough: also null the pointer to the NativeWindow, so we don't
double-delete it either, when next we call DestroyChildren from
EffectUIHost::~EffectUIHost().

Resolves: #3433

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3317,2022-07-29T15:26:44Z,2022-08-25T21:18:13Z,ksoze95,0,30,6,843,7,4,1,[],,1,2353965.0,2,0,0,0,64580159.907113,,2,6,0,False,[],"* Opening fancy UI from the RT panel crashes Audacity
* Using Beat Finder crashes
* Preview button is in a wrong place
* Some other feedback in comments

Also I want a design review to be completed first. ""Non fancy"" UI looks quite odd, especially with built-in generators. Probably we need a horizontal line to visually separate the buttons from effect settings. There is still some feedback to addressed left. We can waive that enable button bug for now, I don't want it to block this PR.

(But we need to log that bug) I think I can approve it now, with a couple minorish problems. Please rebase the branch on master first","* Opening fancy UI from the RT panel crashes Audacity
* Using Beat Finder crashes
* Preview button is in a wrong place
* Some other feedback in comments

Also I want a design review to be completed first. ""Non fancy"" UI looks quite odd, especially with built-in generators. Probably we need a horizontal line to visually separate the buttons from effect settings. There is still some feedback to addressed left. We can waive that enable button bug for now, I don't want it to block this PR.

(But we need to log that bug) I think I can approve it now, with a couple minorish problems. Please rebase the branch on master first","Resolves: #3090 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I would like to see `XXO(""&Generate"")`. This way this string will be reused. Probably a wrong condition?  Ditto Wrong condition? After the #3391 mwState should not be used.  I have checked all the design sources - button is always called ""Preview"". Also, it should be ""grouped"" with the ""Apply"", right now it leans to the left (i. e. it is near the ""Presets"" button) You can do `using Observer::Publisher<RealtimeEffectStateChange>::Publish`, but I don't yet understand why this function is public I think this should become a `RealtimeEffectState::SetActive`. That specific method should also Publish the message Agree on calling it ""preview"" (changing to ""stop preview"" after it's been pressed). Regarding the grouping, it apparently was difficult and martin didn't mind it ungrouped iirc.  Well, I know how to do such grouping :-) Done. Changed. to XXO(""&Generate""). Done. Done. Changed to use mpTempProjectState instead, plus tacked on a few other condition checks as well. Unnecessary check, could be `focus == play` `GetAccess` does not return empty pointer Do we really need `char` here? You can use `Publish` without this line. It was only required when you needed `Publish` to be public. I would like @Paul-Licameli to review this specific method. Generally it keeps the behavior from the RealtimeEffectPanel, but probably Paul can suggest something different SetActive will publish `RealtimeEffectStateChange` when needed, so the following lines are redundant (and `ProjectHistory::Get(*mProject).ModifyState(false);` probably has visible side effects) I would say that this should `XO` now, not that it matters :-) Just whining  I think checking `mpTempProjectState` is enough. I would like to see this check to be wrapped into `IsOpenedFromEffectPanel` method (naming is hard, yes). Otherwise it quite hard to understand when you see this code for the first time When we move away from `AddStandardButtons` - `mApplyBtn` should be assigned there. You can use `mApplyBtn` here I say this line should go. `OnEnable` is now called only when the UI is opened from the FX panel, so there is no point to change the ""global"" state. This toggle should only affect a single effect.

 Let's replace it with that method I have proposed earlier. Please not, that `mSupportsRealtime` is always true for effects in the stack. Give the early return couple lines above - I think this `if` can be ommited  Why not `if (mSupportsRealtime)` as it was before? Please update the comment. Its something translators see. Ditto"
3428,2022-08-25T15:02:03Z,2022-08-25T17:49:44Z,Paul-Licameli,0,0,1,32,1,1,1,[],,1,10065.0,0,0,0,0,64592742.996334,,2,1,0,False,[],,,"Contributes to effect dialog beautifications

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3424,2022-08-24T14:07:44Z,2022-08-25T09:38:46Z,Paul-Licameli,0,0,2,44,7,1,1,[],,1,70265.0,0,0,0,0,64622204.266824,,0,2,0,False,[],"This worked for the problem I had, and code changes are understood.","This worked for the problem I had, and code changes are understood.","Contributes to LV2 statelessness

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3425,2022-08-25T07:49:04Z,2022-08-25T08:42:07Z,vsverchinsky,0,1,5,26,5,1,1,[],,0,3189.0,0,0,0,0,64625602.700859,,0,5,0,False,[],,,"Resolves: #3386

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",You're my hero!
1747,2021-09-26T01:15:59Z,2021-10-06T07:35:14Z,witwald,7,0,1,2,1,2,1,[],379379.0,1,28778770.0,0,0,0,0,64644809.10616,,1,1,0,False,"['witwald', 'SteveDaulton', 'LWinterberg', 'Paul-Licameli']","Are there any suggestions that anyone can offer as to how to progress this pull request? Thanks for your input. > Are there any suggestions that anyone can offer as to how to progress this pull request? Thanks for your input.

How about just merging it?
It looks totally safe to me, and it does what it says. The ""cursor"" (vertical line at the closest peak to the mouse pointer) is almost invisible on my (Linux) machine with the current grey ""cursor"", and clearly visible when red. 

I don't like to rely on colour, as doing so can cause problems for colour blind users, but in this case the change from grey to red is no worse for colour blind users, and much more visible for the majority of users. I'm not sure how to action a merge at this stage. My screen says ""Merging is blocked"".
![image](https://user-images.githubusercontent.com/13775871/135748195-5cb734f9-0600-4bb3-8ee8-4773b243a6c0.png) > I'm not sure how to action a merge at this stage. My screen says ""Merging is blocked"".

You or I can't merge it, which is why I requested a review from two developers that can.
I'm guessing that the comment by AnitaBats means that  it is earmarked for ""Sprint 7 - Release 3.1"" (whatever that means). Hello @witwald! I'm unfortunately not qualified to judge whether or not code is any good, but your contributions have been noted and their review (and probably: addition) is scheduled for next sprint, which should start either next week or the week after. I'm sorry this is taking so long, but I think you still should make it into the 3.1 release. Hello Witwald, and welcome back to the conversation.  We have talked before: https://github.com/audacity/audacity/pull/294 The color doesn’t use the theming system — but neither did the old code, so the new is not worse on that score.

I’ll merge this.

I also mean to catch up in the other recent conversations you have opened.

I hope you have also noticed the recent development of a spectral editing brush tool and might be interested in testing it.
Nice )",Nice ),"Resolves: Cursor in Plot Spectrum difficult to see

The colour of the cursor in Plot Spectrum has been modified to make it more visible. It is now red in colour, making it much easier to see, especially when the cursor is close to or on top of vertical grid lines.

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3404,2022-08-21T21:48:00Z,2022-08-24T13:49:58Z,Paul-Licameli,0,0,1,5,4,2,2,[],,1,230526.0,0,0,0,0,64841955.067071,,0,1,0,False,[],,,"... This fixes reported issue 3399 which is a regression on 3.1.3; similar
bugs, not yet reported, existed in other settings.  The bug was introduced at
712e72a

Affected settings:

- Latency correction and duration in Device
- ""Blend system and Audacity theme"" in Interface
- MIDI synth latency in MIDI
- Default audio track name in Tracks

Resolves: #3399 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3422,2022-08-24T09:45:38Z,2022-08-24T13:26:08Z,crsib,1,4,3,178,16,2,1,[],11013.0,0,13233.0,0,0,0,0,64843391.707093,,0,3,1,False,['Paul-Licameli'],"The rebasing looks good to me
Take my comments as non-blocking suggestions only.
","Take my comments as non-blocking suggestions only.
","
- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The first commit can now simply eliminate this class and use `::ProgressDialog` directly.
 Rather than this `dynamic_cast`, the abstract class `BasicUI::ProgressDialog` can have two more virtual functions.  `SetTitle` has an obvious purpose.  `Reinit` should be commented as resetting progress to zero and resetting any cancelled or stopped state.
 Yeah, makes sense. Surprisingly, MSVC was building as it was, so I've changed this line very late and haven't though that MyProgressDialog is no longer needed at all `SetTitle` comes from wxWidgets. I can call it SetDialogTitle though"
3409,2022-08-22T13:32:36Z,2022-08-23T13:57:22Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,87890.0,0,0,0,0,64927917.548915,,0,1,0,False,[],,,"... Also fixes PEAK-LEVEL and PEAK properties of *SELECTION* in Nyquist

Resolves: #3372

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3278,2022-07-22T15:10:17Z,2022-08-23T14:24:36Z,pietro68,20,30,7,851,2,2,0,[],330587.0,1,2762059.0,0,0,0,0,64926287.792713,,0,7,0,False,"['pietro68', 'Paul-Licameli']","In my fetch of your latest force-push, there is still failure to build on macOS at the second commit.
 Please note: ""effect inherits PerTrackEffect not StatefulPerTrackEffect"" is specified originally as part of step 4; but once I changed that inheritance, the code would not build until I implemented the most parts of step 5. - this is why it is part of step 5. ""removed unnecessary calls to ResetModuleAndHandle"" might be squashed earlier
 > Please note: ""effect inherits PerTrackEffect not StatefulPerTrackEffect"" is specified originally as part of step 4; but once I changed that inheritance, the code would not build until I implemented the most parts of step 5. - this is why it is part of step 5.

The problem, as I explained before, was that I omitted before part of what needed to be done in step 4.  That is, move `ProcessFinalize` also into the Instance.

Your step 5.1 simply deletes that function from the Effect but does not restore the equivalent into the Instance.  That may be losing an important side effect.

So I can't accept this pull request yet.
 I redid step 4. from scratch - hopefully it is not too complicated, I could not split it into subparts. I wrote earlier ""Also in step 4, the PowerOn() in BuildFancy() should be changed to call it on the Instance, not on this.
Pass the Instance into BuildFancy() from PopulateUI().""

The latest push doesn't do this any more.  Please restore that change.
 > I wrote earlier ""Also in step 4, the PowerOn() in BuildFancy() should be changed to call it on the Instance, not on this. Pass the Instance into BuildFancy() from PopulateUI().""
> 
> The latest push doesn't do this any more. Please restore that change.

ok, restored All of what we discussed yesterday is now in the last push I did, commit 4.
 The latest push looks good, but it awaits completion with step 5.  A few comments:

- `VSTEffectValidator::mIntance` might be private.
- I was surprised to see `AudioMaster` moved into `VSTInstanceBase`.  I thought at first, that's wrong, it should remain in the Wrapper, and the Validator may need to use it too.  But your comments suggest, we will split the `AudioMaster` function into multiple functions, and pass different functions to `pluginMain`.  I now think that's a good alternative solution too.
- `ProcessBlockB ` doesn't need to be separated from `ProcessBlock ` as a member function of `VSTInstanceBase`, now that slaves are also Instances.  (But not so, yet, for the initialize and finalize functions.)
- Where is `VSTEffectInstance::mNumChannels` used?  I can't find it.  You might just delete that, and the functions that get and set it.
- `callSetChunk` (which has two overloads) is no longer called anywhere!  (And the four-argument overload in fact became unused already at commit 2df527f6d72c92c5cf5c8cc679ac6122a03c4649). So, just delete those, and rename the `callSetChunkB` functions as `callSetChunk`.
- I think `VSTInstanceBase::Automate` is wrong... I think the `VSTInstance` needs to override it, and call `callSetParameter` (not B), and so, the Instance needs, transitionally, a reference to the array of slaves.
- Why is `mTimeInfo` still in the Effect class?  Only the Instance and the slaves, also Instances, need it.  Once you address the point about `ProcessBlockB`, this will become clearer.  Remove it from the Effect.

Please do an interactive rebase addressing all of these, force push it, and then proceed to step 5.
 > * Why is `mTimeInfo` still in the Effect class?  Only the Instance and the slaves, also Instances, need it.  Once you address the point about `ProcessBlockB`, this will become clearer.  Remove it from the Effect.

`mTimeInfo` is actually in the InstanceBase class, not the Effect class; it is referenced by:
- `GetTimeInfo()`  called from the vst callback
- `GetSampleRate()` called from the vst callback
- `VSTEffect::VSTEffect` 

As long as the vst callback is called for the effect too, I can not move `mTimeInfo` in the Instance only. I actually wonder if I can move it there even after I split the vst callback in two parts (one for the effect, one for the instance) because maybe the callback for the effect will still need to call `GetTimeInfo` and/or `GetSampleRate`? this because the vst GUI might want to draw something that depends on the samplerate (think of a band equalizer for instance) > > * Why is `mTimeInfo` still in the Effect class?  Only the Instance and the slaves, also Instances, need it.  Once you address the point about `ProcessBlockB`, this will become clearer.  Remove it from the Effect.
> 
> `mTimeInfo` is actually in the InstanceBase class, not the Effect class; it is referenced by:
> 
> * `GetTimeInfo()`  called from the vst callback
> * `GetSampleRate()` called from the vst callback
> * `VSTEffect::VSTEffect`
> 
> As long as the vst callback is called for the effect too, I can not move `mTimeInfo` in the Instance only. I actually wonder if I can move it there even after I split the vst callback in two parts (one for the effect, one for the instance) because maybe the callback for the effect will still need to call `GetTimeInfo` and/or `GetSampleRate`? this because the vst GUI might want to draw something that depends on the samplerate (think of a band equalizer for instance)

I thought we decided it is not needed in the Effect. If for GetTimeInfo and GetSampleRate, the effect can simply inherit the trivial implementations, then mTimeInfo can belong to Instance only. > > > * Why is `mTimeInfo` still in the Effect class?  Only the Instance and the slaves, also Instances, need it.  Once you address the point about `ProcessBlockB`, this will become clearer.  Remove it from the Effect.
> > 
> > 
> > `mTimeInfo` is actually in the InstanceBase class, not the Effect class; it is referenced by:
> > 
> > * `GetTimeInfo()`  called from the vst callback
> > * `GetSampleRate()` called from the vst callback
> > * `VSTEffect::VSTEffect`
> > 
> > As long as the vst callback is called for the effect too, I can not move `mTimeInfo` in the Instance only. I actually wonder if I can move it there even after I split the vst callback in two parts (one for the effect, one for the instance) because maybe the callback for the effect will still need to call `GetTimeInfo` and/or `GetSampleRate`? this because the vst GUI might want to draw something that depends on the samplerate (think of a band equalizer for instance)
> 
> I thought we decided it is not needed in the Effect. If for GetTimeInfo and GetSampleRate, the effect can simply inherit the trivial implementations, then mTimeInfo can belong to Instance only.

If experiment shows that those cases in AudioMaster are not reached for the Effect object, but only for the Instance, then
the simplification of moving mTimeInfo out of Effect could be done and would be desirable.

But we might leave that until we do such experiment.
 > * I think `VSTInstanceBase::Automate` is wrong... I think the `VSTInstance` needs to override it, and call `callSetParameter` (not B), and so, the Instance needs, transitionally, a reference to the array of slaves.

I'd like to think out loud a bit now. Automate is called from the vst callback, sometimes on the Effect, sometimes on the Instance. I put some breakpoints and I observed this:

1) when instantiating an effect 
--> `Automate` is called on the effect, nothing happens because `mMaster` is null and `mSlaves` is empty

2) when moving a slider on the effect gui --> as above

3) when pressing play 
--> `Automate` is called on the instance

4) when clicking ""apply"" (i.e. destructive processing) 
--> `Automate` is called first on the effect (`mMaster`=null `mSlaves`={}) and then on the instance

5) when moving a slider while playing 
--> `Automate` is called on the effect, `mMaster`=null but this time `mSlaves` has one item

My conclusions (but I might be wrong): 

a) we need both overrides of `Automate `(for Effect and Instance), and when I will split the callback, both of them will need to call `Automate `when requested to. 

b) `mMaster` can be removed (it is always nullptr in my tries above)

c) I could do as you say, i.e. pass the array of slaves to the instance and have Instance::Automate call callSetParameter (not B) on them, but, is it really needed? without this, everything still works and it would be a temporary thing anyway

 > If experiment shows that those cases in AudioMaster are not reached for the Effect object, but only for the Instance, then the simplification of moving mTimeInfo out of Effect could be done and would be desirable.
> 
> But we might leave that until we do such experiment.

Did a little experiment: using a simple plugin like gain, `GetTimeInfo()` is never reached, neither for the effect nor for the instance. But already using an equalizer plugin, at least `GetTimeInfo()` is reached, and for the effect only. 
So I would say, at least `GetTimeInfo()` should remain for the effect and return the actual mTimeInfo, and if we want to play it safe, also` GetSampleRate()`.
 A note about my commits for step 5. :

I said earlier (and wrote in code comments) that I would split the vst callback function in two parts, one for the instance and one for the effect.

Since then I changed my mind and opted for a more conservative solution, which is: keep the vst callback in the wrapper and have it call virtual methods. I think doing so is cleaner and poses less risks of breaking things.
 > I was wrong when I said that Automate has to belong to the instance. It must indeed belong to the Effect, because changes in sliders are intercepted by the Effect vst callback.
> 
> That being said, yes it is still wrong that Automate() loses the loop over slaves. In commit 4.3 I fix that by having Automate use callSetParameter and that required that mInstances move to the instancebase class.

I'm still not satisfied.  As I explain:  Both in Automate(), and in OnSlider() (which will both ultimately go to the Validator class), callSetParameter should be invoked, but NOT in `this`, but instead on an Instance object.

That is the Instance stored in the minimal Validator class now; and, until the Validator is complete, the Effect will keep a pointer to the active Validator.
 > I'm still not satisfied. As I explain: Both in Automate(), and in OnSlider() (which will both ultimately go to the Validator class), callSetParameter should be invoked, but NOT in `this`, but instead on an Instance object.
> 
> That is the Instance stored in the minimal Validator class now; and, until the Validator is complete, the Effect will keep a pointer to the active Validator.

I can not do this because:

1) `::Automate` comes in two versions:

- `VSTInstanceBase::Automate`  which has no access to members of the Effect (such as the pointer to the active Validator)
- `VSTEffect::Automate` it is actually calling callsetparameterB


2) I tried doing it in `::OnSlider`, but then it breaks this functionality:  as I move sliders of the plain GUI while realtime processing, I do not hear changes in the sound anymore.

 I am reviewing the latest force-push and so far I am satisfied with the 4.x steps.  They can be squashed into one in your next force-push.
 Please rebase onto latest master, squash steps 4 into one, and squash steps 5 into another commit.  Address in step 5 the two reqeusts for change.  Then, this will be approved, and you will move on to the Validator.
 Less important, `mUseLatency` might also move from Wrapper to Instance
",,"Resolves: https://github.com/audacity/audacity/issues/3192

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

","Most one-argument constructors should be `explicit`
 I see you add two virtual functions to the wrapper when you moved Load() into it.

I understand virtual `Unload` lets wrapper avoid mention of `mDialog`.

But I think the last part of `Unload`:

```
   if (mModule)
   {
#if defined(__WXMAC__)
      mResource.reset();
      mBundleRef.reset();
#endif

      mModule.reset();
      mAEffect = NULL;
   }
```

should be the responsibility of Wrapper, balancing what it does in load.  Make those lines a non-virtual function; call it in the destructor of LV2Wrapper, and also on the failure path of `Load()`.

And I think you defined virtual `callSetProgram` to avoid dependending on `mSlaves`.  But `Load()` only needs `callSetProgram` to initialize a plug-in or an instance which will not yet have any slaves.  So I think you don't need this function, and can instead let `Load` call `callSetProgramB` Might simplify it with an inherited constructor:
`using DefaultEffectUIValidator::DefaultEffectUIValidator `
 The commit that stubs `ProcessInitialize` and others is incomplete.  My fault for giving an incomplete description for step 4.  (Now updated)

`ProcessFinalize` should also be moved to the instance, and you will know all is correct when the effect also inherits `PerTrackEffect` not `StatefulPerTrackEffect`.

Please figure out step 4 as a whole and squash all the 4.x commits.
 Your last commit fails to build because `VSTInstance` becomes an abstract class when it inherits `VSTWrapper`.

I mentioned before why `Unload` is the only virtual function you really need, and at this commit, you should define it for `VSTInstance`.

What part of `VSTEffect::Unload` should be moved into that function?  This part, but not the part mentioning a dialog:

```
   if (mAEffect)
   {
      // Turn the power off
      PowerOff();

      // Finally, close the plugin
      callDispatcher(effClose, 0, 0, NULL, 0.0);
      mAEffect = NULL;
   }
```

That is because powering on is only something the Instance needs to do, not the effect.

In fact I think `PowerOn()` and `PowerOff()` should end up in the Instance class only.  But to do step 4 without step 5, you will first need to move them into the Wrapper class.  Then move them again in step 5.

Also in step 4, the `PowerOn()` in `BuildFancy()` should be changed to call it on the Instance, not on `this`.
Pass the Instance into `BuildFancy()` from `PopulateUI()`.


 `VSTEffectInstance` will also need to define all the other pure virtuals that were added to `VSTEffectWrapper`.

Some of the new functions should be empty stubs, others should have the lines from the corresponding VSTEffect functions moved into them, and data members should be moved too as needed to compile it.

Or a third possibility is that some members should be moved into VSTWrapper and the functions become non-virtual.

Which of the new functions of `VSTEffectInstance` should be empty?  I think NeedIdle, UpdateDisplay, SizeWindow all serve UI purposes only so should be empty.

What about the rest of them?  I'm not decided yet.

 The virtual functions with non-void return are `GetTimeInfo` and `GetSampleRate`.  If we have a vst handle for the plug-in distinct from the instances, will it need to report meaningful values out of `AudioMaster` or will those cases never be invoked?

I'm not sure of the answer.  But I suggest this, and let experiment see if there is a problem:

Make default implementations of these non-pure virtuals to return nullptr at 44100.

Make overrides in the Instance class.

Move the member mTimeInfo to the instance.

 It's unclear what `GetProcessLevel` is supposed to report to the plug-in, but the legacy code in fact never returned anything but 1 because mProcessLevel is never changed.

I say move mProcessLevel into the Wrapper class and provide a default implementation to the non-pure virtual.  Maybe we will figure out the need for an override later.

 I think the `void`-returning `SetBufferDelay` and `Automate` are meaningful only for instances.  Make default implementations that do nothing.  Override them in the instance.
 Hm, making `Automate` an override in the instance requires the array of slaves, which should move to the instance, but you can't really to that completely until step 5.

I suggest, construct the Instance with a reference to the array in the Effect, to complete step 4.  But then step 5 moves mSlaves into the instance.
 Last comment for this round of review!

This definition of `GetLatencyB` seems weird to me.  I think you do it because the `SetBufferDelay` virtual function must be defined for all Wrappers.  But I say again, make it non-pure and let it do nothing in the base class.  Let the Instance override it properly.  Then, that leaves no need to move the two data members into the wrapper.  They belong in the Instance only.


 Ah, one more comment.  Honestly the last.

I don't think this function is necessary.
 ok, done ok, done ok, done Automate also references mMaster, so to have it a member of the instance, I had to move it to the wrapper.

I think I implemented all your suggestions here? please check commit ""4.3 Implement some virtuals in the instance"" That's right, I could add the PluginPath as an arg to the Instance constructor. Done in commit 4.4 This call within `Unload` is unnecessary.

 This too is unnecessary.
 I commited part of your suggestion in 4.5. `mUseLatency` can not be moved to the instance, because it is referenced by `VSTEffect::ShowOptions` - any idea on how to solve that? You did not remove `GetLatencyB` or undo the move of the two data members `mUseLatency`, `mBufferDelay` If you examine how mMaster is used, it's really just a boolean that is true when an instance (a VSTEffect) is NOT the master.
 You need mMaster in Automate, but the wrapper has a no-op override of Audomate, so there should be no need to put mMaster in the Wrapper.  You also moved mTimeInfo into the Wrapper but it should be in the Instane.
 Just duplicate that boolean in the instance.  Make it a constructor argument.
 > You need mMaster in Automate, but the wrapper has a no-op override of Automate, so there should be no need to put mMaster in the Wrapper.

but `mMaster` is set and used in 3 different `VSTEffect` methods - that's why I put it in the wrapper. I probably could rework the code in a way that `VSTEffect` does not need it anymore, but I'd leave that for later

 > You also moved mTimeInfo into the Wrapper but it should be in the Instance.

`mTimeInfo` is again written/used in different methods of `VSTEffect`. Should I figure out how to move these uses of it from `VSTEffect` to `VSTEffectInstance` as part of step 4?

 Now implemented in commit 4.6: I moved `mUseLatency` and `mBufferDelay` in the instance, leaving a copy of `mUseLatency` in the Effect class which is passed to the instance at construction time. ok, removed ok, removed Please do an interactive rebase, squashing this commit onto the second one, so that all commits are buildable.
"
3415,2022-08-23T12:53:26Z,2022-08-23T13:55:32Z,crsib,0,0,1,6,2,1,1,[],,0,3728.0,0,0,0,0,64928030.792998,,1,1,0,False,[],"Changing arguments of a not-yet-used function, looks harmless
","Changing arguments of a not-yet-used function, looks harmless
","- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3187,2022-07-06T15:46:12Z,2022-08-23T11:34:05Z,crsib,10,0,1,11,2,2,2,[],67796.0,0,4132076.0,1,0,0,0,64936517.760968,,0,1,0,False,"['Paul-Licameli', 'crsib', 'Ryan-Miller-Audacity']","The reason to delay merge is that, while other effect families are making the transition to statelessness, the old interface for realtime effects should also remain available to QA while testing.

In case refactoring introduces errors, testing with the old user interface may help us understand if the regression in behavior is properly part of the refactoring of one effect family, or is instead some bug remaining in the general framework.

 I'm not sure if I understand your point. The interface is not changed (preview button is still in place) and I only found out that the dialog is not modal two weeks ago, I have always used `Preview` button > I'm not sure if I understand your point. The interface is not changed (preview button is still in place) and I only found out that the dialog is not modal two weeks ago, I have always used `Preview` button

The Preview button may be available, but if it treats the effect like any other non-realtime effect, then it will pre-compute some sound to play, and not respond to control changes while playing.

That should be the behavior of the dialog in this branch (is it?) but is not the behavior I would like to keep available to QA.

 @Ryan-Miller-Audacity @dozzzzer any comments on that? Do you use play button in such case? > @Ryan-Miller-Audacity @dozzzzer any comments on that? Do you use play button in such case?

I know that @pietro68 was doing testing like this of my intermediate stages in the transformation of AudioUnits and making useful discoveries of bugs.

LV2 maybe should have proceeded with similar caution as we transformed it recently, but now the testing of that effect family can catch up with the code changes too.
 > @Ryan-Miller-Audacity @dozzzzer any comments on that? Do you use play button in such case?

I would say in general the play button is where I go when dealing with anything realtime.

 However, with the described usefulness of being able to determine if there is a regression in behavior or a bug in the general framework, would it not be possible to go ahead and do the merge, but keep a separate branch for any discovered bugs to be verified in to determine if it is a regression or not? Or would that require a lot of upkeep? IMO, it's best to have QA taking place how the end user will actually end up seeing/using it as much as possible, but using Paul's plan as a additional tool could be helpful for better determining bugs in relation to regression etc.

Essentially, i'm asking for a ""best of both worlds"" scenario here. Should this be merged now @Paul-Licameli? > Should this be merged now @Paul-Licameli?

I still want to wait.
 @Paul-Licameli any reason to wait longer? It should be merged before alpha anyway VST3 statelessness is done and VST is not must-have for alpha, so poyekhali!

I request that the merge be delayed.

Nothing wrong with the changes.
","I request that the merge be delayed.

Nothing wrong with the changes.
","Resolves: #2987

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3410,2022-08-23T09:28:00Z,2022-08-23T11:33:23Z,crsib,0,0,3,38,5,1,1,[],,0,7526.0,0,0,0,0,64936560.147149,,0,3,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3396,2022-08-18T16:13:56Z,2022-08-23T10:38:51Z,vsverchinsky,8,30,11,3284,26,1,0,[],265106.0,0,411986.0,0,0,0,0,64939745.958855,,0,11,0,False,['Paul-Licameli'],"> The new `ProcessInitialize` no longer calls `ConsumeChanges`. Does destructive processing correctly apply the changes to settings made in the dialog? How is that communicated? I must see the tenth commit I suppose.

I did stepping through in the debugger and now I understand that `FlushSettings` and then `StoreSettings` in `ValidateUI` puts complete state into `EffectSettings`, then `ProcessInitialize` causes `FetchSettings` to complete the copy of state correctly into another instance object.

 I just noticed one `TODO` can be easily fixed:  `VST3Effect::LoadPreset` can now be `const` and the ugly `const_cast` at line 232 can be removed.
 I'm almost approving this commit.  Please see all the comments above that I did not yet mark resolved.

I would like to have some explanation of why Base64 conversion was not working as expected.

Also see the points about UpdateUI.  I did some experiments, exporting a custom preset, then trying to switch between defaults and importing my preset, using the sidebar dialog, during play and while not playing.

This does not yet work properly.

We might decide it's good enough for alpha release without this, but you are right that we must ""send changes via IComponentHandler"".
 Besides those two important points, there is the suggestion that a map to optionals might be better.

I can demonstrate a problem that I think would be fixed by this.

With Valhalla Supermassive, I use default settings, click ""Mix"" and then, during play, click and drag that dial, then release.

I can get the dial to fluctuate between two different values, sometimes very different values, and hear the playback switching between them.
 Really then, that is three important points.  There are other recent points I made that are only suggestions.
 Second commit comment has a spelling error in ""redundant""
Third commit ""Moving some of components into VST3Wrapper"" now fails to build!
 Another commit comment misspells ""actual""
 Your new last commit makes a much simpler fix for the problem of fluctuating settings.  Now I feel silly that I didn't think of it!
",,"Resolves: #2606
Resolves: #3313 
Resolves: #3306
Resolves: #3307
Resolves: #3308

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This commit is not strictly needed for statelessness.

You must have found a case where this appeared to fix persistency of settings in the configuration file.

The analogous code for VST2, which you originally adapted to VST3, still uses Base64 encoding and to change that would have some small risk of breaking compatibility of someone's settings configuration or macros if they migrate to 3.2.

What was the original reason Base64 encoding was used at all?  I'm not certain but I think it was a way of converting binary data into something that could be stored in a config file with proper escapes and no loss of data.  Is that right, and is it a reason why you still might want to figure out some other way to keep Base64 encoding working?

 Extra character in `#include`
 The meanings of `FetchSettings` and `StoreSettings` got reversed, and are now inconsistent with terminology in AudioUnits.  There, `FetchSettings` is fetching state *from* an AudioUnit handle *into* an EffectSettings package of data.  `StoreSettings` does the opposite. unused local variable Copy construction was eliminated, so perhaps you may also declare the copy with explicit `= delete` The elimination of `StoreSettings` leaves the argument `settings` unused in this function, at least so I see at the fifth commit in the sequence.  So this ""breaks"" that function, but I presume you fix it in later commits I have not yet reviewed.  I understand from other commit comments that you put back a local wrapper object in the function for this purpose.

Strictly then this commit sequence isn't preserving intended behavior all the way through but I won't insist on that now.

 Last things to say about the fifth commit.
When I transformed other effect families, the move to actual statelessness came late.  Until a late commit, `GetSettings` was a non-static member function, ignoring its argument, and really using information in the stateful Effect object.

All the places where `GetSettings` had to be called were figured out first; and only then did I make a change so that the `EffectSettings` objects really carried independent information around and were not dummies.

You make this change earlier, so `EffectSettings` objects really carry data, making it possible that buggy behavior exists in the intermedate steps of this transformation because of inconsistencies about where the correct data really are.  I already mentioned the possible wrong behavior of exporting.

It's not how I would write a very careful transoformation.  In case bugs still exist after everything and I want to bisect to understand where the bug was introduced, the other caution I took with intermediate steps might help me find out where the mistake was really introduced.

I'm not insisting now on rewriting this pull request that way.
 I think it is the fifth commit that introduces the build failure on Linux.  It seems ""Always"" is a macro defined somewhere in one of the inclusions.

I was able to fix Linux builds of my cherry-picks of your branch by moving the definition of `VST3Effect::RealtimeSupport` earlier in the file, before other `#include` directives.  Another thing I didn't try was just to insert `#undef Always` before the function.
 Just use literal `44100.0` as a default, as before.  Don't use `EffectBase::mProjectRate`.  That is another piece of state in the effect objects I need to eliminate in a future release.
 Could this instead be `SingleInputParameterValue *const mParameterQueues;` so you can remove the `const_cast` below?
 Should this function clear the map in the settings? -- maybe not if it needs to be done in a worker thread.

You don't (yet) use it in any worker thread (at the eighth commit of ten).
 At this commit I see accumulation of changes in the map in `performEdit` but clearing nowhere.
 This is the only place where the processors get changed settings information, and it only happens before playback.
 Something is needed to replace the deleted lines, of course, so that there can be continuing adjustment of settings during play.  So it seems you would need more `ConsumeSettings` but in a worker thread.

I don't yet see the complete transformation of the code in later commits, but at this commit it is surely incomplete.
 Note the `RealtimeProcessStart` is the only place where the worker thread should check for changes of state communicated by the main thread.  Not in `RealtimeProcess` or `RealtimeProcessEnd`.
 So I understand that `Process` makes `InputParameterChanges` from `VST3Wrapper::mParameters`, which in turn, must be assigned by `ConsumeChanges`.

A call to that is surely needed, then in `RealtimeProcessStart`, and then `mParameters` will be correctly unchanging in case of mulitple calls to `Process.`
 Maybe the `EffectSettings` could contain a map from parameter ids to `optional<>` values, so the consuming thread could ""clear"" the map by reassigning `nullopt` everywhere, but not doing any free-store deallocation.
 Moving on the the ninth commit.  As I already mentioned, you should avoid either allocating or freeing and that means, not clearing a `std::map` either.  So I suggest again, a map from keys to optional values and just reassignment of null opt instead of clearing.
 `CopySettingsContents` in either direction is always done on the worker thread.
 `PerTrackEffect.h` is enough, don't need its subclass
 This commit loses the vector of processors in the effect, but does not restore that array elsewhere in the instance.
 This deleted line has no corresponding one in the new function for the Instance.  But I see from other functions that you assume latency is available at initialization time and does not change, so you cache the value.

Ok.

But I wonder if varying latency, with varying settings, really is a possible thing we will need to handle later.  You know that fixing the handling of latency in realtime play is a problem I need to solve, maybe in a patch release.
 The new `ProcessInitialize` no longer calls `ConsumeChanges`.  Does destructive processing correctly apply the changes to settings made in the dialog?  How is that communicated?  I must see the tenth commit I suppose.
 This logic moves to `RealtimeInitialize` while the new `RealtimeAddProcessor` does nothing.  The `ConsumeChanges` is lost so I am again unsure that the processor really begins in the correct state.
 This was the added `ConsumeChanges` call I was expecting to see -- good, but again, I don't understand why it is right to remove the other calls, and it also needs rewrite to avoid deallocations.
 Ninth commit re-introduces use of the `settings` argument, good
 I expect that this new member of the Effect moves to the Validator next
 There is a long-distance coincidence of repeated string literals here and in `VST3OptionsDialog.cpp`.  It would be nice to clean that up, but it's not necessary now
 I saw this new function and thought, is it safe to use only on the main thread?  Do changes of `mActive` happen only in the main thread?  Is `mActive` privately used only on the main thread?

Yes, yes, and yes, which is good.  So please just add a comment in the header file that it's for main thread usage only.
 I think this should call through to `EffectUIValidator::OnClose` so the effect doesn't hold on to `mParent` either
"
3392,2022-08-18T10:08:38Z,2022-08-23T07:04:33Z,crsib,0,2,1,586,12,2,1,[],,0,420958.0,0,0,0,0,64952691.991405,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Shouldn't `mOffset` change? Fixed!
3407,2022-08-22T11:50:05Z,2022-08-22T22:28:53Z,Paul-Licameli,1,0,2,10,2,1,1,[],28727.0,1,38329.0,0,0,0,0,64983634.242033,,0,2,0,False,['petersampsonaudacity'],"@Paul-Licameli   testing on W11 with audacity-win-3.2.0-alpha-20220822+2990c5e-x64

This looks to be fixed OK - thanks",,"Resolves: #2959
Resolves: #3246
Resolves: #2447

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3361,2022-08-10T13:55:12Z,2022-08-11T10:58:18Z,pietro68,0,0,2,34,1,1,1,[],,1,1036545.0,0,0,0,0,65014713.096843,,0,2,0,False,[],,,"Resolves: 

This fix is so small and correcting an obvious oversight, that I do not think it is worth opening an issue for it (but if I am wrong please tell me and I will open one).

The bug shows up when using vst2 plugins which do not support the ""chunk"" so in that case they fall back to saving settings as key-value pairs. The only problem was that once they take that path, `StoreSettings` wrongly returned `false` instead of `true`, and that in turn creates a chain of events that prevents the application of destructive processing.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3405,2022-08-21T22:20:03Z,2022-08-22T13:36:49Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,55009.0,0,0,0,0,65015558.170384,,0,1,0,False,[],,,"Resolves: #3277

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3403,2022-08-21T19:31:02Z,2022-08-22T13:35:36Z,Paul-Licameli,0,0,1,3,1,1,1,[],,1,65076.0,0,0,0,0,65015632.193796,,0,1,0,False,[],,,"Resolves: #3234

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3380,2022-08-16T15:57:54Z,2022-08-18T10:00:06Z,crsib,0,0,4,447,12,1,1,[],,0,151339.0,0,0,0,0,65374159.39908,,0,4,0,False,[],,,"This PR adds support for custom URL schemes in Audacity

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3391,2022-08-17T20:06:39Z,2022-08-18T10:46:04Z,crsib,2,3,1,14,2,2,1,[],47927.0,0,52769.0,0,0,0,0,65371404.550306,,0,1,0,False,"['Paul-Licameli', 'crsib']","Approved conditionally on test completion.

So I understand there was a ""leak"" of states in the old global one-deep effect stack, which this fixes.

A few suggestions for code cleanup.
 @Paul-Licameli run succeeded ",,"Strong reference to the created temporary instance is stored in order to fulfil preconditions required by EffectUIHost::CleanupRealtime()

Resolves: #3389

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This makes the member variable `mwState` not really used so it could be removed from the class.

I think only the inner `if` condition is enough and `mInitialized` can be removed from the class.
 Let's do it separately sometime soon please ok"
3390,2022-08-17T19:09:47Z,2022-08-19T10:17:07Z,vsverchinsky,2,0,3,40,3,1,1,[],50379.0,0,140846.0,0,0,0,0,65286739.56399,,0,3,0,False,"['Paul-Licameli', 'vsverchinsky']","Approved conditional on the re-running of jobs completing.

I would modify the first commit comment to mention the previous commit id 33318a421544fcadbf753271500d3bb5b238ba99, not just the issue number.

I see some other incidental things involving wave clips are fixed here, beyond the minimum to fix the benchmark.

I see that `GetSequence()->GetNumSamples()` did not mean what it used to mean, so the benchmark test is changed.

But that raises a question:  did other uses of GetNumSamples() become incorrect?  Should they be reviewed to for some errors that have not been noticed?

`GetWaveDisplay` and `WaveClipWaveformCache::GetWaveDisplay` are two places where that function is used outside of the internals of WaveClip implementation.

 > But that raises a question: did other uses of GetNumSamples() become incorrect? Should they be reviewed to for some errors that have not been noticed?

I've checked the use of `WaveClip::GetSequence()`, `Sequence::GetNumSamples` and they seem to be fine.",,"Resolves: #3364

Completes changes started in #2818

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3337,2022-08-04T20:38:28Z,2022-08-16T14:29:25Z,RuRo,2,0,1,59,8,1,1,[],1094333.0,0,1105563.0,0,0,0,0,65439903.632125,,0,1,0,False,"['RuRo', 'LWinterberg']","This change broke the Fedora package build apparently. 

https://github.com/audacity/audacity/actions/runs/2868753432

``` 
error: Installed (but unpackaged) file(s) found:

   /usr/share/audacity/EffectsMenuDefaults.xml

    File not found: /home/user/rpmbuild/BUILDROOT/audacity-3.2.0.alpha.r7d3fd92-0.fc34.x86_64/usr/share/audacity/help
RPM build errors:
    Installed (but unpackaged) file(s) found:
   /usr/share/audacity/EffectsMenuDefaults.xml
```
 No idea about how rpm packaging works. It looks like you need to declare the installed files explicitly in the `%files` directive?

Regarding #3386, I have mentioned in the Disclaimer that this should be tested on Mac/Windows before merging, but I guess that was accidentally overlooked. Either the windows build doesn't install the resources, or the location is different from what I've expected, and the code can no longer find them. Unfortunately, I can't help you with debugging this on Windows as I only run Linux.",,"Resolves: #2659 (specifically [this comment](https://github.com/audacity/audacity/issues/2659#issuecomment-1152921419))

Before this PR the `res/effects_menu_defaults.xml` file was searched relative to the `audacity` executable and wasn't even shipped on Linux. Additionally, the `presets/EQDefaultCurves.xml` had custom logic to get it installed in the right place.

Both the `presets` and the `res` directories didn't have any files in them other than these 2 files. I think, that both of these files fall under the broad category of ""resources"" and should ideally be all installed in a unified way into `${prefix}/share/audacity` on linux, `audacity.app/Contents/Resources` on Mac and alongside the executable on Windows. We can then uniformly retreive them using `FileNames::ResourcesDir()`.

In the future, to add a new resource file, all you will need to do would be to add it to `resources` and add it to this list in `src/CMakeLists.txt`:
```cmake
# Define resources
#
list( APPEND RESOURCES
   ../resources/EQDefaultCurves.xml
   ../resources/EffectsMenuDefaults.xml
)
```

**Disclaimer**: I don't have Windows/Mac machines, so this PR is currently only tested on Linux (Arch). We should probably get someone to verify, that the resources are bundled (and subsequently found) correctly in all the supported distribution formats. A simple way to verify this is to check if the `Effects` menu properly groups the built-in effects:

<details><summary>Right</summary>

![Screenshot_20220804_230316](https://user-images.githubusercontent.com/3747318/182942521-628f7314-5aa1-490d-97c8-556c1dcca893.jpeg)

</details>

<details><summary>Wrong</summary>

![Screenshot_20220804_231027](https://user-images.githubusercontent.com/3747318/182948047-80616069-3202-4810-983d-81ce5a2a022e.jpeg)

</details>

---

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior",
3352,2022-08-09T09:16:32Z,2022-08-17T10:31:45Z,LWinterberg,6,0,4,284,6,1,1,[],5065.0,0,695761.0,0,0,0,0,65458621.973892,,1,4,0,False,"['crsib', 'LWinterberg', 'Ryan-Miller-Audacity']","Probably let's remove ""actual behavior""? I feel that it usually duplicates the bug description @dozzzzer added the actual behavior line in the .md version, so maybe it's helpful for him > Probably let's remove ""actual behavior""? I feel that it usually duplicates the bug description

I have found in the past that the ""actual behavior"" field simply allows for a more concise description of the bug vs the bug description and lets the reader go to a very direct description of the issue without having to sift through the sometimes verbose bug description. It also just gives a very direct 1:1 comparison to the expected behavior. So it can be helpful sometimes, but I see both sides of the coin. 

Overall, forms seem cool and add a level of usability (and structure) beyond an open text field. I don't think I have any complaints with them. Presumably the Enhancement/Plugin forms would add their relevant labels? It looks like they both just add the bug label currently.  > Presumably the Enhancement/Plugin forms would add their relevant labels? It looks like they both just add the bug label currently.

My fork doesn't have the labels which exist here so it didn't apply them, but yes: Enhancement request would be auto-tagged ""Enhancement request"", plugin issues would be tagged ""bug, plugins"" > > Presumably the Enhancement/Plugin forms would add their relevant labels? It looks like they both just add the bug label currently.
> 
> My fork doesn't have the labels which exist here so it didn't apply them, but yes: Enhancement request would be auto-tagged ""Enhancement request"", plugin issues would be tagged ""bug, plugins""

Ah, right on. >  It also just gives a very direct 1:1 comparison to the expected behavior. So it can be helpful sometimes, but I see both sides of the coin.

Maybe the ""actual behavior"" field should be optional then",,"This PR converts the existing issue templates (found at https://github.com/audacity/audacity/issues/new/choose) to forms and changes them to (hopefully) fulfill their purposes better. 

It automatically applies a relevant label, and you can also make it automatically assign a person, auto-fill titles and form boxes and stuff like that. Further info on forms can be found at https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema

You can see them in action here: https://github.com/LWinterberg/audacity/issues/new/choose

* Output of a bug report: https://github.com/LWinterberg/audacity/issues/7 
* Output of an enhancement request: https://github.com/LWinterberg/audacity/issues/8
* Output of a plugin bug: https://github.com/LWinterberg/audacity/issues/9
",
3208,2022-07-11T12:51:33Z,2022-08-15T14:25:33Z,LWinterberg,0,0,7,48,11,1,1,[],,1,3196283.0,0,0,0,0,65450799.12853,,0,7,0,False,[],,,"Resolves: #3199

Also 
* updates the message for the incompatible plugins found window
* renames some instances of plug-ins to plugins
* renames Macros... to Macro Manager (to be in line with Plugin Manager)
* Changes wording in the crash report to not make it look like help on crashes can be found in the privacy policy (and thus fixes #2974)
* fixes #2287
* Fixes #3203 ",
3374,2022-08-15T12:52:27Z,2022-08-17T02:37:10Z,Paul-Licameli,1,4,2,365,31,3,3,[],77063.0,1,135886.0,0,0,0,0,65487144.099074,,0,2,0,False,['Paul-Licameli'],"I made some changes in response to @pietro68 's suggestions.  Please review again
Changes are ok for me; regarding the existing width logic, we'll need to fix it sometime later.","Changes are ok for me; regarding the existing width logic, we'll need to fix it sometime later.","Contributes to VST3 statelessness

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I am not 100% sure but this looks incorrect to me: `mStereoWidth` is a continuous controller in the range 0-100, to enable gradual application of stereo separation. 

What happens here is that as soon as the user wants at least 1% of stereo separation, then we tell the calling code to see this effect as a 2-in, 2-out effect. What if the instance starts with 0% width, and then the user moves the width slider to obtain more stereo separation? the instance would still be seen as a 1-channel out processor.

I would rather assign `mWidth` in the if structure following the original assignment:

```
bool isStereo = false;
   state.mNumChans = 1;
   if (    (chanMap && chanMap[0] != ChannelNameEOL && chanMap[1] == ChannelNameFrontRight)
        || forceStereo )
   {
      isStereo = true;
      state.mNumChans = 2;
      mWidth = 2;
   }
  else
  {
     mWidth = 1;
  }

```
And actually I would rename `mWidth` to `mNumChannels` or similar Besides this point -- do you understand the rest and have no objections?  If so, then I want to merge this branch, maybe minus one commit, to unblock other work.
 Please observe:  it is only when initializing, either for destructive or realtime, that this makes a difference.  And, we will not make Reverb realtime in 3.2.  But at least for destructive processing, this is restoring logic that was in 3.1.3 and earlier but got lost in this release, and I'm not sure it was correct to lose that.

See the earlier commit that I link:  this is just restoring logic as it was.
 I see, so: besides this point, which as you pointed out is restoring logic as it was, I have no objections so I will approve the PR.

Maybe you could just add a comment for later, writing that this pre-existing logic is probably wrong, especially citing the case when the instance starts with 0% width and then the user might want to increase it (in realtime processing), but then the effect will remain in mono."
3379,2022-08-16T13:20:50Z,2022-08-16T13:46:39Z,crsib,0,0,1,20,2,1,1,[],,0,1552.0,0,0,0,0,65533375.226295,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3371,2022-08-13T15:23:13Z,2022-08-15T11:24:40Z,Paul-Licameli,0,0,1,6,2,1,1,[],,1,158490.0,0,0,0,0,65628294.228925,,0,1,0,False,[],,,"Resolves: #3368

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3349,2022-08-08T12:52:14Z,2022-08-15T10:05:20Z,Paul-Licameli,0,0,4,23,3,1,1,[],,1,594800.0,0,0,0,0,65633045.754183,,1,4,0,False,[],,,"Resolves: #3112 (except for VST2)

Fix realtime play of Ladspa, Lv2, and AudioUnit effects, so they properly clear delay buffers when you power an effect or
effect list off.

I believe VST3 required no fix here, but the right fix for VST2 isn't known to me yet.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3370,2022-08-13T12:57:33Z,2022-08-15T09:37:02Z,Paul-Licameli,3,0,2,27,2,1,1,[],76539.0,0,160813.0,0,0,0,0,65634713.850681,,0,2,0,False,"['crsib', 'Paul-Licameli']","There difference between two fixes that my approach only affects Nyquist, your approach has an unknown set of potential side effects from forcing run loop iteration. I can confirm that right now it works on Windows, I haven't check that it works on Linux. Will it break later? I don't know.

I will approve this PR. Please choose between the two considering the consequences from  yielding.  > There difference between two fixes that my approach only affects Nyquist, your approach has an unknown set of potential side effects from forcing run loop iteration. I can confirm that right now it works on Windows, I haven't check that it works on Linux. Will it break later? I don't know.
> 
> I will approve this PR. Please choose between the two considering the consequences from yielding.

I don't fear bad consequences of yielding, which still happens only in very unusual usage of Nyquist, and much prefer the simplicity of this solution as I hope you do too.
 For the record - I don't agree with you, but as I said - it is your call",,"Resolves: #3345

Fix crash running Nyquist Prompt with code that has widgets

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3176,2022-07-04T16:45:25Z,2022-08-15T11:12:59Z,crsib,30,30,10,721,22,2,0,[],325216.0,1,3608857.0,0,0,0,0,65628998.372341,,0,10,1,False,"['Paul-Licameli', 'crsib']","On MacOS:

1. Record and count to ten aloud.
2. Open sidebar and add AUDynamicsProcessor (an example with an output meter)
3. Play, then press the gear wheel to open the dialog  (Or, press the gear first and then play)
4. Observe that the output metering does not work

In master now, at step 3 you can only press the gear first before playing (the point of this PR is to overcome that limitation)

But in master, there is some updating of the output meter (not at a fast enough rate, but that's another problem to figure out).
 I'm not sure if I follow you. This PR provides a fix for a major UX issue, I do not see how is it related to output metering. Current UX makes real-time effects pretty much useless  BTW following you steps I observe that output metering works (very slow, yes) > BTW following you steps I observe that output metering works (very slow, yes)

I said it works, but slowly, in master yet not at all in your branch.  Are you agreeing with all that?
 I understand the reason of the problem and thinking of a solution now > I understand the reason of the problem and thinking of a solution now

I have my own thoughts about solution but have turned attention to other reviews since identifying the problem and haven't written them down precisely.
 General idea:  some parts of RealtimeEffect state that are not now copied, should be put in a structure managed by a `shared_ptr` which is copied.  This includes the pointer to the instance.  The complications with ClientData and EffectSettingsAccessTee may all be unnecessary.

But I must look at it closer to make this precise and see if it all makes sense.
 >General idea: some parts of RealtimeEffect state that are not now copied

Yep, exactly the way I plan approaching it

>The complications with ClientData

I still like the idea of UI to be attached separately, but this can be moved to be a part of RealtimeEffectState itself . The UI controller will be much more simple though.

> EffectSettingsAccessTee 

Yep, that won't be needed, but I think keeping it ""public"" does not harm.

The main question is still about the Undo/Redo stacks. Right now ""copying"" instance has a side effect of preserving the effect settings in the undo stack. I'm not sure if it is a desired behavior provided that Undo/Redo for parameters is postponed  and is not implement is several other DAWs at all. Without Undo/Redo preservation I do not see much complexity required to fix the issue you brought up

 Not yet a complete review.  I pushed a suggested nicer looking way (to me anyway) to implement ""Do not set Effect to be a controller...""
 Your commit introduces a new dependency for the `lib-components`, it now requires access to wxWindow. I'm still checking if it works at all. So is it really worth introducing a new dependency just to remove on `if`? I say it is up to you. > So is it really worth introducing a new dependency just to remove on `if`? I say it is up to you.

Oh my, how did I overlook that?  Good point: if lib-components should only use wxBase, then the DefaultEffectUIValidator subclass should also be moved somewhere else, into Audacity.

However, actually lib-components and EffectUIClientInterface is still a somewhat confused and confusing piece of the legacy code.  There used to be several other badly named interface classes with unclear purpose that I figured out how to eliminate in this release.  EffectUIClientInterface is still one of those unsatisfying ones I haven't figured out how to clean up just yet.

 To be fair, at some point we will need to have some façade for the event handlers anyway. So probably we can allow linking to `wxwidgets::core` here for now

>EffectUIClientInterface 

I am really confused about it, yes :-) You mention Nyquist effects too now, which are also never realtime capable, but I don't see special treatment of them in this branch.

Nyquist and NoiseReduction are also the only effects that override ShowHostInterface specially, and one of your commits deletes a call to ShowHostInterface.

So is this part of the explanation?
 Looking on `int Effect::ShowClientInterface` I think the reason is that NoiseReduction behaves very differently from other effects, including Nyquist. I have no strong feelings about that change and I'm happy to remove it. I will make another PR about the popping of event handlers, and you can rebase onto it if it is approved and merged.

It will also move DefaultEffectUIValidator to Audacity.
 Hope I will see it soon, this PR will require vast amount of testing. See #3276
 Well, that was really quick, thank you, Paul! The proper complementary pushing and popping was a detail I recall having doubts about, and I'm glad to have reviewed and settled it to my satisfaction now.
 I have rebased and force-pushed. I removed `ShowClientInterface` override as well. This completes a round of review of the lines of code changed, but now I need to reread the bullet points in the issue and consider whether they were all addressed.
 Please consider the *expected* design, not the one currently implemented for the effect UI dialog. I have fixed the issues found during the previous run It's not true that edits that push the Undo stack make the non-modal dialog disappear, but it seems any Undo or Redo makes it disappear even if ""the same"" track with ""the same"" state still exists.  Is that acceptable to design and QA?  I don't know.  I won't block the merge for that, but I do want the dependency cycle problem addressed.
 Break, also, the dependency of `ProjectWindow` on `RealtimeEffectPanel` (a dependency made earlier when the panel was introduced, not by you) and that cycle shrinks, not to one, but still excluding the new file added in 3.2, which is then not in a cycle with anything else.

How to do that?  It needs some manoeuvres with `GlobalHook` probably, that I might figure out in stabilization or for patch release.

So don't you worry about that one small addition to the cycle up in the UI layer.  But please do unblock the extraction of lib-audio-io.

 Some thoughts:

If mMainSettings is moved into the shared state, then there is no need for NonInterfering and the related templates to avoid false sharing, which simplifies the macOS build problem.

But I think it should not be moved into the shared state.  If you keep copying it as before, then it will be possible for a state's settings to be different at different points of Undo history.

Even if there are not distinct Undo/Redo items just for changes of settings, it may be an improvement to call ModifyState whenever the non-modal dialog closes.  This is done when you change the power button states.  Observe how it works.  Make some edit, and then toggle power.  Undo and redo.  What do you expect for power button state?  What you get is how you last left the button, before the undo; not the button as it was when the Undo state was first pushed on the stack.

ModifyState is also used for things like changes of the selected times.


 That is separate from the lifetime problems that must be addressed to avoid the crashes in idle time for lv2 effects. Maybe do the opposite, though:  Put worker settings into shared state.  Undo history has versions of main settings, which is copied by the copy constructor of the state, but doesn't need multiple worker settings just taking up space.  Then no need for `SharedNonInterfering` or `NonInterfering`.
 Should `mID` and `mPlugin` remain in shared state?  Yes.  There is no need to reassign them after a state is made.  Replacement of one effect with another is implemented as construction of a new `RealtimeEffectState` with its own different, new shared state.
See previous comment.  ""Something must be done"" so that output metering works.

That isn't very specific of me, but I do have ideas about how to do it.

I think it will require some major changes of approach, and abandonment of many of these proposed changes.

I may develop a first commit that a revised branch can be based on.

But the changes for track list events are so far an approved, necessary part of the fix.
","See previous comment.  ""Something must be done"" so that output metering works.

That isn't very specific of me, but I do have ideas about how to do it.

I think it will require some major changes of approach, and abandonment of many of these proposed changes.

I may develop a first commit that a revised branch can be based on.

But the changes for track list events are so far an approved, necessary part of the fix.
","Resolves: #3102
Resolves: #3366 
Resolves: #3367

This PR makes setting dialogs to be non modal, so Audacity interface can be interactive while the dialog is open.

Key points:

1. One dialog can be opened per one effect instance:
    1. Dialog is closed when the effect instance is removed
    2. Dialog is closed when the track is removed
    3. Dialog survives ""destructive"" operations on the track, such as recording, using generators and applying destructive effects
    4. Dialog title reflects the name of a track
    5. Dialog title does not (yet) reflect the effect placement inside the stack or any additional parameters (for example - Ardour shows like `Track 1: Distortion [VST3]`). Current design currently lacks this features (@Tantacrul @LWinterberg FYI)
2. This PR does not address #3090. `Apply` behavior is left as is, as it will be removed as a part of #3090
3. Changing effect parameters is not reflected in the Undo Stack. This should be a separate task, and it should be a responsibility of each individual effect subclass to implement such functionality: we need to reflect the changed parameter in the undo text, like ""Undo Change Gain"". It has been agreed that this can be solved outside the Audacity 3.2 scope. For reference - Garage Band and Motu Performer offer no such functionality and it is unreliable in Ableton.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This commit is ok except I think this comment should be clearer.  What is “valid”?

say maybe instead, “mpTrack points to the removed track, if some other shared pointer is preventing its deletion” Hmm, I'm trying to say that track pointer is valid during the event in any case I don't understand why NoiseReduction required special treatment.  Can you explain?

This new function needs to be called only from RealtimeEffectStateUI, and Noise Reduction is not one of the realtime capable effects, so I don't understand how you can ever reach this override.
 As you know, I do not trust in ""something is not called now"" :-) The reason `GetEffectUIClientInterface` is there for symmetry. I had some reasoning why this was not done for `NyquistEffect`, but I don't remember it.  Maybe the commit that does this should logically be last in the sequence, because all else is in place not to cause bugs in non-modality only then
 Agreed! This member should move earlier in the header file, before `mMainSettings` (and the initializers ordered appropriately) just so that the `@name` section comments are correct.
 RealtimeEffectState has a `Site` which has this thing in a slot which has a `shared_ptr` to the good stuff.

I might have arranged it differently:  RealtimeEffectState has a `shared_ptr` to a SharedState structure that it declares, as a `Site`; then this would be a simple attachment and would not need to be cloneable.

Either would work.  What other attchments to states might be needed in future?  I don't know yet.  The latter way of doing it would make it impossible for them to be un-shared.

 At first I feared a leaky `shared_ptr` cycle but then I saw `mCurrentState` is a `weak_ptr`.  Good, so use `weak_from_this()` instead to make that more obvious.
 Should there be a null check on `currentState`?
 ""its""
 its
 or just `assert(false)` Ironically, there was assert(false), but at some point I have decided to make it more explicit The `shared_ptr` is only lazily initialized.
I think this means that different versions of the state in the undo history my or may not shared state.  Would that have bad consequences?

- make a new state
- do some other edit
- click the cogwheel

Then the current track list points to the shared state but the pushed undo state does not.  Does this mean I could undo, click the wheel again, and have two non-modal dialogs open at once?  Or is there something I haven't seen yet that destroys the dialog whenever you undo and redo?  (But then why have this shared state)?

But swap the last two steps, and then there is sharing.

If I am right that there could be a bug, then the shared_ptr should instead be assigned eagerly whenever a new state is made, then always copied.

So either rearrange the storage as I suggested, or used `BuildAll` in the constructor of `RealtimeEffectState` and have `RealtimeEffectStateUI` alway make the shared state.
 The deleted code for a modal dialog restored state as it was in case the dialog is cancelled or the Esc key is hit, and it pushes an undo history item for change of state if the dialog is OK'd.

I don't see where this commit preserves that behavior by other means.
 Replacing a weak pointer with a reference might look unsafe, but I think it is a safe enough assumption that this window will be destroyed only before the associated project.
 As it was mentioned in PR description - the Undo/Redo is intentionally left unimplemented for the effect parameters. And for the reference - there are several DAWs that do not implement it all as well and at least for Ableton there were problems observed with the implementation (i. e. Undo  restored the parameter value to some unexpected state).

If and when we decide to implement the undo/redo for stacked effect parameters - we will have to create an item for each parameter user changes (see Ableton as the reference). 

The potential problem I expect now is that Audacity project won't get ""dirty"" on parameter change, but I would rather fix it in a different PR. When the user deletes an effect from the stack, hide the dialog.

When the user replaces one effect with another in the stack, that too should hide the dialog.  But I don't see a corresponding change in `OnEffectListItemChange`.  That is the function reached through an Observer callback.
 Thank you for pointing this out, I will check. Does this line properly belong to the earlier commit ""Adds a class to manage stacked effects settings UI"" ?
 I would say no Will fix RealtimeEffectPanel is a child of ProjectWindow Why is this not done in case of replacements (as indicated by evt.mExtra)?  I think I do understand that this can happen if you do a destructive effect application via other UI, or you finish recording, if I look for uses of `TrackList::Replace`.  The commit comment gave some explanation, and this code should too.

But then in the case of replacement, shouldn't there be another branch to call `UpdateRealtimeEffectUIData`?  The Track object is replaced with another one which is now the current state of the track in the project.
 Aha, here it is then.  You are relying on the DELETION and ADDITION events both arriving, which is part of the contract in Track.h.  And you don't rely on the sequence of their arrival.
 Was it agreed then with designers that the formerly specified undo/redo behavior is now abandoned?

Do we open another issue for the future effort to figure out the problem?

If there will not be undo/redo states for the OK button, still I think something could be done:  the OK button should call `ModifyState` -- what also happens for the power button changes.  Then the change of settings becomes, not another state, but fused with whatever is the latest undo state.  This is similar to what is done when you simply change the selection, and makes for argubly less surprising behavior, if after OK-ing the dialog, you undo and redo again, expecting the settings to be unchanged.

Besides all that, there is also the reasonable expectation that if you cancel the dialog, tentative changes of settings should be cancelled and old state restored.  But nothing does that now.

 Right
 Not sure I understood why.
 >Was it agreed then with designers that the formerly specified undo/redo behavior is now abandoned

I've talked with @Tantacrul on that. Can I  see the previous specification please? AFAIK the dialog specified has no Ok/Cancel buttons whatsoever. 

>the OK button

There will be no OK button

"
3373,2022-08-15T06:57:25Z,2022-08-15T07:55:40Z,dbry,0,0,4,29,2,1,1,[],,0,3495.0,0,0,0,0,65640842.202707,,0,4,0,False,[],"That is fantastic, thank you, David!","That is fantastic, thank you, David!","I found a few straggling issues with the WavPack import/export, and I also added a couple enhancements.

These changes should all be simple and straightforward except one. I noticed during my testing that once I had enabled the ""correction"" files, I was unable to turn them back off in the dialog. This was not obvious at first because the setting _appeared_ to be off (the checkbox was unchecked), but the correction file was still generated. This was persistent and the only way to clear the setting for real was to shutdown and restart Audacity.

I never could figure out why this was happening. Either the `TieCheckBox` functionality is broken (unlikely) or it was simply not being used correctly in this case. I looked at other instances and couldn't find another example of `TieCheckBox` being used the exact same way, so I decided to just convert it to a toggle event like the ""hybrid"" checkbox (which was working correctly). This fixed the issue and I have not seen any regression after extensive testing.

Thanks again for your consideration and including WavPack in Audacity! 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3330,2022-08-02T06:12:51Z,2022-08-03T14:26:38Z,dbry,2,5,8,113,2,2,1,[],144200.0,0,919769.0,0,0,0,0,65850442.468179,,0,8,0,False,"['dbry', 'crsib']","@crsib Thanks for the prompt review and merge! I'll continue testing, but I think this is pretty good at this point. @dbry thank you a lot for your help!",,"Hi Audacity team!

First I would like to thank the Audacity team, and particularly @Subhra264, for integrating WavPack into Audacity. Great work!

Unfortunately at the time I was not aware that this was ongoing because I found out about it the day it was committed to master. I'm sure that if I'd been aware I could have helped it along and perhaps saved some headaches. But in any event, I have been testing it now for the past week or so and have discovered and and fixed some minor issues and put together these eight commits.

Probably the easiest way to review them is to look at the individual commits. Most of them were pretty trivial to find (like files from the [official WavPack test suite](http://www.rarewares.org/wavpack/test_suite.zip) that simply would not load), and while I'm happy to go into more detail, these should all be pretty self-explanatory. One issue, however, requires a little more explanation.

The hybrid mode of WavPack was configured with a bitrate from 16 - 384 `kbps` (kbits per second). The problem with this is that this fixed range does not take into account the sample rate and number of channels (which directly affect the bitrates available), and therefore presents sometimes inappropriate values. For example, with 24/96 stereo audio the minimum bitrate that the hybrid mode will work at is around 430 kbps, and 6-channel, 48-kHz audio will only go down to 650 kbps. So for these common audio formats the entire range of presented bitrates is too low, which essentially makes the feature useless.

The solution I came up with is to present the bitrate in `bits per sample` instead, ranging from 2.2 (the minimum the hybrid mode will operate) to 8.0 (the practical upper limit which is always audibly transparent). I believe that this makes the feature usable while still presenting something easily understood by the user.

Please let me know if I can explain any of these changes more fully, and thanks again for this contribution!

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Great catch! Probably `wxLogError` is a better idea. `wxLogDebug` does not generate any user visible output really. I'm not sure why do is this needed. This is safe here, though, so nothing critical I didn't really intend this for the user, especially because this gets triggered any time the WavPack importer is invoked to check whether some random file is importable. However, it might be useful for debugging if `libwavpack` refuses to open a file that it _should_ be able to.  I'm not a regular C++ programmer and just discovered that std::strings can include terminating NULLs. The issue this caused was that when the tag name had a NULL at the end it would no longer match the same string without a NULL. So, for example, this line did not work as intended:

https://github.com/audacity/audacity/blob/2c3c9d9919b778bb27cc94d99ece211d9686c12f/src/TagsEditor.cpp#L462

"
3343,2022-08-05T21:55:55Z,2022-08-09T10:38:42Z,dbry,0,0,1,2,1,1,1,[],,0,603983.0,0,0,0,0,65850444.470206,,0,1,0,False,[],,,"When I first started testing WavPack import, the default Audacity behavior (""All files"") was to use the FFmpeg importer instead of the new native one. It was also not obvious that this was happening unless the file was long enough that the title of the importing window was noticed. FFmpeg has handled WavPack files for a long time, and is generally fine, but there are some reasons to _not_ use it by default:

- It is slower than the native WavPack importer, probably because it's missing the assembly language optimizations
- It does not handle WavPack DSD files (the latest FFmpeg does, but the version here doesn't)
- It does not handle correction files (wvc)
- It does not import all the metadata

I'm not sure if this is the best way to resolve this issue (adding it to the `OrderingPreferenceInitializer`) but that definitely works. I was also able to achieve this by deleting the `""wv""` entry in the list of handled extensions in `ImportFFmpeg.cpp`, but that didn't seem like the right way to do it.

Thanks!

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3318,2022-07-29T19:36:39Z,2022-08-09T10:54:42Z,DavidBailes,0,0,1,26,1,1,1,[],,1,1095957.0,0,0,0,0,65971628.423959,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3021

Problem:
The mouse interaction and focus of check boxes in the vst3 plain gui is non-standard, and the names of the check boxes are not read by screen readers.

This is caused by creating a wxCheckBox with an empty label, and adding the text separately.

Fix:
Use a wxCheckBox with a label, and with the wxALIGN_RIGHT style so that the label is to the left of the check box which is the desired layout in this case.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3369,2022-08-12T18:24:53Z,2022-08-12T19:08:41Z,Paul-Licameli,0,0,1,12,6,1,1,[],,1,2632.0,0,0,0,0,65859659.565302,,1,1,0,False,[],,,"Resolves: #3149

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3355,2022-08-09T12:55:53Z,2022-08-12T10:26:08Z,Paul-Licameli,3,0,3,74,7,1,1,[],94643.0,1,250218.0,0,0,0,0,65891013.763047,,0,3,0,False,"['pietro68', 'Paul-Licameli']","I am getting an exception thrown on Windows, since the third commit 9781cdd (""RealtimeEffectManager::Process is given enough buffers..."") by doing the following:

1) generate 1 second of silence
2) press play

Here is what happens:

![image](https://user-images.githubusercontent.com/16491307/183940912-4300a0c4-5c22-4f43-83e4-e471512107b9.png)

This is happening on Windows only. > I am getting an exception thrown on Windows, since the third commit [9781cdd](https://github.com/audacity/audacity/commit/9781cdd07efb967e218c72b2d193caae4f08dc36) (""RealtimeEffectManager::Process is given enough buffers..."") by doing the following:
> 
> 1. generate 1 second of silence
> 2. press play
> 
> Here is what happens:
> 
> ![image](https://user-images.githubusercontent.com/16491307/183940912-4300a0c4-5c22-4f43-83e4-e471512107b9.png)
> 
> This is happening on Windows only.

The fix was to change the calls to alloca, substituting `nBuffers` for `chans`.  Please fetch the branch and try it again.
 > The fix was to change the calls to alloca, substituting `nBuffers` for `chans`. Please fetch the branch and try it again.

I confirm that I get no more exception thrown now.

I also confirm that the original issue appears solved for me, now I get same level output using vst2 Freeverb realtime/destructive.Verified fix works and code changes are ok for me. ",Verified fix works and code changes are ok for me. ,"Resolves: #3315 

Make sure the inputs given to realtime play of a mono track are the same as given to destructive effect application and
rendering.

This makes a difference with reverb effects, which do not process channels independently, but rather have each output
channel affected by each input channel.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3358,2022-08-09T14:11:20Z,2022-08-10T10:55:57Z,Paul-Licameli,2,0,1,4,1,1,1,[],6997.0,1,74681.0,0,0,0,0,66062025.672966,,1,1,0,False,['Paul-Licameli'],"This fix is not sufficient yet.
It appears that if the selection is short, the bug persists.
It appears that the shortest duration to play that does work at the default sample rate is 2.001 s, if I use the selection toolbar to adjust the end of selection.

I need to understand why.
 This amended PR should now do it even for short selections.
Verified and understood.",Verified and understood.,"... This fixes a regression from 3.1.3, and is another example of a silly bug
that would have been caught if shadowed variables were flagged as errors.

Resolves: #2721

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3348,2022-08-08T12:13:35Z,2022-08-09T20:13:05Z,Paul-Licameli,0,2,1,19,2,2,1,[],,1,115180.0,0,0,0,0,66114992.187795,,0,1,0,False,[],"Verified that the fix works, and code changes are ok for me.","Verified that the fix works, and code changes are ok for me.","Resolves: #3347

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","In the original code, '0' would also be searched for, but not in the new one; was this omission intentional?  The '0' was not intended as a member of the list characters to search for, but as the terminator of the list.
"
3357,2022-08-09T14:01:35Z,2022-08-09T19:37:25Z,Paul-Licameli,0,1,1,23,4,1,1,[],,1,20152.0,0,0,0,0,66117140.189665,,1,1,0,False,[],,,"Resolves: #3356

Mix Stereo Down To Mono, Mix And Render (to same or to new track)
now leave the resulting effect stacks empty

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This conflicts with #3176. Not a blocker for either PRs, but worth to be noted"
3335,2022-08-03T11:56:59Z,2022-08-09T11:48:55Z,Paul-Licameli,1,2,14,444,30,2,1,[],174403.0,1,517920.0,0,0,0,0,66145250.083509,,0,14,0,False,['Paul-Licameli'],"Now no longer a draft
",,"Resolves: #3150

Rendering of realtime effect stacks!  In Export, Mix-and-Render, and Stereo to Mono.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Very minor, but I feel that `inputs` would be a better name will do
"
3342,2022-08-05T21:44:18Z,2022-08-08T14:09:15Z,Paul-Licameli,0,0,1,93,2,1,1,[],,1,231899.0,0,0,0,0,66223232.175219,,0,1,0,False,[],,,"... In the example of AUDynamicsProcessor, latency is 256 samples, while block
size defaults to 512.

Resolves: #3340

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3350,2022-08-08T21:24:40Z,2022-08-09T11:34:58Z,Paul-Licameli,0,0,1,44,1,1,1,[],,1,51021.0,0,0,0,0,66146088.315244,,0,1,0,False,[],,,"... foolish mistake at 8387eac9 made a loop within a loop.

This might have been caught sooner if we treated warnings about shadowed
variables as errors!

Resolves: #3022

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3344,2022-08-06T23:50:29Z,2022-08-08T06:24:42Z,Gootector,0,0,1,4,1,1,1,[],,0,110054.0,0,0,0,0,66251108.400204,,0,1,0,False,[],,,"Update Polish Translation from Transifex
Fix: oktawy -> oktaw.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3336,2022-08-04T17:50:02Z,2022-08-04T20:51:43Z,crsib,1,0,1,4,1,1,1,[],10941.0,1,59012.0,0,0,0,0,66496577.456139,,0,1,1,False,['Paul-Licameli'],"Thank you for figuring that out
",,"Fixes uninitalized mBuffer in LV2AtomPortState
`LV2Wrapper::Create` performs `ReceiveFromInstance` for every atom port. However, mBuffer contents was never initialized before that. 

`zix_ring_write` expects that the first two DWORDS are well defined, not
doing so resulted in UB.

Resolves: #3323 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3346,2022-08-08T07:39:46Z,2022-08-08T10:44:15Z,LWinterberg,0,0,3,47,1,1,1,[],,0,17376.0,0,0,0,0,66229229.584502,,0,3,0,False,[],,,"Resolves: #3339

Also adds @dbry to the list of contributors, and removes some unused DarkAudacity things",
3285,2022-07-25T07:51:22Z,2022-08-04T09:43:09Z,carlo-bramini,0,0,14,11,1,1,1,[],,0,872249.0,0,0,0,0,66583262.526083,,0,14,0,False,[],,,"I got this error when I launched Audacity on CYGWIN:

```
Unable to acquire semaphores.
This is likely due to a resource shortage
and a reboot may be required.
```

But the cause of the problem was the failure of the `shmget()` function because the cygserver program was not running.
I would like to suggest to print a message for the user if this situation will happen, with a more exact information on the source of the error.

However, after starting the cygserver and running again Audacity, the shared memory segment is created successfully.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3225,2022-07-12T15:05:23Z,2022-07-13T16:49:51Z,Paul-Licameli,0,0,10,267,14,2,2,[],,2,1893241.0,0,0,0,0,66659430.003982,,0,10,0,False,[],`GetLatency` surely looks a bit less confusing now Code changes are understood and fine for me.,`GetLatency` surely looks a bit less confusing now Code changes are understood and fine for me.,"Some preliminaries for addressing issues #3221 (latency) and #3150 (rendering)

Commits ec8ff49fe, 733cb1e4, f6e4fe993 added many arguments to
PerTrackEffect::ProcessTrack() as many unnecessary member variables became
stack variables instead for only the duration of the calling function; this exposed
much of the state ProcessTrack() was using.

This branch begins an encapsulation of this state into some objects of new classes
which will leave ProcessTrack() as a much shorter function with fewer arguments.

It also makes GetLatency() a const member function of effect instances, as it should
be.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3334,2022-08-03T09:35:14Z,2022-08-03T16:23:10Z,Paul-Licameli,0,8,20,1463,11,2,1,[],,1,24480.0,0,0,0,0,66647200.042212,,0,20,0,False,[],,,"Last refactoring step before really making rendering of effects work.

Extract an AudioGraph::Source subclass from Mixer, which will be adapted with EffectStage.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Looks like this assertions now only guard against NAN, Otherwise, they are true by construction. Should they be removed? Good to see, to be fair Generally I'm not a fan of such a long arguments lists, `j` is as bad as `ii` to be fair. In the context of this review I have no clue what is i, j and ii. Looks quite awkward to be fair Of course not, and the purpose of later commits is to shorten them after that rough separation
 minSpeed and maxSpeed were reassigned, but not the arguments min, max.  I preserve the assertions, and make explicit the precondition in the header, while also making this struct an immutable -- therefore, it doesn't need private members or friends.  The constructor establishes the invariant property of the structure which won't be violated thereafter, barring dirty tricks with casts.
"
3301,2022-07-28T02:25:02Z,2022-08-01T19:50:41Z,Paul-Licameli,0,0,14,2242,22,1,1,[],,2,556454.0,0,0,0,0,66659439.773101,,0,14,0,False,[],"It appears that <cstring> is missing from AudioGraphBuffers.cpp

Please, fix it before merging","It appears that <cstring> is missing from AudioGraphBuffers.cpp

Please, fix it before merging","Classes recently factored out of PerTrackEffect are moved to other files,
most of them in a new library, lib-audio-graph.

And one more class, AudioGraph::Task, implements the loop of PerTrackEffect::ProcessTrack.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3327,2022-07-31T23:42:13Z,2022-08-02T19:21:29Z,Paul-Licameli,1,0,16,771,3,1,1,[],157131.0,1,157159.0,0,0,0,0,66722904.097324,,1,16,0,False,['Paul-Licameli'],"Preliminary cleanups of the Mixer class in lib-sample-track,
before we fix the rendering of effects by reuse of the new AudioGraph
classes, which have been separated from PerTrackEffect.cpp.
",,"Preliminary cleanups of the Mixer class in lib-sample-track,
before we fix the rendering of effects by reuse of the new AudioGraph
classes, which wil be separated from PerTrackEffect.cpp.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1779,2021-09-29T04:43:32Z,2021-10-01T20:45:46Z,Paul-Licameli,0,1,13,25719,18,1,1,[],,0,26558098.0,0,0,0,0,66742286.473181,,2,13,0,False,[],,,"Resolves: #1411 
Resolves: #1765
Resolves: #1772
Resolves: #1773
Resolves: #1775
Resolves: #1776
Resolves: #1777
Resolves: #1778

Most of the recently requested changes to UX for the spectral brush dialog

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Affordance control of wave track also handles entrer and back keys when in name edit mode, seems like these events not handled any more by affordance"
3296,2022-07-26T14:29:46Z,2022-07-29T16:03:00Z,DavidBailes,0,0,1,61,1,1,1,[],,0,264794.0,0,0,0,0,67080418.237818,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/3039

Screen readers do not automatically read the the actual values of sliders which is shown in the text to the right of each slider.

Fix:
Set the accessibility name of the slider to be the name of the control followed by the actual value of the slider. This is the same as was done for the vst plain gui.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3304,2022-07-28T14:14:13Z,2022-07-28T14:42:16Z,crsib,0,0,2,8,2,1,1,[],,0,1686.0,0,0,0,0,67171659.612845,,0,2,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3258,2022-07-20T06:29:01Z,2022-08-01T13:25:12Z,Paul-Licameli,14,27,20,1326,33,2,1,[],101137.0,1,1061860.0,0,0,0,0,66830597.722178,,1,20,0,False,"['Paul-Licameli', 'crsib']","Some updates in early commits in the force-push onto latest master, in case they were reviewed already:

- Corrected too-strong assertion in Buffers::Discard
- Source::Produce is not `const` but adds postcondition that it does not change `Remaining()`
- Where I introduce `EffectStage`, constructor takes additional `Buffers&`, no `Connect` function after
- Fix erors in SampleTrackSource::Produce where I strengthen the postcondition

And there are changes of commit comments.

Last commit still isn't all right.
 Un-drafted at last!
 > Should VST3 work? I can observe ` assert(bound == 0 || Remaining() == 0 || result > 0);` violation when applying VST3 effect

Tell me more about how you made that happen.  Was that the assertion in SampleTrackSource or EffectStage?
 I generate *stereo* (is it relevant? I don't really know) chirp, select a part of it and try to apply Berzerk.

The first assertions is in  `PerTrackEffect::ProcessTrack`: `assert(curBlockSize <= blockSize);`
If you skip it - assertion in EffectStage::Produce is triggered. > I generate _stereo_ (is it relevant? I don't really know) chirp, select a part of it and try to apply Berzerk.
> 
> The first assertions is in `PerTrackEffect::ProcessTrack`: `assert(curBlockSize <= blockSize);` If you skip it - assertion in EffectStage::Produce is triggered.

The plug-in is itself a generator, or you generated first and applied an effect?
 I just pushed more assertions of postconditions, which should cause the first assertion sooner.
 >The plug-in is itself a generator, or you generated first and applied an effect?

I generated first  Yes actually I think I broke the case of generator plug-ins, but fixed it with another commit
 Commit 744f696e7120aa0db0c79b2f04d16dcef5ca7da8 may fix the reported symptoms now.

I have accumulated a few small commits since your tests, which you should review, then I will rebase and squash them onto previous commits.
 Some general comments about the Source and Sink interfaces.

See the looping task in ProcessTrack.  The task is between a source and a sink.  To make progress, it must, in very general terms:
- acquire an empty buffer from its sink (the loop begins in that state) -- ""sink.Reserve""
- acquire a full buffer from its source -- ""source.Produce""
- transform from source to sink (no-op because it's just in-place production into outBuffer)
- release the buffer acquired from source -- ""source.Advance"" or some better name (""source.Recycle""?)
- release the buffer acquired from sink -- ""sink.Consume""

When we implement a concurrent pipeline in the future, there will be multiple concurrent tasks like this, each with an upstream ""source"" and downstream ""sink"".

Each buffer between tasks would have two blocks.  Each buffer has two associated semaphores, one signaled by the upstream task, one by the down. All the semaphores can count up to two.

So each middle task will see two upstream semaphores and two down.

EffectStage::Produce would instead become another task, and instead of returning, it would ""release"" a filled buffer of ready data back to its downstream.  That's the sink.Consume operation.  (Don't like the name?...) The downstream task would be unblocked from acquiring a full buffer, which is source.Produce.  (... But see how the names complement.)

Meanwhile the stage may be able to do work on the other block of the downstream buffer if it is free, concurrently with its downstream doing the transformation before releasing the buffer again.

Before the effect stage can do any of that, it must first ""sink.Reserve"" an empy buffer from downstream.  (All the semaphores that count free space begin with value 2, so initial progress can happen).  It must also aquire data from upstream (that is already called ""source.Produce""; there is an initial pipeline filling from ultimate source, in which not all cores are active yet).  When all done, the stage must also ""source.Advance"" to ""recycle"" the buffer space to its upstream again so its upstream is unblocked again from ""sink.Reserve"" and can make more progress.

Maybe Produce/Consume can then be understood as complementary operations of cooperating tasks.  The other two operations need some nice complementary names too, and maybe Reserve/Recycle isn't clear, so suggest better please.

As for WaveTrackSink -- the conservative transformation I did here doesn't change its behavior of accumulating blocks until the buffer is full and only then writing them out, and so the function names seem strange.  But maybe this isn't really achieving significant economies, and instead a rewrite for concurrency would really make Consume act eagerly rather than have Reserve make space lazily.  The implementation can be changed under the interface.




 Do you know anything about the four-stoke piston engine?  I was wondering if there is a sort of analogy...

- Exhaust = Reserve
- Intake = Produce
- Compress = Recycle ?
(✨ -plug)
- Power!  (Consume)

And we want all the cylinders to keep firing all the time.

But if I used the names in the first column, you would doubtless find it all even stranger.

 Anyway.. maybe just Acquire and Release in each of the interfaces would be simplest.
 Probably the comment on Source/Sink should go somewhere in code Pushed again, with some name changes of functions and squashes of fixes; also last commit introduces AudioGraph::Task

Should VST3 work? I can observe ` assert(bound == 0 || Remaining() == 0 || result > 0);` violation when applying VST3 effect For the reference LV2 worked fine Tremendous work! Some minor comments, that can be ignored safely","Should VST3 work? I can observe ` assert(bound == 0 || Remaining() == 0 || result > 0);` violation when applying VST3 effect For the reference LV2 worked fine Tremendous work! Some minor comments, that can be ignored safely","More refactoring of PerTrackEffect to serve for generalizing rendering.

Source, stage, and sink objects encapsulate much of the complication of PerTrackEffect::ProcessTrack.

Stage works as a decorator of any other given abstract Sink, presenting its own Sink interface.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I am really confused by the naming. I would've never expected such a behavior from a function called Reserve and it has not documentation provided otherwise. And it is even more confusing that Consume does nothing while Reserve consumes After looking into implementation I say that I do not understand why this is called a sink. At very least, please document the protocol, as the implementation of the protocol was unexpected to me. Please document what this method is supposed to do Please document what this method is supposed to do Is it intentional that Flush is kept out of the protocol? Should we have this commit in a different PR that could be merged earlier? So probably it should be called `Acknowledge`? `Advance` usually has skip semantics. But should the source know about the user? `Source`, on the other hand, seems to do what I would expect from source (well, from the Producer, but this is minor). I would enjoy to see both `isGenerator` and `isProcessor` to be const, but that is very minor If a C++ exception will be thrown by a subclass - the process will terminate. But I do not say, that this is bad :-) And I agree that it now implies usage of GuardedCall for the code reviewer. Oh I see now why `ProcessFinalize` is now `noexcept` I think that the implementation of the host should handle any exception that happened inside the host code. I am pretty sure that plugins themselves cannot throw a C++ exception :-)   Stage is good. Please document `bound` Yes It is optional.

I agree this placement of progress update responsibility may not seem cleanest, but this is what the transformation accomplished while preserving the behavior.

I didn’t figure out a better way yet.  I think an abstract stage object might report remaining latency, and a routine running the pipeline might watch that (those) value(s) from the stage(s) and the Remaining() of the ultimate source, and handle progress update instead. This preserves what was there.  Which I wrote years ago.  AudacityException, only, is the root of things we can catch and handle at the event loop. In the last commit, EffectState becomes a subclass of Source, and the function becomes an override, with the understanding that it “inherits” all documentation for that. Just moving the indicator update? But why?
 Not critical I think, but making `advancedPositions` to be a class member may help to reduce the load on memory allocator a bit. Should it be final? Or even our friend `alloca`.

But avoidance of heap allocations is not very important for destructive effect processing.
 For now it can be.  There might be future need to make this an abstract base class, if we figure out multi-core.  And what is now in EffectStage::Produce would instead become another Task viewing its upstream and down as Source and Sink.

But I haven't arrived at those details yet.
 Yeah, I tend to forget that this is destructive path only :-)"
3276,2022-07-22T11:42:30Z,2022-07-22T13:08:03Z,Paul-Licameli,0,3,3,129,6,2,1,[],,2,522391.0,1,0,0,0,67178459.555049,,0,3,0,False,[],Please replace `COMPONENTS_API ` with `AUDACITY_API` (or remove it at all),Please replace `COMPONENTS_API ` with `AUDACITY_API` (or remove it at all),"Popping of event handlers on the stack of the effect dialog is done in destructors
of DefaultEffectUIValidator (as was already done for LV2 validators).

The validator makes sense then as a cleanup object holding a responsibility.

All uses of PushEventHandler in the entire program are easily reviewed, to be sure the change in Effect.cpp (which pushes
event handlers less often) is not leaving any existing PopEventHandler or RemoveEventHandler calls unbalanced.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`COMPONENTS_API` seems to be wrong here. I would've expect `AUDACITY_API` Yep, it breaks Windows build Oh heck
"
3302,2022-07-28T09:40:32Z,2022-07-28T11:11:19Z,crsib,0,0,4,73,6,1,1,[],,0,5450.0,0,0,0,0,67184318.62974,,0,4,0,False,[],,,"Resolves: #3289 

On top of that, building against wxWidgets 3.2 is unblocked so arch packages are built against the system version of the wxWidgets

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3297,2022-07-26T15:23:55Z,2022-07-26T16:24:56Z,crsib,0,0,1,22,1,1,1,[],,0,3664.0,0,0,0,0,67338301.646637,,0,1,0,False,[],,,"Resolves: #3293 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3265,2022-07-20T15:58:47Z,2022-07-20T16:37:25Z,crsib,0,2,2,95,2,2,1,[],,2,161723.0,0,0,0,0,67696552.963607,,0,2,1,False,[],,,"Resolves: #3206 

This PR attempts to:
1. Improve the detection of the MP3 files on `Open`. This is can be tricky as MP3 has no container header.
2. Prevent Frankenstein MP3 files from importing. Such files are extremely rare. Probably FFMPEG based importer will be able to handle them
3. Fix the case, where `Open` succeeded, but `Import` failed. This can happen surprisingly often, because it is hard to detect MP3 files

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This funcition has a return value and can fail, is that a redundant check? We call mpg123_getformat after parsing the first frame, so it will not fail as per the source and docs."
3266,2022-07-20T19:50:53Z,2022-07-21T11:27:40Z,crsib,0,0,1,26,3,1,1,[],,2,489776.0,0,0,0,0,67354574.19309,,0,1,1,False,[],,,"Resolves: #3232 

As a part of transition to the new Effect architecture `EffectUIValidator` subclasses now handle the events from wxWidgets. This makes deleting `EffectUIValidator` instance from the `EffectUIHost::OnClose` to be unsafe and in fact it has introduced #3220: LV2Validator called `Close` from the `OnIdle` handler, which deleted the handler mid-processing.  

However, the destructor of `EffectUIValidator` had a side effect of calling `CloseUI` on the plugin itself. This broke Nyquist debug mode: after pressing Debug button `EffectUIHost::Destroy` was called, which has delayed the `EffectUIHost` and `EffectUIValidator` destructors until the next idle event in the run loop. However, `NyquistEffect` relied on `CloseUI` to correctly setup parent of the `NyquistOutputDialog`. Omission of `CloseUI` from the `EffectUIHost::OnClose` results in attempt to `delete` a stack object, because `NyquistOutputDialog` is attached to the `EffectUIHost` in the destroying state.

Resolves: #3247

Oddly enough, `Regular Interval Labels` always opened `NyquistOutputDialog` on default settings, so this plugin was crashing regardless of pressing the Debug button

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3282,2022-07-22T17:41:16Z,2022-07-25T14:35:05Z,Paul-Licameli,3,3,4,163,13,2,1,[],234696.0,0,248032.0,2,0,0,0,67431295.284666,,0,4,0,False,['Paul-Licameli'],"Fix coming soon
 I force-pushed with a new commit placed first in the sequence.
 Fixed stupid mistake in the last commit
The build consistently crashes on Windows when trying to apply an effect:

```
Audacity.exe!LV2Wrapper::SendBlockSize() Line 202	C++
 	Audacity.exe!LV2Wrapper::Create(LV2InstanceFeaturesList & baseFeatures, const LV2Ports & ports, LV2PortStates & portStates, const LV2EffectSettings & settings, float sampleRate, bool useOutput) Line 49	C++
 	Audacity.exe!LV2Instance::MakeWrapper(const EffectSettings & settings, double sampleRate, bool useOutput) Line 60	C++
 	Audacity.exe!LV2Effect::PopulateUI(ShuttleGui & S, EffectInstance & instance, EffectSettingsAccess & access) Line 340	C++
 	Audacity.exe!EffectUIHost::Initialize() Line 491	C++
 	Audacity.exe!EffectUI::DialogFactory(wxWindow & parent, EffectPlugin & host, EffectUIClientInterface & client, EffectSettingsAccess & access) Line 1316	C++
```
Locals:

<HTML>
<head>
<title>Document</title></head>
<body>
<!--StartFragment-->


  | Name | Value | Type
-- | -- | -- | --
▶ | options | 0x00000058d110b000 {{context=-858993460 subject=3435973836 key=3435973836 ...}, {context=-858993460 ...}} | _LV2_Options_Option[2]
▶ | options[2] | {context=-858993460 subject=3435973836 key=3435973836 ...} | _LV2_Options_Option
▶ | pOption | 0x0000474827ad7c98 {context=??? subject=??? key=??? ...} | const _LV2_Options_Option *
▶ | this | 0x00000228f95c29a0 {mWorkerSchedule={handle=0x00000228f95c29a0 schedule_work=0x00007ff6a948d07f {Audacity.exe!LV2Wrapper::schedule_work(void *,unsigned int,void const *)} } ...} | LV2Wrapper *


<!--EndFragment-->
</body>
</HTML>

It seems that pOption points to deleted memory.
 Proposed changes disables destructive processing on LV2","The build consistently crashes on Windows when trying to apply an effect:

```
Audacity.exe!LV2Wrapper::SendBlockSize() Line 202	C++
 	Audacity.exe!LV2Wrapper::Create(LV2InstanceFeaturesList & baseFeatures, const LV2Ports & ports, LV2PortStates & portStates, const LV2EffectSettings & settings, float sampleRate, bool useOutput) Line 49	C++
 	Audacity.exe!LV2Instance::MakeWrapper(const EffectSettings & settings, double sampleRate, bool useOutput) Line 60	C++
 	Audacity.exe!LV2Effect::PopulateUI(ShuttleGui & S, EffectInstance & instance, EffectSettingsAccess & access) Line 340	C++
 	Audacity.exe!EffectUIHost::Initialize() Line 491	C++
 	Audacity.exe!EffectUI::DialogFactory(wxWindow & parent, EffectPlugin & host, EffectUIClientInterface & client, EffectSettingsAccess & access) Line 1316	C++
```
Locals:

<HTML>
<head>
<title>Document</title></head>
<body>
<!--StartFragment-->


  | Name | Value | Type
-- | -- | -- | --
▶ | options | 0x00000058d110b000 {{context=-858993460 subject=3435973836 key=3435973836 ...}, {context=-858993460 ...}} | _LV2_Options_Option[2]
▶ | options[2] | {context=-858993460 subject=3435973836 key=3435973836 ...} | _LV2_Options_Option
▶ | pOption | 0x0000474827ad7c98 {context=??? subject=??? key=??? ...} | const _LV2_Options_Option *
▶ | this | 0x00000228f95c29a0 {mWorkerSchedule={handle=0x00000228f95c29a0 schedule_work=0x00007ff6a948d07f {Audacity.exe!LV2Wrapper::schedule_work(void *,unsigned int,void const *)} } ...} | LV2Wrapper *


<!--EndFragment-->
</body>
</HTML>

It seems that pOption points to deleted memory.
 Proposed changes disables destructive processing on LV2","Resolves: #3272 

Fix the setting of block sizes and sample rates in LV2 instances, which together will fix destructive effect application

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I do not yet understand why assertion was rewritten this way and I cannot debug this code due to the crash earlier  I have checked - this rewrite now skips destructive processing altogether Oh stupid I should negate the condition
"
3270,2022-07-21T09:55:00Z,2022-07-22T09:32:12Z,crsib,0,0,1,6,1,0,0,[],,0,85035.0,0,0,0,0,67708670.001172,,1,1,0,False,[],,,"A commit by @Paul-Licameli split from #3241 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3268,2022-07-20T20:43:22Z,2022-07-21T15:33:45Z,Paul-Licameli,1,5,1,10,2,3,2,[],48386.0,1,67833.0,0,0,0,0,67773370.801882,,0,1,0,False,['crsib'],"I can approve this PR as I see nothing wrong with it, unless you want specifically Kit to review it :-) ",,"... See XMLWriter::WriteAttr -- it already applies one layer of escapes.

Revert d2ee5908a; more, make the function private to discourage misuse.

Resolves: #3267

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I'm not sure if I understand why static was removed. I do not see any changes to the function, so I see little reason why it is no longer static or at least why is it not const. It isn't static in 3.1.  Static was inserted by @lllucius in the prototype he left us only to implement new effect stacks, and I cherry-picked that part months ago.  Now with better understanding, I see it as unnecessary for correct implementation.
 You miss my point. Does this function requires `this`? Does this function modifies `this`? At least it should be `const`, but I would prefer it to be `static`. In this case it can be removed from the class altogether. Okay, I'll leave it as static, but I think it should be private too.
 I have no objections on `private`"
3047,2022-06-08T09:32:35Z,2022-07-21T15:11:37Z,vsverchinsky,8,15,5,870,12,2,1,[],174065.0,0,3735589.0,1,0,0,0,67774662.510837,,0,5,0,False,"['vsverchinsky', 'Paul-Licameli']",">If I understand this, it means that getParamNormalized returns values we can trust if the plug-in is in its initial state or just after it has loaded a preset, and also if its native UI is used, but that if we set a parameter directly in the edit controller, then we can't always expect to read that parameter back again.

In case of iZotope `getParamNormalized` always returns 0 and `setParamNormalized` doesn't change anything, but when I tried to change parameters in the GUI these changes were delivered to the `IComponentHandler` as expected so that the host was able to pass them further to the `IAudioProcessor`. I changed plain UI logic so that it does not rely on the `IEditController` implementation correctness.

I guess that ""capturing"" parameter changes which are delivered to the `IComponentHandler` instead of (re-)reading the `IEditController` state will loose requirements to the plugin implementation correctness

>Fetch of parameters (from one edit controller), then store of the parameters might work to change audio processing state as expected. But store followed by fetch might not give back the same values as were stored, correct?

The only two ways to change the processing state I'm aware of are pass changes to `IAudioProcessor::process` or use `IComponent::setState`, `IEditController::setParamNormalized` is only expected to change GUI state and update internal state of the controller itself. > > If I understand this, it means that getParamNormalized returns values we can trust if the plug-in is in its initial state or just after it has loaded a preset, and also if its native UI is used, but that if we set a parameter directly in the edit controller, then we can't always expect to read that parameter back again.
> 
> In case of iZotope `getParamNormalized` always returns 0 and `setParamNormalized` doesn't change anything, but when I tried to change parameters in the GUI these changes were delivered to the `IComponentHandler` as expected so that the host was able to pass them further to the `IAudioProcessor`. I changed plain UI logic so that it does not rely on the `IEditController` implementation correctness.
> 
> I guess that ""capturing"" parameter changes which are delivered to the `IComponentHandler` instead of (re-)reading the `IEditController` state will loose requirements to the plugin implementation correctness
> 

Did you mean ""lose"" correctness (bad) or ""loosen"" requirements on the plug-ins (good)?

So could it be, our `FetchSettings` implementation must use `IComponentHandler` ?

But as I understand, the component handler intercepts *transitions* of settings.  There is still the need to discover the initial *states* of them.  Which, as I said, appearts to be reliable.

> > Fetch of parameters (from one edit controller), then store of the parameters might work to change audio processing state as expected. But store followed by fetch might not give back the same values as were stored, correct?
> 
> The only two ways to change the processing state I'm aware of are pass changes to `IAudioProcessor::process` or use `IComponent::setState`, `IEditController::setParamNormalized` is only expected to change GUI state and update internal state of the controller itself.

 The third commit fails to build on macOS:

```
/Users/paullicameli/Github/audacity2/src/effects/VST3/AudacityVst3HostApplication.cpp:62:18: error: calling a private constructor of class 'Steinberg::Vst::HostAttributeList'
                *obj = safenew Vst::HostAttributeList;
```
 > The third commit fails to build on macOS:
> 
> ```
> /Users/paullicameli/Github/audacity2/src/effects/VST3/AudacityVst3HostApplication.cpp:62:18: error: calling a private constructor of class 'Steinberg::Vst::HostAttributeList'
>                 *obj = safenew Vst::HostAttributeList;
> ```

Strange, it passed CI, but I can't build it.
 This is the definitionof the class in hostclasses.h that my build tries to compile.  It's written to require you to call `make()` and not use the constructor directly.

```
//------------------------------------------------------------------------
/** Example, ready to use implementation of IAttributeList.
\ingroup hostingBase
*/
class HostAttributeList final : public IAttributeList
{
public:
	/** make a new attribute list instance */
	static IPtr<IAttributeList> make ();

	tresult PLUGIN_API setInt (AttrID aid, int64 value) override;
	tresult PLUGIN_API getInt (AttrID aid, int64& value) override;
	tresult PLUGIN_API setFloat (AttrID aid, double value) override;
	tresult PLUGIN_API getFloat (AttrID aid, double& value) override;
	tresult PLUGIN_API setString (AttrID aid, const TChar* string) override;
	tresult PLUGIN_API getString (AttrID aid, TChar* string, uint32 sizeInBytes) override;
	tresult PLUGIN_API setBinary (AttrID aid, const void* data, uint32 sizeInBytes) override;
	tresult PLUGIN_API getBinary (AttrID aid, const void*& data, uint32& sizeInBytes) override;

	virtual ~HostAttributeList () noexcept;
	DECLARE_FUNKNOWN_METHODS
private:
	HostAttributeList ();

	struct Attribute;
	std::map<std::string, Attribute> list;
};
``` Maybe the last commit can be split into a few My last comment for this round of review:  I see calls to `getBusInfo` were checked for OK error return before, but not now.  Should you check errors, return boolean from `ActivateMainAudioBuses`, and propagate from `SetupProcessing`?

Should you check returns too from `activateBus` ?

I also wonder whether a de-activation complementary to the activation should be done somewhere else, but if that's an omission, it is not a new omission with this PR.
 > My last comment for this round of review: I see calls to `getBusInfo` were checked for OK error return before, but not now. Should you check errors, return boolean from `ActivateMainAudioBuses`, and propagate from `SetupProcessing`?
> 
> Should you check returns too from `activateBus` ?

It looks like all I've been overconscious with all those checks returned by almost each sdk method. It's very unexpected for a plugin to reject main bus activation, though I might mistaken, considering the number of plugins out there

> I also wonder whether a de-activation complementary to the activation should be done somewhere else, but if that's an omission, it is not a new omission with this PR.

There's no need to deactivate bus, but as I understand that it's expected that host call `activateBus` each time after it calls `setupProcessing`

In the latest update I also moved `canProcessSampleSize` to `VST3Effect::Initialize` - there is no need to check it more than onceI suggest you correct spelling of one function name to `RegisterParameterControl`.

I approve these changes, but I am disturbed by what this tells us about some VST3 plug-ins.

If I understand this, it means that `getParamNormalized` returns values we can trust if the plug-in is in its initial state or just after it has loaded a preset, and also if its native UI is used, but that if we set a parameter directly in the edit controller, then we can't always expect to read that parameter back again.

This might invalidate some of the assumptions I had been making about the `FetchParameters` and `StoreParameters` functions I asked @pietro68 to write.

Fetch of parameters (from one edit controller), then store of the parameters might work to change audio processing state as expected.  But store followed by fetch might not give back the same values as were stored, correct?

We may need to examine flow of control to understand where we ever fetch after storing and test such paths more carefully.
 Missing if or what?
","I suggest you correct spelling of one function name to `RegisterParameterControl`.

I approve these changes, but I am disturbed by what this tells us about some VST3 plug-ins.

If I understand this, it means that `getParamNormalized` returns values we can trust if the plug-in is in its initial state or just after it has loaded a preset, and also if its native UI is used, but that if we set a parameter directly in the edit controller, then we can't always expect to read that parameter back again.

This might invalidate some of the assumptions I had been making about the `FetchParameters` and `StoreParameters` functions I asked @pietro68 to write.

Fetch of parameters (from one edit controller), then store of the parameters might work to change audio processing state as expected.  But store followed by fetch might not give back the same values as were stored, correct?

We may need to examine flow of control to understand where we ever fetch after storing and test such paths more carefully.
 Missing if or what?
","Resolves: #2555 
Resolves: #3224 

Fixes crash in `IPlugView`, when plugin does not increment reference count of the `IPlugFrame`
Fixes text label values update in plain UI, when plugin does not update internal state in `IEditController:setParamNormalized`

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this a string for users' eyes?  If so, should it instead be:

```
XO(""Audacity VST3 host application"").Translation()
```
 There is now an assumption that editController is not null and initialize succeeds.  Why is it allowable now to remove the checks that the old version had?
 I will skip review of these files, which I assume are copied from a trusted third party library without modifications.
 Answering this question, see VST3Effect::LoadSettings where the state strings are sometimes recovered from the serialization we made earlier in a configuration file.  IBStream would not be available.

 I cut this function and pasted it just before `VST3Effect::ProcessBlock` so that there are fewer difference lines when viewed with whitespace changes ignored.

This makes the commit more easily reviewable.  I suggest you do that before merging it.
 This no-op line looks like a mistake.  What was the intention?
 It's not displayed anywhere, some plugins might want to get it for display purposes (in theory), but I haven't seen it yet. No comments on that matter in SDK documentation. There is an exception thrown if IEditController cannot be created, though not all paths are checked, thanks, I'll fix that Ok, thanks! Thanks! Yes, it's a typo, should be `effect->mSetup.sampleRate = sampleRate` ""configured""
 In this place, you are not careful, as with other calls to `SetupProcessing` to avoid side effects on mSetup in case of failure.  Should that change?

There are also two calls in constructors of VST3Effect but I think I understand that it is not necessary there.
 These steps are done only in one of two constructors.  Is that right?
 If realtime effect instance cannot accept configuration than it's completely discarded and `RealtimeAddProcessor` reports failure

>There are also two calls in constructors of VST3Effect but I think I understand that it is not necessary there.

Right, `SetupProcessing` call is redunant in `VST3Effect` copy constructor since it's used only internally in realtime processing, but it would be [violation of a guidlines](https://steinbergmedia.github.io/vst3_dev_portal/pages/Technical+Documentation/Workflow+Diagrams/Audio+Processor+Call+Sequence.html) to access state of the processor before `IAudioProcessor::setupProcessing` was called. Ideally sample rate should be known upon effect instantiation Copy constructor copies 'master' effect's setup and neccessary modifications are applied later in `VST3Effect::RealtimeAddProcessor`"
3249,2022-07-18T11:16:23Z,2022-07-21T09:30:18Z,SteveDaulton,2,0,1,2,1,1,1,[],252803.0,0,253550.0,0,0,0,0,67794474.596303,,0,1,0,False,"['crsib', 'SteveDaulton']","I wonder if we need any kind of limit here at all, but this looks harmless enough  > I wonder if we need any kind of limit here at all

I don't know why, but ""SetLabel:"" is rather slow. When there's a large number of labels, Audacity becomes unresponsive (there's no progress bar / cancel button) until it has finished (imo there should be, but that's another story). If there was no limit, then Audacity could be unresponsive for days / weeks / months.

Imo, 10,000 labels is a generous number that should satisfy virtually all practical cases, though it may take half an hour to complete.",,"
Resolves: Resolves: https://github.com/audacity/audacity/issues/1577


*(short description of the changes and the motivation to make the changes)*
Increase maximum label number from 100 to 10000, which should be enough for practical purposes.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3241,2022-07-15T12:07:58Z,2022-07-21T09:55:51Z,crsib,11,7,5,104,11,2,1,[],21702.0,1,511411.0,1,0,0,0,67792718.6161,,1,5,1,False,"['crsib', 'Paul-Licameli']","I observe some odd behavior in release builds (the do not affect this specific branch, so please review). Looks like the last commit needs to be updated I have dropped commits that reuse the first processor for the UI. I do not expect that it will affect much of the plugins, as LV2 docs suggest against using effect instance from the UI: http://lv2plug.in/ns/ext/instance-access 

The reason why the commits were dropped is that it is possible that playback and project rates are different. As it seem, LV2 does not allow changing the sample rate of an instance. Consider the following scenario:

1. Effect is opened from the effect menu. An instance is created with the project's sample rate.
2. Preview button is pressed: we need to recreate the instance with the playback sample rate. However, this instance is already referenced by the UI. I pushed a suggested extra commit for incidental cleanup of OnIdle
 I think this commit is out of scope for this PR, thus it violates ""There are no behavior changes unnecessary for the stated purpose of the PR"". However, we can leave here if you want. Fix just that and I approve the rest.
 I have pushed the changes you requested. I still strongly disagree with the commit you have pushed - I see little evidence that it is needed at all and I am sure that it should not be a part of this PR. However, I do not want to keep this PR any longer than needed.  > I have pushed the changes you requested. I still strongly disagree with the commit you have pushed - I see little evidence that it is needed at all and I am sure that it should not be a part of this PR. However, I do not want to keep this PR any longer than needed.

I'm just guarding against possible UB (calling a null function pointer) and I don't see any harm.
 Include or remove my suggested commit as you prefer
 >I'm just guarding against possible UB (calling a null function pointer) and I don't see any harm.

I do agree that we should not trust the LV2 developers, but I feel that the chances that effect declares `LV2_UI__idleInterface` but does not implement a single function of the interface sound miniscule. 

On top of that, according to the docs:

----

```struct LV2UI_Show_Interface```
```UI Show Interface (LV2_UI__showInterface)```

UIs can provide this interface to show and hide a window, which allows them to function in hosts unable to embed their widget. This allows any UI to provide a fallback for embedding that works in any host.

If used:

* The host MUST use [LV2UI_Idle_Interface](https://lv2plug.in/doc/html/group__ui.html#structLV2UI__Idle__Interface) to drive the UI.
* The UI MUST return non-zero from [LV2UI_Idle_Interface::idle()](https://lv2plug.in/doc/html/group__ui.html#a72d526f42aeb2b9106eec7bdcde77d4d) when it has been closed.
* If idle() returns non-zero, the host MUST call [hide()](https://lv2plug.in/doc/html/group__ui.html#abc65fe3322349d5a3aadacfba90afbbe) and stop calling idle(). It MAY later call [show()](https://lv2plug.in/doc/html/group__ui.html#ac5f8e21bb1914304b16058dcfb3411c8) then resume calling idle().

----

So do we remove UB (and dereferencing `nullptr` is not quite an UB unless you are writing the kernel) or do we add more by violating the LV2 expectations from the host? I've split you commit into #3270 > > I'm just guarding against possible UB (calling a null function pointer) and I don't see any harm.
> 
> I do agree that we should not trust the LV2 developers, but I feel that the chances that effect declares `LV2_UI__idleInterface` but does not implement a single function of the interface sound miniscule.
> 
> On top of that, according to the docs:
> 
> `struct LV2UI_Show_Interface` `UI Show Interface (LV2_UI__showInterface)`
> 
> UIs can provide this interface to show and hide a window, which allows them to function in hosts unable to embed their widget. This allows any UI to provide a fallback for embedding that works in any host.
> 
> If used:
> 
> * The host MUST use [LV2UI_Idle_Interface](https://lv2plug.in/doc/html/group__ui.html#structLV2UI__Idle__Interface) to drive the UI.
> * The UI MUST return non-zero from [LV2UI_Idle_Interface::idle()](https://lv2plug.in/doc/html/group__ui.html#a72d526f42aeb2b9106eec7bdcde77d4d) when it has been closed.
> * If idle() returns non-zero, the host MUST call [hide()](https://lv2plug.in/doc/html/group__ui.html#abc65fe3322349d5a3aadacfba90afbbe) and stop calling idle(). It MAY later call [show()](https://lv2plug.in/doc/html/group__ui.html#ac5f8e21bb1914304b16058dcfb3411c8) then resume calling idle().
> 
> So do we remove UB (and dereferencing `nullptr` is not quite an UB unless you are writing the kernel) or do we add more by violating the LV2 expectations from the host?

LV2 appears to do a good job of stating precise contracts, and you know I'm putting more emphasis on programming by contract too.

But still: there is the big but bounded base of trusted source code we control, which allows us to elide checks of preconditions in release, and yet there is also foreign code we can't always trust to honor contracts.

What I suggested for CopySettingsContents in lv2 and Ladspa is certainly needed.  Stickiness of settings, if they are changed during playback, is broken by this PR.
","What I suggested for CopySettingsContents in lv2 and Ladspa is certainly needed.  Stickiness of settings, if they are changed during playback, is broken by this PR.
","Resolves: #3214 

This PR fixes the output monitoring for LV2 and LADSPA effect families, which are similarly implemented. Unlike AudioUnits - LV2/LADSPA have output ports, that are used to update the UI. 

Audacity implementation maps both input and output ports into the `EffectSettings` instance. During the realtime processing,
Audacity uses double buffered channels to transfer settings data between main and worker threads. In order not to overwrite
output values during this process `SettingsCopyDirection` argument is added to `CopySettingsContents`. This argument is
ignored now by all effects except LV2/LADSPA.

The next issue that was observed - it was not possible to sync `RealtimeEffectState::Access` and `RealtimeEffectState`. The sync now can be performed explicitly by calling `Flush`. It is not possible to sync implicitly, as it breaks effects UI. (That was observed first with AU and fixed by @Paul-Licameli)

`Flush` is called by the LV2Validator inside idle handler. LADSPA implementation is different and it seems that it doesn't require Flush call (but if LADSPA would work properly with non modal dialogs is a question).

This PR does not provide output monitoring for plain UI, see #3240

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","white space Fix this comment, should say ""true"" not ""try""
 This loop copies input ports if and only if direction is MainToWorker, and output ports, if and only if, the opposite.

But maybe sufficient to fix the bug is:  change behavior only for MainToWorker, but leave it unchanged when copying worker to main again.  Which changes behavior in fewer circumstances.
 Ditto for Ladspa as for LV2
 Thanks for finding the error in my Access class.  I think I suggested making the fix in `FlushAttempt` instead.  That might update the main-thread version of output port values a little more frequently, maybe improving update rate seen in theater?  But either way is sufficient for `Flush().`
 After testing the code it turned out, that it results in problems when changing the settings from the effect UI, which you have mentioned to be the case for AU previously.  Probably it will be fixed when CopySettings will be fixed according to your proposal as well"
3260,2022-07-20T11:40:54Z,2022-07-20T11:46:19Z,Gootector,0,0,1,4,1,1,1,[],,0,326.0,0,0,0,0,67873428.526698,,0,1,0,False,[],,,"Update Polish Translation from Transifex
Sorry, but one more fix for 'toolbar' translation.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3252,2022-07-18T21:44:09Z,2022-07-19T07:31:43Z,Gootector,0,0,1,40,1,1,1,[],,0,35254.0,0,0,0,0,67975106.673212,,0,1,0,False,[],,,"Update Polish from Transifex
Changes: pasek narzędziowy -> pasek narzędzi.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3248,2022-07-18T09:48:26Z,2022-07-19T08:25:54Z,LWinterberg,3,0,2,0,16,2,2,[],4314.0,0,85406.0,0,0,0,0,67967897.897619,,0,2,0,False,"['petersampsonaudacity', 'Tantacrul']","Those look better than the blue rings @LWinterberg 

Maybe they could be a little taller (not full height of the meter) width looks OK I think


But if you enlarge the meter then the slider looks far too small as it does not enlarge with the meter:
![image](https://user-images.githubusercontent.com/50205984/179497765-58b47a75-50e2-4446-8a36-c4342e8e3b92.png)
 I think these are looking a lot better than before. I'll let you and @jessjwilliamson confer a bit more. If you think this is what we should go with, you have my blessing! Testing on W10 with latest alpha master:  audacity-win-3.2.0-alpha-20220719+f084112-x64-msvc2022


The updated now slightly taller sliders look much better I think - and look better too in an enlarged meter.
",,resolves part 2 of #3195,
3016,2022-06-01T10:02:57Z,2022-06-01T15:22:39Z,vsverchinsky,0,3,3,86,3,2,1,[],,2,4082147.0,0,0,0,0,68031086.798181,,1,3,0,False,[],,,"Attempt to fix platform-specific issues in effects stack UI on Linux GTK: 
1) Switching between tracks sometimes didn't properly resize widget sizes, which results in ""Add effect button"" become invisible.
2) Font scaling issue with non-standard dpi modes.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""no children"" wxBitmapToggleButton exists.  Is it the right thing for you?
 Using `wx*ToggleButton` will simplify logic, but it looks noticeably different compared to `wx*Button` in GTK. Few lines of code should be added later to change icon when effect changes it's power state."
1853,2021-10-07T09:34:45Z,2021-10-07T16:50:38Z,SteveDaulton,0,0,1,27,1,1,1,[],,0,24551074.0,0,0,0,0,68040653.02992,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/pull/1837

[tnzw](https://github.com/tnzw) wrote:
> To me, I expect to have mathematical ""perfect"" timing has I am working on a computer. (i.e. for i in range(bars): at_abs = offset + i * beatlen

[LWinterberg](https://github.com/LWinterberg) wrote:
> I think that having it fully accurate is the more useful approach to put work in.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3243,2022-07-15T12:58:56Z,2022-07-18T15:40:26Z,Paul-Licameli,3,12,6,279,2,2,1,[],14217.0,1,268893.0,1,0,0,0,68032183.1322,,0,6,0,False,['Paul-Licameli'],"Please review again after my next force-push
 Rebased onto more recent master, the first three commits unchanged
 Thanks.  I'll rebase and squash the two small late commits onto earlier ones.

Understand all the new assertions to understand also what's coming...
In the latest state code relies too much on comments and assertions (which are comments effectively). I expect such approach to cause us major trouble. Given the complexity and size of PerTrackEffect and Buffers classes I do not condsider coments to be a proof.

I feel that the bounds checking code should be returned.","In the latest state code relies too much on comments and assertions (which are comments effectively). I expect such approach to cause us major trouble. Given the complexity and size of PerTrackEffect and Buffers classes I do not condsider coments to be a proof.

I feel that the bounds checking code should be returned.","Next steps in refactoring for rendering.

Clarify how the main loop of ProcessTrack manages input and output buffers, and prove there are no overflows, and that
there is loop termination.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Quite a complex notation for `mBuffers[iChannel][Position()]`, ain't it? If precondition fails - we get an UB. This assert will not help in real world. Given the complexity of the code I do not trust that we will be able to catch all available scenarios strictly on developer machines. Please read this before I make any change https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1743r0.pdf

There SHOULD be UB when preconditions fail.  That is the point of making them explicit and making clear which code is at fault when a bug happens.

The bounds checks were only lately added by me in code that never had a bug in them when I didn't yet understand why.  Now I have added more argument, and checkable assertions in debug builds, and I'm only returning it to being unchecked as it was.  I did the work of making more explicit a lot of implicit, unexplained assumptions that made the function work.

Having made it explicit, I can also now recheck my assumptions more carefully as I make other transformations.
 If you reviewed this, I expect you to point to an error in my proofs or tell me you have reasoned through them and understood.
 I do not understand how a proposal not yet accepted is a valid reason behind removing run-time checks. Audacity is a production software used in real world, UB in processing code is exceptionally bad idea. Much worse, than memory allocation in RT thread, so to speak.

>The bounds checks were only lately added by me in code that never had a bug in them when I didn't yet understand why.

This is very hard to understand that from the PR.

>If you reviewed this

I do not consider a code review to be a proof good enough.  Lately, the master was broken far too often even after the heavy reviews, including debugging sessions, which are not in scope of the code review and which slow down the development considerably.  You ask me to formally validate a non trivial change inside a large class used inside a huge code base, but I do not trust it to be possible at all and for sure - I, personally, will miss a lot even if I will study all the scenarios that currently can happen. The same way as I approved the code that broke generators, because at that point not you nor I though of the case. So probably you need a different reviewer for this PR.

I do not agree that it is possibly to formally prove anything in a huge, old code base with a zero unit tests coverage.
 By the way, I do not agree with the examples that paper uses either. Crash is not an UB. It might be undesirable, but it is very well defined. Their first example does have a UB which is not feasible to check though, when str points to a random region of memory. In this case - we guarantee by construction that the memory region is valid, but we potentially allow overwriting past the buffer, which is much worse. Please note, I do not say we DO overwrite, but I cannot verify (probably some else can) that we do not. > I do not understand how a proposal not yet accepted is a valid reason behind removing run-time checks. Audacity is a production software used in real world, UB in processing code is exceptionally bad idea. Much worse, than memory allocation in RT thread, so to speak.
> 
> > The bounds checks were only lately added by me in code that never had a bug in them when I didn't yet understand why.
> 
> This is very hard to understand that from the PR.

It was you who reviewed the other PR that only latetly introduced these bounds checks.  Commits 5c3bcd1c2e82da1e604be919df67dd1e7cf81a4f and 69de010dbed07eb132e2c92feb4f3e46842415c7.

> 
> > If you reviewed this
> 
> I do not consider a code review to be a proof good enough. Lately, the master was broken far too often even after the heavy reviews, including debugging sessions, which are not in scope of the code review and which slow down the development considerably. You ask me to formally validate a non trivial change inside a large class used inside a huge code base, but I do not trust it to be possible at all and for sure - I, personally, will miss a lot even if I will study all the scenarios that currently can happen. The same way as I approved the code that broke generators, because at that point not you nor I though of the case. So probably you need a different reviewer for this PR.
> 

> I do not agree that it is possibly to formally prove anything in a huge, old code base with a zero unit tests coverage.

I'm not dying on this hill for this one PR.

I am saying, understand what the conventions of pre and post and invariant and assersions mean.  It is useful to have these conventions for commenting and asserting and to have us all understand them.  There are multiple lines of defense for quality code and some rigor about contracts is one of them, even if it is not formalized for a computer to check.

It can lead to exposure of latent bugs when there was too much reliance on uncommented assumptions.

Sometimes there is only a bounded amount of code to review, because of privacy of members.  Being explicit about crucial assumptions with pres and posts and invariants is valuable to raise confidence in correctness and to help future maintainers form breaking assumptions that are not obvious.

I do strongly recommend the linked paper.
 Each time I add an assertion within a function, I mean it to be provable either from preconditions or from deduction about the effects of preceding lines, and I add comments why those assertions are justified.  I'm just expecting a reviewer to agree that each one of these deductions is clear enough.

The added assertions improve old code like this that left too many important assumptions unstated, and help prevent fragility as I or someone else apply more tranformations to the code.  As indeed I will in commits soon to come.

I am also trying to raise confidence in the correctness of those commits to come and I don't think I'm wasting time by adding many assertions.


 >I do strongly recommend the linked paper.

I have read it multiple times. I do not agree with it fully and I consider their examples to be not representative. P1744 is to some extent implemented in MS STL and causes heavy performance issues in debug builds while giving a sense of false safety in release. I sincerely hope that P1743 and P1744 will be revised heavily before being accepted into the C++ standard if accepted at all.

 All right, we don't agree on all, but you have read it.

The paper includes one good thing we should agree on:  it explains when NOT to use assertions.  They are wrong for validating input from the outside world.  Some old Audacity code mis-used assertions that way.  See 735c4faa34790b6c4ae80e7743566b74c7fad8bc and 5e21f526b49edcbfa8af8d36caef94b366d35d73 and 046ae403ba9b2d20889eb09cfa884aa324575d45

Please note the bounds checks I only lately added were an effort to add defensive code in cases where I didn't yet have the proof of preconditions I was seeking.  The code was in fact all right without them, relying on unstated assumptions.  I can leave it as it was, or keep the bounds checks, against the possibility that the Buffers classes become more widely used, but which they are not, yet.
 Please understand and do agree:  when I write a new assertion, I mean it to be provable, and I want my reviewer to challenge my assertions if they are not accompanied by sufficient comments to make it obvious from context why they are right.
 Also if your reconsider commit 105929e728438cc181ad55edc107cc031932e068 which fixed the generator problem:  I found that I needed to guard agains UB with a test on `numAudioIn` in case of processors by exiting early because there was no proof of the correctness of a value returned by a virtual function (the set of overrides is open-ended, NOT what you can review in one self-contained file.)

I was adding a defense against possible UBs, which you should like.  The fault was defending in some unnecessary cases too and causing error returns (not more UBs).
"
1859,2021-10-07T16:37:19Z,2021-10-08T08:55:13Z,SteveDaulton,0,0,1,12,1,1,1,[],,0,24525702.0,0,0,0,0,68040672.021395,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/1856

Partial revert of https://github.com/audacity/audacity/commit/8f41dd7a3 to allow plug-ins to hint at audio length.
This fixes bug [1856](https://github.com/audacity/audacity/issues/1856) but does not close issue [1855](https://github.com/audacity/audacity/issues/1855) which is broader in scope.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2242,2021-12-06T10:35:56Z,2021-12-16T14:14:15Z,SteveDaulton,0,0,1,197,1,1,1,[],,0,19363305.0,0,0,0,0,68040753.032045,,0,1,0,False,[],,,"Resolves:  https://github.com/audacity/audacity/issues/2230

*(short description of the changes and the motivation to make the changes)*
Fixes bug 2230.
Update to version 4 syntax.
Maintains compatibility with older versions.
Can be used on long tracks (though rather slow).
Support for mono tracks added:
*  When applied to a mono track, the vocoder generates sine wave carriers.
*  When applied to a stereo track, the vocoder uses the right channel for the carrier waves (as before).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3220,2022-07-12T11:12:19Z,2022-07-12T13:25:18Z,crsib,0,0,1,1,1,1,1,[],,2,507014.0,0,0,0,0,68059661.075163,,0,1,0,False,[],,,"Partial fix for  #3211 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3071,2022-06-14T14:34:26Z,2022-07-08T12:17:11Z,DavidBailes,1,0,1,13,1,1,1,[],68702.0,2,2672749.0,0,0,0,0,68301000.043586,,0,1,0,False,['petersampsonaudacity'],"@Paul-Licameli  -  Testing on W10 with @DavidBailes  branch build:  audacity-win-3.2.0-alpha-20220614+564d2a6-x64

David's branch build (and thus this PR) appears to fix this problem.",,"Resolves: https://github.com/audacity/audacity/issues/2162

I think the problem started in master with commit:30b7882e107c32

Fix:
If there are any preroll tracks, set the start of all the playback tracks to the same value.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3235,2022-07-14T16:35:42Z,2022-07-14T17:35:34Z,Paul-Licameli,0,0,1,28,2,1,1,[],,1,3596.0,0,0,0,0,68370878.097836,,0,1,0,False,[],,,"Resolves: #3231

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3183,2022-07-06T10:16:02Z,2022-07-15T12:48:51Z,pietro68,12,30,19,665,2,2,0,[],145694.0,0,786769.0,0,0,0,0,68301685.989891,,0,19,0,False,"['pietro68', 'Paul-Licameli']","That's enough for this round of review!
 I am examining the latest force-push.  The commit ""added MakeSettings"" does not build because it uses `GetSettings` which is not defined.  The next commit repairs that.
 Still incomplete in the commit that defines `TransferDataToWindow`: remove `RefreshParameters` from `LoadUserPreset` `DoLoadFactoryPreset` and `ImportPresets` > Let's try to see it from this angle: what `LoadParameters` has to do, is to read some stuff from the config, set it to a plugin handle (done in the call to `callSetChunkB`) and fetch the settings from the plugin handle. This handle is `mAEffect`, a member of the wrapper. Methods of `VSTEffect` do not operate on `mAEffect` directly, but through methods of `VSTEffectWrapper`. Is this wrong?

Not wrong, but not necessary,  just to hide mention of the member mAEffect inside the function VSTEffect::LoadParameters.

Right, and necessary, to use mAEffect somewhere if a ""chunk"" must be reinterpreted as a settings object.  It's then a scratch handle.

But, I think that if LoadParameters takes the other path that does not use the chunks, then it is not necessary to use a scratch handle, not necessary to define `StoreCommandParameters` or then to use `FetchSettings`.  On that path, a direct conversion can be done from strings stored in the config file into values in the map in EffectSettings.

 > I interpret your comment like so: in `LoadParameters`, instead of calling `StoreCommandParameters` and then `FetchSettings`, just call `LoadSettings`. Then there would be no need for `StoreCommandParameters` to exist.
> 
> But the thing is: the new `LoadSettings` only translates to settings the `CommandParameters` that it is given, without writing them to the handle. I thought this was the semantics of `LoadSettings` we agreed on - is it not? it should be only a translator, not a translator + a setter.
> 

It should be a translator, but sometimes needs a scratch handle, as with the paht that uses chunks.  But not the rest.

You wrote `StoreCommandParameters` which uses a handle but unnecessarily.  Don't add the function, but just adapt LoadSettings to interpret `parms` and update a map.

> Because I found the existing `LoadSettings` not to conform to these agreed semantics (it was also writing to the handle), I renamed it to `StoreCommandParameters` and wrote a new `LoadSettings` which does the translation only.
> 

There is no need to retain `StoreCommandParameters`.  Change `LoadSettings` to avoid use of a handle and iterate over the config file.  Well you did that already.  But also, do not change the convention previously used to name the keys associated with the values.

> But I could also revert it all, i.e. just have the original `LoadSettings` which translates and sets to the handle, and then I could use it as you suggest. No problem for me, the code would also be simpler. I would only have the concern that the semantics of `LoadSettings` would then vary across effect families.

Maybe what you misunderstand is that `LoadParameters`, which is used by `LoadUserPreset`, is also intended as a translator only.  Side effect on a scratch handle for the interpretation of chunks is unavoidable as part of interpretation.  But on other paths, it is not important to keep whatever side effects used to happen.

 



> I am examining the latest force-push. The commit ""added MakeSettings"" does not build because it uses `GetSettings` which is not defined. The next commit repairs that.

ok, now fixed > Still incomplete in the commit that defines `TransferDataToWindow`: remove `RefreshParameters` from `LoadUserPreset` `DoLoadFactoryPreset` and `ImportPresets`

right, done > Maybe what you misunderstand is that `LoadParameters`, which is used by `LoadUserPreset`, is also intended as a translator only. 

I surely misunderstood that! I have now fixed things in this way. Regarding the incompatibility with keys like ""parm_%d"": 
that kind of key is used when for some reason the handle will not be able to return proper parameter names (e.g. ""gain"").
I now fixed this by having this code 

```
wxString name = GetString(effGetParamName, i);
if (name.empty())
{
   name.Printf(wxT(""parm_%d""), i);
}
```
both in ::ForEachParameter and in ::LoadSettings. Commit 7c469cdd604c3b44a6b8252ce8562da7d9689519 had almost acceptable versions of `SaveSettings` and `LoadSettings` -- except for the problem of preserving the formatting of the keys.  `SaveSettings` from that commit can now be used verbatim, because the change in `ForEachParameter` corrected the keys.
 > Commit [7c469cd](https://github.com/audacity/audacity/commit/7c469cdd604c3b44a6b8252ce8562da7d9689519) had almost acceptable versions of `SaveSettings` and `LoadSettings` -- except for the problem of preserving the formatting of the keys. `SaveSettings` from that commit can now be used verbatim, because the change in `ForEachParameter` corrected the keys.

I modified commit 6.2 in the way I think you specified - basically `SaveSettings` and `LoadSettings` are the same as in the commit you pointed out, belonging to the previous iteration. The switching of the key to the parm_%d in case the handle can not provide alphabetic names for keys is now done exclusively in `ForEachParameter` - I guess this is right?

btw, you said:
> don't do the side effects of `constCallDispatcher` or `callSetParameter`

But in that commit, neither LoadSettings or SaveSettings were calling them? or maybe I am missing something
 > > Commit [7c469cd](https://github.com/audacity/audacity/commit/7c469cdd604c3b44a6b8252ce8562da7d9689519) had almost acceptable versions of `SaveSettings` and `LoadSettings` -- except for the problem of preserving the formatting of the keys. `SaveSettings` from that commit can now be used verbatim, because the change in `ForEachParameter` corrected the keys.
> 
> I modified commit 6.2 in the way I think you specified - basically `SaveSettings` and `LoadSettings` are the same as in the commit you pointed out, belonging to the previous iteration. The switching of the key to the parm_%d in case the handle can not provide alphabetic names for keys is now done exclusively in `ForEachParameter` - I guess this is right?
> 
> btw, you said:
> 
> > don't do the side effects of `constCallDispatcher` or `callSetParameter`
> 
> But in that commit, neither LoadSettings or SaveSettings were calling them? or maybe I am missing something

True, the previous version did not do that.
",,"Resolves: https://github.com/audacity/audacity/issues/2970

Because of difficulties to perform an interactive rebase on the first created branch, this new branch/PR was created.

Commit messages start with a number, which references the step# in the original issue they belong to. This was done because some of the steps (3 & 6) were too complex to have them done in one commit (also to make reviewing easier); but all commits starting with the same number can be easily squashed together later on.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It looked very weird that the Wrapper class, which should have nothing to do with user interface, requires a pointer to a window.

I see you did this only because `AudacityMessageBox` uses that pointer in two places to report errors.  (At least it is only two places, at the third commit.)

So I say, just pass nullptr.  The message box will still appear, as it always does, as a window with its own frame, but wxWidgets will not consider it to have a parent and might simply position it a bit differently.

Then keep mParent out of this wrapper.




 I notice there is an assignment of this member in the constructor of VSTEffect that is no longer necessary.

I suggest, you make a new preliminary commit, and rebase your branch onto that:

First rewrite the constructor of VSTEffect to eliminate as many assignments to members, as possible.  Instead, use in-class initializations where possible, otherwise member initializers in the constructor.


 This changes behavior from `GetSymbol`.  It will cause the wrong thing to happen, in case Audacity 3.1 saved an XML file and 3.2 reloads it.  There will be an unnecesary dialog asking to continue.

Instead, lower the `mName` member into the wrapper so `GetSymbol` can be defined in just the same way.


 You wrote the functions to set chunks so that you avoided duplications:  the old functions invoke the `B` functions for common steps.

Do likewise for setting the parameter.  Make the return from this function boolean if necessary to enable that rewrite.
 ok, done ok, done ok, done I do not understand: I already wrote ::callSetParameterB. Do you mean, I should have it return a boolean and check the value where called?

The reason to write the ""B"" versions of callSetChunk, callSetParameter, callSetProgram was this: they are needed by other methods in the Wrapper, but the original versions also loop on mSlaves, and I guess (please confirm) that the Wrapper should not be aware of them. The ""B"" versions are basically copies of the originals, with the loop on mSlaves removed.  This first commit is good.

Do you know that you could even write
```
unsigned mBlockSize{ mUserBlockSize };
```

The in-class initializer doesn't have to be a constant expression, and it can refer to earlier declared members.  That would more exactly preserve the meaning of the assignment

```
mBlockSize = mUserBlockSize = 8192;
```

 Now that mName is in the wrapper, I suggest:
- make this function non-inline
- simply call it `GetSymbol`
- Redefine `VSTEffect::GetSymbol` (a virtual function override) as the call-through to `VSTEffectWrapper::GetSymbol`

 I mean, I see repetition of the use of `effCanBeAutomated`.  A small rewrite eliminates that repetition.  `callSetParameter` can be defined in terms of `callSetParameterB` meaning that it is not coincidental that the same constant is reused.  The ""B"" function does not always set the parameter, and by returning a boolean, it tells the other function whether to continue setting parameters in slaves.

 This call isn't needed because `mVSTVersion` was assigned in `VSTEffect::Load` and is a member now of the `VSTEffectWrapper` base, and I presume the answer returned by the plug-in to this query will never change.

In fact, it may be that we discover, as we take this transformation further, that most of the things assigned in `Load` will need to move down into the wrapper, and so perhaps the entire function will also move into it.
 It may help, in the commit comment, to explain that `StoreSettings` adapts the logic in `LoadParameters` and `LoadSettings` but using in-memory settings instead of a config file as the source of values.
 This visit of parameters has these differences from `VSTEffect::LoadSettings`:
- The bracketing dispatches of `effBeginSetProgram` and `effEndSetProgram` are not done
- The bounds check on `value` between +/- 1 is not done

Is it important to preserve the bounds check?  I honestly don't know.  Preserve it, as real code or as commented out, and experiment may later decide if we really need it.

`LoadSettings` as I now see, and as you probably saw too, was doing `callSetParameter` on self and then again on slaves:  which was unnecessary, because the `callSetParameter` call on self was already recursive.

The begin and end of set program were only done on master.  Was it right or wrong not to do it to on slaves?  I don't know.  But let's assume, it can be done on every handle for every instance, and the calls should therefore be part of `StoreSettings` here.

In practice, multiple slaves will happen only when you use the old non-modal dialog from the Effects menu, which will eventually not be part of 3.2 anyway.  But we may in future want to reimplement something like it for a master bus of effects.





 Comment in the commit that `FetchSettings` adapts `SaveSettings` and `SaveParameters` but storing in-memory in EffectSettings, not in a config file.
 The commit that introduces this function should also call `RefreshParameters()` which is a step done in the existing functions that load user and factory presets and that import.

Maybe you did this in a later commit I haven't reviewed yet?  But you can do it in this early commit to make the function complete.
 This `MakeSettings` is good.  To be very fussy about the correct logical sequence of commits, I would say do this one before defining `TransferDataToWindow`, just so that the lines

```
   if (!StoreSettings(GetSettings(settings)))
      return false;
```

... are sure NOT to return false because `mSettings` has not yet been initialized.
 Now I have looked at the whole PR and I see this wasn't done.  The task breakdown said

""Define TransferDataToWindow (to become UpdateUI of a validator later), calling StoreSettings; remove parts of LoadSettings that duplicate this""

So, to make that step complete, add the `RefreshParameters()` call and also remove the call in three places, all in the same commit.
 The commit that inserts calls to `FetchSettings` should also do it in `LoadFactoryPreset` This new definition of `LoadSettings` should set up all members of `vstSettings`, not just the parameter map.

Clear the chunk and set the id, version, etc. from the wrapper.
 In the last commit, which adds two calls to `StoreSettings`, check the return value and return early if it is false.  In `SaveParameters`, do that before any other steps changing the config file.
 In the commit that adds these lines, ""Rewrite SaveParameters not using the handles"" -- you store values from vstSettings and not from mAeffect, which is what I meant.  Hiding all mention of mAeffect in this function isn't what I meant.  It's not wrong to factor out `SupportsChunk`, but not what I meant.

But the last commit in the sequence (after this) should also, as I said, do `StoreSettings` first, anyway, which includes the check that the values in the two agree. The commit adding these two functions, ""Rewrite LoadParameters not using the handles"", is just hiding mention of mAeffect in LoadParameters while not removing dependency on its state.  It's not what I meant.

However, I must read and understand all that you commented in ""Rewritten LoadSettings / SaveSettings"".

Actually eliminating use of mAEffect might not be possible, as I think you are saying:  instead, this handle is really needed as a ""scratch"" as with AudioUnits.
 The commit that rewrites this function can also make it and `StoreCommandParameters` const, and that will allow you to remove `DoLoadUserPreset` and a `const_cast`
 Okay, commit 6.2, the most difficult one:

I'm not convinced by what you write in the commit comment, about the need to keep the old functions.  And, the new LoadSettings/SaveSettings are not using the same ""parm_%d"" convention to name the keys (sometimes), which means it might break compatibility with old config files.

`StoreCommandParameters` is used only by `LoadParameters`.  If it takes the ""chunk"" alternative, then it is using the mAEffect handle, as a ""scratch"" from which it then fetches settings.  That's ok.

If that function does not take the early exit path loaing a chunk -- then instead a string value for key ""Parameters"" is loaded, and reinterpreted as a config file of key-value pairs.  I don't see why this could not be given to the new `LoadSettings` directly.  In which case, you do not rely on a ""scratch"" handle and so should NOT use `FetchSettings`.

`FetchCommandParameters` is used only by `SaveParameters`.  That function first calls `StoreSettings` to change the scratch handle state, and then maybe exits early if chunks are supported.  But if they are not, then again, I don't understand why the direct translation of settings to key-value pairs in `eap` can't be done.

 I understand now, thanks, done What you suggest would look better - done, although I had to use a static cast:

`unsigned mBlockSize{ static_cast<unsigned>(mUserBlockSize) };` ok, done Alright, done. And yes, probably a good part if not all of ::Load will need to move to the wrapper. ok, done"
3228,2022-07-13T18:38:27Z,2022-07-14T11:11:14Z,Paul-Licameli,1,4,4,332,2,2,1,[],59119.0,1,59570.0,0,0,0,0,68393940.623087,,1,4,0,False,['Paul-Licameli'],"I will push again with suggested naming changes and merge.

But an alternative to naming might be ``[[nodiscard]]``. I think the purpose of that is to emphasize a non-void return from a function name that might wrongly suggest a void-returning, mutative action.  Just as the standard vector `empty` now has the attribute.

But then again, we should first clean up compilation warnings until they are very few, and the few that then result from code changes get more attention.
I find Buffers class to be very complicated with very unclear semantics. However I do not see any reasonable objection to this PR",I find Buffers class to be very complicated with very unclear semantics. However I do not see any reasonable objection to this PR,"Next piece of refactorying to support rendering

Encapsulate the management of sample buffers in PerTrackEffect.

Add some assertions and contracts and proofs of correctness or else
check bounds

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Do we care about zero initialization of buffers here? Probably not. I am really confused by the naming. Probably `GetReadPosition`? Same issue with naming Zero-filling is done explicitly in a few places where needed by `ClearBuffer`.  Not the responsibility of `Reinit`.
"
3133,2022-06-24T08:47:35Z,2022-07-14T11:07:07Z,ksoze95,3,7,7,1024,17,2,1,[],198.0,1,1736382.0,0,0,0,0,68394181.607072,,0,7,0,False,"['Paul-Licameli', 'DavidBailes', 'ksoze95']","The Mixer Extra menu is currently broken with these code changes.  Working on fixing this before moving this PR out of draft. It currently isn't possible to tab to the slider.
Also, note my comment on the original issue: https://github.com/audacity/audacity/issues/2779#issuecomment-1093835971
I think it would work best for screen readers if the meter panel contains two controls, each of which are focusable: a recording/playback icon which acts as a button, and a slider. The alternative, that the meter panel remains focusable (and is read by screen readers as a button), and contains a focusable slider isn't going to make sense for screen readers, because a button containing a slider is not a normal relationship between these two controls.
I think that your current scheme is the alternative I've described. If I was able to tab to the slider, I could check out how this is read by the various screen readers on Windows, in the current arrangement, but I'm fairly certain that there will be problems with this. That completes my review.
",,"Resolves: #2779 
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Misspelled “without” in the commit comment Done.  Corrected spelling mistake. There are MeterPanels also in the Mixer board, which you can open using the View menu.  It makes a control for each audio track, and a meter panel with isInput = false.

Did you test this too?

I don't see unintended changes in the Mixer board yet resulting from this change.  No slider is drawn over that meter.  I don't understand why not, but it is as it should be.


 Now I see it.  All the painting of the slider is skipped for mixer tracks.

Maybe then mSlider should remain null in case of mixer board clusters.  Avoid making a useless LWSlider.


 It is possible to pass this function an incorrect toolBarId and apply `static_cast` unsafely.

Better to change the argument to a boolean choosing play or record, and confine the use of the toolBarID constants to inside this function.
 This use of reference wrappers is nice.

However this function exposes a vector of non-const reference (wrappers) to toolbars and only makes the returned vector const.

Not your intention I think:  so I think you must define this return type:

```
using ConstMeterToolBars = std::vector< std::reference_wrapper<Const MeterToolBar> >;
```

... and not call through to the other function.
 However, you don't even use the const overload, I think
"
3217,2022-07-12T10:07:32Z,2022-07-12T18:04:41Z,ksoze95,1,2,1,16,3,2,1,[],4474.0,1,28649.0,0,0,0,0,68541918.184525,,1,1,0,False,['Tantacrul'],Seems to be working fine for me. Thanks @ksoze95 !,,"Resolves: #3215 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What this line is for? I was not sure if it was needed as mEffectsWindows is passed to mContainerWindow's SplitVertically in both ShowEffectsPanel and HideEffectsPanel.

I will removed the lock."
3219,2022-07-12T11:02:27Z,2022-07-12T13:24:55Z,crsib,0,0,1,2,1,1,1,[],,1,8662.0,0,0,0,0,68558610.730127,,0,1,1,False,[],,,"LV2Instance was always created as disabled, while the rest of the code expected otherwise

Resolves:  #3218 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3124,2022-06-21T17:12:54Z,2022-07-08T13:49:54Z,crsib,1,3,2,81,2,2,1,[],1450471.0,2,1733073.0,0,0,0,0,68626373.949746,,0,2,1,False,['crsib'],"`.sh` file is a helper script to build universal builds locally, which is not a most straightforward processMostly it's ""I trust you"" for the .sh file.  I don't understand why it is a related part of this bug fix.

I last disturbed those lines in Languages.cpp, but so long ago!  New changes look all right and do preserve the prior fix I commented about -- trying again as needed without country code.
","Mostly it's ""I trust you"" for the .sh file.  I don't understand why it is a related part of this bug fix.

I last disturbed those lines in Languages.cpp, but so long ago!  New changes look all right and do preserve the prior fix I commented about -- trying again as needed without country code.
","Resolves: #2493 

It was observed, that for some undiscovered reason macOS can different `System Default` languages based  on application alone.

This issue affects only the builds made by `audacity/audacity` CI. Comparing the builds shows, that there is no metadata difference. Three binaries are different, but it seems that the reasons is that Audacity build is not reproducible.

As a workaround the system preferences are read, which seem to provide a consistent value. Apple used a similar approach internally, but they claim that the performance is not good enough for tight loops. This is clearly not the case for Audacity

<img width=""780"" alt=""Screenshot 2022-06-22 at 17 54 07"" src=""https://user-images.githubusercontent.com/2660628/175278835-9b938432-e9dd-4200-8bcb-ce0026f80946.png"">
<img width=""780"" alt=""Screenshot 2022-06-22 at 17 53 53"" src=""https://user-images.githubusercontent.com/2660628/175278842-6c18134a-9e1e-47c4-9c97-faec2fd7d692.png"">

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:

- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","In the commit comment, were you beginning to write some more explanation?
 Why was the `-DIMAGE_COMPILER_EXECUTABLE` not given on line 11 too?
 Line 11 builds image-compiler, line 14 does not"
3198,2022-07-07T20:01:42Z,2022-07-11T11:15:31Z,crsib,0,0,2,73,2,1,1,[],,1,314032.0,0,0,0,0,68652887.237007,,0,2,0,False,[],,,"Resolves: #3196 

Fixes the way Genre tag is handled 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine wihout known undesirable changes of behavior
",
3178,2022-07-05T16:39:09Z,2022-07-08T15:14:07Z,ksoze95,1,9,2,39,1,3,1,[],210169.0,1,254103.0,1,0,0,0,68897770.170082,,1,2,0,False,['Paul-Licameli'],"That's all!
",,"Resolves: #3076

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","@Paul-Licameli is it necessary to update po files each time new msgid added or removed from the sources? Probably not.  Shall I drop the commit which updated the po files? The second commit in this sequence is quite unnecessary!  Remove it.

As part of the release process, we will automatically update the .po files using the GNU gettext family of tools (msgfmt, etc.)
 The first commit is simple but I think ""..."" is not supposed to be omitted from the new texts.  See the conversation at the Issue page.
 No objections to the third commit.
 Commit dropped. Commit dropped. I have reintroduced the ""..."" I jumped the gun.  I have now removed ""..."" due to @LWinterberg comment on the issue page."
3158,2022-06-28T10:42:40Z,2022-06-29T00:22:58Z,Paul-Licameli,0,0,8,260,2,1,1,[],,2,877157.0,0,0,0,0,68900905.660309,,0,8,0,False,[],,,"Resolves part of #2980

Begin to define the LV2Instance object.

But there is still some state that it stores in the Effect object, and before moving that out,
we must define the LV2Validator object.

Ultimately the direction of dependencies will be that the Effect depends on the Validator, and both on the Instance.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2776,2022-04-08T00:51:35Z,2022-05-04T11:54:34Z,imciner2,6,0,2,10,2,1,1,[],1599467.0,0,7910248.0,0,0,0,0,68901680.287648,,0,2,0,False,"['crsib', 'imciner2', 'VVD']","@crsib who on the dev team would be good/available to review these changes to fix the build? I'll try to do it sometime soon, @crsib thanks for merging this! Same bug during build with wxWidgets 3.2.0 (just released):
```
/tmp/work/usr/ports/audio/audacity/work/audacity-Audacity-3.1.3/src/AudacityApp.cpp:1000:80: error: field of type 'wxString' has private constructor
   { wxLANGUAGE_USER_DEFINED, wxT(""eu""), WL(0, SUBLANG_DEFAULT) wxT(""Basque""), wxLayout_LeftToRight },
                                                                               ^
/usr/local/include/wx-3.2/wx/string.h:324:3: note: declared private here
  wxString(int);
  ^
1 error generated.
```
The commit https://github.com/audacity/audacity/pull/2776/commits/efc11c4ac50ac51cd71d4dcfa84e63b11000c3f5 look like 3.1.6 specific and need adaptation for 3.2.x. Do wxCHECK_VERSION(x.y) work like "">= x.y""?
If so then the patch is correct for 3.2.
Will test now… Build and work fine with patches and with wxWidgets 3.2.0.",,"wxWidgets 3.1.6 was just released, and while updating the Fedora package it was noted that Audacity couldn't compile. Here are two patches that fix errors found during the compilation on Fedora against wx 3.1.6. More information is available in the commit message of each of them.


(downstream bug https://bugzilla.redhat.com/show_bug.cgi?id=2072823).


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3189,2022-07-06T17:42:42Z,2022-07-07T10:59:24Z,crsib,0,1,1,30,3,1,1,[],,2,155110.0,0,0,0,0,68906552.465852,,0,1,0,False,[],,,"Starting from some unknown moment FFmpeg (version 58 at least) requires returning `AVERROR_EOF` to mark the end of stream. 

In all versions FFmpeg accepted negative return values to indicate that error has occurred.

Resolves: #3185 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`wrapper->mpFile` seems to be redundant (dupicated in `Read`)
3160,2022-06-29T10:56:18Z,2022-07-08T10:49:40Z,Paul-Licameli,0,0,3,61,3,1,1,[],,0,777206.0,0,0,0,0,68913640.729926,,0,3,0,False,[],"Verified that the two problems are fixed, and code changes are understood and fine by me.","Verified that the two problems are fixed, and code changes are understood and fine by me.","Resolves: #3151
Resolves: #3186

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3197,2022-07-07T14:53:15Z,2022-07-07T21:26:18Z,ksoze95,1,0,2,13,2,1,1,[],64364.0,0,64364.0,0,0,0,0,68921066.540583,,0,2,0,False,['petersampsonaudacity'],"Testing on W10 with latest alpha master:  audacity-win-3.2.0-alpha-20220707+e7a76b9-x64-msvc2022

I confirm this is now fixed on Windows",,"Resolves: #2853 
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3191,2022-07-07T09:45:04Z,2022-07-07T11:38:39Z,Paul-Licameli,0,1,4,143,11,1,1,[],,1,6819.0,0,0,0,0,68997103.537539,,0,4,0,False,[],,,"Resolves: #2981

Last steps to complete the transformation of LV2 effects to statelessness.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",I think `dstControls.clear()` reads better and does the same
3184,2022-07-06T11:44:57Z,2022-07-07T09:43:15Z,Paul-Licameli,1,0,10,2113,7,1,1,[],10446.0,1,79102.0,0,0,0,0,69004027.845004,,0,10,0,False,['crsib'],"Please note, that Windows build is still broken!",,"Resolves: #2979

Final steps in defining the LV2Validator class.

Override EffectUIValidator methods and don't use DefaultEffectUIValidator.

Move dialog building functions, and callbacks for lv2 UIs, into LV2Validator.

Move the class to separate source files
(which end up longer than what remains in LV2Effect.* !)

Here is a dependency graph of source files:

<img width=""192"" alt=""Screen Shot 2022-07-06 at 7 49 23 AM"" src=""https://user-images.githubusercontent.com/11670369/177543708-38360b39-6147-4ee2-8b52-0d859ed3a5ee.png"">

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3182,2022-07-06T09:26:55Z,2022-07-06T13:35:42Z,Paul-Licameli,0,0,9,357,3,1,1,[],,1,14930.0,0,0,0,0,69076482.532091,,0,9,0,False,[],It is good to see that LV2 no longer relies on wxEvtHandler of the Effect,It is good to see that LV2 no longer relies on wxEvtHandler of the Effect,"All callbacks for handling wxEvents in lv2, now in the LV2Validator class

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3180,2022-07-05T21:30:01Z,2022-07-06T12:08:39Z,Paul-Licameli,0,0,4,191,21,1,1,[],,1,52721.0,0,0,0,0,69081706.58225,,1,4,0,False,[],"This PR breaks #3176, I expect that there will be quite an amount of work to fix it after it is merged","This PR breaks #3176, I expect that there will be quite an amount of work to fix it after it is merged","Some preliminaries for progress with lv2 refactoring,
making more widespread chang in other effect families.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3121,2022-06-21T09:02:41Z,2022-07-05T13:14:09Z,crsib,0,3,2,5551,35,2,1,[],,2,1261661.0,0,0,0,0,69127207.106686,,1,2,1,False,[],,,"Resolves: #2445 

This PR introduces support for FFmpeg 5.0

This release has removed several APIs Audacity has used:

### `avcodec_decode_audio4`/`avcodec_encode_audio2`

This APIs are replaced with `send`/`receive` APIs.  New APIs are universally preferred when supported. I. e. only **avcodec-55** now uses the old APIs

### Iterators for formats and codecs

Newer `_iterate` APIs are used only FFmpeg 5.0+

### AVCodecContext is removed from AVStream

`codecpar` is now used, only on FFmpeg 5.0+
 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Shouldn't it be a reference `const std::vector<const AVOutputFormatWrapper*>&`? indenting Yeah, makes total sense!"
3128,2022-06-23T11:38:59Z,2022-07-05T12:06:09Z,crsib,0,0,1,8,1,1,1,[],,1,1038433.0,0,0,0,0,69168257.510161,,1,1,0,False,[],,,"Resolves: #3119 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3171,2022-07-02T14:32:45Z,2022-07-05T11:56:14Z,Paul-Licameli,0,0,8,757,5,1,1,[],,1,249812.0,0,0,0,0,69168853.856406,,0,8,1,False,[],,,"Resolves: #2980

Last steps to make class LV2Instance independent of class Effect and put it in its own source files.

The Instance now holds all of the state proper to it.

The Effect still holds Settings, and the Instance still holds a reference to those settings.  This is
not yet the transformation to complete statelessness.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2913,2022-05-11T09:48:16Z,2022-07-04T14:41:04Z,DavidBailes,0,0,1,5,1,1,1,[],,1,4683168.0,0,0,0,0,69245367.129171,,1,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2912

Problem:
Location of focused track provided for assistive technology is incorrect - it should be roughly the same as the yellow outline.

In TrackPanelAx::GetLocation(), in the call rect.SetPosition(), in the case of a focused track the Track Panel's parent (the Main Panel) is incorrectly being used. This didn't cause a problem as the top left corner of the Track Panel and the Main panel used to be the same. However, during 3.2.0 development, a change was made so that the Main panel now includes the Timeline, and so the top left hand corners no longer coincide.

Fix:
For a focused track, don't use the Track Panel's parent in the call rect.SetPosition()

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3161,2022-06-29T11:00:49Z,2022-07-04T14:40:28Z,DavidBailes,2,0,1,2,1,1,1,[],3542.0,0,445180.0,0,0,0,0,69245402.479419,,0,1,0,False,"['Paul-Licameli', 'DavidBailes']","If it's only partial, what part is not fixed?
 > If it's only partial, what part is not fixed?

The play indicator, which is fixed in a separate PR: https://github.com/audacity/audacity/pull/3159",,"Partially Resolves: https://github.com/audacity/audacity/issues/3013

This is a partial fix for issue 3013, which also includes the play indicator not displaying correctly.

Fix:
Now that the timeline has been reparented by the main window, the size event only needs to be sent to the timeline's parent, not grandparent - no other windows are affected by the resize.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3175,2022-07-04T12:13:37Z,2022-07-04T12:45:50Z,KissDaniGH,0,0,1,1245,1,1,1,[],,0,1933.0,0,0,0,0,69252283.045541,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ ] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3174,2022-07-04T09:02:51Z,2022-07-04T09:29:43Z,crsib,0,0,2,16,1,1,1,[],,0,1612.0,0,0,0,0,69264050.06606,,0,2,0,False,[],,,"
- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3064,2022-06-13T07:55:02Z,2022-07-02T12:40:43Z,Paul-Licameli,1,2,9,436,9,1,1,[],9491.0,0,1658745.0,0,0,0,0,69425386.69279,,1,9,0,False,['petersampsonaudacity'],"Tested on W10 with @Paul-Licameli 's branch:  audacity-win-3.2.0-alpha-20220613+4f0e7cc-x64

The Effect in the Effects Stack can be changed now by clicking on an existinf effect in the stack and selecting a different one - but I only see two to choose from",,"Resolves: #3050
Resolves: #3092 

Implement the replacement of a chosen effect in the sidebar by the menu button.

Also fix minor omissions in recent UI changes.  Allow the text in the sidebar to wrap,
and update the most recent undo state for changes of power button state.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Can replace *mProject argument with project instead. Shouldn't this comment mention replacing rather than adding.
3167,2022-07-01T05:33:04Z,2022-07-02T02:37:00Z,Paul-Licameli,0,11,15,1010,11,2,1,[],,1,75839.0,1,0,0,0,69461612.363862,,0,15,0,False,[],Linux build is broken,Linux build is broken,"Another detour along the journey to lv2 statelessness...

... Don't recycle one array of stateful Features in the effect object, when making the user
interface -- instead, make an immutable, throw-away list of features each time there is 
a new dialog; and don't questionably expose a pointer to a temporary to the foreign code.

All that was actually itself just a digression, to enable the next:

Fix some hidden shared state still hiding in the mutable sample rate in the Effect object,
moving it instead into per-LV2Wrapper Options and Features.

So that eliminates one piece of shared state in LV2Instance, but it remains also to eliminate
mMaster and mPortStates from the Effect object.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Surprisingly, wxWidgets implement wxFormat family using some macro-magic, so this code seems to be safe. Do we need a full copy here because of thread safety? I don't think it's thread safe anyway. Maybe lets capture a reference? I see in the latter commit, that the list is temporary, so the question is lifted `virtual` please I understand, that it is not a goal, but C-cast? GetFeaturePointers() builds a vector of pointers, as you may recall from reviewing an earlier PR.

I could write
`const auto &features = ...`

and it would also compile, and the reviewer might not then have to pause and think about it.
 Oh for shame
 That is a cast to base class, up-cast not down-, and needed because of private inheritance of `UIHander`.  Else the up-cast is attempted inside a function of `std::optional` where there isn't access.
 As for threads, this should be done only in construction and initializations of the plug-in, or its instances, or its validators, in the main thread I wonder if this code had side effects on other thing in Audacity But I see that it is invoked in a better way now!"
3070,2022-06-14T12:20:27Z,2022-07-01T13:03:59Z,pietro68,3,29,8,422,5,2,1,[],278082.0,0,1471413.0,1,0,0,0,69510395.58761,,0,8,0,False,['Paul-Licameli'],"That's a round of review.  I understand this is still incomplete.  Two other boxes at least still to check off.
 The commit that inserts calls to `FetchSettings` should also insert one at the end of `LoadUserPreset`.

I overlooked that in earlier rounds of review.
 The latest version of the branch still has these omissions:

- The commit that introduces call to `FetchSettings` still needs a call in `LoadUserPreset`.
- The `Define MakeSettings` commit is only adding one boolen data member.  (There was a more complete commit at 3af23e931425a532e790924ab8fcd8ae936aa661 in an earlier rebasing.  Something got lost.)
",,"Resolves: https://github.com/audacity/audacity/issues/2969

After some reviews and discussions we decided that settings should not hold maps of IDs and normalized values, but rather the whole ""state"" of the processor and the controller, as created by the VST3 SDK.

This implies such large ripple effects in the code, that this new PR had to be opened.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Maybe these two lines should be switched, just to be sure that their sequence remains the same as it was in VST3Effect before, so the sequence of their destruction is the same.

Or maybe it makes not difference.
 In the first commit, the inclusion here allows you to delete the same header included in two other places and still compile.  Do that.
 This line allows two other inclusions of module.h to be removed, at the first commit.
 Remove the two uses of `std::optional::value` above and use the `*` operator instead.

It breaks the Mac build, as do certain other C++17 library functions that can throw new kinds of exceptions.  But on Mac they can't build and link unless a certain minimum version of the operating system is targeted, above our present minimum.

The difference with `*` is that is just gives undefined behavior if there is no value, not an exception.

But you have the proper null (or should I say nullopt) checks before use so it is safe.
 This inclusion at the second commit lets you remove the header in one other place.
 You didn't write this assertion -- you only move a line that existed in another file.

But read this uncommented assertion and ask, what's the proof?

The proof should ideally be deduced from a postcondition stated explicitly in a comment in class Base64.

And size_t would be a better return type for `Decode`.

 Again you add an #include and should check whether you can remove the same file elsewhere.  And you can.
 `FetchSettings` is given settings that are not assumed to be initially empty.  Be sure to assign nullopt along paths that fail to get state from the plug-in.
 `value` again twice needs to be rewritten
 `LoadSettings`, like `FetchSettings`, should make the given settings reflect exactly what is in the instance or the config file.  So, add other branches that assign nullopt when the configuration does not contain a string.
 It is documented that `SaveSettings` may assume `parms` is empty.  This is unlike `LoadSettings` which cannot assume `settings` begins empty.
 You anticipated me.  I see this now, taking the commits in sequence.  Good:  but of course rebase interactively and squash the fixes onto earlier commits before this is merged.
 The wrapper base class already hass `mEffectClassInfo` so this call and the call to `LoadPreset` can pass just one argument.
 The commit that inserts the `FetchSettings` calls is good.  It should be squashed with the earlier commit that rewrites `LoadSettings` and `SaveSettings`.  That commit isn't complete without the calls to `FetchSettings` because `SaveSettings` is assuming that the fetch was already done, and is not correct without it.
 ok, done also done done done ok, done ok, done Right, done ok, done ok, done I assume that by this you mean that in `LoadSettings `I should add `else `branches to assign nullopt in case something could not be read, as you comment later. Woops! done. ok, done The second commit in the sequence is still not buildable.

Rebase and squash the fix onto the second commit.
 Yes and I meant that the analogous is NOT needed in SaveSettings -- which would be, deleting a key/value pair from the config file.
 I interpret your comment in this way:

1) leave the assertion there, and write a comment in class Base64 that the returned value should be <= buffer.getSize()
2) have `size_t len = static_cast<size_t>( Base64::Decode(str, buffer) );` 

- or do you mean

2) rewrite Base64::Decode so that it returns a size_t instead of an int ?
"
3159,2022-06-28T13:52:08Z,2022-07-01T11:59:30Z,DavidBailes,0,0,1,2,1,1,1,[],,0,252443.0,0,0,0,0,69514264.591886,,0,1,0,False,[],,,"Partially Resolves: https://github.com/audacity/audacity/issues/3013

This is a partial fix for issue 3013, which also includes the scrub ruler not displaying correctly.

Problem:
Incorrect code which only worked when the parent of the track panel had the same top left hand corner as the track panel. Now that the timeline has been reparented, this is no longer the case.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3166,2022-06-30T17:44:26Z,2022-07-01T08:01:01Z,carlo-bramini,0,0,13,4,1,1,1,[],,0,57639.0,0,0,0,0,69522332.314519,,0,13,0,False,[],,,"Nowadays, the attribute modifier to be used for dllexport and dllimport is `__declspec()`, as it is described here:

https://docs.microsoft.com/en-us/cpp/cpp/declspec?view=msvc-170

and here we can read this statement:

![immagine](https://user-images.githubusercontent.com/30959007/176740574-108ba43e-8b98-4a0f-a937-6a870b1ffcd4.png)

So, in theory, using `_declspec()` or `__declspec()` shouldn't change the behaviour when you compile with MSVC.
However, a problem comes out when you try to build under MinGW, because it provides support for `__declspec()` but not for `_declspec()`.
According to article Q123870 from Microsoft, the compilers supporting only `_declspec()` are:

- Microsoft Visual C++, versions 1.0, 2.0, 2.1, 4.0 
- Microsoft Visual C++, 32-bit Enterprise Edition, version 5.0 
- Microsoft Visual C++, 32-bit Professional Edition, version 5.0

MSVC 1.0, 2.0, 2.1 and 4.0 are 16bit.
MSVC 5.0 is the compiler of MSDev '97 and it is just C90.

So, I don't think that it will be a trouble to do this upgrade.
After doing this tiny change, also MinGW will be able to build correctly the libraries DLLs.
MSVC has no changes after that.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2944,2022-05-17T12:55:38Z,2022-06-30T14:34:02Z,Paul-Licameli,1,0,8,1583,13,1,1,[],3331154.0,1,3807511.0,0,0,0,0,69591388.331592,,0,8,0,False,['Paul-Licameli'],"I have found a fix for the problems @pietro68 observed with the graphic EQ effect.  Please review again.
Verified that the last defect I reported was fixed (but please see my last comment on the issue); I think I understand the code and all is fine there for me.",Verified that the last defect I reported was fixed (but please see my last comment on the issue); I think I understand the code and all is fine there for me.,"Resolves: #2943

Make AudioUnit effects stateless; also some more source file splitting

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3129,2022-06-23T12:43:25Z,2022-06-29T00:21:03Z,Paul-Licameli,0,0,11,262,21,1,1,[],,1,473892.0,0,0,0,0,69728940.693631,,0,11,0,False,[],Tested all issues and code changes are ok with me.,Tested all issues and code changes are ok with me.,"Resolves: #3125 
Resolves: #2892
Resolves: #3069
Resolves: #2986
Resolves: #3095

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3157,2022-06-28T09:04:59Z,2022-06-28T09:18:46Z,crsib,0,0,1,9,1,1,1,[],,0,830.0,0,0,0,0,69783110.346937,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3005,2022-05-30T01:13:43Z,2022-06-28T12:13:31Z,Paul-Licameli,1,8,7,283,31,2,1,[],2254303.0,1,2545192.0,0,0,0,0,69772624.699321,,1,7,0,False,['Paul-Licameli'],"@crsib @pietro68 Please review again.

I rewrote the comparison of versions more properly, and I fixed an unintended change of behavior for report of realtime capability from AudioUnit effects.
Using `pluginregistryversion` as a marker for the rescan should at least be documented well somewhere on the developers Wiki. I don't have a better suggestion though.

I will be happy if serialization is done in a less hacky way, but that is not strong enough reason to block this PR I think that we have worth problems downgrading to 3.1, let alone having both versions side-by-side. But you convince me that proposed implementation makes sense to handle this specific case.","Using `pluginregistryversion` as a marker for the rescan should at least be documented well somewhere on the developers Wiki. I don't have a better suggestion though.

I will be happy if serialization is done in a less hacky way, but that is not strong enough reason to block this PR I think that we have worth problems downgrading to 3.1, let alone having both versions side-by-side. But you convince me that proposed implementation makes sense to handle this specific case.","Resolves: #2928

Bump the version number of the plugin registry config file; use that to decide when a rescan of all built-in effects is needed
at startup for changes of realtime capability of built-in effects.

This will do the right thing either upgrading to 3.2 or later (so that Reverb is considered realtime), or downgrading from a
future Audacity version, with a further changed plugin registry version, to an earlier Audacity, but not before 3.2.

The problem of downgrading from 3.2 to 3.1 may go slightly wrong -- then 3.1 will mistreate Reverb as a realtime effect with
a non-modal dialog.

An automatic fix for this further problem could be devised, but the question is whether it's worth the trouble?  If anyone
really meets this problem, they can be told to delete pluginresgistry.cfg or edit certain lines out of it.

Update:  added three commits that do make the extra effort to avoid surprises in behavior of the Reverb effect, in case of a downgrade from 3.2 back to 3.1.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Why not do it bit differently?
```
enum class RealtimeSince : unsigned {
      Never,
      Always,
      Since_3_2,
      // Newer version go here like
      // Since_3_3,
      InTheFuture // No comma because it must be the last value in the enum
};

wxString PluginDescriptor::SerializeRealtimeSupport() const
{
    return wxString::Format(wxT(""%u""), static_cast<unsigned>(mRealtimeSince));
}
 
void PluginDescriptor::DeserializeRealtimeSupport(const wxString &value)
{
    long number = 0;
    value.ToLong(&number);
    mRealtimeSince = static_cast<mEffectDefinitionInterface::RealtimeSince>(number);
}

bool EffectDefinitionInterface::SupportsRealtime() const
{ 
    const auto realTimeSupport = RealtimeSupoort();
    
    return 
        realTimeSupport != RealtimeSince::Never && 
        realTimeSupport < RealtimeSince::InTheFuture; 
}
```

In this case adding a new version is as easy as adding a new value *before* `InTheFuture` If you don't like the proposed rewrite for the `RealtimeSince` - this still can be done differently

```
static constexpr auto Since_3_2_string = ""320""
...
void PluginDescriptor::DeserializeRealtimeSupport(const wxString &value)
{
    if(value == ""1"") // Probably we need to trim the value here
       return EffectDefinitionInterface::RealtimeSince::Always;
    else if (value == Since_3_2_string)
       return EffectDefinitionInterface::RealtimeSince::Since_3_2;
    
    return EffectDefinitionInterface::RealtimeSince::Never;
}
```
 Why do we have to compare as `std::wstring`?  Probably let's drop the `wxString`? The point of all my hackery is to let a downgrade from 3.2 to 3.1 cause Reverb to be treated correctly in 3.1 as not realtime capable.  The rewrite won't work.

Maybe we should make a rule that we don't care about downgrades of more than one minor version -- which would mean that 3.3 and later might make this simplification.
 See previous:  downgrade to 3.1 would not work.
 I was doubtful that wxString comparison might have some strange locale sensitivity?

But no, I decided to be less lazy in my rewrite.  No more std:: strings.  Instead parse the numbers form the string and compare the number sequences lexicographically.  Do it right in case any of the numbers reach double digits.
 yeah
"
3156,2022-06-28T08:18:27Z,2022-06-28T09:02:43Z,crsib,0,0,1,5,1,1,1,[],,1,2660.0,0,0,0,0,69784072.878128,,0,1,0,False,[],,,"Resolves: #3154 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3139,2022-06-25T15:39:43Z,2022-06-27T09:23:24Z,carlo-bramini,0,0,12,2,1,1,1,[],,0,153744.0,0,0,0,0,69865714.525677,,0,12,0,False,[],,,"Similar to #3120, I got this error when compiling Audacity:

```
/home/Carlo/audacity/src/tracks/playabletrack/wavetrack/ui/WaveClipTrimHandle.cpp:19:10: fatal error: ../../../images/Cursors.h: No such file or directory
   19 | #include ""../../../images/Cursors.h""
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
```

Actually, it is needed to rise two more levels for reaching the point where `images/Cursors.h` is stored.
I think that there are no more issue like this one because it is possible to reach the final link command after this fix.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3148,2022-06-27T00:36:12Z,2022-06-27T14:23:28Z,Paul-Licameli,2,4,10,525,5,2,1,[],49599.0,1,113072.0,0,0,0,0,69787797.557974,,0,10,0,False,"['Paul-Licameli', 'crsib']","I will merge it, but consider the doubts I have about the zix_ring buffer.

We can reimplement this host-side inter-thread communication as we like.  It is not a necessity to do it exactly so in order to cooperate with lv2 plug-ins.


 I think that the worst case scenarion is that all the pages in use by Audacity will be locked, which is probably not that bad. But as I've mentioned earlier, I do not expect any difference if we just remove `zix_ring_mlock`",,"Next refactor: clarify what these ""atom ports"" and ""zix rings"" are all about...

... And demote all the details of that stuff into LV2Ports.cpp.

The big file LV2Effect.cpp continues to shrink.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think the lock is released when `zix_ring_free` is called on a buffer. I don't think that you have to unlock memory before freeing  And docs say that we must lock for RT processing


<html>
<body>
<!--StartFragment--><h2 class=""memtitle"" style=""transition: text-shadow 0.5s linear 0s; margin-right: 15px; padding: 8px; border-top: 1px solid rgb(168, 184, 217); border-left: 1px solid rgb(168, 184, 217); border-right: 1px solid rgb(168, 184, 217); border-top-right-radius: 4px; border-top-left-radius: 4px; margin-bottom: -1px; background-image: url(&quot;nav_f.png&quot;); background-repeat: repeat-x; background-color: rgb(226, 232, 242); line-height: 1.25; font-weight: 300; float: left; color: rgb(0, 0, 0); font-family: Roboto, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"">zix_ring_mlock()</h2><div class=""memitem"" style=""font: 400 14px / 22px Roboto, sans-serif; padding: 0px; margin-bottom: 10px; margin-right: 5px; transition: box-shadow 0.5s linear 0s; width: 2523px; display: table !important; color: rgb(0, 0, 0); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;""><div class=""memproto"" style=""font: bold 14px / 22px Roboto, sans-serif; border-top: 1px solid rgb(168, 184, 217); border-left: 1px solid rgb(168, 184, 217); border-right: 1px solid rgb(168, 184, 217); padding: 6px 0px; color: rgb(37, 53, 85); text-shadow: rgba(255, 255, 255, 0.9) 0px 1px 1px; background-color: rgb(223, 229, 241); box-shadow: rgba(0, 0, 0, 0.15) 5px 5px 5px; border-top-right-radius: 4px;"">

void zix_ring_mlock | ( | ZixRing * | ring | ) |  
-- | -- | -- | -- | -- | --


</div><div class=""memdoc"" style=""font: 400 14px / 22px Roboto, sans-serif; border-width: 0px 1px 1px; border-bottom-style: solid; border-bottom-color: rgb(168, 184, 217); border-left-style: solid; border-left-color: rgb(168, 184, 217); border-right-style: solid; border-right-color: rgb(168, 184, 217); padding: 6px 10px 2px; background-image: url(&quot;nav_g.png&quot;); background-repeat: repeat-x; background-color: rgb(255, 255, 255); border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; box-shadow: rgba(0, 0, 0, 0.15) 5px 5px 5px;""><p style=""font: 400 14px / 22px Roboto, sans-serif;"">Lock the ring data into physical memory.</p><p style=""font: 400 14px / 22px Roboto, sans-serif;"">This function is NOT thread safe or real-time safe, but it should be called after<span> </span><a class=""el"" href=""https://doxy.audacityteam.org/group__zix.html#ga5baff9d9e029c5ba2dfbf116d0d40ae8"" style=""color: rgb(61, 87, 140); font-weight: bold; text-decoration: none;"">zix_ring_new()</a><span> </span>to lock all ring memory to avoid page faults while using the ring (i.e. this function MUST be called first in order for the ring to be truly real-time safe).</p></div></div><!--EndFragment-->
</body>
</html>zix_ring_mlock()
void zix_ring_mlock	(	[ZixRing](https://doxy.audacityteam.org/group__zix.html#gae3e2c7fcac3fd13a91edda72c7176fcd) * 	ring	)	
Lock the ring data into physical memory.

This function is NOT thread safe or real-time safe, but it should be called after [zix_ring_new()](https://doxy.audacityteam.org/group__zix.html#ga5baff9d9e029c5ba2dfbf116d0d40ae8) to lock all ring memory to avoid page faults while using the ring (i.e. this function MUST be called first in order for the ring to be truly real-time safe). To be fair, I think if any pages in Audacity are swapped out we are in trouble in terms of realtime work. I do not expect any measurable difference from mlocking the region here. > I think the lock is released when `zix_ring_free` is called on a buffer. I don't think that you have to unlock memory before freeing

`man mlock` makes no mention of an interaction with `free`.  And `zix_ring_free` is simply

```
void
zix_ring_free(ZixRing* ring)
{
	free(ring->buf);
	free(ring);
}
```

So I think there can be a leak of physical pages.
"
3145,2022-06-26T14:39:32Z,2022-06-27T09:45:25Z,Paul-Licameli,0,3,9,769,9,2,1,[],,1,69489.0,0,0,0,0,69867181.126817,,0,9,0,False,[],,,"LV2Wrapper class factored from LV2Effect.cpp, and with more immutable members.

The several files in src/effects/lv2 now have this tidy dependency graph:

<img width=""179"" alt=""Screen Shot 2022-06-26 at 10 36 07 AM"" src=""https://user-images.githubusercontent.com/11670369/175819538-99866bdb-bd4f-49c9-8a85-cf21ed286232.png"">

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior

","I wonder if making the constructor private will do the trick as well Making the constructor private breaks make_shared or make_unique which have to invoke the constructor.

See guideline C.50 for an example of the trick: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-factory
 Makes sense!"
3140,2022-06-25T17:26:32Z,2022-06-25T20:00:26Z,Gootector,0,0,1,12,1,1,1,[],,0,9234.0,0,0,0,0,70003817.550914,,0,1,0,False,[],,,"Update Polish Translation from Transifex
Changes: Exporting audio commands.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2476,2022-01-25T15:28:51Z,2022-01-26T15:00:58Z,crsib,1,2,3,854,16,2,1,['Build / CI'],12305736.0,0,13085208.0,0,0,0,0,69981304.730953,,1,3,0,False,['elvey'],"I _was_ confused.  This closed #2223 _and_ has been merged but the Mac download is _still_ Intel only.   The latest beta is Intel only too (https://github.com/audacity/audacity/releases/tag/Audacity-3.1.3-beta-1)  BUT, a 3.2.0 alpha build works on my (Rosetta-free) M1 Mac.  What [is|am I] missing?  [edit: Oh \<smacks forehead\> - It's to be rolled out in 3.2; 3.1.3 isn't 3.2]

Oh, and (while it's in development) to download (the latest alpha of) Audacity 3.2.0, **follow the instructions on How to download the latest alpha builds of Audacity I put at: https://github.com/audacity/audacity/discussions/3107#discussioncomment-2999327 or better yet the new official link in the post after it.**",,"Resolves: #2223
Resolves: #2404
Resolves: #2211
Resolves: #2469
Resolves: #2211
Resolves: #2402
Resolves: #2403

---

This PR provides an alternative workflow to build Audacity. The new workflow is based on https://github.com/audacity/audacity-actions. Please, feel free to review and comment on it as well.

The new workflow fixes the following issues:

* Cross building is not possible. That is an Audacity issue, but ""older"" jobs would be cumbersome to support.
* Automating the release process is not possible.
* It is hard to add new compilers and architectures to validate the builds.
* Configuring Audacity from a different repository requires significant code repetition. However, it can be helpful to automate Conan binaries upload.

On top of that, it helps to:

* Improve the configuration time in the most common scenarios both for users and CI. Initial configuration times are drastically improved for the ""fresh"" Audacity builds, especially with the multi-config generators.
* Write cleaner and more configurable workflows.
* Configure Audacity when Conan Center is down

## Internals

* Most of the actions are rewritten in JavaScript to allow easier debugging of the edge cases.
* Single matrix job is split:
  * Matrix to build different Linux variations
  * Matrix to build different Windows variation
  * macOS is split into 3 different jobs.
* Sources tarball is now generated by the same job 

### Windows

* No more ""double"" zip for artifacts.
* Installer is built for `beta` and `release` levels.

### Linux

No significant changes, except that it is much easier to setup GCC11 on CI to verify that Audacity builds with it

### macOS

* Allows x86_64, arm64 builds
* DMG packaging is now handled by the action. CPack packaging was way too unreliable to use. At some point in December, most of the jobs failed on the packaging step.
* Only DMG is notarized; this should improve the build time for `beta` and `release` builds.
* Universal DMG is generated from the  x86_64, arm64 builds.

---

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Will the `.git*` pattern match the `.github` folder, thereby causing all its contents to be ignored? Hmm, yep, will fix that"
3088,2022-06-16T10:55:36Z,2022-06-24T14:21:01Z,RuRo,20,30,1,126,3,3,1,[],326222.0,0,703547.0,3,0,0,0,70110562.156229,,0,1,0,False,"['RuRo', 'crsib', 'imciner2', 'LWinterberg']","@LWinterberg @crsib is there anything left on my side, that is blocking this PR or are we just waiting for someone to review this? I think the main blocker for this was the weekend :) 

The review is already inside our kanban board, so crsib will look at it soon  @crsib PTAL. I've implemented the 4 XDG Base Directories. Currently, all 4 directories default back to `~/.audacity-data` if it already exists and to `GetUserDataDir` on Windows. (for backwards compatibility)

Also, I completely removed the `FileLayout_XDG` logic since it would only affect `Config` and we would still need to implement the XDG logic manually for `Cache`, `Data` and `State`, at which point there is no reason to use `GetUserConfigDir` only for `Config`.

For now, `Cache` and `State` aren't used anywhere. If you have any suggestions regarding which other old `DataDir()` calls should be replaced with `Cache`, `Config` or `State`, feel free to point them out. I am not too familiar with the various audacity `xml` files, so I don't know, which of them should go to `Config` or `Data` or `State` etc. Here are some files/directories that currently still use `DataDir()`:
- lastlog.txt
- genres.txt
- journal.txt
- journallog.txt
- EQCurves.xml
- EQDefaultCurves.xml
- EQBackup.xml
- ffmpeg_presets.xml
- Chains
- Macros
- NRP
- Plug-Ins
- Theme

I might have missed some. Oops. I don't have a Windows/Mac machine, so I missed a typo. @crsib sorry, can you approve the CI/CD again. Hmm, usually only one approval is needed. Anyway, the job is running now Instead of having to do all the path manipulation and environment variable checks manually, I think it would be better to just use the GLib functions to retrieve the appropriate directories:
* `XDG_STATE_HOME` -> `get_user_state_dir()`
* `XDG_CONFIG_HOME` -> `get_user_config_dir()`
* `XDG_CACHE_HOME` -> `get_user_cache_dir()`
* `XDG_DATA_HOME` -> `get_user_data_dir()`

These will then handle testing the environment variable for existence and forming the default path if it doesn't exist.

Also, having it keep using the old directory if it exists doesn't seem very user-friendly to me. If it does that, then documentation becomes more complicated because it has to deal with 2 possible directories, and downstream bug reports could become more complex with having to explain this. It would be better in my opinion to just do a single transition to the new directory and remove the old one. @imciner2 
> It would be better in my opinion to just do a single transition to the new directory and remove the old one.

Can you clarify, what do you mean by ""transition""? Do you suggest, that we

1) detect, if `~/.audacity-data` exists, and automatically move the files to their new locations

or

2) just ignore `~/.audacity-data` and the user must manually migrate it after updating Audacity

Option (1) would be very hard to get right, because the single `~/.audacity-data` directory must be split between the 4 XDG directories. Also, this is a (potentially) destructive and non-reversible operation (if something goes wrong, the user can't just downgrade their audacity version to get back to a working condition).

P.S. Sure, using GLib sounds reasonable, I'll try refactoring it to use GLib in a bit. Btw, these functions return `gchar`. It seems to be just a typedef of `char`, but do you know, if we can rely on that being true for all platforms/versions? @imciner2 I've refactored the code to use `glib` and `get_user_*_dir()`, but it seems that `glib` is normally not used for building `libraries/` so I had to manually add `glib` to `libraries/lib-files/CMakeLists.txt`. I am not sure, if I did that right (I just copy-pasted that line from `src/CMakeLists.txt`). Linux build has failed as well!

 > Linux build has failed as well!

Yeah. It seems that CI uses an older GLib version, that doesn't have `g_get_user_state_dir`. It seems to be only available since 2.71.1. What do you think we should do:

1) Update required GLib version
2) Remove `FileNames::StateDir` and `State` from `DirTarget`
3) Don't use GLib at all and revert to manually checking the environment variables We will not upgrade GLib version on CI any time soon, as it will break AppImage for users on older GNU/Linux versions.

Otherwise it's your call @imciner2 requested to use GLib
@crsib requested to add `State`

Please decide, which request should be reverted. :sweat_smile:
I would generally prefer to just remove the GLib dependency and revert to manual env lookup, but this is a weak preference. >I would generally prefer to just remove the GLib dependency and revert to manual env lookup,

Me too, to be fair.  If you really want to use the state directory, then more work would be needed probably. The XDG state directory was only added to the spec last year, so there may be issues with the base directories not existing on older systems, so you need to ensure the entire directory path exists, not just the Audacity subdirectory.

> We will not upgrade GLib version on CI any time soon, as it will break AppImage for users on older GNU/Linux versions.

Doesn't appimage bundle its dependencies into the image? > ... there may be issues with the base directories not existing on older systems, so you need to ensure the entire directory path exists, not just the Audacity subdirectory. ...

Currently, the code calls `FileNames::MkDir` that uses `wxFileName::Mkdir` with `wxPATH_MKDIR_FULL`
```
If the flags contain wxPATH_MKDIR_FULL flag, try to create each directory in the path and also don't return an error if the target directory already exists.
```

So that shouldn't be an issue. So, @crsib @imciner2 what's the conclusion here? Is there anything else I can do to get this PR accepted? I'll do a hopefully final round today @crsib can you approve the CI again, please. @LWinterberg can you please add RuRo to the AboutDialog?Eximining other uses of `DataDir` it can be observed, that some cases need to use `ConfigDir` and some  the state dir (which is not introduced). For example, I feel that `ffmpeg_presets.xml` is a config file, not data file. This is not critical, however.

What is more important, it seems that `ConfigDir` and `DataDir` are sharing large amount of code.  

I think we should have some internal function like this

```
enum class DirTarget
{
  Config,
  Data,
  State
};

wxString GetUserDir(DirTarget target);
``` Glib is included and used unconditionally which is definitely a blocker. Some other issues as well. A small suggested rewrite :-)","Eximining other uses of `DataDir` it can be observed, that some cases need to use `ConfigDir` and some  the state dir (which is not introduced). For example, I feel that `ffmpeg_presets.xml` is a config file, not data file. This is not critical, however.

What is more important, it seems that `ConfigDir` and `DataDir` are sharing large amount of code.  

I think we should have some internal function like this

```
enum class DirTarget
{
  Config,
  Data,
  State
};

wxString GetUserDir(DirTarget target);
``` Glib is included and used unconditionally which is definitely a blocker. Some other issues as well. A small suggested rewrite :-)","This PR is an updated version of #831 which itself is an updated version of #632

Fixes #453 and resolves: https://bugzilla.audacityteam.org/show_bug.cgi?id=2201

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Probably it should go to `#if defined(__WXGTK__)` as well I think we could leave ""Settings folder"" here. What do you think, @Paul-Licameli? According to the docs it seems that this code could be rewritten with simply `wxString configDir(wxStandardPaths::Get().GetUserDataDir())`

Or at least `AUDACITY_NAME` should be used Will do. Okay. ~I am not sure, if I follow? `GetUserDataDir()` will return `~/.local/share`, not `~/.config`.~ +1 on using `AUDACITY_NAME` instead of a hardcoded string.

Disregard the last comment. I missed that this block is only executed when `__WXGTK__` is not defined. Docs are confusing: `Only use this method if you have a single configuration file to put in this directory, otherwise [GetUserDataDir()](https://docs.wxwidgets.org/3.1/classwx_standard_paths.html#a5b9d1b1addc3e4ce30ccb3817cbbe19b) is more appropriate as the latter adds appinfo to the path, unlike this function.` https://docs.wxwidgets.org/3.1/classwx_standard_paths.html#a0561d70f7da648e10b25bf9679309da3 I agree, that the docs are confusing. I am currently rewriting the implementation based on your `enum DirTarget` idea.

Actually the `wxwidgets` `GetUserWhateverDir` methods don't map to corresponding `XDG_WHATEVER_HOME` directories, so I decided to just implement the correct XDG Base Directory logic for unix and keep the windows case exactly as it currently is.

More info later. Btw, are we sure that `__WXGTK__` is the correct preprocessor macro to distinguish unix? I just kept it from the original PR, but I am not 100% sure. > are we sure that __WXGTK__ 

We use it for now, at least, so it's good to go! Looks like glib is included unconditionally. Let's use c-assert. We are moving away from wxASSERT I think it is better to return `gDataDir` or at least to throw `AudacityException` of some kind. Not `abort` for sure. Ditto You return non const reference from gTargetDir, but here C++ deduce the type as `FilePath`. Is is desired? Looks like you want overwrite the value, so you need `auto& dir = gTargetDir(target);` I think we can do something like

```
namespace
{
auto GetOldUserDataDir()
{
    static const auto dir = wxFileName::GetHomeDir() + wxT(""/.audacity-data"");
    return dir;
}

auto OldUserDataDirExists()
{
    static const auto exists = wxDirExists(GetOldUserDataDir());
    return exists;
}
}
```

This will simplify code below I think we can have an array here by adding `Count` to  `DirTarget`:

```
enum class DirTarget
{
    Cache,
    Config,
    Data,
    State,

     Count
};

wxString directories[size_t(DirTarget::Count)];
```
 (Sorry for the formatting, GitHub aint a good text editor xD) Can be done as
```
struct XDGDirConfig final
{
   wxString envName;
   wxString defaultDir;
};

XDGDirConfig xdgConfig[] = {
  { L""XDG_CACHE_HOME"", L""/.cache"" },
...
};

static_assert(sizeof(xdgConfig) / sizeof(xdgConfig[0] == size_t(DirTarget::Count)

wxString GetXDGDir(DirTarget target)
{
   const auto& dirConfig = xdgConfig[size_t(target)];
 
   wxString dir;
   // see if the XDG_*_HOME env var is defined. if it is, use its value.
   // if it isn't, use the default XDG-specified value.
   if ( !wxGetEnv(dirConfig.envName, &dir) || dir.empty() )
        dir = wxFileName::GetHomeDir() +  dirConfig.defaultDir;

  return dir;
}
```

This way we force the compiler to do all the checks necessary. Given that the enum is private, there is not much need left for any runtime checks. Let's name it `GetUserTargetDir` for consistency please! This becomes `auto& dir = directories[size_t(target)];`
 This goes away `if (OldUserDataDirExists())...` Let's make all 4 functions to be const!  Actually, I think I'll just extract all the XDG-specific logic into a separate function and then just inline these 2 functions into it. Makes sense. Would `_targetCount` be an acceptable name? I would like to somehow distinguish that `Count` is a sentinel, not a valid Target. How about
```c++
using XDGDirConfig = std::tuple<...>;
```
Also I think the `xdgConfig` array should be `const`. std::pair would do too, but I prefer descriptive names :-) Works for me What do you mean? This is a namespace, not a class."
3134,2022-06-24T12:08:09Z,2022-06-24T13:34:37Z,Paul-Licameli,1,2,8,572,43,2,1,[],5126.0,1,5191.0,0,0,0,0,70113365.714546,,1,8,0,False,['Paul-Licameli'],"The next step in LV2 refactoring led to a long digression into other effects.

The EffectInstance abstract class had a virtual function for change of sample
rate, but whether it was really properly done for Ladspa and LV2 effects was
doubtful.

This transformation eliminates the need for that virtual function and ultimately
allows some simplifications of lv2 effect support.
",,"The next step in LV2 refactoring led to a long digression into other effects.

The EffectInstance abstract class had a virtual function for change of sample
rate, but whether it was really properly done for Ladspa and LV2 effects was
doubtful.

This transformation eliminates the need for that virtual function and ultimately
allows some simplifications of lv2 effect support.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I always wondered why we use double for sample rate. I've never seen non integer rates The AudioUnit library uses double, who knows why.
"
3127,2022-06-23T11:38:10Z,2022-06-24T09:34:37Z,crsib,0,0,1,1,1,1,1,[],,1,78991.0,0,0,0,0,70127764.719337,,0,1,1,False,[],,,"Resolves: #3117 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2940,2022-05-16T13:01:12Z,2022-06-23T13:56:59Z,Paul-Licameli,16,4,5,328,3,2,1,[],846906.0,1,3286551.0,0,0,0,0,70198424.457334,,0,5,0,False,"['pietro68', 'Paul-Licameli']","I tested it and ran into an assertion. Generate a noise track, instantiate an AUGraphicEQ, select the track and click apply, this happens:

<img width=""838"" alt=""Screenshot 2022-05-26 at 10 10 46"" src=""https://user-images.githubusercontent.com/16491307/170447614-c0c4b811-4ec8-40a7-8ed5-961a6ff76a0c.png"">

 The problem was that my changes did not preserve the behavior of SetBlockSize.   Please review one new commit at the end of the rebased branch.  Previous commits have not changed.

 And one more small commit.  What was an assertion, should not be an assertion.  It's not provable.  The error should instead be propagated.
 I verified the problem I reported above, does not happen anymore.

However, I noticed another one - please try the following:

1) new project, generate noise in mono track
2) instantiate a AUGraphicEQ, select 10 bands config, bring the 1khz band to full down (-20 dB)
3) start play
4) you will hear that the white noise is unchanged. But as soon as you give a slight nudge to the 1khz slider, the effect will be heard
5) if you press stop and repeat from (3), you will see it keeps happening

Honestly I do not know if this is a regression, compared to the previous step - it might have happened also there. > I verified the problem I reported above, does not happen anymore.
> 
> However, I noticed another one - please try the following:
> 
> 1. new project, generate noise in mono track
> 2. instantiate a AUGraphicEQ, select 10 bands config, bring the 1khz band to full down (-20 dB)
> 3. start play
> 4. you will hear that the white noise is unchanged. But as soon as you give a slight nudge to the 1khz slider, the effect will be heard
> 5. if you press stop and repeat from (3), you will see it keeps happening
> 
> Honestly I do not know if this is a regression, compared to the previous step - it might have happened also there.

Does this same behavior happen in current master?  Then this does not indicate a bug in this pull request, but some other general bug requiring study and fix.
 > Does this same behavior happen in current master? Then this does not indicate a bug in this pull request, but some other general bug requiring study and fix.

EDIT:
* this behavior happens in master, but since a previous commit, so this PR introduced no regression. Details at https://github.com/audacity/audacity/issues/3012

* at the moment this erratic behavior can not be tested, because in the meantime a rebase happened, bringing in another problem which prevents testing AUs in realtime at all. Details at https://github.com/audacity/audacity/issues/3011
 (comment superseded by a previous edit  - please ignore)

I found the cause of the problem reported above, it can be tracked to a specific commit on master `8e51ac768` - issued opened at https://github.com/audacity/audacity/issues/3011 However, you have also identified issue #3012 which does indicate an unintended consequence of previous AudioUnit refactorings.  I think I need to understand that, fix it, and rebase this PR onto that fix.

When I fix it, it might also imply another checkbox for the analogous work in VST and VST3.
 I tested the head of this branch (1ee092f3f) and it is still not possible to press the play button in the main transport panel; this also means that I can not test the bug about forgotten slider positions.

What are the last 4 commits supposed to fix?  
> I tested the head of this branch ([1ee092f](https://github.com/audacity/audacity/commit/1ee092f3fa16f4fe82d9c554291b1d0c6aa6fdad)) and it is still not possible to press the play button in the main transport panel; this also means that I can not test the bug about forgotten slider positions.
> 
> What are the last 4 commits supposed to fix?

This branch was not yet rebased onto commit 27ad8e9833788fdc9e8d9f3438488d756096e66b which is why you could not test it.

Now I have rebased it.  Please satisfy yourself with testing.
 > What are the last 4 commits supposed to fix?

I don't understand the question.  The last 4 are the only 4.  The third does most of the work of defining the Instance class, and the first does a necessary step before that, which moves a bit of code that doesn't belong properly to the instance.

The second commit is just a bit of stylistic simplification in some of the related code, and the fourth corrects a misuse of assertion that should instead an error return path.  I came across that incidentally in my own testing, but I forget how.


 > I don't understand the question. The last 4 are the only 4

Pardon me, I was a bit confused yesterday by all this testing on different branches.

I tested the branch head `98236d27c` and I found a regression, compared to the start of the branch at `07ed40e50` :

Generate some noise, select some region of it, instantiate an AUGraphicEQ, 10 bands, bring all the way down bands from 1Khz onwards, click apply. Expected: the selected region should become much lower in volume Observed: the selected region stays unaffected.  > > I don't understand the question. The last 4 are the only 4
> 
> Pardon me, I was a bit confused yesterday by all this testing on different branches.
> 
> I tested the branch head `98236d27c` and I found a regression, compared to the start of the branch at `07ed40e50` :
> 
> Generate some noise, select some region of it, instantiate an AUGraphicEQ, 10 bands, bring all the way down bands from 1Khz onwards, click apply. Expected: the selected region should become much lower in volume Observed: the selected region stays unaffected.

Did you attempt any debugging beyond that?

I might begin with a breakpoint in AudioUnitInstance::ProcessBlock
 Never mind, I think I understand now
 @pietro68 Review once more!

The fix for this was smaller than I thought it would be, and specific only to AudioUnit effects, not requiring anything for other effects that are now stateless.

But other effect families may need to make the analogous step.

See what happens to the function ProcessInitialize().
 I tested `444324f `- the problem I observed when using the effect destructively was solved, but I noted a regression not present in the base of the branch `d18bf6b` which is: when using AGraphicEQ in realtime, changes to the sliders are not applied. One must stop and restart play to hear the changes.

EDIT
Changes are understood and fine for me; the two problems I reported above, came in from other merges. When testing this PR was still possible (because #3011 had yet to happen) I could observe no regressions, so I would say this PR could be merged. I verified that all bugs previously reported by me on the parent issue were solved.

I understand the code; I only left a couple of comments for a later discussion, they are not really request for changes in this PR.","EDIT
Changes are understood and fine for me; the two problems I reported above, came in from other merges. When testing this PR was still possible (because #3011 had yet to happen) I could observe no regressions, so I would say this PR could be merged. I verified that all bugs previously reported by me on the parent issue were solved.

I understand the code; I only left a couple of comments for a later discussion, they are not really request for changes in this PR.","Resolves: #2939
Partly resolves: #3069

Define the Instance class for AudioUnit effects.

Incidentally, ouput monitoring as with AUDymamicProcessing works again in the non-modal dialog (ALTHOUGH, it is actually reflecting only the first track, not the mix).

However, I anticipate that after full statelessness, and use of such effects in the per-track effect stacks -- there will remain other problems with slow rate of update.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I am a bit surprised to see that an Instance can have slaves. I thought the main point of having instances was to replace the slaves in the effect, externalizing them - so that what was once a slave, would now be an instance (and the first instance would be the ""master"")  maybe I am missing something here. This is more about the framework than about this PR, anyway: I think the passed EffectSettings reference should be const; unless in principle the settings be changed by the initialization and the framework would want to know about these changes, but I can not think of a case? I thought earlier we would need to externalize spaces as objects but decided against it.

Wahwah and Reverb have slaves implemented differently, not as occurrences of the instance class.

It doesn’t matter.  RealtimeAddProcessor and Process and Finalize are sufficient abstract interface on just one object. Ladspa and Lv2 have the notion of an output control port that the instance may change during processing.  So parts of EffectSettings may in fact be modifiable, and the changes settings in general need to be copied back to main thread.

Remember that: it will be relevant to other bug fixes soon."
3075,2022-06-14T18:27:29Z,2022-06-23T13:45:09Z,Paul-Licameli,2,0,11,470,25,1,1,[],58777.0,1,760670.0,0,0,0,0,70199128.811558,,0,11,0,False,"['petersampsonaudacity', 'pietro68']","### #3072
Testing #3072 on W10 with @Paul-Licameli 's branch build ""Sidebar bugs"": https://github.com/audacity/audacity/actions/runs/2497329369

I no longer get a crash - so PR #3075 fixes this - in Paul's branch

### #3073
Testing #3073 on W10 with @Paul-Licameli 's branch build ""Sidebar bugs"":  https://github.com/audacity/audacity/actions/runs/2497329369

This now works properly - so PR #3075 fixes this - in Paul's branch

### #3074
Testing # 3704 on W10 with @Paul-Licameli 's branch build ""Sidebar bugs"": https://github.com/audacity/audacity/actions/runs/2497329369

This now works properly - so PR #3075 fixes this - in Paul's branch I tested this for #2954 and I confirm the fix works.Code changes are ok for me + I verified all 5 mentioned issues are fixed.",Code changes are ok for me + I verified all 5 mentioned issues are fixed.,"Resolves: #3072
Resolves: #3073
Resolves: #3074
Resolves: #3123
Resolves: #2954

Fix a crash and a deadlock, both involving recent changes in RealtimeEffectState::Access, introduced at
ecc8de80

Fix inability make the sidebar narrower than the un-wrapped text message

Fix long lag in response to adjustment of sliders during preview of realtime effect

Fix initial enabled status of effects in the stack

Prepare to fix output metering by associating the effect dialog with the correct instance

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3122,2022-06-21T11:28:26Z,2022-06-21T21:00:01Z,Paul-Licameli,2,0,9,706,7,1,1,[],9113.0,1,34351.0,0,0,0,0,70345790.844965,,1,9,0,False,"['crsib', 'Paul-Licameli']","@Paul-Licameli build needs to be fixed first, though! I fixed the build errors, and rebased.
",,"Next steps in refactoring lv2.

Separate other state, besides the EffectSettings, into other structures.
Gather initialization details into constructors.  Move all that into
LV2Ports.cpp.

Later the structures will need to belong to the Instance and Validator
objects, moving out of the stateless Effect object.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3097,2022-06-17T10:28:26Z,2022-06-20T16:40:18Z,crsib,1,6,1,118,2,3,1,[],2088.0,1,374186.0,1,0,0,0,70355158.059785,,0,1,0,False,['Paul-Licameli'],"Otherwise this looks good and I approve informally.

But I want to be sure @ksoze95 has also read this and understood.
",,"Fixes part of: #2727

`FindFFmpegLibs` created nested setting transactions when invoked from the Preferences dialog.  This case seems to be a perfect example where nesting SettingTransaction (and SettingScope) is needed.

This PR allows to nest SettingScope.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Why bother with `thread_local`?

We only need this now for the main thread, and if we ever really wanted to make it work correctly with multiple threads, there would be more work to make it behave right, like checking for the disjointness of the sets of settings objects updated by concurrent scopes, making commit fail otherwise for the loser of the race, writing uses of the transaction scope to detect failure and retry, etc.


 There isn't even any protection against races to update a single Settings object even without this ""transaction"" system.

So really then, there should be a comment in the header that transations (and in fact all writes to settings) are intended for main thread only.  UB if you try otherwise.
 Let's drop it, no problems this->mPreviousValues.size() > 1 part of the check is not needed.  The previous if statement guarantees that to reach here mPreviousValues must contain at least one previous value.  The DoWrite call will never be executed due to short circuit logic.  Should this be a logical and statement instead? Please not that there is a **strict** inequality here.

If there is only one item - we write. If there is more then one - we do not write. Opps, I mistook the statement to have read size() > 0.   Apologies."
3120,2022-06-21T08:14:07Z,2022-06-21T16:26:24Z,carlo-bramini,1,0,11,2,1,1,1,[],32832.0,0,32832.0,0,0,0,0,70358971.09731,,0,11,0,False,['carlo-bramini'],"> I'm really curios why such errors only appear under Cygwin. Each commit to master produces 12 builds using different compilers and OSes without any issue.

Probably, there is the chance that it does not depend on CYGWIN.
May it depend by the configuration options to CMake?
I turned OFF all options that I could from the ones that are listed here:

https://github.com/audacity/audacity/blob/master/CMAKE_OPTIONS.md

Perhaps, it may be possible that compiling a bare-metal executable of Audacity could help to find some issues that are not directly visible when building those 12 executables. For example, I got some troubles when I removed portmixer and now fixed by some PR... at the moment, I'm still getting other errors elsewhere after other packages have been disabled but unfortunately I have still not found the reasons for them.
I'm really curios why such errors only appear under Cygwin. Each commit to master produces 12 builds using different compilers and OSes without any issue.",I'm really curios why such errors only appear under Cygwin. Each commit to master produces 12 builds using different compilers and OSes without any issue.,"I got this error when compiling Audacity:

```
src/tracks/labeltrack/ui/LabelGlyphHandle.cpp:24:10: fatal error: ../../../images/Cursors.h: No such file or directory
   24 | #include ""../../../images/Cursors.h""
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
```

Actually, the ""../../.."" points to ""src"" directory but the ""image"" directory is one step higher, as you can see at the time of writing.
For fixing the build, I had to add an extra "".."" for reaching the right level.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3115,2022-06-20T17:03:07Z,2022-06-21T16:31:10Z,carlo-bramini,0,3,11,2,1,2,1,[],,0,87131.0,0,0,0,0,70359332.152351,,0,11,0,False,[],,,"I configured with `audacity_use_portmixer=Off` and I got many errors because `PaDeviceInfo` is undefined.
This happens because `portaudio.h` is not included by anyone if `USE_PORTMIXER` is undefined or zero.
This patch fixes this bug, by including `portaudio.h` before the test on portmixer.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Can we use angle brackets please? `portaudio` is external library (unlike portmixer, which will be kept as a part of Audacity sources) Actually, I included it without angle brackets because, into all other source files of Audacity, `portaudio.h` is included in that way, as you can see after a quick search. Like here, for example:

https://github.com/audacity/audacity/blob/6cfef1edc582d57f4b3b796cbafc68db50d2ab7b/src/AudioIO.cpp#L88

So, when I wrote the patch, I didn't care to much and I made the same thing as it has been made elsewhere.
Perhaps, there is a reason for that... Yeah, that should be fixed one day xD"
3110,2022-06-20T03:37:40Z,2022-06-21T11:25:06Z,Paul-Licameli,0,0,8,597,6,1,1,[],,1,114449.0,0,0,0,0,70380343.159131,,1,8,0,False,[],,,"Resolves: #2978

Remaining steps to define the settings for LV2 effect.

Handle presets, so that the fetching of preset information into an in-memory
object is separated from the storing of it into the instance.

Also, not exactly related, but more file splitting.  The misleadingly named
LV2EffectSettingsDialog is renamed and moved into other source code files.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3116,2022-06-20T17:16:42Z,2022-06-21T08:55:08Z,carlo-bramini,0,0,11,2,1,1,1,[],,0,64549.0,0,0,0,0,70381101.355717,,0,11,0,False,[],,,"I configured with `audacity_use_portmixer=Off` and I got an error when linking because it could not find `-lportmixer`.
This happens because `CMakeLists.txt` does not check if `USE_PORTMIXER` is true and it tries to link to portmixer indipendently if it's available or not.
This patch fixes the error by checking `USE_PORTMIXER` as it has been done elsewhere.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3109,2022-06-19T22:05:07Z,2022-06-21T08:31:48Z,VasiliiGeneralov,0,0,1,21,1,1,1,[],,0,124001.0,0,0,0,0,70390744.465065,,0,1,0,False,[],"The default behavior seems to be kept, so this PR is good to go","The default behavior seems to be kept, so this PR is good to go","Allow users to pass encoding for pipes to work with non-ASCII data, e.g.
Cyrillic fonts

Signed-off-by: Vasilii Generalov <begulme@gmail.com>

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3038,2022-06-07T06:46:21Z,2022-06-07T07:43:39Z,KissDaniGH,0,0,1,3970,1,1,1,[],,0,3438.0,0,0,0,0,71603241.938862,,0,1,0,False,[],thank you!,thank you!,"more coming soon
",
3036,2022-06-06T15:46:42Z,2022-06-06T16:36:18Z,crsib,0,0,1,8,1,1,1,[],,1,2981.0,0,0,0,0,71657678.068354,,1,1,1,False,[],,,"This PR is needed as there is a bug in a Windows SDK selected by default on CI for MSVC 2019 builds. This bug prevents us from using WRL::ComPtr which will be needed later on

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3024,2022-06-04T15:37:45Z,2022-06-06T16:51:56Z,Paul-Licameli,0,0,5,338,14,1,1,[],,0,177256.0,0,0,0,0,71656740.070078,,0,5,0,False,[],,,"Resolves: #2948
Resolves: #3017

Fix errors in the system for caching Preference values, where a temporary ChoiceSetting object is used that shares a settings path with a named Setting object.  Make the ChoiceSetting invalidate the other Setting when the ChoiceSetting is
written.

The problem affected these settings, and these only:

Decibel scale cutoff in Interface preferences
Default new project sample rate in Quality preferences
Host choice in Device preferences

Also fix another problem with one overload of `ReadWithDefault`.  This was known to affect other settings in Device 
preferences, although that may not be an exhaustive list of the hidden problems.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3020,2022-06-02T20:26:07Z,2022-06-05T15:23:45Z,Gootector,0,0,1,6,1,1,1,[],,0,241058.0,0,0,0,0,71748438.190617,,0,1,0,False,[],,,"Update Polish Translation from Transifex

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3031,2022-06-06T10:59:17Z,2022-06-06T12:46:06Z,crsib,0,15,1,203,5,2,1,[],,1,6412.0,0,0,0,0,71671494.684683,,0,1,1,False,[],,,"It was problematic to determine the reason why the sanity test has failed,
especially on Windows. 

CTest framework does not allow to get the exit code of the application (or there is no easy way to retrieve it at lease).

To simplify the test run analysis the following was added to the journaling system:

* Journal writes every step and sync exception into `journallog.txt` with aggressive flushing
* On Windows - test run is wrapped into a PowerShell script, that outputs the exit code and collects the logs of the test run. It is unclear, if a similar script is needed on *nix systems

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What is the time unit for this number?

Should this timeout be given as an argument and made to agree with whatever timeout CTest is using?
 spelling
 I think `wxJoin(fields, '.')` is all youy need
 wxWidgets uses C va_format, it can only be used with `const char*` Let's avoid new `wxT` and just use the L prefix
 Maybe `Args && ... args` Or maybe perfect forwarding of `args` doesn't matter.

Meanwhile, fold expressions are fun!
 `std::string strings[] = { ToString(args), ... };`
Does that compile?
 Yeah, should be const ref, missed that ;-( I see no nullary ctor any more, so this forced rewrite of all uses.  That's good.  I would just like a comment explaning that the message is for the side logging purposes only and is not written to the output journal.
 Maybe you will want to do all of this wrapping only conditionally and turn it off once you have debugged the present problems.
 I really want to have it for every run. It doesn't produce to much output in successful runs anyway. I was suggesting perfect forwarding which means `&&` but not `const`

Not (necessarily) rvalue references because `Args` is a template parameter.
 Oho yes.  I had `TranslatableString` on my mind.
 As you wish
"
3035,2022-06-06T12:58:48Z,2022-06-06T15:40:58Z,crsib,0,6,1,174,14,4,1,[],,1,9845.0,0,0,0,0,71660890.686201,,0,1,1,False,[],,,"CMake now has two separate options to control how 3d party dependencies are built:

* `audacity_conan_allow_prebuilt_binaries` sets the remote to `audacity-recipes`, so no binaries will be downloaded from the Artifactory.
* `audacity_conan_force_build_dependencies` forces all the dependencies to be rebuilt every time Audacity is configured. We need this behavior for the offline Linux builds.

Linux packaging jobs were updated according to this changes

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Wrap long lines?
 Hmm, everywhere in the file?  Spelling mistake.  usefull should be changed to useful. Is this line for logging purposes? Yeppers! Something weird happened, I will fix the spelling separately"
3000,2022-05-29T02:33:47Z,2022-06-03T19:04:41Z,Paul-Licameli,1,0,1,1,1,1,1,[],491391.0,1,491460.0,0,0,0,0,71907978.63306,,0,1,0,False,['Paul-Licameli'],"> One-liner fix looks fine, tried the branch and the steps and I could see the crash happens no more.

Crash?  It wasn’t a crash, I thought it was just a failure with an error message.One-liner fix looks fine, tried the branch and the steps and I could see the crash happens no more.","One-liner fix looks fine, tried the branch and the steps and I could see the crash happens no more.","Resolves: #2993

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
3023,2022-06-03T12:34:59Z,2022-06-03T14:02:36Z,Paul-Licameli,0,0,1,9,2,1,1,[],,1,5260.0,0,0,0,0,71926106.790707,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2998,2022-05-28T12:55:11Z,2022-06-02T19:31:05Z,Paul-Licameli,1,0,2,46,6,1,1,[],13534.0,1,455759.0,0,0,0,0,71992796.314378,,0,2,0,False,['petersampsonaudacity'],"Testing on macOS 12.3.1 Monterey with @Paul-Licameli 's latest branch build:  
audacity-macOS-3.2.0-alpha-20220528+9a44494-x86_64 

This now works fine for AU effects in Paul's branch build AFAICT:
1) no warning dialog about AU effects being incompatible
2) the AU effects are loaded and automatically enabled (on Mac)",,"Resolves: #2982

Fix failures to validate Ladspa and AudioUnits effects at startup

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2990,2022-05-26T14:40:16Z,2022-06-01T11:59:47Z,vsverchinsky,1,13,5,664,7,2,1,[],88557.0,0,508779.0,1,0,0,0,72106272.777011,,0,5,0,False,['Paul-Licameli'],"This completes my review.  There are no large problems.
All I asked for earlier is now resolved, but maybe a few null checks should be added.
","All I asked for earlier is now resolved, but maybe a few null checks should be added.
","Resolves: #2555

Also fixes issue with plain UI not being updated after user preset change

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Can these two members be const? The first commit introduces the new window class but also changes the combo to choice, and introduces an error, because the `static_cast` above did not change the class.

Perhaps make one commit to change combo to choice first so that change isn't hidden among all the other diff for this commit.
 Can that #include go away?
 This is the correct normalization of `value` before `UpdateParameter` gets it?
 The commit that introduces this file makes a dependency cycle between it and VST3Utils.h

The easy solution, I think, is to move `BuildPlainUI` into the new file.  Then the new file depends one-way on VST3Utils.
 The commit that introduces this class fails to build on macOS.  It just needs in the header file:

#include <unordered_map>
 This and the previous functions do similar things (that, to all parameters, and this, to one parameter only).  Should they have more similar names?
 I see now that the mistake with combo boxes is fixed within the PR.  Still it would be better not to introduce it at all in the sequence of code transformations.
 I see that in the last commit of this pull request, `ReloadParameters` gets some uses but `UpdateParameter` is still not used anywhere. These four new calls to `ReloadParameter` will become just one call inside `TransferDataToWindow` when @pietro68  rebases his work for VST3 effect settings onto this branch.

I want the various settings-loading functions not to have the added responsibility to update UI but that's not a requirement to approve this pull request.
 https://steinbergmedia.github.io/vst3_dev_portal/pages/Technical+Documentation/Parameters+Automation/Index.html?highlight=continuous#conversion-of-normalized-values

Normalized values are in range [0, 1]. wxSlider does not support floating point ranges, so normalized range is simply mapped to integer range [0..100] of wxSlider. I don't think so, `UpdateParameter` and `ReloadParmeters` have different semantics: `UpdateParameter` is to be used when individual parameters are changing during regular plugin usage, `ReloadParmeters` is to be used when plugin state is reset and we don't know which I will approve these changes, but there is one remaining suggestion:

When you dereference a pointer, there is an implicit assertion that the pointer is not null.  Better to prove it 
(with assertions or invariants) or have null checks.

`controlsRoot` is obviously not null in this context.  Maybe the others need null checks.

Ditto, at the other use of `Setup`
"
3015,2022-06-01T01:55:46Z,2022-06-01T09:48:43Z,Paul-Licameli,0,1,5,241,7,1,1,[],,1,28382.0,0,0,0,0,72114140.288165,,2,5,0,False,[],"I won't be able to check if it helps on Linux today, but I see no reason to hold this PR","I won't be able to check if it helps on Linux today, but I see no reason to hold this PR","Resolves: #3014

Eliminate remaning uses of `wxThread`, using `std::thread` instead.

Changes in AudioIO.cpp are known to be necessary to unblock #2941 .  The other two (in LV2Effect and Scrubbing) are not known to be needed, but modernized here too.

Textual scan of the code will still show `wxThread` in Equalization48x, but that is a lot of experimental code that was never improved to be production ready.  I didn't bother.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",`#ifdef` looks a bit strange here. Probably ```//! @pre `!defined(USE_SCRUB_THREAD) || !mThread.joinable()` ``` would be better readable (and will be visible in docs too!)
3006,2022-05-30T01:56:24Z,2022-05-30T14:03:24Z,Paul-Licameli,1,2,1,44,4,2,1,[],32037.0,1,47618.0,0,0,0,0,72267666.605388,,1,1,0,False,['petersampsonaudacity'],"Testing on W10 with @Paul-Licameli 's branch build audacity-win-3.2.0-alpha-20220530+777bb3e-x64

This branch build appears to properly fix this issue on Windows",,"... so the result has aligned channels, as in version 3.1

Resolves: #2898
Resolves: #2836 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It is possible that `HasLinkedTrack` will succeed, but `GetLinkedTrack` still may return null pointer? Yes, that happens in this case.

A track was made as EmptyCopy of another, including the group data, and added to the end of the TrackList.  It was stereo group data but the right channel was not yet also added.  So in fact link consistency check criteria are temporarily violated.  But then the inconsistency is repaired by resetting the link type, but keeping any other group data.
"
2991,2022-05-26T14:43:26Z,2022-05-27T13:01:17Z,vsverchinsky,1,0,1,10,1,1,1,[],2907.0,0,80278.0,0,0,0,0,72534585.982835,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with @vsverchinsky 's branch build   
audacity-win-3.2.0-alpha-20220526+3404ea3-x64-msvc2022 

There is now no crash with this branch build at Step 6 - instead the effect is removed from the effect stack",,"Resolves: #2983 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2926,2022-05-13T11:22:44Z,2022-05-19T11:13:23Z,Paul-Licameli,2,0,4,117,4,1,1,[],429345.0,2,1197192.0,0,0,0,0,72552914.581778,,1,4,0,False,"['pietro68', 'Paul-Licameli']","I built this branch, ran debug and tried some AUs and I found some problems.

Some AUs do not crash and work properly in destructive mode, but not in realtime mode - sliders changes are not picked up (e.g. tried with white noise and the default band-EQ)

Two other AUs created some crashes, here are steps and screenshots:

using AUGraphicEQ (at appl/aufx/greq/Apple: AUGraphicEQ)
1) after instantiating it, simply closing the track will bring to  a fault:

<img width=""1267"" alt=""error 1 - on close track"" src=""https://user-images.githubusercontent.com/16491307/169020100-46ed9ee3-010f-4b94-beea-d8d1a12de73e.png"">

2) when clicking apply, we come to another fault (see screenshot 2)

<img width=""1583"" alt=""error 2 - on apply"" src=""https://user-images.githubusercontent.com/16491307/169020138-a40dc0ae-4065-4d14-b42c-57c4ec2f2abd.png"">

using AUNewPitch (at appl/aufx/nutp/Apple: AUNewPitch)
3) on instantiating it, we come to a fault (see screenshot 3)

<img width=""1576"" alt=""error 3 - on instantiating"" src=""https://user-images.githubusercontent.com/16491307/169020254-90331169-bdae-4a3d-a463-f64509419240.png"">

 > I built this branch, ran debug and tried some AUs and I found some problems.
> 
> Some AUs do not crash and work properly in destructive mode, but not in realtime mode - sliders changes are not picked up (e.g. tried with white noise and the default band-EQ)

Leave this, perhaps, to another issue

> 
> Two other AUs created some crashes, here are steps and screenshots:
> 
> using AUGraphicEQ (at appl/aufx/greq/Apple: AUGraphicEQ)
> 
> 1. after instantiating it, simply closing the track will bring to  a fault:
> 
> <img alt=""error 1 - on close track"" width=""1267"" src=""https://user-images.githubusercontent.com/16491307/169020100-46ed9ee3-010f-4b94-beea-d8d1a12de73e.png"">

Just enabling that effect causes a crash, and I think it began at commit e6667c30fc4ae0d6c91ed1f2be5b3adb838e5a5d, but I just need a simple null check

> 
> 2. when clicking apply, we come to another fault (see screenshot 2)
> 
> <img alt=""error 2 - on apply"" width=""1583"" src=""https://user-images.githubusercontent.com/16491307/169020138-a40dc0ae-4065-4d14-b42c-57c4ec2f2abd.png"">
> 
> using AUNewPitch (at appl/aufx/nutp/Apple: AUNewPitch) 3) on instantiating it, we come to a fault (see screenshot 3)
> 
> <img alt=""error 3 - on instantiating"" width=""1576"" src=""https://user-images.githubusercontent.com/16491307/169020254-90331169-bdae-4a3d-a463-f64509419240.png"">

Verified all reported bugs were fixed (including the original one by Sergey). Other changes are ok with me.",Verified all reported bugs were fixed (including the original one by Sergey). Other changes are ok with me.,"Resolves: #2841
Resolves: #2924
Resolves: #2925
Resolves: #2949
Resolves: #2950

Fix errors in the recent refactoring of AudioUnits

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2996,2022-05-26T21:24:00Z,2022-05-26T22:40:17Z,Gootector,0,0,1,2,1,1,1,[],,0,4577.0,0,0,0,0,72586253.871795,,0,1,0,False,[],,,"Unnecessary (double) space

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2989,2022-05-26T13:24:09Z,2022-05-26T13:31:09Z,Paul-Licameli,0,0,1,2,1,1,1,[],,1,423.0,0,0,0,0,72619200.273028,,0,1,0,False,[],,,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2877,2022-04-29T13:56:54Z,2022-05-26T08:25:46Z,crsib,0,0,1,6,1,1,1,[],,0,2312933.0,0,0,0,0,72637525.79676,,0,1,0,False,[],,,"Resolves: #2645

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2867,2022-04-28T11:49:33Z,2022-05-25T20:24:08Z,vsverchinsky,7,30,9,1475,84,1,0,[],57044.0,0,2367013.0,0,0,0,0,72677488.230805,,0,9,0,False,['Paul-Licameli'],"THIS COMPLETES ROUND ONE OF REVIEW!
 I have pushed the two promised commits onto this branch.  If you rebase and force-push, perhaps they could be moved to the start of the commit sequence so you don't add and old style event handling code for the theme, only to change it again.
 A third suggested commit added to the branch
 In fact `TrackList::FindById` is the convenient thing to use on undo or redo.  Use `Track::GetId` to find the value to store in the window.

 If the responses to undo and redo appear to work now, without any use of `TrackId` or any subscription to undo manager changes, it is because you rely on coindicental track focus change messages -- those send from EditMenus.cpp, right?

I fell a bit uncomfortable with that.  It seems a bit fragile, and it might be preferable that this panel should express its dependency on the current undo state directly, even if it requires a little more work.

You are depending on things coded in EditMenus.cpp for this window to work correctly, but the src/menus files should be tops of the dependency graph -- they depend on other things, but nothing depends on them.  This isn't ""dependency"" in the really hard sense of link time, but dependency in a weaker sense.

I might not insist on this fix to get this merged and testable.  But I'm not wholly satisfied without it.
 I pushed a small commit 93b60966a10d36998a990e467cd5d115b1e9d170 onto the branch, in case my point about a pure virtual having definition was unclear.

This completes another round of review.  I hope this converges today into something we merge and let QA test.
 One more thing -- did you resolve the point, that a click on the ""[Add] Effects"" button should reset the track focus?  I don't see where that omission was fixed.
",,"Resolves: #2845 

ToDo: On/Off toggle on the whole stack and individual effects does not work as it is not implemented in the underlying effects stack model.
Setting for individual effects is expected to work for effects that do support per instance settings

- [*] I signed [CLA](https://www.audacityteam.org/cla/)
- [*] The title of the pull request describes an issue it addresses
- [*] If changes are extensive, then there is a sequence of easily reviewable commits
- [*] Each commit's message describes its purpose and effects
- [*] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This changes the format for the monolithic ""sprite sheet"" for dropping in a custom theme.  After merging this we must remember to give @LWinterberg the updated sheet to put in the Wiki page.  If more changes to this file are expected during this release cycle, then that can wait until they are all done.

 ""which simplify""
 You include this for `EVT_THEME_CHANGE` and not `PrefsPanel`?

As you might have guessed, that is a usage of wxEvent that I would rather simplify with Observer.

In fact, I have a commit waiting in my big branch of module extractions doing just that.

I should cherry-pick it, and push it onto your branch, and let you merge it with this branch.

 Perhaps say ""which decorate given base classes with simplified theme support""

This is sort of a ""decorator pattern"" only it inserts behavior with inheritance, not object composition.
 I'm more hesitant about using `noexcept` liberally.  I saw a CppCon talk by John Lakos describing reasons for caution.  I need to review it again.  I mostly use it only when I know something must be called inside a destructor.

I look at this and I see it doesn't have a bounds check on the array access.
 Given that the index is in bounds (might say it with a `@pre` comment), should this return a reference to a guaranteed non-null object?  Perhaps.  But maybe warn too about invalidation in case states are added or removed. Use `std::rotate` to simplify this
 And because this does all that `Swap` can do, and more -- then remove `Swap`
 Failing linux build wants (at least) `#include <memory>`
 Good comment, saying what they types don't alone imply
 Please put this new file pair directly into `src` not `src/widgets`

The sub-folder division of `src` was never really ever done on any consistent principle, whereas the coming modularization will only move files again.

The seeming intention of `src/widgets` is for reusable, and reused, windows like `Ruler` but this looks like it will only ever have one use, closely associated with ProjectWindow.

 `#include <wx/dcclient.h>` needed to build non-Windows
 Just default it?
 `name` is not used
 Maybe you will want to set the window name, for reasons of the screen reader, if perhaps these things can be tabbed to -- talk to @DavidBailes about it.  In fact, accessibility for this new UI might need to be another issue with another PR, involving wxAccessible classes -- but I don't want to delay merge of this one for that.
 Proof?

If none, make a `@pre` comment to license it, but then examine the calls to this function , where the burden of proof is then shifted. As I said elsewhere, what you assert here, should also be an explicitly commented precondition of the function called here. Or else, just return and do nothing if the condition fails.  Other event handlers here do that. Do you need a null check on the return value? Another assumption of non-null ness, prove how? Assuming not null again as at 374 A future PR? Might simplify with comparison of two std::pairs?  Correct filer by real-time capability, ok Filter Quadratic insertion sort instead of n log n std::sort? Shrug I imagine different sorting and grouping criteria might be future demands.  Do what now?  Nothing but think about it And? Can the return type of this function be Identifier then, not naked wxString? Indent"
2975,2022-05-25T07:27:00Z,2022-05-25T10:48:22Z,pietro68,1,2,1,18,1,3,2,['bug'],9275.0,2,17949.0,1,0,0,0,72709505.462911,,0,1,0,False,['Paul-Licameli'],"Please squash and merge all as one small commit.
",,"Resolves: a bug which was found while converting vst3 to be stateless

A wrong string key was used. While replacing with the right one, centralized constexpr definition of the string keys were also done.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The elimination of duplicated string constants is incomplete.  The new names should also be used in `SaveUserPreset`.  That can help increase confidence that there is not a mismatch between the save procedure, which left the data in the config file for the load procedure to interpret here.
 Ok, done - I decided to place them in the existing anonymous namespace at the top of the .cpp; if not the optimal place, please suggest an alternative."
2936,2022-05-16T10:14:12Z,2022-05-25T09:04:21Z,Paul-Licameli,0,7,6,424,4,2,1,[],,1,773413.0,0,0,0,0,72721610.085327,,0,6,0,False,[],"Tried this branch with the usual AUs, all fine; changes are ok for me, and I take them as a guide for the corresponding step for VST","Tried this branch with the usual AUs, all fine; changes are ok for me, and I take them as a guide for the corresponding step for VST","Resolves: #2935

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Not sure if I remember this correctly, anyway: we said we should use EffectUIValidator directly?  That is transitional and changes again in a later commit
 This `CreateToken` struct is introduced here, but objects of its type passed in the constructor are ignored... will it come into play in later commits? otherwise it looks like it does nothing. See C.50

https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines Token let’s me keep the constructor public, so that std::make_shared or make_unique can work I side the factory function, because those functions pass arguments along and need a public constructor. But outside of the factory function, the constructor is effectively private because Token cannot be constructed.  It forces use of the static factory function instead so that post-construction steps are not skipped. That is all Token does and it will never need members."
2973,2022-05-24T11:24:45Z,2022-05-24T13:02:06Z,vsverchinsky,2,0,1,28,1,1,1,[],5238.0,1,17536.0,0,0,0,0,72782055.278205,,0,1,0,False,"['vsverchinsky', 'Paul-Licameli']","> Are they fixing only what the issue describes?

Yes

>Or were there also examples of VST 2 effects that incorrectly failed to load -- and now they do load? When a failure message is correct, is this new translatable string actually seen by the user?

Faulty plugin didn't load in both cases, but without this fix there was no error message when you attempted to enable such plugin manually via ""Add/Remove plugins...""
 > > Are they fixing only what the issue describes?
> 
> Yes
> 
> > Or were there also examples of VST 2 effects that incorrectly failed to load -- and now they do load? When a failure message is correct, is this new translatable string actually seen by the user?
> 
> Faulty plugin didn't load in both cases, but without this fix there was no error message when you attempted to enable such plugin manually via ""Add/Remove plugins...""

I don't fully understand the chain of causes that now leads to a proper error message -- I'm satisfied if you say it works.
I undestand why these changes make sense.  Are they fixing only what the issue describes?  Or were there also examples of VST 2 effects that incorrectly failed to load -- and now they do load?

When a failure message is correct, is this new translatable string actually seen by the user?  My recollection of review of plugin validation at startup, is that in fact these messages only go to the log in English.

","I undestand why these changes make sense.  Are they fixing only what the issue describes?  Or were there also examples of VST 2 effects that incorrectly failed to load -- and now they do load?

When a failure message is correct, is this new translatable string actually seen by the user?  My recollection of review of plugin validation at startup, is that in fact these messages only go to the log in English.

","Resolves: #2955 

Fix: invalid plugin path formatting for plugins which contain only one plugin (regression)
Fix: error message was not assigned if plugin module loading has failed (regression)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2953,2022-05-19T14:23:08Z,2022-05-20T17:12:01Z,vsverchinsky,5,5,4,122,9,2,1,[],34985.0,1,426906.0,1,0,0,0,72793982.888698,,0,4,0,False,"['Paul-Licameli', 'vsverchinsky']","I was mistaken to trace the call graph of the constructor instead of StartHost.  However, is this an example of a call stack that could leave a potential exception uncaught, in one of the worker threads of `BufferedIPCChannel`?

```
Impl::StartHost
Impl::Validate
AsyncPluginValidator::Validate
PluginStartupRegistration::ProcessNext
PluginStartupRegistration::OnValidationFinished
AsyncPluginValidator::Impl::HandleResult
AsyncPluginValidator::Impl::OnDataAvailable or OnDisconnect
thread function spawned in BufferedIPCChannel::StartConversation
```

So, I think one more try-catch is needed to be sure exceptions from `Validate` are stopped.  It could perhaps be in `OnValidationFinished`
 > So, I think one more try-catch is needed to be sure exceptions from `Validate` are stopped. It could perhaps be in `OnValidationFinished`

Where? All calls to AsyncPluginValidator::Delegate are dispatched to the main thread > > So, I think one more try-catch is needed to be sure exceptions from `Validate` are stopped. It could perhaps be in `OnValidationFinished`
> 
> Where? All calls to AsyncPluginValidator::Delegate are dispatched to the main thread

Do you mean the function `AsyncPluginValidator::Validate` ?
I see it is called by `PluginStartupRegistration::ProcessNext`, and that is called in two places, but only one is inside a try block.  The other is in `PluginStartupRegistration::OnValidationFinished`

Following the call stack up from there -- I was mistaken, what calls that is a lambda that the other thread enqueues for the main thread to do, using CallAfter.  Still:  in the main thread, there is this other place needing a try-catch to be sure the exception can't terminate the program.
 > > > So, I think one more try-catch is needed to be sure exceptions from `Validate` are stopped. It could perhaps be in `OnValidationFinished`
> > 
> > 
> > Where? All calls to AsyncPluginValidator::Delegate are dispatched to the main thread
> 
> Do you mean the function `AsyncPluginValidator::Validate` ? I see it is called by `PluginStartupRegistration::ProcessNext`, and that is called in two places, but only one is inside a try block. The other is in `PluginStartupRegistration::OnValidationFinished`
> 
> Following the call stack up from there -- I was mistaken, what calls that is a lambda that the other thread enqueues for the main thread to do, using CallAfter. Still: in the main thread, there is this other place needing a try-catch to be sure the exception can't terminate the program.

The main event loop thread execution happens inside `while` loop, and as I understand it is safe to throw inside wxApp::Yield since c++11
UPD: no, it's not safe... :/ I see and approve the latest rewrite, which makes one narrow-scope try-catch block at a lower level, sufficient to catch all the exceptions.

Now I ask you to review the suggested extra commit from me and merge it, if it helps to avoid traps in the debug build.

You may also notice -- the added use of `Translation()` suggests that plain-UI dialogs may fail to update a localized string in case the user happens to change the language preference.  That is true; that is a common problem with plain VST and Ladspa dialogs; that could also be fixed as in commit 20ace31; but, it is an unlikely use case and is beside the point of the fix required just now.

try/catch is misplaced for the new exception",try/catch is misplaced for the new exception,"Resolves: 

1. Startup plugin validation freeze
2. ""New"" radio button was available if `wxUSE_ACCESSIBILITY` was not defined

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This possibly thrown exception is not caught anywhere and might terminate the program.  One remedy would be, to move initialization of PluginStartupRegistration::mValidator out of the constructor, and into the try-catch block in Run().
 Was this catch meant for the new throw?  But it does not enclose it.
 StartHost isn't called from the constructor I don't see any other places from where StartHost could be called You are right.  I mistakenly looked for uses of the constructor of this class instead."
2249,2021-12-08T00:32:46Z,2021-12-10T09:28:49Z,vsverchinsky,0,0,2,20,3,1,1,[],,0,14453355.0,0,0,0,0,72814156.153004,,0,2,0,False,[],"Please remember when you merge to copy useful comments from the top of the thread into the text entry, before you hit the green button.
","Please remember when you merge to copy useful comments from the top of the thread into the text entry, before you hit the green button.
","Resolves: #2198
Resolves: #2199

Interaction with modal dialog causes Cancel event to be dispatched before dialog itself is finished (easily reproducible in MacOS). Then ProjectHistory::Rollback in TimeShiftHandle::Cancel replaces all tracks in the current track list, so that track captured by TimeShiftHandle becomes orphaned. Another issue is that returning RefreshCode::Cancelled from WaveTrackAffordanceHandle::Click also causes ProjectHistory::Rollback and as a result tracks changes made to the clip name reverted. 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2071,2021-11-01T23:40:30Z,2021-11-02T09:21:23Z,vsverchinsky,0,0,1,8,2,1,1,[],,0,17566830.0,0,0,0,0,72814218.304022,,0,1,0,False,[],,,"Resolves: #2064

Passes additional parameter on crash reporting, which is recognized by Sentry

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2879,2022-04-29T19:02:22Z,2022-05-05T11:14:38Z,vsverchinsky,1,24,1,738,12,2,1,[],397741.0,1,2116971.0,0,0,0,0,72815166.663778,,1,1,0,False,['Paul-Licameli'],"I will soon complete a review.  So far I have made only non-blocking suggestions.
",,"- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If I wrote this I would still prefer a reference argument to make clear it is never null A brief class comment a out the purpose?  But not hard to learn from reading it. This asserts “the socket was uniquely guarded”, very informally.

I would make that a `@pre` comment. Hello, `condition_variable`.  This review is getting very interesting. Less urgent while this remains “internal” `unique_ptr`s to Threads again... I still say it is an unnecessary indirection and you should test with `joinable` whether a thread is really there. Very good statement of contract. “Starts to listen” Good.  Does the operating system also give us any guarantees when the process holding one side of the socket dies abnormally?  I’m sure it should, but please point me to a reference.  I think we rely on that, so Audacity does not hang if PluginHost chokes. — Have we actually tested with a corrupt plugin?  Now that I can build swh Ladspa from source, I could easily modify the source to make bad plug-ins. >Have we actually tested with a corrupt plugin?

I did test it, though on windows only.

>Does the operating system also give us any guarantees when the process holding one side of the socket dies abnormally?

For [posix-compliant](https://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html#tag_16_01) exit:
```
Process termination caused by any reason shall have the following consequences:
...
All of the file descriptors, directory streams, conversion descriptors, and message catalog descriptors open in the calling process shall be closed.
``` Presence of reference itself does not guarantee nothing. It communicates clearly that channel is never null which is in fact true in usage but not clear just from reading this header.  You took my other suggestions to change a pointer to a reference.

Classes should have clearly expressed contracts in header files and one way to make things clear to those with a good knowledge of C++ is to use types in understood conventional ways.
 Not having this clearly stated, every override of OnConnect instead has the responsibility to null-check the argument.
 ""vice versa""
 Good, this explains that an exception may be thrown.  The other pull request that uses IPCServer now needs try-catch blocks.

Not clear perhaps from this explanation is that a call to `OnConnectionError` happens on another thread that is created during a successful construction.
 Now selecting with null for timeout which will block for availability.  Good, we want that.  But again I question what select adds in case there is only one file descriptor?  Maybe this can be simplified just by calling `accept` which according to the man page, blocks if the socket was not explicitly constructed as non-blocking.
 Would it interrupt `accept` too with the suggested rewrite?  But not important to do that. There are two uses of `notify_one`.  It is explained here that the notifier does not need to lock the mutex and it might be slightly bad for performance if it does so. https://en.cppreference.com/w/cpp/thread/condition_variable/notify_one
 In this case mutual exclusion is needed for other reasons of course.  Still the appending to the buffer must be excluded from the consuming of it.
 Don't need that line If either break is reached, there is no indication of the error to the user.   Should the callback be captured in this lambda too, should `OnDisconnect` be called?  Should the channel shut itself down?

 `OnDisconnect` is called from receiving thread, there is no need to understand the reason of disconnection right now Actually that path is only for closed by remote
 Are we certain every error seen by a sending thread involves an error in the receiving thread in the other process?  Errors can happen many ways.

It looks like there is some possiblity of sent data being lost but the user of the channel is never informed of it.  Maybe error handling could be more complete.
"
2295,2021-12-16T12:15:04Z,2022-02-14T19:22:49Z,vsverchinsky,22,30,12,5259,49,1,0,[],505624.0,0,13719128.0,2,0,0,0,72815047.95804,,1,12,0,False,"['Paul-Licameli', 'DavidBailes', 'vsverchinsky']","In the PR comment, remember to write only one issue number in each “Resolves:” line, so that automatic updating of project boards mentioning this issue are correct. I pushed a small commit on the end to fix an incorrect comment in EffectInterface.h.

As you may know by now, ""Automation"" is unfortunately used in Audacity's code to mean the saving of settings for purposes of macros, but the settings are not meant to vary during the application of the effect, as with an ""automation track"".  Misleading terminology.

 I'm done with my first round of review of this draft PR !
 Second round of review, done!

Please see the comments from the first round that I did not resolve.

I expect some minor build problems rebasing this onto recent master, such as the need to add `noexcept` to some of the overrides of EffectProcessor now.

I would like to keep round three of review short.  The Linux UI difficulties, if they can be solved -- let them be in another pull request.
 I'm done with another round of review of new code.  I have not yet reviewed again all of my older comments and marked them resolved as appropriate.
 The commit ""VST3 plugin modules loading"" now fails to build because internal/ComponentHandler.h does not yet exist, but deleting just that #include is enough to fix the commit.

The next commit ""VST3 processing"" needs to put the #include back.

""VST3 UI"" fails to build because PluginSettings was not in VST3Effect.cpp, but including ConfigInterface.h is enough to fix it and all commits after.

Please make these three small changes in the commit sequence to keep all buildable.
 > The commit ""VST3 plugin modules loading"" now fails to build because internal/ComponentHandler.h does not yet exist, but deleting just that #include is enough to fix the commit.
> 
> The next commit ""VST3 processing"" needs to put the #include back.
> 
> ""VST3 UI"" fails to build because PluginSettings was not in VST3Effect.cpp, but including ConfigInterface.h is enough to fix it and all commits after.
> 
> Please make these three small changes in the commit sequence to keep all buildable.

@Paul-Licameli Each commit compiles now > Unfortunately some VST plugins may expose many thousands of parameters, which sometimes aren't present in the plugin interface, it's the safest option i see right now to remove such parameters from the list

So I withdraw the suggestion above.
 > You expect that list of options will stay same for both VST and VST3?

I don't know.  So let's tolerate the duplication then.

 > `size_t` would be a better type, unless you need -1 for invalid?

This wasn't addressed but is minor
 > That's how it implemented in other effects

Then I will reexamine all the GetLatency overrides later.
 The suggestion to re-use MessageBuffer, which is now in lib-utility, stands.  But don't try it yet.  Maybe I will do it myself in near future refactorings.  MessageBuffer or something like it SHOULD be used in all existing real-time effects to communicate changes of dials atomically, but IS NOT yet.  It wasn't thought of years ago.  It is good that you thought of it without prompting.  But a question I need to settle is how to do it in a unified way for all effects.
 The suggestion to rewrite BuildPlainUI taking references instead of pointers (required not to be null) was not addressed.  At least write an easy comment that pointers must be non-null, where BuildPlainUI is declared.
 > The non-copy constructor may leave mEditController null. It makes mComponentHandler non-null only if mEditController is. These things should be stated here in comments.
> 

My suggestion stands, to make a comment about this invariant, to help the next person who reads this code.
 > ""try to grab"" again

""try grab"" grammar error still in ComponentHandler.cpp
 > I would prefer the string literals ""ProcessorState"" and ""ControllerState"" appearing in only one place each and given a name

I still like this suggestion to avoid duplication of string literals -- a very general rule, even if VST 2 code doesn't do it this way, but it is not very important.
 > According to VST documentation, it's not prohibited to change parameter names. It's not difficult to append suffix if parameter has a title to a parameter key, like `0_Vol`. Then, to read it from a CommandParameters we would need to extract id number and discard suffix.

I resolved the conversation where you said this, because I see you made code changes in response to the suggestion, but I don't understand ""it's not prohibited to change parameter names"".  When might they change?  When upgrading to a new version of a plug-in?  Or do you mean something else?

Compatibility of data we write into audacity.cfg is important, in case that file migrates from one version of Audacity to the next, or a plug-in upgrades its version.

 > I believe so, the `RealtimeInitialize` is called before any call to `RealtimeAddProcessor`, so we cannot configure them here (but they are initialized in `RealtimeAddProcessor` instead), and there is no need to set up the ""container"" effect since it's not used for realtime processing.

In fact you are right, and removing the call to `ProcessInitialize` in `VSTEffect::RealtimeInitialize()` (old VST) is the right thing I think, which will be part of my new issue #2547 
 > Maybe VST2 implementation does not need to initialize the ""master effect"" too, there is no need to do so in the VST3 implementation since all the processing is done by ""processor effect"" instances, in the case of realtime processing master effect simply holds initial parameters with which other instances would be initialized

You were similarly right again here and VST 2 needs to change
 Please read through my most recent comments and make the small suggested changes as you wish.

RunLoop.cpp does not in fact have the bug of double-free of resources, but still I would suggest making the helper classes move-only, and eliminating the extra indirection of `unique_ptr`, would improve style.

 I've had a look at the plain gui, and have found serious problems using a couple of the free plugins from here:
https://www.voxengo.com/group/free-vst-plugin-download/

I downloaded and installed both the vst and vst3 versions of the Mastering Graphic Equalizer, and the Tube Amplifier.
For the VST versions, the existing plain gui was OK.
However for the VST3 versions the plain gui is definitely not OK:
1. Values not in the right range - for example in the Graphic equalizer, the sliders in the normal gui have ranges -12 to 12, but the equivalent spin control in the plain gui has range 0 to 1.
2. A wxSpinCtrlDouble can be used for a property which has discrete values. In the normal view of the tube amplifier, there's a mode which can be set to be mode 1 or mode 2. In the plain gui, there's a wxSpinCtrlDouble for the mode, with a range 0 to 1.0

Checked the VST3 versions in Reaper, and the plain gui version, which is just a series of sliders and values, does not have the first isssue above - the values are in the correct range.

There are also accessibility isssues, but it probably best to address them after above problems have been sorted out. > > ""try to grab"" again
> 
> ""try grab"" grammar error still in ComponentHandler.cpp

Checked it again, it isn't there any more



> > According to VST documentation, it's not prohibited to change parameter names. It's not difficult to append suffix if parameter has a title to a parameter key, like `0_Vol`. Then, to read it from a CommandParameters we would need to extract id number and discard suffix.
> 
> I resolved the conversation where you said this, because I see you made code changes in response to the suggestion, but I don't understand ""it's not prohibited to change parameter names"". When might they change? When upgrading to a new version of a plug-in? Or do you mean something else?
> 
> Compatibility of data we write into audacity.cfg is important, in case that file migrates from one version of Audacity to the next, or a plug-in upgrades its version.

Yes, VST3 documenation says nothing about changing the parameter name, so I suppose that plugin developers are free to change them, but parameter id should stay same.",,"Resolves: #2276
Resolves: #2275
Resolves: #2274 
Resolves: #2273

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I'm skipping review of the three module* files of course, assuming they are cut-and-pasted from third party code.
 Unnecessary include
 Let's comment that this line is the (sole?) entry into platform-specific code in one of three conditionally compiled files.
 ""It reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable.""

https://en.cppreference.com/w/cpp/error/logic_error

Maybe that doesn't really describe what happens here, maybe system_error is more like it, but this is not important. I see all of these standard exceptions do get caught.

If there is need to propagate an error beyond this module, better that a subclass of AudacityException be used for that.
 spelling
 The same block of code except for the string literal.  I would make a lambda to avoid the duplication.
 There is an include dependency cycle between VST3Effect.h and VST3EffectsModule.h.  A cycle of just two files doesn't concern me much, but it would be nice to figure out the extra effort to break the cycle.  I think the module depends one-way on the effect, becuase it must be a factory of effects.
 Should there be a destructor too that uses the FUNKNOWN_DTOR macro for some debug checking?
 I am pleased to see that the new files in internal/ have no dependency cycles.  I can study them in a bottom-up order to understand them.

Please write a little more commentary about the purposes of the classes.
 Start the comment with `//!` and Doxygen will extract it as the brief description of the class that follows.

You can write a long comment for detail after the brief comment if you enclose it in
```
/*!
...
*/
``` This function never assigns `index`.  But does the caller expect that you do?
 The deleter in the .cpp file is always the same lambda, with an empty capture, so you could declare a zero-sized deleter class here with an `operator ()`, and define it in the .cpp file, and make this unique_ptr just one pointer wide.
 I think there is an incomplete clause in that comment
 This return path does not assign `index`.  Is that ok?
 Incorrect `@file`
 You mean ""in real life"" ?
 ""Try to grab"" I think I missed some interesting discussions during my week off.

What's the proof of correctness of this algorithm?

1. Tthere are two `ParameterChanges` objects, and at all times each is held in exactly one of five places (editor, processor, first, second, or pending) and each place holds at most one.
2. Only the editor thread ever makes pending non-null.
3. Only the editor thread ever makes second null.

Every exchange satisfies those conditions; from that you can deduce that editor never fails to lock one of the objects.

Do I reason right?  Is this reasoning worth commenting?
 Is it worth the trouble to write `auto cleanup = finally([&]{ handler->endEdit(id) })` after the ""begin"" call?

 There are four cases above for controls.  Do you try examples of VST3 plug-ins that exercise all four of these paths?
 See also the class MessageBuffer in PlaybackSchedule.h where I solved the same problem in a lock-free, but not wait-free algorithm, yet very probably looping only very rarely, and using only two slots.

Which of these solutions is better?

I think there is a utility to be extract from it into one of the lower libraries.

Which are the threads that communicate?

In the cases of my MessageBuffer, it's the main thread sending messages to a worker thread -- the one which must maintain high throughput but can tolerate variation in latency, not the one that executes as the callback for the PortAudio library.  Changes of looping play bounds are the sort of changes done there.

In your case, I presume this is also about adjustment of sliders detected by the main thread.  It is the low-latency thread that is receiving the messages.  However, I believe that is a wrong implementation (an old error and nothing wrong with this PR).  See issue #2082.  Things should be restructured so the receiver thread for your messages is the same as those using MessageBuffer.

 The build is broken if not on Windows.  That must be fixed of course.  One if the fixes is simply to omit ""/msw"" in that path.  There are other fixes to do in VST3Utils.cpp
 I see shared_ptr, also many IPtr because you must use them with VST3 objects, and those are shared pointers.

But in fact only mModule, mEffectClassInfo, and mSetup are shared among copies of the object (which must be made for master-slave connections), which isn't obvious unless you read the copy constructor.

Make it more obvious here in the header with comments, and perhaps rearrange the sequence so the really shared members are separate from the really unique ones.
 I see how three of these values are ultimate communicated to the VST3 library in VST3ProcessBlock, but I don't see where the sample rate is given to it.  Is that an omission?

Have you tested with non-default sample playback rate?  (Change it in the drop-down at bottom left)

If you have an effect like an equalizer, but VST3 is misinterpeting the sample rate, then you might hear wrong results at non-default sample rate choices.

 This needs a catch block to stop std::exceptions, as is done in the two other places that may construct VST3Effect
 Need null check on mEditController, as elsewhere
 need null check
 This isn't null checked, but I think you guarantee the invariant that it is not null, if mEditController is not null
 null check?
 Please add comments about which of the above are invariantly non-null, after construction.  I think that includes mEffectComponent, not mComponentHandler; and mPendingChanges is sure to be non-null provided that mComponentHandler is not null.

"
2878,2022-04-29T18:56:59Z,2022-05-03T06:50:20Z,vsverchinsky,0,0,1,38,2,1,1,[],,0,2117294.0,0,0,0,0,72815167.284907,,0,1,0,False,[],"Approved and merged.

But I suggest one small improvement:  use `std::memory_order_release` in `clear`.
","Approved and merged.

But I suggest one small improvement:  use `std::memory_order_release` in `clear`.
","- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2934,2022-05-16T09:08:12Z,2022-05-21T15:04:20Z,Paul-Licameli,5,0,11,935,6,1,1,[],284206.0,1,453372.0,0,0,0,0,73045617.757312,,0,11,0,False,"['pietro68', 'Paul-Licameli']","I confirm that the bug I posted earlier, does not happen anymore after the rebase.

However, I found another problem. Have a mono track, instantiate a AUGraphicEQ, press the play button (the main one, not the one on the effect dialog) this will happen:
<img width=""1365"" alt=""Screenshot 2022-05-19 at 16 07 03"" src=""https://user-images.githubusercontent.com/16491307/169346331-6e59a360-c338-48b9-b8bf-14f7533e485c.png"">


 I fixed the crash.  Please review again.  There are changes in ""Fetch parameters of each AudioUnits plug-in only once..."" and later commits.
 Built and repeated the tests, all seems good now. I will have a look at the changes. > I could not really understand what the fixes consisted of, because they were squashed with previous commits? anyway, it works now.

""@[Paul-Licameli](https://github.com/Paul-Licameli) Paul-Licameli [force-pushed](https://github.com/audacity/audacity/compare/c5a33cc48c8a8164542ee5cd07e8b33e7a5fcff9..43e2a74f6ccbcfc9c72c915920765e342cdfe5a6) the AU-effect-settings  branch from [c5a33cc ](https://github.com/audacity/audacity/commit/c5a33cc48c8a8164542ee5cd07e8b33e7a5fcff9)to [43e2a74 ](https://github.com/audacity/audacity/commit/43e2a74f6ccbcfc9c72c915920765e342cdfe5a6)[Compare](https://github.com/audacity/audacity/compare/c5a33cc48c8a8164542ee5cd07e8b33e7a5fcff9..43e2a74f6ccbcfc9c72c915920765e342cdfe5a6) [17 hours ago](https://github.com/audacity/audacity/pull/2934#event-6646676641)""

That means you can fetch my fork and supply `c5a33cc ... 43e2a74` to `git log` or `gitk`

At least, that's what I do from the command line, when a branch I reviewed is force-pushed again with changes.
 Please observe that in the commit ""Fetch parameters of each AudioUnits plug-in only once..."" I changed it so that now, there is only one constructor of AudioUnitWrapper, and therefore, I have to change `AudioUnitEffect::RealtimeAddProcessor` to pass the new argument.  The new argument is the array of parameters from the AudioUnit.

The problem was that in `AudioUnitEffect::RealtimeAddProcessor`, (at the later commit ""Eliminate CopyParameters ..."") `slave->StoreSettings(GetSettings(settings))` was failing, meaning `mSlaves` did not grow by one.  I changed things so that the call does not fail, because `ForEachParameter` will not fail, because it has the array of parameters.

Please tell me you understand that.
I could not really understand what the fixes consisted of, because they were squashed with previous commits? anyway, it works now.","I could not really understand what the fixes consisted of, because they were squashed with previous commits? anyway, it works now.","Resolves: #2933

Settings structure defined for AudioUnit effect; some event handling un-entangled from the settings
manipulations, anticipating the definition of a Validator.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2938,2022-05-16T12:48:00Z,2022-05-18T11:16:06Z,pietro68,0,0,3,119,2,1,1,[],,0,167287.0,0,0,0,0,73318514.995787,,0,3,0,False,[],"All looks good
","All looks good
","Resolves: https://github.com/audacity/audacity/issues/2923

Again conversion to realtime, but this time starting from the stateless version.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2668,2022-03-11T18:43:03Z,2022-05-18T11:14:16Z,vsverchinsky,10,30,9,1750,22,1,0,[],2743430.0,0,5848328.0,0,0,0,0,73318572.312463,,0,9,0,False,"['Paul-Licameli', 'dozzzzer']","Some issues were observed when testing the solution.

- #2808
- #2809
- #2810 Linux build is failing, needs `#include <cstring>` for std::memmove 
 This round of review is complete.  I am satisfied with the much improved large scale structure of interactions.  There are a few must-fix errors.  Resolve them and this can be approved.
 > Hm, didn't think of it, thanks. It's hard to answer such questions without a complete understanding of requirement. Though we can initialize i18n on the host side too, but then there is a question of language preference change. So, I don't have a complete answer, not use i18n in messages is a possible solution I think.

Language change only happens if the user uses the Preferences dialog, which can't happen during application initialization.  I wouldn't worry.

Anyway I see you take the acceptably simple way out -- you just use `Debug`.  Still let's remember this discussion.  Lowering the initialization of locale into some other place in lib- might not be needed yet but lookds easy and like the right thing to do in principle.

More generally, many miscellaneous things happening in AudacityApp.cpp could use reexamination for movement elsewhere.

 > I was thinking of it too, and there is a downside - the size of application will increase, don't know how much though.

Experiment will tell!

If ever my separation of modules (not libraries) proceeds, which allows pieces of Audacity functionality to be loaded only selectively -- then it might also be easy to suppress the loading of modules at startup time when in the plugin host process,
and that would reduce the memory footprint and static initialization code.
 > Thanks! `this` is needed for class-member access

But my suggestion was to access members through `lck->` instead of implicitly with captured `this`

See `UndoManager::EnqueueMessage` for an example I wrote
 > It will cost some time because from what I see it doesn't yield each `Poll`. In my case the difference was 2-4 seconds.

In that case the other `Yield` could be kept for better performance, with a comment explaining it.  It's an easy tuning change to make later if we like.
 > > Still now, I wonder about this. What happens if a plug-in is upgraded to a newer version reinstalled at the same path? Should that be detected and cause another load again in the sandbox?
> 
> I'd say yes. But for this we need to track module file timestamp (if there is a file)

New issue opened.  (Not yet a necessity for 3.2.)
 > > Are you not comfortable enough with ShuttleGui?
> 
> I'm still not very comfortable with wxWidgets)
> 
> > Besides which: perhaps this dialog belongs in its own small source file.
> 
> Probably, you are right

ShuttleGui was invented to let us avoid worrying about many details in the use of wxWidgets.  

As I explained, it didn't go far enough for open-endedness, platform neutrality, declarativity, and recombination with generalized variables for holding control values.  But, it's a start.

Anyway @ksoze95 might take on the task of rewriting this small dialog with ShuttleGui soon.



 The one conversation I left un-resolved above is the detail about swapping of strings out of `std::optional` in a more efficient way.  Unimportant.

Let's merge this!  A very satisfying achievement!
",,"Resolves: #2607
Resolves: #2609 
Resolves: #2608 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Unused constant VSTCMDKEY no longer needs a definition
 Remove this enum with VSTSubProcess
 My recent changes in EffectManager may make the benefits of these changes less but still not zero.  After my changes, instance initialization is avoided, but still not the plugin initialization.
 I wonder if this incomplete old idea would be valuable later, but still then, it would make sense to implement filtering by type in one common dialog accessible in common from all four menus.  So it's all right.
 I'm looking at EXPERIMENTAL_EFFECT_MANAGEMENT elsewhere, and I think it's time to retire this experimental flag.  It's not going to turn off.  So remove it from Experimental.cmake and remove the related bits in EffectsPrefs.cpp
 I don't believe in using `noexcept` too widely, but functions meant to be called inside a `finally` and therefore inside a destructor should have it.
 That applies to `OnPluginValidationFinished ` Second '#' isn't needed.

Add a few words about the general purpose of these files.
 ""vice versa"" When you need an abstract base class with just one virtual function besides the destructor, an alternative is just to generate the type you need from std::function:

```
using IPCChannel = std::function< void(const void *bytes, size_t length) >;
```

It's your choice whether you prefer that suggestion here.  Maybe you anticipate more functions in the interface later.
 Is the argument never null?

If so, I would prefer to use a reference to say what I mean with types, leaving no doubt in the reader's mind about that, while needing no extra comments either.
 ""description"" This yields only every 2 failed tests.  I'm curious, why 2, not 1, or some other number.  Did some article recommend that?
 `explicit` ?
 Would a more careful definition be
```
#define NFDS(x) ((x) + 1)
``` So I read the class to understand that it's a move-only object for RAII cleanup when a socket is opened.

Comment that before the class.  Perhaps too, ""unique_socket_guard"" would be a name that suggests that it is move-only.
 Perhaps comment
`// TODO C++20: use std::byte`
 This line should be added in the same commit that defines the source code files in lib-pic.  Not later.
 comment likewise Can the second argument be a reference?
 Can this be a const reference or a `*const`? Can this member be const?
It's always good to add const when you can to help the reader understand what parts never vary after construction.
 Indeed this assumes callback isn't null, so I would rather have a reference argument then What feature in wxWidgets was needed?  Say in the commit comment
 ToUTF8 used here, utf8_str used instead in the following function -- made me check in the wxWidgets headers to be sure they were not really different.

Why not simply use utf8_str as in the existing function making the differences between the two functions less?
 While you are touching this class, please do these things too:

- Use in-class member initializers so that the body of the constructor shrinks to nothing.
- Make sure no other members of non-class types are uninitialized.
- Remove the friend declaration, because long-distance friendships are bad for understanding code.  Make Load() and Set() public so you can.
 This include becomes redundant when PluginDescriptor.h is separated
 What were you intending the directory structure of the new library to mean?  Why not just leave it flat?

The `internal` sub-directory and the parent directory are in fact in a dependency cycle because of the #include above.  So as a whole the subdirectory is not lower-level.

However, at the finer level of source code files, there is no dependency, which is good.

Just leave a flat folder structure, I say.
 - callback is assumed non-null inside the function -- therefore, make it a reference argument
- id is a ""naked"" int.  I would write a small ChannelId class wrapping the int and preventing implicit conversions to and from int.  Probably it would need operators == and != and maybe < (or just <=> if we had C++20) If channel becomes a reference instead of pointer, remember to pass `std::ref(channel)` to avoid the copy constructor.
"
2932,2022-05-15T11:28:40Z,2022-05-16T16:16:01Z,Paul-Licameli,0,0,6,1307,10,1,1,[],,1,103644.0,0,0,0,0,73473319.947411,,0,6,0,False,[],"I see this PR is about introducing a namespace and breaking up AudioUnitEffect.* in different files, this is all fine by me.","I see this PR is about introducing a namespace and breaking up AudioUnitEffect.* in different files, this is all fine by me.","Resolves: #2931

Preliminary splitting of AudioUnitEffect.cpp into multiple source files

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2922,2022-05-12T15:07:54Z,2022-05-13T14:27:53Z,pietro68,0,10,4,400,2,2,1,[],,1,84000.0,0,0,0,0,73739010.454686,,0,4,0,False,[],"The final result looks correct.  So please do an interactive rebase onto latest master, squashing the last to small correction commits into earlier ones, force push, merge commit, and the rest.
","The final result looks correct.  So please do an interactive rebase onto latest master, squashing the last to small correction commits into earlier ones, force push, merge commit, and the rest.
","Resolves: https://github.com/audacity/audacity/issues/2920

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Has no effect I see a deleted function above but I don’t see the ValidateUI that should replace it in the second step. An in class initializer for the pointer The left side of the assignment simply changes to `GetSettings(settings)` and you no longer need Const_cast and a Do... function.

That eliminates all const_cast from this source file, a good thing to mention in the commit comment. Hmm no, I do not delete TransferDataFromWindow here (well, here == in step 1, I have no idea why this comment also appears in step 2), I only replace all occurrences of mParams with local reference rs. Woops... a residual artifact from an attempt by me to see where it was defined. In step 2, you can see that the contents of this method has moved to ValidateUI good point, will do Ok - I was wrong, the framework was not missing something, rather I did not fully understand it. I did how you suggest above (actually - before reading your comment; good that I came to realize it by myself! but thanks nonetheless) and I verified that presets are correctly loaded. I see it now.  I overlooked it.

If you don't copy and paste the function to a different place in the file, it could help make the commit more easily reviewable.
"
2918,2022-05-12T11:35:08Z,2022-05-12T19:50:05Z,Paul-Licameli,0,0,6,262,29,1,1,[],,1,29701.0,0,0,0,0,73806076.435819,,0,6,0,False,[],All good by me,All good by me,"Resolves: 

Fixing the blocker for further development of stateless Reverb, AudioUnits, etc.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2916,2022-05-12T09:55:38Z,2022-05-12T14:03:27Z,DavidBailes,0,0,1,2,1,1,1,[],,0,14869.0,0,0,0,0,73826879.084482,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2911

When Audacity is set to use Turkish, the built-in ""Generate"" effects fail to set their default duration to match the selection.

Caused by typo in tr.po
Note: This after this fix the duration is set correctly. However, following the steps to reproduce, there is a problem with the length of the resulting first and second clips being the wrong length. This is a separate bug and also occurs when the language is set to English (and I presume others).


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2844,2022-04-20T11:04:27Z,2022-05-11T16:53:25Z,Paul-Licameli,1,11,11,1622,8,2,1,[],1389117.0,1,1835343.0,0,0,0,0,73903076.807845,,0,11,0,False,['Paul-Licameli'],"@ksoze95 may like to review ""Define smart pointer utility PackedArrayPtr""
I think I understand the changes now, nothing else to note besides my comments","I think I understand the changes now, nothing else to note besides my comments","Resolves: #2841

Much code in AudioUnits calling into the SDK was too repetitious.

Define many utilities to factor out repeated patterns and greatly shorten AudioUnit.cpp, making many individual functions
more easily comprehensible.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","maybe we could add a check on the return value? I like these helpers, and I was wondering whether instead of returning an `OSStatus` (which I understand is 0 for success) they could just return a `bool` (return result == 0) - this because the if statements which use these helpers, at first sight display an ""inverted logic"" which causes reader fatigue I assume that the change in what is being indexed here, is the correction of the formal error mentioned in the commit message. Again, I assume that the change in what is being indexed here, is the correction of the formal error mentioned in the commit message. Besides, I would keep the original assigning by field, instead of the aggregate assignment. Easier to read and more resilient to future changes in the struct. It seems some inconsistent inverted logic is unavoidable so long as we call other functions in the AudioUnits sdk that return a 0 value for success.

In principle OSStatus could distinguish different kinds of errors with different values, but funny I can't find any enumeration of those values in the header files, just a typedef of OSStatus as SInt32.  🤷 
 Yes, I will rewrite the commit for getting fixed sized properties to check return statuses always, here and elsewhere
 I hope you are reading my commit comments as well as code comments.  I explained in one:

""Note that AudioUnitGetProperty can retrieve less of the data than are available
    from the plug-in if it doesn't first check with AudioUnitGetPropertyInfo and
    it passes a small size.
    
    The SDK appears to do this to allow versioning of the structures while not
    breaking code written to prior versions.""

For that reason, I suspect that what you suggest is an unnecessary caution:  Apple would be smart enough not to do
that, breaking Audacity and any other audio program getting reinstalled on upgraded versions of the operating system.

But then I shouldn't read their minds either.  So I will insert another commit in this branch that adds some more
C++ wrappers around the SDK structures, in the header `AudioUnitUtils.h`, and I will amend some other commits to
use those wrappers rather than directly using the SDK.  Wait for it...

 > I assume that the change in what is being indexed here, is the correction of the formal error mentioned in the commit message.

The old version was subscripting `AudioBufferList::mBuffers` (`CoreAudioBaseTypes.h`) after it had allocated it ""wrong"" though harmlessly wrong (a bit of overallocation)

```
struct AudioBufferList
{
    UInt32      mNumberBuffers;
    AudioBuffer mBuffers[1]; // this is a variable length array of mNumberBuffers elements
};
```

The ""proper"" thing to do is not to allocate an array of `AudioBufferList` structures, but to do the things that `PackedArrayAllocateCount` does:  make space for one `AudioBufferList ` plus sufficient for extra `AudioBuffer` objects, whose number is known only after first calling `AudioUnitGetPropertyInfo`. So maybe I'm just being pedantic fixing what never caused a bug, but, it seemed to be a bit of old confusion of thought that is now better expressed.
 ditto"
2901,2022-05-06T14:18:59Z,2022-05-11T16:03:24Z,vsverchinsky,2,12,9,1086,17,2,1,[],434720.0,1,438398.0,0,0,0,0,73905950.932324,,0,9,0,False,['Paul-Licameli'],"> The main purpose wasn't the performance improvement. XMLTagHandler is usually inherited by other types and thus `mCurrentTagAttributes` become a part of objects of those types, but it used only during xml parsing.

I see: space savings are the real motivation.  That's good too.
 `PluginDescriptor::IsEffectLegacy` and `PluginDescriptor::mEffectLegacy` are now removable in this branch.
One small suggestion to remove some unused code.  Nyquist workbench will still compile.

Please rebase, force push, and merge with a merge commit.  Please do this soon, because I need to base the other needed framework changes I mentioned today (those blocking further development of statelessness) on these prior changes to PluginManager and PluginDescriptor.
","One small suggestion to remove some unused code.  Nyquist workbench will still compile.

Please rebase, force push, and merge with a merge commit.  Please do this soon, because I need to base the other needed framework changes I mentioned today (those blocking further development of statelessness) on these prior changes to PluginManager and PluginDescriptor.
","- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","To make this commit have no behavior changes, the other conditional compilation branch should be kept. Commit comment has a spelling mistake This commit will break compilation of Nyquist Workbench.  Although we are not maintaining that now, I don’t want to abandon all hope of salvaging interesting ideas from that in the future.

Try to keep it at least compilable if not runnable.  Keep the unregister function.  Let the work bench call the other overload of RegisterPlugin passing null for provider.  PluginDescriptor::Load should allow empty providerID without error.

(Also the simlification of Load properly belongs to this commit, not the previous one.) I did not review these XML handling changes before.

They are harmless and avoid some extra allocations.  They might improve file loading times more than anything in plugin validation.  Even so it might not be a large savings. This header only needs a forward declaration of type `XMLWriter` and should avoid the nested header This elimination of the `unique_ptr` makes PluginDescriptor lightweight and copyable.  Good, was that one reason for these changes? My last remark for this round of review:  I understand these changes of PluginManager and PluginDescriptor but I’m waiting to see how they are used in the next rebasing of the other work for plugin validation.

The suggestion in old comments that PluginDescriptor might become a root of a class hierarchy— this didn’t happen here and I suppose it will not, or else I would have seen it in these preliminaries.  No need yet for that other idea. Thanks! Probably I misunderstood what you said, so I'll revert those changes (except changes in `PluginManager::Load`), and squash this commit with the previous one The main purpose wasn't the performance improvement. XMLTagHandler is usually inherited by other types and thus `mCurrentTagAttributes` become a part of objects of those types, but it used only during xml parsing. It was one of the reasons, yes. Also PluginDescriptor now inherits XMLTagHandler, which could make state maintenance a bit more complicated Alternative might be use attached objects instead of building a hierachy "
2904,2022-05-08T13:16:49Z,2022-05-10T15:18:14Z,Paul-Licameli,0,0,1,4,1,1,1,[],,1,180089.0,0,0,0,0,73995190.216378,,0,1,0,False,[],"I stepped-debug both unfixed and fixed, I think the fix is ok","I stepped-debug both unfixed and fixed, I think the fix is ok","... with no waveform visible because there are drag handles in both channels
of a stereo track make by joining two mono tracks

Resolves: #2900

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2906,2022-05-09T14:10:03Z,2022-05-09T16:06:52Z,Paul-Licameli,0,0,1,336,78,1,1,[],,1,7013.0,0,0,0,0,74078672.826868,,0,1,0,False,[],Changes understood,Changes understood,"... anticipating the needs of AudioUnit, VST, and VST3 effects, to communicate
changes of controls to the plug-ins.  (Ladspa and LV2 don't need this because
with them, it is the host program that decides where parameter values are in
memory.)

Do all else needed to pass an instance through intermediate levels of stack,
starting at EffectBase::DoEffect().

Make dummy instances in EffectManager and Nyquist, so that ShowHostInterface
can take the instance by reference instead of a possibly null pointer.

Nothing is done yet with the argument.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2843,2022-04-20T10:56:51Z,2022-05-04T21:45:05Z,Paul-Licameli,1,3,11,1009,11,3,2,[],1161053.0,1,1248498.0,0,0,0,0,74490381.227185,,0,11,0,False,['Paul-Licameli'],"> I understand the changes, except for commit ""Rewrite smart pointer for Apple Core resources"" - if it is worth, we could have a live chat to explain it.

Ah yes, I full wanted to invite @ksoze95 to review that one commit.  I think he will enjoy all the C++ technicalities in it.I understand the changes, except for commit ""Rewrite smart pointer for Apple Core resources"" - if it is worth, we could have a live chat to explain it.","I understand the changes, except for commit ""Rewrite smart pointer for Apple Core resources"" - if it is worth, we could have a live chat to explain it.","Resolves: #2840

In AudioUnit effects, clarify the confusions about ""Plug-in"" versus ""Instance"" initialization.

Besides that first commit, much other code cleanup matters, like modernization with custom smart pointer usage
(and some memory leak fixes), but nothing very important structurally.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I wonder if it would make sense to check `result ` before resetting the smart pointer? Not an object of this PR, but: I find the naming of this member `mMaster` very counterintuitive. The comment on its definition says `// non-NULL if a slave`, and the two lines here (1046-1047) just confirm this.  I will do that when I merge it!
"
2833,2022-04-19T10:05:21Z,2022-05-04T11:42:57Z,LWinterberg,0,0,1,2,1,2,2,[],,0,1302321.0,0,0,0,0,74526048.259766,,0,1,0,False,[],,,as per https://github.com/audacity/audacity/pull/2731/files#r850452297,
2889,2022-05-03T07:22:02Z,2022-05-04T10:29:07Z,Paul-Licameli,0,0,7,402,11,1,1,[],,1,97629.0,0,0,0,0,74530939.845077,,0,7,0,False,[],I see these changes are about refactoring and could find nothing wrong with them.,I see these changes are about refactoring and could find nothing wrong with them.,"A refactoring neeed to unblock #2668 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2883,2022-05-02T11:31:36Z,2022-05-03T07:22:25Z,pietro68,0,0,1,10,1,1,1,[],,0,71450.0,0,0,0,0,74628546.241883,,0,1,0,False,[],"Simple and effective.

But now the worker thread tests `IsMonitoring` and that depends on two members `mPortStreamV19` and `mStreamToken` which are not atomic.  Strictly speaking this meets the definition of a ""data race"".

But I will not insist, now, on review and correction of all uses of those member variables.

It might merit another issue for cleanup.
","Simple and effective.

But now the worker thread tests `IsMonitoring` and that depends on two members `mPortStreamV19` and `mStreamToken` which are not atomic.  Strictly speaking this meets the definition of a ""data race"".

But I will not insist, now, on review and correction of all uses of those member variables.

It might merit another issue for cleanup.
","Resolves: https://github.com/audacity/audacity/issues/2861

This is a cleaner (compared to former PR https://github.com/audacity/audacity/pull/2868) fix to all 3 bugs listed in the linked issue. 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2852,2022-04-22T11:16:44Z,2022-04-28T12:23:43Z,pietro68,15,13,5,744,4,2,1,[],14202.0,1,522420.0,2,0,0,0,75042468.768988,,0,5,0,False,"['pietro68', 'Paul-Licameli']","Notice that I call ValidateUI at the end of every event handler of LadspaEffect::Instance
 I made a new issue #2858 of the checkbox item for this and linked it to this PR
 I applied your feedback in per-steps commits for your convenience, and will squash them later, so that in the end we'll have only 5 commits: the 4 steps and the update of the guide. One final thing I will then do in an interactive rebase, is to move the things that could have been done in step 2 from step 4 to step 2. The recent changes all look good.  It remains to squash it.
 You will find that not all effects have an override of `TransferDataToWindow`.  Some my have `TransferDataFromWindow` which this effect did not.  If the latter function is defined, its steps are moved into ValidateUI() in step 2 when you define that function.
 I hope you understand that when I say certain changes should really belong in step 2 not step 4 of the transformation, it is because I want step 4 really to be only the essential steps of doing what its commit comment says -- switching the effect to real statelessness and externalized settings.
 > I hope you understand that when I say certain changes should really belong in step 2 not step 4 of the transformation, it is because I want step 4 really to be only the essential steps of doing what its commit comment says -- switching the effect to real statelessness and externalized settings.

yes, I will do that in an interactive rebase and then force-push here

 > You will find that not all effects have an override of `TransferDataToWindow`. Some my have `TransferDataFromWindow` which this effect did not. If the latter function is defined, its steps are moved into ValidateUI() in step 2 when you define that function.

info now added to guide, at step 2 I see the changes.  The final state of the code is good.

I notice now that even more lines might be removed from the header file.  The forward declarations of the wxControl subclasses is no longer needed.

I hate to ask for another round of review, but step 4 still changes more lines than I would if preparing this branch for a review, and line 2 still changes too few.

Step 2 declares the event handlers for the Validator, but does not define them (by moving them out of the Effect class) until 4.
 Step 3 can also delete some declarations of initialization functions that move into Instance. > Step 3 can also delete some declarations of initialization functions that move into Instance.

I found the following two and removed them: 

`void InstanceInit(EffectWahwahState & data, float sampleRate);`

```
size_t InstanceProcess(EffectSettings &settings, EffectWahwahState & data,
      const float *const *inBlock, float *const *outBlock, size_t blockLen);

```
 > I notice now that even more lines might be removed from the header file. The forward declarations of the wxControl subclasses is no longer needed.

ok, done

> Step 2 declares the event handlers for the Validator, but does not define them (by moving them out of the Effect class) until 4.

The thing is, by postponing the definition of the handlers to step 4, I thought the diffs can show better what needs to be done - i.e. only inserting ::Validator to the start of the handlers, plus a few small changes - without having duplicate code. But I also see a reason to specify as much of Validator as possible in the step dedicated to it, so I will proceed with that.


 > Now the steps 1, 2, and 3 fail to build.

That is unexpected: I can build them on my WIndows machine, plus the github builds were all successful One remaining small suggestion:  At step 3, the new declaration of `MakeInstance` should include `override`, which will suppress a compiler warning at least with clang on macOS.
I'm done reviewing.  The last comment is important for correctness, when issue #2489 is fixed, or else WahWah (but not Ladspa) effects will still suffer the bug described in that issue.

There are other suggestions, importantly to do more transformations in step 2 where they really belong, rather than 4.
 Now the steps 1, 2, and 3 fail to build.
","I'm done reviewing.  The last comment is important for correctness, when issue #2489 is fixed, or else WahWah (but not Ladspa) effects will still suffer the bug described in that issue.

There are other suggestions, importantly to do more transformations in step 2 where they really belong, rather than 4.
 Now the steps 1, 2, and 3 fail to build.
","Resolves: https://github.com/audacity/audacity/issues/2858

Wahwah was chosen as the next one to make stateless because unlike EffectEcho, it has explicitly declared widgets (and is relatively simple). Explicit widgets require more transformation operations, which were added to the guide in a new section in step 4.


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","What makes it correct at this step to remove this call -- is that the initializations it formerly did now happen in the constructor of `EffectEchoSettings` because you use in-struct initializers with the same default values as in the `EffectParmeters`.

So that is worth mention too in the guide.
 We aren't strict about naming conventions.  But the ""m"" prefix suggests a nonstatic data member, while these are just constants.  I would simply use no prefix.
 As I explained Wednesday, this should use EffectUIValidator as its base class now because it overrides ValidateUI for itself.  DefaultEffectUIValidator now exists only to default that function.  BindTo is available just from EffectUIValidator.
 Maybe add ""explicit"" The elimination of this table, and the use of BindTo calls instead, could be done at step 2 of the transformation.
 I think this member is unnecessary. You can use the inherited mEffect and `static_cast` it and write an inline convenience function.  In fact you did that already at step 2. The moving of event handlers to the Validator should be part of step 2 The moving of pointers to controls into the Validator should be done at step 2
 The `EffectWahWah::` qualifier can be omitted for brevity.  Static members of EffectWahWah are in scope in member functions of its embedded struct Validator.  Likewise for Instance.
 This is incomplete.  Every one of the `::On` functions that handles an event and changes mSettings needs to send that change into the message buffers.  So add a call to ValidateUI at the end of each.

In future, I hope Kit and I will merge a lot of work that will simplify the defintion of effect dialogs and make these event handler functions unnecessary: instead PopulateOrExchange can encode a complete and short description of how values are copied and how one control can be updated to be consistent with another (as with these slider and text pairs).  But, that's future.


 Ok I missed that. Interestingly, the effect works correctly (applying the right amounts and remembering them) in destructive mode even without that final call to ValidateUI(), but I guess the call would be needed when using it in realtime mode? The initialization of the base class below also changes the class name
 oops that's right"
2864,2022-04-27T14:44:08Z,2022-04-28T10:37:25Z,Paul-Licameli,1,0,1,148,7,1,1,[],71584.0,0,71601.0,0,0,0,0,75048843.913041,,1,1,0,False,['Paul-Licameli'],"> More complex fix than I expected. Also looks like that `completeList == false` implies `Track::LinkConsistencyFix() == true`, but that is fine

That is the intention:  a weaker consistency check is appropriate, when setting the link type of WaveTrack during deserialization, while the complete track list is not yet known.

Assertions should surely not have side effects!  Shame on me for forgetting that, or forgetting that the ConsistencyCheck in fact had side effects.
More complex fix than I expected. Also looks like that `completeList == false` implies `Track::LinkConsistencyFix() == true`, but that is fine","More complex fix than I expected. Also looks like that `completeList == false` implies `Track::LinkConsistencyFix() == true`, but that is fine","... Make a non-mutating version that only checks without doing repairs, safe
to use in a debug assertion.

Don't violate the assertion incorrectly when the reloading of the list of tracks
is in progress.

Fixes error from 93be3aeb that could crash debug build when opening a project.

All other uses of LinkConsistencyCheck() predated that commit, and are changed
to call the new name LinkConsistencyFix().

Resolves: #2863

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2815,2022-04-13T05:29:07Z,2022-04-22T10:17:59Z,Paul-Licameli,5,2,20,1086,9,2,1,[],644191.0,1,794937.0,0,0,0,0,75568410.430614,,0,20,0,False,"['pietro68', 'Paul-Licameli']","I think I found a regression: when using a ladspa effect in realtime mode, changes in the sliders positions are ignored.

Try for instance the AM pitch shifter. Generate a sine tone, instantiate an AM pitch shifter, then try moving the pitch shift slider left and right while the tone is being played (or use the ""start playback"" button) - with the latest release I can hear the pitch being changed, but not with the build made from this branch. > I think I found a regression: when using a ladspa effect in realtime mode, changes in the sliders positions are ignored.
> 
> Try for instance the AM pitch shifter. Generate a sine tone, instantiate an AM pitch shifter, then try moving the pitch shift slider left and right while the tone is being played (or use the ""start playback"" button) - with the latest release I can hear the pitch being changed, but not with the build made from this branch.

Could you perhaps bisect the problem within this branch?
 > > I think I found a regression: when using a ladspa effect in realtime mode, changes in the sliders positions are ignored.
> > Try for instance the AM pitch shifter. Generate a sine tone, instantiate an AM pitch shifter, then try moving the pitch shift slider left and right while the tone is being played (or use the ""start playback"" button) - with the latest release I can hear the pitch being changed, but not with the build made from this branch.
> 
> Could you perhaps bisect the problem within this branch?

Never mind doing that.

I looked at this problem and I see that:

- LadspaEffect::CopySettingsContents is never reached.  That is where communication of slider changes is supposed to happen.
- That is supposed to happen in the line `mpAccessState->WorkerRead();` in RealtimeEffectState.cpp
- Which is called during contruction of a ProcessingScope in AudioIO::TransformPlayBuffers in the buffer-exchange thread.
- But that line is skipped because `mwAccess.expired()` is true
- And mwAccess becomes non-null only in the function RealtimeEffectState::GetAccess()
- And that function is not yet called anywhere.

So:  you recall reviewing my changes in RealtimeEffectState, when I introduced GetAccess() and the associated classes that are supposed to communicate setting changes across threads.  But never calling GetAccess() anywhere is an incompleteness still in our new framework.

So there's not really an error (no evidence of one anyway) special to this pull request for Ladspa effects, which is written to trust the new framework.

So the fix should be figured out and pushed as a fix before this branch is rebased onto that and pushed.

 Issue #2849 is now open for this problem of applying the effect in realtime.

Let that problem be fixed later.  For now, test Ladspa effects only destructively, with the Apply button.  Don't let this other problem block review and merge of this PR.
 Convert LADSPA effects to new stateless system -- known problem: ...

... The effect does not respond to adjustment of sliders does not work during realtime playback.

The fault lies in the framework for stateless effects, not an error in these commits, themselves.

The cause is known and will soon be fixed.
I understand the changes and I tested successfully about 6 different LADSPA effects in destructive mode.",I understand the changes and I tested successfully about 6 different LADSPA effects in destructive mode.,"Resolves: #2768

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","typo ""thge"" Maybe I was trying to spell this word https://www.thefreedictionary.com/apophthegm"
2824,2022-04-15T12:00:26Z,2022-04-20T23:37:46Z,Paul-Licameli,0,0,1,8,1,1,1,[],,0,473843.0,0,0,0,0,75693225.900487,,0,1,0,False,[],,,"... Not only that, but Factory Presets > Defaults, and Import under the
Manage menu had a problem, that is now fixed.

Problem was that TransferDataToWindow() did not see the modified settings.
Moving it out of the scope of the ModifySettings() call properly delays the
call after the reassignment of EffectSettings.

Resolves: #2822

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2826,2022-04-15T17:00:16Z,2022-04-20T22:29:53Z,Paul-Licameli,0,0,1,4,2,1,1,[],,1,451785.0,0,0,0,0,75697294.036738,,0,1,0,False,[],,,"Resolves: #2825

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2777,2022-04-08T01:02:29Z,2022-04-20T11:54:22Z,imciner2,4,0,1,7,1,1,1,[],1005358.0,0,1075913.0,0,0,0,0,75735434.52603,,0,1,0,False,"['Paul-Licameli', 'imciner2']","@Paul-Licameli, Dmitry in the Discord chat said this is probably something you need to review. No problems. Except there are failures in the Linux CI builds but the details in the logs seem unrelated to your changes. @crsib  ? Yea, I think those CI errors are also appearing in other PRs as well.",,"The lib-ffmpeg-support-interface can be disabled (in which case no library is created with that name). So we shouldn't try to link the application against that library when no ffmpeg support is included.

I found this by trying to compile the master branch with the option `-Daudacity_use_ffmpeg=off`.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2818,2022-04-13T15:29:38Z,2022-04-20T07:06:45Z,Subhra264,1,0,1,10,1,1,1,[],506566.0,0,574627.0,0,0,0,0,75752692.078144,,0,1,0,False,['Tantacrul'],"Thanks a lot for working on this! It has come at the perfect time, since we're about to release non-destructive effects, which will should greatly reduce how often people copy and paste clips - and then apply destructive effects to them (which can lead to very increased file sizes).

We all completely agree with the UX you are proposing.",,"Resolves: #2568 

*(short description of the changes and the motivation to make the changes)*
## Motivation
> Considering that this can ruin a person's work after they have spent a lot of time and effort, and in addition to the many other ""smart clip"" bugs, I think that fixing smart clips needs to be treated with utmost priority, hence labelling as P1.

## Changes
### Current Behaviour
When parts of clips are selected and copied ( suppose there are 3 clips, and the selection starts from the middle of one clip, includes another clip, and finally ends in the middle of another clip), 2 new incorrect clips and 1 new correct clip are created. The correct clip is the one that is copied from the full clip (the second clip of the selection area). Other clips have the wrong `GetPlayStartTime()` and `GetPlayEndTime()` because the calculations are made assuming that those clips have the number of samples equal to the full original audio (`((numSamples + mAppendBufferLen).as_double()) / mRate `). Whereas, those incorrect clips ( 1st and 3rd clips of the copy ) contains samples only of the selected/copied area. So, in both the cases `GetPlayStartTime()` becomes negative, and then both the clips get adjusted to start from 0.

### Proposed  Behaviour
What my code does is, when a part of a clip is copied, the new clip contains all the samples as the original audio and also its mTrimLeft and mTrimRight are adjusted.
1. 
![audacity_smart_clips_resolved_copy](https://user-images.githubusercontent.com/59690052/163215793-1cc7569c-d7d8-4f47-8f4e-21e35c8cd52a.png)

2. 
![audacity_smart_clips_resolved](https://user-images.githubusercontent.com/59690052/163215845-bee4a70d-14c9-493b-9ea1-3fee04dfafeb.png)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
747,2021-02-28T17:46:25Z,2022-04-19T05:48:25Z,luzpaz,0,6,2,106,42,4,1,[],,0,35837585.0,0,0,0,0,75819127.086921,,0,2,0,False,[],,,"Found via `codespell -q 3 -S *.po,*.xpm,./lib-src -L ans,ba,clen,fiter,hashi,imagin,inout,levl,nin,ontext,optionaly,pard,parm,parms,pevent,pixelx,screem,siz,sord,strack,thisy,toke`","Is this OK? LGTM - @SteveDaulton confirm? > LGTM - @SteveDaulton confirm?

I can tell you that the fix is incomplete and incorrect, unless you change all ""chanel"" to ""channel"" and there is in fact more than one occurrence.
 @Paul-Licameli JFTR, i did a sourcecode-wide search for 'chanel' and came up with nothing. What am I missing? You are right, I was confused Looks OK to me."
2832,2022-04-19T08:42:10Z,2022-04-19T12:00:12Z,pietro68,1,10,1,211,1,1,1,[],11814.0,0,11882.0,0,0,0,0,75821486.863892,,0,1,0,False,['pietro68'],"Thanks for the feedback, I integrated it.There is no reason to block a merge of this text file that will not affect the build at all.

I point out many qualifications I could make to the procedure.  Update your document in response, or not, as you please.
","There is no reason to block a merge of this text file that will not affect the build at all.

I point out many qualifications I could make to the procedure.  Update your document in response, or not, as you please.
","Only a formal PR to add the guide to make an effect stateless, which mirrors what was done in https://github.com/audacity/audacity/pull/2801

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If you think adding this memo to the source code tree will be a helpful reference to you and others, why not.  We should aim to delete this again when all effects have been migrated. Of course this guide should say ""Let use use EffectEcho as an example"" and it might refer to commit ids that made this example transformation. We may transform other effects that are not per-track effects but will be made stateless too I did say, avoid real use of `GetSettings` until the last step.

Another possibility, which I am pursuing in my transformation of AudioUnit effects (a big recent PR that is still a draft and doesn't yet do the validator), is that I MAY put all the needed calls to GetSettings() in early, BUT I do not yet use EffectWithSettings<> and the definition of GetSettings() that it generates.  Instead, I define GetSettings() to ignore its argument and return mSettings in the effect object.  At the last step of real statelessness, I can delete the definition of GetSettings() but leave the calls.
 For some effects, this will be more than 3.  See the example of LadspaEffect::Instance in the waiting PR.
 Or the second template argument may be just Effect for those that are not per-track.  No examples of this exist yet. Also remove the definition of GetSettings() if you took the alternative I described above ... And RealtimeInitialize, etc.
 Or (as in LadspaEffect::Validator) you might need only access to get the settings to be copied:

```
   Validator(EffectUIClientInterface &effect,
      EffectSettingsAccess &access, double sampleRate, EffectType type)
      : EffectUIValidator{ effect, access }
/* other member initializations */
      // Copy settings
      , mSampleRate{ sampleRate }
      , mType{ type }
      , mSettings{ GetSettings(access.Get()) }
   {}
``` There may be a fifth step:  see the commit I recently pushed to the branch for ladspa effects.

`MakeSettings` and `CopySettingsContents` may require explicit definitions instead of those generated by the template EffectWithSettings.

That does not apply to built-in effects where the settings structure simply contains several scalar fields and no variable sized containers.

For Ladspa, you can see that MakeSettings() instead allocates a vector of values, whose size is not known at compilation time but depends on other information that the effect is queried for.  So default construction of the settings, as in the generated MakeSettings(), will not do.

Then CopySettingsContents must also be overridden, not for correctness but for efficiency.  The override is supposed to avoid memory allocations when the main thread calls it, so it should not use the copy constructors of the embedded std::vector but instead rewrite an existing vector without changing its capacity.  The assumption will be made that the destination settings containers are already correctly sized, because MakeSettings did that, or else full copies done in the main thread (where allocations are allowed) already did that.

Other third party effect families like AudioUnits may have Settings structures containing maps from strings to values, instead of vectors, but the problems will be similar.

"
2731,2022-03-25T14:33:41Z,2022-04-13T08:08:42Z,LWinterberg,4,3,3,1093,3,3,1,[],1525366.0,0,1832423.0,0,0,0,0,76139855.214599,,0,3,0,False,"['crsib', 'LWinterberg']","TIL that github.com's ""rebase and merge"" is different to a rebase. will fix that another time. 

Also, it seemed to not help with anything anyway:

![Screenshot from 2022-04-12 08-11-15](https://user-images.githubusercontent.com/87814144/162892751-062071ef-49b2-4d05-bb4d-d3f6282bab75.png)

Not sure what exactly the problem here is. or why it just says ""Windows."" I'll also investigate that another time Can this be a bug in GNOME? https://gitlab.gnome.org/GNOME/gnome-software/-/issues/833 https://gitlab.gnome.org/GNOME/gnome-software/-/issues/875 yeah, looks like it's a gnome bug. thanks for digging that up! ",,"Updates the credits to the current state of affairs another time, and also attempts to stop the .deb from showing up as ""proprietary""","Note that the appdata license field must use an SPDX identifier according to its spec, and this identifier was deprecated in SPDX version 3.0. It is replaced with either `GPL-3.0-only` or `GPL-3.0-or-later` depending on which you mean. If this field parses to something that isn't a valid SPDX identifier, then it can cause programs to think the app is proprietary. @LWinterberg can you please check?
 @imciner2, well spotted! The plain GPL SPDX identifiers were indeed deprecated as they were [considered ambiguous](https://www.gnu.org/licenses/identify-licenses-clearly.html). We need to use `GPL-3.0-only` due to the inclusion of VST3, even though most of our code is compatible with `GPL-2.0-or-later`. @LWinterberg, sorry I missed this in my review."
2801,2022-04-11T16:16:44Z,2022-04-14T19:38:59Z,pietro68,22,23,4,173,2,2,1,[],64758.0,1,662167.0,1,0,0,0,75835129.020612,,0,4,0,False,"['pietro68', 'Paul-Licameli', 'DavidBailes']","I pushed some of the requested changes. I still have to fully understand why settings are not saved and recalled in commits 1, 2 & 3. 

So far I understood this: 
in those commits, the base class of Echo is temporarily set to `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>`

I put a breakpoint in void `ShuttleGetAutomation::Define`; before and after those 3 commits, I see there that the values coming in, are the actual values set in the gui; with either of those 3 commits, I do not (they'd be the last saved ones)

Maybe this has to do with FetchParameters returning something wrong when the base class is `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>`?
 > I pushed some of the requested changes. I still have to fully understand why settings are not saved and recalled in commits 1, 2 & 3.
> 
> So far I understood this: in those commits, the base class of Echo is temporarily set to `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>`
> 
> I put a breakpoint in void `ShuttleGetAutomation::Define`; before and after those 3 commits, I see there that the values coming in, are the actual values set in the gui; with either of those 3 commits, I do not (they'd be the last saved ones)
> 
> Maybe this has to do with FetchParameters returning something wrong when the base class is `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>`?

Let's be satisfied with persistency of settings in the final commit, even if it fails in the intermediate commits.

I think the reason for failure is that MakeSettings() is redefined when you use the base class EffectWithSettings, so EffectManager is storing a real settings object instead of an empty `any`.  Then there are calls to SaveSettings and LoadSettings which really use that object.  But while EffectEcho is not yet really stateless, it is still using its own internal copy of the settings instead of the one stored in EffectManager.

 I see now, thanks for the explanation. 
What do you think is left to do here? would you like me to reduce the number of steps from 4 to 3, like you hinted before? The last push you see is after I rebased on branch `More-stateless-effect-utilities`, in order to try using `EffectWithSettingsBase` to preserve settings in intermediate transformation steps (i.e. 1-2-3)

But what I found out is that to preserve settings, I do not need that class. I just needed to correct FetchParameters to return the right address of the settings, and leave it there for all 3 intermediate steps. I verified it works for all 3 intermediate steps, and the 4th step works too.


 I'm not persuaded that the transitional steps are really all correct.  They may run the effect without crashing, but I think that at step 3, the effect does not apply the correct values.

I could approve the PR anyway if the final result is correct, but I would prefer that you understand the intermediate steps well enough to know why bugs do or don't exist in them.
 The third step does not apply settings correctly.

It might also be useful to use the Manage button to save a named preset.  Then verify that it is correctly retrieved when you load it, in each intermediate step.

To make the intermediate steps strictly correct, you should not use EffectSettings arguments of the Instance, and should store a reference not a copy of settings in the Validator, until the last commit changes that.  You should not use EffectWithSettings until the last commit, where you remove the mSettings member of the effect. My transformation of Ladspa to statelessness does as I described, with other work too so there are more commits.  I also don’t need EffectWithSettingsBase at any point.
 This also means the places where the Validator uses GetSettings are not added until the last commit.
 I confirm that step 3 does not apply the chosen settings. I will edit each commit now, following these directives:

a) for steps 1-3, inherit from StatefulPerTrackEffect
b) for step 4, inherit from EffectWithSettings<EffectEchoSettings, PerTrackEffect>
c) in steps 1-3, have a mSettings as a member of Echo, and use exclusively that one
d) in steps 1-3 in the Validator, use a reference to the the settings, not a copy, but then in step 4 turn it to a copy

Is the above what you meant?

It is not really clear to me how in step 3 I can access the Effect's mSettings member from within the instance - with a downcast to EffectEcho of the instance's mProcessor member?
 > I confirm that step 3 does not apply the chosen settings. I will edit each commit now, following these directives:
> 
> a) for steps 1-3, inherit from StatefulPerTrackEffect b) for step 4, inherit from EffectWithSettings<EffectEchoSettings, PerTrackEffect> c) in steps 1-3, have a mSettings as a member of Echo, and use exclusively that one d) in steps 1-3 in the Validator, use a reference to the the settings, not a copy, but then in step 4 turn it to a copy
> 
> Is the above what you meant?
> 
> It is not really clear to me how in step 3 I can access the Effect's mSettings member from within the instance - with a downcast to EffectEcho of the instance's mProcessor member?

You understand correctly.  static_cast of mProcessor is what I do too in the Stateless-ladspa-effects branch.

Be sure mSettings is deleted from the effect in the last commit, which will force you to make the other needed changes so that it continues to compile.


 Some changes to the last agreed plan:

step 2 could not inherit `StatefulPerTrackEffect` but had to inherit `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>` - otherwise Validator implementations have no access to `GetSettings()`

step 3 could not inherit `StatefulPerTrackEffect` but had to inherit `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>` - otherwise there are no calls to the instance's Process*** methods

TESTS
- preservation of last used settings: all steps pass

- switching between user presets: 
  steps 1-2-3 pass, 
  step 4 shows a **bug**: when having two user presets A and B in the list, clicking once on one of them is not enough to change the values, the preset must be clicked twice.

Is this bug due to an error in assembling final step 4, or is the bug in the framework? I will have to inspect this tomorrow but if you have a hint, it is welcome!



 I could reproduce the bug I noticed with the two user presets with DTMFgen too, so I conclude the cause is in the framework. I opened issue https://github.com/audacity/audacity/issues/2822 for that. > Some changes to the last agreed plan:
> 
> step 2 could not inherit `StatefulPerTrackEffect` but had to inherit `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>` - otherwise Validator implementations have no access to `GetSettings()`

No.

GetSettings() should not be used until the last step.  I think I said that already.  The parts of the Validator code that use GetSettings should wait until step 4 to be added.


> 
> step 3 could not inherit `StatefulPerTrackEffect` but had to inherit `EffectWithSettings<EffectEchoSettings, StatefulPerTrackEffect>` - otherwise there are no calls to the instance's Process*** methods
> 

No.  Inheritance of the class changes only in the last step.


> TESTS
> 
> * preservation of last used settings: all steps pass
> * switching between user presets:
>   steps 1-2-3 pass,
>   step 4 shows a **bug**: when having two user presets A and B in the list, clicking once on one of them is not enough to change the values, the preset must be clicked twice.
> 
> Is this bug due to an error in assembling final step 4, or is the bug in the framework? I will have to inspect this tomorrow but if you have a hint, it is welcome!

 Alright, I can make step 2 still inherit `StatefulPerTrackEffect` if I comment out the calls to GetSettings, not a big problem there.

But... to make step3 inherit StatefulPerTrackEffect - I would have to leave ProcessInitialize, ProcessFinalize and ProcessBlock still belong to the effect and not to the instance. That's ok actually, it is just a little more work postponed to step 4.

I found the preset switching bug also in DTMFGen, I opened this issue for it: https://github.com/audacity/audacity/issues/2822 > I could reproduce the bug I noticed with the two user presets with DTMFgen too, so I conclude the cause is in the framework. I opened issue #2822 for that.

Are you sure the problem is in the framework?  Could it be a bug that already existed in 3.1? > Are you sure the problem is in the framework? Could it be a bug that already existed in 3.1?

The bug isn't present in 3.1.3 Oops I was wrong when I said step 3 can not inherit StatefulPerTrackEffect - it can!
I will now read your other comments and act on them. > > Are you sure the problem is in the framework? Could it be a bug that already existed in 3.1?
> 
> The bug isn't present in 3.1.3

Can you @pietro68  or @DavidBailes write up an issue with exact steps please?
 > > > Are you sure the problem is in the framework? Could it be a bug that already existed in 3.1?
> > 
> > 
> > The bug isn't present in 3.1.3
> 
> Can you @pietro68 or @DavidBailes write up an issue with exact steps please?

Yes, it is at https://github.com/audacity/audacity/issues/2822
 I think I addressed the last round of requests; all 4 steps tested ok, with the exception of the bug happening at step 4, also happening in the DTMFgenerator - see issue at https://github.com/audacity/audacity/issues/2822

Updated 4-steps guide:
[4 steps to effect statelessness.txt](https://github.com/audacity/audacity/files/8490739/4.steps.to.effect.statelessness.txt)
  At last this sequence looks like a transformation that is correct at every step.  I will merge it because you will be away for a few days.  I hope you can write a revised outline describing the procedure for transforming an effect, which you can repeat with other effects.
 Thanks for the merge! I already attached the revised outline in my previous comment here, but I think I will add it to the repository - a simple PR will follow for that.Just one unnecessary line and function argument that can be removed
","Just one unnecessary line and function argument that can be removed
","Resolves: https://github.com/audacity/audacity/issues/2755

Second attempt, after it was advised in https://github.com/audacity/audacity/pull/2772 to organize changes in 4 commits, all building and not changing behavior

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The steps aren't exactly as I described before, but that is all right.

Did you verify that each step in the transformation preserves the persistency of settings?

Maybe the second and fourth steps could be combined as the third step of three.

Because you never construct the Validator in the second commit -- it isn't necessary to make mSettings a reference and then change it to a value in the last step.
 My only objection is that this assignment to EffectEcho::Validator::mSettings is not needed, because it was already done in the construction of it.  Really the settings argument of this function isn't needed any more.
 I tried verifying persistency of settings. It happens only at the last step. 
In our previous discussion I noted that it did not happen in the first step and you said it was maybe not worth fixing, but I could at least try to fix it in the 2nd and 3rd steps.

I must be sure that I understood you right: you are suggesting that I could combine step 2 and 4 into a 3rd step; the pre-existing 3rd step would then become the second. Is that correct?

I modified the second commit so to have mSettings a value right from the start (will be observable in the next force-push) That's right! the correction of this will be visible in the next force-push. I still see the unnecessary assignment to mSettings.
 Did you look at the latest force-push?

there is an assignment `mSettings = GetSettings(access.Get());` in `EffectEcho::PopulateOrExchange` only at intermediate steps, but I guess that it is needed.

in the last step there is no such assignment, in either  `EffectEcho::PopulateOrExchange` or `EffectEcho::Validator::PopulateOrExchange`
 I reverse my previous comment at this line.

Do NOT put the validator into its final form at this commit.  Make mSettings a reference at this step.  Change it to no reference only at the last step. Do NOT add these lines in the second commit.  Only at the last commit. Again add this only at the last commit.

GetSettings should not be available until then.  The point where the echo settings move out of the effect and I to EffectSettings is only then.  Use EffectInstanceWithSampleRate to simplify.  Remove the member function and variable for mSampleRate.  Just inherit them. settings is an unnecessary variable name Do NOT name and the settings argument in step 3.  Add that only at step 4.

And step 3, static_cast mProcessor to EffectEcho and use its mSettings.  At step 4, remove those lines, as you must to compile without the mSettings member.  Only then use the arguments. Ok this is now what I expect for step 3. Ok just that the argument name settings isn’t needed at this step The base class should change only at this step.

EffectWithSettingsBase won’t be used, so you can interactively rebase, removing the commit from me.

This step causes a MakeSettings member to be defined and called.  You must understand that it is not correct to use GetSettings until this point, because the generated MakeSettings should not be used either before this.  Only when the mSettings member of the effect is removed, must these other changes be made too, to keep all steps of the transformation correct. ok, done I commented it out + put a TODO comment ""uncomment at final step"" I commented it out + put a TODO comment ""uncomment at final step"" ok, done done ok, done ok, removed Alright, commit with EffectWithSettingsBase removed.
The other point is understood now."
2812,2022-04-12T13:16:35Z,2022-04-13T15:14:19Z,Paul-Licameli,3,0,1,25,3,1,1,[],71474.0,0,93485.0,0,0,0,0,76328221.20879,,0,1,0,False,"['pietro68', 'Paul-Licameli']","I approve the code, but as you will see from my comment [here](https://github.com/audacity/audacity/pull/2801#issuecomment-1097752082) I do not really need the new EffectWithSettingsBase in order to achieve preservation of settings at every step. What shall we do then with this PR? > I approve the code, but as you will see from my comment [here](https://github.com/audacity/audacity/pull/2801#issuecomment-1097752082) I do not really need the new EffectWithSettingsBase in order to achieve preservation of settings at every step. What shall we do then with this PR?

You could still use EffectInstanceWithSampleRate to simplify the instance class.  Just inherit that, and omit the declarations of mSampleRate and SetSampleRate().

Is the rest of the pull request really correct?  I'm not convinced yet.
 Please approve this pull request.  I will merge only the first commit.  I use EffectInstanceWithSampleRate to rewrite Ladspa effects but I don’t use the other commit.Changes are fine with me.",Changes are fine with me.,"Resolves: #2811

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2795,2022-04-11T10:26:44Z,2022-04-14T14:03:36Z,ksoze95,3,7,3,127,4,2,1,[],11101.0,1,272228.0,2,0,0,0,76246069.283168,,1,3,0,False,"['petersampsonaudacity', 'Paul-Licameli']","On W10 I tested @ksoze95 's branch build:  audacity-win-3.2.0-alpha-20220411+3629298-x64-msvc2022 

Reset Configuration now appears to nicely reset the Window size to default in this branch build You may need to ReadWithDefault member of the integer valued settings, not Read, because the default can’t be given as a constant value at compile time. The code all looks good now with the use of settings objects!

The only small thing to correct is that there are some misspelled words in the second commit comment.
Do a little more to fix duplications.
 The duplication of string literals is fixed now.  I would squash the first two commits into one.

But wait!  There is another good cleanup to do here too:

Define global IntSetting and BoolSetting objects (see existing examples), eliminating several direct uses of gPrefs.

Because, I also want all those uses to disappear ultimately.  This PR is an excuse to accomplish a piece of that.","Do a little more to fix duplications.
 The duplication of string literals is fixed now.  I would squash the first two commits into one.

But wait!  There is another good cleanup to do here too:

Define global IntSetting and BoolSetting objects (see existing examples), eliminating several direct uses of gPrefs.

Because, I also want all those uses to disappear ultimately.  This PR is an excuse to accomplish a piece of that.","Resolves: #2716

Reset Configuration menu option now also resets the Audacity window to the default size.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I like the elimination of duplication.

Let's be modern and use `true` and `false`.
 I would prefer not to use auto for argument types.
 I would use auto only in very short lambas such as are given to `find_if` ... or in the unusual case that I'm `Visit`ing a `std::variant` There is still another opportunity to eliminate a duplication.  The string literals `""/Window/X""` etc. are duplicated in ProjectWindow.cpp, and I don't like such duplications and clean them up when I have an excuse to touch related code.

So I suggest another commit to define these strings as named constants in ProjectWindow.h.
 Second commit looks good.
 I have swapped out TRUE/FALSE for true/false, and removed duplications of the string literals ""/Window/X"", etc. I have replaced the auto parameter types with actual types.

Change the SaveWindowPreferences lambda to a simple function instead."
2807,2022-04-12T12:09:09Z,2022-04-13T14:57:21Z,crsib,0,0,1,3,1,1,1,[],,0,96496.0,0,0,0,0,76329256.977277,,0,1,0,False,[],,,"Journal tests timeout is now set to 3 minutes, so the job does not run for several hours in case something goes wrong

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2381,2022-01-05T11:32:23Z,2022-01-06T12:43:39Z,LWinterberg,3,0,1,14,2,1,1,[],2511.0,0,8455084.0,0,0,0,0,76353676.251217,,0,1,0,False,"['petersampsonaudacity', 'werame', 'SteveDaulton']","I have tested @LWinterberg  Leo's branch build for this - seems OK to me
![image](https://user-images.githubusercontent.com/50205984/148215970-fc776216-4988-4b62-afb8-a836a3f60b7f.png)
 Is Steve Daulton (@SteveDaulton)  really ""not currently active"" though? > Is Steve Daulton (@SteveDaulton) really ""not currently active"" though?

I've stepped down from the ""team"", though for now I'm still helping out as part of the Audacity community (mostly on the Audacity forum), and shall continue to make my plug-ins available to the community.",,on request of @petersampsonaudacity ,
2686,2022-03-16T13:41:43Z,2022-04-11T16:00:30Z,vsverchinsky,1,2,1,19,2,1,1,[],2337139.0,0,2337139.0,0,0,0,0,76415861.499581,,0,1,0,False,['petersampsonaudacity'],"Testing on W10 with latest alpha master audacity-win-3.2.0-alpha-20220412+17bfc14-x64-msvc2022

Looks good to go to me
",,"Resolves: #2614

AdornedRulerPanel was reparented to the track panel list so that when effects panel is shown ruler properly changes it's position

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Now that this vertical sizer only contains the top tool dock panel, there is no need for it.  The tool panel top dock might be parented directly to `topPanel`, simplifying.
 I'm not sure what subtle changes in keystroke navigation that might bring.
"
2782,2022-04-08T13:47:27Z,2022-04-12T07:49:26Z,pietro68,1,2,1,15,2,2,1,[],302294.0,0,324120.0,1,0,0,0,76441337.168075,,0,1,0,False,['Paul-Licameli'],"I approve now; squash this into one commit and merge it.
",,"Resolves: https://github.com/audacity/audacity/issues/2780
Resolves: #2700 

The fix was rather easy.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","1. Can you verify that commit 7f63376534dc645b1c4b78a669c6ca4266975093 introduced the bug, which did not exist before?
2. Can you fix it instead by calling ClampRatio() to avoid duplication of the logic?
3. Also make an in-class initialized of mNewPeak to 0, and for other members while you can (mRatioClip, mPeak).  Better to initialize members of built-in number types always, and better to do that with member initializers, not assignments inside the constructor.  In-class initializers are best for assisting the human reader of the code to be confident that it is right.

 1. yes, verified
2. yes (in next commit)
3. yes (in 2nd next commit)"
2798,2022-04-11T12:58:19Z,2022-04-11T21:21:23Z,Paul-Licameli,0,0,9,268,13,1,1,[],,1,30189.0,0,0,0,0,76479017.304147,,2,9,0,False,[],,,"Resolves: #2797

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2800,2022-04-11T14:57:04Z,2022-04-11T19:10:16Z,crsib,0,0,2,27,2,1,1,[],,0,15195.0,0,0,0,0,76486886.468546,,0,2,0,False,[],,,"
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2766,2022-04-05T00:04:24Z,2022-04-11T15:57:00Z,Paul-Licameli,1,12,16,1101,82,2,1,[],153651.0,1,575561.0,1,0,0,0,76498481.650702,,0,16,0,False,['Paul-Licameli'],"> 

I think the Linux build failures are spurious.  Dmitry told me to ignore similar in a recent PR.The Linux builds seems to have failed.

Need to fix SqliteSampleBlock.cpp so that it can be built with Visual Studio 2019 from within the IDE.","The Linux builds seems to have failed.

Need to fix SqliteSampleBlock.cpp so that it can be built with Visual Studio 2019 from within the IDE.","Resolves: #1129

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The struct keyword is not needed. Same a in Lyrics.h, struct keyword is not needed. Same a in Lyrics.h, struct keyword is not needed. Does the move constructor and move assignment operator need to be deleted as well? As discuss, this fails to build when running under Visual Studio 2019 IDE.

Had to change to std::shared_ptr<BasicUI::ProgressDialog> for it to compile. Removing the ProgressDialog.h, from AudacityHeaders.h did the trick. Removing the ProgressDialog.h, from AudacityHeaders.h did the trick. Incorrect, actually.  Try removing `struct`.  It won't compile.

It will compile without `struct` only if a previous line in the header has
```
struct UndoRedoMessage;
```

As I wrote it, it is an example of an ""elaborated type"" acting as a forward declaration introducing the type name into the compilation unit.

 Also incorrect for the same reason.
 ditto
 Good idea maybe but incidental to the purpose of this PR
 I see."
2759,2022-04-02T20:54:14Z,2022-04-05T18:12:45Z,Paul-Licameli,0,0,15,1452,78,1,1,[],,1,249516.0,0,0,0,0,77008737.531893,,0,15,0,False,[],"Looks like all the commits in this PR are contained in https://github.com/audacity/audacity/pull/2707 too, which I already reviewed - so I can approve this too.","Looks like all the commits in this PR are contained in https://github.com/audacity/audacity/pull/2707 too, which I already reviewed - so I can approve this too.","Resolves: #2758 

Utility classes to simplify the transition of built-in effects to statelessness.

Classes StatefulEffectBase and StatefulPerTrackEffect encapsulate the reliance of EffectInstance classes on their effects to
hold state.  They are used by default for all the built-ins.  But the dependencies of individual effects on these classes can be
broken.  EffectDtmf will be the first example.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2707,2022-03-22T10:24:23Z,2022-04-05T18:20:19Z,Paul-Licameli,3,4,2,156,2,2,1,[],250037.0,1,1238161.0,0,0,0,0,77008283.693337,,0,2,0,False,"['pietro68', 'Paul-Licameli']","I have force-pushed it to be up to date with #2698 and to fix the Linux and Windows build failures.
 > I got a sense of what the changes are about - mostly about defining new classes, changing the inheritance lines of the existing ones, moving some methods, and most importantly having the concept of EffectInstance in place.

Did you exercise all the new code in the debugger too?
 Not all of it, I only tried the DtmfGen on some breakpoints. I will do a deeper exploration in the debugger then.I got a sense of what the changes are about - mostly about defining new classes, changing the inheritance lines of the existing ones, moving some methods, and most importantly having the concept of EffectInstance in place.","I got a sense of what the changes are about - mostly about defining new classes, changing the inheritance lines of the existing ones, moving some methods, and most importantly having the concept of EffectInstance in place.","Resolves: #2576

Make DTMF the first effect (generator, to be exact) that externalizes its settings and state.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Github will not allow me to comment on line 102 so I will do it here.
On msvc2019 I get this error:

`error C2397: conversion from 'size_t' to 'int' requires a narrowing conversion`
 When I try to generate a sequence, I get an access violation. I traced the root cause to this point.

When this point is reached, mSampleRate is 0.0 (as defaulted in class `Effect` and never changed since) and that is sent to the created instance.

That, in turn, will make `numSamplesSequence`, `numSamplesTone`, `numSamplesSilence` be all 0 when they are calculated in `EffectDtmf::Instance::ProcessInitialize`, and that in turn will trigger a violation access in `EffectDtmf::Instance::ProcessBlock` (because the correct indexing of the string containing the sequence depends on those values being right).

 Yes.

Please see the latest force push, in which the Instance class overrides SetSampleRate().

And now this PR depends on not one but two other pending PRs !

 I see this has been fixed in later commits, ok"
2753,2022-03-31T09:33:26Z,2022-04-05T17:50:08Z,Paul-Licameli,0,0,8,581,27,1,1,[],,1,461806.0,0,0,0,0,77010096.763718,,0,8,0,False,[],"Looks like all the commits in this PR are contained in https://github.com/audacity/audacity/pull/2707 too, which I already reviewed - so I can approve this too.","Looks like all the commits in this PR are contained in https://github.com/audacity/audacity/pull/2707 too, which I already reviewed - so I can approve this too.","Resolves: #2754

All is in place for different occurrences of an effect in (the same, or different) effect stacks can have independent state.

But work remains to rewrite each subclass of effect so it is really stateless and really makes independent instances.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2769,2022-04-05T13:51:09Z,2022-04-05T14:23:12Z,dozzzzer,1,0,1,6,1,1,1,[],520.0,0,1924.0,0,0,0,0,77022516.454676,,0,1,0,False,['LWinterberg'],"Fwiw: There is a YAML thing which you can use to make proper forms with checkboxes and dropdowns and everything: https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms

for example, tenacity is using it: 
https://github.com/tenacityteam/tenacity/tree/master/.github/ISSUE_TEMPLATE
https://github.com/tenacityteam/tenacity/issues/new?assignees=&labels=bug&template=bug_report.yaml
",,"Added actual behavior section to clearly point out what's happened and to not

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2761,2022-04-03T18:36:52Z,2022-04-03T19:35:35Z,sahilsekr42,0,0,1,1,1,1,1,[],,0,3560.0,0,0,0,0,77176537.749837,,0,1,0,False,[],,,"Resolves: #2745 

Added <developer_name> tag;

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2730,2022-03-25T14:29:02Z,2022-04-01T08:22:08Z,Paul-Licameli,2,1,26,3545,96,1,1,[],519287.0,0,582790.0,0,0,0,0,77389779.043158,,0,26,0,False,"['pietro68', 'Paul-Licameli']","I checked that the Nyquist prompt example worked.

While trying a build based on this PR, I found that all realtime effects would trigger an assertion when used, and that this happens because a member of `RealtimeEffectState`, specifically `EffectProcessor *mEffect;` was not initialized to nullptr; however, later commits happening on branch Realtime-effects-use-EffectInstance remove this member and replace it with something else, so this bug will be superseded. 

This bug was not introduced by commits in this PR, but maybe it is worth applying the fix before merging, so to leave realtime effects working on master.

The fix consists in simply adding  `= nullptr;`  to the declaration `EffectProcessor *mEffect;`
 That lack of initialization is an embarrassing mistake!  I will add a commit at the beginnig of this one to fix it.
I think I understand the changes; before merging, please read my last comment in the conversation.","I think I understand the changes; before merging, please read my last comment in the conversation.","Resolves: #2729

Next step of restructuring for stackable effects.  Define interfaces to make the distinction between a plug-in, which should
become stateless, from the instance(s) of it which may hold state.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",Trivial: numChannels instead of mNumChannels
2736,2022-03-27T15:08:03Z,2022-03-27T15:08:13Z,LWinterberg,0,0,1,4,1,0,0,[],,0,34.0,0,0,0,0,77797394.729124,,0,1,0,False,[],,,to avoid creating the wrong impression,
2744,2022-03-29T13:28:59Z,2022-03-30T13:28:11Z,ksoze95,3,0,6,184,39,2,2,[],72119.0,0,86386.0,1,0,0,0,77544187.119858,,0,6,0,False,"['Paul-Licameli', 'LWinterberg']","I confirmed that my added commit works to do what I want, when it is at the appropriate place in the sequence of commits.

Please fetch this commit, and do interactive rebase to put it first in the sequence of commits, then force-push this branch again.
 Otherwise, this PR looks good.

I would only question whether changing the default width of Audacity (when started with a fresh audacity.cfg files), to 1200 is acceptable to designers.

Also I need View > Toolbars > Reset Toolbars if I restart Audacity without a fresh audacity.cfg in order to see the desired changes of layout.  Old users of Audacity migrating to the new version might observe the same.

Hm, what's the fix for that?


 > I would only question whether changing the default width of Audacity (when started with a fresh audacity.cfg files), to 1200 is acceptable to designers.

It is, because:

* #2717 and the vertical volume meter may require further changes to the default width, so this is an acceptable temporary solution until we know just how wide things need to be
* Even if this temporary change becomes a permanent one, I think the only somewhat common desktop resolutions smaller than 1200 would be 800x600 and 1024x768 - and both of those are quite vintage. 
* And even if someone finds out their screen is too small for the new default, they will be able to just resize it.

> Also I need View > Toolbars > Reset Toolbars if I restart Audacity without a fresh audacity.cfg in order to see the desired changes of layout. Old users of Audacity migrating to the new version might observe the same. Hm, what's the fix for that?

This is indeed tricky. The Audacity installer has a toggle to reset configuration, though that of course is quite nuclear. Maybe there should be another toggle, checked by default, saying ""switch to new default layout"" which is essentially the View > Toolbars > Reset Toolbars?I'm trying to build each commit.

At the second commit, it built, but running Audacity, I noticed the wrong images were shown in the edit toolbar.  The old Cut image was on the button that still correctly did Trim, and so on.

The CMake Dependencies are not set up so that the *AsCeeCode.h files are regenerated when images are only deleted.

Deleteing the generated *AsCeeCode.h files and rebuilding does fix it.

How can the rebuilding be made automatic without requiring the developer to do that?

I think I have an answer, which I may give by pushing a commit onto this branch.  I suggest you then interactively rebase, permuting that commit to the start of the sequence.
","I'm trying to build each commit.

At the second commit, it built, but running Audacity, I noticed the wrong images were shown in the edit toolbar.  The old Cut image was on the button that still correctly did Trim, and so on.

The CMake Dependencies are not set up so that the *AsCeeCode.h files are regenerated when images are only deleted.

Deleteing the generated *AsCeeCode.h files and rebuilding does fix it.

How can the rebuilding be made automatic without requiring the developer to do that?

I think I have an answer, which I may give by pushing a commit onto this branch.  I suggest you then interactively rebase, permuting that commit to the start of the sequence.
","Resolves: #2716

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2698,2022-03-21T09:10:11Z,2022-03-25T14:50:45Z,Paul-Licameli,0,0,9,909,29,1,1,[],,1,366053.0,0,0,0,0,77971249.023918,,0,9,0,False,[],All fine by me,All fine by me,"Resolves: #2630
Resolves: #2646

Clear up confusing things in management of effects:  the host/client distinction that was hard to explain.  All effects,
including third-party, implement all of the ""host"" and the ""client"" interfaces.  Third party effects don't need a ""host""
shell Effect to forward certain method calls to them.

To achieve this, required also resolving the confusions about management of the duration setting of generators.  That is
now part of the non-polymorphic part of EffectSettings.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2720,2022-03-22T15:08:32Z,2022-03-22T16:21:50Z,ksoze95,2,0,1,2,1,1,1,[],5169.0,0,79518.0,0,0,0,0,78149884.013703,,0,1,0,False,"['crsib', 'Paul-Licameli']",">But did you also look further into the failure to clean up the single instance checker?

This is an old known issue with the same internal cause as #2114. Audacity closes all windows, but actually continues to run. @crsib @ksoze95 I approved this one-line null pointer check but didn't try a rerun.

Is the issue ""fixed"" only to the extent of not crashing on journal replay -- or is it a complete fix, meaning the journal replays to the end and Audacity exits with a successful return code to the shell?
A simple null check.

But did you also look further into the failure to clean up the single instance checker?

It would still be desirable to fix that.  In future, if journal playback should crash for any other reason, it should not leave behind a dirty environment.
","A simple null check.

But did you also look further into the failure to clean up the single instance checker?

It would still be desirable to fix that.  In future, if journal playback should crash for any other reason, it should not leave behind a dirty environment.
","Resolves: #2284

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2691,2022-03-18T11:56:55Z,2022-03-23T18:58:52Z,pietro68,1,5,2,12,2,3,1,[],348604.0,1,457318.0,1,0,0,0,78129181.029057,,0,2,0,False,['pietro68'],"I reverted my original fix and coded the fix suggested by Paul. I then repeated the tests in the description and I obtained a failure rate of 30% (reminder: without any fix it is 100%, with my original fix it is 0%)

I found out that the cause for this residual 30% failure rate was an outer `TransactionScope` enclosing the AutoSave (which also uses a `TransactionScope`); the former runs in the AudioThread, the latter (after coding the fix mentioned above) runs in the MainThread. This caused sometimes a failure when both TransactionScopes came to their destructor and ran concurrently the closing SQL statement (which consists of releasing a savepoint).

The outer `TransactionScope` was found to be actually useless (*) so I deleted it; I then repeated the tests, and I obtained a 0% failure rate.

(*) as far as I could see - I step-debugged the code to some depth and I found no uses of the DB between the start and the end of the outer `TransactionScope`, except the uses which are already protected by the inner `TransactionScope`.",,"Resolves: https://github.com/audacity/audacity/issues/2590

The first commit will be removed before merge, and its purpouse is only to make the bug happen much more often, so that the fix can be tested more reliably.

The second commit is the actual fix.

With the above mentioned enhancer of bug rate turned on, A/B tests were done like so:

1) add a mono track
2) add a label track
3) hit record button
4) click on the label track, press a key (e.g. ""t"") and *keep it pressed*
5) release the key when either the bug happens, or after 12 seconds of it not happening.
6) delete both tracks

Repeat the above steps 10 times without the fix, then again 10 times with the fix.

Without the fix: the bug always happened, between 2 and 4 seconds from the start.
With the fix:    the bug never happened.


- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Comment should really say, it's called from the main thread whenever there is any editing operation.  Most of those are disabled during play and recording but addition of labels is one example that is not (but that's not the exhaustive list of cases).
 You found a way to make the bug occur more frequently.  I speculated that the fix for it is to make transactions on the database effectively single-threaded (serialized).  You achieved that this way, and observed that the bug could not be reproduced where before it had been easy to reproduce (given the change of buffer size).

That is all good -- however, I fear other problems might result from this commit.

Either thread trying to use a TransactionScope might end up blocking for the duration of the other thread's TransactionScope.  If the Audio thread blocks for the main thread, that might be unacceptable.  Who knows how long the transaction commit on the main thread might take, in general?  It might be unusually long sometimes and so cause drop-outs in recording.

My first suggestion for fixing this bug was instead that you use BasicUI::CallAfter to let the Audio thread describe the work to do in a lambda, whose body is later executed on the main thread.

There is still some implied mutex locking and unlocking inside wxWidgets, in the management of that queue of work items to do in idle time, and some memory allocation too.  But the duration of that lock would only last for the pushing of the queue item.  The TransactionScope objects would only ever exist in the main thread, so the mutex you added to the class would not be needed.

This fix may require more lines of code -- you may need to explore the call graph to identify all possible paths to construction of TransactionScope that could happen in the Audio thread.

@crsib anything to add?



 Apologies, I overlooked that suggestion you wrote on the issue.

Alright, so I will try your suggestion then. This will mean, every auto-save of the wave while is being recorded, will happen in the main thread instead of the AudioIO thread. 

Are we sure that the implications of this will not be problematic? like for instance, if the user records 1.5 hours of audio (as the user reporting the problem says he did), when the auto-saving happens, it will happen in the main thread, therefore blocking user input for all the time it needs to save (for instance, the stop button won't work during all the time it takes)

Caveat: I am just trying to imagine what could happen in situations like that, but I am a bit clueless really, maybe the wave saving is done incrementally, in that case the main thread will be blocked for the time it takes to save 6 seconds of audio, not 1.5 hours of it.

 > Are we sure that the implications of this will not be problematic? like for instance, if the user records 1.5 hours of audio (as the user reporting the problem says he did), when the auto-saving happens, it will happen in the main thread, therefore blocking user input for all the time it needs to save (for instance, the stop button won't work during all the time it takes)

Am I right in thinking that user input may now be blocked during auto saves? So for, example, if the user presses the letter X to stop and set the cursor position, then this may be delayed by an auto save, so the cursor might be set significantly latter than the user would expect? If so, this is not at all satisfactory for keyboard users who use such commands for positioning the cursor, and start/end of the selection. I had a look at the changes, and I don't think they affect playback. So if this is correct, then my concerns expressed in my previous comment are not valid."
2664,2022-03-10T23:24:36Z,2022-03-11T08:53:03Z,Gootector,0,0,1,6,1,1,1,[],,0,34107.0,0,0,0,0,79202335.976783,,0,1,0,False,[],Agreed.,Agreed.,"Typos in alpassvc.c

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2665,2022-03-10T23:26:09Z,2022-03-11T08:52:44Z,Gootector,0,0,1,24,1,1,1,[],,0,33995.0,0,0,0,0,79202356.672043,,0,1,0,False,[],Agreed.,Agreed.,"Typos in alpassvv.c

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2662,2022-03-10T23:14:07Z,2022-03-11T08:52:32Z,Gootector,0,0,1,2,1,1,1,[],,0,34705.0,0,0,0,0,79202368.928456,,0,1,0,False,[],Agreed.,Agreed.,"Typo in alpassvc.alg

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2652,2022-03-09T11:48:14Z,2022-03-10T13:29:57Z,pietro68,1,0,2,48,9,1,1,[],10567.0,1,92503.0,0,0,0,0,79272124.220789,,0,2,0,False,['Paul-Licameli'],"Please squash the two commits.

The const_cast to allow a call to DefineParams is something I will accept for now, because fixing that is known to be a large and difficult thing.  So please comment to that effect.

Can you also make `GetDefinition` a const member function?
All good
","All good
","Resolves: point 4 of https://github.com/audacity/audacity/issues/2578

This is split in two commits - the latter only to highlight a change that may or may not be a temporary solution.

In EffectManager::GetCommandDefinition, a non-const pointer to a ComponentInterface is defined. That can not be turned in a const pointer, because later DefineParams is called on it, and one of the requisites of the original issue (at point 1) is that the latter stays non-const (not that it would be easy to make it const, anyway) - hence the const_cast.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2603,2022-03-01T12:51:22Z,2022-03-10T11:55:25Z,Paul-Licameli,4,17,9,1848,71,2,1,[],91374.0,0,774406.0,0,0,0,0,79277635.268206,,1,9,0,False,['Paul-Licameli'],"Force-pushed, only for resolution of conflicts after #2538 was merged
 Resolved conflicts again after merging #2582  ... And once more, after #2585 !
 Rebased again, taking the suggestions for more complete changes of terminology, but I disagree with the last two suggestions.

More added commits to review now, and more still to come.

",,"Resolves: #2627
Resolves: #2628

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`PluginPaths` return type feels inconvenient here. Considering that path is not necessarily file system path, I'd suggest `FindModulePaths` alternative.  Shouldn't it be `PluginProviderMap`? `PluginProviderMain`? Suggest rename `module`->`provider` too Seems like same sequence of calls (create and then initialize) is used for each plugin type, so `InitializePlugin` may be done during effect construction and removed from the interface. Number of output channels could be passed as a function argument to avoid possible diverges I was trying to avoid the term ""module"" because I thought it was imprecise terminology, and much other un-merged work of mine is going to use the term for feature add-ons that are not necessarily related to effects.

You want to change a function name, not the type alias `PluginPaths`?
 I can agree to use the term ""module"" generally to mean some dynamically loaded library in this sense, as well as for an add-on.  But the old use of ""module"" did not refer to that and I would rather use the term ""provider"" which was already present in some comments and function names.
 Good catch, the terminology change wasn't complete
 yes yes Maybe, but I will leave this as it is.

It's not part of any virtual function interface -- it is only a coincidental sameness in implementations of `LoadPlugin` across the families.

There is yet the confusion between plugin and instance of plugin to be worked out.  Some effects (not LV2 though) implement RealtimeAddProcessor by creating another object of the effect subclass.  In those cases we do not want to repeat the plugin initialization, but only do instance initialization.  That was the point of the earlier commit that split and renamed the function `SetHost`.


 I don't want to bother with that.  GetAudioOutCount() is an unchanging property of the plug-in with the one exception of the Reverb effect and I think even that one can be changed.
 That type is also used in one place, to name a member `mDynModules`, whose name I will change too
 If ""library"" does not mean ""system library"", then I don't have objections @Paul-Licameli Not relates to this PR, but I wonder why do we need `path` variable here? Good question.  I don't remember why.  It looked strange to me too.
"
2648,2022-03-08T21:54:36Z,2022-03-09T06:02:50Z,Gootector,0,0,1,2,1,1,1,[],,0,29294.0,0,0,0,0,79385353.269898,,0,1,0,False,[],"at this rate, the source code will be typo-free by the end of next week :D ","at this rate, the source code will be typo-free by the end of next week :D ","Typo in allegro.h

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2621,2022-03-03T17:51:45Z,2022-03-09T09:52:51Z,pietro68,2,14,13,700,84,2,1,[],345355.0,1,489666.0,3,0,0,0,79371552.410639,,0,13,0,False,['pietro68'],"I will do an interactive rebase so to redistribute the OSX fixes to keep every commit building, like I did for PR 2619 I interactive-rebased the commits in a way that fixes that came later now belong to the commit where they should.I'd like to avoid using mutable by moving the assignment to that variable
 One suggestion","I'd like to avoid using mutable by moving the assignment to that variable
 One suggestion","Resolves: point 2 of https://github.com/audacity/audacity/issues/2578

Again, trivial but extensive work. One member had to be made mutable.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This PR fails to compile on macOS.  AudioUnitEffect is compiled only for that operating system, so a Windows build could succeed while the necessary changes to AudioUnitEffect were not done to make its methods const.

Even if you don't have a Mac available, it should not be difficult to amend each commit to build for Mac by using a test editor to fix AudioUnitEffect at each step.



 The commit that adds `const` to `SupportsAutomation` has an incorrect commit comment.
 This is the one place where you added mutable.
 It is mutable because it is reassigned in `NyquistEffect::HelpPage`.  But it would be better to find a fix that does not rely on mutable.  Instead, mHelpFileExists should be assigned at some earlier place inside a non-const function that initializes the NyquistEffect.

What other things does the correct value of mHelpFileExists depend on?  When are those things assigned and no longer changed, so that you could move the computation of mHelpFileExists correctly to an earlier place that is not too early?

 right, corrected Alright, fixed now I moved the intialization of mHelpFileExists at the end of the constructor, please see commit 3aa08b2
 What other member variables does CheckHelpPage depend on?  Answer: mHelpFile

Where is mHelpFile reassigned?  Answer: NyquistEffect::Parse and NyquistEffect::ParseProgram

Are these functions called only in the constructor of NyquistEffect?  Answer: no (explore the call graph)

Therefore, the end of the constructor is not the correct place to assign the variable.

But, the end of ParseProgram would be the correct place.  Because Parse is called only inside ParseProgram.  So that whenever mHelpFile might change, the update of mHelpFileExists will be correct.
 You invoke CheckHelpPage() again, but I think you could rely instead on the result of it being pre-computed.  Call the function in one place only and make another member variable that stores the second value.
 Good catch - I was making the wrong assumption that `ParseFile `(which calls `ParseProgram`) was called in the constructor only, but it is called in ::`Init `too.  ok, done
 done One remaining small defect of this pull request is that the first commit fails to build on MacOS but the second commit corrects that.  The declaration of GetAudioInCount does not match the definition in the first commit.

I trust you to fix that as you rebase into latest master.
 That's right! thanks, corrected."
2650,2022-03-08T22:00:10Z,2022-03-09T06:01:40Z,Gootector,0,0,1,4,1,1,1,[],,0,28890.0,0,0,0,0,79385425.34728,,0,1,0,False,[],,,"Typo in px_win_ds.c

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2638,2022-03-07T01:45:24Z,2022-03-08T11:49:32Z,Paul-Licameli,0,3,9,787,77,2,2,[],,0,122652.0,0,0,0,0,79450949.529883,,0,9,0,False,[],"I think I have enough understanding of the code now. 

I only note that many uses of TransferData(To|From) do not check their return value, or if they do, they do not propagate failure up in the caller tree. But of course this is because the calling methods return void - so this has more to do with general architecture and is out of the scope of the current work.

","I think I have enough understanding of the code now. 

I only note that many uses of TransferData(To|From) do not check their return value, or if they do, they do not propagate failure up in the caller tree. But of course this is because the calling methods return void - so this has more to do with general architecture and is out of the scope of the current work.

","Resolves: #2629

Pass EffectSettings into still more functions, ultimately to allow elimination of the special setting Effect::mDuration which is common to many effects.  And that will allow elimination of the confusing class EffectHostInterface whose purpose isn't clear.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","My trivial observation is: the return value of TransferDataToWindow() here (and in other places) is not checked - but I can also see that this method returns void, so in case it returns false, there is nothing that we can do to deal with the failure.
 Just a general consideration about these methods: they return void, so if TransferDataFromWindow fails, the error is not propagated to the caller. TransferDataFromWindow may fail because a number was typed that is out of the allowed range, for example.  It may alert the user with an error dialog."
2619,2022-03-03T15:49:54Z,2022-03-08T10:48:23Z,pietro68,4,6,7,972,167,2,1,[],85339.0,1,413909.0,2,0,0,0,79454622.936542,,0,7,0,False,"['pietro68', 'Paul-Licameli']","All the automatic checks now pass.  Can you now make an interactive rebase to apply these fix ups earlier in the commit sequence? I squashed the two OSx fix commits into one, and squashed another fix commit, but I can not move the fix commits any earlier than where they are now (after my last rebase-forcepush), unless I split commit `fix OSx build` in five distinct pieces and squash these with other commits, and likewise split/squash `fix ApplicationPrefs` in two pieces. Should I do this? These commits are all going to be squashed together in the end anyway before the merge, or? > I squashed the two OSx fix commits into one, and squashed another fix commit, but I can not move the fix commits any earlier than where they are now (after my last rebase-forcepush), unless I split commit `fix OSx build` in five distinct pieces and squash these with other commits, and likewise split/squash `fix ApplicationPrefs` in two pieces. Should I do this? These commits are all going to be squashed together in the end anyway before the merge, or?

If you can make the extra effort so that each commit in the sequence remains buildable on MacOS, I would prefer that.

mic you do an interactive rebase, change each “pick” to “edit” and then you can stop at each commit, make the small fixes, and continue rebasing.
 I approve the changes.  Just these suggestions:

the last commit can be combined into the first with a “fix up.”

the comment of the first commit has a spelling mistake.

a new commit might add “override” as suggested above.

Now merge it.  Remember:  first, fetch latest master and rebase onto that.  Then, force-push.  Then, use the merge button on this page, choosing first from the menu, “create merge commit.”  Then before you confirm, you can edit the commit comment for the merge, giving an explanation of the whole.Another mutable to rewrite or at least to comment about
","Another mutable to rewrite or at least to comment about
","Resolves: point 1 of https://github.com/audacity/audacity/issues/2578

Adding const-ness to methods of ComponentsInterface had very extended ripple effects - hundreds of files had to be changed.
Changes were trivial (just adding ""const"" in the right places), except one case in which I had to declare a member as mutable - but without changing functionality.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The first commit in this pull request fails to build for me.  In this case, these classes are the problem:

AudioUnitEffects
AudioUnitEffectsModule
ApplicationPrefs

The last of these is not macOS specific -- and that explains why your PR is failing to build on all platforms.

The last of these is conditionally compiled, only if you enable check-for-updates in your build.  It is off by default for anyone who downloads and builds Audacity.  It is on for our Continuous Integration (CI) builds.

To turn it on for yourself, you must re-configure the project, setting certain CMake variables.  Re-configure just once, and those variable changes will be cached and reused with each build.

You can fix it using the cmake-gui program if you like, or do this just from a command line by passing `-Dname=value` arguments to cmake.

You need
audacity_has_updates_check=YES
audacity_has_networking=YES
 There is a misspelling in the first commit comment.

There is another use of mutable, which is not in a very important class.  Still, when you do use mutable or const_cast to cheat strict const correctness, you should either think about how to eliminate that, or write a comment to explain why it is defensible.

What is a good excuse for mutable?
* you are caching some computation, and you can prove that the cache is never invalidated by later changes of the data that the result depends on.
* the computation may be expensive.

More examination of this case tells me the first is correct but the second may not be.

Can you simply eliminate the mutable variable?  It is easy in this case.  The member variable mSymbol is used for nothing else but to impement `OldStyleCommandType::GetSymbol`.

Could you move the assignment of mSymbol to some earlier place in initialization of the `OldStyleCommandType` object?  (As I suggested for the other mutable in the other pull request.)

Actually, no, not in this case!

The only obvious place to try that is in the constructor of `OldStyleCommandType` -- but when you are still constructing a base class object, the virtual function overrides defined by the derived class (here, `BuildName` is the function) cannot be called yet.  That is a C++ language rule.

I wrote a lot about an unimportant bit of code but the principles should be remembered for other cases.

So, either comment about mutable mSymbol, or just remove it.  I say remove it.
 No problem to remove mSymbol, but what I will return then from ::GetSymbol() if I can not cache the symbol in the constructor? I solved it like this:

```
ComponentInterfaceSymbol OldStyleCommandType::GetSymbol() const
{
   return BuildName();
}
```


 That's good enough
 Thanks, that worked “override” is missing from these function declarations.  It would be nice to add a commit that supplies it.  Not essential though for this issue."
2641,2022-03-07T22:06:44Z,2022-03-08T06:38:19Z,Gootector,0,0,1,2,1,1,1,[],,0,30695.0,0,0,0,0,79469628.500405,,0,1,0,False,[],,,"Typo in FreqWindow.cpp

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2642,2022-03-07T22:18:08Z,2022-03-08T06:37:41Z,Gootector,0,0,1,2,1,1,1,[],,0,29973.0,0,0,0,0,79469666.603438,,0,1,0,False,[],"Yes, this is a typo. I corrected my nyquist source upstream as well.","Yes, this is a typo. I corrected my nyquist source upstream as well.","Typo in spec-plot.lsp

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2643,2022-03-07T22:22:35Z,2022-03-08T06:37:30Z,Gootector,0,0,1,2,1,1,1,[],,0,29695.0,0,0,0,0,79469678.201209,,0,1,0,False,[],"Yes, this is a typo. I corrected my nyquist source upstream as well. Thanks.","Yes, this is a typo. I corrected my nyquist source upstream as well. Thanks.","Typo in xm.lsp

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2639,2022-03-07T21:58:02Z,2022-03-08T06:37:00Z,Gootector,0,0,1,2,1,1,1,[],,0,31138.0,0,0,0,0,79469709.702083,,0,1,0,False,[],,,"Typo in ExportFFmpegDialogs.cpp

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2644,2022-03-07T22:24:39Z,2022-03-08T06:37:17Z,Gootector,0,0,1,2,1,1,1,[],,0,29558.0,0,0,0,0,79469692.703986,,0,1,0,False,[],"Yes, this is a typo. I corrected nyquist source upstream as well. Thanks.","Yes, this is a typo. I corrected nyquist source upstream as well. Thanks.","Typo in seq.lsp

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2640,2022-03-07T22:02:31Z,2022-03-08T06:36:21Z,Gootector,0,0,1,4,1,1,1,[],,0,30830.0,0,0,0,0,79469749.586386,,0,1,0,False,[],"Yes, these are typos. I corrected them upstream in Nyquist sources as well.","Yes, these are typos. I corrected them upstream in Nyquist sources as well.","Typos in nyquist.lsp

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2623,2022-03-03T21:24:34Z,2022-03-05T14:06:03Z,CoderHuman,0,0,1,2,1,1,1,[],,0,146489.0,0,0,0,0,79701968.796263,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2585,2022-02-23T12:03:38Z,2022-03-02T16:03:06Z,Paul-Licameli,0,8,4,413,72,2,1,[],,0,619173.0,0,0,0,0,79954141.346081,,1,4,0,False,[],I think I am starting to understand RealtimeEffectState::AccessState so I can close this now.,I think I am starting to understand RealtimeEffectState::AccessState so I can close this now.,"Resolves: #2584

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I am guessing that the purpose of this class is to have something which we can query to check whether all numeric values in the text fields of the UI of an effect are in the valid range (I count only text fields - because I assume that the possible range of motion of knobs and sliders is already bounded to a valid range).

What I'd not expect here, is that when this validation object gets destroyed, the User Interface is closed too (as in, the dialog will disappear). Are not these two actions unrelated, in principle?


 I do not understand this comment: ""return... an object invoked to retrieve values of UI controls"" 
I look at the definition of EffectUIValidator and all I see there is `virtual bool Validate() = 0;` - is there a plan to extend that interface later on? I just saw what happens in the following commit: `mClient.CloseUI();` was replaced by `mpValidator.reset();` which will trigger the dtor and close the UI, so now the `mEffect.CloseUI()` makes sense; however, on a semantic level now things are a bit confusing. You are correct about the purpose of the sole virtual function of the class.

See the existing overrides of EffectUIClientInterface::CloseUI() which still had to be called somewhere after this reorganization.  It does not cause the dialog to disappear -- rather, it happens during `EffectUIHost::OnClose` which is preparing the dialog for destruction.

It is a place where certain cleanup tasks must happen (like popping the event handler on a window), complementary to the setup tasks that are done in `EffectUIClientInterface::PopulateUI` which is the factory for this object.

The object exists to do more than satisfy the virtual function interface:  it also sets itself up to handle user interface events, and update the EffectSettings object that is accessible through the `access` argument that was given to `PopulateUI`.

 When I said ""retrieve"" I mean the object is expected to respond to the `Validate` message by examining all controls and updating its state.  I did not mean that it returns anything to the caller besides the success code.  I could clarify the comments.

 If possible, I would ask you to simplify this code; despite my efforts, I found that I do not have enough mental power to build in my mind a representation of what goes on here. 

I trust you that this works and is well designed, but if months from now I'd be asked to maintain this code, I would have a hard time finding my way around.

Would it be possible to start with this maybe:

**proposal #1**
make the I/O interface uniform across Main thread and Worker thread, so that Worker-Thread Reads/Writes have the same signatures as Main-Thread, like so:

```
const EffectSettings& WorkerRead()
void                  WorkerWrite(EffectSettings&& settings)
```


**proposal #2**
again if possible: could we do without the `ToMainSlot`/`FromMainSlot `structs, and have the two messageBuffers hold `Settings` objects directly? foobar
 haha
"
2594,2022-02-25T18:31:03Z,2022-03-02T15:24:01Z,pietro68,2,8,1,66,2,2,1,[],238891.0,0,420778.0,0,0,0,0,79956492.272211,,0,1,0,False,['Paul-Licameli'],"Overall, you took a different approach from what I expected, but it is acceptable, with the one exception of my first comment above, where you made an un-conservative change that wasn't explained.

Make changes and comments as I suggested, and just squash all to one commit -- this is small enough.
 Added commits are good -- but ProjectAudioManager::Paused() now fetches the atomic with implied std::memory_order_seq_cst which could just be relaxed.

Please make that one change and squash all to one commit, then merge this.
",,"Resolves: https://github.com/audacity/audacity/issues/2090

This solution consists of running the bare minimum set of code to fix the bug, while preserving existing behavior.

Whenever the sound-activation threshold is crossed (in either direction), all things that must be done in response to that are now all done in the paThread, without deferring anything to the main thread. So far this seems to be the only way to fix the issue - and what is executed in the paThread in response to the crossing is just read/writes of bool variables, without allocations or locks etc.

Changes are presented in a set of commits, to show step-by-step how existing functionality/state-changes are preserved, despite the final code being simpler than before; actually, even the first commit is enough to solve the issue, but I wanted to go on and simplify the code as much as possible.
In case of approval then I would squash commits together.




- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The simplification lost the restriction, testing GetOwningProject.  What justifies the removal of that condition?
 What ""proves"" that you aren't scrubbing?  I'll tell you:  This function is only reached if recording is happening, and recording is mutually exclusive with scrubbing.  So comment.
 This calls SetPaused on ProjectAudioManager.  It is only changing the boolean `mPaused`.

Strictly speaking, this means the boolean ought to be an atomic, tested and updated with relaxed memory ordering, because it is the non-main thread changing it here, but it is tested elsewhere in the main thread.

 I mean, comment that reasoning here.  But also, comment that `OnSoundActivationThreshold` is called only during recording, in AudioIOListener.h.  Make the assumptions you rely on an explicit part of the contract for that interface (even if only informally as comments).
 Good point. Nothing justifies it, it was my mistake. I will reinstate the check. I was assuming the same (i.e. that when recording, one can not scrub) but it is good to have a confirmation by you and yes, better write that in a comment. Completely right, I did not see this potential problem! I will do as you advice. I made the mPaused member an atomic, but in order to be able to toggle it atomically, I had to make it an int; please have a look at my latest commit and let me know what do you think."
2582,2022-02-22T13:55:14Z,2022-03-02T15:11:57Z,Paul-Licameli,0,0,4,698,91,2,2,[],,0,695808.0,0,0,0,0,79957212.270329,,0,4,0,False,[],I can see that the theme of this PR is to pass Settings in all places where they are needed - so all good for me.,I can see that the theme of this PR is to pass Settings in all places where they are needed - so all good for me.,"Resolves: #2577

The last batch of changes passed around EffectSettings into enough places to implement the inter-thread communication of
changing settings.  This batch passes EffectSettings into yet more places, including those on the path of destructive
effect processing (which does not have the same inter-thread problems), and to low levels of block processing that are
common to destructive and real-time processing.

Still nothing is ever in EffectSettings but a pointer to the EffectDefinitionInterfaceEx object.

Also still to do is break inheritance of EffectProcessor from EffectDefinitionInterface, and instead let EffectDefinitionInterface be a factory of EffectProcessor objects.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2537,2022-02-09T10:51:35Z,2022-03-02T14:05:23Z,Paul-Licameli,1,14,14,1055,86,3,1,[],1031212.0,0,1826033.0,0,0,0,0,79961206.947693,,0,14,0,False,['vsverchinsky'],"There seems to be a bug in gcc 9.3 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90415, which is used to compile ""Ubuntu 20.04 AppImage (x86_64)"" target, that results in compilation errorI think that at this point (and especially thanks to the live explanations) I can get a general idea of what this changes are going to achieve, and how.","I think that at this point (and especially thanks to the live explanations) I can get a general idea of what this changes are going to achieve, and how.","Resolves: #2538

EffectDefinitionInterface has alternative const methods using externalized settings objects: factory, save, load; but default implementations that just call-through to old functions, violating const-correctness and changing the single state as before.

EffectManager maintains a default settings object with each effect.

Each RealtimeEffectState has its own distinct settings object.

However no effect yet implements really independent settings.  The intent is to migrate existing effects to the new system
incrementally and phase out the old interface.  This branch accomplishes some of the necessary rewriting of other code in
terms of the new interface.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Can be squashed with ""Independent effect states"" commit Suggest moving this alias to `EffectUIHostInterface` scope Settings object always refer to a current state, so `RealtimeEffectState` too. This is for another PR, right? I noticed that `RealtimeEffectState` uses `MakeSettings` directly to create it's own state (unique, supposedly), then the question is why do we need this function? I've searched for the uses of this function and turned out that it's indirectly used by `EffectManager::PromptUser` and `EffectUI::DoEffect` which, I suppose, should be parametrized with settings as some other functions in this PR. This two functions, in turn, are used in many places where 'default settings' may be supplied. After object copied its contents will be discarded by `LoadUserPreset` I'm still not sure that what `EffectSettings` object represents here. Is it supposed to hold values for every parameter that could be changed? If so, isn't it very expensive then? This is meant to copy/map a CommandParameters to a Settings (at least that's how I understand it)
Should it not be a `const CommandParameters&` then? or at least, this is the dual of `SaveSettings`, and the ref to Settings is const there I'm not sure I understand the question.

The Settings object has no way to hold a reference to a RealtimeEffectState object.  But, each RealtimeEffectState object will hold an instance of Settings.  Maybe you meant that.

Besides which, the global registry of effects, EffectsManager, will hold Settings.  That is for purposes of applying effects in the old, destructive way.  Audacity now has a memory of the last settings you used for each effect, and applies the effect without prompting you again with a dialog, if you use the ""Repeat Last Effect"" command.  Also those settings appear again if you do reopen the dialog for another destructive application.

So if the Effect object becomes stateless, EffectManager must store one more Settings with the effect in the registry.
 If you were reviewing my commits sequentially, then you may written this before seeing that two later, I do that.  PromptUser is one function in which the default settings are retrieved from EffectManager.  The other is EffectUI::DialogFactory and DoEffect uses a pointer to that function.

 But observe that `mpAccess->Set(std::move(settings))` follows. Good idea
 The reading, modifying, and rewriting of EffectSettings stored elsewhere is done this long way using EffectSettingsAccess.  The last commit in this branch introduces another implementation of that abstract class, which handles inter-thread communication of changes of settings.
 That is the idea.

For each of our built-in effects, that will only be a few numbers and booleans, and `CopySettingsContents` would be overriden just to copy them, rather than copying the std::any which implies memory allocation.

 You are right, but when I try to do that, there is some strange code in Nyquist.cpp that is mutating the parameters sometimes.  Probably unnecessarily, and I will figure out a fix.  I have issue #2578 to address these const correctness issues later.
"
2565,2022-02-17T16:35:04Z,2022-02-25T15:52:46Z,vsverchinsky,6,30,4,488,15,2,0,[],64233.0,0,688667.0,0,0,0,0,80386765.369245,,0,4,0,False,"['Paul-Licameli', 'vsverchinsky']","I'm done with a round of review.  I await your answers.
 See this, about difference between `SetBackgroundColour` and `SetOwnBackgroundColour` https://docs.wxwidgets.org/trunk/classwx_window.html#a37219df52734626e23401fd83b25d8a0

I build with modification to show the effecs panel, and I can confirm that the background color updates correctly with theme change.

The separator is draggable.  There is a limiting left position, but it can be dragged right as far as the edge of the window, crowding out the track panel.
 > See this, about difference between `SetBackgroundColour` and `SetOwnBackgroundColour` https://docs.wxwidgets.org/trunk/classwx_window.html#a37219df52734626e23401fd83b25d8a0
> 
> I build with modification to show the effecs panel, and I can confirm that the background color updates correctly with theme change.
> 
> The separator is draggable. There is a limiting left position, but it can be dragged right as far as the edge of the window, crowding out the track panel.

The documentation seems to be a bit outdated, because in the source code you'll find this:
```
    // in addition, there is a possibility to explicitly forbid inheriting
    // colours at each class level by overriding ShouldInheritColours()
    if ( ShouldInheritColours() )
    {
        if ( parent->m_inheritFgCol && !m_hasFgCol )
            SetForegroundColour(parent->GetForegroundColour());

        // inheriting (solid) background colour is wrong as it totally breaks
        // any kind of themed backgrounds
        //
        // instead, the controls should use the same background as their parent
        // (ideally by not drawing it at all)
#if 0
        if ( parent->m_inheritBgCol && !m_hasBgCol )
            SetBackgroundColour(parent->GetBackgroundColour());
#endif // 0
```  I informally approve the changes.  Do you wish to merge this PR now (I would recommend it) or wait to complete it with a button for showing and hiding the sidebar?  If you wait, then change the top comment to un-link it from the issue, which it does not completely resolve.
 @Paul-Licameli I've added 3 new commits with ""Effects"" track panel button. The issues is, nominally, to enable a showing and hiding of the side panel.  I tried it, and the new button does show the side bar, but I expected it might hide it if I pressed it again, but not so.  There is no way to hide it again, it appears.

But I expect is so easily fixed as not to be a reason to withhold approval.
",,"Resolves: #2475
Resolves: #2474

Adds an effects panel container, and applies neccessary project window window structure changes, and ""Effects"" button to the wave tracks that opens panel. There is nothing yet in the panel itself, the example effects UI prototype, which uses that pannel added can be found here: https://github.com/vsverchinsky/audacity/tree/i2474-effects-button

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""an"" Wrong comment
 Maybe define pWind, then assign it to pConstWind, and get rid of the ugly C-style pointer cast
 Let's get rid of the rest of EXPERIMENTAL_NOTEBOOK in the source tree.  That includes the line in Experimental.cmake.  The rest of the source code isn't available to turn it on again even if we wanted to.
 Put extra parentheses around this condition to suppress warnings (from clang at least).  Or rewrite as a for loop.
 Notice that the bottom toolbar docking area is part of the right side of the container window, therefore it will be narrower when the effects panel shows, rather than limiting the vertical extent of that panel.

Not right or wrong -- just saying we understand the consequence.
 Clean this up as a modern `static_cast` while you are visiting the neighborhood. Tab order reminds me that we may need to check out how tabbing now works in the presence of the new window.  @DavidBailes might have opinions.
 It would look a little nicer to me, to use a variable to eliminate the repeated calls to `window.GetTrackListWindow()` and `window.GetContainerWindow()` The only new #include in this PR, and it's a wxWidgets header.  No new dependencies among Audacity's own source code files.  That is good.
 What happens if the user changes the theme?  Do you need to add to `ProjectWindow::OnThemeChange` to reset this color?  Or, is the background color in fact not seen because everything else in the window hides it? Another background color you may need to update with theme changes
 Is Unsplitting enough without the call to Hide?
 Is the explicit Show() needed?
 What happens if you try to drag the separator?  Is that not wanted, and do you need to Bind and Veto another event?
 Thanks, will fix Thanks, will fix Makes sense, will fix Will do No need, I'll rewrite the loop Not sure that understand that, bottom toolbar docking area is a sibbling of the container window, isn't it? Ok Ok >What happens if the user changes the theme? Do you need to add to ProjectWindow::OnThemeChange to reset this color? Or, is the background color in fact not seen because everything else in the window hides it?

In my prototype branch I had changed background color in response to the theme event, but there was no visible effect, because of the child windows. I mistakenly committed this line.

>What happens if you try to drag the separator? Is that not wanted, and do you need to Bind and Veto another event?

If I understand you correctly you saying that we don't need the separator to be draggable? Turned out - yes, thanks I ask whether it is intended.

maybe a limit on rightward dragging is needed. You are right, I misread that
 unused variable Feel free to clean up wxMin, wxMax with std::min, std::max instead
 ""among"" instead of ""between"" is better English
"
2581,2022-02-21T18:08:43Z,2022-02-24T17:16:52Z,Paul-Licameli,0,0,1,83,2,2,2,[],,0,256094.0,0,0,0,0,80468120.041975,,1,1,0,False,[],I see now the purpose of this wrapper.,I see now the purpose of this wrapper.,"Resolves: #2580

Define a class template generating wrappers of std::any, making type distinctions.

Will be used by issue https://github.com/audacity/audacity/issues/2538, and may be re-used in the future.

Helps to solve the Ubuntu build errors that were blocking the pull request https://github.com/audacity/audacity/pull/2537 for that issue.",
2557,2022-02-15T11:28:11Z,2022-02-25T14:00:38Z,pietro68,1,14,3,173,2,2,1,[],175914.0,1,873147.0,1,0,0,0,80393499.043845,,0,3,0,False,['pietro68'],"Agreed. I am going to write many more things, so I will organize them in multiple commits for better clarity.Much more is needed to complete this communication between threads
","Much more is needed to complete this communication between threads
","Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The load and store above use no memory ordering, so they default to the strictest, `std::memory_order_seq_cst`

That is stricter than needed:  it is enough that the load be an acquire, synchronizing with a release in the other thread.

The storing of false again only needs to be relaxed.
 This comment about incorrectness elsewhere -- is correct, and thanks.

But let's improve and merge #2554 to make this comment unnecessary.
 This store is not correct to use relaxed ordering.  It should be release, so that when the main thread uses acquire or stronger, then there is a guarantee of ordering of other side effects across threads.

Side effects in this thread before the release will be guaranteed to be in the past when the main thread acquires.
 Still, that strengthened order will not be enough.  This thread needs to acquire the atomics that it is testing for transition changes, and the main thread needs to release those atomics when it sends its messages.
 Do not change treatment of `mAudioThreadTrackBufferExchangeLoopActive`.  I think that variable will be eliminated.  It is used only in the seeking code, which needs a serious rewriting.
 Spelling, ""acknowledge"" You detect the transition fom running to not-running and send acknowledgment.

The main thread waits for the acknowledgment when stopping the stream.

But recall what we discussed.  This isn't enough.  The main thread must make sure that this thread has first seen the transition from not-running to running, which should be done with another wait when starting the stream, and another acknowledgment sent from this stream.  (Maybe just one atomic that is an enumeration, not bool, is enough for this thread's acknowledgments.)

Without this other wait to acknowledge start, it is possible that the main thread could send a stop message soon after a start message but wait forever, because the worker never saw the transition to running, therefore never recognizes the transition back to not-running.

Maybe this is very unlikely for the normal stop, but maybe not so unlikely, for the other place where `mAudioThreadTrackBufferExchangeLoopRunning` becomes false, in the failure path for starting the stream.


 I removed the memory ordering specifications, because from what I read on cppreference.com, I understood that leaving the defaulted order  is actually equivalent to using release on store and acquire on load.

from https://en.cppreference.com/w/cpp/atomic/atomic/store

`void store( T desired, std::memory_order order = std::memory_order_seq_cst ) noexcept;`

from https://en.cppreference.com/w/cpp/atomic/memory_order

memory_order_seq_cst 	
""A load operation with this memory order performs an acquire operation, a store performs a release operation...""

Still, if we want to have more explicit code, I can specify the order

 done (manually, not with a merge) ok, done
 It is not equivalent.  It implies stronger conditions that might generate different code, depending on the processor.  As I understand, it's not actually stronger for Intel, but now we are not targeting only Intel.

 Is it all right that this store happens before TrackBufferExchange?  Yes, because the main thread only needs acknowledgment that the message was seen.

This is unlike the case with mAudioThreadShouldCallTrackBufferExchangeOnce where the store should really mean that the one-time exchange is done.

It may be worth commenting this difference.
 ok, done alright, I went back to the original load-acquire + store-release scheme"
2463,2022-01-21T15:26:49Z,2022-02-21T23:08:07Z,vsverchinsky,1,1,2,70,4,1,1,[],9397.0,0,2706084.0,0,0,0,0,80706245.968017,,0,2,0,False,['petersampsonaudacity'],"Tested audacity-win-3.2.0-alpha-20220121+3265124-64bit on W10  @vsverchinsky  Vitaly's branch

Looks to be fine now in this branchApproved with a small suggestion for documentation comments
","Approved with a small suggestion for documentation comments
","Resolves: #2272

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","You might format the comment for Doxygen:
/*!
 @return clip's title rectangle
*/
"
2566,2022-02-17T17:29:59Z,2022-02-21T18:48:36Z,Paul-Licameli,1,7,1,18,1,2,1,[],6159.0,0,350320.0,0,0,0,0,80721820.658438,,2,1,0,False,['Paul-Licameli'],"@crsib you may review again.  Now the fix looks rather different but still touches only one file.
",,"Resolves: #2545

Fix hanging dialog box on macOS.  See code comments for explanation.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Probably it should be conditionally compiled only on macOS? It will be harmless on the others.  I like to keep the conditional compilation to a minimum. Have you tested it on the others? Given that Windows build simply has failed I would say no Please keep in mind that besides linking issues this code has observable side effects. We had issues with this specific method on Windows already and I will not approve this PR until the build is verified on all platforms.
 ```
// ----------------------------------------------------------------------------
// wxYield(): these functions are obsolete, please use wxApp methods instead!
// ----------------------------------------------------------------------------
```

So says utils.h.

Windows build fails with a link error.

Well, I'll change my mind and make a conservative fix on Mac only and use wxApp as I should.
 Oh, how could I forget another thing?  This violates tookit neutrality too.  I need to hide it behind the BasicUI facade.

"
2536,2022-02-08T18:42:12Z,2022-02-18T12:27:42Z,crsib,19,19,5,361,13,2,1,[],29171.0,0,842184.0,0,0,0,0,81003224.065456,,0,5,0,False,"['Paul-Licameli', 'crsib']","Wow!  This is wonderful.  Thanks for figuring all of this out.

I have not approved all yet -- I want to read and understand all of AudacityTesting.cmake.

Very likely those CMake functions will need enhancement with more options.  Journal tests may need to run with a certain prior environment setup, such as having a particular audacity.cfg file already in place at startup, and then the environment would need cleanup after the test.  CTest gives you the means to do such things by defining setup and teardown commands as ""test"" too in a certain dependency graph.  We may also want to associate labels with test so we can filter them and run subsets.

But all that can be future work and no reason to delay this.
 I'm trying it in the Xcode build but I don't yet see how to build the tests.
 I couldn't build the tests because reconfiguring at the command line failed:

```
CMake Error at cmake-proxies/cmake-modules/AudacityFunctions.cmake:524 (add_subdirectory):
  The source directory

    /Users/paullicameli/Github/audacity/libraries/lib-strings/tests

  does not contain a CMakeLists.txt file.
Call Stack (most recent call first):
  cmake-proxies/cmake-modules/AudacityFunctions.cmake:563 (audacity_module_fn)
  libraries/lib-strings/CMakeLists.txt:33 (audacity_library)
``` > 

Oh forget that!  The directory tests was a bit of junk just on my own file system, from my own experiements with tests.
 This looks to be your local issue, lib-strings doesn't have tests directory. 

I think this is a leftover from the time you explored CTest OK now I see tests in the Xcode browser.  Waiting to build and run them.
 There are all those CI build failures however
 Gosh Python world is sad :-( 

https://github.com/aws/aws-sam-cli/issues/3661 ""Error: The process '/Users/runner/hostedtoolcache/Python/3.10.2/x64/bin/conan' failed with exit code 1""

I was glancing quickly at that, and misread the word ""headache"" in there
 Some third-party library broke half of the world again...
And I had issues with it when I was doing offline Linux builds as well. It is simply improperly packaged. I have built the tests in XCode, and confirmed that build fails if I edit the test program to have a syntax error.

Now I added `REQUIRE(false)` and I want to observe the consequences of a test failure.  How?
 Aha, I see RUN_TESTS

Great, I see test outputs.  Now we might consider what other CTest options or stderr messages from Audacity might make this display more understandable.
 There are different ways:

1. You can select a specific test as a run target on XCode (if you want to debug the failure)
2. You can build RUN_TESTS The journal sanity test makes a lot of spam, and so will every journal test:
```
2: 06:47:42: Debug: Warning: command doesn't exist: 'Cut'
2: 06:47:42: Debug: Warning: command doesn't exist: 'Copy'
2: 06:47:42: Debug: Warning: command doesn't exist: 'Paste'
2: 06:47:42: Debug: Warning: command doesn't exist: 'Trim'
2: 06:47:42: Debug: Warning: command doesn't exist: 'Silence'
2: 06:47:42: Debug: Warning: command doesn't exist: 'Undo'
2: 06:47:42: Debug: Warning: command doesn't exist: 'Redo'
2: 06:47:42: Debug: Warning: command doesn't exist: 'ZoomIn'
2: 06:47:42: Debug: Warning: command doesn't exist: 'ZoomOut'
2: 06:47:42: Debug: Warning: command doesn't exist: 'ZoomToggle'
2: 06:47:42: Debug: Warning: command doesn't exist: 'ZoomSel'
2: 06:47:42: Debug: Warning: command doesn't exist: 'FitInWindow'
2: 06:47:42: Debug: Unrecognized accel key 'NUMPAD_ENTER', accel string ignored.
```

Let's have an issue to clean that up
 > And still, I have very that if you need to it for unit tests you have serious design issues and should reconsider them. `add_unit_test` is expected to be used only to create unit tests.

For unit tests, avoid fixtures for sure, but for the high level journal tests, fixtures could make sense.
 > I have a very strong opinion that unit test should return 0 on success

But again, consider journal tests.  Maybe we will want those to write stuff to stderr to be filtered, and we will want to define success and failure some other way based on outputs.  @Penikov might use capabilities like that.

 Well, `add_journal_test` will be modified accordingly then :)

Like we can say `add_journal_test( fail.txt EXPECT_FAIL )` or similar.  > There are different ways:
> 
> 1. You can select a specific test as a run target on XCode (if you want to debug the failure)
> 2. You can build RUN_TESTS

1. Good, I have confirmed that I can put a break in a test executable and hit it in the debugger.
 🥳 I have finished my review.
 
Just some spelling mistakes in comments in cmake scripts that should be fixed immediately.  Otherwise, suggestions for improvements, but nothing that needs to be done before merging this.
 Reapproval
","I have finished my review.
 
Just some spelling mistakes in comments in cmake scripts that should be fixed immediately.  Otherwise, suggestions for improvements, but nothing that needs to be done before merging this.
 Reapproval
","Resolves: #2478 

This PR introduces a framework for automated testing in Audacity. It is now possible to define the following types of tests:

### Unit Tests

`add_unit_test(NAME name SOURCES file1 ... LIBRARIES lib1 ...)`

This function creates an executable called `${name}-test` from the sources files (`${file1}`, ...). and linked to libraries (`${lib1}`, ...).

Catch2 is linked implicitly. There is no need to define a main function in the unit test.

### Journal Tests

`add_journal_test(journal_file)`

Adds a test, that runs Audacity with the journal `${journal_file}`. The test name is based on the name component of the `${journal_file}`.

---

Both unit and journal tests are registered with the CTest framework. This PR implements unit tests for FromChars set of functions and a journal test that checks that we can run Audacity at all. 

To be able to run journal tests Audacity now suppresses a few modal dialogs, shown during the startup:

* update permission dialog,
* auto-recovery dialog,
* extension registration on Windows.

For libraries, if the `libraries/(name)/tests` directory is present - CMake will include the unit tests for the library automatically. 

The `Build Audacity` workflow will run both unit and journal tests for each build. In the future, journal tests can be separated into a different nightly workflow. 

### Examples

Adding a unit test:

```
add_unit_test(
   NAME
      lib-string-utils
   SOURCES
      FromCharsTests.cpp
   LIBRARIES
      lib-string-utils
)
```

Adding a journal test:

```
add_journal_test( ""journal_sanity.txt"" )
```

Running tests:

```
$ ctest -C Debug
```

---------------------------------------------------------------------------------------------------------------

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""expectedValue"" ""integers"" You might lift the common assignment of `TEST_DIR` before the `if()`
 ""source files""
 It may be useful to add `PROPERTIES prop1 ...` and pass those to: https://cmake.org/cmake/help/latest/command/set_tests_properties.html?highlight=set_tests_properties

 And here are all the possible properties https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#test-properties ... unless one uses one of the properties:
* FAIL_REGULAR_EXPRESSION
* PASS_REGULAR_EXPRESSION
* SKIP_REGULAR_EXPRESSION
* SKIP_RETURN_CODE
* WILL_FAIL
 Maybe the function will have other keyword arguments to abbreviate other combinations of properties.  Don't ask me yet, what exactly.  Experience will tell what is useful.
 I have a very strong opinion that unit test should return 0 on success Catch2 needs to link something?  I thought it is just one amalgamated header file.  Or is that precisely what this line does, just adding in include path.
 This can be easily added in the future in case we find a need for any additional ctest properties  ""proper"" ""Modern"" CMake uses `target_link_libraries` for header-only libraries as well. Will we want arguments for COMMAND that can be given to add_unit_test?

Will we ever need to reuse a common test executable with different arguments?

Should there be a lower-level CMake function taken out of this, for invoking add_test with such options?

I'm thinking we might in future need a more complicated thing like setup and cleanup of fixtures for a test or a group of tests, in which each setup or cleanup step is itself described as a ""test."" https://cmake.org/cmake/help/latest/prop_test/FIXTURES_REQUIRED.html#prop_test:FIXTURES_REQUIRED


 I wonder if these fixes you figured out for dynamic libraries should be reused with image-compiler too.  Or have you done that already?

Maybe a common cmake function for such steps then.
 And still, I have very that if you need to it for unit tests you have serious design issues and should reconsider them. `add_unit_test` is expected to be used only to create unit tests.  Again maybe use a common low function for add_test, and consider how to pass other command arguments and test options into it.
 They can be reused, but the image-compiler is a) rarely built, b) does not test the functionality of a library. For these reasons, it is left as-is for now. Got it
"
2564,2022-02-16T23:42:50Z,2022-02-17T20:52:05Z,Gootector,0,0,1,28,1,1,1,[],,0,76155.0,0,0,0,0,81060016.133484,,0,1,0,False,[],,,"Update Polish Translation from Transifex
Changes: 'presetu' to 'preseta'.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2554,2022-02-14T11:02:48Z,2022-02-17T17:25:45Z,pietro68,2,6,3,56,1,2,1,[],88244.0,0,282196.0,2,0,0,0,81072378.129766,,0,3,0,False,"['pietro68', 'Paul-Licameli']","""In ::StopStream, a call to process ""once"" is always requested, because if (mStreamToken > 0) will always
be satisfied - I can not seem to reproduce a case when it is not (but somebody else might know better!)""

The input toolbar, with the small microphone image, says ""Click to start monitoring"".  If you do that, the meter responds to sound, but there is no playback or recording.  If you click again, you reach this test and it is false.

In that case TrackBufferExchange is not doing anything and there is no need to send it a message to stop.
 Alright - apologies for creating two PRs for the same problem, I did some renaming to make things less confusing. 

We now have this PR (2554 - renamed to Transportate fix part 1) and 2557 (renamed to Transportate fix part 2). If you are ok with it, I would move the requests/discussion threads still open here, to 2557 (Transportate fix part 2) and continue there only.
Maybe we can do a simplifer fix than I had described last week, but not as simple as this pull request stands now.
 The synchronization is still incomplete
","Maybe we can do a simplifer fix than I had described last week, but not as simple as this pull request stands now.
 The synchronization is still incomplete
","Alone this simple moving resolved the issue, because:
in all instances where mpTransportState was found to be empty during ::TransformBuffers, the call stack
showed that the call was originated in response to a request to process ""once"", and never in response to process ""LoopRunning"".

In ::StopStream, a call to process ""once"" is always requested, because `if (mStreamToken > 0)` will always
be satisfied - I can not seem to reproduce a case when it is not (but somebody else might know better!)

As long as `if (mStreamToken > 0)` always happens, there is no point in introducing what we discussed earlier,
(i.e. a new atomic and a waiting loop on that in order to signal that ""LoopRunning"" processing is really stopped)
it would be an unnecessary complication, because as the atomic to process ""once"" is later set to true and then
waited for until it is ""false"", this will always happen after the last processing coming from ""LoopRunning"".

However, if there are ever cases when `if (mStreamToken > 0)` is false, then we need this extra atomic, to wait
to be sure that ""LoopRunning"" processing came to a stop, before resetting mpTransportState. I have all this extra
things ready into a stash anyway - first we must decide if this extra complication is necessary.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This line moves very much later, so you must ask whether reodering it with any of the things it passed over has any important consequences.  I think not.  Still, I would not move it so very late.
 I suggest:  split the `if (mStreamToken > 0) {` block, that is close it earlier, then test the condition again.  In between, destroy state.

The block `if (mPlaybackTracks.size() > 0)` is harmless if it is outside the `if (mStreamToken > 0) {` block, and now destroying of state is next to it.

And that is good:  now the cleanup steps, duplicated here and in `AudioIO::StartStreamCleanup`, are next to resetting of mpTransportState in both places.

That means the other cleanup I would like to see -- moving the repeated steps into the destructor of mpTransportState, eliminating duplication -- can be done as a next step in a later PR. The elimination. of duplicate code can be a later pull request.

Do the things I suggested though, and I'm not yet satisfied.

Use stronger memory ordering, acquire and release, for `mAudioThreadShouldCallTrackBufferExchangeOnce` before I consider this fix correct.  But maybe the other atomic variables are not needed yet.

 Alright, suggestions implemented in next commit This is still incomplete without changing the uses of this atomic in `AudioThread::Entry` too, with more than
relaxed ordering.

Lock-free synchronization with an atomic variable requires both communicating threads to use the right memory orderings.

 I agree, please check next commit"
2559,2022-02-15T14:34:50Z,2022-02-17T13:14:50Z,vsverchinsky,4,0,1,9,1,1,1,[],707.0,0,168010.0,0,0,0,0,81087442.28352,,1,1,0,False,"['pietro68', 'crsib']","I get a different set of error messages now:

```
effects\VST3\VST3Effect.cpp(104,28): error C2065: 'FOLDERID_ProgramData': undeclared identifier
effects\VST3\VST3Effect.cpp(104,50): error C2065: 'KF_FLAG_DEFAULT': undeclared identifier
effects\VST3\VST3Effect.cpp(104,7): error C3861: 'SHGetKnownFolderPath': identifier not found
```


 @pietro68 do you have Windows SDK installed? I do not see any issues on CI or locally I seem to have Windows 10 SDK version 10.0.19041.0, but I also seem to not have both older and newer versions of it, at least according to my installation details (see attached picture) - anyway, Vitaly suggested a different header #include that solved the problem for me.

Do we need to list a specific SDK version on the how to build page?
![Capture](https://user-images.githubusercontent.com/16491307/154449750-44a2c0a5-0b34-416c-8c11-2ca694e02348.PNG)


 You actually do have SDK installed (the second line in you screenshot)Works for me now, thanks. Please see my comment on the conversation.","Works for me now, thanks. Please see my comment on the conversation.","An obsolete `SHGetFolderPathW` was used to retrieve system folder path, replaced with `SHGetKnownFolderPath`, also fixes wrong `#include`

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2503,2022-02-02T11:36:51Z,2022-02-10T17:30:42Z,Paul-Licameli,0,2,2,100,4,2,1,[],,0,712436.0,0,0,0,0,81676896.686285,,0,2,0,False,[],,,"Resolves: #2097

Rewrite an old lock-free synchronization between threads correctly with std::atomic (which didn't exist when it was originally
done)

Remove the last of the inappropriate uses of the `volatile` keyword in Audacity

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I see that wxASSERT is used almost everywhere in AudioIO.cpp - is this using of the standard `assert() `intentional? I mean, as a way to start reducing dependency from the wxWidgets lib? One, yes, it's good to reduce dependencies on wxWidgets where we can, though less important for some parts of widgets.

Two, in case the assertion failes, wxASSERT puts up a dialog box with a stack trace.  But dialogs should not be made from a worker thread.

Really I think assertions are supposed to be provable conditions that assist documentation of the program.  The proof of them should not require examining a large amount of code (that is why encapsulation is important) but may assume preconditions of functions have been honored by callers (and that is why it is important to state preconditions).

"
2514,2022-02-04T14:35:21Z,2022-02-09T15:22:36Z,Paul-Licameli,1,6,8,487,17,2,1,[],431085.0,0,434840.0,0,0,0,0,81770983.650156,,0,8,0,False,['pietro68'],Just as a note to myself for later: I tested 70555d3 with BassTreble and it works.All issues raised by me were solved.,All issues raised by me were solved.,"Partly Resolves: #2084

Make the interfaace EffectUIHostInterface almost sufficient for the needs of EffectManager, so it has less dependency on
fat class Effect.

The remaining exception is the use of Effect::Startup, to be addressed later.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","A Debug build will sometimes assert here, reporting that pScope is empty. Unfortunately this bug can not be reproduced through a definite sequence of steps, so it is probably due to synchronization issues.

In general I found that this happens when stopping playback, or when moving many times the playback position while playing by clicking on the ruler, however it might happen at the first stop/click too - it is nondeterministic but with maximum 20 clicks on the ruler while playing, it will be triggered. I found the commit which introduced this issue to be `27cbce8` (I can not seem to comment directly there - github reports a page not found)

This also happens on the current head (commit `8d84cd0` ) It would help me read and understand this code some weeks from now, if we could rename `mEffect` to `mEffectUIHost` or `mEffectUIHostInterface` in my simple test (have one mono track, instantiate BassTreble eff, press play) ::Process will exit early at line 173 because `mSuspended `will be true. I see this has been fixed by checking `if (len && pScope)` so now when pScope is empty, effect processing will be skipped.

My question now is: pScope being sometimes empty is something that we can consider normal?  That may be something to investigate.  The null check is defensive code.  But what you found may suggest that the steps to stop playback may not be synchronizing correctly.
"
2428,2022-01-14T03:37:06Z,2022-02-09T14:45:48Z,Paul-Licameli,1,2,7,545,48,1,1,[],1862556.0,0,2286529.0,0,0,0,0,81773189.750138,,1,7,0,False,['Paul-Licameli'],"@pietro68 if you fetch the updated version of this branch, the problem you mention should not recur.

This branch is based on ""Realtime-effect-manager-rewrite-part-3"".   That other branch has been updated with a fix, and now this branch is rebased onto the fixed version.
My ususal simple test passed, and I also tested that no additional latency happens when monitoring or recording.","My ususal simple test passed, and I also tested that no additional latency happens when monitoring or recording.","Resolves: #2082 
Resolves: #2098

This depends on first merging PR #2466

Manage the RingBuffers for playback differently.  Write track data into them, then transform in-place as needed for real-time
effects, then ""flush"" to make all visible to the consumer thread.  Do not do effect calculations on the consumer side, where
there are low-latency constraints and as little work as possible should be done in each pass.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","this part is affected by the same problem we have seen in PR 2500 i.e. mpState will be returned null - this because the code inside AudioIO::AddState was probably cherry-picked from Realtime-effect-manager-rewrite-part3. 
I can not test how effects work until that part will be fixed - so please merge future fixes from Realtime-effect-manager-rewrite-part3 into this and then I can try again. Trivial: everywhere else, wxASSERT is used instead. This will bring up the standard dev-env assert dialog."
2511,2022-02-04T12:47:00Z,2022-02-09T14:00:03Z,Paul-Licameli,0,2,10,346,12,2,1,[],,0,436387.0,0,0,0,0,81775939.151277,,0,10,0,False,[],,,"Resolves: #2094

Use atomics with relaxed memory order wherever the worker threads for audio playback and recording might read a value
that the main thread can concurrently change, so that all is properly done without ""undefined behavior.""

Remove all inappropriate `volatile` qualifiers, with one exception (addrressed in #2503).

Comment variables that are set by the main thread but remain unchanged during playback and recording, and so do not
require atomics.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Compiling fails on windows because of missing #include <atomic> in this header file. 
I added it (only in my local copy) and could move on testing. Fixed in the rebased branch, no other changes
"
2535,2022-02-08T17:59:45Z,2022-02-09T11:55:02Z,Paul-Licameli,0,1,3,206,3,2,1,[],,0,64521.0,0,0,0,0,81783441.002404,,1,3,0,False,[],"I see the point of having a templated write, so that we have a unique method to write either const references or rvalue references. Fine by me.","I see the point of having a templated write, so that we have a unique method to write either const references or rvalue references. Fine by me.","Resolves: #2534 

Extract MessageBuffer from PlaybackSchedule as a reusable utility for lock-free inter-thread communication.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","A very complex function to understand. I think it is worth commenting on its meaning or rewriting it without bit magic.

Also, the choice of types is confusing as well."
2500,2022-01-31T16:52:04Z,2022-02-09T13:23:53Z,Paul-Licameli,2,11,12,452,27,2,1,[],241279.0,0,765113.0,0,0,0,0,81778110.352605,,0,12,0,False,['Paul-Licameli'],"> Not really sure if I should ""Request Changes"" - I guess the defect I pointed out in the first conversation is being taken care of (or it will be shortly), and its solution will come up in a new PR - so I will select ""Approve"" instead.

No, my intention was to address the problems you found in this same PR, and now I have pushed again.  Please review again.
 All right, one MORE time!  Please see the last two commits.  All else is unchanged.
Not really sure if I should ""Request Changes"" - I guess the defect I pointed out in the first conversation is being taken care of (or it will be shortly), and its solution will come up in a new PR - so I will select ""Approve"" instead.","Not really sure if I should ""Request Changes"" - I guess the defect I pointed out in the first conversation is being taken care of (or it will be shortly), and its solution will come up in a new PR - so I will select ""Approve"" instead.","Depends on #2466

Partly Resolves: #2084

Further rewrites of the use of RealtimeEffectManager so that there are RAII scope objects wherever begin and end methods
of the manager must be called in complementary pairs.

A change for safe shutdown of processing that was first identified by Leland Lucius.  noexcept specifiers on steps that must
happen inside destructors.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","My usual test: two mono tracks and an EffBassTreble, then hit play, place breakpoint here.
When it breaks here, mpState is reported as empty, so no addition of EffectStates will be made. This will result in the tracks not being processed by the effect.
 Could we rename this to mpTransportState? when I first encountered this member in the code, I got a bit confused because now ""state"" default-maps in my mind to RealtimeEffectState As I commented earlier, at the moment mpState will be returned as nullptr in the moment I instantiate a BassTreble. 
There is no check here for (mpState == nullptr), I think it should be added I think I found the reason for this bug: mpState is not initialized until AudioIO::StartStream is reached, but that happens in response to pressing the play button, while the code above using mpState is triggered when instantiating an effect. could we rename this to pInitializationScope? (mpInitializationScope, actually) just to reduce the confusion in my head :-) 

anyway I see the point of this now, which is to make sure that any SuspensionScope or ProcessingScope will be bracketed by an InitializationScope, obtaining this guarantee at compile time. AddState needs to suspend conditionally, only in case playback is happening.  That was my mistake.
 ok ok
 test: open project with one track, instantiate a BassTreble before ever pressing play.

Again `mpState `will be returned nullptr, but this time because of a different reason:

the call to `GetOwningProject()` inside `AudioIO::AddState` will return nullptr.
this happens because the owning project is not set until `AudioIO::StartPortAudioStream` is reached, but that happens only after pressing play.

 Please watch out: even if I press play (and then stop) to set the owning project, and only then I instantiate a BassTreble, `AudioIO::AddState` will still return nullptr, but this time because `mpTransportState `will be null. > Please watch out: even if I press play (and then stop) to set the owning project, and only then I instantiate a BassTreble, `AudioIO::AddState` will still return nullptr, but this time because `mpTransportState `will be null.

Let's try this once more.  I made changes to fix this.
"
2516,2022-02-04T16:45:52Z,2022-02-08T12:14:30Z,crsib,0,0,1,422,11,1,1,[],,0,329322.0,0,0,0,0,81868674.248982,,0,1,1,False,[],,,"Resolves: #2477
Resolves: #1786

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2524,2022-02-07T13:03:30Z,2022-02-08T12:14:15Z,crsib,0,0,1,50,2,1,1,[],,0,83449.0,0,0,0,0,81868690.101109,,0,1,1,False,[],,,"Resolves: #1937 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2522,2022-02-07T12:11:17Z,2022-02-08T10:44:31Z,crsib,0,0,1,14,1,1,1,[],,0,81198.0,0,0,0,0,81874074.48705,,0,1,0,False,[],,,"Resolves: #2265

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2521,2022-02-07T11:14:42Z,2022-02-08T10:34:36Z,crsib,0,0,1,9,3,1,1,[],,0,83997.0,0,0,0,0,81874671.405028,,0,1,0,False,[],,,"Resolves: #1038 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2509,2022-02-04T11:42:22Z,2022-02-08T10:34:26Z,crsib,0,0,1,19,3,1,1,[],,0,341527.0,0,0,0,0,81874682.037207,,0,1,0,False,[],"I don't understand the details but I confirm that the build problems go away.
","I don't understand the details but I confirm that the build problems go away.
","Looks like macOS was randomly using Python 2

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2496,2022-01-30T01:09:04Z,2022-02-04T08:38:47Z,tamara-schmitz,0,0,1,22,1,1,1,[],,0,458983.0,0,0,0,0,82227224.720574,,1,1,0,False,[],,,"Added build instructions for openSUSE and Fedora as these require
Both package lists have been tested in fresh virtual machines running openSUSE Tumbleweed 20220128 and Fedora Workstation 35.

If your favourite operating system is still missing, feel free to contribute it too ;)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2491,2022-01-28T10:24:12Z,2022-02-03T15:17:50Z,crsib,0,0,1,6,1,1,2,[],,0,536022.0,0,0,0,0,82289678.538379,,0,1,1,False,[],,,"Using `file(WRITE)` ensures that all parent directories exist.

Resolves: #2163 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2492,2022-01-28T10:48:00Z,2022-02-03T15:12:14Z,crsib,0,1,1,15,1,1,1,[],,0,534258.0,0,0,0,0,82290015.116922,,0,1,1,False,[],,,"Resolves: #2210 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",typo: *Libraries
2481,2022-01-26T15:58:27Z,2022-02-03T15:11:50Z,crsib,0,0,1,26,1,1,1,[],,0,688407.0,0,0,0,0,82290039.661296,,0,1,0,False,[],,,"CopyLibs was invoked for modules only on macOS.

However, if the module depends on different set of libraries - Audacity will fail to load it.

Resolves: #2042

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2506,2022-02-03T12:59:26Z,2022-02-03T15:11:30Z,crsib,0,0,1,222,3,1,1,[],,0,7927.0,0,0,0,0,82290061.437961,,0,1,1,False,[],,,"Resolves: #2504

CopyLibs.cmake is hard to maintain and debug, especially on the macOS platform. This PR provides a python script that is used to collect and patch dependencies instead.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2145,2021-11-16T09:57:24Z,2022-02-03T14:52:17Z,crsib,0,0,1,17,4,1,1,[],,0,6843298.0,0,0,0,0,82291213.17996,,0,1,0,False,[],,,"Patches provide by xxjack12xx
Resolves: https://github.com/audacity/audacity/issues/430

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2466,2022-01-22T23:42:39Z,2022-02-02T10:20:09Z,Paul-Licameli,1,9,13,1021,18,2,1,[],221393.0,0,902357.0,0,0,0,0,82393839.956551,,1,13,0,False,['Paul-Licameli'],"I force pushed an updated branch, only to rebase onto recent master and fix the Windows build with another `#include`.
My last observation has been superseded by new code in part 3 (PR 2500) and I have no more issues to report.",My last observation has been superseded by new code in part 3 (PR 2500) and I have no more issues to report.,"Resolves: #2458 

Merge parts of the work of @lllucius that reorganize the realtime effects into separate per-project and per-track stacks, and
include the persistency of effect settings in the .aup3 project file.

The user interface to access realtime effects is temporarily removed in the intermediate commits, then restored in the last
one, but this restored version is only provisional pending further release 3.2 developments.  It still applies only one effect
per-project, while that effect's non-modal dialog is open.

As mentioned in other code and commit comments, still unresolved problems are
* allowing independent settings for multiple occurrences of an effect in stacks
* undo and redo of changes to effect stacks

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I would add a `<std::lock_guard std::mutex> guard(mLock);`  at the top, because everywhere else mSuspended is written, it is done under that lock.
 mLock here will be locked/unlocked three times:

1) locked and then released as a result of the call to `::Suspend()` in the suspension scope constuctor
2) locked by `guard`, then released by its destructor when return is reached
3) locked and then released as a result of a call to `Resume()` in the supension scope destructor

There is potentially unprotected time between a release and a subsequent lock. I wonder if all of these operations should better be under only one lock. One solution could be to have non-locking versions of Suspend() and Release() 


 Better, let's remove the function because it is used nowhere.

The function as written would not be reliable, because the caller would have no guarantee that the condition it reports remains the same, unless holding the mutex lock.  But then the function itself would deadlock, unless `std::recursive_mutex` were used instead.

It reminds me of: https://en.cppreference.com/w/cpp/memory/weak_ptr/expired

""This function is inherently racy if the managed object is shared among threads. In particular, a false result may become stale before it can be used. A true result is reliable.""

Yet in our case we can't even say that one of the results remains reliable.
 Very good.  I noticed the same too.

This is in a function that runs in the main thread.  The functions that can run in another thread are `ProcessStart`, `Process`, `ProcessEnd`.  These are the calls that really need mutual exclusion from the main thread functions, so that the contents of the `RealtimeEffectList`s are stable for that thread.

Each of those functions checks first whether processing is suspended, and they do nothing if so.

I don't think there is any incorrectness in the avoidance of races, but there is probably needless inefficiency, and a lock-free alternative should be sought.

That is not yet in the intended scope of any of these pull requests.
 I am not sure that this scheme of things will work when having multiple effects (multiple RealtimeEffectState-s) referencing the same EffectProcessor.

Let's imagine a track having two instances of BassAndTreble on it. `mCurrentProcessor` is basically an index referencing the ""slaves"" created in BassAndTreble::RealtimeAddProcessor. I understand it like this: during this method, `mCurrentProcessor` will take a value of 0 and possibly also 1, if the track is stereo - because in that case, two slaves are needed, one per channel. The only instance of BassAndTreble will create two slaves, and this instance of RealtimeEffectState will reference them with indexes 0 and 1 - all good so far.

But what will happen when the second instance of RealtimeEffectState will reach this method? it will make the only instance of BassAndTreble create two more slaves, but it will reference them again with indexes 0 and 1, instead of 2 and 3.

This potential erratic behavior can not be proven now because AFAIK the GUI still does not allow us to place more effects on the same track; moreover, this way of managing per-instance states is going to be rewritten anyway, so I do not know if it is useful to correct this problem. 

If we need to, my proposed solution is simply that `::RealtimeAddProcessor` would return the index of the created slave, and we use that instead of the increased `mCurrentProcessor`
 Anyway - adding effects per-track is not supported by the GUI so this bug has no chance to manifest itself - plus, we will do a rewrite of how states are stored, probably before the supporting GUI code will be written; therefore, I will mark this conversation as resolved. Here is the problem which I outlined during our conversation:

If I have a project with two tracks, the Visitor function will make the RealtimeEffectState be initialized a second time, thereby causing the indexes in the EffectProcessor slaves for the first track to be forgotten; this means that when play is pressed, both tracks will be processed by the same slave.
 My recent force push should fix this:  please confirm.
 I built PR 2500 and tested it with my usual test (two mono tracks and BassTreble used in realtime).
There seems to be a defect there which prevents me to test the fix (I will place a comment there to describe it)
Anyway, I have noticed that the code changed so much, that my initial comment is not applicable anymore, so I will press resolve and being this the last issue, I will approve this PR."
2486,2022-01-26T23:37:40Z,2022-01-27T09:26:54Z,Paul-Licameli,3,0,1,62,9,1,1,[],27669.0,0,54408.0,0,0,0,0,82896488.330498,,1,1,0,False,"['Penikov', 'Paul-Licameli']","I've tried to run a WinX64 build (artifact: audacity-win-3.2.0-alpha-20220126+4121821-x64-msvc2019)
Unfortunately, this build has crashed on my PC at startup.
 > I've tried to run a WinX64 build (artifact: audacity-win-3.2.0-alpha-20220126+4121821-x64-msvc2019)
> Unfortunately, this build has crashed on my PC at startup.

Is the call stack known to be the same?
 I've rechecked this recently after some cleanup on a test machine. 
Works fine. 
",,"... Now it works just like subclasses of ClientData::Site :

Use GlobalHook by deriving a struct from it, and give the correct visibility
to the struct, which will guarantee generation of unique non-inline functions in
one library (or the executable), with the needed static local variables.

The first template parameter is thus now another ""CRTP"" parameter.

Resolves: #2483

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2484,2022-01-26T16:59:56Z,2022-01-27T14:29:12Z,SteveDaulton,0,0,1,3,1,1,1,[],,0,77402.0,0,0,0,0,82897359.255007,,0,1,0,False,[],,,"Always allow Metadata Editor to be resized to reasonable height.

Resolves: https://github.com/audacity/audacity/issues/2482

*(short description of the changes and the motivation to make the changes)*
See bug #2482 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2473,2022-01-25T13:42:14Z,2022-01-25T19:02:47Z,SteveDaulton,0,0,1,4,1,1,1,[],,0,20305.0,0,0,0,0,83052718.943595,,0,1,0,False,[],"Simple enough
","Simple enough
","Selection before zero is legal in both Audacity 2.x and 3.x

Resolves: https://github.com/audacity/audacity/issues/2472

*Don't error on negative selection times*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2422,2022-01-13T11:34:10Z,2022-01-25T18:07:08Z,Paul-Licameli,2,7,9,602,32,2,1,[],955546.0,0,1060383.0,0,0,0,0,83057125.525425,,2,9,0,False,"['vsverchinsky', 'Paul-Licameli']","In some cases the hooks are never changed, is it necessary to keep them then?
UPD: probably yes, as it also inverts dependencies Have I answered your doubts sufficiently?

I have force-pushed the branch again onto more recent master, but with no changes.
",,"A class template utility to capture a pattern that has been repeated several times, and will be again, soon for extraction of
AudioIO and later to make the improved ShuttleGui system toolkit-neutral.

It generates global variables that each hold a std::function, are safely accessible from anywhere at static initialization time,
and support scopes that swap functions in and out of the variable.

This can be seen as an easy generator of small ""facades"" that each have just one entry point.  It's not a technique to
overuse, but often valuable when a dependency must be broken.

All present uses of the technique are rewritten with this class, and that makes it easy to find where all the hooks are with a
scan of the source code text.

There is a more general base class to generate global variables of other types besides std::function specializations.  This
too can be useful to simplify a much repeated pattern, eliminating the need to write a function each time with a local static
variable.  No direct uses yet of this base class.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The name `Instance` looks a bit misleading to me, considering that return type isn't a `GlobalVariable<>` Since `Scope` keeps the previous value it may hold some unnecessary data longer than one may expect, also the previous value will be restored when the static object is destroyed.  There is no way to know whether the function was actually invoked, in many cases `result_type{}` could be a valid value Maybe it makes sense to change the interface so that it becomes mandatory to initialize the hook with some meaningful value?  But this is a private member function.  Users of the class use it only indirectly by calling `Get()` or using `Initializer`.
 I defined `Scope` to work generally with `GlobalVariable` specializations other than for functions.

In this case, the default-constructed empty `std::function` (which I expect is implemented as only a null pointer) is all that gets moved into the `scope` object, so it's only taking up the space for one statically allocated pointer, which holds null.

I allow `GlobalVariable` specialization to support non-scoped reassignments, but not by default.  I want the RAII idiom to apply be default.

I'm not sure if you are questioning whether the destructor of `scope` might come after the destruction of the local static variable in `Instance`, using that variable after destruction?  But I asked myself that question, and found a reassuring answer here:

https://en.cppreference.com/w/cpp/utility/program/exit

""if a function-local (block-scope) static object was initialized during construction of a subobject of a class or array, it is only destroyed after all subobjects of that class or all elements of that array were destroyed.""

(And ""subobject"" is defined here https://en.cppreference.com/w/cpp/language/object to include member objects.)

That describes `instance` in GlobalVariable.h, which will be constructed (if not already constructed) when `scope` initializes its member `m_previous`.  Therefore `instance` will be destroyed, safely, only after `scope`.

Notice that I also provide `Initializer` for other cases where this guarantee does not apply, but this case doesn't need it for safety.

 This is all as I intend, to simplify the usage.  The hook can be called with `Call` without the complication of using `Get` and a null check first, provided that the function type returns void or a default-constructible type.  I think this convenience is good in most cases.

If in a particular case it is important to know whether any function was installed, the return type might be a pointer or a `std::optional`, while it is expected that an explicitly installed function will return non-null.  Then the caller can test the return value.

If there is a particular case in which it it is not good, then the template argument of `GlobalHook` can be a function returning a non-default-constructible type, and `Call` will fail to compile, compelling the more verbose usage instead.

"
2400,2022-01-11T12:44:32Z,2022-01-25T13:46:36Z,crsib,0,0,1,31,3,2,2,[],,0,1213354.0,0,0,0,0,83072733.230844,,0,1,0,False,[],,,"Resolves: #1488 

This PR fixes a conflict with _EXEDIR being created by multiple targets. This worked well with the legacy build system, but the new fails to resolve the dependency graph correctly 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2459,2022-01-20T16:17:27Z,2022-01-23T03:14:13Z,Paul-Licameli,5,0,1,11,2,1,1,[],738.0,0,212210.0,1,0,0,0,83283502.985516,,2,1,0,False,"['Paul-Licameli', 'rbdannenberg']","Very interesting -- this may take a few days, since it's surprising this could have been lurking in Xlisp for decades (or maybe there's a branch like Xlispstat where it was detected and fixed alreaady). But I'll definitely look into it. Thanks. > Very interesting -- this may take a few days, since it's surprising this could have been lurking in Xlisp for decades (or maybe there's a branch like Xlispstat where it was detected and fixed alreaady). But I'll definitely look into it. Thanks.

It is not XLisp proper but Nyquist’s additions to it that had the bug.  See the commit comments. > Very interesting! The xlisp.c code does come from original xlisp, although it was split to allow re-entering the interpreter, and I believe it's correct without the added xlend. The reason is that you can only get to top_level by executing xlrestore, which loads the entire heap from a file and sets xlcontext to NULL. This is all disabled in Nyquist because Nyquist allows for ""externals"" and there's no implementation for archiving and restoring added datatypes, so this code is unreachable. If you call TOP-LEVEL, you unwind to a context with a CF_TOPLEVEL flag, which takes you to some other place.
> 
> The rest looks right. I would consider setting xlcontext to NULL when reentering the interpreter, although with xlend() in nyx.c, it shouldn't be necessary.

I do not see a function called `xlrestore` in Audacity's version of the xlisp library, only a function called `sound_xlrestore`.

Are you sure this unusual bug isn't present even in the original?  That evaluating `(return)` once is ok (`xlfail` will be invoked) but the second time might hang the interpreter?  But it is unnecessary for Audacity so I can omit that fix.
 I have amended the pull request.  Please approve it @rbdannenberg if there are no further objections.
 Sorry, it's xrestore() rather than xlrestore() (in xldmem.c).  It looks like when I added external types, I planned for xrestore() to work, but then decided sound types were too messy to save and restore, so sound_xlrestore() is where the restore implementation would go, but it should never get called. The XLisp RESTORE function is not defined unless SAVERESTORE is defined. 

I tried various returns in command line Nyquist just to make sure, and it seems safe:
```
> (return)
error: no target for RETURN
1> (return)
error: no target for RETURN
2> (top-level)
[ back to top level ]
> (return)
error: no target for RETURN
1> (setf *breakenable* nil)
NIL
1> (top-level)
[ back to top level ]
> (return)
error: no target for RETURN
> (return)
error: no target for RETURN
> 
```
Very interesting! The xlisp.c code does come from original xlisp, although it was split to allow re-entering the interpreter, and I believe it's correct without the added xlend. The reason is that you can only get to top_level by executing xlrestore, which loads the entire heap from a file and sets xlcontext to NULL. This is all disabled in Nyquist because Nyquist allows for ""externals"" and there's no implementation for archiving and restoring added datatypes, so this code is unreachable. If you call TOP-LEVEL, you unwind to a context with a CF_TOPLEVEL flag, which takes you to some other place.

The rest looks right. I would consider setting xlcontext to NULL when reentering the interpreter, although with xlend() in nyx.c, it shouldn't be necessary.
","Very interesting! The xlisp.c code does come from original xlisp, although it was split to allow re-entering the interpreter, and I believe it's correct without the added xlend. The reason is that you can only get to top_level by executing xlrestore, which loads the entire heap from a file and sets xlcontext to NULL. This is all disabled in Nyquist because Nyquist allows for ""externals"" and there's no implementation for archiving and restoring added datatypes, so this code is unreachable. If you call TOP-LEVEL, you unwind to a context with a CF_TOPLEVEL flag, which takes you to some other place.

The rest looks right. I would consider setting xlcontext to NULL when reentering the interpreter, although with xlend() in nyx.c, it shouldn't be necessary.
","Resolves: #2372

It was possible to hang Nyquist with certain inputs to the Nyquist prompt.

This was fun... I had to dive into the XLisp interpreter code.  This changes lib-src, and should be considered by @rbdannenberg for upstreaming to Nyquist.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2444,2022-01-18T04:20:07Z,2022-01-22T09:17:18Z,Paul-Licameli,0,7,12,1792,33,2,1,[],,0,363434.0,0,0,0,0,83348119.777914,,1,12,0,False,[],"Approved, but compilation issues need to be fixed before the branch is merged","Approved, but compilation issues need to be fixed before the branch is merged","Preliminaries for issues #2082, #2084

Removal of two EXPERIMENTAL flags (one turned on, the other abandoned), a source code file split, a new data structure
RealtimeEffectList associated with the project and with each track (but doing nothing yet), some RAII and modernization.

Scoping objects for the processing of realtime and for suspension of it.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`R GuardedCall(const F1 &body, const F2 &handler = F2::Default(), std::function<void(AudacityException*)> delayedHandler = DefaultDelayedHandlerAction{})`
Don't you think that the last parameter makes this call not completely exception-safe? Shouldn't we avoid such things in the realtime processing thread? Do you mean that delayedHander should be noexcept?  But as the name suggests, its execution is delayed, and always in the main thread, invoked from the event loop, where exceptions escaping from it would also be caught by the top-level exception handler.  It is not invoked in the catch block.

The second argument is the non-delayed handler and the documentation is explicit that this function may re-throw its argument, or throw another exception.
 That would be good.  Reexamination of why that lock is there, and maybe elimination of it, should be attempted.  But two answers:

It's not the purpose of the pull request to fix this.  It's not worse than before, in which there was also locking.

Also the realtime effect processing will be moved (Issue #2082) from the ""real-time"" thread to the other worker thread that sends messages across the RingBuffer.  That thread needs to maintain the throughput but has more tolerance for variance in time to process batches.  Locking a mutex or allocating memory are things less urgent to remove from that thread.

 Not exactly, `LV2Effect::RealtimeProcessEnd()` is now `noexcept` but I think that `std::function` constructor does not provide such guarantees I see what you mean.

From https://en.cppreference.com/w/cpp/utility/functional/function/function:  ""5,10) Does not throw if f is a function pointer or a std::reference_wrapper, otherwise may throw std::bad_alloc or any exception thrown by the copy constructor of the stored callable object.""

So, please see the added commit, where I make some effort to avoid potentially throwing construction of std::function.

I also add a lot of `noexcept` in AudacityException.h.

The proof that exceptions really don't happen is still not complete, though, without diving into `AudacityException::EnqueueAction` and from there into `BasicUI::CallAfter` to be sure no exceptions escape.
But probably `std::bad_alloc` may still escape because ultimately wxApp::CallAfter() has to allocate.

Still there is an opinion of some that you should implement a new-handler https://en.cppreference.com/w/cpp/memory/new/set_new_handler if you have a way to do it, and then ignore `std::bad_alloc` when deciding whether to mark things as `noexcept`, because memory exhaustion is an unrecoverable situation which is going to lead to a `std::terminate` anyway.

 I believe it's still required by `EffectUIHost`, and causes compilation issues on Windows platform"
1206,2021-07-01T15:50:05Z,2021-07-13T18:43:27Z,Paul-Licameli,0,8,4,748,60,2,1,[],,0,17134934.0,0,0,0,0,83901622.546615,,0,4,0,False,[],,,"Resolves: #1161

A new library, mostly of abstract base classes related to modules and plug-ins, and facilities to name and persist parameters of effects.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","May be it not important in this small code class, but I think we should using 'name', that give more information about of variable purpose. I think it's can useful for newest/noobies especially, if we naming it like:
```cpp
wxString mInternalComponentName; //use for ...
``` Seems I see the idea, that we told before and see this here. I means, `ShuttleParams`, that can be used for declare independed parameters, like `bool` (checkbox), etc, without binding to framework.

Also interesting take a look on ShuttleParams (params synchronization, etc), but I understood, this is complex part and required standalone PR. Also I find very interesting your idea about use ShuttleParams in Config interfaces. Its little bit confused me, that means it unnessecary, because for export/import implimentation described like a standalone module? Perhaps.  mName alone may be unclear, because this is really a pair of names, an internal one, and a visible one.

But mMsgid may have been the worse choice.
 It's not the point of this commit.

I didn't write the Shuttle stuff and I don't feel really comfortable with it.

But I understand there is a ""double dispatch"" or ""Visitor"" pattern here.  A ComponentInterface object (like an Effect or a Command) overrides DefineParams, to call methods of the ShuttleParams object repeatedly for the various bool, string, etc. - valued ""parameters,"" for that particular command or effect.  They are ""arguments"" in Audacity's simple macro language.

But then you can find the subclasses of abstract ShuttleParams, which then override those methods differently, to read, or write, or just gather ""meta-data,"" about those parameters.
 I don't really know the original intention, but the simple fact is that this function was not used.

I think there was an idea of detailed sub-classing of various ""Plug-in"" types, that turned out to be excessive.
 Again, not my idea :-)

I'm not always clear on the purpose of all these abstract interfaces I didn't write, but I move some files around to manage dependencies.

This interface doesn't mention Shuttles at all, in fact.  It's making a sort of abstract interface around something like a configuration file.

"
2293,2021-12-16T07:55:10Z,2022-01-14T16:11:33Z,stan-janssen,1,0,1,1,1,1,1,[],48822.0,1,2535385.0,0,0,0,0,84014466.96762,,0,1,0,False,['LWinterberg'],"Hello. While we're not opposed to this change per se, we currently don't have the capacity to test whether this fix has unintended consequences across both many different distros and different packages (our own AppImage, flatpak, apt/dnf packages, etc.). Should we have too much time for testing in a future development cycle, we'll add it, but it might take a while. no issues found in testing",no issues found in testing,"Resolves: [Dock icon is duplicated on elementaryOS when run as flatpak](https://github.com/audacity/audacity/issues/2292)

By explicitly specifying the StartupWMClass, the elementaryOS Dock is now able to associate Audacity's window with the flatpak-launcher icon so that it does not spawn a second icon for Audacity.

I also contributed this [as a patch](https://github.com/flathub/org.audacityteam.Audacity/pull/87) to the flathub maintainer, but since there are no negative effects of explicitly stating the StartupWMClass in the .desktop file, it would be nice to have this in the upstream code as well.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2425,2022-01-13T16:59:26Z,2022-01-14T14:52:42Z,Paul-Licameli,4,0,3,40,6,1,1,[],64.0,0,78799.0,0,0,0,0,84019197.841844,,0,3,0,False,"['petersampsonaudacity', 'Paul-Licameli', 'vsverchinsky']","@vsverchinsky your suspicion of object lifetime problems in uses of `CallAfter` was quite right, but we missed one of them.
 @vsverchinsky Hi Vitaly - I tested this on W10 with @Paul-Licameli 's fix in his branch:
audacity-win-3.2.0-alpha-20220113+7129052-64bit

This seems to address the issues in this bug post - any chance you can do the review and pull this so that we can get a more workable 3.2.0 alpha to test against _(just to see if any other gremlins are now lurking)_. > @vsverchinsky Hi Vitaly - I tested this on W10 with @Paul-Licameli 's fix in his branch: audacity-win-3.2.0-alpha-20220113+7129052-64bit
> 
> This seems to address the issues in this bug post - any chance you can do the review and pull this so that we can get a more workable 3.2.0 alpha to test against _(just to see if any other gremlins are now lurking)_.

Approved, sorry for the delay > > @vsverchinsky Hi Vitaly - I tested this on W10 with @Paul-Licameli 's fix in his branch: audacity-win-3.2.0-alpha-20220113+7129052-64bit
> > This seems to address the issues in this bug post - any chance you can do the review and pull this so that we can get a more workable 3.2.0 alpha to test against _(just to see if any other gremlins are now lurking)_.
> 
> Approved, sorry for the delay

Thank you.

Lesson learned:  Beware CallAfter, and use more weak pointers.
",,"Resolves: #2421 
Resolves: #2424
Resolves: #2426

Fix two mistakes in the recent Observers branch.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2340,2021-12-23T14:15:42Z,2022-01-12T00:35:00Z,Paul-Licameli,0,8,13,3068,35,2,1,[],,0,1678761.0,0,0,0,0,84243461.022597,,0,13,0,False,[],,,"Partly resolves: #1142

Some of the dependency breaking moves needed before this next library extraction.

lib-wave-track will not be needed to extract the audio engine, but it will be needed to extract the handlers of Audacity's file format.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Didn't notice such dependency earlier. Would be nice to remove UI dependencies from WaveClip, but it's not in the scope of this PR anyway I cannot understand what's this ""default name"" for, and why do we need to keep a default name copy in each instance of the Track. It brings dependencies that seem unrelated to the WaveTrack or any other *Track. Now there is no dependency on `TrackBehaviorsPrefs` but dependency on preferences looks bad to me as well Out of scope, yet accessing UI from here isn't a good thing Yes, I thought of just adding a `std::function<void()>` argument for progress notifications, so not even BasicUI is mentioned here.  That might look better.  Still this change is enough to make things platform neutral and keep library dependencies acyclic, and anyway there will be transitive dependency on lib-basic-ui because we use lib-exceptions. TrackName::GetDefaultName() is a little weird, and I didn't put it there.  I think researching the code history may trace it back to accessibility fixes: see where GetDefaultName() is used, to tell whether the name is defaulted.  But the default name for audio tracks is not hard-coded, but changeable by the user in preferences.

I'm not fixing all the existing weirdness but just breaking dependency cycles.
 I disagree.

I think it is not bad for the global Settings objects (`BoolSetting`, `IntSetting`, etc.) to exist in whatever lowest level libraries need to use them.  See lib-project-rate/QualitySettings.cpp for the precedent.

The user interface for changing those settings, using Preference dialog pages, can be supplied at a higher level of the dependency graph that is not independent of UI.  That is what the file `TracksBehaviorsPrefs` does.

The two preference paths mentioned in GetEditClipsCanMove() really should be re-done as Settings objects to eliminate the duplication of the string literal constant for that path in scattered places.

You can see that is what I did by introducing `AudioTrackNameSetting` in another commit, and it is used in only a few places.

But I didn't do it for ""/GUI/SyncLockTracks"" and ""/GUI/EditClipCanMove"" because of the large number of places that would have to change, making this PR overhwelming with too many other changes not related to the build time dependency breaking needed to make the library.

If I do make another PR to introduce those global Settings variables, will you review that?
 I agree, but as my commit comment said, this is a piece of defensive programming against a very unlikely file corruption.

It's harmless now.
"
2332,2021-12-22T11:41:20Z,2022-01-13T00:08:33Z,Paul-Licameli,2,13,10,1374,75,3,1,[],1661512.0,0,1859236.0,0,0,0,0,84158648.094939,,1,10,0,False,['Paul-Licameli'],"> Approved with some comments!

Did you have fun reading that template?  Do you like the simplifications? > Maybe some more descriptive name? Like `mOnAudioStartStopSubscription`

If you wish, @crsib, but those Subscription handles aren't mentioned elsewhere after construction.  They are just there for RAII in the containing class's destructor.
Approved with some comments!",Approved with some comments!,"Add an implementation of Observer pattern to lib-utility; eliminate all custom wxEvent classes now in libraries in favor of this simpler alternative.

The older pattern was to use wxEvtHandler as the publisher, `Bind()` to subscribe, usually wxEvtHandler as the subscriber too (or else `Unbind()` needed an explicit call), and wxEvent subclasses for messages.  (Event handling is not necessarily done by the event loop, but can be invoked directly on the object publishing the event.)

""Platform neutrality"" doesn't strictly require this, becuase wxEvtHandler is in wxBase, but the examples show that it really is more convenient.  Any structure or even any scalar type can be the message sent by a publisher, without the bother of overriding wxEvent::Clone() in a new class, or making the subscriber inherit wxEvtHandler too for automatic cleanup.  (Instead, the class Observer::Subscription acts as a smart pointer for the connection to a publisher; the handle can also expire before it is destroyed, like a std::weak_ptr, in case the Publisher is destroyed first.)

However the class wxCommandEvent is in wxCore not wxBase, so cannot be used as a base class of custom events in libraries.  Therefore some rewriting must be done so that lib-audioio and others can be extracted.  Do this preliminary now, so that those rewrites can also use the nicer interface.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The comment above claims the destructor to be virtual Is there a guarantee that `This` still exists when lambda is invoked? `window` variable can be used instead Same question here: is it guaranteed that the `NotifyingSelectedRegion` instance exists when lambda is called? Do we still need this mutex? Looks like we now run the code strictly on the UI thread Maybe some more descriptive name? Like `mOnAudioStartStopSubscription` Same about the name > Do we still need this mutex? Looks like we now run the code strictly on the UI thread

Firstly, EXPERIMENTAL_DEVICE_CHANGE_HANDLER is off by default.  I was being complete, trying to maintain compilability in case it is on, but I don't know if we will turn it on.

Secondly, I realize now that I only kept macOS compilable and had to do more.

Thirdly, no, the calls to publish the event happen on different threads, obviously with GTK where pthreads is used to spawn one.

Fourthly though, yes, even on other threads, wxMutexGuiEnter is not necessary to protect calls to wxEvtHandler::CallAfter (what is wrapped inside BasicUI::CallAfter), according to the documentation of CallAfter itself, as safe to call from any thread.


 So, I will remove the calls, as you suggested, and also fix the build of other platforms in case this EXPERIMENTAL is on.
 > 

Yes.  The DeviceChangeListener (whatever the OS-specific version of it) is held by a unique_ptr DeviceChangeHandler::mListener.  You can easily verify it is not destroyed until the DeviceChangeHandler is destroyed, and DeviceChangeHandler is only ever created as the base class of DeviceManager, and that class has a static single instance.

Anyway this is compiled only when one of the EXPERIMENTAL flags is switched.

 Yes, thank you
 will fix
 I feel less confident.  I'll rewrite with a weak pointer.
"
2389,2022-01-07T10:18:03Z,2022-01-11T14:14:54Z,DavidBailes,2,0,1,1,1,1,1,[],348860.0,0,360870.0,0,0,0,0,84279611.725283,,0,1,0,False,['petersampsonaudacity'],"I tested @DavidBailes '  branch build for this on W10:  audacity-win-3.2.0-alpha-20220107+82c9d83-64bit - David Bailes 2078 fix

This now works fine on W10 - see #2078 @crsib - hi Dmitry, any chance you van review and (hopefully) pull this useful fix from @DavidBailes ?",,"Resolves: https://github.com/audacity/audacity/issues/2078

Problem:
Tabbing used to open the name of the selected label for editing. When this was the case, LabelTrackView::KeyDown() ensured that cursor was visible.
However, this was changed so the the label is selected, and not automatically opened for editing.

Fix:
Add a call to scroll so that the start of the selected label is visible whenever tab or shift + tab is pressed.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2338,2021-12-23T12:59:17Z,2022-01-11T11:00:22Z,Paul-Licameli,3,0,26,5663,65,1,1,[],1634371.0,0,1637266.0,0,0,0,0,84289543.004736,,1,26,0,False,"['Paul-Licameli', 'vsverchinsky']","No comments?
 Various splits of source code files.

Not closely related, but what they have in common is making new source code files, and cutting and pasting code into them, so that certain problematic dependencies are broken.

Getting these done will allow a shortening of the branch that must be rebased, and less difficulty doing it in case other peoples' edits need to be in those cut-and-pasted parts. > No comments?

Nope, didn't find anything worth noting. I'd like to see more splits until each class/entity has it's own source file :)",,"Cherry pick many commits from the big misc-libraries branch.

Not closely related, but what they have in common is making new source code files, and cutting and pasting code into them, so that certain problematic dependencies are broken.

Getting these done will allow a shortening of the branch that must be rebased, and less difficulty doing it in case other peopls' edits need to be in those cut-and-pasted parts.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2343,2021-12-24T09:39:51Z,2022-01-11T11:24:16Z,Paul-Licameli,2,1,6,490,50,1,1,[],540190.0,0,1561468.0,0,0,0,0,84290907.236982,,1,6,0,False,['Paul-Licameli'],"I will fix the build, and may use duration_cast as suggested, and will re-request review.
 > I will fix the build, and may use duration_cast as suggested, and will re-request review.

As I promised.

Please review the last three, new commits.  Nothing has changed in the earlier commits except for rebasing and supplying needed include directives.
Except compilation issues caused by missing `#include` everything else seems to be ok ",Except compilation issues caused by missing `#include` everything else seems to be ok ,"Use more C++14 and C++17 library types

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Feels like it won't harm to put duration_cast to ensure that values passed to wx* or other functions that accept not typed units work correctly even in case if someone decides to change units in the definition, now it's not stated that I'm obliged to use same units."
2373,2022-01-04T10:32:59Z,2022-01-04T14:22:35Z,LWinterberg,0,1,2,51,1,1,1,[],,0,15068.0,1,0,0,0,84883719.880622,,0,2,0,False,[],"""Excessive"" substitutions are there for a reason.  Don't undo them.
 Less code!
","""Excessive"" substitutions are there for a reason.  Don't undo them.
 Less code!
","Resolves: https://github.com/audacity/audacity/issues/681

basically, I'm just getting some substitutions back into the string and also updating to the current state of affairs

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Do not remove ""excessive"" substitutions.

I wrote those complications in for a very good reason:  we don't want confusing markup to be in the translation catalog, and prone to errors made by translators.

Therefore the complication of substituting a translated word into a marked-up link, and then substitution of that into a bigger sentence.
"
2339,2021-12-23T14:10:46Z,2022-01-04T13:29:21Z,LWinterberg,0,0,1,10,1,1,1,[],,0,1034687.0,0,0,0,0,84887835.031006,,1,1,0,False,[],,,Updated to the current state of affairs,
2337,2021-12-23T11:55:39Z,2021-12-30T13:17:30Z,Paul-Licameli,0,0,1,79,6,1,1,[],,0,609714.0,0,0,0,0,85320915.149559,,0,1,0,False,[],,,"... This was the effect re-applied to the summation of the input tracks, but
the results were never used, and might not be useful for non-linear effects.

Resolves: overcomplicated implementations of realtime effects

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2342,2021-12-24T02:57:52Z,2021-12-30T13:17:07Z,Paul-Licameli,0,0,4,270,34,1,1,[],,0,555559.0,0,0,0,0,85320937.840498,,1,4,0,False,[],,,"Resolves: #1145 

* Ho
* Ho
* Ho

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2349,2021-12-27T00:43:52Z,2021-12-27T15:10:18Z,adem4ik,0,0,1,72,1,1,1,[],,0,51987.0,0,0,0,0,85573350.996205,,1,1,0,False,[],,,"Resolves: -

- Fixed lots of typos
- Corrected some translations

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2346,2021-12-24T17:09:30Z,2021-12-24T18:14:16Z,Paul-Licameli,0,0,1,2,1,1,1,[],,0,7094.0,0,0,0,0,85818306.18788,,2,1,0,False,[],,,"Resolves: outdated version number on start page (but all the detailed contents were current)

@crsib Please add this small step to the checklist for release procedure

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2345,2021-12-24T11:42:20Z,2021-12-24T18:14:52Z,gerhean,0,0,1,2,1,1,1,[],,0,23552.0,0,0,0,0,85821478.802704,,0,1,0,False,[],,,"Resolves: #2344

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2334,2021-12-22T16:15:20Z,2021-12-22T23:22:59Z,Paul-Licameli,0,0,1,12,1,2,2,[],,0,25659.0,0,0,0,0,85975792.912812,,1,1,0,False,[],,,"
- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2331,2021-12-22T11:02:57Z,2021-12-22T12:47:10Z,Paul-Licameli,0,0,1,31,1,1,1,[],,0,7480.0,0,0,0,0,86012715.143099,,0,1,0,False,[],,,"... Fix glitch at end of play of selection with loop disabled.

Fix the freezing and non-stopping of play-at-speed.

Note that Done() drops the requirement of draining the input buffer completely.
I traced the origin of that legacy back to the start of the repo but never
found a good explanation for it.

Resolves: #2314
Resolves: #2316

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2297,2021-12-16T14:56:26Z,2021-12-17T12:47:39Z,crsib,0,8,1,113,3,2,2,[],,0,496823.0,1,0,0,0,86027764.144964,,0,1,1,False,[],"Approved with a couple of suggestions.
 Wrong initial value
 That was quick, thanks
","Approved with a couple of suggestions.
 Wrong initial value
 That was quick, thanks
","The meaning of the ""Location of "" field became confusing after the support for multiple FFmpeg versions was added. 

This commit changes the way how the content of the dialog is interpreted. 
Both full paths to avformat and to the directory containing avformat are now valid.

Additionally, it fixes the way Audacity checks that FFmpeg works. Audacity will check if it can load the library instead of checking that the file exists.

Resolves: https://github.com/audacity/audacity/issues/2282

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Reviewing the consequences of this change to mFullPath, I see the later call to SelectFile is affected.  Should you pass name there as the fourth argument, to fill in a field by default?  A small convenience for the user?
 To be very careful I might try-catch around what follows to guarantee that side effect on Preferences is undone, attempting a strong guarantee...

Or do it somehow with finally
 I removed it on purpose. It no longer makes sense because it is a wildcard. On top of that, at least on windows, I observed that having a name messes up if you have more than one filter entry Ok I see what you are doing, but mRevertToOld must be constructed as true by default.

Should the destructor catch exceptions?
 Maybe this class wants to be generalized as a utility in Prefs.h.  It would want a template parameter for the Settings object.  But, another day.

 >I see what you are doing, but mRevertToOld must be constructed as true by default.

My bad

>Should the destructor catch exceptions?

I'm not sure why and which? Is there something good we can do? >Maybe this class wants to be generalized as a utility in Prefs.h

We definitely should"
2317,2021-12-20T14:40:18Z,2021-12-21T18:59:25Z,crsib,3,4,1,34,1,2,1,[],25669.0,0,152178.0,0,0,0,0,86027778.130509,,0,1,1,False,"['Paul-Licameli', 'crsib']","Just some spelling and grammar suggestions.

Was I supposed to get XCode 13?   Funny I'm still on 12.5 :-)
 > Was I supposed to get XCode 13? Funny I'm still on 12.5 :-)

Hmm, you do not use XCode from AppStore? I believe XCode 13 is available for macOS 11
 > Just some spelling and grammar suggestions.

Fixed now!",,"* Added Troubleshooting Conan section
* Updated tools version

Resolves: #2102

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I can confirm this worked :)  ""your""
 ""For errors like:""
 ""please run""
"
2328,2021-12-21T18:30:37Z,2021-12-21T23:43:48Z,Paul-Licameli,0,0,1,9,1,1,1,[],,0,18794.0,0,0,0,0,86060943.137397,,1,1,0,False,[],,,"... But, do draw the yellow snap guidelines

Resolves: #2323
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2320,2021-12-20T23:37:39Z,2021-12-21T14:15:55Z,Paul-Licameli,3,0,1,10,2,2,2,[],135.0,0,57185.0,0,0,0,0,86090531.068852,,2,1,0,False,"['petersampsonaudacity', 'Paul-Licameli']","@crsib tell me if this has any conflicts with your designs on DrawOverlays

@petersampsonaudacity , @Penikov please try the Windows builds of this branch and confirm that the symptom is fixed

I find that reproducing the symptom on macOS was possible but fiddly difficult.  I think I made it go away but it is hard to be certain.
 Testing on W10 with @Paul-Licameli 's latest branch build Audacity_Windows_64bit_1604442846_791f03b 
I cannot reproduce this issue

If I use this earlier alpha that I downloaded yesterday  Audacity_Windows_64bit_1602134390_7887ba0 
then I can readily reproduce this bug.

Therefore the issue looks to be fixed by Paul's latest pending change. Testing on W10 with the latest 3.1.3 alpha build:  Audacity_Windows_64bit_1607168309_32a36d2 

I cannot reproduce this issue - looks to be fixed for 3.1.3",,"... Whenever the mouse moves from the time ruler into tracks.

Resolves: #2318

Make sure that the white quick-play guideline is erased whenever the mouse leaves the timeline.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2315,2021-12-20T14:02:48Z,2021-12-21T13:42:24Z,crsib,0,0,3,1220,51,1,1,[],,0,85178.0,0,0,0,0,86097030.079825,,0,3,0,False,[],,,"Resolves: #2298

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2300,2021-12-16T19:46:23Z,2021-12-21T13:30:11Z,LWinterberg,0,1,2,1023,1,1,1,[],,0,409448.0,1,0,0,0,86097745.257261,,0,2,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2298

License change as per #2142

Further added full copies of all relevant licenses (CC-by, GPLv2, GPLv3)

","The safest way to word all the above is probably:

> Audacity is released under the GNU General Public License version 3 (GPLv3). Individual source files may be available under other licenses as specified in those files or an accompanying file. In particular, many source files are available under GPL version 2 (GPLv2) or (at your option) any later version, and this is the default license used where no other license is specified.

This replaces everything about binaries, VST3, and the lib-src directory. The new statements below about documentation and full license texts can remain."
2309,2021-12-19T16:42:30Z,2021-12-20T13:04:41Z,Paul-Licameli,0,0,1,10,1,1,1,[],,0,73334.0,0,0,0,0,86185692.975417,,0,1,0,False,[],,,"Resolves: #2122

Restore the white guideline before quick-play click

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2310,2021-12-20T05:39:17Z,2021-12-20T12:04:13Z,Paul-Licameli,1,0,2,69,7,1,1,[],23089.0,0,23099.0,1,0,0,0,86189322.265972,,2,2,0,False,['Paul-Licameli'],"I added <atomic> and merged this, sorry if I didn't wait for the formal reapproval
Please fix the ubuntu build issue (missing `#include <atomic>`)! Otherwise I approve",Please fix the ubuntu build issue (missing `#include <atomic>`)! Otherwise I approve,"Resolves: #2149

Complete the fix for issue 2149:  play-at-speed should also work with a loop region, and you should be able to adust the speed or the region or both during play, without the play head moving incorrectly

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2301,2021-12-17T03:31:35Z,2021-12-20T11:04:17Z,Paul-Licameli,0,0,1,2,1,1,1,[],,0,286366.0,0,0,0,0,86192917.783627,,0,1,0,False,[],,,"... a one-line fix!

Resolves: https://github.com/audacity/audacity/issues/2294

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2288,2021-12-15T13:01:15Z,2021-12-17T12:30:59Z,Paul-Licameli,2,0,6,355,17,1,2,[],76431.0,0,170993.0,0,0,0,0,86446912.020143,,0,6,0,False,['Paul-Licameli'],"Two more commits.

But -- now I find that the case of Shift + Click on the button is still not right.

So one more to come.
 > Still good, but looks like there is a conflict now

There was a conflict because the base branch was master not release.  It wasn't real.
The first part looks good! Still good, but looks like there is a conflict now","The first part looks good! Still good, but looks like there is a conflict now","Resolves: #2149

Issue2149: Play-at-speed button will work again, when Shift (once-only play) not pressed....

... But now it must also respect loop play bounds and changes of bounds.

This requires total reimplementation of how it works, without reuse of scrubbing code.

The case of Shift + Click needs an additional fix, to come.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2281,2021-12-13T17:39:57Z,2021-12-17T12:17:46Z,Paul-Licameli,0,0,1,5,1,1,1,[],,0,326273.0,0,0,0,0,86447710.202665,,0,1,0,False,[],,,"Resolves: #2209

Two new looping commands get default shortcut keystrokes.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2280,2021-12-13T17:26:40Z,2021-12-17T11:50:34Z,Paul-Licameli,0,0,6,222,2,1,1,[],,0,325437.0,0,0,0,0,86449343.875157,,0,6,0,False,[],,,"Resolves: #2067

Draw an indication of non-empty selection in the time ruler, again; in each theme, blend the color of the loop region limits with the background, which is either the loop region's color (enabled or diabled), or the ruler background.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2258,2021-12-10T09:36:53Z,2021-12-14T12:51:00Z,crsib,0,0,1,13,2,1,1,[],,0,436049.0,0,0,0,0,86626120.23164,,0,1,1,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2021

1. Fixes ResetProjectToEmpty that left UndoManager in an inconsistent state.
2. Resets the clipboard if the project used to run macro matches the clipboard data owner. This is a corner case, as you need to remove all the tracks after putting the data into the clipboard
3. 
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2219,2021-12-02T03:31:09Z,2021-12-17T11:19:22Z,Paul-Licameli,1,7,14,1661,47,2,1,[],1320102.0,0,1324100.0,0,0,0,0,86451213.341308,,0,14,0,False,['Paul-Licameli'],"Thanks!

Which one should I do next?  AudioIO or WaveTrack?",,"Resolves: #1146

Extract abstract base classes SampleTrack and (extending that) WritableSampleTrack, from WaveTrack.

Mixer and WaveTrackCache are rewritten in terms of SampleTrack only.

AudioIO uses Mixer, and other parts of it for recording will be rewritable in terms of WritableSampleTrack.

Thus this library extraction is a step toward an extraction of AudioIO into a higher library, which will not depend on the
implementation details of WaveTrack's division into WaveClips that use Sequence, or its persistency using sqlite.

SampleTrack may be a useful abstraction in effect stacks, or perhaps in more general graphs.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is it really safe? I thought you would flag that.

If we assume no other concrete subclasses of SampleTrack exist, yes.

Will that be a safe future assumption? ... Maybe not. Would it be nice to make SpectrumView depend only on SampleTrack, not WaveTrack?  Yes.

What stops it here?  The need for the track to define GetSpectrogramSettings and GetSpectrumBounds.

I have other plans, later in the big branch, to move those things into ClientData attachments to the SampleTrack, but that is a bit beside the point of the present library extraction.
 I could make it a dynamic_cast, and return early if it is null.  That means if we attempt spectrogram display of some other kind of hypothetical future concrete SampleTrack, it would appear as a blank rectangle, but not be a crashing bug.

 Do you not object to the other static_cast in WaveClip.cpp?  (Those things only ever belong to WaveTracks.)

Have you reviewed all else and found no problems?
 SampleTrack does not expose the notion of division of the sample sequence into clips.  It might need that for generalizing SpectrumView in future.  It is not yet needed for purposes of extracting AudioIO so it does not depend on WaveTrack.

 I force-pushed a fix for your complaint.
"
2267,2021-12-10T17:19:40Z,2021-12-14T11:13:46Z,crsib,2,0,1,15,1,1,1,[],323623.0,0,404278.0,0,0,0,0,86630124.984774,,0,1,0,False,"['Paul-Licameli', 'crsib']","The original std::round by Edward is replaced by lrintf which should make a difference only with exact values at the halves, and I don't care how the difference affects the display.

Rounding values that were already rounded was a supid mistake of my own!
 >Rounding values that were already rounded was a supid mistake of my own!

What is stupid is how `std::round` is defined for the integers:

>A set of overloads or a function template accepting an argument of any integral type. Equivalent to 2), 6), or 10), respectively (the argument is cast to double).

I would expect it to be noop",,"After merging the spectrum brush branch - a new hot path was accidentally added to spectrum rendering.

1. std::round is expensive as is. The implementation is complex and designed to handle different situations.
2. By mistake the following chain was introduced: round(float)->int->double->round(double)->int

The new implementation uses `lrintf`. By default, it rounds to nearest, and ties are rounded to even. This does not match the behavior `std::round` entirely, but given that it only slightly affects the visuals, that shouldn't be a problem

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2146,2021-11-16T10:50:49Z,2021-12-15T09:14:35Z,crsib,0,0,1,4,1,1,1,[],,0,2499829.0,0,0,0,0,86631506.18068,,0,1,0,False,[],,,"*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2286,2021-12-15T09:11:11Z,2021-12-15T09:13:43Z,crsib,0,0,1,34,1,1,1,[],,0,154.0,0,0,0,0,86631559.288632,,0,1,1,False,[],,,"<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2283,2021-12-13T20:26:57Z,2021-12-14T13:34:06Z,Paul-Licameli,1,23,2,38,3,2,1,[],60484.0,0,61633.0,0,0,0,0,86702335.683467,,0,2,0,False,['Paul-Licameli'],"Is it better now?

I try to keep the libraries in the same sequence as in libraries/CMakeLists.txt
",,"... Don't make it automatically dependent on all of them.

This has two advantages:

It will allow us to define optional libraries, usable by modules but not
necessary to build a reduced Audacity without the modules.

It cleans up the generated dependency graph, omitting some redundant edges,
if we allow Audacity to inherit transitive dependencies from the public link
interfaces of the library targets.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think it is worth adding a comment, that this list is purely for building the graph.

Also, this looks very fragile. It is not documented, I do expect it to break with the next library added. If ""break"" means the build fails, then you add a line there to fix the build, before you push, and maybe remove older lines that are unnecessary because they are now transitive dependencies.  That is what I intend.

What is wrong with that?
 The build won't fail and that is the problem. Or do I miss something? You think the build won't fail when it should fail?

But (trust me) the build does fail in my monster branch when I extract a library but neglect to update this list, because Audacity tries to `#include` a header file from the new library, which is not found.

That build breakage is ""good,"" early fragility that forces a fix at compile time (even before link time), not ""bad,"" late fragility that lets the program build and run but then fail at startup time.

Did you also read the PR comment too, explaining the advantages I seek from this.
 Well then I really missed something. I will try to figure out tomorrow The libraries in the list are given to `target_link_libraries` which affects more than the link step:  it affects also the `-I` options at compile time.
 It will make sense in the morning, I trust.  Спокойной ночи.
 I will recheck, it is not clear to me how the build works with networking disabled in this case.  Doesn't build, so I was right!

```
LINK : fatal error LNK1104: cannot open file 'lib-network-manager-interface.lib' [C:\devel\projects\audacity\Paul\tie\b
uild\src\Audacity.vcxproj]``` That will be easily fixed by adding one to the list of direct dependencies.  But didn’t my CI run complete?  Are you using the same CMake options as in the CI build?

Even if I can and do fix the PR with one line, why is it a reason not to approve this PR, that the build might break because one line is missing? https://github.com/audacity/audacity/actions/runs/1574761410

That build succeeded yesterday. The CI builds do turn on networking, but I also needed to make the build work if you do not enable it, as must have been so for your local builds but not mine.  There is another commit in the branch.  I will squash and merge if you approve.

To see why I want the change, look at this generated graph with the change:
![modules dot](https://user-images.githubusercontent.com/11670369/145984644-f00f1a32-c409-4932-b180-90dc35374321.gif)

 Compare without:
![modules dot](https://user-images.githubusercontent.com/11670369/145985159-35422e57-3666-4270-a50d-a067fa643359.gif)
  I build with default CMake options which are different from CI options. It is required that Audacity can be built without networking (and it was your call actually to disable networking by default).  There are fewer edges in the first picture, but the transitive closure is the same.  I think the first can be easier to understand.  The difference will be more pronounced as more libraries are extracted.
 > I build with default CMake options which are different from CI options. It is required that Audacity can be built without networking (and it was your call actually to disable networking by default).

Indeed, but I often make local builds with everything enabled to make sure I don't break things that CI will build.

This was easily fixed with the second commit in this branch.
 lib-sentry-reporting defines a header-only library when Sentry is disabled. So this code is not valid on all possible paths either

 Did you observe a build failure?  I omitted the `-interface` suffix.  That suffix is not necessary for builds, but adding it might sometimes break the build.

I could leave off `-interface` from everything in this list.  In fact I might have no good reason to add it.

I wrote the CMake stuff that generates the extra `-interface` alias targets because of some difficulties getting the modules, not the libraries, to build and link on Windows.

 > Did you observe a build failure? I omitted the `-interface` suffix. That suffix is not necessary for builds, but adding it might sometimes break the build.
> 
> I could leave off `-interface` from everything in this list. In fact I might have no good reason to add it.
> 
> I wrote the CMake stuff that generates the extra `-interface` alias targets because of some difficulties getting the modules, not the libraries, to build and link on Windows.

In other words are you implying that adding `-interface` may be necessary for the build when lib-sentry-reporting-interface is defined?  I think not.
 I do not imply anything about interfaces. I state the fact that lib-sentry-reporting always generates a target. If reporting is disabled - it generates a header-only library. This library is still required to build Audacity. So I don’t understand your objection to that line.  That target IS always present so will not cause a build error. It is in `if ( ${_OPT}has_networking )` block, which is wrong.  You are correct.
"
2262,2021-12-10T12:29:24Z,2021-12-13T12:59:25Z,Paul-Licameli,0,0,1,23,1,1,1,[],,0,261015.0,0,0,0,0,86790807.221949,,1,1,0,False,[],,,"Resolves: #2103

Fix playback in progress in case the (enabled) loop region is dragged right of the play head.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2261,2021-12-10T11:51:28Z,2021-12-14T08:33:47Z,vsverchinsky,6,25,1,234,3,3,1,[],279158.0,0,333744.0,3,0,0,0,86720354.794698,,0,1,0,False,"['Paul-Licameli', 'crsib', 'vsverchinsky']","Please rebase it once more, then create a merge commit.
 > Please rebase it once more, then create a merge commit.

Rebased, but I need an approve for this PR to merge > > Please rebase it once more, then create a merge commit.
> 
> Rebased, but I need an approve for this PR to merge

I'm sorry, I thought I had done that already.
 > > > Please rebase it once more, then create a merge commit.
> > 
> > 
> > Rebased, but I need an approve for this PR to merge
> 
> I'm sorry, I thought I had done that already.

That's my fault! I will probably remove the ""push invalidates review"" rule from branch protection rules > > > > Please rebase it once more, then create a merge commit.
> > > 
> > > 
> > > Rebased, but I need an approve for this PR to merge
> > 
> > 
> > I'm sorry, I thought I had done that already.
> 
> That's my fault! I will probably remove the ""push invalidates review"" rule from branch protection rules

Was it that, or was it a dismissal of my stale review by Vitaly, above?
 Vitaly pushed and that invalidated the reviewYoul will fix the small matter about the rectangle, and then there is nothing else to block this.
 Approved!
","Youl will fix the small matter about the rectangle, and then there is nothing else to block this.
 Approved!
","Resolves: #2066 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","One of the C++ Core Guidelines I like is that each virtual function declaration should be marked with exactly one of `virtual` `override` or `final` as appropriate, and for these two it should be `override`. Oh, I see I misunderstood the context.  This is not overriding UIHandle functions.  `virtual` is right. Clang gives me a warning about '&&' within '||'.  Add parentheses to make the intent unmistakable.
 Same track, or aligned partner track I would prefer to iterate the intervals, as in the other branch, not the clips, for uniformity, and in case WaveTrack might add some other kind of interval in future (who knows?)

You can static_cast the Extra() pointer of each interval to WaveTrack::IntervalData* and then test for the clip you want to exclude.
 The two shared_ptr arguments could be const references, and so they should, to aid the human reader.  Instead I read this then stopped to see whether `track` and `clip` were being reassigned for some reason.
 A const auto & here for consistency
 Another argument might be const reference
 See how SelectHandle overrides Enter, HasEscape, and Escape member functions.  These allow you to hit the Esc key and dismiss the yellow snap lines, enabling a fine, un-snapped adjustment, if that is what the user really wants.  The same might be done here.

Maybe some common base class, derived from UIHandle, should be defined?  Hm.

 You may note that I could have done the extra work I suggested in the UIHandle subclasses recently added to AdornedRulerPanel, but I didn't.

This is not mandatory extra work.  But I should reconsider how the pattern might be made easier and reusable across UIHandle classes that snap.
 See TrackPanelDrawable::DrawingArea:  default behavior should not be to return an empty wxRect, but to return the second argument unchanged.
 Funny, the tool I use to analyze a code suggests quite opposite: it says that parenthesizes are redundant :) But I usually tend to put them too. Thank you! Didn't think of that. Thank you! > See how SelectHandle overrides Enter, HasEscape, and Escape member functions. These allow you to hit the Esc key and dismiss the yellow snap lines, enabling a fine, un-snapped adjustment, if that is what the user really wants. The same might be done here.
> 
> Maybe some common base class, derived from UIHandle, should be defined? Hm.

If I try to hit escape when using a select handle it just resets the current selection, with a debugger attached I see that both `::Escape` and `::Cancel` member functions are triggered, did I misunderstand something? You can hit escape to dismiss the yellow snap line before the click.  It seems you can't dismiss the yellow snap line while dragging.
 Just a discussion...

I would prefer `static_cast` myself here...  But actually, I'd rather see `std::any_cast`.  The Extra information in IntervalData looks like a place I could rewrite things with `std::any` now that we use C++17.  I think `any_cast` makes a simpler check than `dynamic_cast`.  Just equality of a statically determined `typeid` of the template parameter with the dynamically determined `typeid` in the `any`.

 Still not resolved
 Does not seem to work as well, I still get snap lines during the selection I've never seen much performance impact from using `dynamic_cast`. It can be slow in tight loops with deep hierarchies, but that's not the case here. https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-downcast

I agree that sometimes we can justify using `static_cast` instead of `dynamic_cast` if we want to get as much performance as possible, and we do guarantee that the specified type is the only possible option here. But one of the reasons why this part of the code was rewritten is that we may want to add more interval types to a wave track in the future, wasn't it? A general comment: I'm reviewing changes in the class AdjustBorders.  The other subclass of ClipTrimPolicy is AdjustBetweenBorders.  That class is not constructed anywhere.  Is there a mistake?
 Sorry, will fix that, thanks! It's not a mistake, AdjustBetweenBorders moves borders of both clips if they are close enough, and it was my understanding of how things should happen, and turned out that I was wrong. But I was told that we may need this in the future. You are right about dynamic_cast being better for future generality.  I should have remembered myself.

So would be any_cast.  With std::any I wouldn't need to invent dumb little base classes like TrackIntervalData just to have a virtual destructor.
 `std::any` has costs attached. It's not a `zero-cost` abstraction in general, although compilers may implement a fast-path for small objects."
2268,2021-12-12T10:24:00Z,2021-12-13T12:21:53Z,PhilLab,0,0,1,20,1,1,1,[],,0,93474.0,0,0,0,0,86793073.631883,,0,1,0,False,[],,,"Resolves: -

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2240,2021-12-05T23:22:09Z,2021-12-10T12:37:54Z,Paul-Licameli,0,2,1,13,2,2,1,[],,0,393349.0,0,0,0,0,87051310.297195,,0,1,0,False,[],,,"... To reproduce:

* Generate a tone
* Open the Nyquist Prompt and enter the code:

```
;control test ""Test"" float """" 5 0 10
(print test)
```

* Click the ""OK"" button
* Click the ""Cancel"" button
* Observe crash

Bug was introduced at b1e988e4f50ff19050d00c8c5685d43a9fc8a62b
The nulling-out of a pointer to the Effect in the Close routine was deleted,
but the destructor is still called later.

To fix it, don't unnecessarily repeat in the destructor of the modal dialog
(which may be delayed until an event loop) what was already done when closing
it.

Resolves: #2239

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","`mClosed` is a new member field, which seems to be used only in debug builds, since `wxASSERT` macro does nothing in release builds. Couldn't the definition of the variable be made conditional too? As you wish
"
2251,2021-12-09T10:20:02Z,2021-12-10T09:21:41Z,crsib,0,0,2,161,3,1,1,[],,0,82902.0,0,0,0,0,87063084.845252,,1,2,1,False,[],"More deep dives into wxWidgets, oh joy","More deep dives into wxWidgets, oh joy","Resolves: #2178 

This PR fixes two issues:

1. ErrorReportDialog is now smaller and looks different from the crash reporter.
2. ""Audio is muted"" is considered to be a user error, i. e. it no longer can be reported to Sentry

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2252,2021-12-09T10:40:51Z,2021-12-10T09:21:14Z,crsib,0,0,1,4,1,1,1,[],,0,81628.0,0,0,0,0,87063110.561831,,0,1,0,False,[],,,"<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2221,2021-12-02T18:51:18Z,2021-12-09T11:37:00Z,Paul-Licameli,1,0,7,917,84,2,2,[],410568.0,0,578746.0,0,0,0,0,87141366.341426,,0,7,0,False,['Paul-Licameli'],"Thank you for approval @crsib 

I want to know that @vsverchinsky has read and understood these commits too before I merge them into master.

This isn't the last part of the cleanup of the legacies of the effect management system.
",,"Contributes to #2084

Not the end of cleanups yet.  Still simplifying and better documenting the interface class Effect and its sub-classes.

Also fixing a crash recently introduced in Master, and preventing a dependency cycle in the prototype of realtime effects when rebased onto this.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2246,2021-12-07T12:03:08Z,2021-12-08T17:12:44Z,DavidBailes,3,0,1,4,1,1,1,[],104866.0,0,109337.0,0,0,0,0,87203265.798994,,0,1,0,False,"['vsverchinsky', 'LWinterberg']","I also tried to find when the code path for the left border is executed and didn't find any too. 
Thank you! @vsverchinsky this is now in master - do we also want this in release-3.1.3? > @vsverchinsky this is now in master - do we also want this in release-3.1.3?

@LWinterberg yep, I've cherry-picked it into 3.1.3:
https://github.com/audacity/audacity/commit/c47d856be55359fd9abb91676203b708215927aa",,"Resolves: https://github.com/audacity/audacity/issues/2226

Steps to reproduce:

1. Split an audio clip into three clips
2. Move the clips so that there are spaces between the clips.
3. Select all the audio (Ctrl+A)
4. Join the clips (Ctrl+J)
5. Observe that clips are not joined correctly.

Problem:
In  WaveClip::InsertSilence(), the following two lines:

else if (t == GetPlayEndTime() && t < GetSequenceEndTime())
      ClearSequence(t, GetSequenceEndTime());

After ClearSequence is called to remove the data to the end of the sequence, then there is not call to update mTrimRight, as is done in WaveClip::ClearRight(). So when more data is pasted, it's pasted in the wrong place.

Fix:
Update mTrimeRight.

Notes:
1. I don't know why the bug was not always reproduceable.
2. There appears to be a similar issue with the previous two lines:

   if (t == GetPlayStartTime() && t > GetSequenceStartTime())
      ClearSequence(GetSequenceStartTime(), t);

Compare with WaveClip::ClearLeft().
However I have left that unfixed, both because it doesn't affect this bug, and also because I couldn't work out when that call to ClearSequence would get called, and so I couldn't test any fix.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1434,2021-08-06T01:46:20Z,2021-12-07T12:57:25Z,Paul-Licameli,16,6,4,324,10,2,1,[],31627.0,0,10667470.0,0,0,0,0,87309342.045789,,1,4,0,False,"['crsib', 'Paul-Licameli']","I'm not sure that I understand the need for this library. While it makes total sense to me to make the persistence layer abstract and, at least, to move it out of the main source tree, I feel that TransactionScope as a separate library with dependency injection is just an unnecessary complication.  > I'm not sure that I understand the need for this library. While it makes total sense to me to make the persistence layer abstract and, at least, to move it out of the main source tree, I feel that TransactionScope as a separate library with dependency injection is just an unnecessary complication.

I found this extraction desirable as I was extracting libraries.  I want to have a library for project file IO, and one for AudioIO, the playback and recording engine.  I don't want the second one depending on the first one.  This small facade breaks that dependency.


 > > I'm not sure that I understand the need for this library. While it makes total sense to me to make the persistence layer abstract and, at least, to move it out of the main source tree, I feel that TransactionScope as a separate library with dependency injection is just an unnecessary complication.
> 
> I found this extraction desirable as I as extracting libraries. I want to have a library for project file IO, and one for AudioIO, the playback and recording engine. I don't want the second one depending on the first one. This small facade breaks that dependency.

I may describe other justifications for this if I stare at the right graphs again of intermediate states of my big branch.
 Yes, another explanation is that in the current arrangement, UndoManager as well as others use DBConnection.cpp and avoid dependency on ProjectFileIO.  There is not a dependency cycle.

But to factor the libraries without this facade, putting ProjectFileIO and DBConnection together -- which seems the right thing to do -- would require that all of ProjectHistory and UndoManager would be sucked into that library too.  That, however, feels wrong.  I would like ProjectHistory with UndoManager in their own library.  The small Transactions facade, rather than all of DBConnection, is the lower level thing it uses.  It lets the project history library avoid direct or transitive dependency on sqlite.

 Now it feels even more wrong...

* Why do we abstract out only the transaction then? Changing the persistence layer is still not possible with this approach and transaction simply is a part of persistence.
* Why AutoSave is a part of a transaction? It has nothing to do with transactions in the current code and it is unlikely that it will ever be. I don't agree that it should be there at all.
* UndoHistory is a direct user of the database, which probably should be fixed. But it is a user of the library, rather a part of it. > > I'm not sure that I understand the need for this library. While it makes total sense to me to make the persistence layer abstract and, at least, to move it out of the main source tree, I feel that TransactionScope as a separate library with dependency injection is just an unnecessary complication.
> 
> I found this extraction desirable as I as extracting libraries. I want to have a library for project file IO, and one for AudioIO, the playback and recording engine. I don't want the second one depending on the first one. This small facade breaks that dependency.

But you don't like the dependency injection of a global object providing the services?

We already have this technique with BasicUI.  It may be understandable and justifiable there.  Yet I can understand unease about overusing it.

In my self-review I also realized I don't like mentioning AudacityProject as an incomplete type, necessary as an argument of the function, because Project belongs to another library not yet extracted.

So what if instead:  this little library describes a TransactionServices abstract class that doesn't mention the project.  UndoManager is constructed with one of those things, and the global AudioIO object is given one of them when you start a stream.  The object can make an abstract TransactionScope and also do the AutoSave.

There is still some need, as I explained, to lower some abstract class into this library, to break the dependencies.


 >So what if instead: this little library describes a TransactionServices abstract class that doesn't mention the project

Sounds good to me! > Now it feels even more wrong...
> 
> * Why do we abstract out only the transaction then? Changing the persistence layer is still not possible with this approach and transaction simply is a part of persistence.
> * Why AutoSave is a part of a transaction? It has nothing to do with transactions in the current code and it is unlikely that it will ever be. I don't agree that it should be there at all.
> * UndoHistory is a direct user of the database, which probably should be fixed. But it is a user of the library, rather a part of it.

Yes, there are things in the existing design that feel wrong.  TransactionScope was added in places for certain performance reasons, because everywhere else we do small auto-commits by default.  But as we have mentioned before, we really need to reorganize the sqlite usage to make properly coarse grained transactions.

This is another load of work to do, but I don't want to make the other progress in extraction of libraries block on it.  Fixing that part of design is not the scope of this.

Ideally the framework would handle the beginning and ending of transactions better, and TransactionScope won't be needed for performace and would disappear.

But the third commit in this sequence will still have done something worth preserving.  In the better arrangement, the Undo manager will need a way to call back to the database and tell it to commit.  And as I explained, putting the Undo manager into a separate library not dependent on the details of the persistence layer makes a lot of sense to me.
 > > So what if instead: this little library describes a TransactionServices abstract class that doesn't mention the project
> 
> Sounds good to me!

But I don't know if I have yet convinced you that it is good for the Undo manager to call into this layer at all?

I explained that the pushing of Undo history state should be the place where database transactions commit, as the AutoSave function.  I don't think that will change.  I think that in the properly redesigned system, this will also be the place that the next transaction is opened.

And rollbacks?  There exists a ProjectHistory::RollbackState function which has been called that (by me) since even before sqlite was used, because an analogy with database rollback seemed natural.  See how AudacityApp invokes it from a global exception handler for the event loop.  See how it's also done in many cases where you were doing a shift-drag of something in the Track panel, but quit with the Esc key.

I think in the ideal design, that RollbackState would also be the place for actual rollback of sqlite transactions.  There will be a larger ""transaction"" encompassing both in-memory project state and database state.  There are places where we want to guarantee their consistency with commits or rollbacks.  UndoManager and ProjectHistory (closely cooperating classes) will be the place.

So in short:  while the scoped transactions may go away in future, I think these points in the life of the un-scoped transactions will still make a lot of sense in Undo Manager, and it makes sense to give it access to that layer through some interface.
 > But I don't know if I have yet convinced you that it is good for the Undo manager to call into this layer at all?

Oh, I have no problems with that for sure. What I meant is that the fact UndoManager calls into the DB layer doesn't make it a part of the DB layer. Probably I'm missing the dependency cycle though > > But I don't know if I have yet convinced you that it is good for the Undo manager to call into this layer at all?
> 
> Oh, I have no problems with that for sure. What I meant is that the fact UndoManager calls into the DB layer doesn't make it a part of the DB layer. Probably I'm missing the dependency cycle though

Project history depends on transactions Interface as client.  File io depends on it as supplier.  That is clear.

It would be desirable to make this separation, just so that project history depends on less, but maybe you think it is not needed to break a cycle.

But file io will depend on project history too, although the reason for that is very slender.

See how SqliteSampleBlock.cpp uses Undo manager, just so that it can make a progress dialog during purge of undo history, using events emitted by Undo manager. > > > But I don't know if I have yet convinced you that it is good for the Undo manager to call into this layer at all?
> > 
> > 
> > Oh, I have no problems with that for sure. What I meant is that the fact UndoManager calls into the DB layer doesn't make it a part of the DB layer. Probably I'm missing the dependency cycle though
> 
> Project history depends on transactions Interface as client. File io depends on it as supplier. That is clear.
> 
> It would be desirable to make this separation, just so that project history depends on less, but maybe you think it is not needed to break a cycle.
> 
> But file io will depend on project history too, although the reason for that is very slender.
> 
> See how SqliteSampleBlock.cpp uses Undo manager, just so that it can make a progress dialog during purge of undo history, using events emitted by Undo manager.

You know what?  Listening to myself, and looking at other commits in my branch, I'm doubting my own story.  I worked hard to achieve a dependency inversion between project history and the persistence layer, really because I was trying to make project history not depend on subclasses of Track (Wave track in particular).  But maybe that's all unnecessary.

I may need to rethink other things in the branch.  Platform neutral project file IO might need fewer steps to achieve after all.

However, I don't want AudioIO dependent on the persistence layer.  The existing use of a TransactionScope inside it is a reason why it would.  So, that smaller reason still remains, why this library is useful, until such time as we do the other work to avoid the need for that TransationScope.
 Pinging @crsib to review this branch again.

It is now a smaller PR.  The intention is only to allow later extraction of AudioIO in a library, which I hope can happen in this release.  I'm no longer trying to break dependency of undo and redo on the persistency layer.

Still unaddressed, as mentioned in comments above:  the uninformative message ""Database error.  Sorry, but we don't have more details."" and the problem that failures detected in the destructor are not better communicated.  But those are existing problems, and this just moves the code.

 I think we should wait for 3.1.3 to be merged into master (or we can do it now!)

3.1.3 adds a new transaction internally, so we won't be able to merge it cleanly into the master if we merge this PR first > I think we should wait for 3.1.3 to be merged into master (or we can do it now!)
> 
> 3.1.3 adds a new transaction internally, so we won't be able to merge it cleanly into the master if we merge this PR first

I don't understand the reservations.  I tried rebasing this branch onto release on my own computer, and there were no serious conflicts.  It should not need to wait either before or after merging 3.1.3 into master.  Where was a transaction added using TransactionScope?

Do you have any objections to the content of the pull request?
 Sorry, that was part of 3.1.2. Let's merge it then!",,"Resolves: #1139

A facade for database transactions, and injection of an implementation at startup time, breaks some dependencies from ProjectHistory, UndoManager, AudioIO.

This pull requests depends on #1429

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I have a strong opinion, that implementation should throw or otherwise provide the user with details on what to do, rather than a generic message that something has failed. The user side of error handling is already way too confusing and unhelpful for the user This feels like a possible source of broken projects, although rollback failures are rather rare A fair point but a separate question from the proposal in this PR.  This much of exsitent behavior is preserved without change, though moved into another file.

 Rollback as the RAII step in a destructor makes sense.  A destructor should also not throw.  It should do no-fail operations.  Yet we can't quite be sure rollback is always no-fail?  (A decent database should try very hard to make it so!)

No totally acceptable thing to do for this rare eventuality.  But again, it's beside the purpose of this PR, which does not make this problem better or worse than it was.
 I understand, that this somewhat maintains the current behavior. My point is - such separation will make it hard to fix it in the future. >A destructor should also not throw

This is true 99.9% of the time, but probably this one is in 0.1%? :-) C++ really fails us here.

I think we should rewrite transactions in the future (?) to accept the function object, that should be run as a part of the transaction. Like `io->Transaction([this](UndoStuff();});`

"
1656,2021-09-10T09:50:10Z,2021-12-07T01:51:59Z,pgirikishore,6,8,11,33,1,3,0,[],5320.0,0,7609006.0,1,0,0,0,87314776.622154,,2,11,0,False,"['SteveDaulton', 'Paul-Licameli', 'pgirikishore']","I've not yet tried building this.
Is the user still prompted in cases 2 and 3 when manually exporting? I think they should be, as the ""automatic"" sample rate selection may not be optimal in all cases (but definitely much better than now for batch processing). I was not aware that the user should still be prompted to select the sample rate in-case of manual exporting. Currently, the user is not prompted. I will look into that and fix that as well. The change of behavior should depend on the batch mode flag stored in AudacityProject.  When it is false, do not change behavior. Hey @Paul-Licameli, Please review this PR when you have the time.  You merged audacity/master into your branch -- which we don't recommend.  To keep up to date, it's better to fetch master, rebase your branch onto it, and force-push (git push -f) the branch to your fork.

But in this case, the changes are so small, I would rather you just use interactive rebase (git rebase -i) to ""squash"" all into one small commit.

Use multiple commits if there is complicated transformation of the code that should be broke into reviewable steps (not so here); but don't leave multiple commits that are a record of your corrections of earlier attempts that were not correct.
 Hello @pgirikishore , can you please do as I requested above:  squash all change into a single commit, rebase onto recent master (always rebase:  do NOT merge master into your work), then force-push?
I'm done with the review.  There is an error and should be some comments.
","I'm done with the review.  There is an error and should be some comments.
","Resolves: https://github.com/audacity/audacity/issues/1624

*(short description of the changes and the motivation to make the changes)*
The below solution was discussed and agreed upon by @SteveDaulton.
For a simple solution to the problem of batch processing being interrupted:
1. If the target bit rate is > 32 kbps and project rate <= 48 kHz, use the project rate (as now).
2. If the target bit rate is> 32 kbps and the project rate is > 48 kHz, use **48 kHz**.
3. If the target bit rate <= 32 kbps and project rate >  24 kHz, use **24 kHz**.
4. If the target bit rate <= 32 kbps and project rate <= 24 kHz, use the project rate (as now).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behaviour changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behaviour
","Does this compile?  The member is mBatchMode.

That would correct the first version of your fix, for the interactive case, in which behavior should not change. Apologies. I think I might have accidentally changed it before pushing the code. I will fix it. Don't write that, simply write
```
#include ""Project.h""
```
 You meant 24000?
 Is the intention to default to `highrate` appropriate for the bit rate?  Then say so in a comment.
 Perhaps clear without resorting to comments like this?
```
   // Verify sample rate
   if (!make_iterator_range( sampRates ).contains( rate ) ||
      (rate < lowrate) || (rate > highrate)) {
         if (project->mBatchMode) {
            if (rate == 0) {  // Maybe possible from macro command?
               return ProgressResult::Cancelled;
            }
            else if (rate < lowrate) {
               rate = lowrate;
            }
            else {
               rate = highrate;
            }
         }
         else {
            rate = AskResample(bitrate, rate, lowrate, highrate);
            if (rate == 0) {
               return ProgressResult::Cancelled;
         }
      }
   }

``` Thinking about it a bit more, I think it's possible to set an invalid MP3 sample rate via a macro, so to cover all possibilities we should ensure that macros also handle any *illegal* rates and not just rate == 0. Yes it is possible for a macro to set an invalid sample rate, so something like...
```
   // Force valid sample rate in macros.
   if (project->mBatchMode) {
      if (!make_iterator_range( sampRates ).contains( rate )) {
         auto const bestRateIt = std::lower_bound(sampRates.begin(),
                                                   sampRates.end(), rate);
         rate = (bestRateIt == sampRates.end()) ? highrate : *bestRateIt;
      }
      if (rate < lowrate) {
         rate = lowrate;
      }
      else if (rate > highrate) {
         rate = highrate;
      }
   }
   // else validate or prompt
   else {
      if (!make_iterator_range( sampRates ).contains( rate ) ||
         (rate < lowrate) || (rate > highrate)) {
         rate = AskResample(bitrate, rate, lowrate, highrate);
      }
      if (rate == 0) {
         return ProgressResult::Cancelled;
       
      }
   }

```"
2245,2021-12-06T16:28:26Z,2021-12-07T10:40:41Z,crsib,2,0,1,15,3,1,0,[],36558.0,0,65538.0,0,0,0,0,87317548.896293,,0,1,0,False,"['Paul-Licameli', 'crsib']","Should this crash fix go to a release branch?
 That makes sense, looks like the bug was introduced in 3.1.0This looks simple.
","This looks simple.
","Resolves: #2114 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2218,2021-12-02T02:05:27Z,2021-12-06T21:29:09Z,Paul-Licameli,0,0,11,362,6,1,1,[],,0,415426.0,0,0,0,0,87365041.042636,,0,11,0,False,[],,,"Prepares for the fixes for #2081 

Some preliminary refactorings before the real fix for adjusting bounds of looping play of MIDI (and also, enabling scrubbing of MIDI).  Not the complete fix .  Minor behavior changes, as described in commit comments.

* Small corrections of play head position
* Don't briefly sound the notes at the starting position again at the ending position when not playing looped (recent bug)
* Always send the correct update events for muted channels, in case they become un-muted during play (old bug)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2243,2021-12-06T11:46:07Z,2021-12-06T12:39:59Z,crsib,0,0,1,5,2,1,1,[],,0,3235.0,0,0,0,0,87396792.507213,,0,1,0,False,[],,,"

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2233,2021-12-04T23:00:12Z,2021-12-05T10:02:59Z,zachneill,0,3,2,8,1,3,1,[],,0,39767.0,0,0,0,0,87492616.082695,,0,2,0,False,[],"Look, Paul, you even get a few oxford commas back :) ","Look, Paul, you even get a few oxford commas back :) ","This PR makes modifications. The changes are minor, such as word misspells or grammatical fixes. ","Should that be ""extensible""?
 I think they are pretty much synonymous. Extensible is probably better though. I'll change it! Changed!"
2220,2021-12-02T16:30:38Z,2021-12-03T14:14:35Z,Paul-Licameli,0,0,1,38,6,1,1,[],,0,78239.0,0,0,0,0,87650319.047513,,0,1,0,False,[],,,"... This requires consistency both of lisp-style ~ format directives in .ny
files, and C-style % format directives in C++ files.

Fix some errors in .po files (else build fails, as it should).

This could prevent some crashes in C formatting.

Knowledge of the (human) languages was mostly not required, but I provided the
Spanish word ""y"" once.

Resolves: Possible mis-formatting of strings in some locales, and worse, possible crashes

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2227,2021-12-03T13:48:15Z,2021-12-03T14:04:18Z,Paul-Licameli,0,0,1,85,7,1,1,[],,0,966.0,0,0,0,0,87650935.58017,,0,1,0,False,[],,,"... when they are attached via the registry.  Do not tolerate cross-platform
permutations of the call sequence that violate this requirement!  Still
tolerating permutations that do not violate it.

This system still depends on the registered functions honoring the contract.  It
doesn't check it.

So among existing registered writes, the one for Tags (only) needs to be
guaranteed last.

Resolves: #2216

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1746,2021-09-26T00:45:28Z,2021-12-03T12:03:24Z,witwald,1,0,1,12,1,1,1,[],381302.0,0,5915876.0,0,0,0,0,87658193.059757,,0,1,0,False,['witwald'],"Are there any suggestions that anyone can offer as to how to progress this pull request? Would someone be able to do a review? Thanks for your input.Looks good to me!
","Looks good to me!
","Resolves: Limitation on spectrum analysis due to small max selection size

It is worthwhile increasing the maximum size of the block of selected samples in Plot Spectrum. These proposed code changes now enable 46.60 minutes of a 48kHz sampled signal to be analyzed. The previous limit often prevented the analysis of a complete song.

In this proposal, the dynamically allocated memory for storing the selection is now being freed when the Plot Spectrum dialog is exited. This is better housekeeping, which is more important now that we can have a much larger selection.

A test track with 55 minutes of data at 48kHz sampling rate was created, and this triggered the appropriate warning message. The computed spectrum appeared to be correct.
 
- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2192,2021-11-26T23:33:32Z,2021-11-29T13:10:43Z,elvey,0,0,1,2,1,1,1,[],,0,540070.0,0,0,0,0,87681516.04482,,0,1,0,False,[],,,"Add keywords others may be looking for to find some good news.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2215,2021-12-01T17:17:53Z,2021-12-02T00:21:27Z,SteveDaulton,0,0,1,11,1,1,1,[],,0,76991.0,0,0,0,0,87735134.594769,,0,1,0,False,[],,,"Format directives can only be used when using FORMAT

Resolves: https://github.com/audacity/audacity/issues/2206

*(short description of the changes and the motivation to make the changes)*
Translations fail when strings contain control characters, so use FORMAT directive ""~%"" instead of ""\n"" for new line.
Format directives can only be used when using FORMAT (not just in string literals).

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1741,2021-09-25T10:14:03Z,2021-12-02T12:44:06Z,witwald,11,0,1,15,2,1,1,[],5462.0,0,5884204.0,0,0,0,0,87742152.132256,,0,1,0,False,"['Paul-Licameli', 'SteveDaulton', 'rbdannenberg', 'witwald']","If this enhancement is used, there should probably be a similar enhancement to the Filter Curve EQ effect so that users can make practical use of the improved frequency analysis. However, note also: https://github.com/audacity/audacity/issues/1596 Does anyone understand the numerical properties of the FFT implementation in use now? Mathematically, the FT and FFT are invertible, but in practice, especially using 32-bit floats, error can be significant.  E.g. it is common to average multiple FFTs rather than compute one larger FFT to estimate a spectral average. For this application, where output resolution might ultimately be limited by pixel size in a plot, it is probably OK, but where's the analysis? Would downsampling and using a shorter FFT accomplish the same goal?  When performing an FFT analysis, it is common practice to use averaging to reduce the variance of the spectral estimates corresponding to each FFT bin. To be clear, we don't average the FFT as such, but the power spectrum, as we are considering the energy content of the signal. When displaying the spectrum using a logarithmic frequency scale, the low frequency end will not be particularly limited by pixel size. When analysing music signals, amongst many others, it is quite usual to use a logarithmic frequency scale in order to better display the energy content over many octaves. I don't envisage use of a 131072-point FFT  causing any numerical problems. Looking at the change in the displayed spectrum when going from a 65536-point to a 131072-point FFT shows the expected increase in resolution. In some of my test cases it became possible to resolve finer details than what were originally showing up in in the ""smoothed"" results presented in the coarser FFT. When I've analysed some CD music tracks, it is surprising to see some quite well defined low-frequency energy at frequencies in the 5Hz to 10Hz range (from air conditioning noise?). Having more FFT points allows those low frequencies to be studied with greater resolving power should there be any distinct peaks present that show up after averaging many individual spectra in the time history that is being analysed. I think your answer is basically that you do not understand the numerical properties of the FFT implementation in use now and are more concerned with frequency resolution than numerical accuracy. I decided to look for myself and found SIAM J. Sci. COMPUT. Vol. 17, No. 5, pp. 1150-1166, September 1996 ""ACCURACY OF THE DISCRETE FOURIER TRANSFORM AND THE FAST FOURIER TRANSFORM by SCHATZMAN. Figure 1 shows relative RMS at 128K and 32-bit float on RS6000 library to be about 0.01 or about 40dB SNR (!), but NCAR FFTPAK is between 10E-5 and 10E-6, or >100dB SNR. We do show power on a dB scale, so -40dB errors could be visible. I suspect our FFT is more accurate than the RS6K library that showed the large errors, so while FFT is generally accurate, error does grow with FFT size. A lot of people use data from Audacity in important work, including exporting spectral data. We don't want to produce sub-standard data. Thanks for that reference. I will take a look at it as I'm quite interested in FFT analysis techniques.

Please be aware that I did read the comments in the FFT code regarding potential loss of accuracy with longer FFTs. That's the reason I performed some testing, and I did not see any indication of accuracy problems. I fully take on board the comment that we need to maintain the SNR of the FFT when performing work. In fact, I am one of those people who would like to get accurate results. One important aspect is having appropriate frequency resolution available for the job at hand, as without it, it is not possible to do important work that involves accuracy of frequency estimates. FFTs that are too low in resolution are producing sub-par data, for me anyway.

As a further test, I created a 8.056640625 Hz sine wave with an amplitude of 1. As the signal is periodic in the rectangular window, there shouldn't be any side lobes. There weren't. The amplitude was 0.000000 dB at the peak, as expected, and the neighbouring FFT bins had values of -115.550842 dB and -115.155586 dB, and these two values seem to be the next largest ones in the entire spectrum.

Below is a representative excerpt from the exported data. I visually scanned it all, and I saw no evidence of any accuracy errors of the ""–40 dB"" type at all. The code appears to be working entirely as expected. Except that the export function seems to have a bug in it, as it neglects to include the 0 Hz frequency bin, which appears to be an error of omission that prevents the computation of values of DC offset in signals, such as those produced by many amplifiers. This too is a bit sub-par, I would think.

Frequency (Hz)	Level (dB)
0.366211 -163.002609
0.732422 -156.867752
1.098633 -153.317062
1.464844 -150.691299
1.831055 -148.582672
2.197266 -146.879913
2.563477 -145.193710
2.929688 -143.731705
3.295898 -142.347076
3.662109 -141.596878
4.028320 -139.696167
4.394531 -138.371826
4.760742 -137.013229
5.126953 -135.580856
5.493164 -134.070038
5.859375 -132.402420
6.225586 -130.517593
6.591797 -128.309143
6.958008 -125.548882
7.324219 -121.790947
7.690430 -115.550842
8.056641 0.000000
8.422852 -115.155586
8.789062 -120.997429
9.155273 -124.351471
9.521484 -126.708344
9.887695 -128.481918
10.253906 -129.925980
10.620117 -131.131287
10.986328 -132.160721
11.352539 -133.069000
11.718750 -133.871490
12.084961 -134.590683
12.451172 -135.249908
12.817383 -135.840912

Below is a plot of the FFT spectrum for the test signal. the –90dB lower limit makes the noise in the computed spectrum invisible. 
![image](https://user-images.githubusercontent.com/13775871/134787525-54fc6856-e1c3-4883-9aa1-870e2b73b505.png)
 Thanks for the reply. I don't know how to properly test an FFT implementation, but at least it passes a sanity check with flying colors. Are there any suggestions that anyone can offer as to how to progress this pull request? Would someone like to be a reviewer? Thanks for your input. Back in 2013, I submitted a patch to increase Plot Spectrum maximum size from 16384 to 65536. Choosing a maximum size will always be a matter of compromise. I was able to put forward an argument that was sufficiently compelling that the patch was accepted. I don't yet see a compelling argument for increasing it to 131072 (and not to say 524288 or 4194304).  > Back in 2013, I submitted a patch to increase Plot Spectrum maximum size from 16384 to 65536. Choosing a maximum size will always be a matter of compromise. I was able to put forward an argument that was sufficiently compelling that the patch was accepted. I don't yet see a compelling argument for increasing it to 131072 (and not to say 524288 or 4194304).

@SteveDaulton The compelling argument is quite simple. Audacity will become a more valuable tool for users who wish to perform higher-resolution analysis of low-frequency content in music signals. The proposed change gives much better resolution at frequencies in the 10Hz to 20Hz range, where there is often content that cannot at present be assessed properly. I have had difficulties doing such assessments when processing music to determine which ones can be used as worthwhile test tracks for subwoofers. What is wrong with improving the analysis capabilities of Audacity in such a simple yet meaningful way? To address the final aside that was given, increasing the maximum size to something like 2^18 = 262144 points is not entirely unreasonable, if the code works as expected. Why not increase to 4194304? Since @rbdannenberg approved the sanity check of data with 131072, I will merge this simple change.  Thank you.
",,"Resolves: Feature enhancement

The maximum FFT size in Plot Spectrum has been increased by a factor of 2 to 131072. This change has been made to allow a higher resolution FFT to be computed. This can be useful when assessing low frequency content of audio waveforms in music. This change gives much better than 1Hz resolution at a sampling frequency of 48kHz. At a sample rate of 192kHz, a 1.47Hz resolution is obtained, which is deemed acceptable.

Also, some minor typos have been corrected, and some of the code formatting adjusted for consistency.

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] The title of the pull request describes an issue it addresses
- [X] If changes are extensive, then there is a sequence of easily reviewable commits
- [X] Each commit's message describes its purpose and effects
- [X] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [X] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2217,2021-12-02T01:42:14Z,2021-12-02T12:32:21Z,Paul-Licameli,0,0,1,6,1,1,1,[],,0,39012.0,0,0,0,0,87742854.049959,,0,1,0,False,[],,,"Resolves: #2182 

There should be a small but nonzero threshold for mouse movement between click and button-up before drags in the time ruler really change the play region.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1691,2021-09-20T12:18:08Z,2021-12-02T12:30:40Z,DavidBailes,2,0,1,5,1,1,1,[],9278.0,0,6307952.0,0,0,0,0,87742960.509147,,0,1,0,False,"['petersampsonaudacity', 'DavidBailes']","I black-box tested this change of @DavidBailes on W10 with Audacity_Windows_32bit_1253483697_affc336 

With both full screen window and reduced window this now looks much better - a good improvement.

a) The dialog with Ctrl+B is popped under the cursor position
b) The dialog with Ctrl+M is popped under the playhead/recordhead position
c) In no case does the dialog overflow the window area.

**_BUT note that this did not build on Mac_** Could this be reviewed and merged?
It has been tested by Peter.",,"Resolves: https://github.com/audacity/audacity/issues/1681

If the ""use dialog for name of new label"" check box is checked in the track behaviour page of preferences, then when adding a label at either selection or playback position, a dialog is used for entering the name of the new label. For convenience the horizontal position of the dialog should be such that the initial horizontal position of the cursor in the edit box is roughly the same as the horizontal position of the cursor or playback position respectively.

This behaviour was broken by commit 8f8ec41.
In LabelTrackView::DialogForLabelName(), there was the change from:
   position.x += viewInfo.GetLabelWidth()
      + std::max(0, static_cast<int>(viewInfo.TimeToPosition(region.t0())))
      -40;

to:
   position.x +=
      + std::max(0, static_cast<int>(viewInfo.TimeToPosition(
         viewInfo.GetLeftOffset(), region.t0())))
      - 39;

The change that was causing the most problem is that the arguments passed to viewInfo.TimeToPosition() are the wrong way round. However in addition the original code guarded against the position of the cursor being negative - in that case it was treated as zero (this prevented the dialog from going off the left of Audacity's main window).

The fix: revert to the original structure of the statement.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2186,2021-11-26T05:55:14Z,2021-12-01T13:53:48Z,Paul-Licameli,2,0,14,1294,87,1,1,[],455337.0,0,460794.0,0,0,0,0,87824293.254232,,0,14,0,False,"['Paul-Licameli', 'crsib']","> A very good example of ""sequence of easily reviewable commits"", thank you, Paul!

Is that sarcasm?  This wasn't easy to write.
 Absolutely sincere A very good example of ""sequence of easily reviewable commits"", thank you, Paul!","A very good example of ""sequence of easily reviewable commits"", thank you, Paul!","Resolves: #1151

Extract a library for the Track abstract base class and for TrackList, which contains no mention of any concrete sub-classes of Track, not even as incomplete types.

The set of concrete Track sub-types known to the application should become open-ended, perhaps even extensible with plug-in modules.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2189,2021-11-26T11:37:13Z,2021-12-01T09:00:47Z,carlo-bramini,0,0,7,3,1,1,1,[],,0,422779.0,0,0,0,0,87841790.010497,,0,7,0,False,[],,,"While building on CYGWIN, I'm getting few errors because `strdup()` and `CLOCK_MONOTONIC_RAW` are not declared.
Actually, they exist but they need the presence of the macro `_GNU_SOURCE` to be defined for having their declaration enabled into the system include files.
This PR suggests the fix for solving the trouble on these source files.",
2185,2021-11-25T23:54:16Z,2021-11-29T09:32:12Z,vivekKr24,1,0,5,2,1,1,1,[],49563.0,0,304383.0,0,0,0,0,88002363.578114,,0,5,0,False,['vivekKr24'],"I have made the suggested changes.Works for me, though I think the logic would be clearer as:
`((and f0 (< f0 10) bw (> bw 10))` Looks good to me.","Works for me, though I think the logic would be clearer as:
`((and f0 (< f0 10) bw (> bw 10))` Looks good to me.","Resolves: #2004

The condition now checks for valid Notch Filter Parameters.

Previously, it was not checking if upper frequency was set or not, resulting in an error message describing the ""Notch filter"", even when the tool was supposed to act like a Lowpass Filter (upper frequency was not set)
If the upper frequency f1 was undefined (not set), the SpectralEditMulti tool must work like a Lowpass Filter with very low 'lower frequency' `(f0 < 10)`,  which had similar effects compared to the 'Low pass Filter' plug-in on my test audio file. (Hence no problems here)
We need not modify the error message as we don't have to handle the case talked above, and only throw error at a problematic (low central frequency and high bandwith) ""Notch Filter"" as mentioned in the comments at line 49.

Adding a condition that f1 is not undefined (tool should now work like a notch filter) will fix the problem (Error will only be shown when the case described in comments at line 49 arrives). I have tried the steps for reproducing the problems mentioned in the issue and it is no longer occuring.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2195,2021-11-28T10:20:45Z,2021-11-29T09:31:07Z,vivekKr24,0,0,1,5,1,1,1,[],,0,93974.0,0,0,0,0,88002384.580765,,0,1,0,False,[],,,"Resolves: #2180 

The window (which will be created after the PrefUpdate) is created with `LogWindow::Show()` 
(Previous window deleted with `sFrame.reset()`):
https://github.com/audacity/audacity/blob/3d42d454750df2111e9573349577781faddffa7e/src/LogWindow.cpp#L236

Updated `sText` with Log Buffer.
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2038,2021-10-28T07:23:31Z,2021-11-26T13:47:42Z,Paul-Licameli,13,2,16,13336,599,2,3,[],77661.0,0,2528709.0,1,0,0,0,88256684.531793,,0,16,0,False,"['Paul-Licameli', 'crsib']","@JamesCrook I have added comments to the new source file, and made sure it builds only as a console application, and made other necessary fixes in my CMake logic.  I'm waiting now to see if it passes CI builds.

Please review it again.
 I have this working on Mac and Linux but the Windows build fails for reasons still unclear.  I may need help.

C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'D:\a\audacity\audacity\build\CMakeFiles\9b6dd890b940b532b4fb159aa618f5f0\ClassicThemeAsCeeCode.h.rule;D:\a\audacity\audacity\build\CMakeFiles\9b6dd890b940b532b4fb159aa618f5f0\DarkThemeAsCeeCode.h.rule;D:\a\audacity\audacity\build\CMakeFiles\9b6dd890b940b532b4fb159aa618f5f0\HighContrastThemeAsCeeCode.h.rule;D:\a\audacity\audacity\build\CMakeFiles\9b6dd890b940b532b4fb159aa618f5f0\LightThemeAsCeeCode.h.rule;D:\a\audacity\audacity\libraries\lib-theme-resources\CMakeLists.txt' exited with code -1073741515. [D:\a\audacity\audacity\build\libraries\lib-theme-resources\lib-theme-resources.vcxproj]
 > Well done on getting this to work.
> Nice that it does not require any additional external dependencies (or, shudder, checking in an exe)

Some testing on Windows today tells me I’m not home yet.  The four themes are not available.  The static objects in lib-theme-resources that register the four themes never get constructed.  Either that library should have an initializer function called at startup, or it should be a module instead of a library, or just moved back into the main executable.

I will decide on one of those things and force push at least once more. > > Well done on getting this to work.
> > Nice that it does not require any additional external dependencies (or, shudder, checking in an exe)
> 
> Some testing on Windows today tells me I’m not home yet. The four themes are not available. The static objects in lib-theme-resources that register the four themes never get constructed. Either that library should have an initializer function called at startup, or it should be a module instead of a library, or just moved back into the main executable.
> 
> I will decide on one of those things and force push at least once more.

There is a new little .exe of course, but in source form, built and run as part of the procedure for building the application, and then even deleted after use, although that deletion doesn’t always work.  Rerunning Audacity in the VS debugger with no source code changes rebuilds the image compiler (but that takes very little time) and doesn’t destroy it (but that takes only tens of kilobytes). I expect one more chapter in the story of theme system rewrite.  That will allow the breaking-up of AllThemeResources.h into multiple pieces, and the invocation of the image compiler correspondingly multiple times in the build.  The set of theme resources, as I have said, should be open-ended.  It should become a true registry.  The definition of images required only for the Edit Toolbar, to take an example, should be closely associated with the code implementing the toolbar, and not in the low level Theme library. I made one more fix, in the first commit in the sequence, and verified that theme switching on Windows isn't broken now.

I think it's really really ready for merge now!
 The interesting question is how we can help the themes creators. Probably we should rethink the system from the ground up.  > The interesting question is how we can help the themes creators. Probably we should rethink the system from the ground up.

The how-to is here:  https://wiki.audacityteam.org/wiki/Theming_HowTo#Image_Cache

Note  `Create a folder called ""Theme"" (without the quotes) in Audacity's folder for application data then place your modified .png file in there.`

I think it would be more convenient for creators of themes to have another option, to put the un-bundled .png files inside a certain folder instead.  Then, Audacity can look for those instead of the monolithic .png file.

Each way of defining a custom theme has advantages and disadvantages, but we can give the choice.

I have not yet done the work to realize this, but it would not be a ""ground-up"" rewrite of things, I think.

@JamesCrook @LWinterberg 

For the task at hand, merging this into master:  is your objection blocking or not, @crsib?


 > is your objection blocking or not

Probably let's just move the image compile to a different location, so there is no need to delete it. On the other hand, this is probably not the most straightforward task on Windows > > is your objection blocking or not
> 
> Probably let's just move the image compile to a different location, so there is no need to delete it. On the other hand, this is probably not the most straightforward task on Windows

Do you remember all the irritating fuss there is to make Audacity properly find its dynamic libraries, on each of the platforms?  There was similar irritation to get the image compiler program to run, and the easiest shortcut solution was to put it in that folder.
 > > > is your objection blocking or not
> > 
> > 
> > Probably let's just move the image compile to a different location, so there is no need to delete it. On the other hand, this is probably not the most straightforward task on Windows
> 
> Do you remember all the irritating fuss there is to make Audacity properly find its dynamic libraries, on each of the platforms? There was similar irritation to get the image compiler program to run, and the easiest shortcut solution was to put it in that folder.

I was debugging my image compiler on Windows and got it to work.  Now I'm trying it out on Mac, and I find in debug build at least that there are crashes on startup of Audacity, after modifying images and rebuilding.  A message on stderr says the dynamic library loader can't find lib-exceptions!  I have to do clean rebuild.

That's weird and might be an annoyance for developers.  I don't know yet how to fix it.  But this branch does pass the CI builds, which are from clean state.


 I can help you with that, if you don't mind! > I can help you with that, if you don't mind!

Debug build crashes this way, even restarting the program in the debugger, with no changes in sources or images.
The additional comments in imageCompilerMain.cpp look just fine.
 Well done on getting this to work.
Nice that it does not require any additional external dependencies (or, shudder, checking in an exe)","The additional comments in imageCompilerMain.cpp look just fine.
 Well done on getting this to work.
Nice that it does not require any additional external dependencies (or, shudder, checking in an exe)","Resolves: Changes of colors and images being much harder than it should be

Automate the generation of the *ThemeAsCeeCode.h headers from .png files and Colors.txt files.

Build a small executable that shares lib-theme and executes at build time to regenerate the header files when they are out of date with the images.

Thus, we can just check in the images.

Also a recovered history of the images implied in the history of the *ThemeAsCeeCode.h files, for reference.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This source file needs comments to say what it does and when it is compiled.
Without that it makes it hard for maintainers to work with. I think we should just put this executable in a different location. This way it won't be installed on Windows/macOS and there will be no need to rebuild it constantly."
2190,2021-11-26T12:04:09Z,2021-11-26T12:20:12Z,crsib,0,0,2,38,2,1,1,[],,0,966.0,0,0,0,0,88261990.024051,,0,2,0,False,[],,,"This PR addresses two issues related to Windows 11 and MSVC 2022:

* Broken WinNT header: https://issueexplorer.com/issue/microsoft/Windows-Dev-Performance/98
* `conan.cmake` not including MSVC 2022 is the supported versions list

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2188,2021-11-26T10:53:20Z,2021-11-26T11:51:35Z,crsib,0,0,1,27,2,1,1,[],,0,3498.0,0,0,0,0,88263707.514209,,0,1,0,False,[],,,"Fixes CI issues after XCode was updated in CI image

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2126,2021-11-12T14:23:54Z,2021-11-25T14:00:20Z,Paul-Licameli,0,0,2,341,23,1,1,[],,0,1121791.0,0,0,0,0,88342381.983263,,1,2,0,False,[],,,"Resolves: #2125

Shrink the source code dependency cycle mentioned in the issue, to only six files, not worse than in 3.0.3.  Untangling commands, toolbars, and menus is work for the future, but keep WaveTrack and others out of the cycle.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2179,2021-11-23T14:56:38Z,2021-11-23T14:59:05Z,LWinterberg,0,0,1,6,1,1,1,[],,0,1212.0,0,0,0,0,88510597.106101,,0,1,0,False,[],,,,
2160,2021-11-18T19:45:22Z,2021-11-19T12:13:05Z,vsverchinsky,1,13,2,23,2,3,2,[],335543.0,0,335543.0,0,0,0,0,88590943.039102,,0,2,0,False,['petersampsonaudacity'],"I tested this with @vsverchinsky  Vitaly's branch build: audacity-win-3.1.3-alpha-20211119+d998117-64bit

Testing on W10 I get no crash with this build - I do get the crash with 3.1.2Approved, with one small suggestion for simplification.

I would like @crsib to comment, even if only to confirm he has read all of my comments.
","Approved, with one small suggestion for simplification.

I would like @crsib to comment, even if only to confirm he has read all of my comments.
","Resolves: #2147 

Please, pay attention to the possibly blocking behaviour

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","You might eliminate a repetition of `TrackList::Get(*pProject)`
 Study the function `AudioThread::ExitCode AudioThread::Entry()` for the thread that must make the change of state that un-blocks this main thread.  @crsib has become more familiar with this thread, after reviewing other PRs of mine that refactor the functions called in it.

I strongly doubt that this other thread ever fails to make progress now, or to change the condition that the main thread is waiting on here.  If it ever did, then the loop above would have effectively become the new alternative event-loop of Audacity, making the program still responsive to some inputs, and yet the program would be stuck in a strange state, unable to stop a play or recording and start another one.  But I recollect no such bugs.

The Yield() call does nothing to assist this other thread in making progress, which is why I favor removing this ancient and unexplained piece of code.

 And, I am very aware that this bit of inter-thread communication with a volatile bool variable is not correct.  Leave it to me to rewrite it better, as part of my sweep of all the bad old stuff in the audio engine that I want to complete in the coming release.

This looks like the sort of thing that should be done the modern way with a std::condition_variable, and a companion std::mutex.  And it would not be bad to do so, because the other thread is not the low-latency thread.  We don't need extra effort to avoid memory allocations or mutex locking in it.
 The Yield() seems only to have been a source of bugs, because it causes some event callbacks to be invoked while still in the middle of other, un-finished event callbacks, causing surprising things to happen because the callbacks were not written in anticipation of this.

The Yield() call is NOT a yielding of the thread to other threads (like `std::this_thread::yield()`) but rather allows more event dispatches to happen while still in the main thread, as a sort of cooperative multi-tasking.

The original author of this Yield() call (some time before the 2010 event horizon of this git repository) might just have been confused, and nobody has yet paused long enough to recognize that confusion.  Or maybe they really were trying to compensate for bugs in ancient versions of AudioThread, but these bugs were fixed in better ways by other means.

 And you have my great respect for working backwards from a crashing call stack to this Yield() as the ulterior cause of it.  It is very non-obvious. Sure, thanks! Thank you! I agree that the code in StopStream is quite broken, and the check there doesn't work.

What bothers me here - is there a chance that the app will hang in the new loop? The previous version effectively created a new ""run loop,"" which is also wrong but more user-friendly.

Should we think of a better synchronization here now? Like using atomics for mStreamToken and waiting on a proper condition before we exit. I can easily imagine a case where `mAudioThreadShouldCallTrackBufferExchangeOnce` is true till the end of the world. Should we just wait on mStreamToken? We've debugged with Vitaly, probably it wont hang :) Sure, this needs rewriting.  In practice, the Audio thread doesn't take long to finish its work.

We could use a std condition variable and wait_for if we are worried about that contingency, but I don't know how the main program could recover if the Audio thread is not making progress.  Kill the thread?  Leaving things in what undefined state?  I think there would be nothing to do but put up an error dialog, then quit the program after the acknowledgment.

But it is not a known problem in my experience.

I'm speculating that the ancient code yielding to the event dispatcher MIGHT have helped twenty years ago, with slower drives recording the samples, to allow refreshes of windows to happen, in case the delay of the other thread was noticeable.  Maybe it prevented visual ugliness.  But, not an argument in favor now.

The problem is yielding to all events indiscriminately causes other confusions.



 After even more discussion with Vitaly, I think we should probably just use `std::this_thread::yield();` instead of both of the instructions. But this code is fine as well! So you think a busy-wait, but with a yield, would be preferable to the repeated sleeps?  I have had that thought too.
"
2171,2021-11-20T17:45:01Z,2021-11-20T17:55:13Z,SteveALee,0,0,1,17,1,1,1,[],,0,612.0,0,0,0,0,88760296.350676,,0,1,0,False,[],,,"I also moved the ASIO from advance to Windows section as they make more sense there IMHO.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2118,2021-11-11T19:56:34Z,2021-11-20T20:20:35Z,Paul-Licameli,0,2,7,833,29,2,1,[],,0,779045.0,0,0,0,0,88751570.691393,,1,7,0,False,[],,,"Resolves: Restructure more legacy code related to effects

Better separation of responsibilities between the common ""host"" dialog in EffectUI.cpp, and the ""client"" plug-ins that only decorate a panel on the dialog.  The ""client"" can tell the host whether the dialog should be modal, but leave it to the host to create and destroy the dialog.

Also remove some special member variables of Effect that existed only for the use of Nyquist.  Instead the public member function iterfaces allow Nyquist to specify the special case behavior.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I believe it should be int now Thank you.  I changed that
"
2086,2021-11-03T19:59:10Z,2021-11-09T12:55:17Z,vsverchinsky,0,1,1,20,1,1,1,[],,0,1360850.0,0,0,0,0,88860810.237867,,0,1,0,False,[],,,"Resolves: #2072 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","An unchanged line, but I wonder if this is an old mistake that is off-by-two because it should be - 1 not + 1
"
2088,2021-11-03T20:30:38Z,2021-11-10T14:00:49Z,vsverchinsky,1,3,2,167,3,2,1,[],480804.0,0,1358920.0,1,0,0,0,88860853.717241,,1,2,0,False,['Paul-Licameli'],"I'm done with this review
The question about whether trimmed data is eliminated in too many cases may be deferred.
","The question about whether trimmed data is eliminated in too many cases may be deferred.
","Resolves: #1889

Also partly resolves #2051: applying the Nyquist effect to a range that contains splits resulted in multiple copies of the same data received from the effect being created but with different offsets and trims, and, at the same time, old trimmed data was lost. This fix aims to resolve both issues: preserve old trimmed data at split points and eliminate data duplication.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think the two lines above should be conditional.  Clear old trim data, only if there is something to attach.  Otherwise, you make this behave unlike WaveClip::Split which preserves all sample data in each new clip at the split.

Am I wrong?
 Making the second clip const would be nice, and also in the other lambda following
 I don't think you are wrong, because this question is more about desired behavior. WaveTrack::Split creates a new clip copy with other trimmings and offset values, being used within generators/automated actions they can lead to an enormous amount of duplicates, which is not maintainable (right now). I think it's reasonable to preserve original tracks data hidden behind those splits, but not to introduce new hidden data."
2151,2021-11-16T19:21:37Z,2021-11-16T19:23:33Z,crsib,0,0,6,54,6,0,0,[],,0,123.0,0,0,0,0,89100592.248057,,0,6,0,False,[],,,,
2121,2021-11-11T20:15:29Z,2021-11-18T12:45:53Z,crsib,11,30,9,6250,60,2,0,[],402462.0,2,577836.0,1,0,0,0,88951647.764669,,1,9,1,False,"['Paul-Licameli', 'crsib']","I pushed a suggested commit, please review that!
 >I pushed a suggested commit, please review that!

I've left that out to see if I can see a measurable difference in performance and I've observed none. Still, that commit is a welcome addition, thank you! Something is definitly wrong with autosave now.  Do these steps:

1. Run Audacity; generate noise; force-quit Audacity (such as with the debugger)
2. Restart Audacity; recover files; you should get the noise back.
3. Force-quit again; restart again; recover again.

Expected result: the second recovery works.
What I observe:  varying crash-y symptoms suggestive of a memory overwrite.

I think you must recover twice to get the bug, and I think it happens only starting at the commit ""Use the fast stream reader (still, reading from memory)"".  Of course it may be hard to be sure, when there is a memory overwrite.
 > Something is definitly wrong with autosave now. Do these steps:

There was an issue with recovering a project, that never was saved. I do not observe the issue you described though > > Something is definitly wrong with autosave now. Do these steps:
> 
> There was an issue with recovering a project, that never was saved.

Which issue?   If it happens, it surely is an issue to fix.  The unsaved data might be a long recording.

> I do not observe the issue you described though

I know I saw this problem, and I find it reliably in my macOS debug build of this branch, though the exact symptoms are various.  I'm not satisfied until there is more understanding.

 > > > Something is definitly wrong with autosave now. Do these steps:
> > 
> > 
> > There was an issue with recovering a project, that never was saved.
> 
> Which issue? If it happens, it surely is an issue to fix. The unsaved data might be a long recording.
> 
> > I do not observe the issue you described though
> 
> I know I saw this problem, and I find it reliably in my macOS debug build of this branch, though the exact symptoms are various. I'm not satisfied until there is more understanding.

Your latest change to LoadProject may have made the problem go away, so it seems with a few tries, although I don't know why.
 I do not observe any problems with the latest build on macOS, not in release or debug builds. I think there can be an issue in ShowError class `XMLUtf8BufferWriter` became unused at ""Decode BXML directly, without intermediate stage""

So should the class be deleted?  Sad all that hard work obsoleted so soon.
 I just need to step through ProjectFileIO::LoadProject to be sure I understand all the changes in there, and I will approve if I think nothing is wrong, although the unexplained random problems I saw give me a bit of doubt that some problem was missed.
 > So should the class be deleted? Sad all that hard work obsoleted so soon.

To be fair, I think it's XMLStringWriter that will go away at some point, and XMLWriter interface will be adapted to match XMLUtf8BufferWriter. There is still room for performance gains in serialization, that can be achieved by removing `const wxString &name` from the writer interface :-) And I expect much easier PR for that! Well, that was epic!Overflow detection is insufficient",Overflow detection is insufficient,"The idea behind the PR:

* Have a class, that is fast to construct and allows to handle integer, floating-point, and string_view types of data. 
* Replace all the redundant casts to UTF16, use `string_view` to represent tag and attribute names
* Using the updated XMLTagHandler create an adapter, that allows deserializing the project directly from the binary stream.

The infamous project I mentioned in #2087 loads in:
* 11 seconds on 3.1.0,
* 5 seconds on 3.1.1,
* 270 msecs with this build.

Additionally, I have a project from @Penikov, which has a 420 Mb project blob. For this case, I observe:

* 95 seconds on 3.1.0 (and a whooping peak around 4 Gb of RAM, while only 1.4 is needed!),
* 45 seconds on 3.1.1,
* ~2.5 seconds with this build.

The dark side of this PR:

* All the XML (de)serialization is touched. This includes exporting for VST2, Equalization, and importing legacy aup files.
* There is a large number of files changed, most of them related to the project loading though.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","By eliminating UTF8CTOWX, are you requring that tag strings to be canonicalized into utf-8 already, or requiring them just to be ASCII strings?  They are all ASCII in practice (I just had to  review them all).  It is worth a comment.

You know I like to say things with type disctinctions where I can.  If we were using C++20, I would use std::u8string_view instead of std::string_view.  Not having C++20 and char8_t, what can we do?  Maybe at least make a different type alias to make the disctinction in function declarations, thought we won't have type checking by the compiler.


 By eliminating UTF8CTOWX, are you requring that tag strings to be canonicalized into utf-8 already, or requiring them just to be ASCII strings?  They are all ASCII in practice (I just had to  review them all).  It is worth a comment.

You know I like to say things with type disctinctions where I can.  If we were using C++20, I would use std::u8string_view instead of std::string_view.  Not having C++20 and char8_t, what can we do?  Maybe at least make a different type alias to make the disctinction in function declarations, thought we won't have type checking by the compiler.


 I'm taking this whole file on trust.  Are there any differences from the original I should know?  As there were with ToChars?
 ""not matching the pattern""
 ""too"" ""signed"" (in 4 places)

""singed"" means ""burned"" -- which you could also say as ""charred"" :-)
 (And it rhymes with ""cringed"")
 This time it is just the latest release of the library! `unsigned(c) - '0'` ?

I'm paranoid of signed char now.
 I think you don't need `- 1`.  You treat the last safe digit in the second loop below instead of the first.  Not wrong, but is it too much caution?
 I don't actually think that char8_t implies any checks on encoding. However, we use Expat, and Expat seems to convert the output to UTF8 internally. So specifically for this case, I imply UTF8, and that is what originally implied.

The UTF8 allows to safely compare to ASCII strings given that all the symbols are from the first half of the table. This covers Audacity needs for 100% when working with tags and names. For attribute values - we explicitly convert from UTF8 to wxString where needed. Probably `std::deque`? It can be more efficient on some platforms This if-else is redundant with line 74
 I'm pretty sure that this will generate the same code because of integer promotion rules. https://godbolt.org/z/4T8cfsMej

Can do it you way, no probs :-)
 Should this be
`std::is_signed_v<ResultType>
   ? static_cast<UnsignedResultType>(
      std::numeric_limits<ResultType>::max() / 2 + (isNegative ? 1 : 0))
   : std::numeric_limits<ResultType>::max()`
 I want to keep the consistent overflow checks.

I.e. for uint8_t digits10 is 3, but 257 is an overflow. So we allow to parse ""57"" quickly but give more caution while parsing ""157"" because we expect that it can be ""557"" Hmm, thank you for pointing out, line 74 is redundant actually! I want `if constexpr` here exlicitlely.
 > I want to keep the consistent overflow checks.
> 
> I.e. for uint8_t digits10 is 3, but 257 is an overflow. 

Is it really 3, not 2?  See immediately under ""Example"" https://en.cppreference.com/w/cpp/types/numeric_limits/digits10


 Hmm, could be a bit faster, yes! Hmm, yes, you are completely right! Certainly it's safe when a tag is ASCII, and all of them are.  But I'm asking, are we _requiring_ them to be ASCII now that you remove UTF3CTOWX ?

You may miss my point about char8_t -- it is that, where a string or string_view is required to be utf8 encoding, it would be good to say that with one type, and where required to be ASCII, to say that without another type, and it would be best if the types do not implicitly interconvert, so the compiler will help us catch misuses.
 I thought `deque` deals with big pages.  Existing ProjectFileIORegistry (alias XMLMethodRegistry<AudacityProject>) registrations are maybe too few to justify it, and they happen only at startup.

Whereas, the lookups into the map may be many, and we want all the savings we can find during deserialization.

The lookups may not really be many, yet, but XMLMethodRegistry may be reused for many more fields later.
 Not just faster, but correct.  It was wrong without `/ 2`.  You want overflow of the absolute value of the signed value at a lower threshold than with unsigned.
 >are we requiring them to be ASCII 

We can't even do it, because Expat will always output UTF8 encoded string.

>where a string or string_view is required to be utf8 encoding

The safest assumption is that all std::string are UTF8 encoded to be fair. temp > maxValue is useless in the unsigned case.

temp < result is an insufficient check for overflow!

Try it for example with ResultType as unsigned char, and the string ""724"".  You will get 212 and no error detected.

Please review another suggested commit from me to fix this. Sorry, I was wrong, because the template argument is `<ResultType>` not `<UnsignedRestultType>`
 But the original was wrong too, because the cast to UnsignedResultType should be done before adding 1 !  (Maybe it works, but the small change technically avoids actual overflow in the computation of maxValue itself) Yes, I rewrote it correctly > temp < result is an insufficient check for overflow!

Hmm, it will, but probably not for the `uint64_t`, let me think. Definitely works for  `uint8_t`:

https://crsib-screenshots.s3.amazonaws.com/202111161744-bs5nq.png

>temp > maxValue is useless in the unsigned case.

We can compile it out by if constexpr, but I don't think if it really matters though ""text"""
2128,2021-11-12T14:43:54Z,2021-11-16T08:20:16Z,crsib,0,0,1,18,1,1,1,[],,0,344414.0,0,0,0,0,89118565.931488,,0,1,1,False,[],,,"If digitsAfterDecimalPoint was set, Audacity would crash if |decimal_exponent| is larger than length.

Resolves: #2127 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2135,2021-11-15T09:23:56Z,2021-11-15T15:28:43Z,crsib,5,0,1,4,1,0,0,['P1'],20779.0,0,104405.0,0,0,0,0,89118573.592191,,1,1,1,False,"['Paul-Licameli', 'crsib']","This looks harmless.  I don't immediately understand why this fixes the bug.  Is it because char is signed?  But the signed-unsigned comparison would have coerced the negative to a large unsigned value.

More seriously I should ask why all the logic in XMLWriterx::XMLEsc was not reproduced in XMLUtf8BufferWriter::WriteEscaped.  I should have asked that question with the earlier PR.
 >But the signed-unsigned comparison would have coerced the negative to a large unsigned value.

This is a signed-signed conversion, unfortunately.

> More seriously I should ask why all the logic in XMLWriterx::XMLEsc was not reproduced in

The problem is that it was mostly reproduced, just with the exception of surrogate pairs handling. > > But the signed-unsigned comparison would have coerced the negative to a large unsigned value.
> 
> This is a signed-signed conversion, unfortunately.

DUH!  I see 0x... and assume unsigned, but there wasn't ...u after it.  Of course.

> 
> > More seriously I should ask why all the logic in XMLWriterx::XMLEsc was not reproduced in
> 
> The problem is that it was mostly reproduced, just with the exception of surrogate pairs handling.

 > > But the signed-unsigned comparison would have coerced the negative to a large unsigned value.
> 
> This is a signed-signed conversion, unfortunately.
> 
> > More seriously I should ask why all the logic in XMLWriterx::XMLEsc was not reproduced in
> 
> The problem is that it was mostly reproduced, just with the exception of surrogate pairs handling.

And we know the string has been converted to utf8 here 

```
void XMLUtf8BufferWriter::WriteAttr(const std::string_view& name, const Identifier& value) 
{
   const wxScopedCharBuffer utf8Value = value.GET().utf8_str();

   WriteAttr(name, { utf8Value.data(), utf8Value.length() });
}
```

And that makes the surrogate handling unnecessary?  It is ok to leave all the utf8 encodings un-escaped?
 >It is ok to leave all the utf8 encodings un-escaped

Surrogates are easier in UTF8. All the symbols we wanted to keep away from XML (although I do not really understand why) or escape are in the lower 7 bits. If the most significant bit is set - we definitely have a multiple bytes sequence, which we considered to be ""safe"" for XML. 

>And we know the string has been converted to utf8 here

This is an easy point for further improvements of the XMLWriter class though. The cases when we really need to convert the value from the wxString (or even to construct it!) are rare. At least the `name` argument should always be a `std::string_view` or even a `const char`*. This will like improve the serialization performance twice.
",,"Resolves: #2132
Resolves: #2134

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2136,2021-11-15T10:41:52Z,2021-11-16T00:26:41Z,vsverchinsky,2,0,1,5,1,0,0,[],15059.0,0,87845.0,0,0,0,0,89130457.799714,,1,1,0,False,"['Paul-Licameli', 'vsverchinsky']","The small changes look harmless, but I don't understand why they fix a crash.

Would it be better to apply the small corrections in mTrimLeft and mTrimRight within WaveClip::Resample?
 > The small changes look harmless, but I don't understand why they fix a crash.

Because the amount of samples returned by `WaveClip::TimeToSamples(trim)` depends on current sample rate. When applying resampling it may happen so that trim value does not exactly match the beginning of the sample any more. And the bug comes from difference in the way number of samples is calculated: `WaveClip::GetPlaySamplesCount` adjusts trimmings to the sample rate, and `WaveClip::GetPlayEndTime()` and others - do not, so `WaveClip::TimeToSamples(WaveClip::GetPlayEndTime() - WaveClip::GetPlayStartTime())` may not be equal to `WaveClip::GetPlaySamplesCount`, sometimes leading to an OOR.

> Would it be better to apply the small corrections in mTrimLeft and mTrimRight within WaveClip::Resample?

It may work in that particular case, but I don't see why it's better. Functions mentioned above still return different values, which should be fixed anyway, so it becomes unnecessary to fix `Resample`. Also, resample(newSampleRate)->resample(originalSampleRate) may change original trimming values, while with this fix preserves them.",,"It could happen so that after resampling number of samples contained in `GetPlayEndTime() - GetPlayStartTime()`
didn't match to number of samples in `GetPlayEndSample() - GetPlayStartSample()`

Resolves: #2113 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2144,2021-11-16T09:40:23Z,2021-11-16T09:41:46Z,LWinterberg,0,0,1,20,1,1,1,[],,0,117.0,0,0,0,0,89135476.060058,,0,1,0,False,[],,,,
2123,2021-11-12T12:40:48Z,2021-11-16T00:38:19Z,DavidBailes,0,2,1,5,1,2,1,[],,0,302251.0,0,0,0,0,89168117.728936,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/2119

Joining clips using the Join command (Ctrl+J) can cause data in preceeding clips to be silenced.

Fix: In WaveTrack::Join(), the initial value of t should be PlayStartTime of the first clip, not SequenceStartTime.

Resolves: https://github.com/audacity/audacity/issues/2119


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","A new clip has zero length, `WaveClip::Paste` then makes some checks to decide which data would be discarded, and in that case, the outcome depends on the order in which these cases are handled. So I guess I need to handle another special case in `WaveClip::Paste` so that pasted clip is fully preserved when the target clip is empty. Now if I make a selection strictly inside one clip, and then call join, then the hidden data on the right is lost. > So I guess I need to handle another special case in `WaveClip::Paste` so that pasted clip is fully preserved when the target clip is empty. Now if I make a selection strictly inside one clip, and then call join, then the hidden data on the right is lost.

An alternative fix for the reported bug, would have been to do something similar to void WaveTrack::MergeClips().
That is, not to delete clipsToDelete[0], but to use that as the ""newClip"", and paste the rest (+silence where necessary). I think this would avoid pasting into an empty clip.

Thanks for approving the  commit!"
2069,2021-11-01T22:18:51Z,2021-11-15T07:43:57Z,Gootector,0,0,1,4,1,1,1,[],,0,1157106.0,0,0,0,0,89228980.121502,,0,1,0,False,[],,,"Update Polish Translation from Transifex - master
1 fix.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2115,2021-11-11T19:01:21Z,2021-11-12T13:21:46Z,Paul-Licameli,2,0,7,1699,28,1,1,[],63434.0,0,67027.0,0,0,0,0,89466910.263269,,1,7,0,False,"['vsverchinsky', 'Paul-Licameli']","The only thing I want to note about using std::varinat in that context is that extension of the type list may lead to a necessity to change the existing function bodies (`PluginManager::GetConfigValue`, `PluginManager::SetConfigValue`) > The only thing I want to note about using std::varinat in that context is that extension of the type list may lead to a necessity to change the existing function bodies (`PluginManager::GetConfigValue`, `PluginManager::SetConfigValue`)

PluginManager::SetConfigValue just needs a generic lambda, and it compiles calls to different overloads of wxConfigBase::Write() (see confbase.h in wxWidgets sources), depending on what type `auto` is bound to.  It is very nice to see how this works to eliminate a lot of duplicated code.

See at line 311 of confbase that you can overload wxToString globally for new kinds of values -- so this generic lambda might still work unchanged in future, even with custom types, provided you add wxToString for the new type.  See Identifier.h for an example where I did this already.

PluginManager::GetConfigValue is a little more complicated, because I was being very conservative about preserving the special logic that existed for float, but a closer reading of wxWidgets documentation might prove that this caution is not needed.

See line 204 of confbase.h for use of wxFromString to customize Read() too for other types, and see Identifier.h again for an example.  So again, defining that with the new type will allow the generic lambda to continue working unchanged.

",,"Resolves: Some legacy code made less confusing

The loading and storing of persistent effect settings becomes less repetitious, with the use of variants and visitors, and merging of two sets of functions (for ""private"" and ""shared"" configurations) into one.

Class Effect has one fewer abstract base class, and defines fewer overrides, as we eliminate class ConfigClientInterface whose purpose wasn't clear.

Instead, plug-ins like VST effects can just use PluginManager more directly.

Two other abstract classes lifted out of libraries/lib-components (home of may interfaces with unclear purposes).  More may follow.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2007,2021-10-23T03:07:22Z,2021-10-25T08:39:53Z,Paul-Licameli,0,0,3,90,4,1,1,[],,0,1688279.0,0,0,0,0,89544498.142101,,1,3,0,False,[],,,"Resolves: #1999 
(and two other problems)

* Dragging of looping region partly into negative time should not make it disappear
* Yellow snap guideline should be visible at right edge of last clip
* Remove arbitrary restriction on selection of play regions with error message ""Cannot lock region beyond end of project.""

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2110,2021-11-10T19:37:09Z,2021-11-11T16:03:21Z,Paul-Licameli,1,0,1,70,1,1,1,[],73519.0,0,73575.0,0,0,0,0,89544615.31398,,1,1,0,False,['Paul-Licameli'],"Thanks for approval.

To be really clever, I could implement a jump table.

""Exercise for the reader"" as the math books say.
",,"Resolves: A development annoyance preventing some more elegant C++

std::variant and std::visit aren't really here yet for macOS while our minimum isn't up to 10.13.

But I won't let that stop me...

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2111,2021-11-11T10:26:45Z,2021-11-11T10:28:21Z,crsib,0,0,24,3979,27,0,0,[],,0,7755.0,0,0,0,0,89557060.55296,,0,24,0,False,[],,,,
2107,2021-11-10T04:16:04Z,2021-11-10T09:19:31Z,Paul-Licameli,1,0,1,2,1,1,1,[],17751.0,0,18207.0,0,0,0,0,89655250.409255,,0,1,0,False,['crsib'],"That was easy indeed. Still, I think old themes wont work correctly",,"Resolves: #2043

Recent theme rewrites mistakenly eliminated the ability to load custom themes from an image cache file.  One-line fix.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2106,2021-11-09T15:28:48Z,2021-11-10T10:43:35Z,crsib,0,8,2,200,2,2,1,[],,0,69290.0,0,0,0,0,89650203.411638,,0,2,0,False,[],"Approved, with a few suggestions
","Approved, with a few suggestions
","This PR uses blob_open/blob_write APIs to avoid a potentially huge memory copy that happens in `MemoryStream::GetData`

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Should rowID be long long?
 I would initialize that to nullptr... ... just in case SQLITE_MISUSE is the return value, see the docs https://www.sqlite.org/c3ref/blob_open.html

 You do this to avoid an autocommit for each chunk?  You discovered the need for it or you knew?  This page isn't explicit about it https://www.sqlite.org/c3ref/blob_write.html but autocommit is mentioned for blob close.

You might comment.
 It's `int64_t` in SQLite. Usually, it's an alias to `long long` anyway. At least until we will have 128 bit `long long` :-) Won't hurt for sure! It's really confusing to be fair. Is it safe to close a misused blob?

>This means that, provided the API is not misused, it is always safe to call sqlite3_blob_close() on *ppBlob after this function it returns.

Looking into the source code - there is a single case where ppBlob will not be initialized and MISUSE is returned. I want to make sure that the project is written atomically. It was guaranteed previously that the project is saved atomically, so I kept this behavior. "
2087,2021-11-03T20:15:52Z,2021-11-09T11:38:22Z,crsib,6,17,5,1812,14,2,1,[],482553.0,0,491543.0,1,0,0,0,89729127.989288,,1,5,0,False,"['Paul-Licameli', 'crsib']","I have reviewed everything but the XMLUtf8BufferWriter class and have no objections to those parts.

I assume the ToChars implementation is just a great cut and paste of trusted code.  Or are there any differences from your source I should know about?

 > I assume the ToChars implementation is just a great cut and paste of trusted code. Or are there any differences from your source I should know about?

The only major difference is that I have added buffer size checks to Grisu2, which always blindly assumed that ""the buffer is big enough""
 You don't yet use sqlite3_bind_zeroblob.  Do you mean to?

This would allow skipping MemoryStream::GetData() which is one huge allocation and memory movement?

Why is the blob handle interface ""not really"" the incremental write we need?

Are there other opportunities for performance improvementh you have seen but not yet implemented in this PR?
 Approved, let’s move
 https://github.com/audacity/audacity/pull/2087#discussion_r745510411

But we can know the blob size before we write it?

We still capture data in chunks and move it into the blob, but we could eliminate the intermediate move into one big contiguous array.  Correct?  That would be a win.

You were saying we might eliminate more moves if we could resize the blob as we write it?  Yeah, no luck there, no additional win. >But we can know the blob size before we write it?
>We still capture data in chunks and move it into the blob

That is what I plan to do in  a next PRComment typos",Comment typos,"A first attempt to improve the loading times for large projects. This improves both performance and memory usage by around 2x.

46 Mb binary produces 75 Mb XML stream, which requires around 90 Mb of RAM and 5 seconds to load. Previously, RAM overhead was ~380 Mb, the loading time was 11 seconds.

The peak memory usage is now 221 Mb down from ~580. Audacity uses 134 Mb right after the project is loaded.

XML processing is now responsible for 78% of that time:
![image](https://user-images.githubusercontent.com/2660628/140185772-9c602b1d-06b1-4505-a9ea-b2d6132c5f47.png)

Half of the time is spent in ""StartElement""
![image](https://user-images.githubusercontent.com/2660628/140185552-51210bb3-7254-4345-8d55-affd453c162b.png)

26% of the time is spent on constructing wxString objects.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","its not it's I wonder if there would be less waste of operating system pages if you reduced this constant by 2 * sizeof(void*) ?  That is, sufficient space for the overhead of a std::list node in the probable implementation.  I'm guessing the operating system is instead allocating a few big pages only to use 16 bytes for the end of the chunk.
 As you now know, <charconv> is incomplete for macOS and not even known in the Linux build.  Sorry, you must find an alternative to to_chars.
 Look below to the FT_Push and FT_Pop cases.  I think there is an opportunity to use move assignment or swaps for a bit more performance, instead of copying of mIds. Yeah, makes total sense, thank you!  I'm painfully aware of it now. This is really sad that a very simple part of C++17 is not implemented fully in 2021 Actually it should be more than two pointers, for operator new overhead.  Just how much would of course vary with platform and debug configuration.
 Maybe subtract a little more for operator new overhead.  Make a guess what that is.
 Large I saw no measurable difference here, to be honest. If CRT decides that it will allocate page size aligned amount of memory - we will have an overhead of 4K (less than 1% percent overhead in this case) and will be likely able to reuse it. If CRT fallbacks to some `mmap` kind of API - there is no overhead that we can control here. Controlling the overhead from std::allocator is more feasible, but I'm not sure if we really need such control. (And the simplest way is to simply use a handwritten allocator)

Anyway, the current bottleneck is very far away from this place both for serialization and deserialization. A better fix would be to perform incremental IO directly from the database, but SQLite3 interface doesn't really have an incremental write API. We can avoid memory ""linearization"" though because `sqlite3_bind_zeroblob` is a very fast API (not actually committing any pages, rather just setting a propper header) Shrug.  Whatever easy little help we can get.  Yes, measure first.

 FT_Push and FT_Pop never happen, in fact!
 Sign
 Sign I think this isn’t used >Why is the blob handle interface ""not really"" the incremental write we need?

SQLite needs to know the blob size in the advance, so there is no way to stream the data into the blob as you can into the file, for example. However, it is possible to reuse the ""iterators"" interface and drop the GetData call. I've just copied the ""Writer"" interface, but I agree that this can be dropped."
2035,2021-10-27T18:58:58Z,2021-10-27T20:12:37Z,crsib,0,0,2,32,2,0,0,[],,0,1096962.0,0,0,0,0,89733123.505945,,0,2,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2023,2021-10-26T14:55:34Z,2021-10-26T15:36:31Z,crsib,1,1,1,19,2,2,1,[],65506.0,0,1197948.0,0,0,0,0,89733141.845653,,0,1,0,False,['DavidBailes'],@crsib Thanks for the prompt fix.,,"Resolves: #2019 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Just use the function name without the lambda
"
1976,2021-10-20T08:48:19Z,2021-10-20T12:25:38Z,crsib,0,0,1,6,1,1,1,[],,0,1738316.0,0,0,0,0,89733210.081432,,0,1,1,False,[],,,"There are still edge cases left while editing the clip name. The fix for them will be complex and is out of scope for the release branch hotfix

Resolves: #1962 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2070,2021-11-01T23:06:58Z,2021-11-08T10:04:32Z,l-tms,1,5,1,249,1,2,1,[],557857.0,0,572128.0,0,0,0,0,89811079.762056,,0,1,0,False,['crsib'],Thank you a lot!,,"Remove calls to deprecated CoreAudio API

Resolves: audacity/audacity#1462

I changed all the deprecated CoreAudio API calls to use the current active ones.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Gosh I love Apple documentation :-)

https://developer.apple.com/documentation/coreaudio/1494464-anonymous/kaudioobjectpropertyscopeplaythrough?language=objc

This is actually an excellent question of which scopes to use here. Have you found a way to check this under the debugger? I checked in the debugger the output for all new calls I introduced, comparing them to the old call version, but for this I never managed to get back anything useful. 

Even with the old version I got back `OSStatus 2003332927 kAudioHardwareUnknownPropertyError` every time, with both the MacBook builtin and external soundcard I have at home, so I assumed I was just missing hardware that would support this.

I used `ScopeOutput` in the end as the original code was also using that (`IS_OUTPUT`) Yeah, Passthrough is not documented well at all I think that we need to use PlayThrough scope

Some other guys do at least xD

https://github.com/itsthejb/HotPants/blob/master/CoreAudio/HAL/HPBase/HP_Device.cpp fair enough, I updated this line to use `kAudioDevicePropertyScopePlayThrough` :)"
2063,2021-11-01T11:24:59Z,2021-11-01T20:23:46Z,crsib,0,1,1,18,1,1,1,[],,0,598309.0,0,0,0,0,89827018.128362,,0,1,0,False,[],,,"Resolves: #2061 


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The condition for comparing clip boundaries used earlier can be found here: https://github.com/audacity/audacity/commit/69681f84d5f2943e6a5c1361bb3f0a10dcf2de24
but I do not see much difference, since the original condition has already changed"
2002,2021-10-22T12:57:15Z,2021-10-25T09:18:02Z,Paul-Licameli,0,3,12,377,15,1,1,[],,0,1394708.0,0,0,0,0,89889084.178668,,0,12,0,False,[],"We should do something about `PlayMode::loopingPlay` in the future, as the name no longer reflects the meaning. Given limited timeframe, I will approve the PR anyway","We should do something about `PlayMode::loopingPlay` in the future, as the name no longer reflects the meaning. Given limited timeframe, I will approve the PR anyway","Resolves: #1984
Resolves: #1994
Resolves: #1995
Resolves: #2003

Behavior of playback when looping is not enabled should be as before.  Play from left edge of the selection, either to right edge (if that is different) or to the end of the tracks, and once only.

Also change reactions of play in progress to changes of the loop region or state of the loop button.  When button is up, play as non-looped.  When it is down, jump only leftward to the start of the loop, and only when playback reaches the right edge.  So if playback is right of the loop, it also continues to the end and stops.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This makes much more sense! Why not reverse the condition here? Or even assign `kicked` to `data.mT0 < data.mT1` Or, I saw next commit, ignore it please"
2077,2021-11-03T09:07:47Z,2021-11-03T20:32:44Z,crsib,0,0,1,16,2,1,1,[],,0,41101.0,0,0,0,0,90219659.878204,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1942,2021-10-15T20:28:06Z,2021-11-02T11:42:53Z,trebmuh,0,0,2,6,1,1,1,[],,0,1595009.0,0,0,0,0,90266533.373966,,0,2,0,False,[],,,"Fixes #1929
",
2074,2021-11-02T14:51:38Z,2021-11-02T19:36:28Z,crsib,2,0,1,4,1,1,1,[],12617.0,0,17092.0,0,0,0,0,90309439.221031,,1,1,0,False,['Paul-Licameli'],"See this commit?  I neglected this class!  You complete my work.  4a56af43aa4833ba6f6ee96911797170cebf3dd6
 And a link for your convenience to discussion of that other bug, which I have all forgotton by now.
https://bugzilla.audacityteam.org/show_bug.cgi?id=2442
",,"C++ standard actually requires an exception to be copyable.  http://eel.is/c++draft/except.throw#5

However, it only affects MSVC implementation of the exceptions, so it was unnoticed for quite some time

This PR is only a partial fix for the symptoms of #2072 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2065,2021-11-01T20:26:14Z,2021-11-02T09:13:16Z,crsib,0,0,1,201,6,1,1,[],,0,46024.0,0,0,0,0,90346831.851271,,1,1,0,False,[],"Great improvement overall, though MemoryStream might seem to be a very generic title for solving quite a specific issue, isn't it? I'd suggest moving it under the ProjectSerializer scope.","Great improvement overall, though MemoryStream might seem to be a very generic title for solving quite a specific issue, isn't it? I'd suggest moving it under the ProjectSerializer scope.","Originally, wxMemoryBuffer was used while generating binary XML data. wxMemoryBuffer grows only by 1Kb, which results in extremely low performance of project serialization (few seconds on Ryzen 5800x for a 100Mb XML file).

This commit introduces a MemoryStream class tuned for high performance and low memory fragmentation.

This issue is related to #2051 but is definitely not enough to fix it.

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1983,2021-10-20T14:19:50Z,2021-11-01T13:02:58Z,LWinterberg,0,0,1,290,7,1,1,[],,1,1036751.0,0,0,0,0,90414889.432933,,0,1,1,False,[],,,"Resolves: one task of #1695 

The qa/ folder has essentially been untouched since 2010, and is half-empty. We'll make new instructions in the future. 

(I suppose it can stay as-is in 3.1 though; no need to rush this)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2046,2021-10-29T12:11:38Z,2021-10-29T14:48:19Z,crsib,0,0,1,4,1,1,1,[],,0,9404.0,0,0,0,0,90672329.116774,,0,1,0,False,[],,,"Resolves: #2045 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1972,2021-10-19T14:49:54Z,2021-10-28T19:00:56Z,Joseph2001-braganza,0,0,1,2,1,1,1,[],,0,792662.0,0,0,0,0,90743575.822451,,0,1,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2039,2021-10-28T07:44:49Z,2021-10-28T09:14:30Z,Paul-Licameli,0,0,1,11,3,1,1,[],,0,37256.0,0,0,0,0,90746887.381879,,1,1,0,False,[],,,"Resolves: #2036

Fix drawing of envelope points correctly for trimming or time shifting or both

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2044,2021-10-28T15:01:34Z,2021-10-28T15:04:17Z,crsib,0,0,89,29940,88,0,0,[],,0,9310.0,0,0,0,0,90748628.818004,,0,89,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2033,2021-10-27T15:21:52Z,2021-10-27T15:27:13Z,Paul-Licameli,0,0,1,2,1,1,1,[],,0,1045.0,0,0,0,0,90842076.713323,,1,1,0,False,[],,,"Resolves: Smart clip can draw envelope points out of bounds

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2030,2021-10-27T12:37:31Z,2021-10-27T12:55:09Z,LWinterberg,0,0,1,2,1,1,1,[],,0,1064.0,0,0,0,0,90851919.352817,,0,1,0,False,[],,,"Resolves: #2029

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2027,2021-10-27T10:07:28Z,2021-10-27T11:25:49Z,vsverchinsky,0,0,1,2,1,1,1,[],,0,8417.0,0,0,0,0,90853569.734346,,0,1,0,False,[],,,"Resolves: #2022

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2025,2021-10-26T16:14:11Z,2021-10-27T11:05:28Z,vsverchinsky,0,0,2,41,1,1,1,[],,0,72746.0,0,0,0,0,90853638.605201,,0,2,0,False,[],,,"Resolves: #2020

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2016,2021-10-25T23:13:22Z,2021-10-26T13:27:59Z,Paul-Licameli,1,0,5,4604,5,1,1,[],117.0,0,51281.0,0,0,0,0,90936353.246844,,0,5,0,False,['Paul-Licameli'],"@JamesCrook I have revised my previous pull request according you your suggestions.  Here is an example output file, the one for Classic theme.  If you build and run it, you will get one Colors.txt for each theme.

[Colors.txt](https://github.com/audacity/audacity/files/7413994/Colors.txt)


LGTM",LGTM,"Resolves: Saving and reloading theme as separate files should include colors too

Saving a theme as files includes the colors too, in a .txt file, with name and #rrggbb; for each color.  Re-loading themes from files then reinterprets those.

Why do this?  So that (soon to come) the generated .h files for the theme can be completely rebuilt from a set of .png files for the images and also one .txt file (per theme) for all the colors.  Non-programmers may easily check-in the several files files and the build system will do the rest.  The set of .png and .txt files in the source tree will contain complete information about the theme.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2013,2021-10-25T11:54:21Z,2021-10-25T14:39:39Z,vsverchinsky,0,0,1,4,1,1,1,[],,0,18649.0,0,0,0,0,91009726.622182,,1,1,0,False,[],,,"Resolves: #1990

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2014,2021-10-25T14:02:03Z,2021-10-25T15:16:48Z,vsverchinsky,0,0,1,16,1,1,1,[],,0,10973.0,0,0,0,0,91009741.559025,,0,1,0,False,[],Some self-clarification. This change limits the endTime only to the list of tracks that are actually suitable for the recording. ,Some self-clarification. This change limits the endTime only to the list of tracks that are actually suitable for the recording. ,"Resolves: #1969

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2012,2021-10-25T11:37:44Z,2021-10-25T15:01:19Z,vsverchinsky,0,0,2,371,2,1,1,[],,0,12301.0,0,0,0,0,91017073.37336,,1,2,0,False,[],,,"Resolves: #1979 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2015,2021-10-25T14:32:59Z,2021-10-25T14:46:59Z,crsib,0,0,1,21,3,1,1,[],,0,845.0,0,0,0,0,91018014.561858,,1,1,0,False,[],,,"This change is required to maintain consistency between default and cleared play regions

Resolves: #2011 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2009,2021-10-25T09:31:38Z,2021-10-25T09:32:47Z,crsib,0,0,1,2,1,1,1,[],,0,71.0,0,0,0,0,91036870.471302,,0,1,0,False,[],,,"This reverts commit cbb9a34b25fdd3768a6337904d132526bdffd4de.

Enabling a dark theme leads to serious visual problems on macOS 10.14 and 10.15 when rendering is performed outside the paint event. There is no quick fix available, so for this release, we will stick to the old behavior. 

Resolves: #1968

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
2001,2021-10-22T12:01:21Z,2021-10-22T12:35:51Z,Paul-Licameli,0,0,1,6,1,2,1,[],,0,4858.0,0,0,0,0,91282301.306096,,0,1,0,False,[],LGTM,LGTM,"... Though this isn't the only consequence of unwary use of ThemePrefs.  It is
only the more obvious one.

Actually, the bitmaps made by OverlayImage in ImageManipulation.cpp, which
combines a foreground and a background image, are opaque.  But the
transparencies in the given background image are blended with the theme's
clrMedium which is the background color of the toolbar.  This change makes
sure that the background image does not lose its transparencies when it is
recolored.

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1981,2021-10-20T12:46:06Z,2021-10-22T13:00:48Z,vsverchinsky,4,11,8,358,13,2,1,[],5950.0,0,173856.0,0,0,0,0,91283418.731763,,0,8,0,False,"['Paul-Licameli', 'vsverchinsky']","Please do an interactive rebase to permute ""Wave clip frame drawings adjustment"" and then ""Unified hit testing routines for Wave clips"" to the start.  Then every commit in the sequence will compile.
 Third commit ""WaveTrackAffordanceHandle refactoring"" should mention in commit comment that the click is now also conditional on visibility of details. The drawing of small clips could be improved.  Observe this screenshot.  A one second clip is shown at a magnification where ""clip details"" are still considered visible.  See the top:  the two quarter circles with 6 pixel radius intersect.

Perhaps you can make the radius the lesser of the constant and one-half the rectangle with.

<img width=""48"" alt=""Screen Shot 2021-10-21 at 9 04 03 PM"" src=""https://user-images.githubusercontent.com/11670369/138377097-56865aad-f8e9-4092-9e50-9cfbe6dc8d85.png"">
 > The drawing of small clips could be improved. Observe this screenshot. A one second clip is shown at a magnification where ""clip details"" are still considered visible. See the top: the two quarter circles with 6 pixel radius intersect.
> 
> Perhaps you can make the radius the lesser of the constant and one-half the rectangle with.
> 
> <img alt=""Screen Shot 2021-10-21 at 9 04 03 PM"" width=""48"" src=""https://user-images.githubusercontent.com/11670369/138377097-56865aad-f8e9-4092-9e50-9cfbe6dc8d85.png"">

Great idea, thanks!Approved, but with a few questions and suggestions that you may act on before merging.
","Approved, but with a few questions and suggestions that you may act on before merging.
","Resolves: #1860 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I think you should pass false not true.  In case we ever do have non-uniform mapping of pixels to time, you want the correctly mapped endpoints, but then compute an average over the space between, ignoring the non-uniformity only in there. Return value has units of samples per pixel.  Clarify that with a comment It is the same as in the `ClipParameters` constructor. I will add more comments, but I believe that the units are seconds:
`[ pixels / ((pixels / samples) * (samples / seconds)) ] = [ pixels / (pixels / seconds) ] = [ seconds ]` The ""2"" in the numerator is samples, not unit-less.  Ok. Before, an adjustment was added to t1 only if not showing individual samples.  Now, there is always an adjustment.  Is that right?
 That should be `@file`

Another line with `@brief` to give brief description of the purpose of the file So, this new hit test means that when a clip is drawn as a thin line, it is possible to drag the clip with a click on it even below the drag bar area.  Was that the agreed design?
 ok > So, this new hit test means that when a clip is drawn as a thin line, it is possible to drag the clip with a click on it even below the drag bar area. Was that the agreed design?  Yes, I see it was implied in the video comments, but not explicitly written.


 Right, sorry, will fix that, thanks!"
1978,2021-10-20T11:25:25Z,2021-10-21T12:19:56Z,DavidBailes,2,0,1,29,1,1,1,[],29682.0,0,89671.0,0,0,0,0,91372445.479109,,1,1,0,False,"['vsverchinsky', 'Paul-Licameli']","@Paul-Licameli probably, we do want this fix in the current release branch too? > @Paul-Licameli probably, we do want this fix in the current release branch too?

It looks low risk to me, at a quick glance.  If you are convinced it is correct and does not conflict with other recent developments in LabelTrack, then please cherry-pick it into release too.",,"Resolves: https://github.com/audacity/audacity/issues/1710
Resolves: https://github.com/audacity/audacity/issues/1780

Problem: For label tracks Enter (hardcoded) for renaming the selected label, is the same shortcut used by default by the command for toggling the selectedness of the track.

Fix: Use the shortcut Ctrl+F2 for renaming the selected label.
WARNING: This has been implemented by hardcoding this shortcut, rather than providing a context sensitive command for renaming both clips and labels. This was done due to a shortage of time. This hardcoded shortcut should be removed after the release of 3.1.0

In changing the shortcut from Enter to Ctrl+F2, in LabelTrackView::DoCaptureKey(), in the line:
if (IsValidIndex(mTextEditIndex, project) || IsValidIndex(mNavigationIndex, project)) {

the case IsValidIndex(mNavigationIndex, project) was removed. This had been added in commit a0ad72d, presumably to capture the Enter key. This was an incorrect change and caused issue #1780:A label can be created by typing regardless of option setting.
So this commit also fixes that issue.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1992,2021-10-21T11:17:20Z,2021-10-21T11:52:07Z,Paul-Licameli,0,0,1,42,4,1,1,[],,0,2089.0,0,0,0,0,91374113.774164,,1,1,0,False,[],"While I understand this PR, I failed to get the initial idea behind `pStartTime` being a pointer.

For example, `AdornedRulerPanel::StartQPPlay` stores the address to a local object which scares me.","While I understand this PR, I failed to get the initial idea behind `pStartTime` being a pointer.

For example, `AdornedRulerPanel::StartQPPlay` stores the address to a local object which scares me.","... Do not play a short bit from time zero, do not briefly show play head there.

Use the start time option, which prepares all before the first
TrackBufferExchange call, and not the older ""seek"" mechanism.  That instead set
a variable and let the portAudio thread to react to it.  Possibly the thread
did not see the change in variable promptly enough, explaining the symptom.

Resolves: #1924

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1865,2021-10-08T11:01:23Z,2021-10-21T12:13:10Z,vsverchinsky,5,19,2,217,10,2,2,[],482449.0,0,1127519.0,6,0,0,0,91372840.844518,,0,2,0,False,"['Paul-Licameli', 'vsverchinsky']","Done reviewing Maybe the generality is okay for Ctrl+A and Ctrl+C which do not need to push new undo items.  But I have shown definite problems in case of paste.  Are there other problems to demonstrate with cut, too?  Maybe, I didn't experiment enough to decide that.
 Some experiments with Ctrl+X when text is selected in a label track box, will easily show that proper undo/redo handling was already an omission even in 3.0.3 and earlier.  Was paste already badly handled too?

 Actually, DoPasteText() used to handle the case of insertion of text at the edit cursor of a label, always correctly pushing the undo stack.  But this PR causes a definite regression of that behavior, preempting DoPasteText().
 > Actually, DoPasteText() used to handle the case of insertion of text at the edit cursor of a label, always correctly pushing the undo stack. But this PR causes a definite regression of that behavior, preempting DoPasteText().

Yet another thing I overlooked, but the fix seems to be quite simple: move project history modification code to `LabelTrackView::PasteText` and remove it from `OnPasteNewLabel`, `LabelTrackView::OnContextMenu` (though history item text will change) and `DoPasteText` becomes unneeded, so it can be removed. Also, I've noticed that there is some GTK-specific code that does not modify undo history as well
```
if (evt.MiddleDown()) {
         // Paste text, making a NEW label if none is selected.
         wxTheClipboard->UsePrimarySelection(true);
         view.PasteSelectedText(project, newSel.t0(), newSel.t1());
         wxTheClipboard->UsePrimarySelection(false);
      }
```
And it will be fixed too if the history modification code is moved to `LabelTrackView::PasteText`, also `LabelTrackView::CutSelectedText` may be fixed same way.

Do you think it would be better now to avoid changing existing code for labels, and add some workarounds to handle text shortcuts in Wave Track?Null pointer danger Approved by mistake.  I still want the null pointer danger fixed. Clarity about undo stack responsibilities  Clarification of other responsibilities:  panel refresh?   More bother about the odd case of right channel drag bars I still can't approve this.  Undo history handling can be wrong.

* New project; generate two clips of noise in it; Ctrl+B, with two different selections, to make two labels; View > History
* Copy some text in another program
* Double-click the track name; Ctrl+V; click other clip/track/label/application
Observe: the clip name makes an undo item, and you can undo and red just that change.  This is good.

But:  repeat the steps, pasting text into a label instead of a clip.

Observe that the behavior is not analogous.  The paste into the label can be lost if you undo.  Or, it can wrongly become part of some other undo item, for instance if you add another track with the context menu.  Undo then eliminates the track but also un-does the change of label.

The problem is that the logic we have added for loss of ""focus"" of the clip does not yet have analogues for labels.

Either we must add those analogues.  Or, rewrite this so that label editing works as before, not placed behind the new virtual function interface.  Handle only clip editing with new code in EditMenus; keep label editing as it was.  Unfortunate duplication, yes.

Or, abandon the issue as not deserving P1 status, and wait another release to address all of these focus problems more carefully.
 I approve with minor suggestions about comments.  I leave you to rebase and merge it.","Null pointer danger Approved by mistake.  I still want the null pointer danger fixed. Clarity about undo stack responsibilities  Clarification of other responsibilities:  panel refresh?   More bother about the odd case of right channel drag bars I still can't approve this.  Undo history handling can be wrong.

* New project; generate two clips of noise in it; Ctrl+B, with two different selections, to make two labels; View > History
* Copy some text in another program
* Double-click the track name; Ctrl+V; click other clip/track/label/application
Observe: the clip name makes an undo item, and you can undo and red just that change.  This is good.

But:  repeat the steps, pasting text into a label instead of a clip.

Observe that the behavior is not analogous.  The paste into the label can be lost if you undo.  Or, it can wrongly become part of some other undo item, for instance if you add another track with the context menu.  Undo then eliminates the track but also un-does the change of label.

The problem is that the logic we have added for loss of ""focus"" of the clip does not yet have analogues for labels.

Either we must add those analogues.  Or, rewrite this so that label editing works as before, not placed behind the new virtual function interface.  Handle only clip editing with new code in EditMenus; keep label editing as it was.  Unfortunate duplication, yes.

Or, abandon the issue as not deserving P1 status, and wait another release to address all of these focus problems more carefully.
 I approve with minor suggestions about comments.  I leave you to rebase and merge it.","Resolves: #1833

Also ""Select All"" command is available when label is edited

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Putting new early return logic here and in EditMenus means the association of CTRL+A, etc. with the actions is only default configuration and not hard coded.  That is good.

lit also means however that descriptions of what Select All, Cut, Copy and Paste menu commands do (and edit toolbar buttons, and macro commands) may need updating in the manual to explain the special cases of clip and label text editing.  @LWinterberg 

Inconsistently, deletion is done with hard coded, un-configurable keys that do not overload what menu commands do.  I do not suggest doing anything about that.  Just for now be aware.

Conversations with @DavidBailes lately make me want to redesign the system of keystroke assignment to be contextual so that different command handler functions could map to the same key in different focusing contexts.  Needs much thought and work. I would like to see a null pointer check before dereference even if there is enough redundant protection in the enabling condition for this command, preventing call of this function when there are no tracks. Whose responsibility is it to push or modify the undo state?  Caller or called?  It should be commented.

Was pushing of undo stack preserved in all the paths of EditMenus?  It is not obvious to me yet.
 Is the capacity to make a new label by pasting text lost or preserved elsewhere? Oh, I see Similar question about refresh of the TrackPanel. How cells and UIHandles generally work is that they are responsible for Undo operations but just return coded to direct the caller whether to refresh display.  Best that these new functions be consistent with that.

Maybe this contract isn’t clearly commented either for cells and handles, so you are welcome to improve comments in those abstract base classes too. I think a problem here is that only left channels or mono tracks are ever “focused” by TrackPanelAx but you may need to redirect to a right channel’s affordance area in unusual cases.

Please write some ugly little fix, but my sense technical debt around the problem of better representing a tree of focusables is growing still more.

Maybe TrackPanelNode (not cell) needs the notion of “focusable “ and your new virtual functions really need to be declared there.  Maybe TrackPanelAx needs to work in terms of those nodes, not the underlying tracks. Is this test here just so that Ctrl+whatever is dispatched to the command manager?   But that assumes the editing keys are not customized to other unusual keystrokes.  Maybe nobody does that.  Still not the happiest solution. I'd like to see `Focusable` or introduce the focus concept into some of the basic track panel classes, this solution is rather a bit more generalized version of how text edit shortcuts work in LabelTrackView. Another option here is to track only the current TextEditHelper It should be possible to assign Alt+whatever for these commands (checked that, though I moved this check to TextEditHelper instead)  But what about assignments of Shift+... ?
 Shift + ... during text typing is usually supposed to toggle to upper/lower case, isn't it? But Ctrl + Shift + ... should work too  Though, additionally, we can check that the second keyCode is a character  Please explain the reason for this changed line. Sorry, I overlooked this during rebase, thanks! You might call CaptureKey and eliminate duplication. Comments explaining that these do not always push the undo stack. Update this comment"
1993,2021-10-21T11:25:13Z,2021-10-21T11:47:02Z,Paul-Licameli,0,0,2,10,1,1,1,[],,0,1312.0,0,0,0,0,91374418.43664,,1,2,0,False,[],,,"Resolves: #1971 

Make correct hot zones for drags in the timeline when looping is disabled.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1985,2021-10-20T18:17:32Z,2021-10-20T20:58:07Z,vsverchinsky,0,0,1,104,2,1,1,[],,0,60113.0,0,0,0,0,91377279.762049,,0,1,0,False,[],I understand now what caused the bug,I understand now what caused the bug,"Resolves: #1931

Same fix is applied to both clip names and labels

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1965,2021-10-19T11:26:29Z,2021-10-19T12:55:51Z,Paul-Licameli,5,0,1,6,2,1,1,[],716.0,0,167120.0,0,0,0,0,91381335.866811,,0,1,0,False,"['crsib', 'SteveDaulton', 'Paul-Licameli']","I can confirm that #1925 is related to this issue too. It is even easier to reproduce on Jack However, it happens without looping as well. Looking into the fix makes me not so sure, that this will help. We need to wait for the AppImage to be built first, as the bug is much easier to catch in Release build > However, it happens without looping as well. Looking into the fix makes me not so sure, that this will help. We need to wait for the AppImage to be built first, as the bug is much easier to catch in Release build

If the call stack doesn't involve the soxr library, it's something else
 _soxr_deinterleave_f is on top, for Windows as well

Anyway, I can confirm that issue with Jack is fixed as well Works for me with 3.1.0-alpha-20211019.
That is, it doesn't crash.
(There is still a glitch at the start of playback, but that's a different issue)",,"Resolves: #1822

... A recurrence of bugs 1887 and 2025.  These worked around a bug in the soxr
library.  Recent rearrangements of playback engine sometimes failed to do the
workaround.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1980,2021-10-20T12:06:22Z,2021-10-20T12:06:55Z,LWinterberg,0,0,1,38,1,0,0,[],,0,41.0,0,0,0,0,91459622.42631,,0,1,0,False,[],,,,
1967,2021-10-19T11:32:36Z,2021-10-19T14:31:00Z,Paul-Licameli,0,0,1,24,1,1,1,[],,0,10710.0,0,0,0,0,91537380.81951,,1,1,0,False,[],,,"Resolves: #1961 

Moving the whole play region should never change its length when it snaps either end

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1916,2021-10-13T12:29:49Z,2021-10-19T18:37:12Z,gera-gas,4,4,2,66,1,2,1,[],15525.0,0,540444.0,0,0,0,0,91522613.962776,,2,2,0,False,"['gera-gas', 'SteveDaulton', 'Paul-Licameli']","Thanks for looking at this @gera-gas. Unfortunately this does not  fix the problem for me (tested on Xubuntu 20.04). In fact, it prevents Audacity from importing from any LOF file, even those that contain lower ASCII characters only.
The problem here is that `if (buf[i] < 32 && buf[i] != 10 && buf[i] != 13)` may fail with UTF8. Maybe you need this to guess the encoding:  https://docs.wxwidgets.org/3.0/classwx_u_string.html#aaafd445672adc0e5d9c3f46db06dc9b0
 > Maybe you need this to guess the encoding:

Or maybe there's no need to check, other than ensuring that it isn't a huge file. wxTextFile seems to be pretty robust wrt opening files that don't contain text. If the file isn't readable as text, the import will fail, so we just need to tell the user that it failed.

It's unfortunate that LOF files were not defined to have a standard header of some sort so that we could easily recognize them. Something to keep in mind  if the LOF format is ever extended. As it is, about the only thing that  we know a LOF file *must* have is at least one occurrence of the word ""file"" as the first non-whitespace word on a line. @SteveDaulton I add new checking control and test it on ASCII, UTF-8 (with and without BOM) and UTF-16 (with and without BOM) file formats too, on my PC all work fine.I make a few suggestions for improvement, but it looks correct enough.
","I make a few suggestions for improvement, but it looks correct enough.
","Resolves: #1739 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If your goal was to fix an issue with signed char - this change definitely won't help you. Simply using `unsigned char` would do a better job here. 

If you assume that file is always encoded in something like UTF-16 - this won't work either. The problem with `wchar_t` - it is not portable, the size is different across platforms. Define ""file"" as a constant to avoid repetition of this string literal in two places in the file.
 sizeof(' ') is 1 because sizeof(char) is 1 by definition.  This looks a little strange.
 You might use std::search and avoid constructing a temporary std::string
"
1948,2021-10-16T09:24:14Z,2021-10-19T12:52:05Z,Gootector,0,0,1,2465,1,0,0,[],,0,271671.0,0,0,0,0,91543322.285175,,0,1,0,False,[],,,"Update Polish from Transifex for 3.1.0

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1941,2021-10-15T16:46:58Z,2021-10-19T10:24:48Z,crsib,0,0,2,14,3,1,1,[],,0,322677.0,0,0,0,0,91552153.879408,,0,2,0,False,[],,,"Resolves: #1917 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1938,2021-10-15T14:38:57Z,2021-10-19T09:03:20Z,vsverchinsky,2,9,3,269,8,2,2,[],7386.0,0,325776.0,4,0,0,0,91556736.359793,,0,3,0,False,['Paul-Licameli'],"My review is complete.  I don’t approve yet.  I’m not sure how I tell GitHub to retract my mistaken approval. I approve, understanding that another issue will be opened for the problem of the tab key cycle for the right channel in case clips do not align.Build fix for Linux needed I’m not done.. Try again with dynamic_cast Clarify interpretation of the issue as consistent with this fix, or else change the fix.","Build fix for Linux needed I’m not done.. Try again with dynamic_cast Clarify interpretation of the issue as consistent with this fix, or else change the fix.","Resolves: #1884 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Linux Build is failing.  Maybe because of case sensitivity I should have done this myself earlier!  But to improve it, you should dynamic_cast for WaveTrack view, not just compare to this, in case one WaveTrackView delegates to another. See other examples of delegation in the file. Use ‘@file’ and ‘@brief’ in the comment for Doxygen Use ‘@file’ and ‘@brief’ in the comment for Doxygen Right, thanks! I guess it wasn't the case before  That’s not what I meant.  Remove == this, bind the dynamic_cast to a pointer, use that pointer if not null.
 Here is a major point — @Penikov take note.

I think from reading this (haven’t tried yet to execute it) that it fixes the issue title, narrowly interpreted.  Tab can take you away from a right channel clip.

But then you end up in a tab key cycle through the left channel’s clips only, correct?

But maybe the intention or expectation is that a right channel can have its own separate tab key cycle in the unusual case of unaligned clips.

To realize that expectation, this switch would not be outside of the loop over channels and would not operate always on the leader channel.
 >But then you end up in a tab key cycle through the left channel’s clips only, correct?

Correct and I agree that it would be expected to loop over the same channel, but I think right now there is no way to indicate to which channel the current selection belongs to."
1950,2021-10-16T18:52:26Z,2021-10-19T02:09:55Z,Paul-Licameli,0,5,9,552,8,3,2,[],,0,199051.0,0,0,0,0,91581852.433217,,0,9,0,False,[],,,"Resolves: #1260
Resolves: #1706
Resolves: #1707

This completes the user interface for playback looping with three click-and-drag actions in the timeline:
* Dragging a completely new play region (arrow cursor)
* Resizing an existing region (east-west arrows)
* Moving an existing region (hand)

Please observe also:
* The context menu item, to make selection follow play region drags, works
* Yellow snap guidelines at edges of labels or clips, and of the selection when it isn't following the play region
* Escape key aborts all drags
* Left click without drag still starts playback

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This method is private, so I agree that the check can be omitted here Is it unneeded anymore? Seems like unused This becomes an array member, and initialized in-line in the clas now.
 what check do you mean?
"
1958,2021-10-18T11:22:26Z,2021-10-18T13:31:00Z,crsib,0,0,1,9,1,1,1,[],,0,7717.0,0,0,0,0,91627387.76051,,1,1,1,False,[],,,"Also, real link to the video is now added

Resolves: #1946

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [ ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1940,2021-10-15T14:56:09Z,2021-10-18T13:30:36Z,crsib,0,5,1,294,9,2,1,['P1'],,0,254071.0,1,0,0,0,91627411.616035,,1,1,1,False,[],This could be achieved with fewer moving parts.,This could be achieved with fewer moving parts.,"This commit introduces a new mechanism to allow projects components to specify the Audacity version they require to be loaded. 

It is possible to set the version based on the features that are currently in use. 

Smart Clips use this new approach to require at least Audacity 3.1 if there are trimmed clips in the project.

Resolves: #1903

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","It is good that you use a registry to keep things decoupled.  But This abstract class adds too many other complications.

Suppose instead you had a global registry of functions taking AudacityProject& as argument and returning a minimum version.  You can write a function that iterates the WaveTracks and their clips and uses only the public interfaces of WaveTrack and WaveClip.  Then you won’t need the changes in WaveTrack or WaveTrackFactory, or need to maintain the per-project list of weak pointers.

So, please simplify and ask again for a review. Guarding the list with a mutex seems like excessive caution.  In many other examples of registries, I anticipate single threaded usage at static initialization time only and don’t bother Know this:  AllClipsIterator in WaveTrack visits some other clip objects in the track, for “cut lines,” which are not in this iteration!

However, this test is still complete enough because those other clips never have trimming.  @vsverchinsky can confirm that. Yep, cutlines are not supposed to have hidden parts Eliminating a replicated string literal with a named constant might be nice.
"
1898,2021-10-12T13:38:24Z,2021-10-14T13:58:46Z,Paul-Licameli,27,1,1,143,2,1,1,[],674.0,0,517228.0,0,0,0,0,91628119.817446,,0,1,0,False,"['Tantacrul', 'Paul-Licameli', 'SteveDaulton', 'crsib', 'DavidBailes']","Thanks for this, but it only partially resolves https://github.com/audacity/audacity/issues/1710. As stated in the steps to reproduce, the problem occurs in label tracks as well as audio tracks. > Thanks for this, but it only partially resolves #1710. As stated in the steps to reproduce, the problem occurs in label tracks as well as audio tracks.

Perhaps a separate issue number for that case, then.

I offered Esc to un-""focus"" a label so that Return has its usual meaning, and I still like this idea myself but it needs elaboration.

I think shortcut keys SHOULD be overloadable with different meanings when the program is in different states.  It's not a bad principle.  After all -- whenever you open a drop-down or pop-up menu, you are in a temporary state where keystrokes do different things (they invoke accelerators of menu items).

I have said and will say again that I think that what we need (what will take more development than a bug fix) is an improved system of hierarchical foci and context sensitive assignment of shortcuts to actions:

* Develop a proper notion of nested foci (Track panel, track, clip or label)
* Have easy keystroke navigation among them,  not just tabbing among peers but up- and down-hierarchy. (like what I can do with VoiceOver on Mac, but built-in to Audacity even without screen readers)
* Let Return and other keys ""scope"" differently depending on what is focused.
* Advantage is not running out of scarce keystrokes as more functionality is added, or having to use very un-mnemonic ones or modifier key chords, just to avoid conflicts in a single flat scope.

Your opinions of that?
 I believe that label tracks behavior is present in 3.0 as well. I don't think we have the capacity or time to change this behavior for 3.1. > I believe that label tracks behavior is present in 3.0 as well. I don't think we have the capacity or time to change this behavior for 3.1.

It's different.

In 3.0, tabbing to a label also put a text insertion cursor in the box.  Hitting Return exits text editing.  Repeated Return then toggles selection of the label track on and off.  Tab key brings back an insertion cursor.  @DavidBailes didn't strongly object, that I know of.

In 3.1, we have, sort of, another level of focus -- one for the label as a whole (the horizontal bar brightens), another for the label box.

In 3.1, tabbing cycles among labels but does not put an insertion cursor in them.  Another Return keystroke does that instead.  Repeated Return shows and hides this cursor.

I offered Esc as escape from this.  The horizontal bar becomes dark as a visual clue, if you can see visual clues.  Then Return changes track selection.

David isn't satisfied with this.  But, I want to resist the appropriation of yet more un-mnemonic keystrokes.  (I didn't really like Ctrl+F2 either -- I think there should just be a contextually different F2 action.)

So instead, we could make Return key with edit cursor visible exit label editing AND exit label ""focus"".

So if you tab to a label, you would Return three times instead of two, to change track selection state.

One more keystroke, but no new key is assigned anything.

Good enough?

 > So instead, we could make Return key with edit cursor visible exit label editing AND exit label ""focus"".
> 
> So if you tab to a label, you would Return three times instead of two, to change track selection state.
> 
> One more keystroke, but no new key is assigned anything.
> 
> Good enough?

I think that sounds confusing.
Taking a step back, the original design spec had the same shortcut, Enter, for renaming clips and labels.
This commit changes the default keystroke for renaming clips to Ctrl + F2.
Assuming that the designers still want the same keystroke, then why keep using Enter for renaming labels?
If there is a shortage of time, since there are no existing commands with the default shortcut Ctrl + F2, then in the case of labels hardcoding it wouldn't be the end of the world (though doing it properly would be better!). > I have said and will say again that I think that what we need (what will take more development than a bug fix) is an improved system of hierarchical foci and context sensitive assignment of shortcuts to actions:
> 
> * Develop a proper notion of nested foci (Track panel, track, clip or label)
> * Have easy keystroke navigation among them,  not just tabbing among peers but up- and down-hierarchy. (like what I can do with VoiceOver on Mac, but built-in to Audacity even without screen readers)
> * Let Return and other keys ""scope"" differently depending on what is focused.
> * Advantage is not running out of scarce keystrokes as more functionality is added, or having to use very un-mnemonic ones or modifier key chords, just to avoid conflicts in a single flat scope.
> 
> Your opinions of that?

I think you mentioned somewhere else that you were going to create an issue/discussion for this. I think that would be a better way of getting feedback, rather than on this pull request. ****

> > So instead, we could make Return key with edit cursor visible exit label editing AND exit label ""focus"".
> > So if you tab to a label, you would Return three times instead of two, to change track selection state.
> > One more keystroke, but no new key is assigned anything.
> > Good enough?
> 
> I think that sounds confusing.

I pushed another commit.  Try it.

> Taking a step back, the original design spec had the same shortcut, Enter, for renaming clips and labels. This commit changes the default keystroke for renaming clips to Ctrl + F2.

There was mention of that keystroke elsewhere and some unwritten agreement with @Tantacrul that we can compromise with a new keystroke.

> Assuming that the designers still want the same keystroke, then why keep using Enter for renaming labels? If there is a shortage of time, since there are no existing commands with the default shortcut Ctrl + F2, then in the case of labels hardcoding it wouldn't be the end of the world (though doing it properly would be better!).

I do not understand what you mean by ""properly.""

My notion of ""properly"" (but not easily) is outlined in my previous comment.

I want a compromise that satisfies you and us in short time.
 @Tantacrul Could you please confirm whether or not you think the shortcuts for renaming a ""selected"" clip and a selected label should be the same?  > @Tantacrul Could you please confirm whether or not you think the shortcuts for renaming a ""selected"" clip and a selected label should be the same?

If they were the same, then when clips have a selected attribute, it will be possible for both clips and labels to be selected at the same time. In that case when if a user pressed the rename shortcut, which type of items are renamed could be determined using the context of the type of track being the focus, ie audio or label. > I pushed another commit. Try it.

I tried the commit and still think it's confusing.
1. I still think that it's not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected.
2. A keyboard user can quite easily not know that a label is selected - either because it is off screen, or the user is using a screen reader.
3. In your commit, when a user pressed Enter to finish an edit of a label, this now deselects the label. I don't think a user would expect that.

> I want a compromise that satisfies you and us in short time.

I think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels. (And as I've said, if they do, I'm happy for Ctrl+F2 to be hardcoded for labels as a temporary measure if time is short).

 > @Tantacrul Could you please confirm whether or not you think the shortcuts for renaming a ""selected"" clip and a selected label should be the same?

I think that would make sense and reduce cognitive load, yes. Ctrl + F2 sounds reasonable to me Actually there is a problem:  We can only associate one command name with the keystroke.  What should this shared clip/label renaming thing be called?  ""Rename..."" is too general, ""Rename Clip..."" too specific, ""Rename Clip or Label..."" is ugly.  Maybe Alt+F2 for the label.

My opinion about the ideal longer term solution (needing much work) is that simply F2 can mean different things in different contexts, and the system of associating keystrokes with commands needs more elaboration to allow that overloading.

I still don't know if @DavidBailes agrees with that ideal.
 > > I pushed another commit. Try it.
> 
> I tried the commit and still think it's confusing.
> 
> 1. I still think that it's not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected.

Keystrokes might vary what they do according to the kind of focus.  Why not?

> 2. A keyboard user can quite easily not know that a label is selected - either because it is off screen, or the user is using a screen reader.

Then is the answer to be sure to announce every change of focus?  Letting each label be a focus, letting the label track be a higher order one.

> 3. In your commit, when a user pressed Enter to finish an edit of a label, this now deselects the label. I don't think a user would expect that.

Is this not just a return to the 3.0 and earlier behavior, which you did not object to?  Return key while edit cursor is visible returns focus to the track.

> 
> > I want a compromise that satisfies you and us in short time.
> 
> I think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels. (And as I've said, if they do, I'm happy for Ctrl+F2 to be hardcoded for labels as a temporary measure if time is short).

Actually I am bothered by some implications in the implementation.  If the customizable keystroke is the same, the function handling it must be the same under present limitations.  There must also be one name given to that command.

But labels and clips are very different things.  The need for a single handler function that must know about both — conflicts with other work I’m trying to do with modularization which aims to separate things like label track support in general from the program entirely as a drop in module.

I say again a better system with contextual overloading of keystrokes, so they map to handler functions, one-to-many is a thing to develop.  Please tell me, you agree or no.

 > Actually there is a problem: We can only associate one command name with the keystroke. What should this shared clip/label renaming thing be called? ""Rename..."" is too general, ""Rename Clip..."" too specific, ""Rename Clip or Label..."" is ugly. Maybe Alt+F2 for the label.
> 

I think there should be one command with the default shortcut Ctrl+F2. It's a context dependent command, and the user has only to remember one shortcut.
I don't see a problem with a command with the name ""Rename Clip or Label"", but maybe others could come up with a better suggestion for the name.

> My opinion about the ideal longer term solution (needing much work) is that simply F2 can mean different things in different contexts, and the system of associating keystrokes with commands needs more elaboration to allow that overloading.
> 
> I still don't know if @DavidBailes agrees with that ideal.

As I've said already, I think your ideas for a longer term solution would be better discussed in a separate issue/discussion.
What is being suggested here by me, and I think @Tantacrul , is a command which is context sensitive.

 > What is being suggested here by me, and I think @Tantacrul , is a command which is context sensitive.

Yes, that is what I was saying too. Unless there is a technical / time  objection that I haven't considered, of course. From a user perspective, I have no problem with context sensitive keyboard shortcuts, so long as there is also consistency.
For example, OK for one shortcut to be used to:

- Zoom in on timeline
- Zoom in on dB scale
- Zoom in on spectrogram
- Zoom in on Plot Spectrum scale
- ...

but not OK for one shortcut to

- Zoom in on timeline
- Open label for editing
- Toggle selection

Though, even with  consistency, context sensitivity could be confusing as users are often unaware of which element has focus, or even the concept of ""focus"". If something is not obvious to users, then that's a design problem.
Just my 2c ;-) > > > I pushed another commit. Try it.
> > 
> > 
> > I tried the commit and still think it's confusing.
> > 
> > 1. I still think that it's not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected.
> 
> Keystrokes might vary what they do according to the kind of focus. Why not?

Clearly, in general, the actions of keystrokes can vary depending on what object is the focus.
But here, the focus is the track. A label never is the focus, and I think that's appropriate.
Again if you want to continue discuss you idea of having a focus hierarchy within the track panel, please open an issue/discussion about it.

> 
> > 1. A keyboard user can quite easily not know that a label is selected - either because it is off screen, or the user is using a screen reader.
> 
> Then is the answer to be sure to announce every change of focus? Letting each label be a focus, letting the label track be a higher order one.
> 
As I've said above, I don't think a label should be the focus. And in this case it's a question of one (or more than one) being selected, not being the focus. The rename command should act on the selected items, not the focused item.

> > 1. In your commit, when a user pressed Enter to finish an edit of a label, this now deselects the label. I don't think a user would expect that.
> 
> Is this not just a return to the 3.0 and earlier behavior, which you did not object to? Return key while edit cursor is visible returns focus to the track.
> 

In 3.0 and earlier, using tab and shift+tab opened a custom text box for editing. This text box was not accessible for users of screen readers. In my guide to Audacity for screen readers, I've always advised users of screen readers to not use the tab and shift+tab keystrokes in a label track.

Now that in 3.1.0 tab and shift+tab just select a label, I was hoping that might make more functionality safely available to users of screen readers. In particular the work that you did so that a selected label could be moved on its own. However, for that to be the case, then this current issue of the use of Enter needs to be sorted out, and the bug with creating a label by typing: https://github.com/audacity/audacity/issues/1780 (I have a PR for this bug, but it was written assuming that the hardcoded Enter was going to be removed: https://github.com/audacity/audacity/pull/1881.)

> > > I want a compromise that satisfies you and us in short time.
> > 
> > 
> > I think we need to know whether the designers want the same command and default shortcut for renaming selected clips and labels. (And as I've said, if they do, I'm happy for Ctrl+F2 to be hardcoded for labels as a temporary measure if time is short).
> 
> Actually I am bothered by some implications in the implementation. If the customizable keystroke is the same, the function handling it must be the same under present limitations. There must also be one name given to that command.
> 
> But labels and clips are very different things. The need for a single handler function that must know about both — conflicts with other work I’m trying to do with modularization which aims to separate things like label track support in general from the program entirely as a drop in module.
> 

As far as I can see, the command could be implemented now, and that implementation can be changed in the future so that it fits in with whatever code restructuring that you're designing.
 
> I say again a better system with contextual overloading of keystrokes, so they map to handler functions, one-to-many is a thing to develop. Please tell me, you agree or no.

You are expecting me to say yes of no to a sentence which I don't fully understand.
Commands may be context sensitive, but I don't know what you mean by ""the contextual overloading of keystrokes"". It could mean many things!

 
> From a user perspective, I have no problem with context sensitive keyboard shortcuts, so long as there is also consistency. For example, OK for one shortcut to be used to:
> 
> * Zoom in on timeline
> * Zoom in on dB scale
> * Zoom in on spectrogram
> * Zoom in on Plot Spectrum scale
> * ...
> 
> but not OK for one shortcut to
> 
> * Zoom in on timeline
> * Open label for editing
> * Toggle selection
> 

This might define what's OK or not in a set of default bindings, but users should be free to customize bindings in lower levels of the focus tree as they choose.

For now, we have just one global mapping of keystrokes to commandIds (internal string identifiers) that are paired with functions that execute them.

I think we might want something like different mappings of keystrokes to commandIds, and from commandIds to actions, both mappings dependent on focus.  A mapping at a lower level of focus might inherit mappings from a higher level of focus and override mappings selectively.

For instance, define ""Ctrl+C"" -> ""Copy"" just once in a high level mapping.  But lower level mappings might reassociate ""Copy"" -> function differently and appropriately.  We won't need just one copy function that has to switch on the kind of focus and do unrelated things.

 > > > > I pushed another commit. Try it.
> > > 
> > > 
> > > I tried the commit and still think it's confusing.
> > > 
> > > 1. I still think that it's not at all intuitive that a keystroke that is used for changing the selectedness of a track may open a label name of editing if the label is selected.
> > 
> > 
> > Keystrokes might vary what they do according to the kind of focus. Why not?
> 
> Clearly, in general, the actions of keystrokes can vary depending on what object is the focus. But here, the focus is the track. A label never is the focus, and I think that's appropriate.

Strong disagreement.  The absence of, but need for, a proper notion of sub-track focus, for clip or for label, feels very obvious to me now. Consider also the new context menu items for clips, and some problems of that new design that Peter has pointed out.  A notion of ""the focused clip"" independent of what the time selection is, is needed.
 > This might define what's OK or not in a set of default bindings, but users should be free to customize bindings in lower levels of the focus tree as they choose.

Yes, of course I'm referring to default bindings.
Whether or not users are ""free to customize bindings in lower levels of the focus tree as they choose"" is a design option - I do not see that as a necessary requirement.
Don't  forget that it is only a small minority of users that customize their key bindings. With carefully selected key bindings there should be no need for the vast majority of users to customize them. > > This might define what's OK or not in a set of default bindings, but users should be free to customize bindings in lower levels of the focus tree as they choose.
> 
> Yes, of course I'm referring to default bindings. Whether or not users are ""free to customize bindings in lower levels of the focus tree as they choose"" is a design option - I do not see that as a necessary requirement. Don't forget that it is only a small minority of users that customize their key bindings. With carefully selected key bindings there should be no need for the vast majority of users to customize them.

True, but also:  having the mapping from keystrokes to dispatch functions, being not necessarily one-to-one as now but possibly one-to-many (based on focus context), will have advantages from my point of view.  Advantages for better compatibility with modularization efforts and other nicer structure.

Keeping things implemented in separate functions, but allowing overloading of keystrokes, would also let us re-use more mnemonic keystrokes for things, rather than all the disambiguating modifier key chords and other ugliness.

F2 is a recent example -- we want it to remain the key for Envelope tool, but if it's also a ""natural"" key for renaming (following some other application conventions), then really it would be nicest to use it for that too when a clip is focused.  Not Ctrl+F2.

 > 
> As I've said above, I don't think a label should be the focus. And in this case it's a question of one (or more than one) being selected, not being the focus. The rename command should act on the selected items, not the focused item.
> 

Again, I don't see why a label shoudn't be focus.  But ah, you mention selection, different from focus.

Review the abstract class wxAccessible.  See that what it's really for is defining and navigating a hierarchy of objects that are focusable or selectable.

Compare GetFocus() with GetSelections().  FOCUS is unique among sisters under a node, but SELECTION is allowed to be any subset of them.

Labels within a track can easily conform to this model:  why not?

I think Audacity needs to define its own abstract classes and implementations of them to represent a tree of navigable items, and map that onto wxAccessible.

I think TrackPanelAx needs reimplementation and generalization this way.

 > will have advantages from my point of view. Advantages for better compatibility with modularization efforts and other nicer structure.

Be careful to not conflate ""desirable for developers"" and ""desirable for users"". They are different (though not mutually exclusive) things, and the latter must take priority as users are the raison d'être for the app. > 
> In 3.0 and earlier, using tab and shift+tab opened a custom text box for editing. This text box was not accessible for users of screen readers. In my guide to Audacity for screen readers, I've always advised users of screen readers to not use the tab and shift+tab keystrokes in a label track.

Oh, that was my omission -- not observing behavior when you change the preference to open a dialog box.

> 
> > I say again a better system with contextual overloading of keystrokes, so they map to handler functions, one-to-many is a thing to develop. Please tell me, you agree or no.
> 
> You are expecting me to say yes of no to a sentence which I don't fully understand. Commands may be context sensitive, but I don't know what you mean by ""the contextual overloading of keystrokes"". It could mean many things!

All right, you agree about context sensitivity.

What I'm thinking would involve some further elaboration of the Keyboard preferences dialog so that there is not one but multple mappings of keys to commands, dependent on different kinds of context, and accessible to the user for customization.  As I mentioned recently in a replay to Steve, a mapping for a subsidiary focus context might inherit mappings from a parent ""scope"" by default but also give some special overrides.

Yes, I need to elaborate these ideas in writing in more detail when I have more freedom.
 Thanks for approval @vsverchinsky .  My decision about this:

I will merge the first commit only, not the change for LabelTrackView that @DavidBailes didn't like.

I will make a small change adding ellipsis to the new menu command item, because it may open a dialog.  ""Rename Clip...""

@LWinterberg note the new item under the Edit menu which must be in the manual.

This will resolve #1842 but still not resolve #1710 fully.

I will later make another PR to resolve #1710 well enough for 3.1.0.  I will use the hard-coded Ctrl+F2 which @DavidBailes said is good enough.  It's awful for the long term and not customizable, of course.  It will not add any new internationalized string to the menus.
 @Paul-Licameli 
> I will later make another PR to resolve #1710 well enough for 3.1.0. I will use the hard-coded Ctrl+F2 which @DavidBailes said is good enough. It's awful for the long term and not customizable, of course. It will not add any new internationalized string to the menus.

Given that the developers are short for time before 3.1.0, I've assumed that it would be helpful if I created a pull request for this:
https://github.com/audacity/audacity/pull/1957

 > @Paul-Licameli
> 
> > I will later make another PR to resolve #1710 well enough for 3.1.0. I will use the hard-coded Ctrl+F2 which @DavidBailes said is good enough. It's awful for the long term and not customizable, of course. It will not add any new internationalized string to the menus.
> 
> Given that the developers are short for time before 3.1.0, I've assumed that it would be helpful if I created a pull request for this: #1957

Thank you
",,"... This inserts a menu item under Edit.

Also share code with the clip context menu

Resolves: #1842 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Probably, the only option right now"
1947,2021-10-16T08:52:27Z,2021-10-18T09:35:29Z,DavidBailes,0,0,1,2,1,1,1,[],,0,175383.0,0,0,0,0,91641522.899745,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/1934

Using the keyboard to rename a clip in an audio track, regardless of which clip is selected, the same clip in the audio track is always renamed.

Fix:
In WaveTrackAffordanceControls::StartEditNameOfMatchingClip(), the call to StartEditClipName() edits the name of mFocusClip, so set the value of mFocusClip, not mEditedClip.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1807,2021-10-03T19:55:50Z,2021-10-17T21:35:30Z,Paul-Licameli,2,3,6,529,10,2,1,[],333661.0,0,1215583.0,0,0,0,0,91684720.936327,,0,6,0,False,['Paul-Licameli'],"Thank you.  You didn’t find anything in these code transformations that are incorrect for the purpose.

I do think that doing all themes in one go will save some tedium and silly mistakes (such as I have made) in the present procedure for image updates.

These are steps toward a complete automation of the generation of the theme sourcery, as a build step, which will use image files checked into the source code tree as dependencies.  lib-theme would be used in a separate executable to be built and run during build of Audacity.  This should make the updating of images easier to do by other developers or non-developers even.

I don’t think successful Qt replatforming is as close as you might.  I expect a few releases of Audacity still based on wxWidgets, justifying this effort.
 As for the code churn.  A split of 3.1 release from master will happen soon.  I will wait until then to merge this into development only.I don't see much point to these changes - seems like effort expended for no gain.  No big harm in that, if you believe it's actually helping and you believe it is making the code easier for you to work with in future.

Commit comments are inadequate.  You've for example moved theming into a lib, and that should be mentioned in the commit comments.  Nor is the point of mpSet mentioned (a poorly chosen name for a resource pointer).  Moving auStaticText into its own file was worth doing.

This doesn't look like matters such as future support for SVG are being considered.  If you are reworking the theme code, I'd have expected some kind of linked document setting out the planned features.  Otherwise it's all high risk of code churn.

I still approve the change, as you see value in it and have done the work.","I don't see much point to these changes - seems like effort expended for no gain.  No big harm in that, if you believe it's actually helping and you believe it is making the code easier for you to work with in future.

Commit comments are inadequate.  You've for example moved theming into a lib, and that should be mentioned in the commit comments.  Nor is the point of mpSet mentioned (a poorly chosen name for a resource pointer).  Moving auStaticText into its own file was worth doing.

This doesn't look like matters such as future support for SVG are being considered.  If you are reworking the theme code, I'd have expected some kind of linked document setting out the planned features.  Otherwise it's all high risk of code churn.

I still approve the change, as you see value in it and have done the work.","Next stage in making the built-in theme editor more convenient:  now it loads and stores information for all theme at once, not only for the theme chosen in Interface preferences.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Planning to release with Theme Prefs enabled???? No! A rebase and force push and I didn’t omit that commit, but I’m not going to merge this anyway until after the release branch splits."
1900,2021-10-12T18:12:50Z,2021-10-17T16:07:10Z,Paul-Licameli,1,8,6,74,7,3,1,[],1203.0,0,424485.0,1,0,0,0,91704399.106507,,0,6,0,False,['Paul-Licameli'],"> Yes, this will help save people from updating using system theme, and not realising it.

Diving into the ImageManipulation stuff for the combination of fore and background images of the buttons was interesting at least, and I learned more about wxImage.
Yes, this will help save people from updating using system theme, and not realising it. I would really like to see `wxBusyCursor{}, theTheme.LoadPreferredTheme()` written differently. Or at least to have a comment about the lifetimes and why this code is needed at all.

This is not a matter of style, this is a matter of avoiding very hard to debug bugs in the future. Yes, this code is valid from a language perspective, but `,` has way too many pitfalls and nuances to be used in real code.

Using unnamed objects can be problematic as well.","Yes, this will help save people from updating using system theme, and not realising it. I would really like to see `wxBusyCursor{}, theTheme.LoadPreferredTheme()` written differently. Or at least to have a comment about the lifetimes and why this code is needed at all.

This is not a matter of style, this is a matter of avoiding very hard to debug bugs in the future. Yes, this code is valid from a language perspective, but `,` has way too many pitfalls and nuances to be used in real code.

Using unnamed objects can be problematic as well.","Resolves: blunder-proneness when I try to check in changes of images

Theme preferences (in special developer's builds of Audacity only) are needed to update the set of images, but made quiet
and confusing unintended changes to images that resulted in some wasted effort.  So instead now they give more warnings.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Is this preferred style nowadays?  (two items on same line with comma). I don't really like it as well, to be honest Preferred by whom?

It works and it's brief.  The lifetime of an unnamed temporary like the wxBusyCursor object extends to the end of the lifetime of the maximal enclosing expression, which is the whole comma expression.  Then it's destroyed and does its RAII cleanup.
 I avoid naming the thing but I might at least put parentheses around it all...
 This code is fine for the compiler, bad for the human to read. It requires much more c++ knowledge than such simple code really needs.

Again, I know you won't change it, but I saw a very hard-to-debug bug when the name was omitted in a similar way. It was a lock_guard there, so this case is not as bad. But the habit of writing the code that way can possibly result in much worse possible bugs later.

At least, this line needs a comment about the lifetime of the first object. I do not share your commaphobia.  I like eliminating fluff. A semicolon instead of a comma would make the anonymous object die too early.  Was that the error with the example of lock_guard?  But this isn’t that. I like the code to be verbose and readable at a glance. This particular code is not.

BTW this case needs a comment anyway, so there is no need to guess why such temporary object is needed in the first place"
1914,2021-10-13T12:02:01Z,2021-10-13T21:52:22Z,crsib,2,6,1,104,9,2,1,[],226194.0,0,290254.0,0,0,0,0,91774480.101065,,0,1,1,False,"['ohquait', 'LWinterberg']","can we become a working build with gtk3 -> wxGTK3.1-3.1.5 -> python-wxpython4-4.1.1 ?
i use the packages above with a stable audacity-2.4.2 ( 118 plugins/enabled ) but can not
building a clean and working since the 3.0.x? release of audacity....
if more info needed, i can post the contents of spec-files  @ohquait you may want to ask in the [forum](https://forum.audacityteam.org/viewforum.php?f=19) or the [dev discord](https://audacityteam.org/devserver) about this, instead of some random pull request that already is merged :) ",,"Currently, this is implemented for macOS users only.
Windows has not yet published the API, Linux requires GTK3 and we build against GTK2 currently.

Resolves: #1752

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Perhaps this function should return the previously installed function, by analogy with std::set_new_handler and others. Nothing funny happens at shutdown?  Dtor of static RegisteredTheme erases from the map, which destroys the copy in the map, which erases from the map again ...? I don't see much reason why, but I definitely see no reason why not, so I will do it. Will we ever use it? I really doubt Map stores a constant reference to the object, not the copy. The same previously happened to the `data`. Oh yeah.
 The call to this method of theTheme might be dangerous if done at static initialization time, when it is not specified whether theTheme is constructed.  It might or might not then reinitialize its std::function, depending on the unspecified order of initialization of statics in different translation units.

Not a problem here:  but in case you didn't know, this sort of danger is why I wrote GetThemeCacheLookup() as a function returning reference to a static object that is not in file scope -- rather than using a simple file-scope static for the map object.

"
1936,2021-10-15T11:21:12Z,2021-10-15T12:54:35Z,vsverchinsky,1,0,1,2,1,1,1,[],5723.0,0,11887.0,0,0,0,0,91882496.915844,,0,1,0,False,['Paul-Licameli'],"Now merged into master and release branches.
easy
","easy
","Resolves: #1927 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1935,2021-10-15T10:50:52Z,2021-10-15T12:45:04Z,Patriccollu,0,0,2,487,1,1,1,[],,0,7144.0,0,0,0,0,91889060.007999,,0,2,0,False,[],,,"Hello @Paul-Licameli,

This is an update of **Corsican** localization for Audacity 3.1.0.

Best regards,
Patriccollu.",
1930,2021-10-14T23:35:23Z,2021-10-15T12:46:46Z,Paul-Licameli,0,0,1,60,2,1,1,[],,0,47486.0,0,0,0,0,91889248.009019,,0,1,0,False,[],,,"Resolves: #1896

... This is unlike the case of loss of focus when clicking outside of Audacity,
which was the case fixed at ec258e0.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1919,2021-10-13T15:11:26Z,2021-10-13T17:51:11Z,Paul-Licameli,0,0,7,532,13,1,1,[],,0,9588.0,0,0,0,0,92043783.870954,,1,7,0,False,[],,,"Depends on PR #1915

Playback looping UI features that do include string changes.

New menu items (in toolbar and timeline context menu) enabling certain changes of the loop region without the mouse.

Hover texts for three toolbar buttons (the two play buttons and the new loop button).

Hover text added to the source for click-drag handles that are not yet implemented for the timeline.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1915,2021-10-13T12:28:06Z,2021-10-13T17:49:39Z,Paul-Licameli,0,0,13,813,22,1,1,[],,0,19297.0,0,0,0,0,92043874.950759,,1,13,0,False,[],,,"Various tasks needed to implement playback looping, that do not include the click and drag handles, and do not introduce any new translatable strings.

Some changes of behavior of the looping button, or the lock/unlock play region commands (Transport and ruler context menus), will be observable, and the play region will be painted differently.

Dragging of selection edges will now snap to play region edges.  (The vice-versa will be true too when drags are done.)

Play button image changes for shift down no longer happens.

Other cleanups of AdornedRulerPanel code to prepare for the later tasks.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1894,2021-10-11T21:48:32Z,2021-10-12T15:12:47Z,Paul-Licameli,0,0,1,87,5,1,1,[],,0,62658.0,0,0,0,0,92139688.907953,,0,1,0,False,[],,,"Resolves: #1890 

... Some lagginess has to be tolerated, because there must be a queue of some
length between the TrackBufferExchange thread and the PortAudio thread.   But
how short can it be?

In case of playback looping, that lag is now set to an arbitrary hard-coded
1/2 second in LoopingPlaybackPolicy::SuggestedBufferTimes; which is less than
the old default latency of 4 seconds (see PlaybackPolicy::SuggestedBufferTimes),
which perhaps was a value motivated by older generations of hardware.

So, if you adjust looping play bounds while the play head is within 1/2 second
of the end of the loop (that's 1/2 second of real time, not track time, in case
you also have a time-warping Time Track) -- then you might yet notice the play
head not doing quite what you want.

(Should we make that latency user-tunable?  Or, more challengingly for us,
detect hardware limitations and make it adaptive?)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1670,2021-09-13T07:57:19Z,2021-10-12T12:33:18Z,LWinterberg,0,0,1,41,1,1,1,[],,0,2522161.0,0,0,0,0,92149259.719445,,1,1,0,False,[],,,"Updated the contributing.md with more info as it's being shown quite prominently on https://github.com/audacity/audacity/contribute 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1671,2021-09-13T10:00:40Z,2021-10-12T12:31:13Z,LWinterberg,2,0,1,193,1,1,1,[],694174.0,0,2514634.0,0,0,0,0,92149385.870881,,0,1,0,False,"['SteveDaulton', 'LWinterberg']","I agree that this file can / should be removed as it is so out of date. However, there's a  few points that are still relevant that should be noted elsewhere if not already.  These features are still requested by users, and I believe they would all be useful:

* A master gain control
* A bars/beats time ruler and snap-to bars/beats.
* improve reverb
* Smart Mix (like Quick Mix but guarantees no clipping)
* discontiguous selection
* Icon set (mostly  Linux)

I also not that this point is a close cousin of https://github.com/audacity/audacity/discussions/1686
* [JKC] L&R <-> Average+Difference display. This way you can see 
what a stereo track gets mixed down to as mono, and the stereo 
content separately I've put some of the things into places where I can find them again. ""improve reverb"" probably will get fixed when we look over it again for the real time stuff. ",,"I hope this doesn't get me in trouble with the archeological society, but I think after 9 years without change, we really can get rid of this one :) ",
1876,2021-10-09T08:25:12Z,2021-10-12T12:23:44Z,LWinterberg,0,0,1,97,1,1,1,[],,0,273513.0,0,0,0,0,92149835.758997,,0,1,0,False,[],,,"Removes the changelog from the README.txt, instead pointing to the CHANGELOG.txt. Also fixes some outdated info (mailing list, building instruction). 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1700,2021-09-22T10:08:02Z,2021-10-06T12:24:24Z,DavidBailes,1,0,1,7,1,1,1,[],1733305.0,1,1733305.0,0,0,0,0,92152674.801776,,0,1,0,False,['Penikov'],"There are been founded a couple of broken things, so I add new issues about label name editing from the keybard",,"Resolves: https://github.com/audacity/audacity/issues/1683

For example:

1. Create a label track with two point labels
2. Tab until the first label is selected.
3. Hold down left arrow key for a short time to move the cursor before the first label.
4. Press tab to select the next label.
5. The second label is selected, whereas the expected behaviour is that the first label is selected.

Note that this issue has arisen since the change that tabbing just ""selects"" a label rather than also opening its name for editing. Before this change, if the label track remained the focus, then to change the cursor position using keyboard shortcuts then the user would first have to press Enter which closed the editing, and ""deselected"" the label, and then label selection correctly used the cursor position.

The fix: always use the cursor position, making sure that labels with the same start times are all navigated.



<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1886,2021-10-11T14:21:12Z,2021-10-12T12:06:04Z,vsverchinsky,0,1,1,3,1,1,1,[],,0,78336.0,0,0,0,0,92150853.881412,,0,1,0,False,[],"Approved with a small suggestion.
","Approved with a small suggestion.
","Resolves: #1862

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","RefreshNone is zero so that bitwise or could simplify.
"
1888,2021-10-11T15:21:11Z,2021-10-12T10:53:54Z,crsib,0,3,1,132,7,1,1,[],,0,70367.0,0,0,0,0,92155224.964176,,0,1,1,False,[],"Approved with minor suggestions about comments.  And you should credit yourself, not Dominic!
","Approved with minor suggestions about comments.  And you should credit yourself, not Dominic!
","Resolves: #1866 

Previously, Audacity used to change interface volume, which is uncommon and unexpected behavior for applications.

We had a report from the user about hearing damage caused by unexpectedly setting his audio interface volume to maximum.

As loudness perception is not linear volume will change exponentially.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Remove the comments above? The member variable mMixerOutputVol is no longer used in AudioIOBase so perhaps it should be moved into the subclass.
 Fix the filename and author name; use @file"
1750,2021-09-26T12:22:09Z,2021-10-11T11:48:01Z,carlo-bramini,3,0,6,2,1,1,1,[],1030140.0,0,1372787.0,0,0,0,0,92159547.85172,,1,6,0,False,"['LWinterberg', 'carlo-bramini']","Out of curiosity: Did you sign the CLA? Like, it's not so much for this PR, but for your past contribtions.  > 
> 
> Out of curiosity: Did you sign the CLA? Like, it's not so much for this PR, but for your past contribtions.

No, I didn't. I posted few PR here, but I was thinking that it was not so required if the changes are small and obvious.
However, I can do it, if this is required for accepting these changes. It would really help if you did sign it for the future :) But I'll merge this now anyway",,This little fix allows to configure Audacity on CYGWIN.,
1883,2021-10-11T11:20:10Z,2021-10-12T03:45:42Z,vsverchinsky,0,0,1,8,1,1,1,[],,0,81611.0,0,0,0,0,92158442.859733,,0,1,0,False,[],"Straightforward.
","Straightforward.
","Resolves: #1814

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1816,2021-10-04T15:29:45Z,2021-10-11T14:41:43Z,Paul-Licameli,0,0,5,586,85,1,1,[],,0,601922.0,0,0,0,0,92227957.990136,,0,5,0,False,[],,,"Resolves: #1157 

Extract a library for the theme system

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1840,2021-10-06T10:39:24Z,2021-10-06T14:40:21Z,vsverchinsky,0,0,1,2,1,1,1,[],,1,434309.0,0,0,0,0,92240192.809829,,0,1,0,False,[],"I should have noticed this in earlier reviews!
","I should have noticed this in earlier reviews!
","Resolves: #1759 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1832,2021-10-05T16:21:16Z,2021-10-06T12:21:58Z,vsverchinsky,0,0,1,17,1,1,1,[],,1,500191.0,0,0,0,0,92240198.947595,,0,1,0,False,[],"Just a '.' , that's nice
","Just a '.' , that's nice
","Resolves: #1698

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1793,2021-09-30T12:48:29Z,2021-10-06T07:06:25Z,vsverchinsky,0,12,2,31,2,2,1,[],,0,944951.0,1,0,0,0,92240207.372873,,0,2,0,False,[],I’m not satisfied with the first commit.  I think there is an alternative that might need more code but seems more elegant to me.  It avoids too the questionable new #include. Well this cut through the complications very nicely!,I’m not satisfied with the first commit.  I think there is an alternative that might need more code but seems more elegant to me.  It avoids too the questionable new #include. Well this cut through the complications very nicely!,"Resolves: #1651 

Also fixes wrong name assigned to a clip when recording to a new track.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","No complaints about the second commit. Although it doesn’t make a cycle, this dependency on Clipboard feels wrong to me. There is code here for detection of the origin of the clip.  But can there be another fix that sets the clip names right when they are made?

Could you instead correct the names in the OnCut and OnCopy functions in EditMenus.cpp?   No, you don’t know then which track it will paste into.  But you could just set the name blank and let paste handle source clips with empty names differently.  Would that be good enough? These changes go beyond fixing the referenced issue.  If there was agreement about new naming, I don’t know where it is. It Is this where you fix the actual complaint about generated silence?

I would like something else.  Add a non defaulted name argument to the non copy constructor of WaveClip, then make necessary fixes to get compilation.  I tried it, and they are not many.  It catches the unnamed clip when inserting silence, where you can call MakeNewClipName; otherwise you fix WaveTrack::CreateClip where a name is given, or you supply an empty name in de serialization which is soon rewritten with values from XML. Empty string is valid clip name, so I guess we cannot guess why it's empty No, the initial design document didn't consider generated clips at all. Hm, Silence is not the only generator which produces clips with invalid names, other generators are affected too (but they create clips a bit differently) Perhaps then, a clip could store a std::optional<wxString> !  Or otherwise invent a setter method for validity of the name.
 How do you generate clips with bad names with other generators?
 I see, MakeClipCopyName generates names containing ""copy"" when it should not.

You want that only when pasting clips that really come from the clipboard -- not for clips that are also pasted into a track because effects are implemented that way.

So:  this does go beyond fixing the issue as stated.  You need to distinguish clips from the clipboard so that only those get ""copy"" in their names.

I would still rather let clips carry some name-is-valid flag in them.

 Then I think it can be simplified: if the track has the owner then use the 'copy' name pattern, if not - use the 'new' name pattern.
```
if (pastingFromTempTrack)
   newClip->SetName(MakeNewClipName());
else
   newClip->SetName(MakeClipCopyName(clip->GetName()));
```"
1736,2021-09-24T16:33:14Z,2021-09-27T15:09:12Z,vsverchinsky,0,4,2,91,3,2,1,[],,0,1449848.0,0,0,0,0,92240226.08955,,0,2,0,False,[],"Please fix comment typos.
","Please fix comment typos.
","Resolves: #1689

Also fixes clipping usage

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","""being"" ""its"" Thanks! Thanks!"
1717,2021-09-23T14:07:18Z,2021-09-24T12:22:22Z,vsverchinsky,1,5,1,67,4,2,1,[],78652.0,0,1544989.0,1,0,0,0,92240241.111209,,0,1,0,False,['Paul-Licameli'],"I approve the changes.  If you are not going to make more fixes (I wasn't sure from your comment), then you may rebase and merge this PR.
This looks good.  I make a few small suggestions.
","This looks good.  I make a few small suggestions.
","Resolves: #1427

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","If instead you push this handle uncondtionally, then it will be possible to start a selection drag even if the mouse is inside a clip affordance -- if you hit Escape before the click and drag.

A minor advantage that few users may discover, but why not do it, for small extra effort.

 That test is strange... not simply `if (focusClip)` ?
 Likewise here, you might push SelectHandle always, but sometimes it is not the first hit.
 Thanks! Will fix that. Also currently it is not possible to make selection in affrodances area while one of the clips is beeing edited, will fix that too I see the new round of changes.  How is this problem fixed?
"
1711,2021-09-23T11:42:05Z,2021-09-27T21:53:13Z,vsverchinsky,3,10,1,24,1,2,1,[],33307.0,0,1553683.0,1,0,0,0,92240261.634013,,0,1,0,False,"['Paul-Licameli', 'vsverchinsky']","When was the bug introduced?  @DavidBailes said after 2.4.2.  Likely in work I did in the commit range c60bf1c9945b362d7fa2e675c22e674b1f005eea..583d347ae05dcc8b981f3716a7c7e3e414f06fc2 where I did a lot of work to make a polymorphic track shifter abstraction, so that TimeShiftHandle would not be build-dependent on subclasses of Track.

But where, more exactly, in there?
 Commit 9d52100f5cd00864652932a469588578f20d1b16 is where the old and more correct selection logic was deleted (see function `FindClipAtTime` which used `WaveClip::GetClipAtSample` which does not have the off-by-1 error).  But it may not be the first commit where the bug happened.  The function became unused, and was replaced with a different call, at an earlier place in this complicated sequence of commits transforming the time shifting code.
 > Commit [9d52100](https://github.com/audacity/audacity/commit/9d52100f5cd00864652932a469588578f20d1b16) is where the old and more correct selection logic was deleted (see function `FindClipAtTime` which used `WaveClip::GetClipAtSample` which does not have the off-by-1 error). But it may not be the first commit where the bug happened. The function became unused, and was replaced with a different call, at an earlier place in this complicated sequence of commits transforming the time shifting code.

I think that bug was introduced here https://github.com/audacity/audacity/commit/eb22892064b5f5b5aa7c8d26842428240504d663Some simplifications possible;  also I want a better understanding why the bug happened before.
","Some simplifications possible;  also I want a better understanding why the bug happened before.
","Resolves: #1613 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Use the rate of the clip, not the track (though they shouldn't differ)...
 ... or more simply, just use < not <= and don't adjust c1
 This member function of WaveClip becomes unused.  Remove it?
 Again, you can simplify if you use < not <= .

Just as with STL iterators -- where a range includes the given begin position but excludes the end -- we can use the same convention for ranges of sample positions.

I'm not sure why this rewritten code is functionally different from IsClipStartAfterClip.  Can you explain?

What is the detailed explanation for the buggy behavior?

Even if it is not different, I agree it's good to write similar tests in the two places in this file.
 Now I understand!  WaveClip::BeforeClip() is really the faulty function.  It contains <= where it should have < .

Here, you just avoid the use of BeforeClip().

There are uses of BeforeClip() elsewhere, though, which should be reexamined, and may reveal more bugs like this one.
 Yep, thanks! It's a leftover I overlooked from the previous iteration where I used time borders instead of samples It's removed in smart clips PR ok >Even if it is not different, I agree it's good to write similar tests in the two places in this file.

Yes, it is the root of the issue - clip borders were determined differently in clicked track and other channels. Another issue is that visual borders of the clip do not correspond to a actual clip borders:
![image](https://user-images.githubusercontent.com/20165230/134674196-6aab2eb9-2cb8-4e89-943d-d27d068595be.png)
Here selection shows the actual length of the clip, but frame is drawn with offset and a bit shorter, to prevent frame overlap with samples and overlap between adjacent clips if there is no gap between them. I think that the drawing is done wrong https://github.com/audacity/audacity/issues/1689#issuecomment-926428948 The solution might be to draw frame to exactly match the beginning and the end of a clip, but move ""dot"" sample by half of a sample.   How about exploring the uses of BeforeClip() for other off-by-one bugs that we have not yet identified?
"
1630,2021-09-07T11:17:24Z,2021-09-08T22:54:27Z,vsverchinsky,0,0,1,4,1,1,1,[],,0,2937537.0,0,0,0,0,92240289.020903,,0,1,0,False,[],,,"Changing ""Editing a clip can move other clips"" option default value to false

Resolves: #1333

Changing ""Editing a clip can move other clips"" option default value to false

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1679,2021-09-15T10:10:50Z,2021-10-05T16:16:38Z,vsverchinsky,2,30,4,1786,30,2,0,[],1127104.0,0,2250345.0,1,0,0,0,92240275.67767,,0,4,0,False,['Paul-Licameli'],"I see this is rebased onto more recent master now.

I like the more detailed explanation in commit comments.

In commit comments, if you write more than one line, then always make the second line blank, and after it, use line breaks at about 80 columns.
 At last, I consider this review complete!
I found a bug in updating of envelopes.
 Some observations about inconsistent use of append buffer length and possible off by one errors and rounding.  But I'm not recommending changes.

There may be a lot of subtle problems like this already existing and we might leave it until stabilization to study and try to fix them.

","I found a bug in updating of envelopes.
 Some observations about inconsistent use of append buffer length and possible off by one errors and rounding.  But I'm not recommending changes.

There may be a lot of subtle problems like this already existing and we might leave it until stabilization to study and try to fix them.

","Resolves: #1400
Resolves: #1401

Work in progress

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This is correct use of PositionToTime and TimeToPosition.   You understatnd that you don't just mutliply dx by some scaling factor.  The assumption of uniform samples per pixel should not be made.  Future projects might change that.
 The Cancel procedure is good.

The Release is still empty.  It will require pushing an undo history item.
 std::weak_ptr<UIHandle> instead of some subclass raises the danger of the slicing problem, which you correct in a later commit.

But look at all those old bad examples before it that I wrote!  These should be corrected too.
 I observe that this second commit in the draft PR does not build.

In the final PR, that should be corrected, and I would like this internals commit to be first in the sequence.  Or it might be a PR by itself.
 The unusual case where a call to one of the *Sequence* functions is needed not *Play*.  Comment it. I would slightly prefer not removing the anonymous namespace over can, making symbol tables just a little smaller.  This would require forward-declaring incomplete types in namespace { ... } in the .h file. This change is correct, but discuss with @SteveDaulton whether new information about the size of the hidden parts of the clip should also be passed to Nyquist.

Understand what happens here: C++ composes a string that is passed to the Lisp interpreter, and that sets up variables that are available to programming in Lisp. As I review the necessary changes in effects, this occurs to me.  What is expected if effects are applied to clips with hidden parts?  If you do nothing else, then the hidden parts remain unchanged.  Perhaps that is expected behavior.  Or perhaps in the case of the Reverse effect, it would be surprising behavior.  I’m not sure whether you should do anything extra.

This is one of the few places where there was a call to SetOffset.  Other effects did not use it.
 As with Nyquist, so perhaps too for macro programming: give more information about the size of the hidden parts of the wave for sophisticated users.  Only information:  no interface for changing it. @SteveDaulton   Notice this comment.  The non-overlapping condition for clips can be violated with macro programming!  Not our responsibility to fix that yet I think. Another unusual SetOffset call. I notice that this is a protected method.  I notice also that WaveTrack is a final class, so the distinction of protected and private is not useful.  Maybe the class should be simplified, only to have public and private methods.
 I see that WaveTrack::GetNumSamples becomes two public methods, each used in only one other place, and those other uses are correct.

I like the renaming changes here and in WaveClip -- *Sample* versus *Play* names -- and they force you to recompile many places and consider carefully which renaming is the correct one.  I am more confident in your work when I see that you did this.  Should the name changes be permanent?  I say, yes.

Much less has changed in the interface of WaveTrack.h, than for WaveClip.h.  It is a little surprising -- so to review carefully I must also look at what else is in WaveTrack.h that did not change, and be convinced that it is correct not to change them.

I notice that WaveTrack::GetStartTime() and GetEndTime() did not change names.  But as you know, that is because they are overrides of methods of Track.h, which declares virtual GetStartTime() and GetEndTime() but doesn't comment what they are supposed to mean.  So, I understand this exception to renaming -- you don't want to make the name changes in the other overrides.

Still that means I must review all uses of GetStartTime and GetEndTime to be sure.
 Comments above this function, and above the next function, still mention the old method names `GetStartTime, GetEndTime`.  Update the comments.
 I'm doing that review, and I notice many GetStartTime and GetEndTime calls in effects, which I just assume correct -- that destructively applied affects will only apply to the un-hidden parts of tracks.  As I said, that might be surprising in some cases and a debatable point of design, but I will interpret the design for now as not demanding it.

I notice GetOffset() and SetOffset() are two other virtual functions in the base class Track that were not renamed, so I must also review uses of those to be sure of completeness.
 The comment preceding this function also needs update to mention new method names
 Now I have done that review.  I think that the legacy in class Track needs a clean-up.  It's not clear what the distinction of ""start time"" versus ""offset"" is supposed to mean, or what purpose the mOffset member variable serves.  I think there should be a clean-up project to eliminate the ""Offset"" functions.

This is not to be part of the present pull request.  It is for one of us to write in the stabilization period and for the other one to review.
 Please insert this new member function immediately before WaveTrack::Paste().  That may make the commit more easily reviewable because there will be more common lines, and less in the diff view.
 Buried in all these changes is one very interesting thing here:  the need for a more strict definition of correspondence of clips.

A detail like this deserves comments, both in the code here, and also in the git commit comments.

I'd like to encourage you to write more comments, of both kinds, about such changes of behavior.
 The function `WaveTrack::Trim` has another interesting non-trivial change of behavior, like the test for correspondence, which is worthy of a comment.  Instead of deleting material, as before, now we hide the material in the smart clip but do not forget it.

I looked for where this function is used.  One place is in EffectSoundTouch -- but it always applies to a newly generated temporary track.  The other implements the Trim editing command, in EditMenus.cpp.  There is a comment there, no longer appropriate, which should be changed:

```
//Delete the section before the left selector
```
 A definite mistake here.  WaveClip::SetOffset used to affect the envelope and the sequence.  But WaveClip::SetPlayStartTime now affects only the sequence.

 If this function instead called through to WaveClip::SetSequenceStartTime(), which does change the envelope offset, then the bug last mentioned would be fixed. “Previously” I thought there might be a bug with cut lines, but I read all again carefully and no longer think so.  Good job Some doubtful code you dont need now? Thanks! Yes, but now I think it's not that important to precisely count only visible cutlines here, since it's used only as an estimation for cache preallocation size and assertion at the end.  Removing it Thanks! Updated both commit message and function comment Should you change `sampleCount(floor(GetTrimLeft() * GetRate()))` to `TimeToSamples(GetTrimLeft() * GetRate())` for correct rounding?
"
1616,2021-09-03T17:32:00Z,2021-09-06T13:33:19Z,vsverchinsky,2,0,2,43,2,1,1,[],58166.0,0,3260653.0,0,0,0,0,92240298.653746,,0,2,0,False,"['petersampsonaudacity', 'Paul-Licameli']"," I just tested the label drag bars with @vsverchinsky's latest branch build: audacity-win-3.1.0-alpha-20210903+e91e7b8-64bit 

I confirm that the icon now properly changes to the drag hand when cursor is over the label's drag-bar:
a) open hand while hovering over 
b) closed drag-hand when clicking and dragging

Note that this is good, much better - but it now makes the old way of moving/resizing labels with the chevron and dot inconsistent as they still use the arrow icon. Approved.  Please rebase and force-pushc.
Nothing to add!
","Nothing to add!
","Resolves: #1444 #1544 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1614,2021-09-03T00:20:53Z,2021-09-15T03:09:01Z,vsverchinsky,1,30,6,4603,17,2,0,[],529229.0,0,3322501.0,10,0,0,0,92240318.879725,,0,6,0,False,['Paul-Licameli'],"This round of review is now COMPLETE!  The overall approach is sound, but I flagged many details that need attention.  None of these is difficult by itself.
I raise questions about the new event passing.  I think the new event type is unnecessary and should not be added.  Another implementation can be done with existing events.

This is not a complete review, but you can begin with these reqeusted changes.

 More code reuse, less duplication?
 More code reuse, less duplication?
 Advice about file structure and non-inline virtual destructor.
","I raise questions about the new event passing.  I think the new event type is unnecessary and should not be added.  Another implementation can be done with existing events.

This is not a complete review, but you can begin with these reqeusted changes.

 More code reuse, less duplication?
 More code reuse, less duplication?
 Advice about file structure and non-inline virtual destructor.
","Resolves: #1258 

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Only changing note track affordance text colors?
 Add header comments as in other headers describing the purpose of the file, and use
@file and @brief comments for Doxygen.
 I am uneasy with this entire commit.

You have figured out TrackListEvent, which is emitted by TrackList.  Why must WaveTrack emit an event?  Where you need this event, can't you bind to the TrackList instead and use the existing event types?
 This is where the new event type is bound.  Why not bind to the Tracklist?
 This is the handler of the event.  Could instead mTextEditHelper bind directly to the track list?

Would that solve any problems about lifetime?
 Unbind() is also unnecessary when the event ""sink"" object in the Bind() call also inherits wxEvtHandler.  Then when it is destroyed, the ""source"" wxEvtHandler is also notified to clean up its list of observers.

(I'm not certain, but it may in fact be enough for the sink to inherit wxTrackable, a base class of wxEvtHandler.)

Can the text edit helper inherit wxEvtHandler and bind itself to the TrackList?  Then it can destroy itself in response to the event.
 Perhaps ""TextEditPolicy"".  This looks like the ""Policy"" pattern, also called ""Strategy,"" where an object supplies a set of callbacks to a reusable framework.
 This logic was DUPLICATED from LabelTrackView and LabelTextHandle.

But why duplicate, when we might really reuse?

Can it be given a better name like ""TextEditingCell"" and could it first be split out and used in LabelTrackView?

 I recommend:  Combine this header with TextEditHelper.h, because the classes cooperate closely.  Neither is useful without the other.

Then, define the destructor of TextEditDelegate as non-inline.

If a class has virtual functions, it is better that at least one of them is defined non-inline, and the destructor can be the one if all the others are pure virtuals.  (Actually pure virtual functions cal also be given definitions, but that's another story.)

It is better because then it can be decided at compile time, in what single place, the virtual function table of this base class will be compiled.

Whereas otherwise, the compiler must duplicate the virtual function table definition, and the linker needs to remove all but one duplicate.

So avoid the bit of extra work for the linker.



 In new commit history this commit contains also wave track colors changes `WaveClipAffordanceControls` now inherits `wxEvtHandler` and this fixes issue with event processing and objects lifetime No, it's not a policy. It could be a `TextEditListener` or replaced with wxEvent dispatch It's not a cell because it does not define TrackPanel separation as other cells do.
There is another PR which addresses an issue with code duplication I see the purpose of this change and the commit that introduces it is to fix a ""slicing problem"" in AssignUIHandlePtr, where an object of derived type may be assigned to an object of base type, losing information.  Yes?

I don't know why I didn't see this earlier in review!

I suggest this additional change (add it to the label refactoring branch maybe):

In AssignUIHandlePtr, in the else-branch, add

```
      wxASSERT(typeid(*ptr) == typeid(*pNew));
```
You may also need
```
#include <typeinfo>
``` This change is good, but incomplete!

Similar code with the same slicing error is still not corrected in NoteTrackAffordanceControls.
 Can you state in comments any intended invariant relations among these values?

Is it meant to be invariant that `mInitialCursorPos <= mCurrentCursorPos` ?
 Should you comment before this function,
```
@pre from <= to
```

Or swap the values before the assignment to make the condition hold?
 Please use `override` not `virtual`.
 Should this be index <= 0?
 I don't know if it is important, but I think this if-block needs to move down, outside one more } , to correct the analogy with LabelTextHandle::HandleTextClick:  Do it whether bounding box contains the position, or not.
 My preference is to put cleanup lines like the above three inside
```
auto cleanup = finally([&]{ ... });
```
And put the declaration of cleanup higher, just after the first SetClippingRegion().

This is ad-hoc RAII.  `finally` generates a class that performs the lambda in its destructor, and binds an instance to `cleanup`.

This makes it easier to be confident that a long function isn't making a mistake somewhere, with an early exit that forgets to restore the context.  Or, in case of exceptions.





 Is this condition correct in case of right-to-left layout?
 ditto ?
 I think mOffset needs comments about what it really is.  I'm not sure I understand it.
 Are the above two lines right?  Isn't current >= initial always?

Is what you really want to do:  get char positions for initial and current, as left and right, but then swap in case of RTL layout?  Because, swap is needed in that case and that case only?

Did you really try all of this out with Arabic?  Putting breakpoints at every test of layout, and making sure all are hit?


 I see you made this command by analogy with SetTrackNameCommand in CommonTrackControls.cpp, and like that command class, it isn't meant to be registered with CommandManager.

It is commented there, that the same effect can be achieved with other commands available to macro programming.

Is that so for change of clip name?

No.  So I suggest: the existing SetClipCommand class needs to be extended with another parameter for setting the name, by means of macro programming.

I know that wasn't part of the specification of this project, but it is something that should be done for completeness: exposing all changes of properties we can to macro programmers too.

This could be a separate PR.  I opened issue #1644 
 Is this your first experience writing some ShuttleGui code?
 Whenever you add XOs or XXOs, make sure Jouni agrees with the exact words.  There are a few others in this PR.

 This function, and the two following, may cause. Return key, while the mouse is in a wave track, to edit a clip name.

Was that part of the design?

I think the more correct way to do call-through:  call through to the affordance, but then check event.GetSkipped().  If it is true, meaning the affordance did not take its first-chance to capture the key, then call through to the base class in case it wants to capture.

Take the bitwise OR of the return from the two captureKey calls, as the return value of the function.

It may not make a difference now, because nothing really happens in the base class methods, but don't assume that will remain so.

Make similar fixes in the next two functions.


 Tab key navigation didn't work when I tried it, but the simple missing piece, is a change of WaveTrackAffordanceControls::CaptureKey so it does not skip the event for tab key.
"
1533,2021-08-25T17:03:19Z,2021-09-06T13:25:31Z,vsverchinsky,4,24,4,252,14,2,1,[],71433.0,0,4039947.0,2,0,0,0,92240327.195114,,0,4,0,False,"['petersampsonaudacity', 'Paul-Licameli', 'vsverchinsky']","Please see:  Nomenclature for default Clip names could be improved as ""Audio Clip"" #1535 All is well in the last commit
 Just rebase, nothing fixed yet The i18n changes are good, I suggest better comments about the logic of the binary search, but there is a possible crash bug in split-cut of tracks which was introduced in a later force-push.  I think you write rightClip where you meant leftClip.

Fix that, and the comments, test split-cut (Edit > Remove Special > Split Cut), rebase and force-push, and I will approve.

First commit is good Null pointer dereference?",First commit is good Null pointer dereference?,"Resolves: #1182 #1324

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","This might be simplified and clarified by using this standard function https://en.cppreference.com/w/cpp/algorithm/partition_point
 Are non-unique clip names possible?  If so, then should this function instead return a vector of all matching clips?  But then, is the function needed or could the user use the AllClipsIterator instead?
 I see the only uses of this function test the return against nullptr.  So do you just need `ClipWithNameExists` ?
 This neglects internationalization.  Some language choices might use other digit symbols.  And the substitute-don't-concatenate rule often applies with i18n.  So instead:
```
//i18n-hint a numerical suffix added to distinguish otherwise like-named objects
XO(""%s #%d"").Format(pending->GetName(), i)
```
 The old code neglected the i18n I just mentioned.  So let's fix it now too. Answering me:  this looks like yes, it could make non-uniquely named clips in one track.  However this is import and I think it never makes more than one clip in a track, because import formats don't have the notion of clip.
 Substitute, don't concatenate (unless concatenating whole sentences)
```
XC(""%s - copy %i"").Format(originalName, i).Translation()
```
 Again, i18n and substitute don't concatenate
 But does our TranslatableString::Format() actually apply the locale properly for numbers? ... I'm not sure!  Ultimately it uses wxString::Format too, but maybe it needs to make sure of the global locale setting.

 Substitute don't concatenate
 Again I would make a format that substitutes the clip name, if I really do this.

Is this split-clip naming convention good?  I wonder.  Repeated splits might pile up "" 1 1 1"" ... repeatedly and be undesirable.  But I'm not ruling on that design question.
 It will work too Will fix that, thanks! I raised same question in https://github.com/audacity/audacity/issues/1182 there were no objections then When making copies of a copy it's not unusual to get names like ""filename - copy - copy - ..."", but maybe there is a better approach for clip naming, I don't know. >Are non-unique clip names possible

Yes, but this method is used to check clip existence But i don't see how to use predicate in that case, if I understand you correctly you suggest this:
`std::partition_point(text.begin(), text.end(), [](auto char) { return /*how to get length?*/ }`
 I think you could take the char by reference and use its address.  A bit of a cheat though. If you don’t do that, I would prefer you clarify the loop by stating invariant conditions.  I think the invariant is: left - 1 is an allowed length for trimming the string or -1, and right +1 is a disallowed length.

If the loop terminates, the loop condition is false, so the min is right.  More, you can prove right == left - 1, and therefore a good length or -1 because the invariant is preserved.

The lack of comments a out the invariant and the unnecessary min makes me question how carefully you reasoned.
 Maybe say “when splitting a wave track” Ditto Does this test correctly?  I think this would crash because you use leftClip after moving from it. Typo, thanks! >I think you could take the char by reference and use its address. A bit of a cheat though.

I would avoid making suggestions about internal representation of strings in the wxString, though it's been said that it uses std::basic_string as a container, encoding is another problem

>so the min is right

Right, thanks!

"
1532,2021-08-25T17:02:25Z,2021-08-27T09:31:12Z,vsverchinsky,1,0,1,1648,3,1,1,[],71903.0,0,4039993.0,0,0,0,0,92240335.658857,,0,1,0,False,['petersampsonaudacity'],"Looks lighter and thus more obvious, and gets lighter still when hovered over,  Looks like an improvement to me.
![image](https://user-images.githubusercontent.com/50205984/130967117-3e178e09-308d-4e8e-b0de-4c6690bfb8ce.png)
",,"Resolves: #1446 
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1857,2021-10-07T15:25:39Z,2021-10-07T23:40:59Z,Paul-Licameli,13,0,2,57,2,1,1,[],58893.0,0,325709.0,0,0,0,0,92245227.169107,,2,2,1,False,"['Penikov', 'Tantacrul', 'SteveDaulton', 'Paul-Licameli', 'crsib', 'DavidBailes']","> Resolves: #1710
> 
> This does not resolve all as suggested in the issue description, but may offer satisfactory workarounds.

This does not offer satisfactory workarounds.
I am at a loss as to how this issue has been handled. This was the initial design:
https://github.com/audacity/audacity/issues/1258
As you can see I raised the issue of Enter being a duplicate on 9 Jul, and there was a reply from @jounih:
""@DavidBailes makes sense to have customisable commands for selecting clips and editing names rather than hardcode these shortcuts. @vsverchinsky can you do this please?""
And here we are on 8 Oct with a duplicate shortcut.

Have the designers said  that there has be a duplicate shortcut?
Why can't this be fixed properly with a command and a user assignable shortcut, with a default which is not a duplicate, like it's done in the rest of Audacity?
I really don't understand what is going on here.

 Shortcuts are generally context-sensitive. I agree, that ideally this should be implemented as a configurable shortcut. Workaround Paul proposes solves the problem of context switching. And it is (almost, see below) satisfactory in case we won't be able to implement the configurable shortcut in time for 3.1.

However, after testing I found out that it is not possible to deselect a clip with an Esc key and I think this should be fixed to @Paul-Licameli @Penikov (cc @AnitaBats)
 > Shortcuts are generally context-sensitive.

Sure, shortcuts can be context sensitive, but this is not a good case for that. The user would not expect to have to deselect a clip in order to change the selection of the track.

> I agree, that ideally this should be implemented as a configurable shortcut. Workaround Paul proposes solves the problem of > context switching. And it is (almost, see below) satisfactory

It is not almost satisfactory.


> in case we won't be able to implement the configurable shortcut in time for 3.1.

Is getting the keyboard user interface right less important than getting the mouse interface right?
Isn't accessibility a high priority for this project? 
@Tantacrul What are your views on this?



 I think, we can solve this issue at the spot with another ESC push. 
Let's say if the clip name edit mode is on, the first ESC turns off this mode. Another one ESC removes a clip/track selection.

If there is no clip name editing, the ESC button removes the selection only.
 >The user would not expect to have to deselect a clip

I don't think that track selection toggling with `Enter` is expected by most of the users anyway. The current track selection behavior is really confusing as it is. And there are issues there already. For example, Shift+arrows behaves differently depending on the track count: https://crsib-screenshots.s3.amazonaws.com/2021-10-08_14-15-07.mp4

I agree that there are users that are familiar with this behaviour and may rely on it. And using Enter for renaming is familiar only to macOS users, so probably there should be a better default shortcut for renaming rather than the Enter key. Given that F2 is already in the global scope, I would say Ctrl-F2

>Isn't accessibility a high priority for this project?

It is a top priority indeed. But there is no commitment that we will never change the behavior of the application. This includes the potential changes to the selection behavior. Otherwise, there is no point in development. 
 And in any case, I believe Esc should remove the selection from the clip @Paul-Licameli @Tantacrul @vsverchinsky  > > The user would not expect to have to deselect a clip
> 
> I don't think that track selection toggling with `Enter` is expected by most of the users anyway. The current track selection behavior is really confusing as it is. And there are issues there already. For example, Shift+arrows behaves differently depending on the track count: https://crsib-screenshots.s3.amazonaws.com/2021-10-08_14-15-07.mp4
> 
> I agree that there are users that are familiar with this behaviour and may rely on it. And using Enter for renaming is familiar only to macOS users, so probably there should be a better default shortcut for renaming rather than the Enter key. Given that F2 is already in the global scope, I would say Ctrl-F2

Ctrl+F2 would be fine (I suggested it in September: https://github.com/audacity/audacity/issues/1258#issuecomment-913630627)
> 
> > Isn't accessibility a high priority for this project?
> 
> It is a top priority indeed.

That's reassuring to hear.

> But there is no commitment that we will never change the behavior of the application. This includes the potential changes to
> the selection behavior. Otherwise, there is no point in development.

I don't have a problem with the behaviour of the application being changed. I don't have a problem with the selection behaviour being changed. I am aware that the behaviour of the shift+arrows is rubbish - it has been discussed in the past, but unfortunately there was never agreement as to what it should be changed to.

My problem is with having this duplicate use the the Enter key which makes it harder for keyboard users to use the program.

 > I don't think that track selection toggling with `Enter` is expected by most of the users anyway.

I'm pretty sure that it is very much expected by many millions of current Audacity users. 
There are also countless references to using ENTER to toggle track selection in Audacity documentation and on the forum.

Example:
To select tracks 1, 3, 5, 7, ...
1. Click on track 1
2. Down cursor twice then Enter
3. Repeat step 2 as necessary
It can be a one handed operation, and second nature to millions of existing users.
Alternatives such as ESC are less convenient, (and ESC to select a track is counterintuitive).

> I agree that there are users that are familiar with this behaviour and may rely on it.

Absolutely, and that's a vast number of users considering that this feature has been present for 20 years. >ESC to select a track is counterintuitive

ESC ""unrolls"" selection stack, it is not used for selection per se. Thanks @DavidBailes: this was very useful for me to understand our accessibility a little better. We just discussed a stopgap solution that will 1: not mess with existing experience with the Enter key & 2: will provide a 'for now' key binding for renaming clips.

Ultimately this will be solved when we move to the next step of our work on altering clip behaviour. That will involve a more distinct selection state for clips that is different to selecting wave data. More to come about this. Will share designs when they are ready for your feedback. The notion of selectedness (or focus) of a clip, distinct from a time selection coindident with the clip boundaries, needs to become a real thing in the code but it needs thought and work and no short fix is going to do it now.

I have raised the idea that the set of keystroke bindings should not be a single global one, as now, but might more usefully by contextual.  That is, Return might be customized for one thing in general (changing track selection) but a different set of customizations could apply and override the meaning of Return when a clip or label or other thing is focused (starting the editing of a name).

That's a nice idea that has occurred to me before, still worth considering, but it might take a lot of elaboration to make it work, both in restructuring our CommandManager and in making a convenient way to customize the keystrokes in Preferences.  And it presupposes that the notion of clip focus is properly implemented first.


 This pull request was approved and merged.  It has been judged insufficient for the issue.  But I ask again whether anyone thinks it contained anything wrong that should be reverted.  No one has said so. > We just discussed a stopgap solution that will 1: not mess with existing
experience with the Enter key
Thanks @@Tantacrul <https://github.com/Tantacrul>. If that behaviour had
remained in the release, I would have probably ended up recommending that
users of screen readers should avoid  using version 3.1.0.


On Fri, 8 Oct 2021 at 14:44, Tantacrul ***@***.***> wrote:

> Thanks @DavidBailes <https://github.com/DavidBailes>: this was very
> useful for me to understand our accessibility a little better. We just
> discussed a stopgap solution that will 1: not mess with existing experience
> with the Enter key & 2: will provide a 'for now' key binding.
>
> Ultimately this will be solved when we move to the next step of our work
> on altering clip behaviour. That will involve a more distinct selection
> state for clips that is different to selecting wave data. More to come
> about this. Will share designs when ready for feedback.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/audacity/audacity/pull/1857#issuecomment-938655193>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AC2WDLNSGKSFLGTZSA6EKT3UF3YUPANCNFSM5FRR6EOA>
> .
> Triage notifications on the go with GitHub Mobile for iOS
> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
> or Android
> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.
>
>
",,"Resolves: #1710

This does not resolve all as suggested in the issue description, but may offer satisfactory workarounds.

For label track behavior:

The ESC key already removes the insertion cursor if there is one.  But now, if there no insertion cursor but there is a label navigated to by TAB, then ESC clears the navigation state.  This allows ESC and then RETURN to change the selected state of the label track.

For wave track behavior:

The RETURN (or number pad ENTER) key behavior will remain hard-coded.  It is also hard-coded for label track text editing, about which there isn't a complaint.

""Note that if a clip is not selected, then pressing Enter does nothing. I assume that's just a bug in the implementation.""  This is fixed.  The RETURN key will be intercepted for editing only in case the selection coincides with the extent of a clip.

With this change, you can change the selection such as with J or left arrow in default key bindings so it becomes a point.  Then RETURN toggles the selected state of the wave track.

You may be unsatisfied that restoring the time selection to what it was before requires further TAB key presses.  Maybe further improvement is possible, and you, @DavidBailes , might suggest another commit to accomplish that.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1871,2021-10-08T13:53:02Z,2021-10-10T00:31:55Z,DavidBailes,0,0,1,21,1,1,1,[],,0,124733.0,0,0,0,0,92365360.595243,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/1870

When a user presses tab or shift+tab to select the next/previous clip, a message is sent to any screen reader.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
836,2021-05-04T19:52:46Z,2021-06-15T19:56:49Z,vsverchinsky,24,30,2,1379,24,3,0,[],194059.0,0,13792865.0,0,0,0,0,92240444.753786,,0,2,1,False,"['petersampsonaudacity', 'TOGLK', 'snoozysoft', 'Be-ing', 'Picoseconds', 'falkTX', 'igorkorsukov', 'IGBC', 'vsverchinsky', 'Paul-Licameli', 'Qix-', 'missytake', 'crsib', 'InterVi', 'Joshua-Ashton']","Is this going to be optional / opt-in?
Integrating an open-source tool with google services will make a lot of people quite unhappy and overall just lose trust on it. I don't think this sends data to a Google server. IIUC Breakpad requires the project using it to set up their own server. Another :-1: here. Why the sudden interest in adding Google dependencies for analytics and user tracking? Well it's gonna be self-hosted so I'm not sure how bad this is, at least it won't be sending data directly to Google I don't see this being particularly useful, automatic crash handlers in OSS is a rarity and crashes in software like Audacity tend to be pretty easily reproducible as there's not much going on so the gain from getting dumps would be minimal.

Also can we talk about how this adds 800+ new files? Why? Importing the breakpad library this way is fucking stupid. Automatic crash reporting is very useful. Most users won't go through the trouble of learning how to use GDB to make a good bug report.

But yes, please stop vendoring dependencies. That has collateral impact beyond Audacity. can this be turned off? > can this be turned off?

It is not even on yet. There is no need to turn it off once it is merged though, it can actually be quite useful.

I had wrong ideas initially about this, was not sure about implications of using breakpad.
This one does not need to rely on google servers.

if you really want nothing to do with google, you might as well stop using the web.
upcoming quic/http3 is basically a google creation, so the web will be served on a protocol engineered at google. > 
> crashes in software like Audacity tend to be pretty easily reproducible as there's not much going on so the gain from getting dumps would be minimal.

If only that were the case - a good example is P1 Bug 2700 which was not easily reproducible - and there have been many others over the years (I took over as the main QA tester following the death of Gale Andrews).

And very few users bother to (or even know how to) send crash logs to us sadly.

 I would appreciate a toggle that is built-in to Audacity, or, that could be changed prior to compiling Audacity, so that end-users can disable this functionality if they wish to do so.

I fully understand the importance of crash reporting, and making it automatic helps to streamline the Crash Report Submission Process.
But.
That shouldn't mean that the option to disable such functionality shouldn't be included.

I value my privacy and If I decide that I don't want to share crash logs with the Audacity Development Team then that decision should be down to ME, and not the developers of Audacity.

It is my hardware, and my system, and I want to have the choice to decide whether or not my system reports crashes or not.

I hope that you will listen to my feedback and consider it quite heavily when deciding how to further proceed with these commits.

Thank you for taking the time to read what I have to say, and have a good day.

TOGLK.
 > I would appreciate a toggle that is built-in to Audacity, or, that could be changed prior to compiling Audacity, so that end-users can disable this functionality if they wish to do so.
> 
> I fully understand the importance of crash reporting, and making it automatic helps to streamline the Crash Report Submission Process.
> But.
> That shouldn't mean that the option to disable such functionality shouldn't be included.

In due course when a build becomes available I will be QA testing this.  One thing I will be looking for is an option in the crash report for sending or not sending a crash report.  I, for example, almost never send crash reports to Microsoft - as I can opt out of that at crash-time (most of mine are deliberate QA crashes anyway to test resilience and Recovery - and bug fixes.)




 I am generally pro breakpad. If its between this and #835 I choose this. Its library shown to have a lot of benefits. Incidentally Steam uses it in their client, and I think they have had a lot of success with it. Yeah from what I can tell with some brief research, this one actually seems fine since it doesn't appear (on first glance?) to send anything to Google. From what I can tell, it requires the developer to have their own server for minidump files to be sent to.

...Which begs the question as to why they can't run telemetry stuff on their own servers but *can* run crash reporting stuff. Hm. Either way, I think the core concern here isn't privacy but stuff more strictly related to the development of Audacity itself (which I obviously can't as easily speak for)

Obviously anything Google coming near a FOSS project is not ideal but as IGBC said, if something *must* be added that's bearing that brand name then this is arguably the better one (outside of the ideal option of ""none"" of course). anyone ever consider this is a bait and switch?

They got us angry at Analytics so we'd be OK with breakpad 😆 ? Hah, that's a fun thought. I'd agree but this one popped up on the same day only 4 hours after the telemetry PR, which probably isn't enough time

Besides this is serving a completely different purpose anyway yea sadly its clear their plan was to install both. Clearly they want a near clickstream from this program. Its very marketing adjacent.  `</offtopic>` Please observe that a crash report is sent only if the CMake variable CRASH_REPORT_URL is defined, but it is not defined in this pull request.
 Crash reporting will be enabled only for the RC builds. It is technically impossible to do it otherwise anyway. 

Sending the generated crash report will be an opt-in. The report will be sent to the self hosted Sentry instance. Why only RC builds, seems like there could be valuable reports out in the wild in release builds. Heaven knows the audio world has some wacky machine configurations. > if you really want nothing to do with google, you might as well stop using the web.
> upcoming quic/http3 is basically a google creation, so the web will be served on a protocol engineered at google.

And this is exactly why this is a problem - if people can't use the web anymore without using google protocols or software, then we don't have a free and open web anymore.

The same is true for my favorite audio editing software. All of my four albums were produced with audacity. There must be a way to get proper crash reports without giving the biggest technology monopoly even more power. As far as I know, the Breakpad is deprecated and will not evolve, for example, it will not support new types of OS and processors. So, is recommended to use Crashpad https://chromium.googlesource.com/crashpad/crashpad/+/refs/heads/main/doc/overview_design.md > As far as I know, the Breakpad is deprecated and will not evolve, for example, it will not support new types of OS and processors. So, is recommended to use Crashpad https://chromium.googlesource.com/crashpad/crashpad/+/refs/heads/main/doc/overview_design.md

Isn't Crashpad distributed under Apache License 2.0 (which is incompatible with GPLv2)? > > As far as I know, the Breakpad is deprecated and will not evolve, for example, it will not support new types of OS and processors. So, is recommended to use Crashpad https://chromium.googlesource.com/crashpad/crashpad/+/refs/heads/main/doc/overview_design.md
> 
> Isn't Crashpad distributed under Apache License 2.0 (which is incompatible with GPLv2)?

Got it what the problem is, thank you. I'm still asking for fixes for internationalization.

Among my many comments here, I also suggested improvements in comments, and also the source code tree reorganization (making the crashreporter folder less nested).

I would still like those changes, but I won't let them delay approval.
",,"Adds crash reporting to Audacity

Crash reporting allows developers to have more details on the current problems in Audacity, understand whether they are platform/OS version specific, etc.

Implementation is based on Google's [BreakPad](https://chromium.googlesource.com/breakpad/breakpad/) library, and consists of a few modules: 
 * breakpad library: via conan (https://github.com/audacity/conan-recipes)
 * crashreports library: provides some functionality to configure and start breakpad in a platform-independent way
 * crashreporter: is a small GUI application that should be shipped along with Audacity, used to send reports to remote server when app crash occures. Provides short summary on crash. Sending is optional, user may decline sending a report, by pressing ""Don't send"" button. Optionally, user may also leave a short commentary on that issue.
 
 By default, these modules are ignored until USE_BREAKPAD option is provided.
 
![image](https://user-images.githubusercontent.com/20165230/121231118-b0b26e80-c898-11eb-875d-bdbc2afc21aa.png)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","This should be removed too We need to make sure, that this is not merged Do you mean the whole file @crsib? I make no comments on this file
 https://cmake.org/cmake/help/latest/prop_tgt/XCODE_ATTRIBUTE_an-attribute.html
That documentation page says to use this CMAKE variable as a last resort and with great caution.

Are we sure this is necessary to get usable debug symbols?
 Chain-call idiom is nice.

The naming convention in Audacity is that member functions begin with a capital letter.  Perhaps just delete ""set"" from each name.

 Nothing serious.
 done reinterpret_cast is the cast operator of last resort.

static_cast is more appropriate when a void* context argument, given back to you by a C library, must be down-cast to a real type.

That applies to the other uses of reinterpret_cast in this commit.

And this declaration might also read better with auto.  (Which you did use elsewhere.)
 But thank you for not using C style casts!
 It helps to avoid compiler warnings about unused parameters.  Either omit the variable name, or comment it out, or inside the function write
`
exinfo;
assertion;
` https://docs.sentry.io/platforms/apple/dsym/#uploading-symbols-with-sentry-cli
this is the only option which works, known to me at least (with XCode, other generators will require another solutions) Consider C++11 raw string literal syntax instead of piling up the \ characters:
`
R""(=\)""
`
and
`
R""(\"")""
`
https://en.cppreference.com/w/cpp/language/string_literal
 What is the reason to use fixed-size strings?
 to avoid using heap allocations after exception occurs final is good.

The class needs a few comments as to purpose, and make the habit to use Doxygen commands too.  At least:

`
//! A short description
`
or
`/*!
A long description
*/
`
before this line.

I had to read AudacityApp.cpp to understand its purpose:  use it at startup time to initialize crash reporting.  Also that this object needs only a short lifetime, unlike the CrashReportContext
 A brief Doxygen comment about this function at least, being the most important one in the class.  Also, Capital naming convention.
 This is a slight abuse of the non-short-circuiting &= operator.
`ok = ok && ...;`
is more proper.
 Also because it is statically constructed?  Yet it is a static constructed in a function, not file scope, and that function is done when already starting up the application, somewhat late in the startup process.
 Is this an early enough place to initialize?

Is this the earliest possible place?

Maybe the answer to the last in fact no, but the question should be asked and your answer should be a code comment.

This source file contains the actual definition of main() if you look elsewhere.
 Comments should emphasize that this function is for initialization... ... while this function executes after a crash, and so is constrained, such as, not to allocate memory.

If I understand correctly.
 When you write a .cpp / .h file pair, it is good to make the #include of the .h file the first of all #include directives.

That compels you to put all the necessary nested #include directives or forward declarations in that header, so that other source code files might also #include the header as a self-contained thing.

I noticed that one version of CrashReportContext.h has the standard map header but the other doesn't, but appears to need it because you include <map> before it in the .cpp file.
 I figured out that this function executes in the context of a crash, as also the makeCommand and send member functions, and therefore do unusual things to avoid memory allocation.  But these three should contain comments, to make that clearer. This and the remaining functions do not operate under the constraints of uploadReport().  Say that too in comments.
 wcscpy_s is not necessitated by crash context here.  Is there another reason to prefer it to string class operations?
 as above? as above again?
 You might use std::optional.

Except we are not at C++17 yet.

But there is an imitation of optional in src/MemoryX.h.

But maybe you can't include from src/ here.

Hm.  Make a ""TODO C++17"" comment.

 Explain that ""this"" is context passed back to uploadReport. Can you comment, or point to documentation, explaining the call signature that this function must have?

For instance I don't understand ""succeeded"" just reading this.
"
1872,2021-10-08T15:52:32Z,2021-10-08T21:14:12Z,Paul-Licameli,0,0,1,53,8,1,1,[],,0,52167.0,0,0,0,0,92430758.14804,,0,1,0,False,[],,,"Resolves: #1858

Exit clip name editing when a mouse click causes the TrackPanel to lose focus.

Note that this implementation commits any unfinished text edit with a Undo history item -- it doesn't cancel it as if by the Escape key.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1848,2021-10-06T19:38:52Z,2021-10-08T12:35:30Z,Paul-Licameli,0,0,2,98,2,1,1,[],,0,159541.0,0,0,0,0,92482604.494448,,0,2,0,False,[],,,"Resolves: #1820
Resolves: #1847

This would fix the failure of delete to work in right channel for the brush tool, if that is enabled in the build.

It also fixes the non-functionality of delete -- and all other keystrokes -- for editing the title of a clip in a right channel of a stereo track with nonaligned clips.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1864,2021-10-08T08:44:52Z,2021-10-08T12:35:09Z,DavidBailes,0,0,1,53,1,1,1,[],,0,13817.0,0,0,0,0,92494768.720045,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/1863

Now that there are clip names, they should be added to messages sent to screen readers.
This commit adds the clip names to the messages sent by various existing clip commands.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [x ] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1854,2021-10-07T10:45:19Z,2021-10-08T12:32:20Z,DavidBailes,0,0,1,16,2,1,1,[],,0,92822.0,0,0,0,0,92494938.278455,,0,1,0,False,[],Thanks for the i18n-hints.,Thanks for the i18n-hints.,"Resolves: https://github.com/audacity/audacity/issues/1838

Now that when a label track is the focus tab and shift+tab only ""select"" a label, rather than opening it for editing in a custom text box which is not accessible for screen readers, it's useful for the name of the label to be read.

Straightforward fix.
Also added i18n-hint in TransportMenus.cpp where there is the same message for screen readers.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x ] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] The title of the pull request describes an issue it addresses
- [x ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x ] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1,2015-03-28T16:12:50Z,2015-03-28T16:13:55Z,JamesCrook,0,0,2,3,1,0,0,[],,0,206072820.0,0,0,0,0,92559289.55979,,0,2,0,False,[],,,,
1849,2021-10-06T23:38:39Z,2021-10-07T08:17:57Z,Gootector,1,0,1,4,1,1,1,[],31183.0,0,31183.0,0,0,0,0,92596578.085861,,0,1,0,False,['LWinterberg'],Thank you!,,"Update pl.po

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1843,2021-10-06T12:51:30Z,2021-10-06T12:56:35Z,Paul-Licameli,0,0,1,2,1,1,1,[],,0,376.0,0,0,0,0,92666215.658017,,1,1,0,False,[],,,"Resolves: #1803 

Make the shortcut key for multi-tool again f6, as in 3.0.3 and ""forever"" before that.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1841,2021-10-06T12:08:37Z,2021-10-06T14:09:55Z,crsib,7,14,1,75,5,3,1,[],4203.0,0,7282.0,1,0,0,0,92661883.02804,,0,1,1,False,"['Paul-Licameli', 'crsib']","Should you resize the splash window taller now?

<img width=""1052"" alt=""Screen Shot 2021-10-06 at 9 15 48 AM"" src=""https://user-images.githubusercontent.com/11670369/136209983-2e70ba02-72ed-406e-9fba-83c50dbd1f02.png"">
 > Should you resize the splash window taller now?

I think not: 
https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png

 > > Should you resize the splash window taller now?
> 
> I think not: https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png



> > Should you resize the splash window taller now?
> 
> I think not: https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png

> Why was my screenshot unlike yours?  I still see ""Get official released..."" etc above the image.

""Get official release"" is shown when BUILD_LEVEL is not 2. So it is not the case for real-world users > > > Should you resize the splash window taller now?
> > 
> > 
> > I think not: https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png
> 
> > > Should you resize the splash window taller now?
> > 
> > 
> > I think not: https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png
> 
> > Why was my screenshot unlike yours?  I still see ""Get official released..."" etc above the image.
> 
> ""Get official release"" is shown when BUILD_LEVEL is not 2. So it is not the case for real-world users

You edited my comment?  Well I understand now.
 > > > > Should you resize the splash window taller now?
> > > 
> > > 
> > > I think not: https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png
> > 
> > 
> > > > Should you resize the splash window taller now?
> > > 
> > > 
> > > I think not: https://crsib-screenshots.s3.amazonaws.com/202110061451-hz94k.png
> > 
> > 
> > > Why was my screenshot unlike yours?  I still see ""Get official released..."" etc above the image.
> > 
> > 
> > ""Get official release"" is shown when BUILD_LEVEL is not 2. So it is not the case for real-world users
> 
> You edited my comment? Well I understand now.

Sorry, got confused by UI :(( You may rebase and merge, after addressing Leo's question if that is needed (I can't judge that).
 I will merge now I think. The image and the link will change anywayJust adding a space is the only real must-fix here
","Just adding a space is the only real must-fix here
","Resolves: #1813

The ""What's new"" section will be shown only if `SHOW_WHATS_NEW_SECTION` is passed.

The update dialog is populated dynamically from the `latest.xml` contents.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Do we want to link to the youtube video directly, or link to something on audacityteam.org which 301-redirects to the appropriate video? Doing the latter would allow us to replace the video in case of errors in the video, or us/YouTube deleting the video accidentally.  Down-cased member name would be more consistent with naming conventions.  I read the constructor and thought it was inheriting a base class
 Well, we will change the link for sure. I wasn't aware that WP allows 301 redirects easily (and I'm still not sure, if it is possible) Will fix If you can create such page - please do!)
 Are these lines really needed or do the wxWidgets classes clean them up?  But they are harmless even if unnecessary.
 I see, you reclaim memory file system resources earlier this way.
 They surely recommend calling `RemoveFile`. I prefer to have it all cleaned up. ""replaced"" Space after ""Audacity"" ?
 I discovered by stepping through that the second call to SetPage(), below at line 220, is redundant and could be deleted.
 Build without HAS_WHATS_NEW (what defaults when someone builds from scratch) and observe.  That missing space should be fixed.
 Fixed Fixed"
1836,2021-10-05T18:11:10Z,2021-10-06T12:11:17Z,Paul-Licameli,0,0,3,263,7,1,1,[],,0,64817.0,0,0,0,0,92668995.181804,,1,3,0,False,[],,,"Resolves: #1825

Change default settings for scale type to Mel, top of scale to 20000 Hz, window size to 1024, and zero padding to 2.

Also cleaning up a lot of preference usage in Spectrogram settings to avoid repetition of literals for paths and defaults.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
798,2021-04-08T15:14:41Z,2021-10-05T15:10:00Z,pwithnall,0,4,1,2,1,3,1,[],,0,15566366.0,0,0,0,0,92730037.122629,,0,1,0,False,[],"The term ""project license"" was was a little ambiguous, but now this has been cleared up in ximion/appstream#313 I agree that we should refer specifically to the license of the software, which is indeed `GPL-2.0`.","The term ""project license"" was was a little ambiguous, but now this has been cleared up in ximion/appstream#313 I agree that we should refer specifically to the license of the software, which is indeed `GPL-2.0`.","The project license is for the project as a whole, and typically refers to the license for the code (which is GPL-2.0).

In SPDX, the `and` operator means that the conditions of both licenses must be adhered to, so the appdata file was previously essentially saying “all code and documentation is subject to a restrictive conjugation of both GPL-2.0 and CC-BY-SA-3.0”. `CC-BY-SA-3.0` is not an FSF or OSI approved license, which resulted in gnome-software interpreting this SPDX phrase as proprietary (see https://gitlab.gnome.org/GNOME/gnome-software/-/issues/1200).

Subject to clarification in the appstream spec (https://github.com/ximion/appstream/issues/312), simplify the project license to reflect the top-level code license only.
","Is the documentation packaged with this software? Yes, it is packaged with the binaries. > http://github.com/audacity/audacity/pull/798#discussion_r721917366:
> Yes, it is packaged with the binaries.

Thus, why was this merged? Because https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-project_license says: 

>  It is not recommended to include the license for accompanying documentation (for example) in project_license"
1035,2021-06-20T10:42:29Z,2021-10-05T15:15:53Z,SpPap,0,0,2,6,1,3,3,[],,0,9261204.0,0,0,0,0,92744331.280059,,0,2,0,False,[],Everything looks good here.,Everything looks good here.,"Made minor grammar changes in README.md
",
1802,2021-10-01T13:35:29Z,2021-10-05T09:42:16Z,crsib,0,2,1,285,3,2,1,[],,0,331610.0,0,0,0,0,92764345.622863,,0,1,0,False,[],"One suggestion, to delete more stuff that we don't need any more.
","One suggestion, to delete more stuff that we don't need any more.
","Resolves: #1460

This PR introduces a different approach to estimating the SampleBlock size on disk. It does not account for the SQLite3 internal structures size so well, but the difference is relatively negligible. 

We use this estimation to decide if we need to compact the database on disk, as we do not allow database vacuuming (for performance reasons?). The performance of the heuristic can be further improved, as `used_blocks`/`total_blocks` should work just fine. However, this would require more changes to the code.

`ProjectFileIO::GetTotalUsage()` and `ProjectFileIO::GetCurrentUsage()` are also used in now disabled compaction dialog. However using `GetTotalUsage()` was probably not the idea anyway (because it never accounted for the project and autosave tables). `GetCurrentUsage()` still gives a very good estimate of how much disk space is used.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","The functions get2, get4, get_varint become unused and might be deleted. Good catch!"
1817,2021-10-04T16:51:06Z,2021-10-05T00:19:50Z,crsib,0,0,1,5421,8,1,1,[],,0,60630.0,0,0,0,0,92764390.205793,,0,1,0,False,[],,,"
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1824,2021-10-05T09:21:05Z,2021-10-05T09:23:14Z,crsib,0,0,4,37,2,0,0,[],,0,133.0,0,0,0,0,92765488.377327,,0,4,0,False,[],,,"Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1669,2021-09-13T01:06:53Z,2021-10-04T20:48:49Z,Paul-Licameli,0,0,9,790,39,1,1,[],,0,1885321.0,0,0,0,0,92810752.901959,,1,9,0,False,[],,,"Resolves: #1593

Extend journalling so that context menu commands can be recorded and replayed.

Not all context menus can yet be recorded, because that depends on #1633 and others: first a mouse event must be replayed before a journal item is replayed.

But there are examples of context menus without mouse events, such as when pressing the Manage button of an effects dialog.  (Distortion may provide the most interesting examples for testing, with its many built in settings.)

Testing, verify these cases can record and replay:

- Context menu is dismissed with Esc key.
- Item is chosen from a flat context menu.
- Item is chosen from a nested context menu.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1810,2021-10-04T09:57:18Z,2021-10-04T14:13:26Z,crsib,0,0,1,22,2,1,1,[],,0,15370.0,0,0,0,0,92834480.726237,,1,1,0,False,[],,,"<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1799,2021-10-01T11:29:42Z,2021-10-04T14:30:41Z,crsib,0,3,1,46,3,2,1,[],,0,270061.0,0,0,0,0,92833445.853551,,0,1,1,False,[],,,"This change ensures that page size will be 64k even if system SQLite3 was used (mostly relevant for Linux)

Resolves: #1459

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","I haven't seen this technique before... not SELECT * ? `SELECT 1 ...` means that the engine doesn't have to read any data. This is the fastest possible query in this case because we only care that the `project` table has a row in it. ""too""
"
1812,2021-10-04T12:06:47Z,2021-10-04T13:32:19Z,crsib,0,0,1,5,1,1,1,[],,0,5136.0,0,0,0,0,92836945.99853,,0,1,0,False,[],,,"Resolves: #1811

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1808,2021-10-04T04:28:33Z,2021-10-04T09:30:22Z,Paul-Licameli,0,0,6,430,15,1,1,[],,0,18113.0,0,0,0,0,92851465.097139,,0,6,0,False,[],,,"Resolves: #1704 

Start looping play, then adjust the bounds of the selection -- the looping play will respond to those changes!

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1766,2021-09-28T03:58:05Z,2021-10-03T18:02:34Z,Paul-Licameli,0,0,3,467,8,1,1,[],,0,482797.0,0,0,0,0,92907009.099412,,0,3,0,False,[],,,"Resolves: #1702
Resolves: #1703
Resolves: #1568
Resolves: #1566

Reimplement the ""cut preview"" feature (the ""C"" shortcut key, also ctrl+click on Play button) less special-casely by using another subclass of PlaybackPolicy.  It means cut preview will also interact nicely with the time track and respond like other
playback to changes of mute, solo, gain, and pan controls.

No more temporary tracks in the implementation.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1795,2021-09-30T13:38:13Z,2021-10-01T11:57:13Z,shoogle,0,0,1,8,2,1,1,[],,0,88882.0,0,0,0,0,93093316.100799,,0,1,0,False,[],,,"The author statement appears to be from https://github.com/xiph/vorbis-tools/blob/e59564c52837cfd2eba61b398f0b1bd16f1003eb/oggenc/oggenc.c#L6-L9 but we can't see any code used from that file. In any case, Audacity's files have been almost completely rewritten since the statement was added.

A previous version of Audacity's ExportOGG.cpp lacking this statement is available at https://github.com/audacity/audacity-from-svn-5GB/blob/master/audacity-src/branches/audacity-0_9-branch/audacity-old/ExportOGG.cpp",
1797,2021-09-30T18:19:39Z,2021-10-01T14:10:53Z,crsib,1,2,2,164,9,2,1,[],65334.0,0,71479.0,0,0,0,0,93093835.561192,,0,2,1,False,['imciner2'],"Yes, thanks for changing that!Thanks for delaying `findlib` bundling to the packaging step!",Thanks for delaying `findlib` bundling to the packaging step!,"Resolves: #1201 (FFmpeg failed to load because of `libcairo` being packaged)

Resolves a recent crash on Arch/Manjaro due to a conflict between bundled `gmodule`  and system `glib2`. 

The PR implements an approach, used by MuseScore, that allows defining a set of libraries that we prefer to be system.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Does this default to `audacity_package_appimage=yes`? If so, why is it defaulting the build chain to assuming the appimage is the build instead of making the appimage build opt-in to this (which would require far fewer changes by downstream packagers)? It's one change for packagers :)

But I agree that `findlib` shouldn't get built by default, or perhaps it could be built by default but not installed to `bin`? My preference would be for it to get moved to `bin` in [package_appimage.cmake](https://github.com/audacity/audacity/blob/de2213ea2c794a294c1f242a75d5295512d9a73c/linux/package_appimage.cmake#L15-L17), which only runs if CPack is called, so no new CMake options would be required. This means somebody can compile Audacity and later decide to build the AppImage without having to reconfigure."
1787,2021-09-30T11:08:59Z,2021-10-01T11:35:50Z,crsib,0,4,2,51,3,2,1,[],,0,88015.0,0,0,0,0,93103139.716028,,0,2,0,False,[],Two suggestions,Two suggestions,"Fixes a problematic `get_package_interface` which was modifying a global list `LIBRARIES`.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","To perfect the fix, add 
set(package_libraries)
Before the loop... just in case that variable was assigned before in parent scope. “Interface”
 Will do! Fixed"
1623,2021-09-05T20:00:45Z,2021-09-24T18:03:22Z,crsib,6,30,4,47920,184,2,0,[],1493857.0,0,2209643.0,0,0,0,0,93109606.237657,,1,4,0,False,"['petersampsonaudacity', 'Paul-Licameli', 'JamesCrook']","One more push of commits, and some in-line comments and questions, and this completes my review!

Act on my suggestions as you wish, force push once more, and I will make one quick check of what you did and likely approve this and move on!
 I missed the infinite loops with GetNextCodec() and GetNextOutputFormat()!  I see how you corrected them.  Was it testing that discovered it?
 I re-approve the latest force-push!

Only small suggestions:

ExportFFmpeg::InitCodecs should be a private member function, to prove the safety of the new pointer dereference in it just from examining the class in isolation.

The copy and move assignments of AVDictionary now have assertions at the top -- which ought to be stated, at least informally, in the header files of the class as preconditions.

And that's all!

 🥳 🎉 ⚡ 🔥 🚀 🍻  Might this also resolve #1794 ? Awesome!Raising questions about some assignments of fields of the format context that were not preserved.
","Raising questions about some assignments of fields of the format context that were not preserved.
","Resolves #398
Resolves #1034 
Resolves #1170 
Resolves #1201
Resolves #1331 
Resolves #1433
Resolves #1466

Supporting multiple FFmpeg versions is tricky, yet important for Audacity, as we could not distribute the correct FFmpeg version with the program itself. This leads to a problem, where updating FFmpeg can be problematic. This is especially true, as a new major version is soon to be released.

The main problem with FFmpeg is that it exposes several structures and expects library users to fill them up during the configuration. These structures can change between major version bumps, while the API is mostly stable. This is unlike other C libraries, where structure fields are accessed using the library-provided functions.

This PR:

* Allows generating a single header file for a specific FFmpeg version. Surprisingly it had required a large subset of C preprocessors to be implemented.
* Provides wrappers around used FFmpeg structures. The wrappers are used as RAII objects where applicable. The wrappers are implemented in `inl` files which are later included in C++ files after the correct FFmpeg header. I.e. currently each wrapper is compiled twice. Wrappers rarely have FFmpeg version-dependent code. 
* Fixes few incompatibilities between FFmpeg versions.
* Sample format conversions from FFmpeg are templatazied, all formats are now supported. The reverse process was not modified

I have tried to keep changes in ImportFFmpeg and ExportFFmpeg small and trivial. In the future, we may want to reimplement them as well.

Currently, avformat-55 and avformat-58 are supported. I don't see much reason to support 56 and 57. When 59 will be released (and current dev branches are 59) it will be added to the list, this should be a trivial task.

Builds were tested against:

* 2.2.2, 4.3.1, and 4.4. Surprisingly, 4.4 support was different (and the most difficult!) from 4.3.1 while the major version stayed the same. FFmpeg 4.4 was downloaded from the ""official page"".
* The system library on Manjaro (4.2.2)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [ ] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
","This change of CMakeLists.txt should be in the previous commit ""Use lib-ffmpeg-support"" Should that be `libavformat*.so.*` ?  Previous code had two *.  But maybe not, I see the old GetLibAVFormatName did not have a version number there.
 These string literals for file globs are repeated in this file.  Better to remove repetition. I strongly disagree with this change. FFmpeg behavior may differ if `den=0`. For example, it means that the decoder is responsible for setting up time bases based on stream content. But I agree that it is probably better to initialize the fields explicitly, regardless that this is a DTO for the C structure, I think I would just explicitly delete the move constructor/assignment here, as well as in most of the other places  It generally makes no sense as this is an abstract class and is leftover from the moment, when I was ""generating"" wrappers This was causing me issues on Windows, but looks like that was a different bug! Thank you for noticing! Good catch, thank you! Well defined values should be there I think if this struct is ever default constructed.  You decide which values. https://ffmpeg.org/doxygen/trunk/group__lavc__core.html#gaf4daa92361efb3523ef5afeb0b54077f

>Do not use this function. Use avcodec_free_context() to destroy a codec context (either open or closed). Opening and closing a codec context multiple times is not supported anymore – use multiple codec contexts instead.
 Okay, it looked to me as if some resource reclamation done in the previous code was lost in this rewrite.

But it should be asked, does the documentation you cite apply to all versions of FFmpeg that we will support, or only to the latest?

If only the latest, then there may be some work to do to get it right for both.  Maybe then one .inl file won't be enough to compile the correct overrides for AVCodecContextWrapperImpl

 I took the best of both worlds in the end :-)

If `avcodec_free_context` is unavailable - I close the codec. The corresponding code will be pushed soon  I will move it down to the case where av_free is used. There is no need for this call when av_packet_free is used for sure Ooopsie indeed :( Thank you! Not really related to this PR, but let's pick it anyway Well, it would be destroyed last anyway, as the member is first. But const - that is what I like a lot :) Not in scope of PR, but good. Now that I've started thinking of it - both variants are incorrect. Right-shift is UB in C++ :( 

Yours is more correct, though. I will rewrite it using a similar approach to our regular sample format conversions, without dithering (this can be fixed later!)  I think it should be (value - 0x80) as well, I'll fix it that way This looks like a more correct implementation. However, FFmpeg itself doesn't bother about flushing at all. We did it only once (and I was trying to keep as much of the original behavior as possible). 

I think codecs with AV_CODEC_CAP_DELAY are not common at all and the best implementation should check for it. Very quick search and I found only APE decoder to set this flag, but I think we do not support APE. Yes, but new API is not available in 2.2.2 and if we end up with FFmpeg version without avcodec_decode_audio4 - it can be implemented using new API A fix to OffsetPacket was required after this change. I'm not sure if this code is really safe, though https://en.cppreference.com/w/cpp/language/operator_arithmetic

Strictly speaking, right shift of signed and negative values has “implementation defined” behavior, which is not the much worse category of UB. It was late night when I wrote these code changes.  Something needed doing here but I didn’t get it all right. But note the important thing that the handle should have been constructed only after the possible reloading of libraries, right? Yeah, same for me when I was writing the original code :-)

Thank you a lot for pointing it out, this was a really stupid error, not exposed in my testing Setting of codec_id, codec_type, and codec_tag did not survive the rewrite.  Did you decide they were unimportant steps or is this an omission?
 here too, setting of codec_tag was commented out.  Omission or is it unnecessary?
 Again assignment to codec_id is lost.  Instead we construct codec.  Sure of this?  Does codec get reassigned before it is ever used?
 Should the local codecID be reassigned here instead?"
1785,2021-09-30T10:16:33Z,2021-09-30T10:51:11Z,LWinterberg,0,0,1,916,1,1,1,[],,0,2087.0,0,0,0,0,93192215.582075,,0,1,0,False,[],Epic!,Epic!,"Updates the changelog for version 3.0.2-3.0.5

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ ] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1672,2021-09-13T11:31:37Z,2021-09-29T10:51:00Z,SteveDaulton,2,0,1,334,6,1,1,[],868740.0,0,1379972.0,0,0,0,0,93278626.817201,,1,1,0,False,"['Paul-Licameli', 'SteveDaulton']","I see an approval, but I think a few unnecessary changes to non-source code files are in here.
 > I see an approval, but I think a few unnecessary changes to non-source code files are in here.

This upstream change resolves the problem. What would be the benefit of diverging away from upstream?",,"Apply upstream update to Nyquist library.
Fixes special case where the time warp function maps positive output times
to negative input times (negative input times are now handled by filling
with zeros).
Fixes improper handling of Nyquist's logical stop times and terminate times
which have to get mapped through the time warp function to the output.

Resolves: *(direct link to the issue)*
https://github.com/audacity/audacity/issues/1642

*(short description of the changes and the motivation to make the changes)*
Applied upstream update to Nyquist library

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ x] The title of the pull request describes an issue it addresses
- [ x] If changes are extensive, then there is a sequence of easily reviewable commits
- [ x] Each commit's message describes its purpose and effects
- [ x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [ x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1664,2021-09-11T16:19:28Z,2021-09-28T00:02:57Z,Paul-Licameli,0,0,19,1893,15,1,1,[],,0,1410225.0,0,0,0,0,93403903.185876,,0,19,0,False,[],,,"Resolves: #1658 

Depends on: #1638 

More refactoring of AudioIO.cpp and PlaybackSchedule.cpp, so that there is less of the logic for special playback cases like looping and scrubbing in those files.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1688,2021-09-19T20:03:37Z,2021-09-21T10:53:37Z,myzhang1029,0,0,1,2,1,1,1,[],,0,152317.0,0,0,0,0,93957166.920535,,1,1,0,False,[],,,"The include file in `src/tracks/playabletrack/wavetrack/ui/WaveTrackAffordanceControls.cpp` points to
`../../../../images/Cursors.h`, which is `src/images/Cursors.h`, but that file actually resides in `images/Cursors.h`.
Feel free to tell me I'm wrong.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/) (Do I need one since this is a trivial issue?)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1674,2021-09-14T11:19:13Z,2021-09-20T14:47:05Z,mikaoj,2,0,1,2,1,1,1,[],21612.0,0,530873.0,0,0,0,0,94042075.410076,,1,1,0,False,"['petersampsonaudacity', 'LWinterberg']","The same is true on Windows I know - (and on Linux, I believe).

I logged this bug back in July:
 Many parts of Dark theme Audacity are not really ""dark"" #1296  I cannot believe that the fix for this was just this. Awesome find!",,"Resolves: https://github.com/audacity/audacity/issues/404

A bunch of UI components doesn't support dark mode on macOS. Like window frame, scrollbars, dropdowns, settings, etc.
This fixes it by opting in for dark mode support.
[NSRequiresAquaSystemAppearance](https://developer.apple.com/documentation/appkit/nsappearancecustomization/choosing_a_specific_appearance_for_your_macos_app) should be set to false to support dark mode when targeting macOS before 10.14. 

This is how Audacity looks today with dark mode enabled on macOS
<img width=""1792"" alt=""audacity_currently"" src=""https://user-images.githubusercontent.com/4034956/133247667-f76e530f-ecc0-4fcb-be6a-d3b6e1aa907f.png"">

And this is how it looks with this fix
<img width=""1792"" alt=""audacity_dark_mode"" src=""https://user-images.githubusercontent.com/4034956/133247743-d04cb1c3-faa5-4396-bd1e-b6771198e87d.png"">


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1684,2021-09-16T20:24:29Z,2021-09-20T09:09:11Z,Gootector,0,0,1,6,1,1,1,[],,0,305083.0,0,0,0,0,94062349.417981,,0,1,0,False,[],,,"Update pl.po
2 fixes.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1394,2021-08-01T19:38:45Z,2021-09-13T12:02:58Z,malevolentstrix,8,16,1,108,4,2,1,[],54760.0,1,4110462.0,2,0,0,0,94234116.52017,,0,1,0,False,"['petersampsonaudacity', 'malevolentstrix', 'Penikov']","Testing on W10 with MalevolentStrix's latest build https://github.com/audacity/audacity/actions/runs/1089787526

This now works fine blocking both:
a) typing C:\ in any of the six directory fields in Directories Preferences
b) using the Browse button to set them to C:\

@crsib  - I think this could be pulled into master (may need a code review - in addition to this blackbox testing)


 These are the error messages shown when tried to set the preferences via manual path entry(_**path**  does not have write permissions_ will also be shown as the next line to every message)
_'Open' directory cannot be set.
'Save' directory cannot be set.
'Import' directory cannot be set.
'Export' directory cannot be set.
'Macro Output' directory cannot be set._
![2021-09-04_19-33](https://user-images.githubusercontent.com/73242397/132097162-2a7ec7af-77ac-445f-9aab-2a1562034d46.png)

If user sets the directory via the Browse button ""_Cannot set preference_"" as earlier will be shown


 An option to create the directory if it does not exist has also been added.
![2021-09-06_13-32](https://user-images.githubusercontent.com/73242397/132182213-7f088c14-9e62-464b-8b0a-82110e32cd0a.png)

And an error message if the directory creation failed maybe if the directory to be made is in an Unwritable Location.

![2021-09-06_13-32_1](https://user-images.githubusercontent.com/73242397/132182241-9104ac11-9e77-4806-a79e-3f3febc005a9.png)
 Testing the Directories Prefs on W10 with latest master alpha build: audacity-win-3.1.0-alpha-20210913+9ecd194-64bit
a) a typed C:\    is trapped with an error message
b) a typed C:      is trapped with the same error message

c) A typed C      is not error trapped - it asks f you want to create such a directory, but doesn't do so.  Instead the next Save or Export it uses the last-used location (this is safe - but the user should not be asked to create a directory that does not get created.
![image](https://user-images.githubusercontent.com/50205984/133106116-e4e4a2d8-60d0-4148-bf0b-d98e61484910.png)
Going back to Directories prefs later shows that the ""C"" is still erroneously set.

This is a good improvement with b now fixed as well as use-case a

C would appear to be a different bug (which I have been discussing with @Penikov on Discord).  It's not just what would look like a drive name like ""C"" that fails - you get the same results if you try to set directories to say ""QWERTY""


**I cannot test on Mac as the recent Mac build for this failed.** Most ""sensible"" users would, of course, use the Browse button to locate a pre-existing directory or create a new directory with the browse. So either:
a) Audacity should check that a typed location exists and is valid, or
b) Audacity should **_not_** allow the user to manually type in those directories fields. I have logged the residual (Use-case c here) as a new bug in it's own right.
Directories preferences fails to handle non-existent text locations properly #1676 

@Penikov  Having this _(long-standing)_ residual logged separately should enable this bug associated with this PR to be closed as fixed. Thank you, Peter! Shall I close that bug related to this PR? ) > Thank you, Peter! Shall I close that bug related to this PR? 

@Penikov - yes I think that this is good to go, _sorry for not replying sooner_

This passes black-box testing on W10 Thank you for offering this bug fix.

Fixes are needed for good translation of the strings, and reducing repetitious code.
 This looks very good, but still I ask another round of minor string corrections.
","This passes black-box testing on W10 Thank you for offering this bug fix.

Fixes are needed for good translation of the strings, and reducing repetitious code.
 This looks very good, but still I ask another round of minor string corrections.
","Resolves: https://bugzilla.audacityteam.org/show_bug.cgi?id=2740

Blocks all the possibilities of setting the Directory Preference to locations without write permissions via the Browse button or manually typing as pressing the OK button

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [X] I signed [CLA](https://www.audacityteam.org/cla/)
- [X] I made sure the code compiles on my machine
- [X] I made sure there are no unnecessary changes in the code
- [X] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [X] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","To make the translations work with the grammars of all languages, it may be better that you just format two complete sentences.  Let the supplied messages all end in English with a full stop.   Compute `XO(""%s does not have write permissions"").Format(path)` and then use + to join them, with a newline.


 message is user-visible.  It should have type TranslatableString.  And you will notice, this change of type will intentionally break compilation of the rest, forcing you to put in the missing `XO()` macro.  That macro is detected by the `msgfmt` program which scans the source code and generates `locale/audacity.pot`.
 These and other strings need macro `XO` and changed punctuation.  When that is fixed, please list in the pull request comment what all the new strings in XO are.  Someone besides me might want to specify different words.
 This common line is for Open, Save, Import, Export, and Macro output directories.  Each should have a different informative string.  Make a table of strings and index into it with `id`.  Make each string a full sentence, even though that is repetitious and only changes one word each time.  Don't make one string that you substitute a word into -- that may not translate well into all languages.
 ""Preference for"" are unnecessary words.
 ""at least"" Here are those disctinct strings I asked for above.  Again ""Preference for"" is unnecessary words.
 There is repetitious code here.  Can you capture the commonality in the body of a loop and just vary each time the path you are testing and the message string?

C++11 and later will let you write this neat loop:

```
for (auto &string : { openPathString, SavePathString, /* etc */ } ) {
   ...
}
```

The thing in {} is a `std::initializer_list<wxString>`
 `XO(""%s"").Format(message)` could simplify to `message` Add a comment about the new argument:  that it is explanation in case of failure
 The messages to WritableLocationCheck should end with a full stop `.` Here you did use a correct full stop. ""Save,"" `const auto & message = *(messagesPreference.begin() + id);` might come before the if-else so you can eliminate a repeated exppression. Indent less
 Omit `!`
"
1675,2021-09-14T13:01:47Z,2021-09-16T12:19:57Z,shoogle,1,4,2,33,4,2,1,[],251685.0,0,251685.0,0,0,0,0,94315111.682931,,0,2,0,False,['Penikov'],"Works fine with appimage

![изображение](https://user-images.githubusercontent.com/25851359/133771596-7e8e2857-3471-4fbe-bd33-5a66579a5ad0.png)
",,"Resolves: #1382


1. Ensure INSTALL_PREFIX is set correctly.
    - The CMake variable INSTALL_PREFIX is now correctly passed into the program.
2. Make Audacity portable.
    - Audacity now checks for resources at a location relative to the executable instead of a fixed location each time.","Needed for [audacity_config.h.in](https://github.com/audacity/audacity/blob/c6ef82360a66d6fde071b546a44b566df4fadc3f/src/audacity_config.h.in#L36). Understood:  the .in file doesn't change but was assuming assignment of a Cmake variable had happened, when it had not. So this assignment is lifted to a higher scope and done earlier.  Got it.
 LGTM
"
1678,2021-09-15T06:13:12Z,2021-09-16T22:09:10Z,Paul-Licameli,3,6,3,145,8,2,1,[],85409.0,0,143810.0,0,0,0,0,94361101.958291,,0,3,0,False,['Paul-Licameli'],"I have changed the function name and also check other channels.

I still do not understand why event notifications should be used here.  You used them so that changed of track selection state could be detected by TextEditHelper, and that was proper for avoidance of dependency cycles (TrackList should not depend on the code that reacts to the event).  I don't see a problem with cycles in this commit that needs this technique to break them.
 The problem of pushing the undo history stack isn't solved, so I mark this as a draft until I do that.
 I don't recall why I thought undo history was sometimes not pushed -- maybe I was confused.

But it can be unnecessarily pushed -- if you just hit Enter with no changes to the text.  I changed that case.  It should affect behavior of clicking on the name as well as the new context menu item.

Esc key works as you would expect, discarding any changes you may have made without hitting Enter.

",,"Resolves: #1660

This makes #998 and #1614 more complete

Add an item to the wave clip context menu for renaming.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
","Suggest adding `WaveTrackAffordanceControls::StartEditClipNameAt(AudacityProject&, double time)`  instead, or use events I don't understand the suggestion to use events.

The new test argument makes the function very general, but maybe you think it is too general.  If you don't, you might object that the generalized function should at least be renamed, and I would agree.

 It's not about generality, with events some checking routines could be avoided, that's one of the options. Yes, function name now became at bit controversial.  Also, right channel does not always have affordance cell, may be in that case call should be redirected to the view of the leader track? > Also, right channel does not always have affordance cell, may be in that case call should be redirected to the view of the leader track?

That is a good point. If events are used, which object would emit the event and which would react to it?"
1650,2021-09-09T13:25:52Z,2021-09-16T22:09:40Z,Paul-Licameli,3,0,1,6,1,1,1,[],62221.0,0,636240.0,0,0,0,0,94361113.70444,,0,1,0,False,"['petersampsonaudacity', 'SteveDaulton', 'Paul-Licameli']","@Paul-Licameli  - surely the context menu that you get in the gray space between clips should be the same as the one you get when you right-click on a clip.  

The commands are not acting on the current mouse position, but rather on the selection or cursor position - thus the full set of commands is surely appropriate in both use-cases. Along the same lines as Peter's comment, it seems that the ""clip context menu"" actually functions as a ""track panel context menu"", but with ""hot zones"" where there are clips.

If I have multiple tracks with multiple clips in each, I would expect a ""**clip** context menu"" to  relate to the specific clip from which it was launched, just as a ""**track** context menus"" (track dropdown menu) relates to the track from which it was launched. That's not what happens - I can make a selection in any clip of any track, open the ""clip context menu"" from any clip in any track, and act on the selected clip.

What would  happen if ""Clip name"" were added to the clip context menu? Would that act on the clip which was right clicked, or on the clip(s) that are selected?

Surely the whole point of a ""context menu"" is the context from which it was launched. > Along the same lines as Peter's comment, it seems that the ""clip context menu"" actually functions as a ""track panel context menu"", but with ""hot zones"" where there are clips.
> 
> If I have multiple tracks with multiple clips in each, I would expect a ""**clip** context menu"" to relate to the specific clip from which it was launched, just as a ""**track** context menus"" (track dropdown menu) relates to the track from which it was launched. That's not what happens - I can make a selection in any clip of any track, open the ""clip context menu"" from any clip in any track, and act on the selected clip.
> 
> What would happen if ""Clip name"" were added to the clip context menu? Would that act on the clip which was right clicked, or on the clip(s) that are selected?
> 
> Surely the whole point of a ""context menu"" is the context from which it was launched.

Yep, to all that.  The notion of selected or focused clip doesn’t really exist.  I think designers would like you to copy the clip as a unit, including the clip name.  It doesn’t work this way yet.

The design did ask for a renaming item in this clip context menu.  This does not exist yet because the UI for clip renaming, also reachable with left clicks in the name, is not past code review yet.",,"These changes are very simple, after previous context menu work.

Right-click between clips brings up a small context menu with Paste and Mute/Unmute.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1677,2021-09-15T03:18:33Z,2021-09-15T21:13:07Z,Paul-Licameli,0,0,1,5,2,1,1,[],,0,64479.0,0,0,0,0,94450913.706509,,0,1,0,False,[],,,"Resolves: #1644 

The Set Clip macro command now can change a clip name too

The command is also accessible in menus under Extra > Scriptables I (You must first enable the Extra menus in the Interface preferences)

@LWinterberg See this manual page needing update https://manual.audacityteam.org/man/extra_menu_scriptables_i.html#set_clip

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1652,2021-09-09T15:00:27Z,2021-09-10T08:43:06Z,Paul-Licameli,1,0,1,8,1,1,1,[],101026.0,0,101026.0,0,0,0,0,94890652.983597,,3,1,0,False,['thynus'],Thanks Paul!,,"Corrections only in building instructions for developers.  This does not affect the build.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1639,2021-09-08T05:57:42Z,2021-09-09T10:36:08Z,Paul-Licameli,0,0,1,4,4,1,1,[],,0,103113.0,0,0,0,0,95007532.638224,,1,1,0,False,[],,,"... and some other cases.

Wherever Audacity simulates button press events, set the event object to be the
button, so that WindowEventSerialization() in JournalEvents.cpp can determine
a pathname for the window associated with the event.

The change in KeyboardCapture is enough for the default buttons of dialogs. The
other changes are necessary but not sufficient for fixing journalling of some of
Audacity's custom widgets, on any operating system.

Resolves: #1631

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1636,2021-09-07T20:03:50Z,2021-09-08T10:59:40Z,nd-bl,0,0,1,2,1,1,1,[],,0,53750.0,0,0,0,0,95092527.655872,,0,1,0,False,[],A simple one liner.  Though finding the fix may not have been easy.  Thank you  ,A simple one liner.  Though finding the fix may not have been easy.  Thank you  ,"Resolves: *(https://github.com/audacity/audacity/issues/1628)*

*VST time info samplePos should be a value in number of samples, not in seconds*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] The title of the pull request describes an issue it addresses
- [x] If changes are extensive, then there is a sequence of easily reviewable commits
- [x] Each commit's message describes its purpose and effects
- [x] There are no behavior changes unnecessary for the stated purpose of the PR

Recommended:
- [x] Each commit compiles and runs on my machine without known undesirable changes of behavior
",
1594,2021-09-01T04:31:52Z,2021-09-06T14:33:12Z,Paul-Licameli,0,2,6,1009,16,2,1,[],,0,468084.0,0,0,0,0,95252512.312109,,0,6,0,False,[],,,"Resolves: #1580

Some refactoring tasks in AudioIO, before disentangling the MIDI playback parts

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","static_casts maybe? Yes.

I don't like the type aliases samplePtr and constSamplePtr, for char* and const char*, which often travel together with a sampleFormat telling you how to interpret the data.  Better to put the pointer and the format in a class.  But doing that cleanup, which will eliminate still more casts, is for later.

"
945,2021-05-29T14:58:47Z,2021-09-03T11:47:45Z,Paul-Licameli,3,0,1,11,1,3,2,[],4648.0,0,8369342.0,0,0,0,0,95521640.918202,,3,1,0,False,"['Paul-Licameli', 'shoogle']","The original wording is verbose and not specific about what constitutes ""unnecessary changes.""  I don't want that construed to mean you can't improve comments or readability or modernize the C++ idioms.  So I restate things rather in terms of effects on the program's behavior.
 I like some of the changes but not all. My suggestions are here: https://docs.google.com/document/d/1H3hjFZ58e-wZyt00JoJgI9GXUfOEQ8_pek0jtAK2s1A/edit ""Each commit does “one thing” and the commit message(s) meet these guidelines"" with a link.

I don't like saying ""doing one thing"" because there are many ways you can count ""things,"" and it's not too bad to combine several small things into one reasonably sized commit.

Rather it's important not to combine so many things in one commit that they overwhelm a reviewer.  Yes, subjectivity there too.

But whatever ""things"" are contained in one commit, they are complete things, and complete in the sense I stated:  Each commit is known to build and run without known bad behavior.

Besides aiding review, the splitting of a big change into increments that build and run make possible the bisection of bugs to some part of a large project, if bugs are discovered later.


👎 The original wording is clearer and more friendly.",👎 The original wording is clearer and more friendly.,"... And make the statements concise
",
1504,2021-08-19T03:42:19Z,2021-09-06T14:02:38Z,Paul-Licameli,5,6,11,395,34,3,2,[],21082.0,0,1592424.0,0,0,0,0,95254347.01321,,1,11,0,False,"['Paul-Licameli', 'DavidBailes']","> * There is no existing ""Mute/Unmute Track"" command in toolbar menus.  Alt-Ctrl-U in default bindings mutes all tracks.  I implemented a new command, not in the toolbar menus, for the popup that toggles mute status.   And again, for the (mono or stereo) track that is picked in, ignoring track selection state.

There's already a command to mute/unmute the focussed track in the Track submenu of the Extra menu. > Notes about some details where the issue description differs from this implementation or is underspecified:

> Split Clip will split only the picked clip (whether or not the track is selected), at the pick point. This is unlike the toolbar menu, which splits all selected tracks, at the selection.

I think that there's a problem here trying to implement this stuff before the selection model for 3.1 has been fully specified (Tantacrul said he was working on this.)
A user would expect that a command in a context menu would have the same effect as the command with the same name (and associated shortcut) in the main menus. But that isn't the case with your plan for using the split command in a clip's context menu. This command would act on different clips compared to the command in the main menus - they are in effect two different commands, and so should have different names (and shortcuts).   And if you used the same approach for the cut and copy commands you'd run into similar problems.  > > * There is no existing ""Mute/Unmute Track"" command in toolbar menus.  Alt-Ctrl-U in default bindings mutes all tracks.  I implemented a new command, not in the toolbar menus, for the popup that toggles mute status.   And again, for the (mono or stereo) track that is picked in, ignoring track selection state.
> 
> There's already a command to mute/unmute the focussed track in the Track submenu of the Extra menu.

So there is.  Thank you, I will rewrite that part.
 > > Notes about some details where the issue description differs from this implementation or is underspecified:
> 
> > Split Clip will split only the picked clip (whether or not the track is selected), at the pick point. This is unlike the toolbar menu, which splits all selected tracks, at the selection.
> 
> I think that there's a problem here trying to implement this stuff before the selection model for 3.1 has been fully specified (Tantacrul said he was working on this.)
> A user would expect that a command in a context menu would have the same effect as the command with the same name (and associated shortcut) in the main menus. But that isn't the case with your plan for using the split command in a clip's context menu. This command would act on different clips compared to the command in the main menus - they are in effect two different commands, and so should have different names (and shortcuts). And if you used the same approach for the cut and copy commands you'd run into similar problems.



> > Notes about some details where the issue description differs from this implementation or is underspecified:
> 
> > Split Clip will split only the picked clip (whether or not the track is selected), at the pick point. This is unlike the toolbar menu, which splits all selected tracks, at the selection.
> 
> I think that there's a problem here trying to implement this stuff before the selection model for 3.1 has been fully specified (Tantacrul said he was working on this.)
> A user would expect that a command in a context menu would have the same effect as the command with the same name (and associated shortcut) in the main menus. But that isn't the case with your plan for using the split command in a clip's context menu. This command would act on different clips compared to the command in the main menus - they are in effect two different commands, and so should have different names (and shortcuts). And if you used the same approach for the cut and copy commands you'd run into similar problems.

All very good points to raise, as indeed I am raising them.

The hope was that context menus would be an easy win for 3.1, relatively easy to implement.  But with these doubts about whether the clip menu items will work -- maybe we should commit to only one of the menus.



 There is now one more commit to review.
",,"Resolves: #998
Resolves: #1518

Working context menus for background area and audio clips.

Notes about some details where the issue description differs from this implementation or is underspecified:

* All important words are capitalized, consistent with other menu items (for instance ""Split Clip"")
* Split Clip will split only the picked clip (whether or not the track is selected), at the pick point.  This is unlike the toolbar menu, which splits all selected tracks, at the selection.
* Paste will paste at the pick point, ignoring the selection, unlike the other ways of invoking Paste
* Mute/Unmute Track has Shift+U as its default keystroke.  See Extra > Tracks sub-menu (and see Interface preferences to enable the Extra menu). The popup menu command will do that to the track you pick in, ignoring which tracks are in selected state.
* ""Export Audio..."" rather than ""Export Project"" because that agrees with the toolbar menu and the convention that commands bringing up modal dialogs need ellipsis in the name.
* The clip context menu appears only when clicking on the wave (or spectrogram) areas, not on the drag bar or in voids between clips.
* The accelerator keys appear not necessarily as the defaults in the pictures, of course, but are consistent with whatever keystrokes have been chosen in preferences.
* Context menu items will be grayed out and disabled in the same cases that the corresponding toolbar menus would be.  For instance, adding new tracks is not permitted during recording or playback.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","As far as I can see, the call to dispatcher is deferred, if so it raises questions about captured objects lifetime You are right to raise the question.  And the answer is that the `[&]` capture is safe, because the popup menu, like a modal dialog, has a lifetime limited to the enclosing function.  When the menu is destroyed, the lambdas remembered by all the Bind() calls on in are also destroyed, and all before the function exits.
 Oh, I see now, PopupMenu ""_returns control when the user has dismissed the menu_"", sorry should have check the documentation first. Pointer to the SelectedRegion is safe too i presume? Why would it not be safe too?  All those variables also have lifetimes that include the lambda's lifetime.
 Will this be re-enabled in future? That depends on designers’ choices.  If we ever really want a right click action sensitive to the exact x mouse position, it may be useful.  But that was not a correct interpretation of designers’ wishes in this case."
1588,2021-09-01T02:36:17Z,2021-09-02T18:50:48Z,Paul-Licameli,0,0,3,389,41,1,1,[],,0,144876.0,0,0,0,0,95582657.238921,,2,3,0,False,[],,,"Resolves: #1143 
Depends on: #1587

A library holding the global preferences for project rate and sample format, and defining the per-project holding sample rate.  It depend on lib-audio-devices to decide the default rate.

When wave tracks are separated into a library, that will depend on this for construction of tracks, but will avoid dependency on all of AudioIO.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1602,2021-09-01T23:24:14Z,2021-09-02T18:44:16Z,Paul-Licameli,0,0,1,75,4,1,1,[],,0,69608.0,0,0,0,0,95583049.945662,,2,1,0,False,[],,,"... the dialog won't actually reappear but the same value will be returned to
the program.

These message boxes are special native ones that don't use the wxWidgets event
framework.  Therefore the system for journalling of mouse button presses does
not work with them.  Treat them specially.

A generalized facility added to namespace Journal in case this pattern needs to
be repeated for other actions.

Resolves: #1590
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1587,2021-09-01T01:35:53Z,2021-09-02T18:47:23Z,Paul-Licameli,0,0,3,313,91,1,1,[],,0,148297.0,0,0,0,0,95582861.975356,,2,3,0,False,[],,,"Resolves: #1152 

Depends on PR #1586

Extract a toolkit-neutral library for mapping of screen x coordinates to times, and y coordinates to amplitudes or frequencies

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1586,2021-08-31T17:54:37Z,2021-09-01T10:51:20Z,Paul-Licameli,0,12,10,1271,114,2,1,[],,0,61009.0,1,0,0,0,95697826.535723,,2,10,0,False,[],I do not understand why the size check is in the list of changes and I do not agree with the implementation of the check.,I do not understand why the size check is in the list of changes and I do not agree with the implementation of the check.,"Resolves: #1153 

Platform neutral library defining the AudacityProject object and associated ProjectStatus (which just holds some strings)

There is also some fixing of some possible null pointer dereferences of the global active project -- which might be null on macOS.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I think all dependencies should be private here This seems like a change of behavior that needs to be tested accurately. Why?

Transitive dependencies simplify many other CMakeLists.txt files and the generated graph of dependencies.

I make the exception only for wxBase for certain other reasons.

My intention (although I haven’t yet reimplemented it with all the other build system changes) was that some libraries would use only the wxBase subset, and even be forced to compile with only a subset of that — by predefining on the command line the inclusion guard symbols of the headers I wanted to disallow, such as wx/app.h (in wxBase but using the event loop, so not allowed for platform neutrality)

In that case only, making the wxBase library a private dependency was needed to avoid breaking compilation of higher level things that are allowed to use those headers.
 I'm not sure why this change is a part of this pull request.

Why 100 Mb? Why 100 mb is written that way? 100 * 1024 * 1024 expresses it better.

Why `AbbreviatePath` is used? It is confusing on non Windows platforms and not entirely correct on Windows as well. NTFS is much more complicated than just drive letters.

Also I have strong opinion that disk space/writability errors should allow users to easily change the problematic location, which is already implemeted in Audacity anyway. The current message is unhelpfull, confusing and sometimes even wrong. That is: wxBase was meant to be a CMake target enforcing this restricted view of the wxBase library to the really platform neutral part (no event loop) so I can be sure libraries using it are really neutral. For the sake of the correct dependency graph, I really think that every dependency should be listed explicitly, not implicitly by some other dependency. The linker will not drop such dependencies. The compiler will have to deal with the larger set of include directories. So in the end the dependency graph won't reflect the actual state of the dependencies.

To clarify my case: consider a library, that depends on `lib-project`. It should explicitly list the dependency on `lib-registries-interface` if it uses the library API internally, rather than hide this dependency somewhere in the middle of the graph. This way it will be clear, which library actually depends on `lib-registries-interface`. Ok, I see now why it is a part of the request, I don't agree with implementation still. We should open an issue about improving this error. I simply disagree.  I want my generated graphs to have paths of dependency of A on B, which is good enough, but not a clutter of too many crossing edges making them too difficult to understand.

Please do not insist on this before approving the commit.
 I have not tested it but this only involves mod-script-pipe which I believe could crash without this change in case of macOS with the application still running but not project window open.

The unchecked assumption that GetActiveProject returns non-null is not a safe assumption and I recall removing it in other case.
 You understand the need to cut and paste the code that existed to some other place to break dependency.  I'm not changing the implementation.
 A review of the uses of GetActiveProject() isn't strictly in the scope of the problem of this library extraction.  Still I did it incidentally because I recall other bugs with use of that functon, and I changed the return type to a weak pointer to be sure there not not dangling non-null pointers.

I have really disliked GetActiveProject() and in the past eliminated many uses of it in favor instead of a project reference passed in CommandContext.


 Still GetActiveProject() will require use in a few places where CommandContext is itself constructed.
"
1583,2021-08-31T14:55:13Z,2021-08-31T20:43:01Z,Paul-Licameli,3,0,1,5,1,1,1,[],308.0,0,21637.0,0,0,0,0,95747963.88736,,2,1,0,False,"['Paul-Licameli', 'LWinterberg']","@LWinterberg take note of the small implication for the manual.
 Removed references to this feature from the following pages: 

- [x]  https://alphamanual.audacityteam.org/man/Keyboard_Preferences
- [x] https://alphamanual.audacityteam.org/man/Keyboard_Shortcut_Reference Thank you, gentlemen.
",,"This requires an update to this manual page -- remove the green box near the top: https://manual.audacityteam.org/man/keyboard_shortcut_reference.html

Happened at least on macOS because the easy change of key bindings was
mis-firing in other cases than picks on menu items.

So we just disable that little valued feature.

Disable the easy key rebinding feature

Resolves: #1358

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1495,2021-08-18T01:14:26Z,2021-08-31T11:09:53Z,Paul-Licameli,3,0,8,288,2,1,1,[],42344.0,0,1193497.0,0,0,0,0,95748551.022818,,1,8,0,False,"['SteveDaulton', 'Paul-Licameli']","Could this have a negative impact on performance? Dither is one place that speed is important. Currently there is virtually no difference in time taken to export a long track with dither or without  dither (tested on Linux). > Could this have a negative impact on performance? Dither is one place that speed is important. Currently there is virtually no difference in time taken to export a long track with dither or without dither (tested on Linux).

I invite you to experiment.

All relevant functions are declared inline, and compilers can be pretty smart.
 > > Could this have a negative impact on performance? Dither is one place that speed is important. Currently there is virtually no difference in time taken to export a long track with dither or without dither (tested on Linux).
> 
> I invite you to experiment.
> 
> All relevant functions are declared inline, and compilers can be pretty smart.

I rewrote all of my branch with only static inline functions, and no pointer-to-member-functions.
",,"Resolves: #1496

Rewrite DIther.cpp more clearly with C++ functions, not macros.

Just a preliminary to a preliminary to some AudioIO cleanup...

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1565,2021-08-30T12:28:00Z,2021-08-30T20:44:20Z,SteveDaulton,0,0,1,67,11,1,1,[],,0,38128.0,0,0,0,0,95826706.450684,,0,1,0,False,[],,,"Resolves: License ambiguity with https://github.com/audacity/audacity

Updates license message to be compatible with latest https://spdx.org/licenses

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [ x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x ] I made sure the code compiles on my machine
- [x ] I made sure there are no unnecessary changes in the code
- [x ] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x ] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1527,2021-08-24T22:35:18Z,2021-08-27T16:57:16Z,Paul-Licameli,0,2,4,452,33,2,1,[],,0,238924.0,0,0,0,0,96107873.964149,,0,4,0,False,[],,,"Resolves: #1144

Extract a library of utilities for querying the available audio devices, finding their preferred sample rates, holding certain related global preferences variables, and also the interface class Meter for transferring buffers of samples for purposes of display updates.

This does not contain the complete playback and recording audio engine.  When WaveTrack is a library, it will need only this part to set default sample rates of wave tracks appropriately.

Doing this separation now is also desirable as a prelude to other refactorings of the audio engine.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I think we should use `virtual ~Meter() = default;` and remove the cpp file  I learned long ago that it is nicer for each class with virtual functions to have at least one virtual function defined non-inline.  Then it can be predicted at compile time, which translation unit will need to allocate the unique static vtbl instance.  The compiler can use the rule that the translation unit defining the first non-inline function in vtbl order will be the one.

But if not, then the compiler may generate many copies of the vtbl, and then the linker has to eliminate the duplicates.

So that is the reason I make a tiny .cpp file just with the non-inline destructor definition.
"
1542,2021-08-26T23:07:01Z,2021-08-27T13:10:11Z,LWinterberg,0,0,1,2,1,1,1,[],,0,50591.0,0,0,0,0,96121504.03477,,0,1,0,False,[],,,"Resolves: an absolutely petty little thing in the readme.md

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1528,2021-08-25T02:37:30Z,2021-08-26T21:46:30Z,san-coding,1,0,1,2,1,2,2,[],207.0,0,155340.0,0,0,0,0,96176926.5153,,0,1,0,False,['san-coding'],"Hey @petersampsonaudacity @crsib  , kindly review this pull request 
",,"This fixes the issue #1521





Resolves: *(https://github.com/audacity/audacity/issues/1521)*

The Windows installer EXE dialog references Mac Os X. Changed it to macOS because:
a) Apple changed the branding a wile back,
b) the ""X"" is not letter X but Roman numeral X - i.e. ten and as now current mac OS is version 11.5.2 (Big Sur) the ""X"" is well out of date.
(To achieve this , updated the file : [win/Inno_Setup_Wizard/audacity_InnoWizard_InfoBefore.rtf
](https://github.com/audacity/audacity/blob/95a7fc6362729594565204b6db927b2e025d20c0/win/Inno_Setup_Wizard/audacity_InnoWizard_InfoBefore.rtf) )
<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1526,2021-08-24T17:39:33Z,2021-08-24T17:39:50Z,crsib,0,0,3,32,3,0,0,[],,0,24.0,0,0,0,0,96364520.8509,,0,3,0,False,[],,,,
1517,2021-08-20T13:29:50Z,2021-08-20T13:46:18Z,vsverchinsky,1,0,1,3,2,1,1,[],528.0,0,1033.0,0,0,0,0,96724094.960759,,0,1,0,False,['Paul-Licameli'],"I suggest just one more line in TrackPanel.cpp:
```
static_assert(kTrackInfoBtnSize == kAffordancesAreaHeight, ""Drag bar is misaligned with the menu button"");
```
",,"Resolves: #1473 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1377,2021-07-27T15:58:22Z,2021-08-20T13:00:46Z,vsverchinsky,6,30,4,395,18,2,2,[],71463.0,0,2063542.0,6,0,0,0,96726275.104223,,2,4,0,False,"['Paul-Licameli', 'vsverchinsky']","Your approach is founded on a memory of the origin of a channel as ""aligned"" or not, rather than computing it as needed.

I would prefer that you compute alignment as needed.

Defining the condition will take some work.  You must sort clips of each channel, becauase they are not necessarily in sorted order, and they you must iterate corresponding clips comparing start and end times.  (Probably with a tolerance: let times differ by 1/(2*rate))

This is extra work, and extra calculation, but I believe the calculation will be small in practice because clips will be few.

The advantage is greater confidence that there are not surprising corner cases where things will not work as expected.

For instance:  I just made a mono track, duplicated it, then made a stereo track from them.  The affordance of the right channel did not disappear as expected in your branch.  It would under this other approach.

There are also other commands like ""Swap stereo tracks.""  This did not produce the expected result.  It would if aligned-ness is computed instead of stored.


 > Your approach is founded on a memory of the origin of a channel as ""aligned"" or not, rather than computing it as needed.
> 
> I would prefer that you compute alignment as needed.
> 
> Defining the condition will take some work. You must sort clips of each channel, becauase they are not necessarily in sorted order, and they you must iterate corresponding clips comparing start and end times. (Probably with a tolerance: let times differ by 1/(2*rate))
> 
> This is extra work, and extra calculation, but I believe the calculation will be small in practice because clips will be few.
> 
> The advantage is greater confidence that there are not surprising corner cases where things will not work as expected.
> 
> For instance: I just made a mono track, duplicated it, then made a stereo track from them. The affordance of the right channel did not disappear as expected in your branch. It would under this other approach.
> 
> There are also other commands like ""Swap stereo tracks."" This did not produce the expected result. It would if aligned-ness is computed instead of stored.

I don't agree with that. I've considered that possibility, but the problem is that matching clips isn't enough, the result should be cached anyway. Moreover the first case isn't valid, this behaviour was requested. The second case should be fixed. Also I see a problem with definition of matching clips: it will probably  change in the nearest feature. 
> I don't agree with that. I've considered that possibility, but the problem is that matching clips isn't enough, the result should be cached anyway. Moreover the first case isn't valid, this behaviour was requested. The second case should be fixed. Also I see a problem with definition of matching clips: it will probably change in the nearest feature.

If ""matching clips is not enough,"" what is your more precise description of the criterion?  You are guessing it will ""probably"" change, but that is speculation.  Even if it does change, defining it in one place in a test seems to me to be the less fragile approach.  More lines of code to implement the complicated test, but fewer places in the code will need changes to guarantee the consistency of the cache with changes of the track.

Caches are useful but problematic when there are many things that could happen to invalidate them.

 > If ""matching clips is not enough,"" what is your more precise description of the criterion?

It is described here https://github.com/audacity/audacity/issues/1348. The check you propose is actually answers the question we don't need to answer (are clips aligned or not?). From the description of the task i understand that the sequence of track transformation determines whether the track should be considered ""aligned"" or not. Consider case when user have stereo track with misalligned clips, then user makes them aligned by dragging. Should we consider track aligned now? If yes, then affordance should disappear, if no then user can split stereo track and merge it back to get completely another appearance (this was my question for designers). And as i understand the currently implemented behaviour is exactly what was requested (except second scenario you've provided). > > If ""matching clips is not enough,"" what is your more precise description of the criterion?
> 
> It is described here #1348. The check you propose is actually answers the question we don't need to answer (are clips aligned or not?). From the description of the task i understand that the sequence of track transformation determines whether the track should be considered ""aligned"" or not. Consider case when user have stereo track with misalligned clips, then user makes them aligned by dragging. Should we consider track aligned now? If yes, then affordance should disappear, if no then user can split stereo track and merge it back to get completely another appearance (this was my question for designers). And as i understand the currently implemented behaviour is exactly what was requested (except second scenario you've provided).

You are right that you tried to implement literally what is now in the text box in the first picture at that issue.

Really I think that specification should be disputed and corrected.  So, let's raise this at the next design review.

I believe that if mono tracks have aligned clips according to the numerical criteria, then they should merge into a stereo track without the second affordance area.


 The branch needs a rebase and force-push and conflict resolution.
As I just explained, I think the basic approach of storing rather than recomputing whether clips are aligned will not be reliable enough.
 This review covers only the implications for persistency.  More reviewing to come.
 I don't like the removal of GroupChannels in favor of two functions.  I don't like regression from the more generalized abstraction in Track and TrackList, that the number of channels in a group might be more than two.

 Mistakenly approved.  Not in fact approved yet.
 Ignore this comment I'm done reviewing.

This is good, very nearly complete.  Remaining fixes are minor.
 Must also handle possible future-file values.
","As I just explained, I think the basic approach of storing rather than recomputing whether clips are aligned will not be reliable enough.
 This review covers only the implications for persistency.  More reviewing to come.
 I don't like the removal of GroupChannels in favor of two functions.  I don't like regression from the more generalized abstraction in Track and TrackList, that the number of channels in a group might be more than two.

 Mistakenly approved.  Not in fact approved yet.
 Ignore this comment I'm done reviewing.

This is good, very nearly complete.  Remaining fixes are minor.
 Must also handle possible future-file values.
","Resolves: #1376 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","This enumeration persists with the attribute name ""linked"" both before and after your changes.  So consider the problems of downgrade (3.1 file opened in 3.0.x) and the opposite problem of upgrade.

Downgrade is all right because any non-zero value in the file will become boolean ""true"" so that preserves whether the track is a left channel of a pair, or not.  Upgrade is more complicated.

As it is written now, stereo tracks saved in 3.0.x always load as ""Group"" meaning in the (usual?) case of clips all aligned between tracks, drag bars will appear on the right, because boolean true was saved and is now interpreted as 1.

You could swap Group and Aligned, but that only makes the opposite problem in the (less usual?) case that a file was saved with non-aligned clips, which should show right channel drag bars but will not.

The complete solution?  Make 1 a reserved ""legacy"" value.  Enlarge Track::LinkConsistencyCheck() so it detects numerically whether clips correspond between channels, and change ""legacy"" to Group or Aligned.

And of course LinkConsistencyCheck must become a virtual function so Track does not depend on WaveTrack, and the override for WaveTrack must also call-through to the base class method.


 Will the LinkType enumeration need more values in future versions of Audacity?  Maybe.

So consider, what if we are loading a future file, and there is a value not within the existing LinkType enumeration of Audacity 3.1?

The future value must be corrected to one of the known values, or loading the file should abort.

If aborting isn't acceptable, what's the best guess we can make now about future designs we haven't done yet?  A crazy question maybe, but we have to decide something now.  And I would say:  assume the unknown value can map to ""Aligned"" which is the expected usual case.

(What if the guess is wrong?  Then Audacity 3.1 ought to have some way to let the user correct the situation, changing incorrectly ""Aligned"" tracks to ""Grouped"" with something in the drop-down menu of the Track Control Panel.  Is that in the scope of this issue?  No, so don't act on this suggestion yet.  But we should argue it in the next design review.)


 It's quite strange solution i would say, why do you expect that file loaded from old project and having corresponding clip borders should be without affordances on the right channel (remember that with affordances both cases are valid)? Why not we remove them when clips are aligned at runtime then, or check this condition after merging tracks? Seems like it's another question for UX experts.
I don't like idea of LinkConsistencyCheck changing object state at all, now it's just make state somewhat cosistent, i can understand that, but i don't see any reason to prefer 'Aligned' over 'Grouped'  I didn't see that enum (or boolean value in the past) beeing used somewhere except WaveTrack context actually. And i don't see any sense in linking label tracks for example (maybe we would find use for this in future, but that's a speculation). And note that value is loaded/stored in WaveTrack but belongs to the Track class.

>The future value must be corrected to one of the known values, or loading the file should abort.

That's why i don't like modifying meaning of existing entities :) but make sense to me, and... 'Aligned' is more strict condition compared to 'Grouped', and 'Grouped' is stricter than 'None', and who knows which type of link we would decide to have in future (maybe we'll remove it all), but droping to 'None' is the safest option here i think. Also there is a version check exist for project files If a file is loaded from an old project, and all clip borders do correspond, as would be usual -- do you think it is better there are affordances on the right?  Wouldn't the user instead want them removed?  But then, how could they be removed, once they are present?

""Why don't we remove them when clips are aligned at runtime then, or check this condition after merging tracks?""  Maybe that won't be done automatically, but maybe the choice to do it if possible, should also be given to the user.

For instance, what happens if you record a stereo track, split it, do nothing else (or do edits that don't affect clip boundaries), then join channels again?  Affordances enter the right track, and can never go away again.

I think that is a gap in the design.  I think the problem of writing the function that will detect that affordances can be removed is a problem that will need to be solved.
 > I didn't see that enum (or boolean value in the past) beeing used somewhere except WaveTrack context actually. And i don't see any sense in linking label tracks for example (maybe we would find use for this in future, but that's a speculation). And note that value is loaded/stored in WaveTrack but belongs to the Track class.
> 
> > The future value must be corrected to one of the known values, or loading the file should abort.
> 
> That's why i don't like modifying meaning of existing entities :) but make sense to me, and... 'Aligned' is more strict condition compared to 'Grouped', and 'Grouped' is stricter than 'None', and who knows which type of link we would decide to have in future (maybe we'll remove it all), but droping to 'None' is the safest option here i think. Also there is a version check exist for project files

There is a version check, but Audacity has very rarely made incompatible changes in version, and I don't know yet that we will decide to do so.

Maybe you have the better argument, that if there is an unknonwn future value for this field read into version 3.1 -- then the worst assumptions should be made, and it should be corrected to None not Aligned.  If that is wrong, let the user join mono channels back into stereo.  (Ah, but again -- should they have a choice to make the stereo tracks Aligned not simply Grouped?)

But the larger point remains:  sometihing must be done in 3.1 at load time, to be sure that the value read from the file maps to some valid value of the small enumeration of three values.  That isn't done yet here.
 How do you like this idea instead:  the enumeration does have four values, not three.  The new values are 2 and 3.  Old files may have the value 1.  LinkConsistencyCheck will correct 1 to 2 or 3.

It can simply correct 1 always to Group (which is now 2).

But if after testing we decide that a more complicated procedure is needed to correct the value -- then we will do that, and we have already prepared by reserving 1 for the old, un-corrected value, distinct from the two new values.
 Lines were permuted in this header file, making the diff bigger than necessary and a little more difficult to review. I explained that previous work aimed to remove the assumption that the number of channels in a group of tracks is at most two in as many places as possible.

These changes suggest, unfortunately, a regression of that work which goes beyond what I expected to happen.

You may have a justification.  What is it?
 Everywhere, GroupChannels is eliminated and replaced instead with LinkChannels or UnlinkChannels.  I think this is unnecessary, and again, a regression of the previous work at possible generalization for the future to more than two channels.
 HasLinkedTrack() replaces GetLinked() when used as just a boolean.  I explained that I made sure GetLinked() was a private function when I rewrote all the old code.  HasLinkedTrack() should also be private.  I checked that the code still compiles if it is. Rather than eliminating GroupChannels and replacing it with two functions -- preserve GroupChannels.  Keep the argument for number of channels.  The third argument was never non-default -- very well, remove it, but replace with the new argument that specifies whether to align or not, in the case of more than one channel.

Then write the body of GroupChannels on the assumption that the number of channels to be grouped is not necessarily two or less.
 Note that this was one of only two places where GroupChannels might be called with more than two -- importing.
 Note that this is the second of only two places where GroupChannels could be called with more than two channels -- recording.

There is in fact not YET support for more-than-stereo tracks.  Calling GroupChannels with more than two made all mono tracks -- an implementation detail that could be changed in the future.  But it's the right abstraction to have these places that make POSSIBLY more-than-stereo tracks -- and we leave it to the details of the TrackList implementation to decide how to deal with that.


 I see a minor consequence, that if a track ever needs an affordance, but later no longer needs it (as when swapping stereo channels) -- then the affordance control is not deleted until the track is.  Not very important. Not necessary for this issue, but good, that you take the unnecessary pointer to an affordance out of the base class TrackView and put it only in the subclasses that need it.
 This is private.  Keep it so.

TrackList::FindLeader() is for public use. Replace ""previous one"" with ""its leader"" and this comment is not objectionable.

But I still strongly disagree with the unnecessary disturbance of the places that called GroupChannels().

 Really, no.  I don't like this part.

Leave as it was:  one function, not two functions, with an interface equipped to make channel groups of any size, even though this isn't yet fully implemented.  Just add an argument for ""alignment"" or not.

Update function comments to say ""alignment"" has no effect when there is just one channel; and that grouping past two is not necessarily implemented yet, but the interface is presented.

 I do like the name changes making this line read less strangely.

That's all for reviewing this PR.
 >how could they be removed, once they are present?

They can't be removed
 
![image](https://user-images.githubusercontent.com/20165230/129017618-4f60dbdd-5e75-4156-bcb6-3fcdf8aeb478.png)

>do you think it is better there are affordances on the right

I think that it's safest assumption (keep things as they were before)

>Maybe that won't be done automatically, but maybe the choice to do it if possible, should also be given to the user.

Well maybe, but that was not declared in the scope of work for this task >You may have a justification. What is it?

I was studying what GroupChannel does for multi-channel tracks and came to conclusion that it does almost nothing: beeing called for multi-channel tracks it'll just set channel type to mono (as it was before) and will set the link to false (as it was before). The result of GroupChannels is a set of ungrouped channels, which is a bit misleading i think, and will lead to a false conclusions about the behaviour in future (we don't know yet how 5.1 channels would be grouped, for example). Maybe that's another reason to have a StereoWaveTrack type, then grouping and checks for leads will become redundant? But the consequences would have their own downsides surely

Consider a new declaration:
`void GroupChannels(Track& first, int nChannels, LinkType linkType, bool resetChannels = false);`
It looks a bit overloaded with parameters, and possibly incompotible states. This method tries to deduce things inside that are obvious from the context where grouping or ungrouping is needed. I still disapprove what you did.  You must consider the implementation and also the interface.

There is what GroupChannels does now, which does not yet implement multi-channel tracks, because we don't yet have a data representation for them.

However there is all the other code using the abstractions provided by Track and TrackList, that ARE programmed to an interface anticipating possible multi-channel implementation in the future.  It required a lot of my work in previous years to make that so -- that the assumption of at-most-stereo tracks is made in very few places.

That should remain so.  Please change the interface of GroupChannels only to specify alignment or not.  Changing that function into two functions that can only allow for making either mono and stereo tracks is not a change in behavior now, but it is not an improvement of the interface.

 I do agree that you can simplify away the resetChannels argument which was never non-default.
 I have a suspicion that the scope may enlarge after all to include this after some more testing, but I admit this is trying to read designers' minds right now. >However there is all the other code using the abstractions provided by Track and TrackList, that ARE programmed to an interface anticipating possible multi-channel implementation in the future.

We will need to make changes to GroupChannels then (maybe multiple times), and this will affect each piece of the code which calls this method, and make sure that we don't break anything unintentionally: to add a behaviour which will handle grouping for more than two channels, we'll need to interfere the code that does grouping for two channels. Spelling in commit comment: *hiding
 At least this small change might be better:  use SortedClipArray() not GetClips() because clips in a WaveTrack are not necessarily stored in sorted order by start time.

(I don't really like that, and maybe WaveTrack should be rewritten instead to guarantee the invariant of sortedness of clips.  But, it's not so yet.)

 As mentioned, you might instead assume the two arrays of clips are already sorted. And then instead, you might use std::mismatch on the two ranges of pointers, and the appropriate lambda, expressing what you mean very simply.
"
1502,2021-08-18T10:17:41Z,2021-08-18T10:21:37Z,crsib,0,0,2,30,2,1,1,[],,0,239.0,0,0,0,0,96909219.945282,,1,2,0,False,[],,,"Resolves #1501 
Resolves #1476 
Resolves #1477 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1482,2021-08-16T06:09:41Z,2021-08-20T10:42:31Z,Paul-Licameli,1,28,7,1051,15,3,1,[],107400.0,0,361974.0,1,0,0,0,96735165.693846,,1,7,0,False,['Paul-Licameli'],"Const-correctness is the wrong word -- I'm not cheating with C style casts or const_cast.

Unnecessarily non-const arguments is what you mean, for some predicates.  Fair point.
Several const correctness issues that I think should be solved. In case we really need to have non const wxWindows flying around - let's at least use pointers there, non-const reference catches the eye heavily, as usually it implies that the object will be modified by the caller.

Also, probably Journal.cpp should be split into multiple files","Several const correctness issues that I think should be solved. In case we really need to have non const wxWindows flying around - let's at least use pointers there, non-const reference catches the eye heavily, as usually it implies that the object will be modified by the caller.

Also, probably Journal.cpp should be split into multiple files","Resolves: #1404

The journalling system is now enhanced enough that it can replay some interactions with modal dialogs, including pushbuttons, choice controls, text boxes, and sliders.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I would really prefer an explicit check here (and in general as well). I.e. `pWindows2 != nullptr`.

The condition here takes multiple lines separated by comments so it reads like returning `pWindow2` instead of boolean. `auto` in function signature doesn't help too. Please, let's not oversuse comma. While it's behavior is better defined now, I don't feel like it should be used, it doesn't really improve readability.

```
const auto begin = list.begin();
const auto end = list.end();

auto iter1 = std::find_if(begin, end, pred);
```



 It really feels like this namespace is related to Windows OS, not to Application Windows. Comma again; Why not

```
auto next = ++iter1;
auto iter2 = std::find_if(next, end, pred);
```

? `const wxWindow*`? `const wxWindow&` or even `const wxWindow*`? `const wxWindow*`? `const wxWindow*`? I have very strong opinion that `static_cast` can't possibly be used within the template function. You leave both compiler and runtime helpless here.

It is really no difference between C-cast and `static_cast` in this case.

`dynamic_cast` is fast enough and this code is not performance-critical anyway. Is that possible that for some reason these checks fail? What would be the consequence for the user? I prefer the brevity of relying on the bool conversion.

I can write trailing && on this line, not the next.  I don't have strong feelings.  Putting it on the next is one of the silly rules of the MuseScore coding standard, and I don't know who I was trying to please with it.  But we don't use those rules.

auto in the function signature DOES help.  It allows a function to return a lambda.  I can't do it otherwise.  The alternative is changing return type to a std::function, with its overheads, and maybe defeating the inlining of std::find_if.

So I agree with only 1 out of 3 things.


 Disagree
 By using comma, I make it clear that these expressions really do deduce the same type.
 Well... Controls?  As in dialog controls, which are each a wxWindow object.
 See above for why I prefer it.  Just one auto instead of two autos makes it MORE legible to me.  It expresses sameness of types.
 Won't work for the retur value.

Would require FindByPath to return const wxWindow*, and then see in the event deserializers how the windows must be changed.

However,  if you meant the predicate signature only -- ok

 ok to const BUT -- no to pointer argument.  I use reference types to communicate that nullptr is not allowed. NO!

`const wxWindow &` yes. ditto
 If the checks fail, then DispatchEvent will return false.  That causes Journal::Dispatch() to throw SyncException.   That exception's delayed handler action makes the program quit.  That causes Journal::GetExitCode() to return a non-zero status on the command line.

All of that is intended behavior, for the user who is the QA engineer.  All of this means an interaction sequence recorded before, fails to rerun now, because the sequence of events fails on rerun -- the windows that should be the handlers of events don't exist in the rerun.

Tests need some way to fail when they should fail and report that .
 `static_cast` is not as bad  C style pointer casts because it will not cast away const and will not allow conversion from base to derived when the inheritance relation is private or protected and is is not in the right scope for accessibility.
 If you tell me `static_cast` is absolutely never justified for pointer downcasting, I strongly disagree with that.  It is used in ""type erasure"" techniques such as you may soon review too for lib-xml.  I will refuse to ""correct"" the `static_cast`s in that PR unnecessarily.

wxWidgets event system is built around type erasure and is set up to invoke event handler functions without runtime checks.  See, for instance, this line of Audacity:

```
   EVT_BUTTON(ID_BUTTON_USECURRENTF, ContrastDialog::OnGetForeground)
```

Explore how the macro is implemented, if you dare, especially what `wxCommandEventHandler` means inside it.  Set a breakpoint in the function, arrange to hit it, and see the call stack.

This unchecked downcasting is pervasive in the handling of wxWidgets events and never a source of crashes in my experience.

wx/event.h even uses that same term, ""type erasure:""

```
// The type-erased method signature used for event handling.
typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
``` >predicate 

Predicate, yes Looks like an attempt to bypass compile time restrictions to me, with runtime overhead :) Yes, if more details on failure will be ever needed that may be corrected in the future  I tried to make the program return the line number of the journal file where failure occurred.  However at least on macOS it is truncated to an 8 bit value.
 The simplistic opinion that ""static_cast to downcast pointers is never right,"" is wrong.  I now know that is not Dmitry's opinion after the approving review of the lib-xml extraction.

It can be right when the code you need to examine to prove the correctness of the static_cast is not open ended.

But that isn't quite true with the wxWidgets events.  I think you can get undefined behavior from what should be properly written event handlers, but you have to work hard to do it.  Like construct your own wxEvent objects of the wrong class, and use SetEventType() on them, and then give them directly to a window to be processed.

It's possible but not usual.  It's deliberate ""fraud"" and not ""accident.""  SetEventType() isn't supposed to be used.  Events constructed by the libraries have the integer wxEventType consistent with the expected subtype of the wxEvent object.
 I like your style of debating :) I was not saying that it's right or wrong, I noted that you build an extra object at runtime to do something that looks like an attempt to persuade a compiler that it's safe to cast"
1475,2021-08-13T13:29:30Z,2021-08-17T21:48:53Z,vsverchinsky,0,11,1,149,4,2,1,[],,0,420494.0,1,0,0,0,96909457.425561,,0,1,0,False,[],"Nothing is wrong with the workings, but I don't understand the need for the new function.
","Nothing is wrong with the workings, but I don't understand the need for the new function.
","Resolves: #1375 

Resizing area added to the WaveTrackView and WaveTrackAffordanceControl, making possible to have an enlarged resizing area with 1px distance between channels.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Wow, I'm glad you figured all this out.  But it makes me wonder if there is a simpler way to do this.

Should CellularPanel support a notion of cells with hit zones that extend outside their visible areas?  Could the resizer cell make lower-priority hits that simply combine with the rest of the WaveTrackSubView's hits?  Would that have simplified this project? I need to think about it for the future.

 But this new function -- I don't see why it is needed.  I think you could solve this problem equally well with GetSubViews(), and it would be preferable to do so without a duplication of logic.  GetSubViews() reports some extra information you can ignore, which is not a significant extra expense.

If you convince me I'm wrong and that there is a real need for another function, then I'd just ask for a name change, up-casing the second V for consistency.

 And thank you for keeping it generalized, not assuming at most two channels.
 In the proposed method of cell hit testing I need to know whether tested subview is first or last. Hit testing area depends on that, that explained in the comments. What's your suggestion for proper hit testing? Yes, you need to know whether the subview is at the top or bottom.

There are already two existing functions to describe subviews.

`GetAllSubViews()` is not right for your purpose, because the ordering ignores the display setting. 

But I think `GetSubViews()` is already right for your purposes and makes the new function unnecessary.
 Yep, sorry, i confused them. Yet, GetSubViews changes the internal state of the WaveTrackView and requires to supply a rect of the track view cell, the height of which later is used by SubViewAdjustHandle, and the actual rect of the parent WaveTrackView is unknown during hit testing of the subview (if there is a good way to get from there then we can avoid subview order check at all), do still you think that it would be better to use it here? If you supply an arbitrary non-empty rectangle, you will get meaningful results about the ordering of sub-views.  You will also get some y-coordinates that you don't need, dividing the height of the rectangle in correct proportions.
 Calling GetSubView() with arbitrary rectangle will change the cached height of the WaveTrackView affecting the results of the behaviour of SubViewAdjustHandle, still I can call it like:
`auto subviews = pWaveTrackView->GetSubViews(wxRect(0, 0, 1, pWaveTrackView->GetLastHeight()));`
and make it public (it is declared public in base class actually) It is good that you noticed the state changes and asked questions.

One of the state changes is a ""lazy evaluation"" building the sub-views only on demand.  That should not be a problem.  

(The reason why it's needed is commented `// On-demand steps that can't happen in the constructor` and has to do with some difficulties around std::shared_from_this.)

The other is caching of mLastHeight, which might cause trouble for some other hit-testing routines.

I suggest:  make a version of GetSubViews taking a pointer to wxRect.  (Existing GetSubViews will call the new function, but needs to override TrackView::GetSubViews() which will not change.). When the pointer is null, supply a dummy rectangle instead and skip the cache update.

A little inelegant, but it will work and avoid duplication of logic.

 I see nothing wrong with result varying depending on presense of parameter, but the presense of side effects are much more siginificant thing I admit there is some inelegancy, but this does eliminate duplication.  Thanks!
"
1478,2021-08-14T05:27:22Z,2021-08-17T19:10:44Z,Paul-Licameli,0,0,8,825,48,1,1,[],,0,308614.0,0,0,0,0,96963866.061585,,1,8,0,False,[],,,"Resolves: #1158

Extract a library for serialization and deserialization of objects in XML form, and a registry for serializable objects
attached directly to the project.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1449,2021-08-10T10:14:58Z,2021-08-17T12:56:53Z,DavidBailes,0,0,1,2,1,1,1,[],,0,614515.0,0,0,0,0,96986309.696393,,0,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/1389

Problem: the running average rmsSum can be higher than it should be due to rounding errors. This can lead to sections of the audio which should be below the threshold, being measured to be above the threshold.

Fix: make rmsSum a double, rather than a float, to greatly reduce rounding errors.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1486,2021-08-17T09:26:35Z,2021-08-17T10:09:15Z,crsib,0,0,2,119,6,1,1,[],,0,2562.0,0,0,0,0,96996366.521502,,0,2,0,False,[],,,"Resolves #1463

This pull request solves the following problems:

* Tarballs on GitHub can be regenerated, changing the hash
* Building from the release tarball will create an ""alpha"" build
* Build will fail if there is not Git in PATH

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1461,2021-08-12T14:05:49Z,2021-08-17T09:31:50Z,crsib,2,3,2,39820,154,3,1,[],84208.0,1,415564.0,0,0,0,0,96998611.358391,,1,2,1,False,"['Paul-Licameli', 'crsib']","I see NoteTrack.cpp also has
`#ifdef SONIFY`
and it's not defined in the default build.  I never did learn what this SONIFY thing was.  Other old team might confirm that it is no longer relevant.

So, that old #include wasn't breaking the build.  Still it could be changed consistently with the rest, or just deleted.  Then, less `#include ""../lib/src...""` will remain to look at.



 I fixed the include in `NoteTrack.cpp`Did you omit to change NoteTrack.cpp?
","Did you omit to change NoteTrack.cpp?
","Resolves #1447 

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Wherever there is `#include ""../lib-src/...""` there is something wrong.

I count 14 such places in the source tree now (+1 that is commented out).  This removes four of those.

I'm glad to see that.  Will we see removal of the rest of them?

 Will surely do :) Wait now, there is one inclusion of portmidi.h from NoteTrack.cpp that was not removed in this commit.  Did the next commit do it?
"
1172,2021-06-26T15:51:19Z,2021-08-04T10:52:30Z,dofuuz,8,15,3,199,1,2,1,[],166333.0,0,4134619.0,2,0,0,0,97334027.17299,,0,3,0,False,"['Tantacrul', 'SteveDaulton', 'Paul-Licameli', 'Penikov']","I have not reviewed this patch, but I agree that there needs to be an option of some kind to use the last used settings in preference to the auto-detected settings. Over the years there have been many requests from users for an option along these lines. I certainly think a button for detection is better. I'm curious how the remembering works exactly. I've tested it out and I'm not 100% clear on it.

Would you mind suggesting a usercase I can try? The issue is that it's not possible to always determine the sample format / channels, (and never possible to determine the sample rate) from raw sample data.

Auto-detection is useful in the most common case where the user does not know the sample format, because (a) it will often detect correctly, (b) when it fails to detect correctly, it may still be a good starting point for manually selecting the format options.

The use case where auto-detection needs to be turned off is when a user has multiple raw sample files that are all the same (known) format, and auto-detect fails. In this case it becomes very tedious to have to manually change the settings for every import. Audacity already has a mechanism built in to allow effects to default to their last used settings (most effects do this), and imo it would be useful if Import RAW also had this as an option. If there is agreement about the desirability, I'd like to review this and get it merged soon into 3.1.0.  Are you reading this, @dofuuz ?
 > If there is agreement about the desirability, I'd like to review this and get it merged soon into 3.1.0. Are you reading this, @dofuuz ?

I was unable to find any issues with the behaviour. It does appear to be working as advertised, so merge away :) > 
> 
> > If there is agreement about the desirability, I'd like to review this and get it merged soon into 3.1.0. Are you reading this, @dofuuz ?
> 
> I was unable to find any issues with the behaviour. It does appear to be working as advertised, so merge away :)

I checked this feature and it works well.
But it doesn't check file type so the user can import any type of file and get 

@Tantacrul I don't mind if the feature will be included in release 3.1 as is, but it would be nice to avoid importing inappropriate file types in future releases


https://user-images.githubusercontent.com/25851359/129317203-ac02e3e1-1a25-4d01-8a8a-b0a5a72a2f8a.mp4


 > But it doesn't check file type

I think that is intentional.
One of the uses of Import RAW is ""[Databending](https://en.wikipedia.org/wiki/Databending)"" - Examples: https://forum.audacityteam.org/viewtopic.php?f=46&t=93265
 > > But it doesn't check file type
> 
> I think that is intentional.
> One of the uses of Import RAW is ""[Databending](https://en.wikipedia.org/wiki/Databending)"" - Examples: https://forum.audacityteam.org/viewtopic.php?f=46&t=93265

Was just about to say the same thing! Not checking file format is intentional.Just a few more suggestions, and I'm done reviewing.

Thanks again for continued interest in contributing to Audacity.  3.0.3 is out at last, with your improved spectral palette.  Be proud!

","Just a few more suggestions, and I'm done reviewing.

Thanks again for continued interest in contributing to Audacity.  3.0.3 is out at last, with your improved spectral palette.  Be proud!

","![import raw](https://user-images.githubusercontent.com/8174871/123518042-3169cb00-d6df-11eb-939d-8949aadc4471.png)

Format guessing of 'Import Raw' is not so accurate. Sometimes it's tiresome.

Usually, when I import bunch of raw files, all of them has same format.
But, format guessing keeps change import setting, so I have to manually change it back.

I think this fix fits more on most of use case.
- Disable auto format detection. Instead, add detect button.
- Remember last format setting, and set it as default on next import.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I see an assertion.  I look through the rest to find out what proves this assertion.  I see `FormatClassifier::GetResultChannels()` is the ultimate source of the value of mChannels.  I see to that the value (minus one) indexes into the choice control for mono or stereo.

So: (1) the condition should be stronger, that the value is 1 or 2, and (2) that should be stated as a postcondition (use `@post` in a Doxygen comment) on the method of the class FormatClassifier.

This is incidental to your changes -- you changed a variable name, and changed this line necessarily.  But let's clean up the assertion that exists.  Make it something more provable in terms of stated invariants of other classes.
 Make a function of this switch and eliminate the duplication with the constructor of the dialog.
 Make the title
```
XO(""%s: %s"").Format(GetTitle(), wfn.GetFullName()).Translation()
```

This is the substitute-don't-concatenate rule for user-visible strings.

And yes, even that string might be localized differently!  For instance French prefers a space left of the colon as well.
 This might be done better by passing more arguments to AddStandardButtons, and avoiding need for the TwoColumn.

Pass `eOkButton | eCancelButton | eApplyButton` and do like below to change the name of the Apply button.  Then bind OnDetect to the id `wxID_APPLY`.
 Hm, I see try-catch, and I wonder if mEncoding might be assigned, but mChannels not assigned, in case of an exception.  Would that be an inconsistency?

I could read those two functions to be sure they are no-throws, or I can remove doubt right here instead, writing it this way:

```
std::tie(mEncoding, mChannels) = std::make_pair(
   theClassifier.GetResultFormatLibSndfile(), theClassifier.GetResultChannels());
``` One might write

```
auto begin = mEncodingSubtype.begin(), end = mEncodingSubtype.end(),
   iter = find_if( begin, end, [&](auto subtype){
      return (mEncoding & SF_FORMAT_SUBMASK) == subtype;
   });
int selection = (iter == end ? 0 : iter - begin);
```

Not much shorter maybe, but I'm forming a preference for avoiding raw loops in favor of standard algorithms whenever I can.  Take or leave this suggestion.

Does that not compile because mEncodingSubtype isn't a std::vector?  Then change it to be one.
 `FormatClassifier::GetResultChannels()` is not always source of `mChannels`. `mChannels` value is last channel import setting, with initial value of 1. So its value range is 1~16. This changes button order from Detect, Import, Cancel to Import, Cancel, Detect. And default focus on Detect button.
I'm not going to apply this. And I think using apply button for detect is idiomatically wrong... As you said, these 2 functions has no-throw. So, that inconsistency is never going to happen. Done Done Done differentely with std::find. The ""AddStandardButtons"" function should be reworked to be more flexible, to cover cases like this.  But sure, that's out of scope for this.
 True, but ... I had to look to make a thorough review.  I might at least at headeer comments to those functions.

"
1467,2021-08-13T10:22:54Z,2021-08-13T11:05:14Z,DavidBailes,0,0,1,4,1,1,1,[],,0,2540.0,0,0,0,0,97338611.427102,,1,1,0,False,[],,,"Resolves: https://github.com/audacity/audacity/issues/1465

Time Shift left/right commands do not work on the right hand channel of a stereo track when clips are not aligned.
This has been a problem since 3.3.0. Between 2.3.1 and 2.4.2 they moved a clip in the right hand channel more than they should, so moving the clip more than the cursor.

Problems and fixes, both in DoClipMove():
1. The reason for the commands not working at all was the track rather than the channel was been passed in the call MakeTrackShifter::Call( *channel, project )
2. The reason for the clip being moved more than it should, was the left hand channel always being passed as the captured track in the call:
state.Init( project, pShifter->GetTrack(), hitTestResult, std::move( uShifter ),
         t0, viewInfo, trackList, syncLocked )


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1437,2021-08-06T16:50:03Z,2021-08-09T12:02:30Z,vsverchinsky,1,0,2,28,4,1,1,[],241858.0,0,512848.0,0,0,0,0,97409875.563318,,1,2,0,False,['Paul-Licameli'],"Excellent detective work!

My only small objection is that I would make the new move constructors non-inline myself.  Not important enough to block this.
",,"Resolves: #1363 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1442,2021-08-09T03:11:00Z,2021-08-12T14:42:13Z,Paul-Licameli,3,6,12,492,22,2,1,[],203828.0,0,300677.0,0,0,0,0,97411990.663738,,0,12,0,False,"['vsverchinsky', 'Paul-Licameli']","Currently minimum height does not take into account the height of the subtracks:

![image](https://user-images.githubusercontent.com/20165230/129023426-837ff8bd-6f77-4c8f-b6c0-a8e9c22dbc65.png)

Not a big issue, but looks not very good in my opinion > Currently minimum height does not take into account the height of the subtracks:
> 
> ![image](https://user-images.githubusercontent.com/20165230/129023426-837ff8bd-6f77-4c8f-b6c0-a8e9c22dbc65.png)
> 
> Not a big issue, but looks not very good in my opinion

What do you mean by sub-tracks?  The stereo case?

The goal I wanted to achieve is to make height of minimized tracks not larger than it was in 3.0.3 and earlier.  (Where a minimized stereo track is also just as tall as a minimized mono track.)

This is done.  Let design ask for changes in the stereo case if it's not good enough.  And if it is not good enough, then my changes make it easy to get everything right, just by assigning heights to the views of channels of a minimized stereo track differently.

 Also i think that it worth to note that this PR also fixes that issue #1368",,"Resolves: #1339
Resolves: #1368
(and addresses part of #1375)

Alternative proposal to fix the problems of minimization of tracks with affordances, and the fit-to-height (Ctrl+Shfit+F) command.  Incidentally cleans up some things in TrackPanel, and makes its policy of subdivision of the y axis better encapsulated.

Shrinks the channel separator to one pixel, but does not widen the hit test area.

Known small problem -- dragging the channel separator between tracks now acts a little oddly, not staying exactly at the pointer.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Why not define this constant like this in enum?
`kVerticalPadding = kTopMargin + kBottomMargin` While working on resizers, i noticed that this class can be split into two: TrackResizeHandle (which could be used to resize tracks) and TrackChannelResizeHandle (could be used as a resizer between channels). What do you think? Well, the reason why constants aren't needed outside the TrackPanel.cpp is the fact that they are all accomodated within the 'height' of the TrackView? If so, then meaning of that height will depend on the context, and example of such is printing. Printing context isn't aware of other decorative elements and thus printed page look different. I explain in a later commit.  I want to move constants into a different enum.  I want to let the constant kVerticalPadding be a more widely available constant but kTopMargin and kBottomMargin are meant to be exposed in fewer places.

So kVerticalPadding is not defined publicly in terms of them.  The consistency constraint on the three values becomes a static_assert instead.

 A good idea that might make things plainer.

I consider the BackgroundCell and the TrackPanelResizerCell and its associated handle to be close collaborators of TrackPanel, which also defines the sub-division of the track area that uses those cells.

But I want TrackInfo and the sub-classes of TrackView not to have strong assumptions built into them about how TrackPanel subdivides its area.  They are meant just to supply methods for cells, but not to decide where those cells are and how big.

This division might make it easier to program alternative TrackPanel arrangements if we ever do want that.

This PR achieves this for vertical divisions -- only one constant kVerticalPadding is widely known among the other cell classes.  It's not yet so encapsulated for the horizontal axis -- there is still mention of left margin and right margin in other places.  But the last commits attempted a few things for that too.

 That is true.  And that was already a problem just for printing.  I mentioned that printing already used the same track height values but did not make the same track and channel separators.

There are also differences in how printing represents the timeline.

There was already a mismatch between the print and the screen appearance.  Let the mismatch remain.  It's not in scope to fix it.  If it becomes important to fix it, then we can make TrackPanel responsible for the printed image too.

"
1445,2021-08-09T11:11:38Z,2021-08-12T13:59:20Z,crsib,0,3,8,600529,1691,4,1,[],,0,269265.0,0,0,0,0,97414564.853534,,1,8,1,False,[],,,"Resolves: #1198 

This requiest is based on #1431 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","portmixer is  only available ""for as"" ??? Whoopsie  The one modification hidden in this big commit among all the deletions!"
1431,2021-08-05T18:09:10Z,2021-08-12T13:15:30Z,crsib,0,9,5,239919,432,1,1,[],,0,587196.0,1,0,0,0,97417182.965258,,1,5,1,False,[],"Request to improve a commit comment and remove even more obsolete files
 Let's not hold this up. I  have examined the changes in Audacity's C++ source and in PortMixer to my satisfaction.

I just suggest replicating more of the expanation of the PR comment in commit comments too, when you next rebase and force-push this.
","Request to improve a commit comment and remove even more obsolete files
 Let's not hold this up. I  have examined the changes in Audacity's C++ source and in PortMixer to my satisfaction.

I just suggest replicating more of the expanation of the PR comment in commit comments too, when you next rebase and force-push this.
","Resolves #1186
Resolves #1413 
Resolves #1414
Resolves #871 

This PR achieves two important goals:

1. PortAudio is updated to 19.7.0
2. System PortAudio can be used. Besides Linux packaging, this is important to fix #1360

To update PortAudio, the following steps were taken:

* #946 was merged into this branch. This is required because `PaUtil_GetTime` is private, which is arguably the upstream error anyway.
* `libnyquist` and `portmixer` build systems were updated:
  * Corresponding  `CMakeLists.txt` moved into the lib-src.
  * New PortAudio target is linked to the libraries.
  * `portmixer` build system detects PortAudio capabilities.
  * Libraries were moved out of the dependencies CMakeLists.txt
  
  It is unlikely the `libnyquist` and `portmixer` will be devendored because they are very Audacity specific, so it makes sense not to treat them as 3d party dependencies, at least for not.
* `portmixer` now compiles with unmodified PortAudio. However, the full functionality on Windows requires patches to PortAudio:
  * A [patch](https://github.com/audacity/conan-recipes/blob/main/portaudio/all/patches/19.7.0/pawinmme-export.patch) to export PaWinMME_ functions, which are public, but not usable if PortAudio is built as DLL. 
  * A [patch](https://github.com/audacity/conan-recipes/blob/main/portaudio/all/patches/19.7.0/winds-getguid.patch) that allows getting the DirectSound device GUID. Without it, there was no reliable way to retrieve the GUID.
 
Additionally, there are the following patches applied to the Conan provided library:

* A [patch](https://github.com/audacity/conan-recipes/blob/main/portaudio/all/patches/19.7.0/enable-oss.patch) to enable OSS support. 
* A [patch](https://github.com/audacity/conan-recipes/blob/main/portaudio/all/patches/19.7.0/wasapi-loopback.patch) to enable WASAPI loopback devices.

One patch to PortAudio was dropped because it seemingly fixed the bug in Audacity rather than PortAudio. Also it broke `IsStreamStopped() == !IsStreamActive()` for WASAPI.

Linux [packaging scripts](https://github.com/audacity/audacity/tree/master/linux/packages) were updated, so packages are built against the system PortAudio, the results were verified on corresponding systems.

The `PortAudio devendored` commit is large because it is impossible to break it into smaller commits that compile and run, as bringing the unmodified PortAudio library as an external dependency breaks lots of stuff around.

This PR was tested with all available Host APIs on Windows and with ALSA and Jack2 on Linux. OSS, while it was verified that it is enabled - failed to me for all Linux distros I was testing against.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I stepped through this function and thought that all the complementary Px_CloseMixer calls would be nicer if done by RAII.  Put this somewhere in the C++ headers outside of PortMixer:

```
struct PortMixerDeleter{ void operator ()(void *p) const noexcept { if (p) Px_CloseMixer(p); } };
using PortMixerHandle = std::unique_ptr<PxMixer, PortMixerDeleter>;
```

But that cleanup is beside the point of this PR of course.
 I also now notice `#ifdef USE_PORTMIXER` in some places but `#if USE_PORTMIXER` in others, and I don't know if the distinction was intended.  Are builds with USE_PORTMIXER defined but zero really supposed to be different?

Another cleanup perhaps not for the scope of this issue.
 I see `int i` is always zero in existing calls.  That doesn't necessarily mean the argument should be removed.  But I wonder if the generality will ever be needed, or has been tested.


 I notice new argument names are camelCase but the library otherwise prefers snake_case for variable and member names.  Not a serious matter, just style.
 Please explain more in the comment of this commit:
* lib-src/portmixer/portaudio.patch described how the customized portaudio used to differ from the upstream.
* Patches were motivated by needs of portmixer, but now portmixer is rewritten all in terms of the published portaudio API.
* libnyquist and portmixer, which use portaudio, also get rewrite of their build system.  (Or could this step be its own separate commit before this commit?  If so, ideally I'd do it, but verifying the rebuilds might be too bothersome now.)
* any other helpful details you think of.

Also amend the commit to delete files in lib-src/portmixer that are no longer needed: the .patch for sure, and maybe also makefiles and other relics of old build systems.  And maybe do the same for libnyquist.
 I notice these are the only non-Windows usages of the new fields `input_device_index` and `output_device_index`.  They happen only in non-Apple Unices.

So what about the case of Apple?  Is it an omission that the new fields are set but not used anywhere?  Or can you reassure me you studied the problem and decided there was no need?
 I do observe now that portaudio.patch never needed anything specific to macOS, so that persuades me it's not an omission.
 Hm, this deletion ought to be part of the previous commit by me, actually
 I'm not sure why these changes (justified though they may be) are a necessary part of devendoring?  I'd like to understand whether they are really independent.
"
1416,2021-08-04T03:42:29Z,2021-08-11T12:43:25Z,Paul-Licameli,1,2,6,576,10,1,1,[],637299.0,0,637300.0,0,0,0,0,97505480.712119,,0,6,0,False,['Paul-Licameli'],"Thanks for the approval.

You noticed then how the journal ""language"" is defined?

Those details may be up for change, but it's enough for the minimal version.
Besides Toggle vs Set I have no objections to this reques",Besides Toggle vs Set I have no objections to this reques,"Resolves: #1403

Beginnings of built-in tools for easy creation of automated functional regression tests, in alpha builds only.

Certain events can be recorded to journal.txt in the folder with audacity.cfg, if this has been enabled in the Tools menu, and then played back, if that file is specified with the -j command line option.

So far, only menu items that require no dialogs (or their shortcut keystroke equivalents, or certain toolbar buttons that invoke those commands) can be played back.  Some simple sessions -- such as just exiting the program -- can replay.

Audacity returns a non-zero status to the shell if journal playback fails, because the program's state is out-of-sync with what the journal file expects.  No examples yet of how to force that failure.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I would prefer `SetRecordEnabled(bool)` I expected that wxFile will do it, but well. Also, wxTextFile::Write overload frightens me :)

Still, all the fuss here goes to wxWidgets, not to this code"
1441,2021-08-09T00:25:04Z,2021-08-09T09:05:44Z,Paul-Licameli,1,0,1,16,1,1,1,[],31234.0,0,31240.0,0,0,0,0,97691385.773102,,3,1,0,False,['crsib'],#1269 is fixed for good,,"... which broke at a2f109d

Resolves: #1421 
Resolves: #1369

Events were failing to be processed because event types were set incorrectly.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1429,2021-08-05T02:02:15Z,2021-08-06T12:57:11Z,Paul-Licameli,0,0,2,252,39,1,1,[],,0,125702.0,0,0,0,0,97936694.049499,,2,2,0,False,[],,,"Resolves: #1163

Library of useful utilities for decoupling of sub-systems and making them open-ended -- the big O of SOLID.

Beware!   Here be dragons.  Much use of C++ templates.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1385,2021-07-30T02:14:06Z,2021-08-06T11:21:47Z,Gootector,0,0,1,46,1,1,1,[],,0,637661.0,0,0,0,0,97942424.665251,,0,1,0,False,[],,,"Update pl.po - fixes for 3.1

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1344,2021-07-21T11:15:06Z,2021-07-21T11:17:37Z,Paul-Licameli,0,0,1,4,1,1,1,[],,0,1262577.0,0,0,0,0,98062648.682127,,0,1,0,False,[],,,"... and in 3.0.0 started crashing instead.  Just disallow it again, no
functionality lost.

Resolves: #1329

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1054,2021-06-23T04:40:52Z,2021-08-04T11:24:28Z,paulguy,2,0,1,14,1,1,1,[],3336526.0,0,3659318.0,0,0,0,0,98108763.555273,,0,1,0,False,"['Tantacrul', 'Paul-Licameli']","Well, it does what it says on the tin :)

![image](https://user-images.githubusercontent.com/21022311/127750557-64de6955-5bbc-4c1f-8a5b-a3dc9c799883.png)

Thanks!
 @paulguy Do you wish to be credited in the About Audacity dialog?
Thank you for this feature!
","Thank you for this feature!
","Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1323,2021-07-19T08:35:45Z,2021-08-04T23:15:05Z,gera-gas,1,30,5,146,2,2,1,[],1276344.0,0,1435160.0,1,0,0,0,98072428.643658,,1,5,0,False,['Paul-Licameli'],"Squash these commits into one.  Then address my recent suggestions for checking that you re-enable update checking on all possible failure paths.

That is all the change I will request.
I'm done reviewing.
","I'm done reviewing.
","Resolves: #1199 

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","This might be just a constexpr variable.

Or even just wxPATH_SEPARATOR which is acceptable (belonging to wxBASE) This line made me look up what `download` is in VersionPatch.h.  I see it is a wxString.  But that is uninformative.

I like wrapping strings up in classes that indicate the purpose of the string, to prevent mistaken inter-conversions.  And there exists a type URLString, lately added.

Can you use that type in VersionPatch.h?  Can you insert a commit in the sequence before this commit, to make that change?
 - is downloadReponse really needed in the lambda capture?
- Are you sure this lambda executes in the main thread?  (try a breakpoint). If not, are you sure it is safe to destroy the dialog?  If not, then consider CallAfter.
- But then, mProgressDialog should not be a unique_ptr.  It should be a wxWindowPtr<>.  Remember that wxWindow objects have special memory management and should not be handled with the usual C++ smart pointers.
- https://docs.wxwidgets.org/3.0/classwx_window_ptr_3_01_t_01_4.html Repeat my question about the lambda capture.
 Wait, is mVersionPatch.download a url or is it a file name?  I'm confused now.
 Maybe you can get away with this, extracting the last path component.  It's a little hacky.
 You might use the recently added BasicUI::MakeProgress() to make this bit of code ""toolkit-neutral.""  But it is not important, yet, to do that here.
 This variable is not yet used.  I suppose a later commit?  Then it might be added with that commit. I see a problem.  This line might crash, though in very unusual cases.

You assign mProgressDialog only once (in std::call_once).  You use it here, outside that lambda.  But you destroy it in the request-finished callback.

So, what happens if the program runs so long that GetUpdates() is called twice?
 Is call_once really right?  Or should you do this each time?  See elsewhere about lifetime of the progress dialog. Why not use this constructor of wxFileName:
    wxFileName(const wxString& path,
               const wxString& name,
               wxPathFormat format = wxPATH_NATIVE)
 Why not do this error checking?
 What if there was an error downloading?  (See other comment about missing check.)

If you know there WAS an error, then you should not make this call.

But if there WAS an error, is your callback called or not?  If you callback is called even in case of error, how do you know if there was one?

It is not clear to me from the class CurlReponse how this is communicated to the caller.  So ask crisp.
 It looks like this commit corrects the previous commit, which was not actualy correct for macOS, right?

Squash the two commits. Make a sequence of commits that are stages of implementation that are each buildable and runnable without errors.  But don't leave a sequence of known bugs and corrections.
 Now I see you already found the problem about threads I already mentioned.  So as I said, use interactive rebase and fix-up the original.  Don't leave a record of mistakes and corrections.

 ... and you already did notice my BasicUI too, ok
 Yes, null check now avoids the crash.

But maybe the progress dialog should be created more than once, not in call_once, so the destructions and creations match.
 Should this deletion be part of the first commit? It is a link to audacity installer file and have a two use cases here:
1 - Using like `std::string` URL for make request for CURL.
2 - Using like `wxString` for `wxFileName`, that contain the name of latest audacity patch.
May be I should create a new type for this cases like: `using PatchLink = wxString` for give a more anformation about `mVersionPatch.download` field. Because it can successfully read in next callback cycle, may be need additional checking the all readed bytes in `FinishCallback` also. Destructions and creations is already match, because `setRequestFinishedCallback` with progress dialog desruction called once, only when downloading is finished. Well, leave it alone for now.

URLs use / as separator.  I was wondering whether this would work wrong on Windows where \ is the sperator, but you try to interpret a URL as a file path.  But if it tests all right, I won't insist on the type distinctions.

 yes, it work fine, I already tested it on Windows too. MakeProgress or MakeGenericProgress, as appropriate -- I may have overspecified it.

If there is no ""denominator"" for the ""numerator"" -- no real estimate of the incomplete work, then the Generic progress is the right one.

Ah, but the download callback is supplied ""current"" and ""expected.""  So that means, don't use Generic?
 But my point was that using call_once isn't right.  Maybe the dialog will be created more than once, in unusual but possible circumstances.  Maybe download fails once, but is attempted again.
 You know you can leave out `<std::mutex>` in C++17?  Improved deduction of types in constructor expressions and declarations!

I am convinced now that this mutex is doing a correct thing.  I think there would be a more ligthweight way to do this with std::atomic instead -- the mutex is only guarding the transition of a boolen from false to true.  But, don't bother doing this.

 You reset mOnProgress to false on some of the exit paths.

But I think you must do it more places.

The returns at lines 124 and 139 -- where you detect a network failure or a corruption of the download -- should also reset mOnProgress to false.  Otherwise, automatic update checking will never be tried again, while the program remains running.

You also failed to cover the case that `mVersionPatch.version > CurrentBuildVersion()` is false, or the case that the dialog return code is neither `wxID_YES` nor `wx_ID_NO`.  Which I don't know is possible from the context.

 Yes, because I add it manualy, therefore I agree with you about RAII approach (smart classes) for fix the same possible problems. Also, I think, I solve this possible moments by create own `UdateLocker` class, that atomic blocking entry to update process with RAII support. Doing it with RAII would be even better.  See ValueRestorer in MemoryX.h which may already do what you want.  No new class needed.

```
ValueRestorer<bool> cleanup;
...
cleanup = valueRestorer(mOnProgress, true);  // inside the lock on the mutex
...
[cleanup = std::move(cleanup), ... // to transfer the cleanup from one lambda into another
```

Do you understand the idea?
"
1410,2021-08-02T15:41:41Z,2021-08-03T15:57:44Z,vsverchinsky,5,0,1,3,1,1,1,[],3838.0,0,96739.0,0,0,0,0,98175693.756804,,1,1,0,False,"['petersampsonaudacity', 'Tantacrul', 'DavidBailes']","Testing on W10 

the new Status Bar text is far too long for the Audacity Window at default size
![image](https://user-images.githubusercontent.com/50205984/127895947-9bf5c271-8ccf-41ac-9c5e-0c63efcd112a.png)

The second part of the message is misleading in a couple of ways - it says:
> ... Hold Shift while dragging to simultaneously move all clips on the same track

a) the user has the hold shift down before dragging - this is not clear

b) ""simultaneously is not really the right word - what you are doing is ""maintaining sync""  -  simultaneous just means they all move at the same time and they might shuffle up - sync maintenance is much clearer

@Tantacrul - do you have a view on this
 I think we have a design issue with the description at the bottom of the app. It should be able to allow longer strings than that. Possibly we could solve it by being able to move to two lines when needed. We can fix that later. For now, I'd suggest:

1. ""Drag clips to reposition them. Hold Shift and drag to move all clips on the same track.""
2. We should have a tooltip for this too (just as you do when hovering over the play button)
3. Create an issue for the bottom bar truncating descriptions

One question: I assume screen readers still work fine with the description, even if it's truncated?

@petersampsonaudacity - what do you think? > I think we have a design issue with the description at the bottom of the app. It should be able to allow longer strings than that. Possibly we could solve it by being able to move to two lines when needed. We can fix that later. 

Or it could auto-scroll.

>For now, I'd suggest:
> 
>     1. ""Drag clips to reposition them. Hold Shift and drag to move all clips on the same track.""

I like this revised message.


>     2. We should have a tooltip for this too (just as you do when hovering over the play button)
I agree - we know from experience  that many (most) folk never notice.read the Status Bar


>     3. Create an issue for the bottom bar truncating descriptions
+1



 > One question: I assume screen readers still work fine with the description, even if it's truncated?

screen readers just read the truncated text. (though obviously in this particular case it's not of much interest.) Testing on W10 with audacity-win-3.0.4-alpha-20210803+f90698c-64bit

Looks much better now with default window size.",,"Resolves: https://github.com/audacity/audacity/issues/1332

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1202,2021-07-01T09:53:58Z,2021-07-13T18:47:07Z,crsib,0,2,2,55,3,2,1,[],,0,2851674.0,1,0,0,0,98206423.618802,,2,2,0,False,[],"One line looks like a mistake, and also the macOS build fails.
 That was the only issue in my first review.
","One line looks like a mistake, and also the macOS build fails.
 That was the only issue in my first review.
","This is required for the GSoC project on Source Separation to provide a better UX.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Did you mean `ulnow, ultotal`
 Yes, thank you! That is fixed now"
1306,2021-07-16T09:57:01Z,2021-07-16T10:30:27Z,crsib,0,0,1,16,1,1,1,[],,0,1555487.0,0,0,0,0,98206427.632259,,0,1,0,False,[],,,"The check for macro directory now only happens if directory is selected and exists,

Resolves: #1305
*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1388,2021-07-30T16:14:20Z,2021-08-03T09:13:00Z,crsib,0,0,9,1180,29,1,1,[],,0,320329.0,0,0,0,0,98209346.741698,,0,9,1,False,[],,,"Resolves: #1187 

This PR resolves two issues related to the Linux package maintenance:

1. Conan is rarely available as a system package, so it can't be included in the list of package build dependencies. 
2. Network connection is sometimes not available within the packaging environments.

`prepare_offline_dependencies.sh` generates a tarball containing:

* Files required for PIP to install Conan
* Conan download cache

In the future, we intend to publish this tarball.

`build_package.sh` demonstrates how this tarball can be used.

Additionally, we provide a set of example package configs for various distros.

At the moment, for Fedora 34 there is no need for Conan, so it is disabled. However, as the devendoring project proceeds, this can change. For example, Fedora lacks PortSMF and libsbsms.


<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1380,2021-07-28T12:40:25Z,2021-07-28T13:38:16Z,crsib,0,0,1,23,2,1,1,[],,0,3474.0,0,0,0,0,98711838.547094,,0,1,0,False,[],,,"This seems to be a common workaround for CPack issue on macOS. 

Script has 10 attempts and in the worst case, it will take 55 seconds for it to fail.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1359,2021-07-24T15:47:11Z,2021-07-30T12:51:53Z,Paul-Licameli,0,0,11,1449,76,1,1,[],,0,507891.0,0,0,0,0,98541815.633241,,2,11,0,False,[],,,"Resolves: #1160

A library for general file handling utilities, and definitions of certain significant file paths, which does not depend on wxCore, though it does still depend heavily on wxBase.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1030,2021-06-18T17:40:28Z,2021-07-28T11:27:35Z,crsib,4,14,8,528,18,3,1,[],1266585.0,0,3433633.0,0,0,0,0,98719677.111191,,0,8,0,False,"['mikhailnov', 'crsib']","`*.pc` are git-ignored, did you force-add them? CAP_SYS_ADMIN is not needed for rpm-build Current build systems adds an absolute RPATH. Such binaries will not work after being packed to RPM. Maybe also add an `ldd` test into `%check`.

```
[00:01:52] verify-elf: WARNING: ./usr/lib64/audacity/modules/mod-script-pipe.so: RPATH contains several entries: /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:52] verify-elf: ERROR: ./usr/lib64/audacity/modules/mod-script-pipe.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:52] verify-elf: ERROR: ./usr/lib64/audacity/modules/mod-script-pipe.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:52] verify-elf: ERROR: ./usr/lib64/audacity/modules/mod-script-pipe.so: RPATH contains illegal entry ""/usr/src/RPM/BUILD"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:53] verify-elf: WARNING: ./usr/lib64/audacity/modules/mod-script-pipe.so: undefined symbol: _ZN18ScriptCommandRelay17StartScriptServerEPFiPFiP8wxStringS1_EE
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-utility.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-utility.so: RPATH contains illegal entry ""/usr/src/RPM/BUILD"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-string-utils.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-string-utils.so: RPATH contains illegal entry ""/usr/src/RPM/BUILD"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity
[00:01:53] verify-elf: WARNING: ./usr/lib64/audacity/lib-uuid.so: RPATH contains several entries: /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-uuid.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-uuid.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-uuid.so: RPATH contains illegal entry ""/usr/src/RPM/BUILD"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity:/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/shared/Debug
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-strings.so: RPATH contains illegal absolute entry ""/usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity
[00:01:53] verify-elf: ERROR: ./usr/lib64/audacity/lib-strings.so: RPATH contains illegal entry ""/usr/src/RPM/BUILD"": /usr/src/RPM/BUILD/audacity-src-3.0.3/x86_64-alt-linux/bin/Debug/lib64/audacity
```

Better use something like `$ORIGIN/../LIB_SUFFIX/audacity` where LIB_SUFFIX is a variable from cmake. See `man ld-linux` on Linux and `man rtld` on FreeBSD. > Current build systems adds an absolute RPATH

I will look into, thank you for pointing out.Glad to see we're taking steps to help Linux packagers!",Glad to see we're taking steps to help Linux packagers!,"Resolves: #1008 

A new CMake option is added, that allows to disable Conan. This option is likely temporary, we will continue investigating how to use Conan in RPM builds (like providing a tarball with all the dependency sources packaged along with Conan).

Based on the https://src.fedoraproject.org/fork/imcinerney/rpms/audacity/tree/im/depupdate - updated spec and a docker image are created, to test the RPM builds.

```
~ docker build -t audacity-fedora .
~ docker run -ti --volume=%path_to_audacity%:/audacity  --cap-add=SYS_ADMIN --rm  audacity-fedora
```

@imciner2 Can you please look into and provide your comments?

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","There is no guarantee that $toolkit has ""gtk2"" or ""gtk3"" in its name, I am not sure that automagic is needed here, but it will be better to default to gtk-3.0, not gtk-2.0 I would remove %changelog here , it is not required to build the package, ut this %changelog will become obsolete quickly because this spec will be maintained separately.

Also I would add %check section like this:

```bash
%check
p=""$(patchelf --print-needed %buildroot/%_bindir/audacity)""
# upstream seems to assume statically linking bundled libsbsms,
# verify that system one is used
echo ""$p"" | grep -q sbsms
# ffmpeg and mp3lame can be either dlopen'ed or linked explicitly,
# ensure that they are linked explicitly
echo ""$p"" | grep -q libavcodec
echo ""$p"" | grep -q libmp3lame
```

(BuildRequires: patchelf) Do you really need to run mock inside a CI container? You can just install  run `dnf build-dep audacity.spec` inside the container with needed version of Fedora. But maybe CI containers may be based on a too old version of Fedora, I don't know. Fedora rawhide may become broken unexpectidly, maybe better base on a specified release of Fedora I hope that this config disables network inside the chroot. It is very useful to test builds without access to network. `fedora:latest` is Fedora 34. Rawhide is `fedora:rawhide` The docs say it is and I observed, that it does Docker helps a lot with managing reproducible, clean environments. I assume you tested this and it wasn't necessary to escape the dollar sign in `$ORIGIN` (i.e.`\$ORIGIN`)? This file is using 4 space indentation rather than 3 used in most of Audacity's CMake files. I think there's already a mix of indentation in the repository, but it's something to be aware of when we add new files. Why are we building an RPM package rather than leaving it to distros? (Just curious, I've nothing against building distro packages.) I actually plan to add Debian and Arch here as well, so we can regularly check that everything builds as expected. I've checked that on Fedora. CMake documentation says that only ${...}, $ENV{} and $CACHE{} are interpolated"
1364,2021-07-26T16:49:16Z,2021-07-26T16:49:30Z,crsib,0,0,7,69,8,0,0,[],,0,12850.0,0,0,0,0,98860333.444086,,0,7,0,False,[],,,"Post-release merge of branch release-3.0.3 into master.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1356,2021-07-23T20:42:50Z,2021-07-23T21:14:33Z,Gootector,1,0,1,13,1,0,0,[],2275.0,0,2276.0,0,0,0,0,99116093.447862,,0,1,0,False,['Gootector'],"Thank You very much!   Greetings,  Gootector 
            
          
     
      
       
        Dnia 23 lipca 2021 23:14 Dmitry Vedenko ***@***.***&gt; napisał(a):
       
    
       
         
 Merged  github.com #1356  into release-3.0.3. 

 —  You are receiving this because you authored the thread.  Reply to this email directly,  github.com view it on GitHub , or  github.com unsubscribe .
",,"File pl.po needs fix, because strings with ""fuzzy"" are untranslated in program.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1207,2021-07-01T16:18:33Z,2021-07-22T18:43:49Z,vsverchinsky,1,30,9,874,16,2,0,[],1273941.0,0,1895530.0,0,0,0,0,99139497.671205,,1,9,0,False,['Paul-Licameli'],"I have cherry-picked and merged parts of this pull request.

I mentioned a few points that are still unresolved, I don't approve the edit cursor change yet, and I must still review all the label track changes.

Please rebase your branch onto recent master and force-push it again.
",,"Resolves: #1181
Resolves: #1251

 * Adds affordances to a wave clips, note track item, labels
 * Contains requested fixes and improvements (link above)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Oh no, adding colors to the theme.  That has not been done in a long time -- since 2017.  James Crook is more familiar with the theming system than anyone.  A question is whether these choices of colors need to be different in other themes.  If so, it's not obvious how to do it.  It involved DarkThemeAsCeeCode.h, etc. which are generated by strange processes.

 I was relying on https://wiki.audacityteam.org/wiki/Theming_HowTo, page doesn't provide information on theme source code generation though I think it involved making a special build with EXPERIMENTAL_THEME_PREFS and doing other things.

But I also think the colors at the end of the table are just used unchanged in the other themes that don't redefine them.

If you had inserted the lines in the middle, I think that might have messed up the non-default themes worse if they were not regenerated.

I think there is much inconvenience in extending the theming system, which needs rewrites.  But that's another topic.

 Following the analogy with VRuler controls, this function should not be virtual This is not a pure virtual:  you should commend that the default behavior is to return null.
 *controls More simply: `return {};`
 Just analogous with the vruler controls of course.
 This implements the item ""Play head should be rendered over a track panel (not separate tracks)"" of #1181 ?

It's correctly done.

Please make it a separate commit then, for a single independent task, rather than making this one huge commit.
 I do not understand the changes in this file.  This disables the vertical stroke to indicate the zero-length selection.  Why?  And why do you use that particular EXPERIMENTAL?  Where is this change specified?

Can this be another small commit?
 This constant is only used in TrackPanel.cpp -- perhaps it should be defined only in that file, until need arises to reuse the constant elsewhere.
 You have redefined subdivisions in this file.  I like that.  It would be good to make a commit just of the changes of TrackPanel.cpp, and the changes in TrackView necessary for it.  Then, other commits to implement affordance controls specially for WaveTrack and for NoteTrack. I have observed this:  If you minimize a Wave track (the button with a black triangle), it is taller than it was before.  ""Mute"" and ""Solo"" buttons still appear.

Is this an intended consequence?  Is it desirable?  Please point it out to the designers and ask.
 Update this comment!  It's not longer a complete description.
 explicit maybe
 Consider that whenever a ctor has one argument.
 Why was this change needed?  Because of EmptyPanelRect not inheritinc CommonTrackPanelCell?
 unnecessarily moved lines These lines aren't gone, but hoisted -- ok
 Why not matching #endif here?
 Compilation fails if the EXPERIMENTAL is turned off.  Fix it
 I don't think the lines above should be compiled only when the EXPERIMENTAL is on
 This new #include is not needed, remove it
 This new #include is not needed, remove it
 We aren't yet wholly consistent about comment at tops of files, but see some examples with my name and imitate with your name in this and other new files.
 all good
 I'd prefer to avoid including TrackPanel.h
 Just ViewInfo::Get(*pProject) and you can avoid use of TrackPanel
 I'm glad you figured out the use of lastState from other examples!
 Remembering the rule that a .cpp file's own header should be the first included, good
"
1313,2021-07-17T00:56:18Z,2021-07-22T21:40:30Z,Paul-Licameli,0,0,1,39,2,1,1,[],,0,506659.0,0,0,0,0,99201304.378725,,0,1,0,False,[],"Looks good to me! I downloaded CI build and played around with the karaoke view. I tried opening it during playback and toggling fullscreen mode on macOS, so far without any glitches or crash.","Looks good to me! I downloaded CI build and played around with the karaoke view. I tried opening it during playback and toggling fullscreen mode on macOS, so far without any glitches or crash.","Resolves: #1312

The bug is difficult to reproduce, but this is a plausible fix for it, given what we know from a stack trace.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1355,2021-07-22T16:35:22Z,2021-07-23T13:46:38Z,crsib,0,2,3,48,3,1,2,[],,0,76278.0,0,0,0,0,99143341.567426,,0,3,0,False,[],,,"It turns out, that wxHyperlinkCtrl has a dramatically different size with the GTK backend. This commit makes the link to be only clickable using a mouse, but AFAIK accessibility is not implemented for the GTK backend anyway.

Resolves the report from Steve:

![image](https://user-images.githubusercontent.com/2660628/126675444-60280ee6-a176-46f2-9e74-c303335218b0.png)

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","What is the effect of swapping those lines?  It's Layout, then Fit almost everywhere else.
 Looks ok

I would write it this way instead, keeping my function scope clean and avoiding the heap allocation, but that's me :-)

```
const auto hyperlinkColour = [&]{
   return wxHyperlinkCtrl{S.GetParent(), wxID_ANY, L""temp"", {}}.GetNormalColour();
}();
```"
1345,2021-07-21T11:26:33Z,2021-07-22T20:55:32Z,Paul-Licameli,0,4,5,578,72,3,1,[],,0,120657.0,0,0,0,0,99203892.847222,,1,5,0,False,[],,,"Resolves: #1159

Depends on PR: #1328

Extract a tool-kit neutral library for some mathematical and sample-processing utilities.  Make only the library directly dependent on libsoxr

Note that only the last five commits are proper to this PR.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","I think we can have this on for CLang as well. Otherwise, I see no problems with this I would prefer not to have this change, as it will conflict with the devendoring project. I agree, we should keep certain approach for new build ""Conan"" conception. I did what was minimally necessary to fix CI builds, avoiding link time error.
"
1328,2021-07-20T03:18:14Z,2021-07-22T20:53:13Z,Paul-Licameli,0,2,2,361,115,1,1,[],,0,236345.0,0,0,0,0,99203904.55245,,1,2,0,False,[],,,"Resolves: #1060

A library of classes that manage global variable settings that persist between runs of the application

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Naming with `m` prefix usual using for private variables. Why you using `evtHandler` as standalone static variable and not add handler into `PrefsListener` or using `FilterEvents` for handling? I don't have the deep knowleges about `wxEvents`, because little bit confused."
1322,2021-07-19T06:21:26Z,2021-07-21T18:04:03Z,Paul-Licameli,0,6,5,169,63,2,1,[],,0,215078.0,0,0,0,0,99300579.761181,,0,5,0,False,[],,,"Resolves #1162

Toolkit neutral library for Audacity's exception handling system

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","This PR introduces changes not directly related to the general purpose of this PR as i understand it. Also it introduces changes that will never be tested, however i do agree with neccessity of breaking complex action like ""move and change"" into separate steps Which changes do you think are unrelated?  I tried to explain reasons sufficiently in commit comments.
 moving CallAfter to EnqueueAction, and the description of this commit is indeed related to it's contents, but the commit itself does something that is not neccessary for this PR. And d45887740d738f22c80f77614a390b0ec41d5b65 also looks out of place (fix to a BasicUI) Understand that without commit d458877, this PR will fail to build on Windows, with link errors.
 CallAfter is first moved out of an inline function, and into the .cpp file, so wx/app.h can be removed from the header file.  That requires adjustment of many other #include directives elsewhere.  So, I made a commit mostly about just those routine adjustments, separately, before presenting other changes in other commits.
 Ultimately wx/app.h must disappear from the .cpp as well as the .h file, so that I can claim that this new library is sufficiently toolkit-neutral.  I do that in another commit.

So yes, the total sequence of changes includes an intermediate state of the code transformation, which is never tested.  But I believe none the less that it is better to preserve a record of code transformations that are individually easier to review.
"
1349,2021-07-21T16:01:26Z,2021-07-21T16:36:13Z,crsib,0,0,1,85,2,1,1,[],,0,6047.0,0,0,0,0,99302011.833445,,0,1,0,False,[],,,"Resolves: 
![image](https://user-images.githubusercontent.com/2660628/126521176-1d8cbfc9-45c5-47d6-8894-0fdc3e73b4f3.png)

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1342,2021-07-21T10:22:31Z,2021-07-21T12:58:50Z,crsib,0,4,1,136,4,1,1,[],,0,9621.0,0,0,0,0,99318773.561585,,0,1,0,False,[],"All looks good, I'm only suggesting comments,.  I trust you tested this with the crash-me buttons?
","All looks good, I'm only suggesting comments,.  I trust you tested this with the crash-me buttons?
","Adds privacy policy to error and crash reporting dialogs.

Comment boxes are removed (or rather not compiled) to ensure, that it is not possible to send the personal data from them.

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Strings exactly the same as in src?  Yes.  Add comment in src/ApplicationPrefs.cpp that it must remain so.
 Link same as in ApplicationPrefs.cpp?  Yes.  Comment again.
 All strings correctly copied? Again, yes
 i18n-hint comments should work in crashreporter code too (correct extraction to audacity.pot) so you might replicate them"
1307,2021-07-16T10:59:01Z,2021-07-19T00:00:13Z,fossdd,1,0,1,2,1,1,1,[],219667.0,0,428341.0,0,0,0,0,99329863.719636,,0,1,0,False,['Paul-Licameli'],"Small one-line changes don't always need CLA agreement.
Well spotted.",Well spotted.,"- [ ] I signed [CLA](https://www.audacityteam.org/cla/): **NEVER**
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1326,2021-07-19T16:16:31Z,2021-07-20T01:15:50Z,Gootector,0,0,1,16,1,1,1,[],,0,32359.0,0,0,0,0,99447596.892618,,0,1,0,False,[],,,"Update pl.po for 3.0.3
Changed strings only.

Greetings,
Gootector

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
1265,2021-07-09T09:38:04Z,2021-07-16T15:14:35Z,vsverchinsky,0,11,1,37,3,2,1,[],,0,867982.0,0,0,0,0,99499881.7725,,1,1,0,False,[],,,"Resolves: #1183

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","WaveClip::mOffset defaults to 0 in the constructor that doesn't copy from another clip.

So you can combine the two overloads of CreateClip into one, defaulting offset to 0, and behavior will be the same.  Eliminating the duplication of code would be preferable.

 I think this line changes behavior in the case that append-record must make a new wave tracks, so it's not really appending.

But my understanding of the description of issue #1265 is that this is not the case where change of behavior is intended.
 Do you understand the consequences of deleting this?

I'll tell you:  If you make certain appearance changes to a track that you are recording to, those changes should be remembered in undo/redo history, but sequenced in that history before the recording, when the recording finishes.

I don't see why deleting these lines has any relation to the issue description.
 Only this change, and the changes in WaveTrack.cpp, are really addressing the issue as described.
 Well, the problem i was trying to solve here is when recording starts to an empty track but not from the beginning, Reinit also updates an offset of the new clip of the pending track so that it becomes 0 (i.e. recording starts from the beginning), but i supposed that this call may be redundant because all settings are copied when pending track is created, but missed that updater could be also called during recording (and seems like some of this changes aren't remembered when not recording). What the purpose of the updating the offset of the dst track? I see a two options here since it's the only place where Reinit is called (from what i see): to remove SetOffset from Reinit, or save initial offset before calling Reinit and restore it after the call (which is propably a workaround). Rather than deleting the code entirely, could the behavior of Reinit be fixed?
 That's how i understood a task, maybe there is a problem with description. As i understand @jounih has confirmed that this is desired behaviour - recording should start from the point where play head is (does not depend on whether there an appropriate track for recording exist or not), the exception is an empty project - pressing the record button should create a new track with clip starting from beginning (because there could not be selection on a empty track, so behaviour stays consistent) removing 
`this->SetOffset(orig.GetOffset());`
from Reinit will solve the problem with recording to a empty track, but i wonder what was the use of this line since Audacity does not allow clip moving during selection? I still have doubts about this line, being unnecessary for the stated description in the issue.

But this change will make a difference only in an unusual edge case, that wave tracks exit but none of them is chosen to record into.  Such a case might occur if all existing wave tracks are mono, but you must record stero, and so make a new track instead.

 The old behavior would be that recording would start at the latest of all end-times of existing tracks, or the left edge of the selection.  The new behavior would be to start recording always at the left edge of selection.
 But I think we can debate that edge case later.
"
1277,2021-07-11T20:05:37Z,2021-07-19T02:43:23Z,Paul-Licameli,0,22,14,1307,52,2,1,[],,0,643502.0,0,0,0,0,99513909.114022,,0,14,0,False,[],,,"Resolves: #1059

Definition and some uses of a facade, decoupling an interface for a few basic user interface services, from a wxWidgets based implementation that is injected at startup time.

This will allow certain important parts of the program to achieve UI toolkit neutrality, without yet undertaking the larger task of a toolkit-neutral rewrite of ShuttleGui.

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
","Why not use m prefix here? I think this can be placed into more generic Job/Task scheduler, this might be useful outside UI-related code Why not throw an exception here? Or assert that BasicUI::Get() isn't null? Considering client code scheduling some job while we don't have a UI instance.   Same here, client code may attempt to show an error while UI doesn't exist.  Maybe i'm getting ahead of myself, but isn't such interface mean that we do may have UI thread blocking behaviour? Why not BasicUI::Services::CallAfter? GetWindow? Isn't it introduces dependency between BasicUI and error reporting module? adding to_wxIconStyle and to_wxButtonStyle, will shorten the method, both enumerations look generic enough to be used in other places  Well... ErrorDialogOptions isn't really a CLASS (needing private data members, having some important invariant property, and requiring mutative member functions to preserve that invariant).

Rather, it's just a POD (plain-old-data) type, grouping some bunch of dumb data together, and not requiring any special invariant relations to hold among the values of the members.

In cases like that, I relax the rule about the ""m"" prefix.
 Maybe so.  Maybe that argues for factoring a base class (still abstract) which Services extends.

It's not needed yet for the purposes of the present pull request.
 Assertion would be wrong -- there is no proof that services must be installed before calling CallAfter.  That is not stated as a precondition anywhere.

Exception would be better, then.  But then that must be part of the stated contract of this function, and then anything using CallAfter would require a catch block, in it or at some higher level.

But an alternative might be that the no-op implementation saves all Actions in a list, and calls them (only) when Yield is called, and that could be stated in the comments as default behavior.  Then default CallAfter behavior could at least not lose the actions (but, require you to do something else to guarantee that they happen).

In practice this won't matter, given that we do install services in Audacity, but you are right to think about this library in isolation from that assumption about its usage.
 Unlike with the case of Action, this is a void-valued function that doesn't promise any side effect.  I think it is all right to have a default implementation that is no-op.
 That's a very good point.  This function in DBConnection should be called only in the main thread.  I think you can prove it is, from examining the call graph.  (But be cautions about DBConnection -- there are some things in there that happen in other threads).

And it should also be stated that BasicUI::GenericProgressDialog::Pulse() should only called in the main thread.  Likewise for the Update of ProgressDialog.

If there was a mistake (I don't think there was), it was not introduced by this PR.
 This PR may be inconsistent about whether it changes all existing uses to use BasicUI.  I do change all uses of ShowExceptionDialog.  I don't, for CallAfter.

I mean to change just enough uses of CallAfter, as needed, to make other libraries extracted later, platform-neutral by use of BasicUI.
 Maybe, it's just a name used only within this one .cpp file in a few places.

It is always getting a Window pointer for the purposes of parenting another new window.  Never for more general purpose.
 No!  This makes wxWidgetsBasicUI dependent (at build time) on error reporting -- very true.  But BasicUI, which only contains the definition of the abstract base class Services, is not (build time) dependent on it.  And cutting that build-time dependency is exactly the point of all of this -- so that other things can depend on the lib-basic-ui but not on wxWidgets (other than wxBase utilities).

wxWidgetsBasicUI belongs to the Audacity program, and at application startup, Services are installed.  This is a ""dependency injection.""

But the hope is that libraries depending on lib-basic-ui might be re-used in other programs that supply a different, Qt-based implementation of Services at startup.  And those other libraries, then, will not need modifiction.

 And maybe that doesn't answer your original question?  But the code of wxWidgetsBasicUI is also written so it can compile and run whether HAS_SENTRY_REPORTING is defined, or not.
 Need has not yet arisen to extract these functions.  If they were extracted, they should be used only privately inside wxWidgetsBasicUI.cpp, the only place in which we define a mapping from the BasicUI abstractions to the wxWidgets implementation of them.
 In fact, after rebasing to later master,  CallAfter isn't there, but CallAfterRecording instead, and that function won't be in BasicUI.
 I don't doubt that Pulse is called from the main thread. I'm saying that GenericProgressDialog::Pulse() along with wxMilliSleep blocks execution Sorry, my mistake, ofcourse it's wxWidgetsBasicUI and not BasicUI"
1315,2021-07-17T06:09:21Z,2021-07-19T01:04:33Z,kayazeren,0,0,1,444,1,0,0,[],,0,154512.0,0,0,0,0,99534675.677527,,0,1,0,False,[],,,"Turkish translation update release 3.0.3

Resolves: *(direct link to the issue)*

*(short description of the changes and the motivation to make the changes)*

<!-- Use ""x"" to fill the checkboxes below like [x] -->

- [x] I signed [CLA](https://www.audacityteam.org/cla/)
- [ ] I made sure the code compiles on my machine
- [ ] I made sure there are no unnecessary changes in the code
- [ ] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [ ] I made sure the commit message(s) contain a description and answer the question ""Why do those changes fix that particular issue?"" or ""Why are those changes really necessary as improvements?""
",
